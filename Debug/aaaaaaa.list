
aaaaaaa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c7c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003978  0801ca60  0801ca60  0002ca60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080203d8  080203d8  000303d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080203e0  080203e0  000303e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080203e4  080203e4  000303e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  080203e8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0005e960  24000098  08020480  00040098  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2405e9f8  08020480  0004e9f8  2**0
                  ALLOC
  9 .lwip_sec     00040200  30000000  30000000  00050000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY
 11 .debug_info   00046dc2  00000000  00000000  000400c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00009490  00000000  00000000  00086e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002e18  00000000  00000000  00090318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002c10  00000000  00000000  00093130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004d274  00000000  00000000  00095d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00049f5e  00000000  00000000  000e2fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00195173  00000000  00000000  0012cf12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  002c2085  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000ca04  00000000  00000000  002c20d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801ca48 	.word	0x0801ca48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	0801ca48 	.word	0x0801ca48

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000688:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 800068a:	4a2f      	ldr	r2, [pc, #188]	; (8000748 <MX_FDCAN1_Init+0xc4>)
 800068c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800068e:	4b2d      	ldr	r3, [pc, #180]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800069a:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 800069c:	2200      	movs	r2, #0
 800069e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006a0:	4b28      	ldr	r3, [pc, #160]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006a6:	4b27      	ldr	r3, [pc, #156]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 80006ae:	2210      	movs	r2, #16
 80006b0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006b2:	4b24      	ldr	r3, [pc, #144]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 80006ba:	2202      	movs	r2, #2
 80006bc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80006be:	4b21      	ldr	r3, [pc, #132]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 80006c0:	2202      	movs	r2, #2
 80006c2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80006d0:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80006d6:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 80006d8:	2201      	movs	r2, #1
 80006da:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 80006f6:	2204      	movs	r2, #4
 80006f8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 8000702:	2204      	movs	r2, #4
 8000704:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 8000708:	2200      	movs	r2, #0
 800070a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800070c:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 800070e:	2204      	movs	r2, #4
 8000710:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 8000714:	2200      	movs	r2, #0
 8000716:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 800072c:	2204      	movs	r2, #4
 800072e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_FDCAN1_Init+0xc0>)
 8000732:	f003 f917 	bl	8003964 <HAL_FDCAN_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800073c:	f000 fc36 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	240000b4 	.word	0x240000b4
 8000748:	4000a000 	.word	0x4000a000

0800074c <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000750:	4b2e      	ldr	r3, [pc, #184]	; (800080c <MX_FDCAN2_Init+0xc0>)
 8000752:	4a2f      	ldr	r2, [pc, #188]	; (8000810 <MX_FDCAN2_Init+0xc4>)
 8000754:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <MX_FDCAN2_Init+0xc0>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800075c:	4b2b      	ldr	r3, [pc, #172]	; (800080c <MX_FDCAN2_Init+0xc0>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_FDCAN2_Init+0xc0>)
 8000764:	2200      	movs	r2, #0
 8000766:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000768:	4b28      	ldr	r3, [pc, #160]	; (800080c <MX_FDCAN2_Init+0xc0>)
 800076a:	2200      	movs	r2, #0
 800076c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <MX_FDCAN2_Init+0xc0>)
 8000770:	2200      	movs	r2, #0
 8000772:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000774:	4b25      	ldr	r3, [pc, #148]	; (800080c <MX_FDCAN2_Init+0xc0>)
 8000776:	2210      	movs	r2, #16
 8000778:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800077a:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_FDCAN2_Init+0xc0>)
 800077c:	2201      	movs	r2, #1
 800077e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_FDCAN2_Init+0xc0>)
 8000782:	2202      	movs	r2, #2
 8000784:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_FDCAN2_Init+0xc0>)
 8000788:	2202      	movs	r2, #2
 800078a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_FDCAN2_Init+0xc0>)
 800078e:	2201      	movs	r2, #1
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_FDCAN2_Init+0xc0>)
 8000794:	2201      	movs	r2, #1
 8000796:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_FDCAN2_Init+0xc0>)
 800079a:	2201      	movs	r2, #1
 800079c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_FDCAN2_Init+0xc0>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_FDCAN2_Init+0xc0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_FDCAN2_Init+0xc0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_FDCAN2_Init+0xc0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_FDCAN2_Init+0xc0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_FDCAN2_Init+0xc0>)
 80007be:	2204      	movs	r2, #4
 80007c0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_FDCAN2_Init+0xc0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_FDCAN2_Init+0xc0>)
 80007ca:	2204      	movs	r2, #4
 80007cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_FDCAN2_Init+0xc0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_FDCAN2_Init+0xc0>)
 80007d6:	2204      	movs	r2, #4
 80007d8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_FDCAN2_Init+0xc0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_FDCAN2_Init+0xc0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_FDCAN2_Init+0xc0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_FDCAN2_Init+0xc0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_FDCAN2_Init+0xc0>)
 80007f4:	2204      	movs	r2, #4
 80007f6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_FDCAN2_Init+0xc0>)
 80007fa:	f003 f8b3 	bl	8003964 <HAL_FDCAN_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000804:	f000 fbd2 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	24000154 	.word	0x24000154
 8000810:	4000a400 	.word	0x4000a400

08000814 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b0ba      	sub	sp, #232	; 0xe8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800082c:	f107 0318 	add.w	r3, r7, #24
 8000830:	22bc      	movs	r2, #188	; 0xbc
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f01a ff78 	bl	801b72a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a52      	ldr	r2, [pc, #328]	; (8000988 <HAL_FDCAN_MspInit+0x174>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d14c      	bne.n	80008de <HAL_FDCAN_MspInit+0xca>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000844:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000848:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800084a:	2300      	movs	r3, #0
 800084c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000850:	f107 0318 	add.w	r3, r7, #24
 8000854:	4618      	mov	r0, r3
 8000856:	f004 fe61 	bl	800551c <HAL_RCCEx_PeriphCLKConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000860:	f000 fba4 	bl	8000fac <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000864:	4b49      	ldr	r3, [pc, #292]	; (800098c <HAL_FDCAN_MspInit+0x178>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	4a48      	ldr	r2, [pc, #288]	; (800098c <HAL_FDCAN_MspInit+0x178>)
 800086c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800086e:	4b47      	ldr	r3, [pc, #284]	; (800098c <HAL_FDCAN_MspInit+0x178>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d10e      	bne.n	8000894 <HAL_FDCAN_MspInit+0x80>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000876:	4b46      	ldr	r3, [pc, #280]	; (8000990 <HAL_FDCAN_MspInit+0x17c>)
 8000878:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800087c:	4a44      	ldr	r2, [pc, #272]	; (8000990 <HAL_FDCAN_MspInit+0x17c>)
 800087e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000882:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000886:	4b42      	ldr	r3, [pc, #264]	; (8000990 <HAL_FDCAN_MspInit+0x17c>)
 8000888:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800088c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000894:	4b3e      	ldr	r3, [pc, #248]	; (8000990 <HAL_FDCAN_MspInit+0x17c>)
 8000896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089a:	4a3d      	ldr	r2, [pc, #244]	; (8000990 <HAL_FDCAN_MspInit+0x17c>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a4:	4b3a      	ldr	r3, [pc, #232]	; (8000990 <HAL_FDCAN_MspInit+0x17c>)
 80008a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008b2:	2303      	movs	r3, #3
 80008b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80008ca:	2309      	movs	r3, #9
 80008cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80008d4:	4619      	mov	r1, r3
 80008d6:	482f      	ldr	r0, [pc, #188]	; (8000994 <HAL_FDCAN_MspInit+0x180>)
 80008d8:	f003 fba8 	bl	800402c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 80008dc:	e050      	b.n	8000980 <HAL_FDCAN_MspInit+0x16c>
  else if(fdcanHandle->Instance==FDCAN2)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a2d      	ldr	r2, [pc, #180]	; (8000998 <HAL_FDCAN_MspInit+0x184>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d14b      	bne.n	8000980 <HAL_FDCAN_MspInit+0x16c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80008e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f4:	f107 0318 	add.w	r3, r7, #24
 80008f8:	4618      	mov	r0, r3
 80008fa:	f004 fe0f 	bl	800551c <HAL_RCCEx_PeriphCLKConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <HAL_FDCAN_MspInit+0xf4>
      Error_Handler();
 8000904:	f000 fb52 	bl	8000fac <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000908:	4b20      	ldr	r3, [pc, #128]	; (800098c <HAL_FDCAN_MspInit+0x178>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	4a1f      	ldr	r2, [pc, #124]	; (800098c <HAL_FDCAN_MspInit+0x178>)
 8000910:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000912:	4b1e      	ldr	r3, [pc, #120]	; (800098c <HAL_FDCAN_MspInit+0x178>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d10e      	bne.n	8000938 <HAL_FDCAN_MspInit+0x124>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800091a:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <HAL_FDCAN_MspInit+0x17c>)
 800091c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000920:	4a1b      	ldr	r2, [pc, #108]	; (8000990 <HAL_FDCAN_MspInit+0x17c>)
 8000922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000926:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_FDCAN_MspInit+0x17c>)
 800092c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_FDCAN_MspInit+0x17c>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <HAL_FDCAN_MspInit+0x17c>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <HAL_FDCAN_MspInit+0x17c>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000956:	2360      	movs	r3, #96	; 0x60
 8000958:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800096e:	2309      	movs	r3, #9
 8000970:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000978:	4619      	mov	r1, r3
 800097a:	4808      	ldr	r0, [pc, #32]	; (800099c <HAL_FDCAN_MspInit+0x188>)
 800097c:	f003 fb56 	bl	800402c <HAL_GPIO_Init>
}
 8000980:	bf00      	nop
 8000982:	37e8      	adds	r7, #232	; 0xe8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	4000a000 	.word	0x4000a000
 800098c:	240001f4 	.word	0x240001f4
 8000990:	58024400 	.word	0x58024400
 8000994:	58020c00 	.word	0x58020c00
 8000998:	4000a400 	.word	0x4000a400
 800099c:	58020400 	.word	0x58020400

080009a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009a4:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <MX_FREERTOS_Init+0x38>)
 80009a6:	2100      	movs	r1, #0
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <MX_FREERTOS_Init+0x3c>)
 80009aa:	f009 fa5a 	bl	8009e62 <osThreadNew>
 80009ae:	4603      	mov	r3, r0
 80009b0:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <MX_FREERTOS_Init+0x40>)
 80009b2:	6013      	str	r3, [r2, #0]

  /* creation of Blink */
  BlinkHandle = osThreadNew(Blink_Init, NULL, &Blink_attributes);
 80009b4:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <MX_FREERTOS_Init+0x44>)
 80009b6:	2100      	movs	r1, #0
 80009b8:	480b      	ldr	r0, [pc, #44]	; (80009e8 <MX_FREERTOS_Init+0x48>)
 80009ba:	f009 fa52 	bl	8009e62 <osThreadNew>
 80009be:	4603      	mov	r3, r0
 80009c0:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <MX_FREERTOS_Init+0x4c>)
 80009c2:	6013      	str	r3, [r2, #0]

  /* creation of IDWGTrigger */
  IDWGTriggerHandle = osThreadNew(IDWGTrigger_Init, NULL, &IDWGTrigger_attributes);
 80009c4:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <MX_FREERTOS_Init+0x50>)
 80009c6:	2100      	movs	r1, #0
 80009c8:	480a      	ldr	r0, [pc, #40]	; (80009f4 <MX_FREERTOS_Init+0x54>)
 80009ca:	f009 fa4a 	bl	8009e62 <osThreadNew>
 80009ce:	4603      	mov	r3, r0
 80009d0:	4a09      	ldr	r2, [pc, #36]	; (80009f8 <MX_FREERTOS_Init+0x58>)
 80009d2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	080200b8 	.word	0x080200b8
 80009dc:	080009fd 	.word	0x080009fd
 80009e0:	240001f8 	.word	0x240001f8
 80009e4:	080200dc 	.word	0x080200dc
 80009e8:	08000a19 	.word	0x08000a19
 80009ec:	240001fc 	.word	0x240001fc
 80009f0:	08020100 	.word	0x08020100
 80009f4:	08000a65 	.word	0x08000a65
 80009f8:	24000200 	.word	0x24000200

080009fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a04:	f008 fb38 	bl	8009078 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
 // osThreadDef(TCPServer, tcpserver_init, osPriorityNormal, 0, 1024);
 // TCPServerHandle = osThreadCreate(osThread(TCPServer), NULL);
  tcpserver_init();
 8000a08:	f008 fb22 	bl	8009050 <tcpserver_init>


  for(;;)
  {

    osDelay(1000);
 8000a0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a10:	f009 fab9 	bl	8009f86 <osDelay>
 8000a14:	e7fa      	b.n	8000a0c <StartDefaultTask+0x10>
	...

08000a18 <Blink_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Blink_Init */
void Blink_Init(void *argument)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b092      	sub	sp, #72	; 0x48
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Blink_Init */
  /* Infinite loop */
	int cnt = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	647b      	str	r3, [r7, #68]	; 0x44
		  char msg[50];
		uint32_t tick;
  for(;;)
  {
	  tick=  osKernelGetTickCount();
 8000a24:	f009 fa08 	bl	8009e38 <osKernelGetTickCount>
 8000a28:	6438      	str	r0, [r7, #64]	; 0x40
	  int len = sprintf(msg,"MS Since last issue :%d\n\r",tick);
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a30:	490a      	ldr	r1, [pc, #40]	; (8000a5c <Blink_Init+0x44>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	f01a ffe6 	bl	801ba04 <siprintf>
 8000a38:	63f8      	str	r0, [r7, #60]	; 0x3c
	 	  HAL_UART_Transmit(&huart3, msg,len , 100);
 8000a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	f107 0108 	add.w	r1, r7, #8
 8000a42:	2364      	movs	r3, #100	; 0x64
 8000a44:	4806      	ldr	r0, [pc, #24]	; (8000a60 <Blink_Init+0x48>)
 8000a46:	f007 f966 	bl	8007d16 <HAL_UART_Transmit>
	 	  cnt++;
 8000a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	647b      	str	r3, [r7, #68]	; 0x44
    osDelay(1000);
 8000a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a54:	f009 fa97 	bl	8009f86 <osDelay>
  {
 8000a58:	e7e4      	b.n	8000a24 <Blink_Init+0xc>
 8000a5a:	bf00      	nop
 8000a5c:	0801ca80 	.word	0x0801ca80
 8000a60:	24000300 	.word	0x24000300

08000a64 <IDWGTrigger_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IDWGTrigger_Init */
void IDWGTrigger_Init(void *argument)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IDWGTrigger_Init */
  /* Infinite loop */
  for(;;)
  {
	  HAL_IWDG_Refresh(&hiwdg1);
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <IDWGTrigger_Init+0x18>)
 8000a6e:	f003 fd0f 	bl	8004490 <HAL_IWDG_Refresh>
    osDelay(1);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f009 fa87 	bl	8009f86 <osDelay>
	  HAL_IWDG_Refresh(&hiwdg1);
 8000a78:	e7f8      	b.n	8000a6c <IDWGTrigger_Init+0x8>
 8000a7a:	bf00      	nop
 8000a7c:	24000204 	.word	0x24000204

08000a80 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08c      	sub	sp, #48	; 0x30
 8000a84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	4b69      	ldr	r3, [pc, #420]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	4a67      	ldr	r2, [pc, #412]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa6:	4b65      	ldr	r3, [pc, #404]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	61bb      	str	r3, [r7, #24]
 8000ab2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab4:	4b61      	ldr	r3, [pc, #388]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aba:	4a60      	ldr	r2, [pc, #384]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac4:	4b5d      	ldr	r3, [pc, #372]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b5a      	ldr	r3, [pc, #360]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	4a58      	ldr	r2, [pc, #352]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae2:	4b56      	ldr	r3, [pc, #344]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af0:	4b52      	ldr	r3, [pc, #328]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af6:	4a51      	ldr	r2, [pc, #324]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b00:	4b4e      	ldr	r3, [pc, #312]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	4b4b      	ldr	r3, [pc, #300]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b14:	4a49      	ldr	r2, [pc, #292]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000b16:	f043 0308 	orr.w	r3, r3, #8
 8000b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1e:	4b47      	ldr	r3, [pc, #284]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2c:	4b43      	ldr	r3, [pc, #268]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b32:	4a42      	ldr	r2, [pc, #264]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3c:	4b3f      	ldr	r3, [pc, #252]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b4a:	4b3c      	ldr	r3, [pc, #240]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b50:	4a3a      	ldr	r2, [pc, #232]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000b52:	f043 0310 	orr.w	r3, r3, #16
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5a:	4b38      	ldr	r3, [pc, #224]	; (8000c3c <MX_GPIO_Init+0x1bc>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	f003 0310 	and.w	r3, r3, #16
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4834      	ldr	r0, [pc, #208]	; (8000c40 <MX_GPIO_Init+0x1c0>)
 8000b6e:	f003 fc0d 	bl	800438c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b78:	4832      	ldr	r0, [pc, #200]	; (8000c44 <MX_GPIO_Init+0x1c4>)
 8000b7a:	f003 fc07 	bl	800438c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2102      	movs	r1, #2
 8000b82:	4831      	ldr	r0, [pc, #196]	; (8000c48 <MX_GPIO_Init+0x1c8>)
 8000b84:	f003 fc02 	bl	800438c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	482b      	ldr	r0, [pc, #172]	; (8000c4c <MX_GPIO_Init+0x1cc>)
 8000b9e:	f003 fa45 	bl	800402c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4821      	ldr	r0, [pc, #132]	; (8000c40 <MX_GPIO_Init+0x1c0>)
 8000bba:	f003 fa37 	bl	800402c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481b      	ldr	r0, [pc, #108]	; (8000c44 <MX_GPIO_Init+0x1c4>)
 8000bd8:	f003 fa28 	bl	800402c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4817      	ldr	r0, [pc, #92]	; (8000c50 <MX_GPIO_Init+0x1d0>)
 8000bf2:	f003 fa1b 	bl	800402c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000bf6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c08:	230a      	movs	r3, #10
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	4810      	ldr	r0, [pc, #64]	; (8000c54 <MX_GPIO_Init+0x1d4>)
 8000c14:	f003 fa0a 	bl	800402c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <MX_GPIO_Init+0x1c8>)
 8000c30:	f003 f9fc 	bl	800402c <HAL_GPIO_Init>

}
 8000c34:	bf00      	nop
 8000c36:	3730      	adds	r7, #48	; 0x30
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	58024400 	.word	0x58024400
 8000c40:	58020400 	.word	0x58020400
 8000c44:	58020c00 	.word	0x58020c00
 8000c48:	58021000 	.word	0x58021000
 8000c4c:	58020800 	.word	0x58020800
 8000c50:	58021800 	.word	0x58021800
 8000c54:	58020000 	.word	0x58020000

08000c58 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_IWDG1_Init+0x34>)
 8000c5e:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <MX_IWDG1_Init+0x38>)
 8000c60:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_16;
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <MX_IWDG1_Init+0x34>)
 8000c64:	2202      	movs	r2, #2
 8000c66:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_IWDG1_Init+0x34>)
 8000c6a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c6e:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 4095;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_IWDG1_Init+0x34>)
 8000c72:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c76:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_IWDG1_Init+0x34>)
 8000c7a:	f003 fbba 	bl	80043f2 <HAL_IWDG_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8000c84:	f000 f992 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	24000204 	.word	0x24000204
 8000c90:	58004800 	.word	0x58004800

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c9a:	f000 f939 	bl	8000f10 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c9e:	4b49      	ldr	r3, [pc, #292]	; (8000dc4 <main+0x130>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d11b      	bne.n	8000ce2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000caa:	f3bf 8f4f 	dsb	sy
}
 8000cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cb0:	f3bf 8f6f 	isb	sy
}
 8000cb4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000cb6:	4b43      	ldr	r3, [pc, #268]	; (8000dc4 <main+0x130>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cbe:	f3bf 8f4f 	dsb	sy
}
 8000cc2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cc4:	f3bf 8f6f 	isb	sy
}
 8000cc8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cca:	4b3e      	ldr	r3, [pc, #248]	; (8000dc4 <main+0x130>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	4a3d      	ldr	r2, [pc, #244]	; (8000dc4 <main+0x130>)
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cd6:	f3bf 8f4f 	dsb	sy
}
 8000cda:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cdc:	f3bf 8f6f 	isb	sy
}
 8000ce0:	e000      	b.n	8000ce4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ce2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ce4:	4b37      	ldr	r3, [pc, #220]	; (8000dc4 <main+0x130>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d138      	bne.n	8000d62 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000cf0:	4b34      	ldr	r3, [pc, #208]	; (8000dc4 <main+0x130>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf8:	f3bf 8f4f 	dsb	sy
}
 8000cfc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <main+0x130>)
 8000d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d04:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	0b5b      	lsrs	r3, r3, #13
 8000d0a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d0e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	08db      	lsrs	r3, r3, #3
 8000d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d18:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	015a      	lsls	r2, r3, #5
 8000d1e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d22:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d28:	4926      	ldr	r1, [pc, #152]	; (8000dc4 <main+0x130>)
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	1e5a      	subs	r2, r3, #1
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1ef      	bne.n	8000d1a <main+0x86>
    } while(sets-- != 0U);
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1e5a      	subs	r2, r3, #1
 8000d3e:	60ba      	str	r2, [r7, #8]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1e5      	bne.n	8000d10 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d44:	f3bf 8f4f 	dsb	sy
}
 8000d48:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <main+0x130>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	4a1d      	ldr	r2, [pc, #116]	; (8000dc4 <main+0x130>)
 8000d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d54:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d56:	f3bf 8f4f 	dsb	sy
}
 8000d5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d5c:	f3bf 8f6f 	isb	sy
}
 8000d60:	e000      	b.n	8000d64 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d62:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d64:	f000 fe62 	bl	8001a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d68:	f000 f838 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6c:	f7ff fe88 	bl	8000a80 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d70:	f000 fc20 	bl	80015b4 <MX_USART3_UART_Init>
  MX_IWDG1_Init();
 8000d74:	f7ff ff70 	bl	8000c58 <MX_IWDG1_Init>
  MX_FDCAN1_Init();
 8000d78:	f7ff fc84 	bl	8000684 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000d7c:	f7ff fce6 	bl	800074c <MX_FDCAN2_Init>
  MX_TIM12_Init();
 8000d80:	f000 fb26 	bl	80013d0 <MX_TIM12_Init>
  MX_TIM16_Init();
 8000d84:	f000 fb6a 	bl	800145c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart3, "plz\n\r", 6, 10);
 8000d88:	230a      	movs	r3, #10
 8000d8a:	2206      	movs	r2, #6
 8000d8c:	490e      	ldr	r1, [pc, #56]	; (8000dc8 <main+0x134>)
 8000d8e:	480f      	ldr	r0, [pc, #60]	; (8000dcc <main+0x138>)
 8000d90:	f006 ffc1 	bl	8007d16 <HAL_UART_Transmit>


  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000d94:	2100      	movs	r1, #0
 8000d96:	480e      	ldr	r0, [pc, #56]	; (8000dd0 <main+0x13c>)
 8000d98:	f006 f850 	bl	8006e3c <HAL_TIM_PWM_Start>
  TIM12->CCR1 = TIM12->ARR *120/255;
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <main+0x140>)
 8000d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000da0:	4613      	mov	r3, r2
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	1a9b      	subs	r3, r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	4619      	mov	r1, r3
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <main+0x140>)
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <main+0x144>)
 8000dae:	fba3 1301 	umull	r1, r3, r3, r1
 8000db2:	09db      	lsrs	r3, r3, #7
 8000db4:	6353      	str	r3, [r2, #52]	; 0x34
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000db6:	f008 fff5 	bl	8009da4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000dba:	f7ff fdf1 	bl	80009a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000dbe:	f009 f815 	bl	8009dec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <main+0x12e>
 8000dc4:	e000ed00 	.word	0xe000ed00
 8000dc8:	0801ca9c 	.word	0x0801ca9c
 8000dcc:	24000300 	.word	0x24000300
 8000dd0:	24000268 	.word	0x24000268
 8000dd4:	40001800 	.word	0x40001800
 8000dd8:	80808081 	.word	0x80808081

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b09c      	sub	sp, #112	; 0x70
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de6:	224c      	movs	r2, #76	; 0x4c
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f01a fc9d 	bl	801b72a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2220      	movs	r2, #32
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f01a fc97 	bl	801b72a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000dfc:	2002      	movs	r0, #2
 8000dfe:	f003 fb57 	bl	80044b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e02:	2300      	movs	r3, #0
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <SystemClock_Config+0xf8>)
 8000e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0a:	4a32      	ldr	r2, [pc, #200]	; (8000ed4 <SystemClock_Config+0xf8>)
 8000e0c:	f023 0301 	bic.w	r3, r3, #1
 8000e10:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e12:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <SystemClock_Config+0xf8>)
 8000e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <SystemClock_Config+0xfc>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a2d      	ldr	r2, [pc, #180]	; (8000ed8 <SystemClock_Config+0xfc>)
 8000e22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <SystemClock_Config+0xfc>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e34:	bf00      	nop
 8000e36:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <SystemClock_Config+0xfc>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e42:	d1f8      	bne.n	8000e36 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000e44:	230b      	movs	r3, #11
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e52:	2340      	movs	r3, #64	; 0x40
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e56:	2301      	movs	r3, #1
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000e62:	230a      	movs	r3, #10
 8000e64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000e66:	237d      	movs	r3, #125	; 0x7d
 8000e68:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e72:	2302      	movs	r3, #2
 8000e74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e76:	2308      	movs	r3, #8
 8000e78:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 fb4c 	bl	8004524 <HAL_RCC_OscConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e92:	f000 f88b 	bl	8000fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e96:	233f      	movs	r3, #63	; 0x3f
 8000e98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ea6:	2340      	movs	r3, #64	; 0x40
 8000ea8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000eaa:	2340      	movs	r3, #64	; 0x40
 8000eac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000eb4:	2340      	movs	r3, #64	; 0x40
 8000eb6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2102      	movs	r1, #2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f003 ff5f 	bl	8004d80 <HAL_RCC_ClockConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000ec8:	f000 f870 	bl	8000fac <Error_Handler>
  }
}
 8000ecc:	bf00      	nop
 8000ece:	3770      	adds	r7, #112	; 0x70
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	58000400 	.word	0x58000400
 8000ed8:	58024800 	.word	0x58024800

08000edc <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
volatile unsigned long ulHighFrequencyTimerTicks;

void configureTimerForRunTimeStats(void) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  ulHighFrequencyTimerTicks = 0;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <configureTimerForRunTimeStats+0x14>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim16);
 8000ee6:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <configureTimerForRunTimeStats+0x18>)
 8000ee8:	f005 fed8 	bl	8006c9c <HAL_TIM_Base_Start_IT>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	24000214 	.word	0x24000214
 8000ef4:	240002b4 	.word	0x240002b4

08000ef8 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void) {
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ulHighFrequencyTimerTicks;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <getRunTimeCounterValue+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	24000214 	.word	0x24000214

08000f10 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f16:	463b      	mov	r3, r7
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f22:	f000 fedf 	bl	8001ce4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f26:	2301      	movs	r3, #1
 8000f28:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <MPU_Config+0x74>)
 8000f30:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000f32:	230e      	movs	r3, #14
 8000f34:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f42:	2301      	movs	r3, #1
 8000f44:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f52:	463b      	mov	r3, r7
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 fefd 	bl	8001d54 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000f5e:	2307      	movs	r3, #7
 8000f60:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f66:	2301      	movs	r3, #1
 8000f68:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 feef 	bl	8001d54 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f76:	2004      	movs	r0, #4
 8000f78:	f000 fecc 	bl	8001d14 <HAL_MPU_Enable>

}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	30040000 	.word	0x30040000

08000f88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f9a:	f000 fd83 	bl	8001aa4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40010000 	.word	0x40010000

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x8>
	...

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_MspInit+0x38>)
 8000fc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <HAL_MspInit+0x38>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_MspInit+0x38>)
 8000fd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f06f 0001 	mvn.w	r0, #1
 8000fe4:	f000 fe56 	bl	8001c94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	58024400 	.word	0x58024400

08000ff4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	; 0x38
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b0f      	cmp	r3, #15
 8001000:	d844      	bhi.n	800108c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001002:	2200      	movs	r2, #0
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	2019      	movs	r0, #25
 8001008:	f000 fe44 	bl	8001c94 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800100c:	2019      	movs	r0, #25
 800100e:	f000 fe5b 	bl	8001cc8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001012:	4a24      	ldr	r2, [pc, #144]	; (80010a4 <HAL_InitTick+0xb0>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <HAL_InitTick+0xb4>)
 800101a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800101e:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <HAL_InitTick+0xb4>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <HAL_InitTick+0xb4>)
 800102a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001036:	f107 020c 	add.w	r2, r7, #12
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f004 fa29 	bl	8005498 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001046:	f004 fa11 	bl	800546c <HAL_RCC_GetPCLK2Freq>
 800104a:	4603      	mov	r3, r0
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001052:	4a16      	ldr	r2, [pc, #88]	; (80010ac <HAL_InitTick+0xb8>)
 8001054:	fba2 2303 	umull	r2, r3, r2, r3
 8001058:	0c9b      	lsrs	r3, r3, #18
 800105a:	3b01      	subs	r3, #1
 800105c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_InitTick+0xbc>)
 8001060:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <HAL_InitTick+0xc0>)
 8001062:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0xbc>)
 8001066:	f240 32e7 	movw	r2, #999	; 0x3e7
 800106a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800106c:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <HAL_InitTick+0xbc>)
 800106e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001070:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_InitTick+0xbc>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001078:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <HAL_InitTick+0xbc>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800107e:	480c      	ldr	r0, [pc, #48]	; (80010b0 <HAL_InitTick+0xbc>)
 8001080:	f005 fdb4 	bl	8006bec <HAL_TIM_Base_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d107      	bne.n	800109a <HAL_InitTick+0xa6>
 800108a:	e001      	b.n	8001090 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e005      	b.n	800109c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001090:	4807      	ldr	r0, [pc, #28]	; (80010b0 <HAL_InitTick+0xbc>)
 8001092:	f005 fe03 	bl	8006c9c <HAL_TIM_Base_Start_IT>
 8001096:	4603      	mov	r3, r0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3738      	adds	r7, #56	; 0x38
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	24000008 	.word	0x24000008
 80010a8:	58024400 	.word	0x58024400
 80010ac:	431bde83 	.word	0x431bde83
 80010b0:	24000218 	.word	0x24000218
 80010b4:	40010000 	.word	0x40010000

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <NMI_Handler+0x4>

080010be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <MemManage_Handler+0x4>

080010ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <TIM1_UP_IRQHandler+0x10>)
 80010ea:	f005 ffb5 	bl	8007058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	24000218 	.word	0x24000218

080010f8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <ETH_IRQHandler+0x10>)
 80010fe:	f001 fa93 	bl	8002628 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	24004ed8 	.word	0x24004ed8

0800110c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	ulHighFrequencyTimerTicks++;
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <TIM16_IRQHandler+0x18>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	4a03      	ldr	r2, [pc, #12]	; (8001124 <TIM16_IRQHandler+0x18>)
 8001118:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800111a:	4803      	ldr	r0, [pc, #12]	; (8001128 <TIM16_IRQHandler+0x1c>)
 800111c:	f005 ff9c 	bl	8007058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	24000214 	.word	0x24000214
 8001128:	240002b4 	.word	0x240002b4

0800112c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	return 1;
 8001130:	2301      	movs	r3, #1
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_kill>:

int _kill(int pid, int sig)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <_kill+0x20>)
 8001148:	2216      	movs	r2, #22
 800114a:	601a      	str	r2, [r3, #0]
	return -1;
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	2405e9f4 	.word	0x2405e9f4

08001160 <_exit>:

void _exit (int status)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ffe5 	bl	800113c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001172:	e7fe      	b.n	8001172 <_exit+0x12>

08001174 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	e00a      	b.n	800119c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001186:	f3af 8000 	nop.w
 800118a:	4601      	mov	r1, r0
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	60ba      	str	r2, [r7, #8]
 8001192:	b2ca      	uxtb	r2, r1
 8001194:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	3301      	adds	r3, #1
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	dbf0      	blt.n	8001186 <_read+0x12>
	}

return len;
 80011a4:	687b      	ldr	r3, [r7, #4]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	e009      	b.n	80011d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	60ba      	str	r2, [r7, #8]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3301      	adds	r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	429a      	cmp	r2, r3
 80011da:	dbf1      	blt.n	80011c0 <_write+0x12>
	}
	return len;
 80011dc:	687b      	ldr	r3, [r7, #4]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <_close>:

int _close(int file)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
	return -1;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800120e:	605a      	str	r2, [r3, #4]
	return 0;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <_isatty>:

int _isatty(int file)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
	return 1;
 8001226:	2301      	movs	r3, #1
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
	return 0;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001258:	4a14      	ldr	r2, [pc, #80]	; (80012ac <_sbrk+0x5c>)
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <_sbrk+0x60>)
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <_sbrk+0x64>)
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <_sbrk+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	429a      	cmp	r2, r3
 800127e:	d205      	bcs.n	800128c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <_sbrk+0x6c>)
 8001282:	220c      	movs	r2, #12
 8001284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	e009      	b.n	80012a0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <_sbrk+0x64>)
 800129c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	24080000 	.word	0x24080000
 80012b0:	00000400 	.word	0x00000400
 80012b4:	24000264 	.word	0x24000264
 80012b8:	2405e9f8 	.word	0x2405e9f8
 80012bc:	2405e9f4 	.word	0x2405e9f4

080012c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012c4:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <SystemInit+0xe4>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ca:	4a36      	ldr	r2, [pc, #216]	; (80013a4 <SystemInit+0xe4>)
 80012cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012d4:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <SystemInit+0xe8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	2b06      	cmp	r3, #6
 80012de:	d807      	bhi.n	80012f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012e0:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <SystemInit+0xe8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f023 030f 	bic.w	r3, r3, #15
 80012e8:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <SystemInit+0xe8>)
 80012ea:	f043 0307 	orr.w	r3, r3, #7
 80012ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012f0:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <SystemInit+0xec>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a2d      	ldr	r2, [pc, #180]	; (80013ac <SystemInit+0xec>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012fc:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <SystemInit+0xec>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <SystemInit+0xec>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4929      	ldr	r1, [pc, #164]	; (80013ac <SystemInit+0xec>)
 8001308:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <SystemInit+0xf0>)
 800130a:	4013      	ands	r3, r2
 800130c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <SystemInit+0xe8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800131a:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <SystemInit+0xe8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 030f 	bic.w	r3, r3, #15
 8001322:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <SystemInit+0xe8>)
 8001324:	f043 0307 	orr.w	r3, r3, #7
 8001328:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <SystemInit+0xec>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <SystemInit+0xec>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001336:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <SystemInit+0xec>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <SystemInit+0xec>)
 800133e:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <SystemInit+0xf4>)
 8001340:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <SystemInit+0xec>)
 8001344:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <SystemInit+0xf8>)
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <SystemInit+0xec>)
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <SystemInit+0xfc>)
 800134c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <SystemInit+0xec>)
 8001350:	2200      	movs	r2, #0
 8001352:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <SystemInit+0xec>)
 8001356:	4a19      	ldr	r2, [pc, #100]	; (80013bc <SystemInit+0xfc>)
 8001358:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <SystemInit+0xec>)
 800135c:	2200      	movs	r2, #0
 800135e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <SystemInit+0xec>)
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <SystemInit+0xfc>)
 8001364:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <SystemInit+0xec>)
 8001368:	2200      	movs	r2, #0
 800136a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <SystemInit+0xec>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <SystemInit+0xec>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001376:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <SystemInit+0xec>)
 800137a:	2200      	movs	r2, #0
 800137c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <SystemInit+0x100>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <SystemInit+0x104>)
 8001384:	4013      	ands	r3, r2
 8001386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800138a:	d202      	bcs.n	8001392 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800138c:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <SystemInit+0x108>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <SystemInit+0x10c>)
 8001394:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001398:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00
 80013a8:	52002000 	.word	0x52002000
 80013ac:	58024400 	.word	0x58024400
 80013b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80013b4:	02020200 	.word	0x02020200
 80013b8:	01ff0000 	.word	0x01ff0000
 80013bc:	01010280 	.word	0x01010280
 80013c0:	5c001000 	.word	0x5c001000
 80013c4:	ffff0000 	.word	0xffff0000
 80013c8:	51008108 	.word	0x51008108
 80013cc:	52004000 	.word	0x52004000

080013d0 <MX_TIM12_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim16;

/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	615a      	str	r2, [r3, #20]
 80013e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_TIM12_Init+0x84>)
 80013ea:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <MX_TIM12_Init+0x88>)
 80013ec:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_TIM12_Init+0x84>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_TIM12_Init+0x84>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_TIM12_Init+0x84>)
 80013fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001400:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_TIM12_Init+0x84>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_TIM12_Init+0x84>)
 800140a:	2280      	movs	r2, #128	; 0x80
 800140c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800140e:	4811      	ldr	r0, [pc, #68]	; (8001454 <MX_TIM12_Init+0x84>)
 8001410:	f005 fcbc 	bl	8006d8c <HAL_TIM_PWM_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800141a:	f7ff fdc7 	bl	8000fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800141e:	2360      	movs	r3, #96	; 0x60
 8001420:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <MX_TIM12_Init+0x84>)
 8001436:	f005 ff2f 	bl	8007298 <HAL_TIM_PWM_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001440:	f7ff fdb4 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001444:	4803      	ldr	r0, [pc, #12]	; (8001454 <MX_TIM12_Init+0x84>)
 8001446:	f000 f879 	bl	800153c <HAL_TIM_MspPostInit>

}
 800144a:	bf00      	nop
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	24000268 	.word	0x24000268
 8001458:	40001800 	.word	0x40001800

0800145c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <MX_TIM16_Init+0x44>)
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <MX_TIM16_Init+0x48>)
 8001464:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_TIM16_Init+0x44>)
 8001468:	2200      	movs	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_TIM16_Init+0x44>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_TIM16_Init+0x44>)
 8001474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001478:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_TIM16_Init+0x44>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <MX_TIM16_Init+0x44>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_TIM16_Init+0x44>)
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <MX_TIM16_Init+0x44>)
 800148e:	f005 fbad 	bl	8006bec <HAL_TIM_Base_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001498:	f7ff fd88 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	240002b4 	.word	0x240002b4
 80014a4:	40014400 	.word	0x40014400

080014a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d10e      	bne.n	80014d8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_TIM_PWM_MspInit+0x40>)
 80014bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014c0:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <HAL_TIM_PWM_MspInit+0x40>)
 80014c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <HAL_TIM_PWM_MspInit+0x40>)
 80014cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40001800 	.word	0x40001800
 80014e8:	58024400 	.word	0x58024400

080014ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <HAL_TIM_Base_MspInit+0x48>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d116      	bne.n	800152c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_TIM_Base_MspInit+0x4c>)
 8001500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001504:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <HAL_TIM_Base_MspInit+0x4c>)
 8001506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_TIM_Base_MspInit+0x4c>)
 8001510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 5, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2105      	movs	r1, #5
 8001520:	2075      	movs	r0, #117	; 0x75
 8001522:	f000 fbb7 	bl	8001c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001526:	2075      	movs	r0, #117	; 0x75
 8001528:	f000 fbce 	bl	8001cc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800152c:	bf00      	nop
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40014400 	.word	0x40014400
 8001538:	58024400 	.word	0x58024400

0800153c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a13      	ldr	r2, [pc, #76]	; (80015a8 <HAL_TIM_MspPostInit+0x6c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d11f      	bne.n	800159e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <HAL_TIM_MspPostInit+0x70>)
 8001560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001564:	4a11      	ldr	r2, [pc, #68]	; (80015ac <HAL_TIM_MspPostInit+0x70>)
 8001566:	f043 0302 	orr.w	r3, r3, #2
 800156a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_TIM_MspPostInit+0x70>)
 8001570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800157c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001580:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800158e:	2302      	movs	r3, #2
 8001590:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <HAL_TIM_MspPostInit+0x74>)
 800159a:	f002 fd47 	bl	800402c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800159e:	bf00      	nop
 80015a0:	3720      	adds	r7, #32
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40001800 	.word	0x40001800
 80015ac:	58024400 	.word	0x58024400
 80015b0:	58020400 	.word	0x58020400

080015b4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015b8:	4b22      	ldr	r3, [pc, #136]	; (8001644 <MX_USART3_UART_Init+0x90>)
 80015ba:	4a23      	ldr	r2, [pc, #140]	; (8001648 <MX_USART3_UART_Init+0x94>)
 80015bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <MX_USART3_UART_Init+0x90>)
 80015c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MX_USART3_UART_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <MX_USART3_UART_Init+0x90>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <MX_USART3_UART_Init+0x90>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_USART3_UART_Init+0x90>)
 80015da:	220c      	movs	r2, #12
 80015dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_USART3_UART_Init+0x90>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <MX_USART3_UART_Init+0x90>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_USART3_UART_Init+0x90>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_USART3_UART_Init+0x90>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <MX_USART3_UART_Init+0x90>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015fc:	4811      	ldr	r0, [pc, #68]	; (8001644 <MX_USART3_UART_Init+0x90>)
 80015fe:	f006 fb3a 	bl	8007c76 <HAL_UART_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001608:	f7ff fcd0 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800160c:	2100      	movs	r1, #0
 800160e:	480d      	ldr	r0, [pc, #52]	; (8001644 <MX_USART3_UART_Init+0x90>)
 8001610:	f007 fb6e 	bl	8008cf0 <HAL_UARTEx_SetTxFifoThreshold>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800161a:	f7ff fcc7 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800161e:	2100      	movs	r1, #0
 8001620:	4808      	ldr	r0, [pc, #32]	; (8001644 <MX_USART3_UART_Init+0x90>)
 8001622:	f007 fba3 	bl	8008d6c <HAL_UARTEx_SetRxFifoThreshold>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800162c:	f7ff fcbe 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_USART3_UART_Init+0x90>)
 8001632:	f007 fb24 	bl	8008c7e <HAL_UARTEx_DisableFifoMode>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800163c:	f7ff fcb6 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	24000300 	.word	0x24000300
 8001648:	40004800 	.word	0x40004800

0800164c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b0b8      	sub	sp, #224	; 0xe0
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	22bc      	movs	r2, #188	; 0xbc
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f01a f85c 	bl	801b72a <memset>
  if(uartHandle->Instance==USART3)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a25      	ldr	r2, [pc, #148]	; (800170c <HAL_UART_MspInit+0xc0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d142      	bne.n	8001702 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800167c:	2302      	movs	r3, #2
 800167e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	4618      	mov	r0, r3
 800168c:	f003 ff46 	bl	800551c <HAL_RCCEx_PeriphCLKConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001696:	f7ff fc89 	bl	8000fac <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_UART_MspInit+0xc4>)
 800169c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <HAL_UART_MspInit+0xc4>)
 80016a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_UART_MspInit+0xc4>)
 80016ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_UART_MspInit+0xc4>)
 80016ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016be:	4a14      	ldr	r2, [pc, #80]	; (8001710 <HAL_UART_MspInit+0xc4>)
 80016c0:	f043 0308 	orr.w	r3, r3, #8
 80016c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_UART_MspInit+0xc4>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016f0:	2307      	movs	r3, #7
 80016f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <HAL_UART_MspInit+0xc8>)
 80016fe:	f002 fc95 	bl	800402c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001702:	bf00      	nop
 8001704:	37e0      	adds	r7, #224	; 0xe0
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40004800 	.word	0x40004800
 8001710:	58024400 	.word	0x58024400
 8001714:	58020c00 	.word	0x58020c00

08001718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001750 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800171c:	f7ff fdd0 	bl	80012c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001722:	490d      	ldr	r1, [pc, #52]	; (8001758 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001724:	4a0d      	ldr	r2, [pc, #52]	; (800175c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001738:	4c0a      	ldr	r4, [pc, #40]	; (8001764 <LoopFillZerobss+0x22>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001746:	f019 ff91 	bl	801b66c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174a:	f7ff faa3 	bl	8000c94 <main>
  bx  lr
 800174e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001750:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001754:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001758:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 800175c:	080203e8 	.word	0x080203e8
  ldr r2, =_sbss
 8001760:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8001764:	2405e9f8 	.word	0x2405e9f8

08001768 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC3_IRQHandler>

0800176a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00b      	beq.n	8001792 <LAN8742_RegisterBusIO+0x28>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <LAN8742_RegisterBusIO+0x28>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <LAN8742_RegisterBusIO+0x28>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d102      	bne.n	8001798 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e014      	b.n	80017c2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d17c      	bne.n	80018e8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2220      	movs	r2, #32
 8001800:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	e01c      	b.n	8001842 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	f107 0208 	add.w	r2, r7, #8
 8001810:	2112      	movs	r1, #18
 8001812:	6978      	ldr	r0, [r7, #20]
 8001814:	4798      	blx	r3
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	da03      	bge.n	8001824 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800181c:	f06f 0304 	mvn.w	r3, #4
 8001820:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001822:	e00b      	b.n	800183c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f003 031f 	and.w	r3, r3, #31
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	429a      	cmp	r2, r3
 800182e:	d105      	bne.n	800183c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
         break;
 800183a:	e005      	b.n	8001848 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3301      	adds	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b1f      	cmp	r3, #31
 8001846:	d9df      	bls.n	8001808 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b1f      	cmp	r3, #31
 800184e:	d902      	bls.n	8001856 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001850:	f06f 0302 	mvn.w	r3, #2
 8001854:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d145      	bne.n	80018e8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6810      	ldr	r0, [r2, #0]
 8001864:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001868:	2100      	movs	r1, #0
 800186a:	4798      	blx	r3
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	db37      	blt.n	80018e2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6810      	ldr	r0, [r2, #0]
 800187a:	f107 0208 	add.w	r2, r7, #8
 800187e:	2100      	movs	r1, #0
 8001880:	4798      	blx	r3
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	db28      	blt.n	80018da <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4798      	blx	r3
 800188e:	4603      	mov	r3, r0
 8001890:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001892:	e01c      	b.n	80018ce <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4798      	blx	r3
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018a6:	d80e      	bhi.n	80018c6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6810      	ldr	r0, [r2, #0]
 80018b0:	f107 0208 	add.w	r2, r7, #8
 80018b4:	2100      	movs	r1, #0
 80018b6:	4798      	blx	r3
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	da07      	bge.n	80018ce <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80018be:	f06f 0304 	mvn.w	r3, #4
 80018c2:	613b      	str	r3, [r7, #16]
                 break;
 80018c4:	e010      	b.n	80018e8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80018c6:	f06f 0301 	mvn.w	r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
               break;
 80018cc:	e00c      	b.n	80018e8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1dd      	bne.n	8001894 <LAN8742_Init+0xc6>
 80018d8:	e006      	b.n	80018e8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80018da:	f06f 0304 	mvn.w	r3, #4
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	e002      	b.n	80018e8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80018e2:	f06f 0303 	mvn.w	r3, #3
 80018e6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d112      	bne.n	8001914 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	4798      	blx	r3
 80018f4:	4603      	mov	r3, r0
 80018f6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80018f8:	bf00      	nop
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	4798      	blx	r3
 8001900:	4603      	mov	r3, r0
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800190c:	d9f5      	bls.n	80018fa <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001914:	693b      	ldr	r3, [r7, #16]
 }
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6810      	ldr	r0, [r2, #0]
 8001932:	f107 020c 	add.w	r2, r7, #12
 8001936:	2101      	movs	r1, #1
 8001938:	4798      	blx	r3
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	da02      	bge.n	8001946 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001940:	f06f 0304 	mvn.w	r3, #4
 8001944:	e06e      	b.n	8001a24 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6810      	ldr	r0, [r2, #0]
 800194e:	f107 020c 	add.w	r2, r7, #12
 8001952:	2101      	movs	r1, #1
 8001954:	4798      	blx	r3
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	da02      	bge.n	8001962 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800195c:	f06f 0304 	mvn.w	r3, #4
 8001960:	e060      	b.n	8001a24 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800196c:	2301      	movs	r3, #1
 800196e:	e059      	b.n	8001a24 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6810      	ldr	r0, [r2, #0]
 8001978:	f107 020c 	add.w	r2, r7, #12
 800197c:	2100      	movs	r1, #0
 800197e:	4798      	blx	r3
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	da02      	bge.n	800198c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001986:	f06f 0304 	mvn.w	r3, #4
 800198a:	e04b      	b.n	8001a24 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d11b      	bne.n	80019ce <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <LAN8742_GetLinkState+0x90>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80019aa:	2302      	movs	r3, #2
 80019ac:	e03a      	b.n	8001a24 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e033      	b.n	8001a24 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80019c6:	2304      	movs	r3, #4
 80019c8:	e02c      	b.n	8001a24 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80019ca:	2305      	movs	r3, #5
 80019cc:	e02a      	b.n	8001a24 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6810      	ldr	r0, [r2, #0]
 80019d6:	f107 020c 	add.w	r2, r7, #12
 80019da:	211f      	movs	r1, #31
 80019dc:	4798      	blx	r3
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	da02      	bge.n	80019ea <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80019e4:	f06f 0304 	mvn.w	r3, #4
 80019e8:	e01c      	b.n	8001a24 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80019f4:	2306      	movs	r3, #6
 80019f6:	e015      	b.n	8001a24 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 031c 	and.w	r3, r3, #28
 80019fe:	2b18      	cmp	r3, #24
 8001a00:	d101      	bne.n	8001a06 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001a02:	2302      	movs	r3, #2
 8001a04:	e00e      	b.n	8001a24 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f003 031c 	and.w	r3, r3, #28
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d101      	bne.n	8001a14 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e007      	b.n	8001a24 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 031c 	and.w	r3, r3, #28
 8001a1a:	2b14      	cmp	r3, #20
 8001a1c:	d101      	bne.n	8001a22 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	e000      	b.n	8001a24 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001a22:	2305      	movs	r3, #5
    }				
  }
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a32:	2003      	movs	r0, #3
 8001a34:	f000 f923 	bl	8001c7e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a38:	f003 fb58 	bl	80050ec <HAL_RCC_GetSysClockFreq>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_Init+0x68>)
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	0a1b      	lsrs	r3, r3, #8
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	4913      	ldr	r1, [pc, #76]	; (8001a98 <HAL_Init+0x6c>)
 8001a4a:	5ccb      	ldrb	r3, [r1, r3]
 8001a4c:	f003 031f 	and.w	r3, r3, #31
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
 8001a54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_Init+0x68>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <HAL_Init+0x6c>)
 8001a60:	5cd3      	ldrb	r3, [r2, r3]
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	4a0b      	ldr	r2, [pc, #44]	; (8001a9c <HAL_Init+0x70>)
 8001a6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a70:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <HAL_Init+0x74>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a76:	200f      	movs	r0, #15
 8001a78:	f7ff fabc 	bl	8000ff4 <HAL_InitTick>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e002      	b.n	8001a8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a86:	f7ff fa97 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	58024400 	.word	0x58024400
 8001a98:	08020124 	.word	0x08020124
 8001a9c:	24000004 	.word	0x24000004
 8001aa0:	24000000 	.word	0x24000000

08001aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_IncTick+0x20>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	2400000c 	.word	0x2400000c
 8001ac8:	24000390 	.word	0x24000390

08001acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_GetTick+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	24000390 	.word	0x24000390

08001ae4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_GetREVID+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	0c1b      	lsrs	r3, r3, #16
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	5c001000 	.word	0x5c001000

08001afc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001b0c:	4904      	ldr	r1, [pc, #16]	; (8001b20 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	58000400 	.word	0x58000400

08001b24 <__NVIC_SetPriorityGrouping>:
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <__NVIC_SetPriorityGrouping+0x40>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b40:	4013      	ands	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b52:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <__NVIC_SetPriorityGrouping+0x40>)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	60d3      	str	r3, [r2, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00
 8001b68:	05fa0000 	.word	0x05fa0000

08001b6c <__NVIC_GetPriorityGrouping>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <__NVIC_GetPriorityGrouping+0x18>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 0307 	and.w	r3, r3, #7
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_EnableIRQ>:
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	db0b      	blt.n	8001bb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4907      	ldr	r1, [pc, #28]	; (8001bc0 <__NVIC_EnableIRQ+0x38>)
 8001ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	2001      	movs	r0, #1
 8001baa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	; (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	; (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ff4c 	bl	8001b24 <__NVIC_SetPriorityGrouping>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca2:	f7ff ff63 	bl	8001b6c <__NVIC_GetPriorityGrouping>
 8001ca6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	68b9      	ldr	r1, [r7, #8]
 8001cac:	6978      	ldr	r0, [r7, #20]
 8001cae:	f7ff ffb3 	bl	8001c18 <NVIC_EncodePriority>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ff82 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001cc0:	bf00      	nop
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ff56 	bl	8001b88 <__NVIC_EnableIRQ>
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ce8:	f3bf 8f5f 	dmb	sy
}
 8001cec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <HAL_MPU_Disable+0x28>)
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <HAL_MPU_Disable+0x28>)
 8001cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_MPU_Disable+0x2c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	605a      	str	r2, [r3, #4]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00
 8001d10:	e000ed90 	.word	0xe000ed90

08001d14 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d1c:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <HAL_MPU_Enable+0x38>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_MPU_Enable+0x3c>)
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <HAL_MPU_Enable+0x3c>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d30:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d32:	f3bf 8f4f 	dsb	sy
}
 8001d36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d38:	f3bf 8f6f 	isb	sy
}
 8001d3c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000ed90 	.word	0xe000ed90
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	785a      	ldrb	r2, [r3, #1]
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_MPU_ConfigRegion+0x84>)
 8001d62:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d029      	beq.n	8001dc0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001d6c:	4a1a      	ldr	r2, [pc, #104]	; (8001dd8 <HAL_MPU_ConfigRegion+0x84>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7b1b      	ldrb	r3, [r3, #12]
 8001d78:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7adb      	ldrb	r3, [r3, #11]
 8001d7e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7a9b      	ldrb	r3, [r3, #10]
 8001d86:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	7b5b      	ldrb	r3, [r3, #13]
 8001d8e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7b9b      	ldrb	r3, [r3, #14]
 8001d96:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7bdb      	ldrb	r3, [r3, #15]
 8001d9e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001da0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7a5b      	ldrb	r3, [r3, #9]
 8001da6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001da8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7a1b      	ldrb	r3, [r3, #8]
 8001dae:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001db0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	7812      	ldrb	r2, [r2, #0]
 8001db6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001db8:	4a07      	ldr	r2, [pc, #28]	; (8001dd8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dba:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dbc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001dbe:	e005      	b.n	8001dcc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_MPU_ConfigRegion+0x84>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <HAL_MPU_ConfigRegion+0x84>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed90 	.word	0xe000ed90

08001ddc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0cf      	b.n	8001f8e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d106      	bne.n	8001e06 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2223      	movs	r2, #35	; 0x23
 8001dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f007 fd2f 	bl	8009864 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	4b64      	ldr	r3, [pc, #400]	; (8001f98 <HAL_ETH_Init+0x1bc>)
 8001e08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e0c:	4a62      	ldr	r2, [pc, #392]	; (8001f98 <HAL_ETH_Init+0x1bc>)
 8001e0e:	f043 0302 	orr.w	r3, r3, #2
 8001e12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e16:	4b60      	ldr	r3, [pc, #384]	; (8001f98 <HAL_ETH_Init+0x1bc>)
 8001e18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7a1b      	ldrb	r3, [r3, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d103      	bne.n	8001e34 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff fe65 	bl	8001afc <HAL_SYSCFG_ETHInterfaceSelect>
 8001e32:	e003      	b.n	8001e3c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001e34:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001e38:	f7ff fe60 	bl	8001afc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001e3c:	4b57      	ldr	r3, [pc, #348]	; (8001f9c <HAL_ETH_Init+0x1c0>)
 8001e3e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e58:	f7ff fe38 	bl	8001acc <HAL_GetTick>
 8001e5c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001e5e:	e011      	b.n	8001e84 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001e60:	f7ff fe34 	bl	8001acc <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e6e:	d909      	bls.n	8001e84 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2204      	movs	r2, #4
 8001e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	22e0      	movs	r2, #224	; 0xe0
 8001e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e084      	b.n	8001f8e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1e4      	bne.n	8001e60 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 ff8a 	bl	8002db0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001e9c:	f003 faa0 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4a3f      	ldr	r2, [pc, #252]	; (8001fa0 <HAL_ETH_Init+0x1c4>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	0c9a      	lsrs	r2, r3, #18
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3a01      	subs	r2, #1
 8001eb0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f001 f983 	bl	80031c0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001ec6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ed2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ed6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	22e0      	movs	r2, #224	; 0xe0
 8001ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e049      	b.n	8001f8e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f02:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001f06:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <HAL_ETH_Init+0x1c8>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6952      	ldr	r2, [r2, #20]
 8001f0e:	0051      	lsls	r1, r2, #1
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	430b      	orrs	r3, r1
 8001f16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f1a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f001 f9eb 	bl	80032fa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f001 fa31 	bl	800338c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	3305      	adds	r3, #5
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	021a      	lsls	r2, r3, #8
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	3303      	adds	r3, #3
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	061a      	lsls	r2, r3, #24
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	3302      	adds	r3, #2
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	041b      	lsls	r3, r3, #16
 8001f5c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	3301      	adds	r3, #1
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f68:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001f76:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001f78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2210      	movs	r2, #16
 8001f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	58024400 	.word	0x58024400
 8001f9c:	58000400 	.word	0x58000400
 8001fa0:	431bde83 	.word	0x431bde83
 8001fa4:	ffff8001 	.word	0xffff8001

08001fa8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb6:	2b10      	cmp	r3, #16
 8001fb8:	d153      	bne.n	8002062 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2223      	movs	r2, #35	; 0x23
 8001fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fa64 	bl	8002496 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 0202 	orr.w	r2, r2, #2
 8001fdc:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800200a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800201a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002026:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002036:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002042:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800204e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002052:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2223      	movs	r2, #35	; 0x23
 800205a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
  }
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800207a:	2b10      	cmp	r3, #16
 800207c:	d179      	bne.n	8002172 <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2223      	movs	r2, #35	; 0x23
 8002082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b38      	ldr	r3, [pc, #224]	; (800217c <HAL_ETH_Start_IT+0x110>)
 800209a:	430b      	orrs	r3, r1
 800209c:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_ETH_Start_IT+0x114>)
 80020ae:	430b      	orrs	r3, r1
 80020b0:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2204      	movs	r2, #4
 80020b8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f9eb 	bl	8002496 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0202 	orr.w	r2, r2, #2
 80020ce:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 0201 	orr.w	r2, r2, #1
 80020f0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800210c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002118:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002128:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002134:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8002140:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002144:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002150:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 800215c:	430b      	orrs	r3, r1
 800215e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002162:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2223      	movs	r2, #35	; 0x23
 800216a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
  }
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	0c020060 	.word	0x0c020060
 8002180:	0c20c000 	.word	0x0c20c000

08002184 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002192:	2b23      	cmp	r3, #35	; 0x23
 8002194:	d165      	bne.n	8002262 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2223      	movs	r2, #35	; 0x23
 800219a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a6:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4b30      	ldr	r3, [pc, #192]	; (8002270 <HAL_ETH_Stop_IT+0xec>)
 80021b0:	400b      	ands	r3, r1
 80021b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021b6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	f023 0301 	bic.w	r3, r3, #1
 80021ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021d2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021ee:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0201 	bic.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0202 	bic.w	r2, r2, #2
 8002224:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	e00e      	b.n	800224a <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	3212      	adds	r2, #18
 8002232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002236:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3301      	adds	r3, #1
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d9ed      	bls.n	800222c <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2210      	movs	r2, #16
 800225a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e000      	b.n	8002264 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
  }
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	ffff2f3e 	.word	0xffff2f3e

08002274 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d109      	bne.n	8002298 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e03a      	b.n	800230e <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800229e:	2b23      	cmp	r3, #35	; 0x23
 80022a0:	d134      	bne.n	800230c <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80022aa:	2201      	movs	r2, #1
 80022ac:	6839      	ldr	r1, [r7, #0]
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f001 f8ca 	bl	8003448 <ETH_Prepare_Tx_Descriptors>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c0:	f043 0202 	orr.w	r2, r3, #2
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e01f      	b.n	800230e <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80022ce:	f3bf 8f4f 	dsb	sy
}
 80022d2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	629a      	str	r2, [r3, #40]	; 0x28
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d904      	bls.n	80022f0 <HAL_ETH_Transmit_IT+0x7c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	1f1a      	subs	r2, r3, #4
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3106      	adds	r1, #6
 80022fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002300:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002304:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	e000      	b.n	800230e <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
  }
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b088      	sub	sp, #32
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d109      	bne.n	8002342 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002334:	f043 0201 	orr.w	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e0a5      	b.n	800248e <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002348:	2b23      	cmp	r3, #35	; 0x23
 800234a:	d001      	beq.n	8002350 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e09e      	b.n	800248e <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	3212      	adds	r2, #18
 800235c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002360:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002366:	f1c3 0304 	rsb	r3, r3, #4
 800236a:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800236c:	e067      	b.n	800243e <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d007      	beq.n	800238a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <HAL_ETH_ReadData+0x88>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800239a:	2b00      	cmp	r3, #0
 800239c:	d03d      	beq.n	800241a <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00d      	beq.n	80023e4 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80023f4:	461a      	mov	r2, r3
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	f007 fc1b 	bl	8009c34 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	441a      	add	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3301      	adds	r3, #1
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d902      	bls.n	800242c <HAL_ETH_ReadData+0x116>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3b04      	subs	r3, #4
 800242a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	3212      	adds	r2, #18
 8002432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002436:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3301      	adds	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	db06      	blt.n	8002454 <HAL_ETH_ReadData+0x13e>
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	429a      	cmp	r2, r3
 800244c:	d202      	bcs.n	8002454 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d08c      	beq.n	800236e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	441a      	add	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f814 	bl	8002496 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d108      	bne.n	800248c <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	e000      	b.n	800248e <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
}
 800248e:	4618      	mov	r0, r3
 8002490:	3720      	adds	r7, #32
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b088      	sub	sp, #32
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80024a2:	2301      	movs	r3, #1
 80024a4:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024aa:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	3212      	adds	r2, #18
 80024b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b6:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024bc:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80024be:	e03b      	b.n	8002538 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d112      	bne.n	80024ee <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80024c8:	f107 030c 	add.w	r3, r7, #12
 80024cc:	4618      	mov	r0, r3
 80024ce:	f007 fb7b 	bl	8009bc8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	74fb      	strb	r3, [r7, #19]
 80024dc:	e007      	b.n	80024ee <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	461a      	mov	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	461a      	mov	r2, r3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d021      	beq.n	8002538 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 80024f4:	f3bf 8f5f 	dmb	sy
}
 80024f8:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d004      	beq.n	800250c <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	e003      	b.n	8002514 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8002512:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	3301      	adds	r3, #1
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d902      	bls.n	8002526 <ETH_UpdateDescriptor+0x90>
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	3b04      	subs	r3, #4
 8002524:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	3212      	adds	r2, #18
 800252c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002530:	617b      	str	r3, [r7, #20]
      desccount--;
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	3b01      	subs	r3, #1
 8002536:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <ETH_UpdateDescriptor+0xae>
 800253e:	7cfb      	ldrb	r3, [r7, #19]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1bd      	bne.n	80024c0 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	429a      	cmp	r2, r3
 800254c:	d00d      	beq.n	800256a <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002556:	461a      	mov	r2, r3
 8002558:	2300      	movs	r3, #0
 800255a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800256a:	bf00      	nop
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3318      	adds	r3, #24
 800257e:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002590:	e03f      	b.n	8002612 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002592:	2301      	movs	r3, #1
 8002594:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	3b01      	subs	r3, #1
 800259a:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	3304      	adds	r3, #4
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	3301      	adds	r3, #1
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80025ba:	7bbb      	ldrb	r3, [r7, #14]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d028      	beq.n	8002612 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68d9      	ldr	r1, [r3, #12]
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	440b      	add	r3, r1
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	db1b      	blt.n	800260e <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	3304      	adds	r3, #4
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f007 fb8e 	bl	8009d04 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	3304      	adds	r3, #4
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	2200      	movs	r2, #0
 80025f4:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	3301      	adds	r3, #1
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	62da      	str	r2, [r3, #44]	; 0x2c
 800260c:	e001      	b.n	8002612 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <HAL_ETH_ReleaseTxPacket+0xac>
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1b9      	bne.n	8002592 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002638:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800263c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002640:	2b40      	cmp	r3, #64	; 0x40
 8002642:	d115      	bne.n	8002670 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800264c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002654:	2b40      	cmp	r3, #64	; 0x40
 8002656:	d10b      	bne.n	8002670 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002660:	461a      	mov	r2, r3
 8002662:	f248 0340 	movw	r3, #32832	; 0x8040
 8002666:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f006 fe5c 	bl	8009328 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002678:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d115      	bne.n	80026b0 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800268c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d10b      	bne.n	80026b0 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a0:	461a      	mov	r2, r3
 80026a2:	f248 0301 	movw	r3, #32769	; 0x8001
 80026a6:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f006 fe4c 	bl	8009348 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80026bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026c4:	d153      	bne.n	800276e <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ce:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80026d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026da:	d148      	bne.n	800276e <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e2:	f043 0208 	orr.w	r2, r3, #8
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80026f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002700:	d11e      	bne.n	8002740 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800270a:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800270e:	f241 1302 	movw	r3, #4354	; 0x1102
 8002712:	4013      	ands	r3, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002722:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800272e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002732:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	22e0      	movs	r2, #224	; 0xe0
 800273a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800273e:	e013      	b.n	8002768 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002748:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800274c:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275e:	461a      	mov	r2, r3
 8002760:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8002764:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f006 fdfd 	bl	8009368 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002776:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d104      	bne.n	800278c <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002788:	2b00      	cmp	r3, #0
 800278a:	d019      	beq.n	80027c0 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	f043 0210 	orr.w	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	22e0      	movs	r2, #224	; 0xe0
 80027ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f006 fdd8 	bl	8009368 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d10f      	bne.n	80027f0 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027d8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f830 	bl	8002848 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027f8:	f003 0320 	and.w	r3, r3, #32
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d10f      	bne.n	8002820 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002808:	f003 020f 	and.w	r2, r3, #15
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f822 	bl	800285c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <HAL_ETH_IRQHandler+0x21c>)
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d006      	beq.n	800283a <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_ETH_IRQHandler+0x21c>)
 800282e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002832:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f81b 	bl	8002870 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	58000080 	.word	0x58000080

08002848 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e03e      	b.n	8002924 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028ae:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	055b      	lsls	r3, r3, #21
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	041b      	lsls	r3, r3, #16
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f043 030c 	orr.w	r3, r3, #12
 80028d2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80028e6:	f7ff f8f1 	bl	8001acc <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80028ec:	e009      	b.n	8002902 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80028ee:	f7ff f8ed 	bl	8001acc <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028fc:	d901      	bls.n	8002902 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e010      	b.n	8002924 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ed      	bne.n	80028ee <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800291a:	b29b      	uxth	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e03c      	b.n	80029c8 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002956:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	055b      	lsls	r3, r3, #21
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f023 030c 	bic.w	r3, r3, #12
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	b29a      	uxth	r2, r3
 800298c:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <HAL_ETH_WritePHYRegister+0xa4>)
 800298e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002992:	4a0f      	ldr	r2, [pc, #60]	; (80029d0 <HAL_ETH_WritePHYRegister+0xa4>)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800299a:	f7ff f897 	bl	8001acc <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80029a0:	e009      	b.n	80029b6 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80029a2:	f7ff f893 	bl	8001acc <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029b0:	d901      	bls.n	80029b6 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e008      	b.n	80029c8 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1ed      	bne.n	80029a2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40028000 	.word	0x40028000

080029d4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e1c3      	b.n	8002d70 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf14      	ite	ne
 8002a04:	2301      	movne	r3, #1
 8002a06:	2300      	moveq	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	bf0c      	ite	eq
 8002a2e:	2301      	moveq	r3, #1
 8002a30:	2300      	movne	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf14      	ite	ne
 8002a4a:	2301      	movne	r3, #1
 8002a4c:	2300      	moveq	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf14      	ite	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	2300      	moveq	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bf14      	ite	ne
 8002a98:	2301      	movne	r3, #1
 8002a9a:	2300      	moveq	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bf14      	ite	ne
 8002ace:	2301      	movne	r3, #1
 8002ad0:	2300      	moveq	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	bf0c      	ite	eq
 8002b02:	2301      	moveq	r3, #1
 8002b04:	2300      	movne	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bf14      	ite	ne
 8002b36:	2301      	movne	r3, #1
 8002b38:	2300      	moveq	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bf14      	ite	ne
 8002b50:	2301      	movne	r3, #1
 8002b52:	2300      	moveq	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002b62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	bf14      	ite	ne
 8002b6a:	2301      	movne	r3, #1
 8002b6c:	2300      	moveq	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf14      	ite	ne
 8002b92:	2301      	movne	r3, #1
 8002b94:	2300      	moveq	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf14      	ite	ne
 8002be4:	2301      	movne	r3, #1
 8002be6:	2300      	moveq	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf14      	ite	ne
 8002c1c:	2301      	movne	r3, #1
 8002c1e:	2300      	moveq	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	0e5b      	lsrs	r3, r3, #25
 8002c32:	f003 021f 	and.w	r2, r3, #31
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf14      	ite	ne
 8002c48:	2301      	movne	r3, #1
 8002c4a:	2300      	moveq	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	461a      	mov	r2, r3
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 020f 	and.w	r2, r3, #15
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf14      	ite	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	2300      	moveq	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bf0c      	ite	eq
 8002c8e:	2301      	moveq	r3, #1
 8002c90:	2300      	movne	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	0c1b      	lsrs	r3, r3, #16
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bf14      	ite	ne
 8002ce6:	2301      	movne	r3, #1
 8002ce8:	2300      	moveq	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002cfc:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d0c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	bf14      	ite	ne
 8002d24:	2301      	movne	r3, #1
 8002d26:	2300      	moveq	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002d3a:	f003 0310 	and.w	r3, r3, #16
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	bf14      	ite	ne
 8002d42:	2301      	movne	r3, #1
 8002d44:	2300      	moveq	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf0c      	ite	eq
 8002d60:	2301      	moveq	r3, #1
 8002d62:	2300      	movne	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e00b      	b.n	8002da8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d96:	2b10      	cmp	r3, #16
 8002d98:	d105      	bne.n	8002da6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002d9a:	6839      	ldr	r1, [r7, #0]
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f86d 	bl	8002e7c <ETH_SetMACConfig>

    return HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	e000      	b.n	8002da8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
  }
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002dca:	f002 fb09 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 8002dce:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4a1e      	ldr	r2, [pc, #120]	; (8002e4c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d908      	bls.n	8002dea <HAL_ETH_SetMDIOClockRange+0x3a>
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4a1d      	ldr	r2, [pc, #116]	; (8002e50 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d804      	bhi.n	8002dea <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e027      	b.n	8002e3a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4a18      	ldr	r2, [pc, #96]	; (8002e50 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d908      	bls.n	8002e04 <HAL_ETH_SetMDIOClockRange+0x54>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4a17      	ldr	r2, [pc, #92]	; (8002e54 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d204      	bcs.n	8002e04 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	e01a      	b.n	8002e3a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4a13      	ldr	r2, [pc, #76]	; (8002e54 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d303      	bcc.n	8002e14 <HAL_ETH_SetMDIOClockRange+0x64>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d911      	bls.n	8002e38 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4a10      	ldr	r2, [pc, #64]	; (8002e58 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d908      	bls.n	8002e2e <HAL_ETH_SetMDIOClockRange+0x7e>
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4a0f      	ldr	r2, [pc, #60]	; (8002e5c <HAL_ETH_SetMDIOClockRange+0xac>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d804      	bhi.n	8002e2e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	e005      	b.n	8002e3a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	e000      	b.n	8002e3a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002e38:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	01312cff 	.word	0x01312cff
 8002e50:	02160ebf 	.word	0x02160ebf
 8002e54:	03938700 	.word	0x03938700
 8002e58:	05f5e0ff 	.word	0x05f5e0ff
 8002e5c:	08f0d17f 	.word	0x08f0d17f

08002e60 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002e8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	791b      	ldrb	r3, [r3, #4]
 8002e94:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002e96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	7b1b      	ldrb	r3, [r3, #12]
 8002e9c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002e9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	7b5b      	ldrb	r3, [r3, #13]
 8002ea4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002ea6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	7b9b      	ldrb	r3, [r3, #14]
 8002eac:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002eae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	7bdb      	ldrb	r3, [r3, #15]
 8002eb4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002eb6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	7c12      	ldrb	r2, [r2, #16]
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d102      	bne.n	8002ec6 <ETH_SetMACConfig+0x4a>
 8002ec0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002ec4:	e000      	b.n	8002ec8 <ETH_SetMACConfig+0x4c>
 8002ec6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002ec8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	7c52      	ldrb	r2, [r2, #17]
 8002ece:	2a00      	cmp	r2, #0
 8002ed0:	d102      	bne.n	8002ed8 <ETH_SetMACConfig+0x5c>
 8002ed2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ed6:	e000      	b.n	8002eda <ETH_SetMACConfig+0x5e>
 8002ed8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002eda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	7c9b      	ldrb	r3, [r3, #18]
 8002ee0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002ee2:	431a      	orrs	r2, r3
               macconf->Speed |
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002ee8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002eee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	7f1b      	ldrb	r3, [r3, #28]
 8002ef4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002ef6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	7f5b      	ldrb	r3, [r3, #29]
 8002efc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002efe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	7f92      	ldrb	r2, [r2, #30]
 8002f04:	2a00      	cmp	r2, #0
 8002f06:	d102      	bne.n	8002f0e <ETH_SetMACConfig+0x92>
 8002f08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f0c:	e000      	b.n	8002f10 <ETH_SetMACConfig+0x94>
 8002f0e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002f10:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	7fdb      	ldrb	r3, [r3, #31]
 8002f16:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002f18:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f20:	2a00      	cmp	r2, #0
 8002f22:	d102      	bne.n	8002f2a <ETH_SetMACConfig+0xae>
 8002f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f28:	e000      	b.n	8002f2c <ETH_SetMACConfig+0xb0>
 8002f2a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002f2c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002f32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f3a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002f3c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b56      	ldr	r3, [pc, #344]	; (80030a8 <ETH_SetMACConfig+0x22c>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	68f9      	ldr	r1, [r7, #12]
 8002f56:	430b      	orrs	r3, r1
 8002f58:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f66:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002f68:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f70:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002f72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002f7a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002f7c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002f84:	2a00      	cmp	r2, #0
 8002f86:	d102      	bne.n	8002f8e <ETH_SetMACConfig+0x112>
 8002f88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f8c:	e000      	b.n	8002f90 <ETH_SetMACConfig+0x114>
 8002f8e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002f90:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	4b42      	ldr	r3, [pc, #264]	; (80030ac <ETH_SetMACConfig+0x230>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	68f9      	ldr	r1, [r7, #12]
 8002faa:	430b      	orrs	r3, r1
 8002fac:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fb4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	4b3a      	ldr	r3, [pc, #232]	; (80030b0 <ETH_SetMACConfig+0x234>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	68f9      	ldr	r1, [r7, #12]
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002fd8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002fde:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002fe6:	2a00      	cmp	r2, #0
 8002fe8:	d101      	bne.n	8002fee <ETH_SetMACConfig+0x172>
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	e000      	b.n	8002ff0 <ETH_SetMACConfig+0x174>
 8002fee:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002ff0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003002:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003006:	4013      	ands	r3, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	68f9      	ldr	r1, [r7, #12]
 800300e:	430b      	orrs	r3, r1
 8003010:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003018:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003020:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	f023 0103 	bic.w	r1, r3, #3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	430a      	orrs	r2, r1
 800303a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003046:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003062:	2a00      	cmp	r2, #0
 8003064:	d101      	bne.n	800306a <ETH_SetMACConfig+0x1ee>
 8003066:	2240      	movs	r2, #64	; 0x40
 8003068:	e000      	b.n	800306c <ETH_SetMACConfig+0x1f0>
 800306a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800306c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003074:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003076:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800307e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003080:	4313      	orrs	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800308c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	430a      	orrs	r2, r1
 8003098:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800309c:	bf00      	nop
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	00048083 	.word	0x00048083
 80030ac:	c0f88000 	.word	0xc0f88000
 80030b0:	fffffef0 	.word	0xfffffef0

080030b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b38      	ldr	r3, [pc, #224]	; (80031ac <ETH_SetDMAConfig+0xf8>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	6811      	ldr	r1, [r2, #0]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	430b      	orrs	r3, r1
 80030d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030da:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	791b      	ldrb	r3, [r3, #4]
 80030e0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80030e6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	7b1b      	ldrb	r3, [r3, #12]
 80030ec:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <ETH_SetDMAConfig+0xfc>)
 80030fe:	4013      	ands	r3, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	68f9      	ldr	r1, [r7, #12]
 8003106:	430b      	orrs	r3, r1
 8003108:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800310c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	7b5b      	ldrb	r3, [r3, #13]
 8003112:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003118:	4313      	orrs	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003124:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003128:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <ETH_SetDMAConfig+0x100>)
 800312a:	4013      	ands	r3, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	68f9      	ldr	r1, [r7, #12]
 8003132:	430b      	orrs	r3, r1
 8003134:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003138:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	7d1b      	ldrb	r3, [r3, #20]
 8003144:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003146:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	7f5b      	ldrb	r3, [r3, #29]
 800314c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800315a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800315e:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <ETH_SetDMAConfig+0x104>)
 8003160:	4013      	ands	r3, r2
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	68f9      	ldr	r1, [r7, #12]
 8003168:	430b      	orrs	r3, r1
 800316a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800316e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	7f1b      	ldrb	r3, [r3, #28]
 8003176:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800317c:	4313      	orrs	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003188:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <ETH_SetDMAConfig+0x108>)
 800318e:	4013      	ands	r3, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	68f9      	ldr	r1, [r7, #12]
 8003196:	430b      	orrs	r3, r1
 8003198:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800319c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	ffff87fd 	.word	0xffff87fd
 80031b0:	ffff2ffe 	.word	0xffff2ffe
 80031b4:	fffec000 	.word	0xfffec000
 80031b8:	ffc0efef 	.word	0xffc0efef
 80031bc:	7fc0ffff 	.word	0x7fc0ffff

080031c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b0a4      	sub	sp, #144	; 0x90
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80031ce:	2300      	movs	r3, #0
 80031d0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80031d8:	2300      	movs	r3, #0
 80031da:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80031de:	2301      	movs	r3, #1
 80031e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80031ea:	2301      	movs	r3, #1
 80031ec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80031f0:	2300      	movs	r3, #0
 80031f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80031fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003200:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003202:	2300      	movs	r3, #0
 8003204:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003208:	2300      	movs	r3, #0
 800320a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800320c:	2300      	movs	r3, #0
 800320e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003212:	2300      	movs	r3, #0
 8003214:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003218:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800321c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800321e:	2300      	movs	r3, #0
 8003220:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003224:	2300      	movs	r3, #0
 8003226:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003228:	2301      	movs	r3, #1
 800322a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800322e:	2300      	movs	r3, #0
 8003230:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003234:	2300      	movs	r3, #0
 8003236:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800323a:	2300      	movs	r3, #0
 800323c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800323e:	2300      	movs	r3, #0
 8003240:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003242:	2300      	movs	r3, #0
 8003244:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003246:	2300      	movs	r3, #0
 8003248:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800324c:	2300      	movs	r3, #0
 800324e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003258:	2320      	movs	r3, #32
 800325a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800325e:	2301      	movs	r3, #1
 8003260:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003264:	2300      	movs	r3, #0
 8003266:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800326a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003270:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003274:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800327c:	2302      	movs	r3, #2
 800327e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003282:	2300      	movs	r3, #0
 8003284:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003288:	2300      	movs	r3, #0
 800328a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800328e:	2300      	movs	r3, #0
 8003290:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003294:	2301      	movs	r3, #1
 8003296:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800329a:	2300      	movs	r3, #0
 800329c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800329e:	2301      	movs	r3, #1
 80032a0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80032a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032a8:	4619      	mov	r1, r3
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff fde6 	bl	8002e7c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80032b0:	2301      	movs	r3, #1
 80032b2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80032b4:	2301      	movs	r3, #1
 80032b6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80032bc:	2300      	movs	r3, #0
 80032be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80032ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80032d0:	2300      	movs	r3, #0
 80032d2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80032d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80032e0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80032e6:	f107 0308 	add.w	r3, r7, #8
 80032ea:	4619      	mov	r1, r3
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff fee1 	bl	80030b4 <ETH_SetDMAConfig>
}
 80032f2:	bf00      	nop
 80032f4:	3790      	adds	r7, #144	; 0x90
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b085      	sub	sp, #20
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	e01d      	b.n	8003344 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68d9      	ldr	r1, [r3, #12]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4613      	mov	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	440b      	add	r3, r1
 8003318:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2200      	movs	r2, #0
 8003324:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2200      	movs	r2, #0
 800332a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2200      	movs	r2, #0
 8003330:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003332:	68b9      	ldr	r1, [r7, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	3206      	adds	r2, #6
 800333a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	3301      	adds	r3, #1
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b03      	cmp	r3, #3
 8003348:	d9de      	bls.n	8003308 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003358:	461a      	mov	r2, r3
 800335a:	2303      	movs	r3, #3
 800335c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800336c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800337c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	e023      	b.n	80033e2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6919      	ldr	r1, [r3, #16]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4613      	mov	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	440b      	add	r3, r1
 80033aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2200      	movs	r2, #0
 80033b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2200      	movs	r2, #0
 80033c2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2200      	movs	r2, #0
 80033ce:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	3212      	adds	r2, #18
 80033d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3301      	adds	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d9d8      	bls.n	800339a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800340e:	461a      	mov	r2, r3
 8003410:	2303      	movs	r3, #3
 8003412:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003422:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003436:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003448:	b480      	push	{r7}
 800344a:	b08d      	sub	sp, #52	; 0x34
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	3318      	adds	r3, #24
 8003458:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800346e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003472:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800348a:	d007      	beq.n	800349c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003490:	3304      	adds	r3, #4
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800349c:	2302      	movs	r3, #2
 800349e:	e259      	b.n	8003954 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d044      	beq.n	8003536 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	4b75      	ldr	r3, [pc, #468]	; (8003688 <ETH_Prepare_Tx_Descriptors+0x240>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034b8:	431a      	orrs	r2, r3
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80034d8:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d027      	beq.n	8003536 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	041b      	lsls	r3, r3, #16
 80034f2:	431a      	orrs	r2, r3
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	431a      	orrs	r2, r3
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003524:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003534:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00e      	beq.n	8003560 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	4b51      	ldr	r3, [pc, #324]	; (800368c <ETH_Prepare_Tx_Descriptors+0x244>)
 8003548:	4013      	ands	r3, r2
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	6992      	ldr	r2, [r2, #24]
 800354e:	431a      	orrs	r2, r3
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d105      	bne.n	8003578 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b00      	cmp	r3, #0
 8003576:	d036      	beq.n	80035e6 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003584:	f3bf 8f5f 	dmb	sy
}
 8003588:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	3301      	adds	r3, #1
 800359a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d902      	bls.n	80035a8 <ETH_Prepare_Tx_Descriptors+0x160>
 80035a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a4:	3b04      	subs	r3, #4
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b0:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	3301      	adds	r3, #1
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035c4:	d10f      	bne.n	80035e6 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 80035d0:	f3bf 8f5f 	dmb	sy
}
 80035d4:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80035e2:	2302      	movs	r3, #2
 80035e4:	e1b6      	b.n	8003954 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	3301      	adds	r3, #1
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	4b24      	ldr	r3, [pc, #144]	; (800368c <ETH_Prepare_Tx_Descriptors+0x244>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	6852      	ldr	r2, [r2, #4]
 8003602:	431a      	orrs	r2, r3
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d012      	beq.n	8003636 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <ETH_Prepare_Tx_Descriptors+0x248>)
 8003626:	4013      	ands	r3, r2
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	6852      	ldr	r2, [r2, #4]
 800362c:	0412      	lsls	r2, r2, #16
 800362e:	431a      	orrs	r2, r3
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	e008      	b.n	8003648 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	2200      	movs	r2, #0
 800363a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	4b13      	ldr	r3, [pc, #76]	; (8003690 <ETH_Prepare_Tx_Descriptors+0x248>)
 8003642:	4013      	ands	r3, r2
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	d021      	beq.n	8003698 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	04db      	lsls	r3, r3, #19
 8003662:	431a      	orrs	r2, r3
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	4b09      	ldr	r3, [pc, #36]	; (8003694 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800366e:	4013      	ands	r3, r2
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	69d2      	ldr	r2, [r2, #28]
 8003674:	431a      	orrs	r2, r3
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	e02e      	b.n	80036e6 <ETH_Prepare_Tx_Descriptors+0x29e>
 8003688:	ffff0000 	.word	0xffff0000
 800368c:	ffffc000 	.word	0xffffc000
 8003690:	c000ffff 	.word	0xc000ffff
 8003694:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	4b7b      	ldr	r3, [pc, #492]	; (800388c <ETH_Prepare_Tx_Descriptors+0x444>)
 800369e:	4013      	ands	r3, r2
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	6852      	ldr	r2, [r2, #4]
 80036a4:	431a      	orrs	r2, r3
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	431a      	orrs	r2, r3
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fe:	431a      	orrs	r2, r3
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800371c:	f3bf 8f5f 	dmb	sy
}
 8003720:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80da 	beq.w	80038f0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	431a      	orrs	r2, r3
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800374e:	e0cf      	b.n	80038f0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	3301      	adds	r3, #1
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	2b03      	cmp	r3, #3
 8003766:	d902      	bls.n	800376e <ETH_Prepare_Tx_Descriptors+0x326>
 8003768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376a:	3b04      	subs	r3, #4
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003776:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800378c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003790:	d007      	beq.n	80037a2 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003796:	3304      	adds	r3, #4
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d029      	beq.n	80037f6 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ae:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80037b0:	2300      	movs	r3, #0
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037b4:	e019      	b.n	80037ea <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80037b6:	f3bf 8f5f 	dmb	sy
}
 80037ba:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80037c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ca:	3301      	adds	r3, #1
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d902      	bls.n	80037da <ETH_Prepare_Tx_Descriptors+0x392>
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	3b04      	subs	r3, #4
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e2:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80037e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e6:	3301      	adds	r3, #1
 80037e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d3e1      	bcc.n	80037b6 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80037f2:	2302      	movs	r3, #2
 80037f4:	e0ae      	b.n	8003954 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	3301      	adds	r3, #1
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <ETH_Prepare_Tx_Descriptors+0x448>)
 8003812:	4013      	ands	r3, r2
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	6852      	ldr	r2, [r2, #4]
 8003818:	431a      	orrs	r2, r3
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d012      	beq.n	800384c <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	4b16      	ldr	r3, [pc, #88]	; (8003894 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800383c:	4013      	ands	r3, r2
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	6852      	ldr	r2, [r2, #4]
 8003842:	0412      	lsls	r2, r2, #16
 8003844:	431a      	orrs	r2, r3
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	e008      	b.n	800385e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	2200      	movs	r2, #0
 8003850:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003858:	4013      	ands	r3, r2
 800385a:	6a3a      	ldr	r2, [r7, #32]
 800385c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b00      	cmp	r3, #0
 8003868:	d018      	beq.n	800389c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <ETH_Prepare_Tx_Descriptors+0x450>)
 8003870:	4013      	ands	r3, r2
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	69d2      	ldr	r2, [r2, #28]
 8003876:	431a      	orrs	r2, r3
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	60da      	str	r2, [r3, #12]
 8003888:	e020      	b.n	80038cc <ETH_Prepare_Tx_Descriptors+0x484>
 800388a:	bf00      	nop
 800388c:	ffff8000 	.word	0xffff8000
 8003890:	ffffc000 	.word	0xffffc000
 8003894:	c000ffff 	.word	0xc000ffff
 8003898:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	4b2f      	ldr	r3, [pc, #188]	; (8003960 <ETH_Prepare_Tx_Descriptors+0x518>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	6852      	ldr	r2, [r2, #4]
 80038a8:	431a      	orrs	r2, r3
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	3301      	adds	r3, #1
 80038d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80038d2:	f3bf 8f5f 	dmb	sy
}
 80038d6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f47f af2b 	bne.w	8003750 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d006      	beq.n	800390e <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	e005      	b.n	800391a <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800392a:	6979      	ldr	r1, [r7, #20]
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	3304      	adds	r3, #4
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800393a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800393c:	b672      	cpsid	i
}
 800393e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	4413      	add	r3, r2
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800394e:	b662      	cpsie	i
}
 8003950:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3734      	adds	r7, #52	; 0x34
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	ffff8000 	.word	0xffff8000

08003964 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b098      	sub	sp, #96	; 0x60
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800396c:	4a84      	ldr	r2, [pc, #528]	; (8003b80 <HAL_FDCAN_Init+0x21c>)
 800396e:	f107 030c 	add.w	r3, r7, #12
 8003972:	4611      	mov	r1, r2
 8003974:	224c      	movs	r2, #76	; 0x4c
 8003976:	4618      	mov	r0, r3
 8003978:	f017 feaf 	bl	801b6da <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e1c6      	b.n	8003d14 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a7e      	ldr	r2, [pc, #504]	; (8003b84 <HAL_FDCAN_Init+0x220>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d106      	bne.n	800399e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003998:	461a      	mov	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fc ff2e 	bl	8000814 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0210 	bic.w	r2, r2, #16
 80039c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039c8:	f7fe f880 	bl	8001acc <HAL_GetTick>
 80039cc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80039ce:	e014      	b.n	80039fa <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80039d0:	f7fe f87c 	bl	8001acc <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b0a      	cmp	r3, #10
 80039dc:	d90d      	bls.n	80039fa <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039e4:	f043 0201 	orr.w	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2203      	movs	r2, #3
 80039f2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e18c      	b.n	8003d14 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d0e3      	beq.n	80039d0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a18:	f7fe f858 	bl	8001acc <HAL_GetTick>
 8003a1c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a1e:	e014      	b.n	8003a4a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003a20:	f7fe f854 	bl	8001acc <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b0a      	cmp	r3, #10
 8003a2c:	d90d      	bls.n	8003a4a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a34:	f043 0201 	orr.w	r2, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2203      	movs	r2, #3
 8003a42:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e164      	b.n	8003d14 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0e3      	beq.n	8003a20 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0202 	orr.w	r2, r2, #2
 8003a66:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	7c1b      	ldrb	r3, [r3, #16]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d108      	bne.n	8003a82 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a7e:	619a      	str	r2, [r3, #24]
 8003a80:	e007      	b.n	8003a92 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699a      	ldr	r2, [r3, #24]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a90:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	7c5b      	ldrb	r3, [r3, #17]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d108      	bne.n	8003aac <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699a      	ldr	r2, [r3, #24]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aa8:	619a      	str	r2, [r3, #24]
 8003aaa:	e007      	b.n	8003abc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003aba:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	7c9b      	ldrb	r3, [r3, #18]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d108      	bne.n	8003ad6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ad2:	619a      	str	r2, [r3, #24]
 8003ad4:	e007      	b.n	8003ae6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699a      	ldr	r2, [r3, #24]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ae4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003b0a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0210 	bic.w	r2, r2, #16
 8003b1a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d108      	bne.n	8003b36 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0204 	orr.w	r2, r2, #4
 8003b32:	619a      	str	r2, [r3, #24]
 8003b34:	e030      	b.n	8003b98 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d02c      	beq.n	8003b98 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d020      	beq.n	8003b88 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b54:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0210 	orr.w	r2, r2, #16
 8003b64:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2b03      	cmp	r3, #3
 8003b6c:	d114      	bne.n	8003b98 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0220 	orr.w	r2, r2, #32
 8003b7c:	619a      	str	r2, [r3, #24]
 8003b7e:	e00b      	b.n	8003b98 <HAL_FDCAN_Init+0x234>
 8003b80:	0801caa4 	.word	0x0801caa4
 8003b84:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0220 	orr.w	r2, r2, #32
 8003b96:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ba8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003bb0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003bc0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003bc2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bcc:	d115      	bne.n	8003bfa <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003bdc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	3b01      	subs	r3, #1
 8003be4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003be6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003bf6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003bf8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c20:	4413      	add	r3, r2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d011      	beq.n	8003c4a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003c2e:	f023 0107 	bic.w	r1, r3, #7
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	3360      	adds	r3, #96	; 0x60
 8003c3a:	443b      	add	r3, r7
 8003c3c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d011      	beq.n	8003c76 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003c5a:	f023 0107 	bic.w	r1, r3, #7
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	3360      	adds	r3, #96	; 0x60
 8003c66:	443b      	add	r3, r7
 8003c68:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d012      	beq.n	8003ca4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003c86:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	3360      	adds	r3, #96	; 0x60
 8003c92:	443b      	add	r3, r7
 8003c94:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003c98:	011a      	lsls	r2, r3, #4
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d012      	beq.n	8003cd2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003cb4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	3360      	adds	r3, #96	; 0x60
 8003cc0:	443b      	add	r3, r7
 8003cc2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003cc6:	021a      	lsls	r2, r3, #8
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a11      	ldr	r2, [pc, #68]	; (8003d1c <HAL_FDCAN_Init+0x3b8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d107      	bne.n	8003cec <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f022 0203 	bic.w	r2, r2, #3
 8003cea:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f80b 	bl	8003d20 <FDCAN_CalcultateRamBlockAddresses>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003d10:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3760      	adds	r7, #96	; 0x60
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	4000a000 	.word	0x4000a000

08003d20 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003d36:	4ba7      	ldr	r3, [pc, #668]	; (8003fd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	0091      	lsls	r1, r2, #2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	430b      	orrs	r3, r1
 8003d44:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d50:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	041a      	lsls	r2, r3, #16
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d76:	4b97      	ldr	r3, [pc, #604]	; (8003fd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	0091      	lsls	r1, r2, #2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	430b      	orrs	r3, r1
 8003d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d90:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d98:	041a      	lsls	r2, r3, #16
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	4413      	add	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003db8:	4b86      	ldr	r3, [pc, #536]	; (8003fd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	0091      	lsls	r1, r2, #2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dd2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	041a      	lsls	r2, r3, #16
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003dee:	fb02 f303 	mul.w	r3, r2, r3
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	4413      	add	r3, r2
 8003df6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003e00:	4b74      	ldr	r3, [pc, #464]	; (8003fd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	0091      	lsls	r1, r2, #2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e1a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e22:	041a      	lsls	r2, r3, #16
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003e36:	fb02 f303 	mul.w	r3, r2, r3
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003e48:	4b62      	ldr	r3, [pc, #392]	; (8003fd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	0091      	lsls	r1, r2, #2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	430b      	orrs	r3, r1
 8003e56:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	4413      	add	r3, r2
 8003e6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003e74:	4b57      	ldr	r3, [pc, #348]	; (8003fd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	0091      	lsls	r1, r2, #2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	430b      	orrs	r3, r1
 8003e82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e8e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e96:	041a      	lsls	r2, r3, #16
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	4413      	add	r3, r2
 8003eac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003eb6:	4b47      	ldr	r3, [pc, #284]	; (8003fd4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	0091      	lsls	r1, r2, #2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ed0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed8:	041a      	lsls	r2, r3, #16
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003eec:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef4:	061a      	lsls	r2, r3, #24
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f04:	4b34      	ldr	r3, [pc, #208]	; (8003fd8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003f06:	4413      	add	r3, r2
 8003f08:	009a      	lsls	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	441a      	add	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	441a      	add	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	441a      	add	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	441a      	add	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	441a      	add	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	441a      	add	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003f9a:	fb01 f303 	mul.w	r3, r1, r3
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	441a      	add	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003fb6:	fb01 f303 	mul.w	r3, r1, r3
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	441a      	add	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fca:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d915      	bls.n	8003ffc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003fd0:	e006      	b.n	8003fe0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003fd2:	bf00      	nop
 8003fd4:	ffff0003 	.word	0xffff0003
 8003fd8:	10002b00 	.word	0x10002b00
 8003fdc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fe6:	f043 0220 	orr.w	r2, r3, #32
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2203      	movs	r2, #3
 8003ff4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e010      	b.n	800401e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	e005      	b.n	8004010 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3304      	adds	r3, #4
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	429a      	cmp	r2, r3
 800401a:	d3f3      	bcc.n	8004004 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop

0800402c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800402c:	b480      	push	{r7}
 800402e:	b089      	sub	sp, #36	; 0x24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800403a:	4b89      	ldr	r3, [pc, #548]	; (8004260 <HAL_GPIO_Init+0x234>)
 800403c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800403e:	e194      	b.n	800436a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	2101      	movs	r1, #1
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	fa01 f303 	lsl.w	r3, r1, r3
 800404c:	4013      	ands	r3, r2
 800404e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 8186 	beq.w	8004364 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d005      	beq.n	8004070 <HAL_GPIO_Init+0x44>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d130      	bne.n	80040d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	2203      	movs	r2, #3
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4313      	orrs	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040a6:	2201      	movs	r2, #1
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43db      	mvns	r3, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4013      	ands	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	091b      	lsrs	r3, r3, #4
 80040bc:	f003 0201 	and.w	r2, r3, #1
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d017      	beq.n	800410e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	2203      	movs	r2, #3
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4013      	ands	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4313      	orrs	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d123      	bne.n	8004162 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	08da      	lsrs	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3208      	adds	r2, #8
 8004122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	220f      	movs	r2, #15
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43db      	mvns	r3, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4013      	ands	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4313      	orrs	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	08da      	lsrs	r2, r3, #3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3208      	adds	r2, #8
 800415c:	69b9      	ldr	r1, [r7, #24]
 800415e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	2203      	movs	r2, #3
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4013      	ands	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f003 0203 	and.w	r2, r3, #3
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4313      	orrs	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80e0 	beq.w	8004364 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041a4:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <HAL_GPIO_Init+0x238>)
 80041a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041aa:	4a2e      	ldr	r2, [pc, #184]	; (8004264 <HAL_GPIO_Init+0x238>)
 80041ac:	f043 0302 	orr.w	r3, r3, #2
 80041b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80041b4:	4b2b      	ldr	r3, [pc, #172]	; (8004264 <HAL_GPIO_Init+0x238>)
 80041b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041c2:	4a29      	ldr	r2, [pc, #164]	; (8004268 <HAL_GPIO_Init+0x23c>)
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	089b      	lsrs	r3, r3, #2
 80041c8:	3302      	adds	r3, #2
 80041ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	220f      	movs	r2, #15
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	43db      	mvns	r3, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a20      	ldr	r2, [pc, #128]	; (800426c <HAL_GPIO_Init+0x240>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d052      	beq.n	8004294 <HAL_GPIO_Init+0x268>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a1f      	ldr	r2, [pc, #124]	; (8004270 <HAL_GPIO_Init+0x244>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d031      	beq.n	800425a <HAL_GPIO_Init+0x22e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <HAL_GPIO_Init+0x248>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d02b      	beq.n	8004256 <HAL_GPIO_Init+0x22a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a1d      	ldr	r2, [pc, #116]	; (8004278 <HAL_GPIO_Init+0x24c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d025      	beq.n	8004252 <HAL_GPIO_Init+0x226>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a1c      	ldr	r2, [pc, #112]	; (800427c <HAL_GPIO_Init+0x250>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01f      	beq.n	800424e <HAL_GPIO_Init+0x222>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <HAL_GPIO_Init+0x254>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d019      	beq.n	800424a <HAL_GPIO_Init+0x21e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a1a      	ldr	r2, [pc, #104]	; (8004284 <HAL_GPIO_Init+0x258>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d013      	beq.n	8004246 <HAL_GPIO_Init+0x21a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a19      	ldr	r2, [pc, #100]	; (8004288 <HAL_GPIO_Init+0x25c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00d      	beq.n	8004242 <HAL_GPIO_Init+0x216>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a18      	ldr	r2, [pc, #96]	; (800428c <HAL_GPIO_Init+0x260>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d007      	beq.n	800423e <HAL_GPIO_Init+0x212>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a17      	ldr	r2, [pc, #92]	; (8004290 <HAL_GPIO_Init+0x264>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d101      	bne.n	800423a <HAL_GPIO_Init+0x20e>
 8004236:	2309      	movs	r3, #9
 8004238:	e02d      	b.n	8004296 <HAL_GPIO_Init+0x26a>
 800423a:	230a      	movs	r3, #10
 800423c:	e02b      	b.n	8004296 <HAL_GPIO_Init+0x26a>
 800423e:	2308      	movs	r3, #8
 8004240:	e029      	b.n	8004296 <HAL_GPIO_Init+0x26a>
 8004242:	2307      	movs	r3, #7
 8004244:	e027      	b.n	8004296 <HAL_GPIO_Init+0x26a>
 8004246:	2306      	movs	r3, #6
 8004248:	e025      	b.n	8004296 <HAL_GPIO_Init+0x26a>
 800424a:	2305      	movs	r3, #5
 800424c:	e023      	b.n	8004296 <HAL_GPIO_Init+0x26a>
 800424e:	2304      	movs	r3, #4
 8004250:	e021      	b.n	8004296 <HAL_GPIO_Init+0x26a>
 8004252:	2303      	movs	r3, #3
 8004254:	e01f      	b.n	8004296 <HAL_GPIO_Init+0x26a>
 8004256:	2302      	movs	r3, #2
 8004258:	e01d      	b.n	8004296 <HAL_GPIO_Init+0x26a>
 800425a:	2301      	movs	r3, #1
 800425c:	e01b      	b.n	8004296 <HAL_GPIO_Init+0x26a>
 800425e:	bf00      	nop
 8004260:	58000080 	.word	0x58000080
 8004264:	58024400 	.word	0x58024400
 8004268:	58000400 	.word	0x58000400
 800426c:	58020000 	.word	0x58020000
 8004270:	58020400 	.word	0x58020400
 8004274:	58020800 	.word	0x58020800
 8004278:	58020c00 	.word	0x58020c00
 800427c:	58021000 	.word	0x58021000
 8004280:	58021400 	.word	0x58021400
 8004284:	58021800 	.word	0x58021800
 8004288:	58021c00 	.word	0x58021c00
 800428c:	58022000 	.word	0x58022000
 8004290:	58022400 	.word	0x58022400
 8004294:	2300      	movs	r3, #0
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	f002 0203 	and.w	r2, r2, #3
 800429c:	0092      	lsls	r2, r2, #2
 800429e:	4093      	lsls	r3, r2
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042a6:	4938      	ldr	r1, [pc, #224]	; (8004388 <HAL_GPIO_Init+0x35c>)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	089b      	lsrs	r3, r3, #2
 80042ac:	3302      	adds	r3, #2
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	43db      	mvns	r3, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4013      	ands	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80042da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80042e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	43db      	mvns	r3, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4013      	ands	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	43db      	mvns	r3, r3
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4013      	ands	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	43db      	mvns	r3, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4013      	ands	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	3301      	adds	r3, #1
 8004368:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	fa22 f303 	lsr.w	r3, r2, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	f47f ae63 	bne.w	8004040 <HAL_GPIO_Init+0x14>
  }
}
 800437a:	bf00      	nop
 800437c:	bf00      	nop
 800437e:	3724      	adds	r7, #36	; 0x24
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	58000400 	.word	0x58000400

0800438c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	807b      	strh	r3, [r7, #2]
 8004398:	4613      	mov	r3, r2
 800439a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800439c:	787b      	ldrb	r3, [r7, #1]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043a2:	887a      	ldrh	r2, [r7, #2]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80043a8:	e003      	b.n	80043b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80043aa:	887b      	ldrh	r3, [r7, #2]
 80043ac:	041a      	lsls	r2, r3, #16
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	619a      	str	r2, [r3, #24]
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	460b      	mov	r3, r1
 80043c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043d0:	887a      	ldrh	r2, [r7, #2]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4013      	ands	r3, r2
 80043d6:	041a      	lsls	r2, r3, #16
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	43d9      	mvns	r1, r3
 80043dc:	887b      	ldrh	r3, [r7, #2]
 80043de:	400b      	ands	r3, r1
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	619a      	str	r2, [r3, #24]
}
 80043e6:	bf00      	nop
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e041      	b.n	8004488 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800440c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f245 5255 	movw	r2, #21845	; 0x5555
 8004416:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6852      	ldr	r2, [r2, #4]
 8004420:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6892      	ldr	r2, [r2, #8]
 800442a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800442c:	f7fd fb4e 	bl	8001acc <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004432:	e00f      	b.n	8004454 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004434:	f7fd fb4a 	bl	8001acc <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b31      	cmp	r3, #49	; 0x31
 8004440:	d908      	bls.n	8004454 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e019      	b.n	8004488 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e8      	bne.n	8004434 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	429a      	cmp	r2, r3
 800446e:	d005      	beq.n	800447c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68d2      	ldr	r2, [r2, #12]
 8004478:	611a      	str	r2, [r3, #16]
 800447a:	e004      	b.n	8004486 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004484:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80044a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80044b8:	4b19      	ldr	r3, [pc, #100]	; (8004520 <HAL_PWREx_ConfigSupply+0x70>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d00a      	beq.n	80044da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80044c4:	4b16      	ldr	r3, [pc, #88]	; (8004520 <HAL_PWREx_ConfigSupply+0x70>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d001      	beq.n	80044d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e01f      	b.n	8004516 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	e01d      	b.n	8004516 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80044da:	4b11      	ldr	r3, [pc, #68]	; (8004520 <HAL_PWREx_ConfigSupply+0x70>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f023 0207 	bic.w	r2, r3, #7
 80044e2:	490f      	ldr	r1, [pc, #60]	; (8004520 <HAL_PWREx_ConfigSupply+0x70>)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80044ea:	f7fd faef 	bl	8001acc <HAL_GetTick>
 80044ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80044f0:	e009      	b.n	8004506 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80044f2:	f7fd faeb 	bl	8001acc <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004500:	d901      	bls.n	8004506 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e007      	b.n	8004516 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <HAL_PWREx_ConfigSupply+0x70>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800450e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004512:	d1ee      	bne.n	80044f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	58024800 	.word	0x58024800

08004524 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08c      	sub	sp, #48	; 0x30
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	f000 bc1d 	b.w	8004d72 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8087 	beq.w	8004654 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004546:	4b99      	ldr	r3, [pc, #612]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004550:	4b96      	ldr	r3, [pc, #600]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004558:	2b10      	cmp	r3, #16
 800455a:	d007      	beq.n	800456c <HAL_RCC_OscConfig+0x48>
 800455c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455e:	2b18      	cmp	r3, #24
 8004560:	d110      	bne.n	8004584 <HAL_RCC_OscConfig+0x60>
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d10b      	bne.n	8004584 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456c:	4b8f      	ldr	r3, [pc, #572]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d06c      	beq.n	8004652 <HAL_RCC_OscConfig+0x12e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d168      	bne.n	8004652 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e3f6      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d106      	bne.n	800459c <HAL_RCC_OscConfig+0x78>
 800458e:	4b87      	ldr	r3, [pc, #540]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a86      	ldr	r2, [pc, #536]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 8004594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e02e      	b.n	80045fa <HAL_RCC_OscConfig+0xd6>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10c      	bne.n	80045be <HAL_RCC_OscConfig+0x9a>
 80045a4:	4b81      	ldr	r3, [pc, #516]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a80      	ldr	r2, [pc, #512]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80045aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	4b7e      	ldr	r3, [pc, #504]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a7d      	ldr	r2, [pc, #500]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80045b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	e01d      	b.n	80045fa <HAL_RCC_OscConfig+0xd6>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045c6:	d10c      	bne.n	80045e2 <HAL_RCC_OscConfig+0xbe>
 80045c8:	4b78      	ldr	r3, [pc, #480]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a77      	ldr	r2, [pc, #476]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80045ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	4b75      	ldr	r3, [pc, #468]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a74      	ldr	r2, [pc, #464]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80045da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	e00b      	b.n	80045fa <HAL_RCC_OscConfig+0xd6>
 80045e2:	4b72      	ldr	r3, [pc, #456]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a71      	ldr	r2, [pc, #452]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80045e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b6f      	ldr	r3, [pc, #444]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a6e      	ldr	r2, [pc, #440]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80045f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d013      	beq.n	800462a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004602:	f7fd fa63 	bl	8001acc <HAL_GetTick>
 8004606:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800460a:	f7fd fa5f 	bl	8001acc <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b64      	cmp	r3, #100	; 0x64
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e3aa      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800461c:	4b63      	ldr	r3, [pc, #396]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0f0      	beq.n	800460a <HAL_RCC_OscConfig+0xe6>
 8004628:	e014      	b.n	8004654 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462a:	f7fd fa4f 	bl	8001acc <HAL_GetTick>
 800462e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004632:	f7fd fa4b 	bl	8001acc <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b64      	cmp	r3, #100	; 0x64
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e396      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004644:	4b59      	ldr	r3, [pc, #356]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f0      	bne.n	8004632 <HAL_RCC_OscConfig+0x10e>
 8004650:	e000      	b.n	8004654 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004652:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 80cb 	beq.w	80047f8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004662:	4b52      	ldr	r3, [pc, #328]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800466a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800466c:	4b4f      	ldr	r3, [pc, #316]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d007      	beq.n	8004688 <HAL_RCC_OscConfig+0x164>
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	2b18      	cmp	r3, #24
 800467c:	d156      	bne.n	800472c <HAL_RCC_OscConfig+0x208>
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d151      	bne.n	800472c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004688:	4b48      	ldr	r3, [pc, #288]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <HAL_RCC_OscConfig+0x17c>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e368      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046a0:	4b42      	ldr	r3, [pc, #264]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f023 0219 	bic.w	r2, r3, #25
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	493f      	ldr	r1, [pc, #252]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046b2:	f7fd fa0b 	bl	8001acc <HAL_GetTick>
 80046b6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ba:	f7fd fa07 	bl	8001acc <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e352      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046cc:	4b37      	ldr	r3, [pc, #220]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d8:	f7fd fa04 	bl	8001ae4 <HAL_GetREVID>
 80046dc:	4603      	mov	r3, r0
 80046de:	f241 0203 	movw	r2, #4099	; 0x1003
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d817      	bhi.n	8004716 <HAL_RCC_OscConfig+0x1f2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b40      	cmp	r3, #64	; 0x40
 80046ec:	d108      	bne.n	8004700 <HAL_RCC_OscConfig+0x1dc>
 80046ee:	4b2f      	ldr	r3, [pc, #188]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80046f6:	4a2d      	ldr	r2, [pc, #180]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80046f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046fe:	e07b      	b.n	80047f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004700:	4b2a      	ldr	r3, [pc, #168]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	031b      	lsls	r3, r3, #12
 800470e:	4927      	ldr	r1, [pc, #156]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 8004710:	4313      	orrs	r3, r2
 8004712:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004714:	e070      	b.n	80047f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004716:	4b25      	ldr	r3, [pc, #148]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	061b      	lsls	r3, r3, #24
 8004724:	4921      	ldr	r1, [pc, #132]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 8004726:	4313      	orrs	r3, r2
 8004728:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800472a:	e065      	b.n	80047f8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d048      	beq.n	80047c6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004734:	4b1d      	ldr	r3, [pc, #116]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f023 0219 	bic.w	r2, r3, #25
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	491a      	ldr	r1, [pc, #104]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 8004742:	4313      	orrs	r3, r2
 8004744:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004746:	f7fd f9c1 	bl	8001acc <HAL_GetTick>
 800474a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800474e:	f7fd f9bd 	bl	8001acc <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e308      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004760:	4b12      	ldr	r3, [pc, #72]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476c:	f7fd f9ba 	bl	8001ae4 <HAL_GetREVID>
 8004770:	4603      	mov	r3, r0
 8004772:	f241 0203 	movw	r2, #4099	; 0x1003
 8004776:	4293      	cmp	r3, r2
 8004778:	d81a      	bhi.n	80047b0 <HAL_RCC_OscConfig+0x28c>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b40      	cmp	r3, #64	; 0x40
 8004780:	d108      	bne.n	8004794 <HAL_RCC_OscConfig+0x270>
 8004782:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800478a:	4a08      	ldr	r2, [pc, #32]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 800478c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004790:	6053      	str	r3, [r2, #4]
 8004792:	e031      	b.n	80047f8 <HAL_RCC_OscConfig+0x2d4>
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	031b      	lsls	r3, r3, #12
 80047a2:	4902      	ldr	r1, [pc, #8]	; (80047ac <HAL_RCC_OscConfig+0x288>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	604b      	str	r3, [r1, #4]
 80047a8:	e026      	b.n	80047f8 <HAL_RCC_OscConfig+0x2d4>
 80047aa:	bf00      	nop
 80047ac:	58024400 	.word	0x58024400
 80047b0:	4b9a      	ldr	r3, [pc, #616]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	061b      	lsls	r3, r3, #24
 80047be:	4997      	ldr	r1, [pc, #604]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	604b      	str	r3, [r1, #4]
 80047c4:	e018      	b.n	80047f8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047c6:	4b95      	ldr	r3, [pc, #596]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a94      	ldr	r2, [pc, #592]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d2:	f7fd f97b 	bl	8001acc <HAL_GetTick>
 80047d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047da:	f7fd f977 	bl	8001acc <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e2c2      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80047ec:	4b8b      	ldr	r3, [pc, #556]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f0      	bne.n	80047da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80a9 	beq.w	8004958 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004806:	4b85      	ldr	r3, [pc, #532]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800480e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004810:	4b82      	ldr	r3, [pc, #520]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b08      	cmp	r3, #8
 800481a:	d007      	beq.n	800482c <HAL_RCC_OscConfig+0x308>
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b18      	cmp	r3, #24
 8004820:	d13a      	bne.n	8004898 <HAL_RCC_OscConfig+0x374>
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f003 0303 	and.w	r3, r3, #3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d135      	bne.n	8004898 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800482c:	4b7b      	ldr	r3, [pc, #492]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_RCC_OscConfig+0x320>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	2b80      	cmp	r3, #128	; 0x80
 800483e:	d001      	beq.n	8004844 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e296      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004844:	f7fd f94e 	bl	8001ae4 <HAL_GetREVID>
 8004848:	4603      	mov	r3, r0
 800484a:	f241 0203 	movw	r2, #4099	; 0x1003
 800484e:	4293      	cmp	r3, r2
 8004850:	d817      	bhi.n	8004882 <HAL_RCC_OscConfig+0x35e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	2b20      	cmp	r3, #32
 8004858:	d108      	bne.n	800486c <HAL_RCC_OscConfig+0x348>
 800485a:	4b70      	ldr	r3, [pc, #448]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004862:	4a6e      	ldr	r2, [pc, #440]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 8004864:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004868:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800486a:	e075      	b.n	8004958 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800486c:	4b6b      	ldr	r3, [pc, #428]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	069b      	lsls	r3, r3, #26
 800487a:	4968      	ldr	r1, [pc, #416]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 800487c:	4313      	orrs	r3, r2
 800487e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004880:	e06a      	b.n	8004958 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004882:	4b66      	ldr	r3, [pc, #408]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	061b      	lsls	r3, r3, #24
 8004890:	4962      	ldr	r1, [pc, #392]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 8004892:	4313      	orrs	r3, r2
 8004894:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004896:	e05f      	b.n	8004958 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d042      	beq.n	8004926 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80048a0:	4b5e      	ldr	r3, [pc, #376]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a5d      	ldr	r2, [pc, #372]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 80048a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ac:	f7fd f90e 	bl	8001acc <HAL_GetTick>
 80048b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80048b4:	f7fd f90a 	bl	8001acc <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e255      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048c6:	4b55      	ldr	r3, [pc, #340]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0f0      	beq.n	80048b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048d2:	f7fd f907 	bl	8001ae4 <HAL_GetREVID>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80048dc:	4293      	cmp	r3, r2
 80048de:	d817      	bhi.n	8004910 <HAL_RCC_OscConfig+0x3ec>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d108      	bne.n	80048fa <HAL_RCC_OscConfig+0x3d6>
 80048e8:	4b4c      	ldr	r3, [pc, #304]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80048f0:	4a4a      	ldr	r2, [pc, #296]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 80048f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048f6:	6053      	str	r3, [r2, #4]
 80048f8:	e02e      	b.n	8004958 <HAL_RCC_OscConfig+0x434>
 80048fa:	4b48      	ldr	r3, [pc, #288]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	069b      	lsls	r3, r3, #26
 8004908:	4944      	ldr	r1, [pc, #272]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 800490a:	4313      	orrs	r3, r2
 800490c:	604b      	str	r3, [r1, #4]
 800490e:	e023      	b.n	8004958 <HAL_RCC_OscConfig+0x434>
 8004910:	4b42      	ldr	r3, [pc, #264]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	061b      	lsls	r3, r3, #24
 800491e:	493f      	ldr	r1, [pc, #252]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 8004920:	4313      	orrs	r3, r2
 8004922:	60cb      	str	r3, [r1, #12]
 8004924:	e018      	b.n	8004958 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004926:	4b3d      	ldr	r3, [pc, #244]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a3c      	ldr	r2, [pc, #240]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 800492c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004932:	f7fd f8cb 	bl	8001acc <HAL_GetTick>
 8004936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800493a:	f7fd f8c7 	bl	8001acc <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e212      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800494c:	4b33      	ldr	r3, [pc, #204]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1f0      	bne.n	800493a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b00      	cmp	r3, #0
 8004962:	d036      	beq.n	80049d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d019      	beq.n	80049a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800496c:	4b2b      	ldr	r3, [pc, #172]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 800496e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004970:	4a2a      	ldr	r2, [pc, #168]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004978:	f7fd f8a8 	bl	8001acc <HAL_GetTick>
 800497c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004980:	f7fd f8a4 	bl	8001acc <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e1ef      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004992:	4b22      	ldr	r3, [pc, #136]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 8004994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x45c>
 800499e:	e018      	b.n	80049d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a0:	4b1e      	ldr	r3, [pc, #120]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 80049a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a4:	4a1d      	ldr	r2, [pc, #116]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ac:	f7fd f88e 	bl	8001acc <HAL_GetTick>
 80049b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b4:	f7fd f88a 	bl	8001acc <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e1d5      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049c6:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 80049c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d039      	beq.n	8004a52 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01c      	beq.n	8004a20 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049e6:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a0c      	ldr	r2, [pc, #48]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 80049ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049f2:	f7fd f86b 	bl	8001acc <HAL_GetTick>
 80049f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80049fa:	f7fd f867 	bl	8001acc <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e1b2      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a0c:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <HAL_RCC_OscConfig+0x4f8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0f0      	beq.n	80049fa <HAL_RCC_OscConfig+0x4d6>
 8004a18:	e01b      	b.n	8004a52 <HAL_RCC_OscConfig+0x52e>
 8004a1a:	bf00      	nop
 8004a1c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a20:	4b9b      	ldr	r3, [pc, #620]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a9a      	ldr	r2, [pc, #616]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a2c:	f7fd f84e 	bl	8001acc <HAL_GetTick>
 8004a30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004a34:	f7fd f84a 	bl	8001acc <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e195      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a46:	4b92      	ldr	r3, [pc, #584]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f0      	bne.n	8004a34 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 8081 	beq.w	8004b62 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a60:	4b8c      	ldr	r3, [pc, #560]	; (8004c94 <HAL_RCC_OscConfig+0x770>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a8b      	ldr	r2, [pc, #556]	; (8004c94 <HAL_RCC_OscConfig+0x770>)
 8004a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a6c:	f7fd f82e 	bl	8001acc <HAL_GetTick>
 8004a70:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a74:	f7fd f82a 	bl	8001acc <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	; 0x64
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e175      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a86:	4b83      	ldr	r3, [pc, #524]	; (8004c94 <HAL_RCC_OscConfig+0x770>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d106      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x584>
 8004a9a:	4b7d      	ldr	r3, [pc, #500]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	4a7c      	ldr	r2, [pc, #496]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa6:	e02d      	b.n	8004b04 <HAL_RCC_OscConfig+0x5e0>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10c      	bne.n	8004aca <HAL_RCC_OscConfig+0x5a6>
 8004ab0:	4b77      	ldr	r3, [pc, #476]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab4:	4a76      	ldr	r2, [pc, #472]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004ab6:	f023 0301 	bic.w	r3, r3, #1
 8004aba:	6713      	str	r3, [r2, #112]	; 0x70
 8004abc:	4b74      	ldr	r3, [pc, #464]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac0:	4a73      	ldr	r2, [pc, #460]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004ac2:	f023 0304 	bic.w	r3, r3, #4
 8004ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac8:	e01c      	b.n	8004b04 <HAL_RCC_OscConfig+0x5e0>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b05      	cmp	r3, #5
 8004ad0:	d10c      	bne.n	8004aec <HAL_RCC_OscConfig+0x5c8>
 8004ad2:	4b6f      	ldr	r3, [pc, #444]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad6:	4a6e      	ldr	r2, [pc, #440]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004ad8:	f043 0304 	orr.w	r3, r3, #4
 8004adc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ade:	4b6c      	ldr	r3, [pc, #432]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae2:	4a6b      	ldr	r2, [pc, #428]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8004aea:	e00b      	b.n	8004b04 <HAL_RCC_OscConfig+0x5e0>
 8004aec:	4b68      	ldr	r3, [pc, #416]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	4a67      	ldr	r2, [pc, #412]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004af2:	f023 0301 	bic.w	r3, r3, #1
 8004af6:	6713      	str	r3, [r2, #112]	; 0x70
 8004af8:	4b65      	ldr	r3, [pc, #404]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afc:	4a64      	ldr	r2, [pc, #400]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004afe:	f023 0304 	bic.w	r3, r3, #4
 8004b02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d015      	beq.n	8004b38 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0c:	f7fc ffde 	bl	8001acc <HAL_GetTick>
 8004b10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b12:	e00a      	b.n	8004b2a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b14:	f7fc ffda 	bl	8001acc <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e123      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b2a:	4b59      	ldr	r3, [pc, #356]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0ee      	beq.n	8004b14 <HAL_RCC_OscConfig+0x5f0>
 8004b36:	e014      	b.n	8004b62 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b38:	f7fc ffc8 	bl	8001acc <HAL_GetTick>
 8004b3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b3e:	e00a      	b.n	8004b56 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b40:	f7fc ffc4 	bl	8001acc <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e10d      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b56:	4b4e      	ldr	r3, [pc, #312]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1ee      	bne.n	8004b40 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 8102 	beq.w	8004d70 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b6c:	4b48      	ldr	r3, [pc, #288]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b74:	2b18      	cmp	r3, #24
 8004b76:	f000 80bd 	beq.w	8004cf4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	f040 809e 	bne.w	8004cc0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b84:	4b42      	ldr	r3, [pc, #264]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a41      	ldr	r2, [pc, #260]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b90:	f7fc ff9c 	bl	8001acc <HAL_GetTick>
 8004b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b98:	f7fc ff98 	bl	8001acc <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e0e3      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004baa:	4b39      	ldr	r3, [pc, #228]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f0      	bne.n	8004b98 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bb6:	4b36      	ldr	r3, [pc, #216]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bba:	4b37      	ldr	r3, [pc, #220]	; (8004c98 <HAL_RCC_OscConfig+0x774>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bc6:	0112      	lsls	r2, r2, #4
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	4931      	ldr	r1, [pc, #196]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	628b      	str	r3, [r1, #40]	; 0x28
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bde:	3b01      	subs	r3, #1
 8004be0:	025b      	lsls	r3, r3, #9
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	3b01      	subs	r3, #1
 8004bec:	041b      	lsls	r3, r3, #16
 8004bee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	061b      	lsls	r3, r3, #24
 8004bfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c00:	4923      	ldr	r1, [pc, #140]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004c06:	4b22      	ldr	r3, [pc, #136]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	4a21      	ldr	r2, [pc, #132]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c12:	4b1f      	ldr	r3, [pc, #124]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c16:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <HAL_RCC_OscConfig+0x778>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c1e:	00d2      	lsls	r2, r2, #3
 8004c20:	491b      	ldr	r1, [pc, #108]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c26:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	f023 020c 	bic.w	r2, r3, #12
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	4917      	ldr	r1, [pc, #92]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c38:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	f023 0202 	bic.w	r2, r3, #2
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c44:	4912      	ldr	r1, [pc, #72]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c4a:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	4a10      	ldr	r2, [pc, #64]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c56:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	4a0d      	ldr	r2, [pc, #52]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c62:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	4a0a      	ldr	r2, [pc, #40]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004c6e:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	4a07      	ldr	r2, [pc, #28]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c7a:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a04      	ldr	r2, [pc, #16]	; (8004c90 <HAL_RCC_OscConfig+0x76c>)
 8004c80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c86:	f7fc ff21 	bl	8001acc <HAL_GetTick>
 8004c8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c8c:	e011      	b.n	8004cb2 <HAL_RCC_OscConfig+0x78e>
 8004c8e:	bf00      	nop
 8004c90:	58024400 	.word	0x58024400
 8004c94:	58024800 	.word	0x58024800
 8004c98:	fffffc0c 	.word	0xfffffc0c
 8004c9c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ca0:	f7fc ff14 	bl	8001acc <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e05f      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cb2:	4b32      	ldr	r3, [pc, #200]	; (8004d7c <HAL_RCC_OscConfig+0x858>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0f0      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x77c>
 8004cbe:	e057      	b.n	8004d70 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc0:	4b2e      	ldr	r3, [pc, #184]	; (8004d7c <HAL_RCC_OscConfig+0x858>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a2d      	ldr	r2, [pc, #180]	; (8004d7c <HAL_RCC_OscConfig+0x858>)
 8004cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7fc fefe 	bl	8001acc <HAL_GetTick>
 8004cd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd4:	f7fc fefa 	bl	8001acc <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e045      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ce6:	4b25      	ldr	r3, [pc, #148]	; (8004d7c <HAL_RCC_OscConfig+0x858>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f0      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x7b0>
 8004cf2:	e03d      	b.n	8004d70 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004cf4:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <HAL_RCC_OscConfig+0x858>)
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004cfa:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <HAL_RCC_OscConfig+0x858>)
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d031      	beq.n	8004d6c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f003 0203 	and.w	r2, r3, #3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d12a      	bne.n	8004d6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	091b      	lsrs	r3, r3, #4
 8004d1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d122      	bne.n	8004d6c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d11a      	bne.n	8004d6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	0a5b      	lsrs	r3, r3, #9
 8004d3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d42:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d111      	bne.n	8004d6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	0c1b      	lsrs	r3, r3, #16
 8004d4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d108      	bne.n	8004d6c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	0e1b      	lsrs	r3, r3, #24
 8004d5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d66:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d001      	beq.n	8004d70 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3730      	adds	r7, #48	; 0x30
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	58024400 	.word	0x58024400

08004d80 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e19c      	b.n	80050ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d94:	4b8a      	ldr	r3, [pc, #552]	; (8004fc0 <HAL_RCC_ClockConfig+0x240>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 030f 	and.w	r3, r3, #15
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d910      	bls.n	8004dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da2:	4b87      	ldr	r3, [pc, #540]	; (8004fc0 <HAL_RCC_ClockConfig+0x240>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f023 020f 	bic.w	r2, r3, #15
 8004daa:	4985      	ldr	r1, [pc, #532]	; (8004fc0 <HAL_RCC_ClockConfig+0x240>)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db2:	4b83      	ldr	r3, [pc, #524]	; (8004fc0 <HAL_RCC_ClockConfig+0x240>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d001      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e184      	b.n	80050ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d010      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	4b7b      	ldr	r3, [pc, #492]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d908      	bls.n	8004df2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004de0:	4b78      	ldr	r3, [pc, #480]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	4975      	ldr	r1, [pc, #468]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d010      	beq.n	8004e20 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695a      	ldr	r2, [r3, #20]
 8004e02:	4b70      	ldr	r3, [pc, #448]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d908      	bls.n	8004e20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e0e:	4b6d      	ldr	r3, [pc, #436]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	496a      	ldr	r1, [pc, #424]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d010      	beq.n	8004e4e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699a      	ldr	r2, [r3, #24]
 8004e30:	4b64      	ldr	r3, [pc, #400]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d908      	bls.n	8004e4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e3c:	4b61      	ldr	r3, [pc, #388]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	495e      	ldr	r1, [pc, #376]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d010      	beq.n	8004e7c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69da      	ldr	r2, [r3, #28]
 8004e5e:	4b59      	ldr	r3, [pc, #356]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d908      	bls.n	8004e7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e6a:	4b56      	ldr	r3, [pc, #344]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	4953      	ldr	r1, [pc, #332]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d010      	beq.n	8004eaa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	4b4d      	ldr	r3, [pc, #308]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d908      	bls.n	8004eaa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e98:	4b4a      	ldr	r3, [pc, #296]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f023 020f 	bic.w	r2, r3, #15
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	4947      	ldr	r1, [pc, #284]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d055      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004eb6:	4b43      	ldr	r3, [pc, #268]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	4940      	ldr	r1, [pc, #256]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d107      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ed0:	4b3c      	ldr	r3, [pc, #240]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d121      	bne.n	8004f20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0f6      	b.n	80050ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d107      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ee8:	4b36      	ldr	r3, [pc, #216]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d115      	bne.n	8004f20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0ea      	b.n	80050ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d107      	bne.n	8004f10 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f00:	4b30      	ldr	r3, [pc, #192]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d109      	bne.n	8004f20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0de      	b.n	80050ce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f10:	4b2c      	ldr	r3, [pc, #176]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e0d6      	b.n	80050ce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f20:	4b28      	ldr	r3, [pc, #160]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f023 0207 	bic.w	r2, r3, #7
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	4925      	ldr	r1, [pc, #148]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f32:	f7fc fdcb 	bl	8001acc <HAL_GetTick>
 8004f36:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f38:	e00a      	b.n	8004f50 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f3a:	f7fc fdc7 	bl	8001acc <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e0be      	b.n	80050ce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f50:	4b1c      	ldr	r3, [pc, #112]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d1eb      	bne.n	8004f3a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d010      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	4b14      	ldr	r3, [pc, #80]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d208      	bcs.n	8004f90 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f7e:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	f023 020f 	bic.w	r2, r3, #15
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	490e      	ldr	r1, [pc, #56]	; (8004fc4 <HAL_RCC_ClockConfig+0x244>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f90:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <HAL_RCC_ClockConfig+0x240>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 030f 	and.w	r3, r3, #15
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d214      	bcs.n	8004fc8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f9e:	4b08      	ldr	r3, [pc, #32]	; (8004fc0 <HAL_RCC_ClockConfig+0x240>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f023 020f 	bic.w	r2, r3, #15
 8004fa6:	4906      	ldr	r1, [pc, #24]	; (8004fc0 <HAL_RCC_ClockConfig+0x240>)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fae:	4b04      	ldr	r3, [pc, #16]	; (8004fc0 <HAL_RCC_ClockConfig+0x240>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d005      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e086      	b.n	80050ce <HAL_RCC_ClockConfig+0x34e>
 8004fc0:	52002000 	.word	0x52002000
 8004fc4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d010      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	4b3f      	ldr	r3, [pc, #252]	; (80050d8 <HAL_RCC_ClockConfig+0x358>)
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d208      	bcs.n	8004ff6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004fe4:	4b3c      	ldr	r3, [pc, #240]	; (80050d8 <HAL_RCC_ClockConfig+0x358>)
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	4939      	ldr	r1, [pc, #228]	; (80050d8 <HAL_RCC_ClockConfig+0x358>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d010      	beq.n	8005024 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	695a      	ldr	r2, [r3, #20]
 8005006:	4b34      	ldr	r3, [pc, #208]	; (80050d8 <HAL_RCC_ClockConfig+0x358>)
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800500e:	429a      	cmp	r2, r3
 8005010:	d208      	bcs.n	8005024 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005012:	4b31      	ldr	r3, [pc, #196]	; (80050d8 <HAL_RCC_ClockConfig+0x358>)
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	492e      	ldr	r1, [pc, #184]	; (80050d8 <HAL_RCC_ClockConfig+0x358>)
 8005020:	4313      	orrs	r3, r2
 8005022:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0310 	and.w	r3, r3, #16
 800502c:	2b00      	cmp	r3, #0
 800502e:	d010      	beq.n	8005052 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699a      	ldr	r2, [r3, #24]
 8005034:	4b28      	ldr	r3, [pc, #160]	; (80050d8 <HAL_RCC_ClockConfig+0x358>)
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800503c:	429a      	cmp	r2, r3
 800503e:	d208      	bcs.n	8005052 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005040:	4b25      	ldr	r3, [pc, #148]	; (80050d8 <HAL_RCC_ClockConfig+0x358>)
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	4922      	ldr	r1, [pc, #136]	; (80050d8 <HAL_RCC_ClockConfig+0x358>)
 800504e:	4313      	orrs	r3, r2
 8005050:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d010      	beq.n	8005080 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69da      	ldr	r2, [r3, #28]
 8005062:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <HAL_RCC_ClockConfig+0x358>)
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800506a:	429a      	cmp	r2, r3
 800506c:	d208      	bcs.n	8005080 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800506e:	4b1a      	ldr	r3, [pc, #104]	; (80050d8 <HAL_RCC_ClockConfig+0x358>)
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	4917      	ldr	r1, [pc, #92]	; (80050d8 <HAL_RCC_ClockConfig+0x358>)
 800507c:	4313      	orrs	r3, r2
 800507e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005080:	f000 f834 	bl	80050ec <HAL_RCC_GetSysClockFreq>
 8005084:	4602      	mov	r2, r0
 8005086:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <HAL_RCC_ClockConfig+0x358>)
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	0a1b      	lsrs	r3, r3, #8
 800508c:	f003 030f 	and.w	r3, r3, #15
 8005090:	4912      	ldr	r1, [pc, #72]	; (80050dc <HAL_RCC_ClockConfig+0x35c>)
 8005092:	5ccb      	ldrb	r3, [r1, r3]
 8005094:	f003 031f 	and.w	r3, r3, #31
 8005098:	fa22 f303 	lsr.w	r3, r2, r3
 800509c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800509e:	4b0e      	ldr	r3, [pc, #56]	; (80050d8 <HAL_RCC_ClockConfig+0x358>)
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	4a0d      	ldr	r2, [pc, #52]	; (80050dc <HAL_RCC_ClockConfig+0x35c>)
 80050a8:	5cd3      	ldrb	r3, [r2, r3]
 80050aa:	f003 031f 	and.w	r3, r3, #31
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	fa22 f303 	lsr.w	r3, r2, r3
 80050b4:	4a0a      	ldr	r2, [pc, #40]	; (80050e0 <HAL_RCC_ClockConfig+0x360>)
 80050b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050b8:	4a0a      	ldr	r2, [pc, #40]	; (80050e4 <HAL_RCC_ClockConfig+0x364>)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80050be:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <HAL_RCC_ClockConfig+0x368>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fb ff96 	bl	8000ff4 <HAL_InitTick>
 80050c8:	4603      	mov	r3, r0
 80050ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	58024400 	.word	0x58024400
 80050dc:	08020124 	.word	0x08020124
 80050e0:	24000004 	.word	0x24000004
 80050e4:	24000000 	.word	0x24000000
 80050e8:	24000008 	.word	0x24000008

080050ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b089      	sub	sp, #36	; 0x24
 80050f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050f2:	4bb3      	ldr	r3, [pc, #716]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050fa:	2b18      	cmp	r3, #24
 80050fc:	f200 8155 	bhi.w	80053aa <HAL_RCC_GetSysClockFreq+0x2be>
 8005100:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005106:	bf00      	nop
 8005108:	0800516d 	.word	0x0800516d
 800510c:	080053ab 	.word	0x080053ab
 8005110:	080053ab 	.word	0x080053ab
 8005114:	080053ab 	.word	0x080053ab
 8005118:	080053ab 	.word	0x080053ab
 800511c:	080053ab 	.word	0x080053ab
 8005120:	080053ab 	.word	0x080053ab
 8005124:	080053ab 	.word	0x080053ab
 8005128:	08005193 	.word	0x08005193
 800512c:	080053ab 	.word	0x080053ab
 8005130:	080053ab 	.word	0x080053ab
 8005134:	080053ab 	.word	0x080053ab
 8005138:	080053ab 	.word	0x080053ab
 800513c:	080053ab 	.word	0x080053ab
 8005140:	080053ab 	.word	0x080053ab
 8005144:	080053ab 	.word	0x080053ab
 8005148:	08005199 	.word	0x08005199
 800514c:	080053ab 	.word	0x080053ab
 8005150:	080053ab 	.word	0x080053ab
 8005154:	080053ab 	.word	0x080053ab
 8005158:	080053ab 	.word	0x080053ab
 800515c:	080053ab 	.word	0x080053ab
 8005160:	080053ab 	.word	0x080053ab
 8005164:	080053ab 	.word	0x080053ab
 8005168:	0800519f 	.word	0x0800519f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800516c:	4b94      	ldr	r3, [pc, #592]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	d009      	beq.n	800518c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005178:	4b91      	ldr	r3, [pc, #580]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	08db      	lsrs	r3, r3, #3
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	4a90      	ldr	r2, [pc, #576]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005184:	fa22 f303 	lsr.w	r3, r2, r3
 8005188:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800518a:	e111      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800518c:	4b8d      	ldr	r3, [pc, #564]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800518e:	61bb      	str	r3, [r7, #24]
    break;
 8005190:	e10e      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005192:	4b8d      	ldr	r3, [pc, #564]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005194:	61bb      	str	r3, [r7, #24]
    break;
 8005196:	e10b      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005198:	4b8c      	ldr	r3, [pc, #560]	; (80053cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800519a:	61bb      	str	r3, [r7, #24]
    break;
 800519c:	e108      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800519e:	4b88      	ldr	r3, [pc, #544]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80051a8:	4b85      	ldr	r3, [pc, #532]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80051b4:	4b82      	ldr	r3, [pc, #520]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80051be:	4b80      	ldr	r3, [pc, #512]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c2:	08db      	lsrs	r3, r3, #3
 80051c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	fb02 f303 	mul.w	r3, r2, r3
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 80e1 	beq.w	80053a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	f000 8083 	beq.w	80052f0 <HAL_RCC_GetSysClockFreq+0x204>
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	f200 80a1 	bhi.w	8005334 <HAL_RCC_GetSysClockFreq+0x248>
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_RCC_GetSysClockFreq+0x114>
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d056      	beq.n	80052ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80051fe:	e099      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005200:	4b6f      	ldr	r3, [pc, #444]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b00      	cmp	r3, #0
 800520a:	d02d      	beq.n	8005268 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800520c:	4b6c      	ldr	r3, [pc, #432]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	08db      	lsrs	r3, r3, #3
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	4a6b      	ldr	r2, [pc, #428]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005218:	fa22 f303 	lsr.w	r3, r2, r3
 800521c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	ee07 3a90 	vmov	s15, r3
 8005224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005236:	4b62      	ldr	r3, [pc, #392]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005246:	ed97 6a02 	vldr	s12, [r7, #8]
 800524a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80053d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800524e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800525a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800525e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005262:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005266:	e087      	b.n	8005378 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	eddf 6a58 	vldr	s13, [pc, #352]	; 80053d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800527a:	4b51      	ldr	r3, [pc, #324]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528a:	ed97 6a02 	vldr	s12, [r7, #8]
 800528e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80053d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800529a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800529e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052aa:	e065      	b.n	8005378 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80053d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80052ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052be:	4b40      	ldr	r3, [pc, #256]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80052d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80053d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ee:	e043      	b.n	8005378 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80053dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80052fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005302:	4b2f      	ldr	r3, [pc, #188]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005312:	ed97 6a02 	vldr	s12, [r7, #8]
 8005316:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80053d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800531a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800531e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800532a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800532e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005332:	e021      	b.n	8005378 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80053d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005346:	4b1e      	ldr	r3, [pc, #120]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005356:	ed97 6a02 	vldr	s12, [r7, #8]
 800535a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80053d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800535e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800536a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800536e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005376:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005378:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	0a5b      	lsrs	r3, r3, #9
 800537e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005382:	3301      	adds	r3, #1
 8005384:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	ee07 3a90 	vmov	s15, r3
 800538c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005390:	edd7 6a07 	vldr	s13, [r7, #28]
 8005394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800539c:	ee17 3a90 	vmov	r3, s15
 80053a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80053a2:	e005      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61bb      	str	r3, [r7, #24]
    break;
 80053a8:	e002      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80053aa:	4b07      	ldr	r3, [pc, #28]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053ac:	61bb      	str	r3, [r7, #24]
    break;
 80053ae:	bf00      	nop
  }

  return sysclockfreq;
 80053b0:	69bb      	ldr	r3, [r7, #24]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3724      	adds	r7, #36	; 0x24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	58024400 	.word	0x58024400
 80053c4:	03d09000 	.word	0x03d09000
 80053c8:	003d0900 	.word	0x003d0900
 80053cc:	017d7840 	.word	0x017d7840
 80053d0:	46000000 	.word	0x46000000
 80053d4:	4c742400 	.word	0x4c742400
 80053d8:	4a742400 	.word	0x4a742400
 80053dc:	4bbebc20 	.word	0x4bbebc20

080053e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80053e6:	f7ff fe81 	bl	80050ec <HAL_RCC_GetSysClockFreq>
 80053ea:	4602      	mov	r2, r0
 80053ec:	4b10      	ldr	r3, [pc, #64]	; (8005430 <HAL_RCC_GetHCLKFreq+0x50>)
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	0a1b      	lsrs	r3, r3, #8
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	490f      	ldr	r1, [pc, #60]	; (8005434 <HAL_RCC_GetHCLKFreq+0x54>)
 80053f8:	5ccb      	ldrb	r3, [r1, r3]
 80053fa:	f003 031f 	and.w	r3, r3, #31
 80053fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005402:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005404:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <HAL_RCC_GetHCLKFreq+0x50>)
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	4a09      	ldr	r2, [pc, #36]	; (8005434 <HAL_RCC_GetHCLKFreq+0x54>)
 800540e:	5cd3      	ldrb	r3, [r2, r3]
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	fa22 f303 	lsr.w	r3, r2, r3
 800541a:	4a07      	ldr	r2, [pc, #28]	; (8005438 <HAL_RCC_GetHCLKFreq+0x58>)
 800541c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800541e:	4a07      	ldr	r2, [pc, #28]	; (800543c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005424:	4b04      	ldr	r3, [pc, #16]	; (8005438 <HAL_RCC_GetHCLKFreq+0x58>)
 8005426:	681b      	ldr	r3, [r3, #0]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	58024400 	.word	0x58024400
 8005434:	08020124 	.word	0x08020124
 8005438:	24000004 	.word	0x24000004
 800543c:	24000000 	.word	0x24000000

08005440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005444:	f7ff ffcc 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 8005448:	4602      	mov	r2, r0
 800544a:	4b06      	ldr	r3, [pc, #24]	; (8005464 <HAL_RCC_GetPCLK1Freq+0x24>)
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	091b      	lsrs	r3, r3, #4
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	4904      	ldr	r1, [pc, #16]	; (8005468 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005456:	5ccb      	ldrb	r3, [r1, r3]
 8005458:	f003 031f 	and.w	r3, r3, #31
 800545c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005460:	4618      	mov	r0, r3
 8005462:	bd80      	pop	{r7, pc}
 8005464:	58024400 	.word	0x58024400
 8005468:	08020124 	.word	0x08020124

0800546c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005470:	f7ff ffb6 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 8005474:	4602      	mov	r2, r0
 8005476:	4b06      	ldr	r3, [pc, #24]	; (8005490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	0a1b      	lsrs	r3, r3, #8
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	4904      	ldr	r1, [pc, #16]	; (8005494 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005482:	5ccb      	ldrb	r3, [r1, r3]
 8005484:	f003 031f 	and.w	r3, r3, #31
 8005488:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800548c:	4618      	mov	r0, r3
 800548e:	bd80      	pop	{r7, pc}
 8005490:	58024400 	.word	0x58024400
 8005494:	08020124 	.word	0x08020124

08005498 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	223f      	movs	r2, #63	; 0x3f
 80054a6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054a8:	4b1a      	ldr	r3, [pc, #104]	; (8005514 <HAL_RCC_GetClockConfig+0x7c>)
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	f003 0207 	and.w	r2, r3, #7
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80054b4:	4b17      	ldr	r3, [pc, #92]	; (8005514 <HAL_RCC_GetClockConfig+0x7c>)
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80054c0:	4b14      	ldr	r3, [pc, #80]	; (8005514 <HAL_RCC_GetClockConfig+0x7c>)
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	f003 020f 	and.w	r2, r3, #15
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80054cc:	4b11      	ldr	r3, [pc, #68]	; (8005514 <HAL_RCC_GetClockConfig+0x7c>)
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80054d8:	4b0e      	ldr	r3, [pc, #56]	; (8005514 <HAL_RCC_GetClockConfig+0x7c>)
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <HAL_RCC_GetClockConfig+0x7c>)
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80054f0:	4b08      	ldr	r3, [pc, #32]	; (8005514 <HAL_RCC_GetClockConfig+0x7c>)
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80054fc:	4b06      	ldr	r3, [pc, #24]	; (8005518 <HAL_RCC_GetClockConfig+0x80>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 020f 	and.w	r2, r3, #15
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	601a      	str	r2, [r3, #0]
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	58024400 	.word	0x58024400
 8005518:	52002000 	.word	0x52002000

0800551c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005524:	2300      	movs	r3, #0
 8005526:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005528:	2300      	movs	r3, #0
 800552a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d03f      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800553c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005540:	d02a      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005542:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005546:	d824      	bhi.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005548:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800554c:	d018      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800554e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005552:	d81e      	bhi.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800555c:	d007      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800555e:	e018      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005560:	4ba3      	ldr	r3, [pc, #652]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	4aa2      	ldr	r2, [pc, #648]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800556c:	e015      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3304      	adds	r3, #4
 8005572:	2102      	movs	r1, #2
 8005574:	4618      	mov	r0, r3
 8005576:	f001 f9d5 	bl	8006924 <RCCEx_PLL2_Config>
 800557a:	4603      	mov	r3, r0
 800557c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800557e:	e00c      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3324      	adds	r3, #36	; 0x24
 8005584:	2102      	movs	r1, #2
 8005586:	4618      	mov	r0, r3
 8005588:	f001 fa7e 	bl	8006a88 <RCCEx_PLL3_Config>
 800558c:	4603      	mov	r3, r0
 800558e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005590:	e003      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	75fb      	strb	r3, [r7, #23]
      break;
 8005596:	e000      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800559a:	7dfb      	ldrb	r3, [r7, #23]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80055a0:	4b93      	ldr	r3, [pc, #588]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055ac:	4990      	ldr	r1, [pc, #576]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	650b      	str	r3, [r1, #80]	; 0x50
 80055b2:	e001      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b4:	7dfb      	ldrb	r3, [r7, #23]
 80055b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d03d      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d826      	bhi.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80055cc:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	080055e9 	.word	0x080055e9
 80055d8:	080055f7 	.word	0x080055f7
 80055dc:	08005609 	.word	0x08005609
 80055e0:	08005621 	.word	0x08005621
 80055e4:	08005621 	.word	0x08005621
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055e8:	4b81      	ldr	r3, [pc, #516]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	4a80      	ldr	r2, [pc, #512]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055f4:	e015      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3304      	adds	r3, #4
 80055fa:	2100      	movs	r1, #0
 80055fc:	4618      	mov	r0, r3
 80055fe:	f001 f991 	bl	8006924 <RCCEx_PLL2_Config>
 8005602:	4603      	mov	r3, r0
 8005604:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005606:	e00c      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3324      	adds	r3, #36	; 0x24
 800560c:	2100      	movs	r1, #0
 800560e:	4618      	mov	r0, r3
 8005610:	f001 fa3a 	bl	8006a88 <RCCEx_PLL3_Config>
 8005614:	4603      	mov	r3, r0
 8005616:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005618:	e003      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	75fb      	strb	r3, [r7, #23]
      break;
 800561e:	e000      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005620:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005622:	7dfb      	ldrb	r3, [r7, #23]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d109      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005628:	4b71      	ldr	r3, [pc, #452]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800562a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800562c:	f023 0207 	bic.w	r2, r3, #7
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005634:	496e      	ldr	r1, [pc, #440]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005636:	4313      	orrs	r3, r2
 8005638:	650b      	str	r3, [r1, #80]	; 0x50
 800563a:	e001      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563c:	7dfb      	ldrb	r3, [r7, #23]
 800563e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005648:	2b00      	cmp	r3, #0
 800564a:	d042      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005654:	d02b      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800565a:	d825      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800565c:	2bc0      	cmp	r3, #192	; 0xc0
 800565e:	d028      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005660:	2bc0      	cmp	r3, #192	; 0xc0
 8005662:	d821      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005664:	2b80      	cmp	r3, #128	; 0x80
 8005666:	d016      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005668:	2b80      	cmp	r3, #128	; 0x80
 800566a:	d81d      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005670:	2b40      	cmp	r3, #64	; 0x40
 8005672:	d007      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005674:	e018      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005676:	4b5e      	ldr	r3, [pc, #376]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	4a5d      	ldr	r2, [pc, #372]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800567c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005680:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005682:	e017      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3304      	adds	r3, #4
 8005688:	2100      	movs	r1, #0
 800568a:	4618      	mov	r0, r3
 800568c:	f001 f94a 	bl	8006924 <RCCEx_PLL2_Config>
 8005690:	4603      	mov	r3, r0
 8005692:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005694:	e00e      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3324      	adds	r3, #36	; 0x24
 800569a:	2100      	movs	r1, #0
 800569c:	4618      	mov	r0, r3
 800569e:	f001 f9f3 	bl	8006a88 <RCCEx_PLL3_Config>
 80056a2:	4603      	mov	r3, r0
 80056a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80056a6:	e005      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	75fb      	strb	r3, [r7, #23]
      break;
 80056ac:	e002      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80056ae:	bf00      	nop
 80056b0:	e000      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80056b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056b4:	7dfb      	ldrb	r3, [r7, #23]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d109      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80056ba:	4b4d      	ldr	r3, [pc, #308]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056be:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c6:	494a      	ldr	r1, [pc, #296]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	650b      	str	r3, [r1, #80]	; 0x50
 80056cc:	e001      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ce:	7dfb      	ldrb	r3, [r7, #23]
 80056d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d049      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80056e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056e8:	d030      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80056ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056ee:	d82a      	bhi.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80056f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80056f4:	d02c      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80056f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80056fa:	d824      	bhi.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80056fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005700:	d018      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005706:	d81e      	bhi.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800570c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005710:	d007      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005712:	e018      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005714:	4b36      	ldr	r3, [pc, #216]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	4a35      	ldr	r2, [pc, #212]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800571a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800571e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005720:	e017      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3304      	adds	r3, #4
 8005726:	2100      	movs	r1, #0
 8005728:	4618      	mov	r0, r3
 800572a:	f001 f8fb 	bl	8006924 <RCCEx_PLL2_Config>
 800572e:	4603      	mov	r3, r0
 8005730:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005732:	e00e      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3324      	adds	r3, #36	; 0x24
 8005738:	2100      	movs	r1, #0
 800573a:	4618      	mov	r0, r3
 800573c:	f001 f9a4 	bl	8006a88 <RCCEx_PLL3_Config>
 8005740:	4603      	mov	r3, r0
 8005742:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005744:	e005      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	75fb      	strb	r3, [r7, #23]
      break;
 800574a:	e002      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800574c:	bf00      	nop
 800574e:	e000      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005750:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005752:	7dfb      	ldrb	r3, [r7, #23]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10a      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005758:	4b25      	ldr	r3, [pc, #148]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800575a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800575c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005766:	4922      	ldr	r1, [pc, #136]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005768:	4313      	orrs	r3, r2
 800576a:	658b      	str	r3, [r1, #88]	; 0x58
 800576c:	e001      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576e:	7dfb      	ldrb	r3, [r7, #23]
 8005770:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800577a:	2b00      	cmp	r3, #0
 800577c:	d04b      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005784:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005788:	d030      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800578a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800578e:	d82a      	bhi.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005790:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005794:	d02e      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005796:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800579a:	d824      	bhi.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800579c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057a0:	d018      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80057a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057a6:	d81e      	bhi.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80057ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057b0:	d007      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80057b2:	e018      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057b4:	4b0e      	ldr	r3, [pc, #56]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	4a0d      	ldr	r2, [pc, #52]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80057ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057c0:	e019      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3304      	adds	r3, #4
 80057c6:	2100      	movs	r1, #0
 80057c8:	4618      	mov	r0, r3
 80057ca:	f001 f8ab 	bl	8006924 <RCCEx_PLL2_Config>
 80057ce:	4603      	mov	r3, r0
 80057d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80057d2:	e010      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3324      	adds	r3, #36	; 0x24
 80057d8:	2100      	movs	r1, #0
 80057da:	4618      	mov	r0, r3
 80057dc:	f001 f954 	bl	8006a88 <RCCEx_PLL3_Config>
 80057e0:	4603      	mov	r3, r0
 80057e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057e4:	e007      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	75fb      	strb	r3, [r7, #23]
      break;
 80057ea:	e004      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80057ec:	bf00      	nop
 80057ee:	e002      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80057f0:	58024400 	.word	0x58024400
      break;
 80057f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057f6:	7dfb      	ldrb	r3, [r7, #23]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80057fc:	4b99      	ldr	r3, [pc, #612]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005800:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800580a:	4996      	ldr	r1, [pc, #600]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800580c:	4313      	orrs	r3, r2
 800580e:	658b      	str	r3, [r1, #88]	; 0x58
 8005810:	e001      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005812:	7dfb      	ldrb	r3, [r7, #23]
 8005814:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d032      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005826:	2b30      	cmp	r3, #48	; 0x30
 8005828:	d01c      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800582a:	2b30      	cmp	r3, #48	; 0x30
 800582c:	d817      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800582e:	2b20      	cmp	r3, #32
 8005830:	d00c      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005832:	2b20      	cmp	r3, #32
 8005834:	d813      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005836:	2b00      	cmp	r3, #0
 8005838:	d016      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800583a:	2b10      	cmp	r3, #16
 800583c:	d10f      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800583e:	4b89      	ldr	r3, [pc, #548]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	4a88      	ldr	r2, [pc, #544]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005848:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800584a:	e00e      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3304      	adds	r3, #4
 8005850:	2102      	movs	r1, #2
 8005852:	4618      	mov	r0, r3
 8005854:	f001 f866 	bl	8006924 <RCCEx_PLL2_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800585c:	e005      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	75fb      	strb	r3, [r7, #23]
      break;
 8005862:	e002      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005864:	bf00      	nop
 8005866:	e000      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d109      	bne.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005870:	4b7c      	ldr	r3, [pc, #496]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005874:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587c:	4979      	ldr	r1, [pc, #484]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800587e:	4313      	orrs	r3, r2
 8005880:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005882:	e001      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d047      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800589c:	d030      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800589e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058a2:	d82a      	bhi.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80058a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058a8:	d02c      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80058aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058ae:	d824      	bhi.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80058b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b4:	d018      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80058b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ba:	d81e      	bhi.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80058c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c4:	d007      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80058c6:	e018      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c8:	4b66      	ldr	r3, [pc, #408]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	4a65      	ldr	r2, [pc, #404]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80058d4:	e017      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3304      	adds	r3, #4
 80058da:	2100      	movs	r1, #0
 80058dc:	4618      	mov	r0, r3
 80058de:	f001 f821 	bl	8006924 <RCCEx_PLL2_Config>
 80058e2:	4603      	mov	r3, r0
 80058e4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80058e6:	e00e      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3324      	adds	r3, #36	; 0x24
 80058ec:	2100      	movs	r1, #0
 80058ee:	4618      	mov	r0, r3
 80058f0:	f001 f8ca 	bl	8006a88 <RCCEx_PLL3_Config>
 80058f4:	4603      	mov	r3, r0
 80058f6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80058f8:	e005      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	75fb      	strb	r3, [r7, #23]
      break;
 80058fe:	e002      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005900:	bf00      	nop
 8005902:	e000      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005906:	7dfb      	ldrb	r3, [r7, #23]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d109      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800590c:	4b55      	ldr	r3, [pc, #340]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800590e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005910:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005918:	4952      	ldr	r1, [pc, #328]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800591a:	4313      	orrs	r3, r2
 800591c:	650b      	str	r3, [r1, #80]	; 0x50
 800591e:	e001      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005920:	7dfb      	ldrb	r3, [r7, #23]
 8005922:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d049      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005938:	d02e      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800593a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800593e:	d828      	bhi.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005940:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005944:	d02a      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005946:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800594a:	d822      	bhi.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800594c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005950:	d026      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005952:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005956:	d81c      	bhi.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005958:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800595c:	d010      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800595e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005962:	d816      	bhi.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01d      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596c:	d111      	bne.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3304      	adds	r3, #4
 8005972:	2101      	movs	r1, #1
 8005974:	4618      	mov	r0, r3
 8005976:	f000 ffd5 	bl	8006924 <RCCEx_PLL2_Config>
 800597a:	4603      	mov	r3, r0
 800597c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800597e:	e012      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3324      	adds	r3, #36	; 0x24
 8005984:	2101      	movs	r1, #1
 8005986:	4618      	mov	r0, r3
 8005988:	f001 f87e 	bl	8006a88 <RCCEx_PLL3_Config>
 800598c:	4603      	mov	r3, r0
 800598e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005990:	e009      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	75fb      	strb	r3, [r7, #23]
      break;
 8005996:	e006      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005998:	bf00      	nop
 800599a:	e004      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800599c:	bf00      	nop
 800599e:	e002      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80059a0:	bf00      	nop
 80059a2:	e000      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80059a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d109      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80059ac:	4b2d      	ldr	r3, [pc, #180]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80059ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b8:	492a      	ldr	r1, [pc, #168]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	650b      	str	r3, [r1, #80]	; 0x50
 80059be:	e001      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c0:	7dfb      	ldrb	r3, [r7, #23]
 80059c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d04d      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80059d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059da:	d02e      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80059dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059e0:	d828      	bhi.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80059e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e6:	d02a      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ec:	d822      	bhi.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80059ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059f2:	d026      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80059f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059f8:	d81c      	bhi.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80059fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059fe:	d010      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a04:	d816      	bhi.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d01d      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a0e:	d111      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3304      	adds	r3, #4
 8005a14:	2101      	movs	r1, #1
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 ff84 	bl	8006924 <RCCEx_PLL2_Config>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005a20:	e012      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3324      	adds	r3, #36	; 0x24
 8005a26:	2101      	movs	r1, #1
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f001 f82d 	bl	8006a88 <RCCEx_PLL3_Config>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005a32:	e009      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	75fb      	strb	r3, [r7, #23]
      break;
 8005a38:	e006      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005a3a:	bf00      	nop
 8005a3c:	e004      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005a3e:	bf00      	nop
 8005a40:	e002      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005a42:	bf00      	nop
 8005a44:	e000      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005a46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10c      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a4e:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a5c:	4901      	ldr	r1, [pc, #4]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	658b      	str	r3, [r1, #88]	; 0x58
 8005a62:	e003      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005a64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
 8005a6a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d02f      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a80:	d00e      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a86:	d814      	bhi.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d015      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005a8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a90:	d10f      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a92:	4baf      	ldr	r3, [pc, #700]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	4aae      	ldr	r2, [pc, #696]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005a9e:	e00c      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 ff3c 	bl	8006924 <RCCEx_PLL2_Config>
 8005aac:	4603      	mov	r3, r0
 8005aae:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005ab0:	e003      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab6:	e000      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005ab8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d109      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ac0:	4ba3      	ldr	r3, [pc, #652]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005acc:	49a0      	ldr	r1, [pc, #640]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	650b      	str	r3, [r1, #80]	; 0x50
 8005ad2:	e001      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
 8005ad6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d032      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d81b      	bhi.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005aec:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af2:	bf00      	nop
 8005af4:	08005b2b 	.word	0x08005b2b
 8005af8:	08005b05 	.word	0x08005b05
 8005afc:	08005b13 	.word	0x08005b13
 8005b00:	08005b2b 	.word	0x08005b2b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b04:	4b92      	ldr	r3, [pc, #584]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	4a91      	ldr	r2, [pc, #580]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005b10:	e00c      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	3304      	adds	r3, #4
 8005b16:	2102      	movs	r1, #2
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 ff03 	bl	8006924 <RCCEx_PLL2_Config>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005b22:	e003      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	75fb      	strb	r3, [r7, #23]
      break;
 8005b28:	e000      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b2c:	7dfb      	ldrb	r3, [r7, #23]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d109      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b32:	4b87      	ldr	r3, [pc, #540]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b36:	f023 0203 	bic.w	r2, r3, #3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3e:	4984      	ldr	r1, [pc, #528]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b44:	e001      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b46:	7dfb      	ldrb	r3, [r7, #23]
 8005b48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 8086 	beq.w	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b58:	4b7e      	ldr	r3, [pc, #504]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a7d      	ldr	r2, [pc, #500]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b64:	f7fb ffb2 	bl	8001acc <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b6a:	e009      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b6c:	f7fb ffae 	bl	8001acc <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b64      	cmp	r3, #100	; 0x64
 8005b78:	d902      	bls.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	75fb      	strb	r3, [r7, #23]
        break;
 8005b7e:	e005      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b80:	4b74      	ldr	r3, [pc, #464]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0ef      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d166      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b92:	4b6f      	ldr	r3, [pc, #444]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005b94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b9c:	4053      	eors	r3, r2
 8005b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d013      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ba6:	4b6a      	ldr	r3, [pc, #424]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bb0:	4b67      	ldr	r3, [pc, #412]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb4:	4a66      	ldr	r2, [pc, #408]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bbc:	4b64      	ldr	r3, [pc, #400]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc0:	4a63      	ldr	r2, [pc, #396]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bc6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005bc8:	4a61      	ldr	r2, [pc, #388]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd8:	d115      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bda:	f7fb ff77 	bl	8001acc <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005be0:	e00b      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005be2:	f7fb ff73 	bl	8001acc <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d902      	bls.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	75fb      	strb	r3, [r7, #23]
            break;
 8005bf8:	e005      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bfa:	4b55      	ldr	r3, [pc, #340]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0ed      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d126      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c1a:	d10d      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005c1c:	4b4c      	ldr	r3, [pc, #304]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c2a:	0919      	lsrs	r1, r3, #4
 8005c2c:	4b4a      	ldr	r3, [pc, #296]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005c2e:	400b      	ands	r3, r1
 8005c30:	4947      	ldr	r1, [pc, #284]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	610b      	str	r3, [r1, #16]
 8005c36:	e005      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005c38:	4b45      	ldr	r3, [pc, #276]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	4a44      	ldr	r2, [pc, #272]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c42:	6113      	str	r3, [r2, #16]
 8005c44:	4b42      	ldr	r3, [pc, #264]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c52:	493f      	ldr	r1, [pc, #252]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	670b      	str	r3, [r1, #112]	; 0x70
 8005c58:	e004      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
 8005c5c:	75bb      	strb	r3, [r7, #22]
 8005c5e:	e001      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
 8005c62:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 8085 	beq.w	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c76:	2b28      	cmp	r3, #40	; 0x28
 8005c78:	d866      	bhi.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005d5d 	.word	0x08005d5d
 8005c84:	08005d49 	.word	0x08005d49
 8005c88:	08005d49 	.word	0x08005d49
 8005c8c:	08005d49 	.word	0x08005d49
 8005c90:	08005d49 	.word	0x08005d49
 8005c94:	08005d49 	.word	0x08005d49
 8005c98:	08005d49 	.word	0x08005d49
 8005c9c:	08005d49 	.word	0x08005d49
 8005ca0:	08005d25 	.word	0x08005d25
 8005ca4:	08005d49 	.word	0x08005d49
 8005ca8:	08005d49 	.word	0x08005d49
 8005cac:	08005d49 	.word	0x08005d49
 8005cb0:	08005d49 	.word	0x08005d49
 8005cb4:	08005d49 	.word	0x08005d49
 8005cb8:	08005d49 	.word	0x08005d49
 8005cbc:	08005d49 	.word	0x08005d49
 8005cc0:	08005d37 	.word	0x08005d37
 8005cc4:	08005d49 	.word	0x08005d49
 8005cc8:	08005d49 	.word	0x08005d49
 8005ccc:	08005d49 	.word	0x08005d49
 8005cd0:	08005d49 	.word	0x08005d49
 8005cd4:	08005d49 	.word	0x08005d49
 8005cd8:	08005d49 	.word	0x08005d49
 8005cdc:	08005d49 	.word	0x08005d49
 8005ce0:	08005d5d 	.word	0x08005d5d
 8005ce4:	08005d49 	.word	0x08005d49
 8005ce8:	08005d49 	.word	0x08005d49
 8005cec:	08005d49 	.word	0x08005d49
 8005cf0:	08005d49 	.word	0x08005d49
 8005cf4:	08005d49 	.word	0x08005d49
 8005cf8:	08005d49 	.word	0x08005d49
 8005cfc:	08005d49 	.word	0x08005d49
 8005d00:	08005d5d 	.word	0x08005d5d
 8005d04:	08005d49 	.word	0x08005d49
 8005d08:	08005d49 	.word	0x08005d49
 8005d0c:	08005d49 	.word	0x08005d49
 8005d10:	08005d49 	.word	0x08005d49
 8005d14:	08005d49 	.word	0x08005d49
 8005d18:	08005d49 	.word	0x08005d49
 8005d1c:	08005d49 	.word	0x08005d49
 8005d20:	08005d5d 	.word	0x08005d5d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3304      	adds	r3, #4
 8005d28:	2101      	movs	r1, #1
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fdfa 	bl	8006924 <RCCEx_PLL2_Config>
 8005d30:	4603      	mov	r3, r0
 8005d32:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005d34:	e013      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	3324      	adds	r3, #36	; 0x24
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fea3 	bl	8006a88 <RCCEx_PLL3_Config>
 8005d42:	4603      	mov	r3, r0
 8005d44:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005d46:	e00a      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d4c:	e007      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005d4e:	bf00      	nop
 8005d50:	58024400 	.word	0x58024400
 8005d54:	58024800 	.word	0x58024800
 8005d58:	00ffffcf 	.word	0x00ffffcf
      break;
 8005d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d109      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d64:	4b96      	ldr	r3, [pc, #600]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d68:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d70:	4993      	ldr	r1, [pc, #588]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	654b      	str	r3, [r1, #84]	; 0x54
 8005d76:	e001      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d78:	7dfb      	ldrb	r3, [r7, #23]
 8005d7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d038      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8c:	2b05      	cmp	r3, #5
 8005d8e:	d821      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005d90:	a201      	add	r2, pc, #4	; (adr r2, 8005d98 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d96:	bf00      	nop
 8005d98:	08005ddb 	.word	0x08005ddb
 8005d9c:	08005db1 	.word	0x08005db1
 8005da0:	08005dc3 	.word	0x08005dc3
 8005da4:	08005ddb 	.word	0x08005ddb
 8005da8:	08005ddb 	.word	0x08005ddb
 8005dac:	08005ddb 	.word	0x08005ddb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3304      	adds	r3, #4
 8005db4:	2101      	movs	r1, #1
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fdb4 	bl	8006924 <RCCEx_PLL2_Config>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005dc0:	e00c      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3324      	adds	r3, #36	; 0x24
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 fe5d 	bl	8006a88 <RCCEx_PLL3_Config>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005dd2:	e003      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8005dd8:	e000      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ddc:	7dfb      	ldrb	r3, [r7, #23]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d109      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005de2:	4b77      	ldr	r3, [pc, #476]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de6:	f023 0207 	bic.w	r2, r3, #7
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dee:	4974      	ldr	r1, [pc, #464]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	654b      	str	r3, [r1, #84]	; 0x54
 8005df4:	e001      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df6:	7dfb      	ldrb	r3, [r7, #23]
 8005df8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d03a      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0c:	2b05      	cmp	r3, #5
 8005e0e:	d821      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005e10:	a201      	add	r2, pc, #4	; (adr r2, 8005e18 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e16:	bf00      	nop
 8005e18:	08005e5b 	.word	0x08005e5b
 8005e1c:	08005e31 	.word	0x08005e31
 8005e20:	08005e43 	.word	0x08005e43
 8005e24:	08005e5b 	.word	0x08005e5b
 8005e28:	08005e5b 	.word	0x08005e5b
 8005e2c:	08005e5b 	.word	0x08005e5b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3304      	adds	r3, #4
 8005e34:	2101      	movs	r1, #1
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fd74 	bl	8006924 <RCCEx_PLL2_Config>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005e40:	e00c      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	3324      	adds	r3, #36	; 0x24
 8005e46:	2101      	movs	r1, #1
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fe1d 	bl	8006a88 <RCCEx_PLL3_Config>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005e52:	e003      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	75fb      	strb	r3, [r7, #23]
      break;
 8005e58:	e000      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10a      	bne.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e62:	4b57      	ldr	r3, [pc, #348]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e66:	f023 0207 	bic.w	r2, r3, #7
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e70:	4953      	ldr	r1, [pc, #332]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	658b      	str	r3, [r1, #88]	; 0x58
 8005e76:	e001      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e78:	7dfb      	ldrb	r3, [r7, #23]
 8005e7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d04b      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e92:	d02e      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e98:	d828      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9e:	d02a      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea4:	d822      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005ea6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005eaa:	d026      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005eac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005eb0:	d81c      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005eb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eb6:	d010      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ebc:	d816      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d01d      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ec6:	d111      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	2100      	movs	r1, #0
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 fd28 	bl	8006924 <RCCEx_PLL2_Config>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005ed8:	e012      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3324      	adds	r3, #36	; 0x24
 8005ede:	2102      	movs	r1, #2
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 fdd1 	bl	8006a88 <RCCEx_PLL3_Config>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005eea:	e009      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef0:	e006      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005ef2:	bf00      	nop
 8005ef4:	e004      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005ef6:	bf00      	nop
 8005ef8:	e002      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005efa:	bf00      	nop
 8005efc:	e000      	b.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10a      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f06:	4b2e      	ldr	r3, [pc, #184]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f14:	492a      	ldr	r1, [pc, #168]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	654b      	str	r3, [r1, #84]	; 0x54
 8005f1a:	e001      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
 8005f1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d04d      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f32:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f36:	d02e      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005f38:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f3c:	d828      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f42:	d02a      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f48:	d822      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005f4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f4e:	d026      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005f50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f54:	d81c      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f5a:	d010      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f60:	d816      	bhi.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d01d      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f6a:	d111      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3304      	adds	r3, #4
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fcd6 	bl	8006924 <RCCEx_PLL2_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005f7c:	e012      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	3324      	adds	r3, #36	; 0x24
 8005f82:	2102      	movs	r1, #2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 fd7f 	bl	8006a88 <RCCEx_PLL3_Config>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005f8e:	e009      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	75fb      	strb	r3, [r7, #23]
      break;
 8005f94:	e006      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005f96:	bf00      	nop
 8005f98:	e004      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005f9a:	bf00      	nop
 8005f9c:	e002      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005f9e:	bf00      	nop
 8005fa0:	e000      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10c      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005faa:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fb8:	4901      	ldr	r1, [pc, #4]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	658b      	str	r3, [r1, #88]	; 0x58
 8005fbe:	e003      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005fc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc4:	7dfb      	ldrb	r3, [r7, #23]
 8005fc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d04b      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fda:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005fde:	d02e      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005fe0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005fe4:	d828      	bhi.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fea:	d02a      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff0:	d822      	bhi.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005ff2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ff6:	d026      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005ff8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ffc:	d81c      	bhi.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005ffe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006002:	d010      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006008:	d816      	bhi.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800600a:	2b00      	cmp	r3, #0
 800600c:	d01d      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800600e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006012:	d111      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3304      	adds	r3, #4
 8006018:	2100      	movs	r1, #0
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fc82 	bl	8006924 <RCCEx_PLL2_Config>
 8006020:	4603      	mov	r3, r0
 8006022:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006024:	e012      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3324      	adds	r3, #36	; 0x24
 800602a:	2102      	movs	r1, #2
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fd2b 	bl	8006a88 <RCCEx_PLL3_Config>
 8006032:	4603      	mov	r3, r0
 8006034:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006036:	e009      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	75fb      	strb	r3, [r7, #23]
      break;
 800603c:	e006      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800603e:	bf00      	nop
 8006040:	e004      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006042:	bf00      	nop
 8006044:	e002      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006046:	bf00      	nop
 8006048:	e000      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800604a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800604c:	7dfb      	ldrb	r3, [r7, #23]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10a      	bne.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006052:	4b9d      	ldr	r3, [pc, #628]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006056:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006060:	4999      	ldr	r1, [pc, #612]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006062:	4313      	orrs	r3, r2
 8006064:	658b      	str	r3, [r1, #88]	; 0x58
 8006066:	e001      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006068:	7dfb      	ldrb	r3, [r7, #23]
 800606a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b00      	cmp	r3, #0
 8006076:	d01a      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800607e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006082:	d10a      	bne.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3324      	adds	r3, #36	; 0x24
 8006088:	2102      	movs	r1, #2
 800608a:	4618      	mov	r0, r3
 800608c:	f000 fcfc 	bl	8006a88 <RCCEx_PLL3_Config>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800609a:	4b8b      	ldr	r3, [pc, #556]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800609c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060a8:	4987      	ldr	r1, [pc, #540]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d01a      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c4:	d10a      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3324      	adds	r3, #36	; 0x24
 80060ca:	2102      	movs	r1, #2
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 fcdb 	bl	8006a88 <RCCEx_PLL3_Config>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060dc:	4b7a      	ldr	r3, [pc, #488]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ea:	4977      	ldr	r1, [pc, #476]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d034      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006106:	d01d      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800610c:	d817      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006116:	d009      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006118:	e011      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3304      	adds	r3, #4
 800611e:	2100      	movs	r1, #0
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fbff 	bl	8006924 <RCCEx_PLL2_Config>
 8006126:	4603      	mov	r3, r0
 8006128:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800612a:	e00c      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3324      	adds	r3, #36	; 0x24
 8006130:	2102      	movs	r1, #2
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fca8 	bl	8006a88 <RCCEx_PLL3_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800613c:	e003      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	75fb      	strb	r3, [r7, #23]
      break;
 8006142:	e000      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006146:	7dfb      	ldrb	r3, [r7, #23]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800614c:	4b5e      	ldr	r3, [pc, #376]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800614e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006150:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800615a:	495b      	ldr	r1, [pc, #364]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800615c:	4313      	orrs	r3, r2
 800615e:	658b      	str	r3, [r1, #88]	; 0x58
 8006160:	e001      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006162:	7dfb      	ldrb	r3, [r7, #23]
 8006164:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d033      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006178:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800617c:	d01c      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800617e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006182:	d816      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006188:	d003      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800618a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800618e:	d007      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006190:	e00f      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006192:	4b4d      	ldr	r3, [pc, #308]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	4a4c      	ldr	r2, [pc, #304]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800619c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800619e:	e00c      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3324      	adds	r3, #36	; 0x24
 80061a4:	2101      	movs	r1, #1
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fc6e 	bl	8006a88 <RCCEx_PLL3_Config>
 80061ac:	4603      	mov	r3, r0
 80061ae:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80061b0:	e003      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	75fb      	strb	r3, [r7, #23]
      break;
 80061b6:	e000      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80061b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061ba:	7dfb      	ldrb	r3, [r7, #23]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10a      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061c0:	4b41      	ldr	r3, [pc, #260]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ce:	493e      	ldr	r1, [pc, #248]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	654b      	str	r3, [r1, #84]	; 0x54
 80061d4:	e001      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
 80061d8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d029      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80061ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f2:	d007      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80061f4:	e00f      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061f6:	4b34      	ldr	r3, [pc, #208]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	4a33      	ldr	r2, [pc, #204]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80061fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006200:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006202:	e00b      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3304      	adds	r3, #4
 8006208:	2102      	movs	r1, #2
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fb8a 	bl	8006924 <RCCEx_PLL2_Config>
 8006210:	4603      	mov	r3, r0
 8006212:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006214:	e002      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	75fb      	strb	r3, [r7, #23]
      break;
 800621a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800621c:	7dfb      	ldrb	r3, [r7, #23]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d109      	bne.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006222:	4b29      	ldr	r3, [pc, #164]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006226:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800622e:	4926      	ldr	r1, [pc, #152]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006230:	4313      	orrs	r3, r2
 8006232:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006234:	e001      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006236:	7dfb      	ldrb	r3, [r7, #23]
 8006238:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3324      	adds	r3, #36	; 0x24
 800624a:	2102      	movs	r1, #2
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fc1b 	bl	8006a88 <RCCEx_PLL3_Config>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d033      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800626c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006270:	d017      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006276:	d811      	bhi.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800627c:	d013      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800627e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006282:	d80b      	bhi.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006284:	2b00      	cmp	r3, #0
 8006286:	d010      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800628c:	d106      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800628e:	4b0e      	ldr	r3, [pc, #56]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006292:	4a0d      	ldr	r2, [pc, #52]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006298:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800629a:	e007      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	75fb      	strb	r3, [r7, #23]
      break;
 80062a0:	e004      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80062a2:	bf00      	nop
 80062a4:	e002      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80062a6:	bf00      	nop
 80062a8:	e000      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80062aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ac:	7dfb      	ldrb	r3, [r7, #23]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10c      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062b2:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80062b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062be:	4902      	ldr	r1, [pc, #8]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	654b      	str	r3, [r1, #84]	; 0x54
 80062c4:	e004      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80062c6:	bf00      	nop
 80062c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062cc:	7dfb      	ldrb	r3, [r7, #23]
 80062ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d008      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062dc:	4b31      	ldr	r3, [pc, #196]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e8:	492e      	ldr	r1, [pc, #184]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80062fa:	4b2a      	ldr	r3, [pc, #168]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006308:	4926      	ldr	r1, [pc, #152]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800630a:	4313      	orrs	r3, r2
 800630c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d008      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800631a:	4b22      	ldr	r3, [pc, #136]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800631c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006326:	491f      	ldr	r1, [pc, #124]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006328:	4313      	orrs	r3, r2
 800632a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00d      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006338:	4b1a      	ldr	r3, [pc, #104]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	4a19      	ldr	r2, [pc, #100]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800633e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006342:	6113      	str	r3, [r2, #16]
 8006344:	4b17      	ldr	r3, [pc, #92]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800634e:	4915      	ldr	r1, [pc, #84]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006350:	4313      	orrs	r3, r2
 8006352:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	da08      	bge.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800635c:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800635e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006360:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006368:	490e      	ldr	r1, [pc, #56]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800636a:	4313      	orrs	r3, r2
 800636c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d009      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800637a:	4b0a      	ldr	r3, [pc, #40]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800637c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006388:	4906      	ldr	r1, [pc, #24]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800638a:	4313      	orrs	r3, r2
 800638c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800638e:	7dbb      	ldrb	r3, [r7, #22]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	e000      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
}
 800639a:	4618      	mov	r0, r3
 800639c:	3718      	adds	r7, #24
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	58024400 	.word	0x58024400

080063a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80063ac:	f7ff f818 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 80063b0:	4602      	mov	r2, r0
 80063b2:	4b06      	ldr	r3, [pc, #24]	; (80063cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	091b      	lsrs	r3, r3, #4
 80063b8:	f003 0307 	and.w	r3, r3, #7
 80063bc:	4904      	ldr	r1, [pc, #16]	; (80063d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80063be:	5ccb      	ldrb	r3, [r1, r3]
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	58024400 	.word	0x58024400
 80063d0:	08020124 	.word	0x08020124

080063d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b089      	sub	sp, #36	; 0x24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063dc:	4ba1      	ldr	r3, [pc, #644]	; (8006664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e0:	f003 0303 	and.w	r3, r3, #3
 80063e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80063e6:	4b9f      	ldr	r3, [pc, #636]	; (8006664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	0b1b      	lsrs	r3, r3, #12
 80063ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80063f2:	4b9c      	ldr	r3, [pc, #624]	; (8006664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f6:	091b      	lsrs	r3, r3, #4
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80063fe:	4b99      	ldr	r3, [pc, #612]	; (8006664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006402:	08db      	lsrs	r3, r3, #3
 8006404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	fb02 f303 	mul.w	r3, r2, r3
 800640e:	ee07 3a90 	vmov	s15, r3
 8006412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006416:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 8111 	beq.w	8006644 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	2b02      	cmp	r3, #2
 8006426:	f000 8083 	beq.w	8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	2b02      	cmp	r3, #2
 800642e:	f200 80a1 	bhi.w	8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d056      	beq.n	80064ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800643e:	e099      	b.n	8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006440:	4b88      	ldr	r3, [pc, #544]	; (8006664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0320 	and.w	r3, r3, #32
 8006448:	2b00      	cmp	r3, #0
 800644a:	d02d      	beq.n	80064a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800644c:	4b85      	ldr	r3, [pc, #532]	; (8006664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	08db      	lsrs	r3, r3, #3
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	4a84      	ldr	r2, [pc, #528]	; (8006668 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
 800645c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	ee07 3a90 	vmov	s15, r3
 8006464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006476:	4b7b      	ldr	r3, [pc, #492]	; (8006664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006486:	ed97 6a03 	vldr	s12, [r7, #12]
 800648a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800666c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800648e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800649a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800649e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80064a6:	e087      	b.n	80065b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	ee07 3a90 	vmov	s15, r3
 80064ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80064b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ba:	4b6a      	ldr	r3, [pc, #424]	; (8006664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800666c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064ea:	e065      	b.n	80065b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006674 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80064fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064fe:	4b59      	ldr	r3, [pc, #356]	; (8006664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006506:	ee07 3a90 	vmov	s15, r3
 800650a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800650e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006512:	eddf 5a56 	vldr	s11, [pc, #344]	; 800666c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800651a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800651e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800652a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800652e:	e043      	b.n	80065b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800653a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006678 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800653e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006542:	4b48      	ldr	r3, [pc, #288]	; (8006664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800654a:	ee07 3a90 	vmov	s15, r3
 800654e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006552:	ed97 6a03 	vldr	s12, [r7, #12]
 8006556:	eddf 5a45 	vldr	s11, [pc, #276]	; 800666c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800655a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800655e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800656a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800656e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006572:	e021      	b.n	80065b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	ee07 3a90 	vmov	s15, r3
 800657a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800657e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006674 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006586:	4b37      	ldr	r3, [pc, #220]	; (8006664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800658e:	ee07 3a90 	vmov	s15, r3
 8006592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006596:	ed97 6a03 	vldr	s12, [r7, #12]
 800659a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800666c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800659e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80065b8:	4b2a      	ldr	r3, [pc, #168]	; (8006664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	0a5b      	lsrs	r3, r3, #9
 80065be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80065d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065de:	ee17 2a90 	vmov	r2, s15
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80065e6:	4b1f      	ldr	r3, [pc, #124]	; (8006664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	0c1b      	lsrs	r3, r3, #16
 80065ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f0:	ee07 3a90 	vmov	s15, r3
 80065f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006600:	edd7 6a07 	vldr	s13, [r7, #28]
 8006604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800660c:	ee17 2a90 	vmov	r2, s15
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006614:	4b13      	ldr	r3, [pc, #76]	; (8006664 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006618:	0e1b      	lsrs	r3, r3, #24
 800661a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800662a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800662e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800663a:	ee17 2a90 	vmov	r2, s15
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006642:	e008      	b.n	8006656 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	609a      	str	r2, [r3, #8]
}
 8006656:	bf00      	nop
 8006658:	3724      	adds	r7, #36	; 0x24
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	58024400 	.word	0x58024400
 8006668:	03d09000 	.word	0x03d09000
 800666c:	46000000 	.word	0x46000000
 8006670:	4c742400 	.word	0x4c742400
 8006674:	4a742400 	.word	0x4a742400
 8006678:	4bbebc20 	.word	0x4bbebc20

0800667c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800667c:	b480      	push	{r7}
 800667e:	b089      	sub	sp, #36	; 0x24
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006684:	4ba1      	ldr	r3, [pc, #644]	; (800690c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006688:	f003 0303 	and.w	r3, r3, #3
 800668c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800668e:	4b9f      	ldr	r3, [pc, #636]	; (800690c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006692:	0d1b      	lsrs	r3, r3, #20
 8006694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006698:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800669a:	4b9c      	ldr	r3, [pc, #624]	; (800690c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800669c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669e:	0a1b      	lsrs	r3, r3, #8
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80066a6:	4b99      	ldr	r3, [pc, #612]	; (800690c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066aa:	08db      	lsrs	r3, r3, #3
 80066ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	fb02 f303 	mul.w	r3, r2, r3
 80066b6:	ee07 3a90 	vmov	s15, r3
 80066ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 8111 	beq.w	80068ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	f000 8083 	beq.w	80067d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	f200 80a1 	bhi.w	800681c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d056      	beq.n	8006794 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80066e6:	e099      	b.n	800681c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066e8:	4b88      	ldr	r3, [pc, #544]	; (800690c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d02d      	beq.n	8006750 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066f4:	4b85      	ldr	r3, [pc, #532]	; (800690c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	08db      	lsrs	r3, r3, #3
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	4a84      	ldr	r2, [pc, #528]	; (8006910 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006700:	fa22 f303 	lsr.w	r3, r2, r3
 8006704:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	ee07 3a90 	vmov	s15, r3
 800670c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800671a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671e:	4b7b      	ldr	r3, [pc, #492]	; (800690c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006732:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006914 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800673a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800674e:	e087      	b.n	8006860 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800675e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006762:	4b6a      	ldr	r3, [pc, #424]	; (800690c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006772:	ed97 6a03 	vldr	s12, [r7, #12]
 8006776:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006914 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800677a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006792:	e065      	b.n	8006860 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800691c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80067a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a6:	4b59      	ldr	r3, [pc, #356]	; (800690c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ae:	ee07 3a90 	vmov	s15, r3
 80067b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006914 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067d6:	e043      	b.n	8006860 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	ee07 3a90 	vmov	s15, r3
 80067de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006920 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80067e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ea:	4b48      	ldr	r3, [pc, #288]	; (800690c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f2:	ee07 3a90 	vmov	s15, r3
 80067f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80067fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006914 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800680e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006816:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800681a:	e021      	b.n	8006860 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006826:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800691c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800682a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800682e:	4b37      	ldr	r3, [pc, #220]	; (800690c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006836:	ee07 3a90 	vmov	s15, r3
 800683a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800683e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006842:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006914 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800684a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800684e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800685a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800685e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006860:	4b2a      	ldr	r3, [pc, #168]	; (800690c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006864:	0a5b      	lsrs	r3, r3, #9
 8006866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800686a:	ee07 3a90 	vmov	s15, r3
 800686e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800687a:	edd7 6a07 	vldr	s13, [r7, #28]
 800687e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006886:	ee17 2a90 	vmov	r2, s15
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800688e:	4b1f      	ldr	r3, [pc, #124]	; (800690c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	0c1b      	lsrs	r3, r3, #16
 8006894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006898:	ee07 3a90 	vmov	s15, r3
 800689c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80068ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068b4:	ee17 2a90 	vmov	r2, s15
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80068bc:	4b13      	ldr	r3, [pc, #76]	; (800690c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c0:	0e1b      	lsrs	r3, r3, #24
 80068c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c6:	ee07 3a90 	vmov	s15, r3
 80068ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80068da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068e2:	ee17 2a90 	vmov	r2, s15
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80068ea:	e008      	b.n	80068fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	609a      	str	r2, [r3, #8]
}
 80068fe:	bf00      	nop
 8006900:	3724      	adds	r7, #36	; 0x24
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	58024400 	.word	0x58024400
 8006910:	03d09000 	.word	0x03d09000
 8006914:	46000000 	.word	0x46000000
 8006918:	4c742400 	.word	0x4c742400
 800691c:	4a742400 	.word	0x4a742400
 8006920:	4bbebc20 	.word	0x4bbebc20

08006924 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006932:	4b53      	ldr	r3, [pc, #332]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	2b03      	cmp	r3, #3
 800693c:	d101      	bne.n	8006942 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e099      	b.n	8006a76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006942:	4b4f      	ldr	r3, [pc, #316]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a4e      	ldr	r2, [pc, #312]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 8006948:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800694c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800694e:	f7fb f8bd 	bl	8001acc <HAL_GetTick>
 8006952:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006954:	e008      	b.n	8006968 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006956:	f7fb f8b9 	bl	8001acc <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d901      	bls.n	8006968 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e086      	b.n	8006a76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006968:	4b45      	ldr	r3, [pc, #276]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1f0      	bne.n	8006956 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006974:	4b42      	ldr	r3, [pc, #264]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 8006976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006978:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	031b      	lsls	r3, r3, #12
 8006982:	493f      	ldr	r1, [pc, #252]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 8006984:	4313      	orrs	r3, r2
 8006986:	628b      	str	r3, [r1, #40]	; 0x28
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	3b01      	subs	r3, #1
 800698e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	3b01      	subs	r3, #1
 8006998:	025b      	lsls	r3, r3, #9
 800699a:	b29b      	uxth	r3, r3
 800699c:	431a      	orrs	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	041b      	lsls	r3, r3, #16
 80069a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	061b      	lsls	r3, r3, #24
 80069b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80069b8:	4931      	ldr	r1, [pc, #196]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80069be:	4b30      	ldr	r3, [pc, #192]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 80069c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	492d      	ldr	r1, [pc, #180]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80069d0:	4b2b      	ldr	r3, [pc, #172]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	f023 0220 	bic.w	r2, r3, #32
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	4928      	ldr	r1, [pc, #160]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80069e2:	4b27      	ldr	r3, [pc, #156]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	4a26      	ldr	r2, [pc, #152]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 80069e8:	f023 0310 	bic.w	r3, r3, #16
 80069ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80069ee:	4b24      	ldr	r3, [pc, #144]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 80069f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069f2:	4b24      	ldr	r3, [pc, #144]	; (8006a84 <RCCEx_PLL2_Config+0x160>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	69d2      	ldr	r2, [r2, #28]
 80069fa:	00d2      	lsls	r2, r2, #3
 80069fc:	4920      	ldr	r1, [pc, #128]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a02:	4b1f      	ldr	r3, [pc, #124]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 8006a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a06:	4a1e      	ldr	r2, [pc, #120]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 8006a08:	f043 0310 	orr.w	r3, r3, #16
 8006a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d106      	bne.n	8006a22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a14:	4b1a      	ldr	r3, [pc, #104]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	4a19      	ldr	r2, [pc, #100]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 8006a1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a20:	e00f      	b.n	8006a42 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d106      	bne.n	8006a36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a28:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	4a14      	ldr	r2, [pc, #80]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 8006a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a34:	e005      	b.n	8006a42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a36:	4b12      	ldr	r3, [pc, #72]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 8006a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3a:	4a11      	ldr	r2, [pc, #68]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 8006a3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a42:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a0e      	ldr	r2, [pc, #56]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 8006a48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a4e:	f7fb f83d 	bl	8001acc <HAL_GetTick>
 8006a52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a54:	e008      	b.n	8006a68 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006a56:	f7fb f839 	bl	8001acc <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e006      	b.n	8006a76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a68:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <RCCEx_PLL2_Config+0x15c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0f0      	beq.n	8006a56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	58024400 	.word	0x58024400
 8006a84:	ffff0007 	.word	0xffff0007

08006a88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a96:	4b53      	ldr	r3, [pc, #332]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d101      	bne.n	8006aa6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e099      	b.n	8006bda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006aa6:	4b4f      	ldr	r3, [pc, #316]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a4e      	ldr	r2, [pc, #312]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab2:	f7fb f80b 	bl	8001acc <HAL_GetTick>
 8006ab6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ab8:	e008      	b.n	8006acc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006aba:	f7fb f807 	bl	8001acc <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e086      	b.n	8006bda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006acc:	4b45      	ldr	r3, [pc, #276]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1f0      	bne.n	8006aba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ad8:	4b42      	ldr	r3, [pc, #264]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006adc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	051b      	lsls	r3, r3, #20
 8006ae6:	493f      	ldr	r1, [pc, #252]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	628b      	str	r3, [r1, #40]	; 0x28
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	025b      	lsls	r3, r3, #9
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	431a      	orrs	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	3b01      	subs	r3, #1
 8006b08:	041b      	lsls	r3, r3, #16
 8006b0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	061b      	lsls	r3, r3, #24
 8006b18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b1c:	4931      	ldr	r1, [pc, #196]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b22:	4b30      	ldr	r3, [pc, #192]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	492d      	ldr	r1, [pc, #180]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b34:	4b2b      	ldr	r3, [pc, #172]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	4928      	ldr	r1, [pc, #160]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b46:	4b27      	ldr	r3, [pc, #156]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4a:	4a26      	ldr	r2, [pc, #152]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b52:	4b24      	ldr	r3, [pc, #144]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b56:	4b24      	ldr	r3, [pc, #144]	; (8006be8 <RCCEx_PLL3_Config+0x160>)
 8006b58:	4013      	ands	r3, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	69d2      	ldr	r2, [r2, #28]
 8006b5e:	00d2      	lsls	r2, r2, #3
 8006b60:	4920      	ldr	r1, [pc, #128]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b66:	4b1f      	ldr	r3, [pc, #124]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6a:	4a1e      	ldr	r2, [pc, #120]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d106      	bne.n	8006b86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006b78:	4b1a      	ldr	r3, [pc, #104]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	4a19      	ldr	r2, [pc, #100]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006b7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b84:	e00f      	b.n	8006ba6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d106      	bne.n	8006b9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006b8c:	4b15      	ldr	r3, [pc, #84]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b90:	4a14      	ldr	r2, [pc, #80]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006b92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b98:	e005      	b.n	8006ba6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006b9a:	4b12      	ldr	r3, [pc, #72]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	4a11      	ldr	r2, [pc, #68]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006ba0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ba4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006ba6:	4b0f      	ldr	r3, [pc, #60]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a0e      	ldr	r2, [pc, #56]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bb2:	f7fa ff8b 	bl	8001acc <HAL_GetTick>
 8006bb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bb8:	e008      	b.n	8006bcc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006bba:	f7fa ff87 	bl	8001acc <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d901      	bls.n	8006bcc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e006      	b.n	8006bda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bcc:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <RCCEx_PLL3_Config+0x15c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d0f0      	beq.n	8006bba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	58024400 	.word	0x58024400
 8006be8:	ffff0007 	.word	0xffff0007

08006bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e049      	b.n	8006c92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fa fc6a 	bl	80014ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3304      	adds	r3, #4
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	f000 fc70 	bl	8007510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
	...

08006c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d001      	beq.n	8006cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e054      	b.n	8006d5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68da      	ldr	r2, [r3, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0201 	orr.w	r2, r2, #1
 8006cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a26      	ldr	r2, [pc, #152]	; (8006d6c <HAL_TIM_Base_Start_IT+0xd0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d022      	beq.n	8006d1c <HAL_TIM_Base_Start_IT+0x80>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cde:	d01d      	beq.n	8006d1c <HAL_TIM_Base_Start_IT+0x80>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a22      	ldr	r2, [pc, #136]	; (8006d70 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d018      	beq.n	8006d1c <HAL_TIM_Base_Start_IT+0x80>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a21      	ldr	r2, [pc, #132]	; (8006d74 <HAL_TIM_Base_Start_IT+0xd8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d013      	beq.n	8006d1c <HAL_TIM_Base_Start_IT+0x80>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a1f      	ldr	r2, [pc, #124]	; (8006d78 <HAL_TIM_Base_Start_IT+0xdc>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d00e      	beq.n	8006d1c <HAL_TIM_Base_Start_IT+0x80>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a1e      	ldr	r2, [pc, #120]	; (8006d7c <HAL_TIM_Base_Start_IT+0xe0>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d009      	beq.n	8006d1c <HAL_TIM_Base_Start_IT+0x80>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a1c      	ldr	r2, [pc, #112]	; (8006d80 <HAL_TIM_Base_Start_IT+0xe4>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d004      	beq.n	8006d1c <HAL_TIM_Base_Start_IT+0x80>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a1b      	ldr	r2, [pc, #108]	; (8006d84 <HAL_TIM_Base_Start_IT+0xe8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d115      	bne.n	8006d48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689a      	ldr	r2, [r3, #8]
 8006d22:	4b19      	ldr	r3, [pc, #100]	; (8006d88 <HAL_TIM_Base_Start_IT+0xec>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b06      	cmp	r3, #6
 8006d2c:	d015      	beq.n	8006d5a <HAL_TIM_Base_Start_IT+0xbe>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d34:	d011      	beq.n	8006d5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0201 	orr.w	r2, r2, #1
 8006d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d46:	e008      	b.n	8006d5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0201 	orr.w	r2, r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
 8006d58:	e000      	b.n	8006d5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	40010000 	.word	0x40010000
 8006d70:	40000400 	.word	0x40000400
 8006d74:	40000800 	.word	0x40000800
 8006d78:	40000c00 	.word	0x40000c00
 8006d7c:	40010400 	.word	0x40010400
 8006d80:	40001800 	.word	0x40001800
 8006d84:	40014000 	.word	0x40014000
 8006d88:	00010007 	.word	0x00010007

08006d8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e049      	b.n	8006e32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d106      	bne.n	8006db8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7fa fb78 	bl	80014a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	4619      	mov	r1, r3
 8006dca:	4610      	mov	r0, r2
 8006dcc:	f000 fba0 	bl	8007510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d109      	bne.n	8006e60 <HAL_TIM_PWM_Start+0x24>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	bf14      	ite	ne
 8006e58:	2301      	movne	r3, #1
 8006e5a:	2300      	moveq	r3, #0
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	e03c      	b.n	8006eda <HAL_TIM_PWM_Start+0x9e>
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d109      	bne.n	8006e7a <HAL_TIM_PWM_Start+0x3e>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	bf14      	ite	ne
 8006e72:	2301      	movne	r3, #1
 8006e74:	2300      	moveq	r3, #0
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	e02f      	b.n	8006eda <HAL_TIM_PWM_Start+0x9e>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d109      	bne.n	8006e94 <HAL_TIM_PWM_Start+0x58>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	bf14      	ite	ne
 8006e8c:	2301      	movne	r3, #1
 8006e8e:	2300      	moveq	r3, #0
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	e022      	b.n	8006eda <HAL_TIM_PWM_Start+0x9e>
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2b0c      	cmp	r3, #12
 8006e98:	d109      	bne.n	8006eae <HAL_TIM_PWM_Start+0x72>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	bf14      	ite	ne
 8006ea6:	2301      	movne	r3, #1
 8006ea8:	2300      	moveq	r3, #0
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	e015      	b.n	8006eda <HAL_TIM_PWM_Start+0x9e>
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b10      	cmp	r3, #16
 8006eb2:	d109      	bne.n	8006ec8 <HAL_TIM_PWM_Start+0x8c>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	bf14      	ite	ne
 8006ec0:	2301      	movne	r3, #1
 8006ec2:	2300      	moveq	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	e008      	b.n	8006eda <HAL_TIM_PWM_Start+0x9e>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	bf14      	ite	ne
 8006ed4:	2301      	movne	r3, #1
 8006ed6:	2300      	moveq	r3, #0
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e0a1      	b.n	8007026 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d104      	bne.n	8006ef2 <HAL_TIM_PWM_Start+0xb6>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ef0:	e023      	b.n	8006f3a <HAL_TIM_PWM_Start+0xfe>
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d104      	bne.n	8006f02 <HAL_TIM_PWM_Start+0xc6>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f00:	e01b      	b.n	8006f3a <HAL_TIM_PWM_Start+0xfe>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d104      	bne.n	8006f12 <HAL_TIM_PWM_Start+0xd6>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f10:	e013      	b.n	8006f3a <HAL_TIM_PWM_Start+0xfe>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b0c      	cmp	r3, #12
 8006f16:	d104      	bne.n	8006f22 <HAL_TIM_PWM_Start+0xe6>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f20:	e00b      	b.n	8006f3a <HAL_TIM_PWM_Start+0xfe>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b10      	cmp	r3, #16
 8006f26:	d104      	bne.n	8006f32 <HAL_TIM_PWM_Start+0xf6>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f30:	e003      	b.n	8006f3a <HAL_TIM_PWM_Start+0xfe>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2202      	movs	r2, #2
 8006f36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 fe54 	bl	8007bf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a38      	ldr	r2, [pc, #224]	; (8007030 <HAL_TIM_PWM_Start+0x1f4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d013      	beq.n	8006f7a <HAL_TIM_PWM_Start+0x13e>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a37      	ldr	r2, [pc, #220]	; (8007034 <HAL_TIM_PWM_Start+0x1f8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00e      	beq.n	8006f7a <HAL_TIM_PWM_Start+0x13e>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a35      	ldr	r2, [pc, #212]	; (8007038 <HAL_TIM_PWM_Start+0x1fc>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d009      	beq.n	8006f7a <HAL_TIM_PWM_Start+0x13e>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a34      	ldr	r2, [pc, #208]	; (800703c <HAL_TIM_PWM_Start+0x200>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d004      	beq.n	8006f7a <HAL_TIM_PWM_Start+0x13e>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a32      	ldr	r2, [pc, #200]	; (8007040 <HAL_TIM_PWM_Start+0x204>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d101      	bne.n	8006f7e <HAL_TIM_PWM_Start+0x142>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e000      	b.n	8006f80 <HAL_TIM_PWM_Start+0x144>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d007      	beq.n	8006f94 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a25      	ldr	r2, [pc, #148]	; (8007030 <HAL_TIM_PWM_Start+0x1f4>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d022      	beq.n	8006fe4 <HAL_TIM_PWM_Start+0x1a8>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa6:	d01d      	beq.n	8006fe4 <HAL_TIM_PWM_Start+0x1a8>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a25      	ldr	r2, [pc, #148]	; (8007044 <HAL_TIM_PWM_Start+0x208>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d018      	beq.n	8006fe4 <HAL_TIM_PWM_Start+0x1a8>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a24      	ldr	r2, [pc, #144]	; (8007048 <HAL_TIM_PWM_Start+0x20c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d013      	beq.n	8006fe4 <HAL_TIM_PWM_Start+0x1a8>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a22      	ldr	r2, [pc, #136]	; (800704c <HAL_TIM_PWM_Start+0x210>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d00e      	beq.n	8006fe4 <HAL_TIM_PWM_Start+0x1a8>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a1a      	ldr	r2, [pc, #104]	; (8007034 <HAL_TIM_PWM_Start+0x1f8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d009      	beq.n	8006fe4 <HAL_TIM_PWM_Start+0x1a8>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a1e      	ldr	r2, [pc, #120]	; (8007050 <HAL_TIM_PWM_Start+0x214>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d004      	beq.n	8006fe4 <HAL_TIM_PWM_Start+0x1a8>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a16      	ldr	r2, [pc, #88]	; (8007038 <HAL_TIM_PWM_Start+0x1fc>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d115      	bne.n	8007010 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689a      	ldr	r2, [r3, #8]
 8006fea:	4b1a      	ldr	r3, [pc, #104]	; (8007054 <HAL_TIM_PWM_Start+0x218>)
 8006fec:	4013      	ands	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b06      	cmp	r3, #6
 8006ff4:	d015      	beq.n	8007022 <HAL_TIM_PWM_Start+0x1e6>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ffc:	d011      	beq.n	8007022 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f042 0201 	orr.w	r2, r2, #1
 800700c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700e:	e008      	b.n	8007022 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f042 0201 	orr.w	r2, r2, #1
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	e000      	b.n	8007024 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007022:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	40010000 	.word	0x40010000
 8007034:	40010400 	.word	0x40010400
 8007038:	40014000 	.word	0x40014000
 800703c:	40014400 	.word	0x40014400
 8007040:	40014800 	.word	0x40014800
 8007044:	40000400 	.word	0x40000400
 8007048:	40000800 	.word	0x40000800
 800704c:	40000c00 	.word	0x40000c00
 8007050:	40001800 	.word	0x40001800
 8007054:	00010007 	.word	0x00010007

08007058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b02      	cmp	r3, #2
 800706c:	d122      	bne.n	80070b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b02      	cmp	r3, #2
 800707a:	d11b      	bne.n	80070b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f06f 0202 	mvn.w	r2, #2
 8007084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	f003 0303 	and.w	r3, r3, #3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fa1a 	bl	80074d4 <HAL_TIM_IC_CaptureCallback>
 80070a0:	e005      	b.n	80070ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fa0c 	bl	80074c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fa1d 	bl	80074e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	f003 0304 	and.w	r3, r3, #4
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d122      	bne.n	8007108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	d11b      	bne.n	8007108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f06f 0204 	mvn.w	r2, #4
 80070d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2202      	movs	r2, #2
 80070de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f9f0 	bl	80074d4 <HAL_TIM_IC_CaptureCallback>
 80070f4:	e005      	b.n	8007102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f9e2 	bl	80074c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f9f3 	bl	80074e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	f003 0308 	and.w	r3, r3, #8
 8007112:	2b08      	cmp	r3, #8
 8007114:	d122      	bne.n	800715c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f003 0308 	and.w	r3, r3, #8
 8007120:	2b08      	cmp	r3, #8
 8007122:	d11b      	bne.n	800715c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f06f 0208 	mvn.w	r2, #8
 800712c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2204      	movs	r2, #4
 8007132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	f003 0303 	and.w	r3, r3, #3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d003      	beq.n	800714a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f9c6 	bl	80074d4 <HAL_TIM_IC_CaptureCallback>
 8007148:	e005      	b.n	8007156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f9b8 	bl	80074c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f9c9 	bl	80074e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	f003 0310 	and.w	r3, r3, #16
 8007166:	2b10      	cmp	r3, #16
 8007168:	d122      	bne.n	80071b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f003 0310 	and.w	r3, r3, #16
 8007174:	2b10      	cmp	r3, #16
 8007176:	d11b      	bne.n	80071b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f06f 0210 	mvn.w	r2, #16
 8007180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2208      	movs	r2, #8
 8007186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f99c 	bl	80074d4 <HAL_TIM_IC_CaptureCallback>
 800719c:	e005      	b.n	80071aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f98e 	bl	80074c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f99f 	bl	80074e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d10e      	bne.n	80071dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d107      	bne.n	80071dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f06f 0201 	mvn.w	r2, #1
 80071d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7f9 fed6 	bl	8000f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e6:	2b80      	cmp	r3, #128	; 0x80
 80071e8:	d10e      	bne.n	8007208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f4:	2b80      	cmp	r3, #128	; 0x80
 80071f6:	d107      	bne.n	8007208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fd23 	bl	8007c4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007216:	d10e      	bne.n	8007236 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007222:	2b80      	cmp	r3, #128	; 0x80
 8007224:	d107      	bne.n	8007236 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800722e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fd16 	bl	8007c62 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007240:	2b40      	cmp	r3, #64	; 0x40
 8007242:	d10e      	bne.n	8007262 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724e:	2b40      	cmp	r3, #64	; 0x40
 8007250:	d107      	bne.n	8007262 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800725a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f94d 	bl	80074fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f003 0320 	and.w	r3, r3, #32
 800726c:	2b20      	cmp	r3, #32
 800726e:	d10e      	bne.n	800728e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f003 0320 	and.w	r3, r3, #32
 800727a:	2b20      	cmp	r3, #32
 800727c:	d107      	bne.n	800728e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f06f 0220 	mvn.w	r2, #32
 8007286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fcd6 	bl	8007c3a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800728e:	bf00      	nop
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
	...

08007298 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d101      	bne.n	80072b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e0ff      	b.n	80074b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b14      	cmp	r3, #20
 80072c2:	f200 80f0 	bhi.w	80074a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80072c6:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072cc:	08007321 	.word	0x08007321
 80072d0:	080074a7 	.word	0x080074a7
 80072d4:	080074a7 	.word	0x080074a7
 80072d8:	080074a7 	.word	0x080074a7
 80072dc:	08007361 	.word	0x08007361
 80072e0:	080074a7 	.word	0x080074a7
 80072e4:	080074a7 	.word	0x080074a7
 80072e8:	080074a7 	.word	0x080074a7
 80072ec:	080073a3 	.word	0x080073a3
 80072f0:	080074a7 	.word	0x080074a7
 80072f4:	080074a7 	.word	0x080074a7
 80072f8:	080074a7 	.word	0x080074a7
 80072fc:	080073e3 	.word	0x080073e3
 8007300:	080074a7 	.word	0x080074a7
 8007304:	080074a7 	.word	0x080074a7
 8007308:	080074a7 	.word	0x080074a7
 800730c:	08007425 	.word	0x08007425
 8007310:	080074a7 	.word	0x080074a7
 8007314:	080074a7 	.word	0x080074a7
 8007318:	080074a7 	.word	0x080074a7
 800731c:	08007465 	.word	0x08007465
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68b9      	ldr	r1, [r7, #8]
 8007326:	4618      	mov	r0, r3
 8007328:	f000 f98c 	bl	8007644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699a      	ldr	r2, [r3, #24]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f042 0208 	orr.w	r2, r2, #8
 800733a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	699a      	ldr	r2, [r3, #24]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 0204 	bic.w	r2, r2, #4
 800734a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6999      	ldr	r1, [r3, #24]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	691a      	ldr	r2, [r3, #16]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	619a      	str	r2, [r3, #24]
      break;
 800735e:	e0a5      	b.n	80074ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68b9      	ldr	r1, [r7, #8]
 8007366:	4618      	mov	r0, r3
 8007368:	f000 f9fc 	bl	8007764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800737a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699a      	ldr	r2, [r3, #24]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800738a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6999      	ldr	r1, [r3, #24]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	021a      	lsls	r2, r3, #8
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	619a      	str	r2, [r3, #24]
      break;
 80073a0:	e084      	b.n	80074ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68b9      	ldr	r1, [r7, #8]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 fa65 	bl	8007878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	69da      	ldr	r2, [r3, #28]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f042 0208 	orr.w	r2, r2, #8
 80073bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69da      	ldr	r2, [r3, #28]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 0204 	bic.w	r2, r2, #4
 80073cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69d9      	ldr	r1, [r3, #28]
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	691a      	ldr	r2, [r3, #16]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	61da      	str	r2, [r3, #28]
      break;
 80073e0:	e064      	b.n	80074ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68b9      	ldr	r1, [r7, #8]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 facd 	bl	8007988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	69da      	ldr	r2, [r3, #28]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69da      	ldr	r2, [r3, #28]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800740c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	69d9      	ldr	r1, [r3, #28]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	021a      	lsls	r2, r3, #8
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	61da      	str	r2, [r3, #28]
      break;
 8007422:	e043      	b.n	80074ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68b9      	ldr	r1, [r7, #8]
 800742a:	4618      	mov	r0, r3
 800742c:	f000 fb16 	bl	8007a5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f042 0208 	orr.w	r2, r2, #8
 800743e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0204 	bic.w	r2, r2, #4
 800744e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	691a      	ldr	r2, [r3, #16]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	430a      	orrs	r2, r1
 8007460:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007462:	e023      	b.n	80074ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68b9      	ldr	r1, [r7, #8]
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fb5a 	bl	8007b24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800747e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800748e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	021a      	lsls	r2, r3, #8
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074a4:	e002      	b.n	80074ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	75fb      	strb	r3, [r7, #23]
      break;
 80074aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop

080074c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a40      	ldr	r2, [pc, #256]	; (8007624 <TIM_Base_SetConfig+0x114>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d013      	beq.n	8007550 <TIM_Base_SetConfig+0x40>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800752e:	d00f      	beq.n	8007550 <TIM_Base_SetConfig+0x40>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a3d      	ldr	r2, [pc, #244]	; (8007628 <TIM_Base_SetConfig+0x118>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00b      	beq.n	8007550 <TIM_Base_SetConfig+0x40>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a3c      	ldr	r2, [pc, #240]	; (800762c <TIM_Base_SetConfig+0x11c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d007      	beq.n	8007550 <TIM_Base_SetConfig+0x40>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a3b      	ldr	r2, [pc, #236]	; (8007630 <TIM_Base_SetConfig+0x120>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d003      	beq.n	8007550 <TIM_Base_SetConfig+0x40>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a3a      	ldr	r2, [pc, #232]	; (8007634 <TIM_Base_SetConfig+0x124>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d108      	bne.n	8007562 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	4313      	orrs	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a2f      	ldr	r2, [pc, #188]	; (8007624 <TIM_Base_SetConfig+0x114>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d01f      	beq.n	80075aa <TIM_Base_SetConfig+0x9a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007570:	d01b      	beq.n	80075aa <TIM_Base_SetConfig+0x9a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a2c      	ldr	r2, [pc, #176]	; (8007628 <TIM_Base_SetConfig+0x118>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d017      	beq.n	80075aa <TIM_Base_SetConfig+0x9a>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a2b      	ldr	r2, [pc, #172]	; (800762c <TIM_Base_SetConfig+0x11c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d013      	beq.n	80075aa <TIM_Base_SetConfig+0x9a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a2a      	ldr	r2, [pc, #168]	; (8007630 <TIM_Base_SetConfig+0x120>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d00f      	beq.n	80075aa <TIM_Base_SetConfig+0x9a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a29      	ldr	r2, [pc, #164]	; (8007634 <TIM_Base_SetConfig+0x124>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d00b      	beq.n	80075aa <TIM_Base_SetConfig+0x9a>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a28      	ldr	r2, [pc, #160]	; (8007638 <TIM_Base_SetConfig+0x128>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d007      	beq.n	80075aa <TIM_Base_SetConfig+0x9a>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a27      	ldr	r2, [pc, #156]	; (800763c <TIM_Base_SetConfig+0x12c>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d003      	beq.n	80075aa <TIM_Base_SetConfig+0x9a>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a26      	ldr	r2, [pc, #152]	; (8007640 <TIM_Base_SetConfig+0x130>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d108      	bne.n	80075bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a10      	ldr	r2, [pc, #64]	; (8007624 <TIM_Base_SetConfig+0x114>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d00f      	beq.n	8007608 <TIM_Base_SetConfig+0xf8>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a12      	ldr	r2, [pc, #72]	; (8007634 <TIM_Base_SetConfig+0x124>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d00b      	beq.n	8007608 <TIM_Base_SetConfig+0xf8>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a11      	ldr	r2, [pc, #68]	; (8007638 <TIM_Base_SetConfig+0x128>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d007      	beq.n	8007608 <TIM_Base_SetConfig+0xf8>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a10      	ldr	r2, [pc, #64]	; (800763c <TIM_Base_SetConfig+0x12c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d003      	beq.n	8007608 <TIM_Base_SetConfig+0xf8>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a0f      	ldr	r2, [pc, #60]	; (8007640 <TIM_Base_SetConfig+0x130>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d103      	bne.n	8007610 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	691a      	ldr	r2, [r3, #16]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	615a      	str	r2, [r3, #20]
}
 8007616:	bf00      	nop
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	40010000 	.word	0x40010000
 8007628:	40000400 	.word	0x40000400
 800762c:	40000800 	.word	0x40000800
 8007630:	40000c00 	.word	0x40000c00
 8007634:	40010400 	.word	0x40010400
 8007638:	40014000 	.word	0x40014000
 800763c:	40014400 	.word	0x40014400
 8007640:	40014800 	.word	0x40014800

08007644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	f023 0201 	bic.w	r2, r3, #1
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	4b37      	ldr	r3, [pc, #220]	; (800774c <TIM_OC1_SetConfig+0x108>)
 8007670:	4013      	ands	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f023 0303 	bic.w	r3, r3, #3
 800767a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	4313      	orrs	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f023 0302 	bic.w	r3, r3, #2
 800768c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	4313      	orrs	r3, r2
 8007696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a2d      	ldr	r2, [pc, #180]	; (8007750 <TIM_OC1_SetConfig+0x10c>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00f      	beq.n	80076c0 <TIM_OC1_SetConfig+0x7c>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a2c      	ldr	r2, [pc, #176]	; (8007754 <TIM_OC1_SetConfig+0x110>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d00b      	beq.n	80076c0 <TIM_OC1_SetConfig+0x7c>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a2b      	ldr	r2, [pc, #172]	; (8007758 <TIM_OC1_SetConfig+0x114>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d007      	beq.n	80076c0 <TIM_OC1_SetConfig+0x7c>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a2a      	ldr	r2, [pc, #168]	; (800775c <TIM_OC1_SetConfig+0x118>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d003      	beq.n	80076c0 <TIM_OC1_SetConfig+0x7c>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a29      	ldr	r2, [pc, #164]	; (8007760 <TIM_OC1_SetConfig+0x11c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d10c      	bne.n	80076da <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f023 0308 	bic.w	r3, r3, #8
 80076c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f023 0304 	bic.w	r3, r3, #4
 80076d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a1c      	ldr	r2, [pc, #112]	; (8007750 <TIM_OC1_SetConfig+0x10c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00f      	beq.n	8007702 <TIM_OC1_SetConfig+0xbe>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a1b      	ldr	r2, [pc, #108]	; (8007754 <TIM_OC1_SetConfig+0x110>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d00b      	beq.n	8007702 <TIM_OC1_SetConfig+0xbe>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a1a      	ldr	r2, [pc, #104]	; (8007758 <TIM_OC1_SetConfig+0x114>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d007      	beq.n	8007702 <TIM_OC1_SetConfig+0xbe>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a19      	ldr	r2, [pc, #100]	; (800775c <TIM_OC1_SetConfig+0x118>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d003      	beq.n	8007702 <TIM_OC1_SetConfig+0xbe>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a18      	ldr	r2, [pc, #96]	; (8007760 <TIM_OC1_SetConfig+0x11c>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d111      	bne.n	8007726 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	4313      	orrs	r3, r2
 800771a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	4313      	orrs	r3, r2
 8007724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	621a      	str	r2, [r3, #32]
}
 8007740:	bf00      	nop
 8007742:	371c      	adds	r7, #28
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	fffeff8f 	.word	0xfffeff8f
 8007750:	40010000 	.word	0x40010000
 8007754:	40010400 	.word	0x40010400
 8007758:	40014000 	.word	0x40014000
 800775c:	40014400 	.word	0x40014400
 8007760:	40014800 	.word	0x40014800

08007764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	f023 0210 	bic.w	r2, r3, #16
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	4b34      	ldr	r3, [pc, #208]	; (8007860 <TIM_OC2_SetConfig+0xfc>)
 8007790:	4013      	ands	r3, r2
 8007792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800779a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	021b      	lsls	r3, r3, #8
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f023 0320 	bic.w	r3, r3, #32
 80077ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	011b      	lsls	r3, r3, #4
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a29      	ldr	r2, [pc, #164]	; (8007864 <TIM_OC2_SetConfig+0x100>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d003      	beq.n	80077cc <TIM_OC2_SetConfig+0x68>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a28      	ldr	r2, [pc, #160]	; (8007868 <TIM_OC2_SetConfig+0x104>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d10d      	bne.n	80077e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	011b      	lsls	r3, r3, #4
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a1e      	ldr	r2, [pc, #120]	; (8007864 <TIM_OC2_SetConfig+0x100>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d00f      	beq.n	8007810 <TIM_OC2_SetConfig+0xac>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a1d      	ldr	r2, [pc, #116]	; (8007868 <TIM_OC2_SetConfig+0x104>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d00b      	beq.n	8007810 <TIM_OC2_SetConfig+0xac>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a1c      	ldr	r2, [pc, #112]	; (800786c <TIM_OC2_SetConfig+0x108>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d007      	beq.n	8007810 <TIM_OC2_SetConfig+0xac>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a1b      	ldr	r2, [pc, #108]	; (8007870 <TIM_OC2_SetConfig+0x10c>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d003      	beq.n	8007810 <TIM_OC2_SetConfig+0xac>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a1a      	ldr	r2, [pc, #104]	; (8007874 <TIM_OC2_SetConfig+0x110>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d113      	bne.n	8007838 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007816:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800781e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	695b      	ldr	r3, [r3, #20]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	4313      	orrs	r3, r2
 800782a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4313      	orrs	r3, r2
 8007836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	621a      	str	r2, [r3, #32]
}
 8007852:	bf00      	nop
 8007854:	371c      	adds	r7, #28
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	feff8fff 	.word	0xfeff8fff
 8007864:	40010000 	.word	0x40010000
 8007868:	40010400 	.word	0x40010400
 800786c:	40014000 	.word	0x40014000
 8007870:	40014400 	.word	0x40014400
 8007874:	40014800 	.word	0x40014800

08007878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4b33      	ldr	r3, [pc, #204]	; (8007970 <TIM_OC3_SetConfig+0xf8>)
 80078a4:	4013      	ands	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 0303 	bic.w	r3, r3, #3
 80078ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	021b      	lsls	r3, r3, #8
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a28      	ldr	r2, [pc, #160]	; (8007974 <TIM_OC3_SetConfig+0xfc>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d003      	beq.n	80078de <TIM_OC3_SetConfig+0x66>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a27      	ldr	r2, [pc, #156]	; (8007978 <TIM_OC3_SetConfig+0x100>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d10d      	bne.n	80078fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	021b      	lsls	r3, r3, #8
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a1d      	ldr	r2, [pc, #116]	; (8007974 <TIM_OC3_SetConfig+0xfc>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d00f      	beq.n	8007922 <TIM_OC3_SetConfig+0xaa>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a1c      	ldr	r2, [pc, #112]	; (8007978 <TIM_OC3_SetConfig+0x100>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00b      	beq.n	8007922 <TIM_OC3_SetConfig+0xaa>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a1b      	ldr	r2, [pc, #108]	; (800797c <TIM_OC3_SetConfig+0x104>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d007      	beq.n	8007922 <TIM_OC3_SetConfig+0xaa>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a1a      	ldr	r2, [pc, #104]	; (8007980 <TIM_OC3_SetConfig+0x108>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d003      	beq.n	8007922 <TIM_OC3_SetConfig+0xaa>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a19      	ldr	r2, [pc, #100]	; (8007984 <TIM_OC3_SetConfig+0x10c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d113      	bne.n	800794a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	4313      	orrs	r3, r2
 800793c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	011b      	lsls	r3, r3, #4
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	4313      	orrs	r3, r2
 8007948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	621a      	str	r2, [r3, #32]
}
 8007964:	bf00      	nop
 8007966:	371c      	adds	r7, #28
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	fffeff8f 	.word	0xfffeff8f
 8007974:	40010000 	.word	0x40010000
 8007978:	40010400 	.word	0x40010400
 800797c:	40014000 	.word	0x40014000
 8007980:	40014400 	.word	0x40014400
 8007984:	40014800 	.word	0x40014800

08007988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4b24      	ldr	r3, [pc, #144]	; (8007a44 <TIM_OC4_SetConfig+0xbc>)
 80079b4:	4013      	ands	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	021b      	lsls	r3, r3, #8
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	031b      	lsls	r3, r3, #12
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	4313      	orrs	r3, r2
 80079de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a19      	ldr	r2, [pc, #100]	; (8007a48 <TIM_OC4_SetConfig+0xc0>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d00f      	beq.n	8007a08 <TIM_OC4_SetConfig+0x80>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a18      	ldr	r2, [pc, #96]	; (8007a4c <TIM_OC4_SetConfig+0xc4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d00b      	beq.n	8007a08 <TIM_OC4_SetConfig+0x80>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a17      	ldr	r2, [pc, #92]	; (8007a50 <TIM_OC4_SetConfig+0xc8>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d007      	beq.n	8007a08 <TIM_OC4_SetConfig+0x80>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a16      	ldr	r2, [pc, #88]	; (8007a54 <TIM_OC4_SetConfig+0xcc>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d003      	beq.n	8007a08 <TIM_OC4_SetConfig+0x80>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a15      	ldr	r2, [pc, #84]	; (8007a58 <TIM_OC4_SetConfig+0xd0>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d109      	bne.n	8007a1c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	019b      	lsls	r3, r3, #6
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	621a      	str	r2, [r3, #32]
}
 8007a36:	bf00      	nop
 8007a38:	371c      	adds	r7, #28
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	feff8fff 	.word	0xfeff8fff
 8007a48:	40010000 	.word	0x40010000
 8007a4c:	40010400 	.word	0x40010400
 8007a50:	40014000 	.word	0x40014000
 8007a54:	40014400 	.word	0x40014400
 8007a58:	40014800 	.word	0x40014800

08007a5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	4b21      	ldr	r3, [pc, #132]	; (8007b0c <TIM_OC5_SetConfig+0xb0>)
 8007a88:	4013      	ands	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007a9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	041b      	lsls	r3, r3, #16
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a18      	ldr	r2, [pc, #96]	; (8007b10 <TIM_OC5_SetConfig+0xb4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00f      	beq.n	8007ad2 <TIM_OC5_SetConfig+0x76>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a17      	ldr	r2, [pc, #92]	; (8007b14 <TIM_OC5_SetConfig+0xb8>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d00b      	beq.n	8007ad2 <TIM_OC5_SetConfig+0x76>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a16      	ldr	r2, [pc, #88]	; (8007b18 <TIM_OC5_SetConfig+0xbc>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d007      	beq.n	8007ad2 <TIM_OC5_SetConfig+0x76>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a15      	ldr	r2, [pc, #84]	; (8007b1c <TIM_OC5_SetConfig+0xc0>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d003      	beq.n	8007ad2 <TIM_OC5_SetConfig+0x76>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a14      	ldr	r2, [pc, #80]	; (8007b20 <TIM_OC5_SetConfig+0xc4>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d109      	bne.n	8007ae6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	021b      	lsls	r3, r3, #8
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	621a      	str	r2, [r3, #32]
}
 8007b00:	bf00      	nop
 8007b02:	371c      	adds	r7, #28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	fffeff8f 	.word	0xfffeff8f
 8007b10:	40010000 	.word	0x40010000
 8007b14:	40010400 	.word	0x40010400
 8007b18:	40014000 	.word	0x40014000
 8007b1c:	40014400 	.word	0x40014400
 8007b20:	40014800 	.word	0x40014800

08007b24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	4b22      	ldr	r3, [pc, #136]	; (8007bd8 <TIM_OC6_SetConfig+0xb4>)
 8007b50:	4013      	ands	r3, r2
 8007b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	021b      	lsls	r3, r3, #8
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	051b      	lsls	r3, r3, #20
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a19      	ldr	r2, [pc, #100]	; (8007bdc <TIM_OC6_SetConfig+0xb8>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d00f      	beq.n	8007b9c <TIM_OC6_SetConfig+0x78>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a18      	ldr	r2, [pc, #96]	; (8007be0 <TIM_OC6_SetConfig+0xbc>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00b      	beq.n	8007b9c <TIM_OC6_SetConfig+0x78>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a17      	ldr	r2, [pc, #92]	; (8007be4 <TIM_OC6_SetConfig+0xc0>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d007      	beq.n	8007b9c <TIM_OC6_SetConfig+0x78>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a16      	ldr	r2, [pc, #88]	; (8007be8 <TIM_OC6_SetConfig+0xc4>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d003      	beq.n	8007b9c <TIM_OC6_SetConfig+0x78>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a15      	ldr	r2, [pc, #84]	; (8007bec <TIM_OC6_SetConfig+0xc8>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d109      	bne.n	8007bb0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	695b      	ldr	r3, [r3, #20]
 8007ba8:	029b      	lsls	r3, r3, #10
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	621a      	str	r2, [r3, #32]
}
 8007bca:	bf00      	nop
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	feff8fff 	.word	0xfeff8fff
 8007bdc:	40010000 	.word	0x40010000
 8007be0:	40010400 	.word	0x40010400
 8007be4:	40014000 	.word	0x40014000
 8007be8:	40014400 	.word	0x40014400
 8007bec:	40014800 	.word	0x40014800

08007bf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f003 031f 	and.w	r3, r3, #31
 8007c02:	2201      	movs	r2, #1
 8007c04:	fa02 f303 	lsl.w	r3, r2, r3
 8007c08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6a1a      	ldr	r2, [r3, #32]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	43db      	mvns	r3, r3
 8007c12:	401a      	ands	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a1a      	ldr	r2, [r3, #32]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f003 031f 	and.w	r3, r3, #31
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	fa01 f303 	lsl.w	r3, r1, r3
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	621a      	str	r2, [r3, #32]
}
 8007c2e:	bf00      	nop
 8007c30:	371c      	adds	r7, #28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c42:	bf00      	nop
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c56:	bf00      	nop
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b082      	sub	sp, #8
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e042      	b.n	8007d0e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d106      	bne.n	8007ca0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7f9 fcd6 	bl	800164c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2224      	movs	r2, #36	; 0x24
 8007ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 0201 	bic.w	r2, r2, #1
 8007cb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f8c3 	bl	8007e44 <UART_SetConfig>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d101      	bne.n	8007cc8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e022      	b.n	8007d0e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fe1f 	bl	8008914 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ce4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689a      	ldr	r2, [r3, #8]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cf4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f042 0201 	orr.w	r2, r2, #1
 8007d04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fea6 	bl	8008a58 <UART_CheckIdleState>
 8007d0c:	4603      	mov	r3, r0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b08a      	sub	sp, #40	; 0x28
 8007d1a:	af02      	add	r7, sp, #8
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	603b      	str	r3, [r7, #0]
 8007d22:	4613      	mov	r3, r2
 8007d24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d2c:	2b20      	cmp	r3, #32
 8007d2e:	f040 8083 	bne.w	8007e38 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <HAL_UART_Transmit+0x28>
 8007d38:	88fb      	ldrh	r3, [r7, #6]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d101      	bne.n	8007d42 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e07b      	b.n	8007e3a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d101      	bne.n	8007d50 <HAL_UART_Transmit+0x3a>
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e074      	b.n	8007e3a <HAL_UART_Transmit+0x124>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2221      	movs	r2, #33	; 0x21
 8007d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d68:	f7f9 feb0 	bl	8001acc <HAL_GetTick>
 8007d6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	88fa      	ldrh	r2, [r7, #6]
 8007d72:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	88fa      	ldrh	r2, [r7, #6]
 8007d7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d86:	d108      	bne.n	8007d9a <HAL_UART_Transmit+0x84>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d104      	bne.n	8007d9a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007d90:	2300      	movs	r3, #0
 8007d92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	61bb      	str	r3, [r7, #24]
 8007d98:	e003      	b.n	8007da2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007daa:	e02c      	b.n	8007e06 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	2200      	movs	r2, #0
 8007db4:	2180      	movs	r1, #128	; 0x80
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 fe99 	bl	8008aee <UART_WaitOnFlagUntilTimeout>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e039      	b.n	8007e3a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10b      	bne.n	8007de4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	3302      	adds	r3, #2
 8007de0:	61bb      	str	r3, [r7, #24]
 8007de2:	e007      	b.n	8007df4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	781a      	ldrb	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	3301      	adds	r3, #1
 8007df2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1cc      	bne.n	8007dac <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2140      	movs	r1, #64	; 0x40
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 fe66 	bl	8008aee <UART_WaitOnFlagUntilTimeout>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e006      	b.n	8007e3a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2220      	movs	r2, #32
 8007e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e000      	b.n	8007e3a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007e38:	2302      	movs	r3, #2
  }
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3720      	adds	r7, #32
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
	...

08007e44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e48:	b092      	sub	sp, #72	; 0x48
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	431a      	orrs	r2, r3
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	431a      	orrs	r2, r3
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	4bbe      	ldr	r3, [pc, #760]	; (800816c <UART_SetConfig+0x328>)
 8007e74:	4013      	ands	r3, r2
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	6812      	ldr	r2, [r2, #0]
 8007e7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e7c:	430b      	orrs	r3, r1
 8007e7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4ab3      	ldr	r2, [pc, #716]	; (8008170 <UART_SetConfig+0x32c>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d004      	beq.n	8007eb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007eac:	4313      	orrs	r3, r2
 8007eae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689a      	ldr	r2, [r3, #8]
 8007eb6:	4baf      	ldr	r3, [pc, #700]	; (8008174 <UART_SetConfig+0x330>)
 8007eb8:	4013      	ands	r3, r2
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	6812      	ldr	r2, [r2, #0]
 8007ebe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	f023 010f 	bic.w	r1, r3, #15
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4aa6      	ldr	r2, [pc, #664]	; (8008178 <UART_SetConfig+0x334>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d177      	bne.n	8007fd4 <UART_SetConfig+0x190>
 8007ee4:	4ba5      	ldr	r3, [pc, #660]	; (800817c <UART_SetConfig+0x338>)
 8007ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007eec:	2b28      	cmp	r3, #40	; 0x28
 8007eee:	d86d      	bhi.n	8007fcc <UART_SetConfig+0x188>
 8007ef0:	a201      	add	r2, pc, #4	; (adr r2, 8007ef8 <UART_SetConfig+0xb4>)
 8007ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef6:	bf00      	nop
 8007ef8:	08007f9d 	.word	0x08007f9d
 8007efc:	08007fcd 	.word	0x08007fcd
 8007f00:	08007fcd 	.word	0x08007fcd
 8007f04:	08007fcd 	.word	0x08007fcd
 8007f08:	08007fcd 	.word	0x08007fcd
 8007f0c:	08007fcd 	.word	0x08007fcd
 8007f10:	08007fcd 	.word	0x08007fcd
 8007f14:	08007fcd 	.word	0x08007fcd
 8007f18:	08007fa5 	.word	0x08007fa5
 8007f1c:	08007fcd 	.word	0x08007fcd
 8007f20:	08007fcd 	.word	0x08007fcd
 8007f24:	08007fcd 	.word	0x08007fcd
 8007f28:	08007fcd 	.word	0x08007fcd
 8007f2c:	08007fcd 	.word	0x08007fcd
 8007f30:	08007fcd 	.word	0x08007fcd
 8007f34:	08007fcd 	.word	0x08007fcd
 8007f38:	08007fad 	.word	0x08007fad
 8007f3c:	08007fcd 	.word	0x08007fcd
 8007f40:	08007fcd 	.word	0x08007fcd
 8007f44:	08007fcd 	.word	0x08007fcd
 8007f48:	08007fcd 	.word	0x08007fcd
 8007f4c:	08007fcd 	.word	0x08007fcd
 8007f50:	08007fcd 	.word	0x08007fcd
 8007f54:	08007fcd 	.word	0x08007fcd
 8007f58:	08007fb5 	.word	0x08007fb5
 8007f5c:	08007fcd 	.word	0x08007fcd
 8007f60:	08007fcd 	.word	0x08007fcd
 8007f64:	08007fcd 	.word	0x08007fcd
 8007f68:	08007fcd 	.word	0x08007fcd
 8007f6c:	08007fcd 	.word	0x08007fcd
 8007f70:	08007fcd 	.word	0x08007fcd
 8007f74:	08007fcd 	.word	0x08007fcd
 8007f78:	08007fbd 	.word	0x08007fbd
 8007f7c:	08007fcd 	.word	0x08007fcd
 8007f80:	08007fcd 	.word	0x08007fcd
 8007f84:	08007fcd 	.word	0x08007fcd
 8007f88:	08007fcd 	.word	0x08007fcd
 8007f8c:	08007fcd 	.word	0x08007fcd
 8007f90:	08007fcd 	.word	0x08007fcd
 8007f94:	08007fcd 	.word	0x08007fcd
 8007f98:	08007fc5 	.word	0x08007fc5
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fa2:	e222      	b.n	80083ea <UART_SetConfig+0x5a6>
 8007fa4:	2304      	movs	r3, #4
 8007fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007faa:	e21e      	b.n	80083ea <UART_SetConfig+0x5a6>
 8007fac:	2308      	movs	r3, #8
 8007fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fb2:	e21a      	b.n	80083ea <UART_SetConfig+0x5a6>
 8007fb4:	2310      	movs	r3, #16
 8007fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fba:	e216      	b.n	80083ea <UART_SetConfig+0x5a6>
 8007fbc:	2320      	movs	r3, #32
 8007fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fc2:	e212      	b.n	80083ea <UART_SetConfig+0x5a6>
 8007fc4:	2340      	movs	r3, #64	; 0x40
 8007fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fca:	e20e      	b.n	80083ea <UART_SetConfig+0x5a6>
 8007fcc:	2380      	movs	r3, #128	; 0x80
 8007fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fd2:	e20a      	b.n	80083ea <UART_SetConfig+0x5a6>
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a69      	ldr	r2, [pc, #420]	; (8008180 <UART_SetConfig+0x33c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d130      	bne.n	8008040 <UART_SetConfig+0x1fc>
 8007fde:	4b67      	ldr	r3, [pc, #412]	; (800817c <UART_SetConfig+0x338>)
 8007fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	2b05      	cmp	r3, #5
 8007fe8:	d826      	bhi.n	8008038 <UART_SetConfig+0x1f4>
 8007fea:	a201      	add	r2, pc, #4	; (adr r2, 8007ff0 <UART_SetConfig+0x1ac>)
 8007fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff0:	08008009 	.word	0x08008009
 8007ff4:	08008011 	.word	0x08008011
 8007ff8:	08008019 	.word	0x08008019
 8007ffc:	08008021 	.word	0x08008021
 8008000:	08008029 	.word	0x08008029
 8008004:	08008031 	.word	0x08008031
 8008008:	2300      	movs	r3, #0
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800e:	e1ec      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008010:	2304      	movs	r3, #4
 8008012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008016:	e1e8      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008018:	2308      	movs	r3, #8
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801e:	e1e4      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008020:	2310      	movs	r3, #16
 8008022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008026:	e1e0      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008028:	2320      	movs	r3, #32
 800802a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800802e:	e1dc      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008030:	2340      	movs	r3, #64	; 0x40
 8008032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008036:	e1d8      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008038:	2380      	movs	r3, #128	; 0x80
 800803a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800803e:	e1d4      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a4f      	ldr	r2, [pc, #316]	; (8008184 <UART_SetConfig+0x340>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d130      	bne.n	80080ac <UART_SetConfig+0x268>
 800804a:	4b4c      	ldr	r3, [pc, #304]	; (800817c <UART_SetConfig+0x338>)
 800804c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	2b05      	cmp	r3, #5
 8008054:	d826      	bhi.n	80080a4 <UART_SetConfig+0x260>
 8008056:	a201      	add	r2, pc, #4	; (adr r2, 800805c <UART_SetConfig+0x218>)
 8008058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805c:	08008075 	.word	0x08008075
 8008060:	0800807d 	.word	0x0800807d
 8008064:	08008085 	.word	0x08008085
 8008068:	0800808d 	.word	0x0800808d
 800806c:	08008095 	.word	0x08008095
 8008070:	0800809d 	.word	0x0800809d
 8008074:	2300      	movs	r3, #0
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807a:	e1b6      	b.n	80083ea <UART_SetConfig+0x5a6>
 800807c:	2304      	movs	r3, #4
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008082:	e1b2      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008084:	2308      	movs	r3, #8
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808a:	e1ae      	b.n	80083ea <UART_SetConfig+0x5a6>
 800808c:	2310      	movs	r3, #16
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008092:	e1aa      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008094:	2320      	movs	r3, #32
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800809a:	e1a6      	b.n	80083ea <UART_SetConfig+0x5a6>
 800809c:	2340      	movs	r3, #64	; 0x40
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080a2:	e1a2      	b.n	80083ea <UART_SetConfig+0x5a6>
 80080a4:	2380      	movs	r3, #128	; 0x80
 80080a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080aa:	e19e      	b.n	80083ea <UART_SetConfig+0x5a6>
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a35      	ldr	r2, [pc, #212]	; (8008188 <UART_SetConfig+0x344>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d130      	bne.n	8008118 <UART_SetConfig+0x2d4>
 80080b6:	4b31      	ldr	r3, [pc, #196]	; (800817c <UART_SetConfig+0x338>)
 80080b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ba:	f003 0307 	and.w	r3, r3, #7
 80080be:	2b05      	cmp	r3, #5
 80080c0:	d826      	bhi.n	8008110 <UART_SetConfig+0x2cc>
 80080c2:	a201      	add	r2, pc, #4	; (adr r2, 80080c8 <UART_SetConfig+0x284>)
 80080c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c8:	080080e1 	.word	0x080080e1
 80080cc:	080080e9 	.word	0x080080e9
 80080d0:	080080f1 	.word	0x080080f1
 80080d4:	080080f9 	.word	0x080080f9
 80080d8:	08008101 	.word	0x08008101
 80080dc:	08008109 	.word	0x08008109
 80080e0:	2300      	movs	r3, #0
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e6:	e180      	b.n	80083ea <UART_SetConfig+0x5a6>
 80080e8:	2304      	movs	r3, #4
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ee:	e17c      	b.n	80083ea <UART_SetConfig+0x5a6>
 80080f0:	2308      	movs	r3, #8
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f6:	e178      	b.n	80083ea <UART_SetConfig+0x5a6>
 80080f8:	2310      	movs	r3, #16
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080fe:	e174      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008100:	2320      	movs	r3, #32
 8008102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008106:	e170      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008108:	2340      	movs	r3, #64	; 0x40
 800810a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800810e:	e16c      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008110:	2380      	movs	r3, #128	; 0x80
 8008112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008116:	e168      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a1b      	ldr	r2, [pc, #108]	; (800818c <UART_SetConfig+0x348>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d142      	bne.n	80081a8 <UART_SetConfig+0x364>
 8008122:	4b16      	ldr	r3, [pc, #88]	; (800817c <UART_SetConfig+0x338>)
 8008124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008126:	f003 0307 	and.w	r3, r3, #7
 800812a:	2b05      	cmp	r3, #5
 800812c:	d838      	bhi.n	80081a0 <UART_SetConfig+0x35c>
 800812e:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <UART_SetConfig+0x2f0>)
 8008130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008134:	0800814d 	.word	0x0800814d
 8008138:	08008155 	.word	0x08008155
 800813c:	0800815d 	.word	0x0800815d
 8008140:	08008165 	.word	0x08008165
 8008144:	08008191 	.word	0x08008191
 8008148:	08008199 	.word	0x08008199
 800814c:	2300      	movs	r3, #0
 800814e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008152:	e14a      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008154:	2304      	movs	r3, #4
 8008156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800815a:	e146      	b.n	80083ea <UART_SetConfig+0x5a6>
 800815c:	2308      	movs	r3, #8
 800815e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008162:	e142      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008164:	2310      	movs	r3, #16
 8008166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800816a:	e13e      	b.n	80083ea <UART_SetConfig+0x5a6>
 800816c:	cfff69f3 	.word	0xcfff69f3
 8008170:	58000c00 	.word	0x58000c00
 8008174:	11fff4ff 	.word	0x11fff4ff
 8008178:	40011000 	.word	0x40011000
 800817c:	58024400 	.word	0x58024400
 8008180:	40004400 	.word	0x40004400
 8008184:	40004800 	.word	0x40004800
 8008188:	40004c00 	.word	0x40004c00
 800818c:	40005000 	.word	0x40005000
 8008190:	2320      	movs	r3, #32
 8008192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008196:	e128      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008198:	2340      	movs	r3, #64	; 0x40
 800819a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800819e:	e124      	b.n	80083ea <UART_SetConfig+0x5a6>
 80081a0:	2380      	movs	r3, #128	; 0x80
 80081a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081a6:	e120      	b.n	80083ea <UART_SetConfig+0x5a6>
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4acb      	ldr	r2, [pc, #812]	; (80084dc <UART_SetConfig+0x698>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d176      	bne.n	80082a0 <UART_SetConfig+0x45c>
 80081b2:	4bcb      	ldr	r3, [pc, #812]	; (80084e0 <UART_SetConfig+0x69c>)
 80081b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081ba:	2b28      	cmp	r3, #40	; 0x28
 80081bc:	d86c      	bhi.n	8008298 <UART_SetConfig+0x454>
 80081be:	a201      	add	r2, pc, #4	; (adr r2, 80081c4 <UART_SetConfig+0x380>)
 80081c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c4:	08008269 	.word	0x08008269
 80081c8:	08008299 	.word	0x08008299
 80081cc:	08008299 	.word	0x08008299
 80081d0:	08008299 	.word	0x08008299
 80081d4:	08008299 	.word	0x08008299
 80081d8:	08008299 	.word	0x08008299
 80081dc:	08008299 	.word	0x08008299
 80081e0:	08008299 	.word	0x08008299
 80081e4:	08008271 	.word	0x08008271
 80081e8:	08008299 	.word	0x08008299
 80081ec:	08008299 	.word	0x08008299
 80081f0:	08008299 	.word	0x08008299
 80081f4:	08008299 	.word	0x08008299
 80081f8:	08008299 	.word	0x08008299
 80081fc:	08008299 	.word	0x08008299
 8008200:	08008299 	.word	0x08008299
 8008204:	08008279 	.word	0x08008279
 8008208:	08008299 	.word	0x08008299
 800820c:	08008299 	.word	0x08008299
 8008210:	08008299 	.word	0x08008299
 8008214:	08008299 	.word	0x08008299
 8008218:	08008299 	.word	0x08008299
 800821c:	08008299 	.word	0x08008299
 8008220:	08008299 	.word	0x08008299
 8008224:	08008281 	.word	0x08008281
 8008228:	08008299 	.word	0x08008299
 800822c:	08008299 	.word	0x08008299
 8008230:	08008299 	.word	0x08008299
 8008234:	08008299 	.word	0x08008299
 8008238:	08008299 	.word	0x08008299
 800823c:	08008299 	.word	0x08008299
 8008240:	08008299 	.word	0x08008299
 8008244:	08008289 	.word	0x08008289
 8008248:	08008299 	.word	0x08008299
 800824c:	08008299 	.word	0x08008299
 8008250:	08008299 	.word	0x08008299
 8008254:	08008299 	.word	0x08008299
 8008258:	08008299 	.word	0x08008299
 800825c:	08008299 	.word	0x08008299
 8008260:	08008299 	.word	0x08008299
 8008264:	08008291 	.word	0x08008291
 8008268:	2301      	movs	r3, #1
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800826e:	e0bc      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008270:	2304      	movs	r3, #4
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008276:	e0b8      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008278:	2308      	movs	r3, #8
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800827e:	e0b4      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008280:	2310      	movs	r3, #16
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008286:	e0b0      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008288:	2320      	movs	r3, #32
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800828e:	e0ac      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008290:	2340      	movs	r3, #64	; 0x40
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008296:	e0a8      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008298:	2380      	movs	r3, #128	; 0x80
 800829a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800829e:	e0a4      	b.n	80083ea <UART_SetConfig+0x5a6>
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a8f      	ldr	r2, [pc, #572]	; (80084e4 <UART_SetConfig+0x6a0>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d130      	bne.n	800830c <UART_SetConfig+0x4c8>
 80082aa:	4b8d      	ldr	r3, [pc, #564]	; (80084e0 <UART_SetConfig+0x69c>)
 80082ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	2b05      	cmp	r3, #5
 80082b4:	d826      	bhi.n	8008304 <UART_SetConfig+0x4c0>
 80082b6:	a201      	add	r2, pc, #4	; (adr r2, 80082bc <UART_SetConfig+0x478>)
 80082b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082bc:	080082d5 	.word	0x080082d5
 80082c0:	080082dd 	.word	0x080082dd
 80082c4:	080082e5 	.word	0x080082e5
 80082c8:	080082ed 	.word	0x080082ed
 80082cc:	080082f5 	.word	0x080082f5
 80082d0:	080082fd 	.word	0x080082fd
 80082d4:	2300      	movs	r3, #0
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082da:	e086      	b.n	80083ea <UART_SetConfig+0x5a6>
 80082dc:	2304      	movs	r3, #4
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e2:	e082      	b.n	80083ea <UART_SetConfig+0x5a6>
 80082e4:	2308      	movs	r3, #8
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ea:	e07e      	b.n	80083ea <UART_SetConfig+0x5a6>
 80082ec:	2310      	movs	r3, #16
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f2:	e07a      	b.n	80083ea <UART_SetConfig+0x5a6>
 80082f4:	2320      	movs	r3, #32
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fa:	e076      	b.n	80083ea <UART_SetConfig+0x5a6>
 80082fc:	2340      	movs	r3, #64	; 0x40
 80082fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008302:	e072      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008304:	2380      	movs	r3, #128	; 0x80
 8008306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830a:	e06e      	b.n	80083ea <UART_SetConfig+0x5a6>
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a75      	ldr	r2, [pc, #468]	; (80084e8 <UART_SetConfig+0x6a4>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d130      	bne.n	8008378 <UART_SetConfig+0x534>
 8008316:	4b72      	ldr	r3, [pc, #456]	; (80084e0 <UART_SetConfig+0x69c>)
 8008318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831a:	f003 0307 	and.w	r3, r3, #7
 800831e:	2b05      	cmp	r3, #5
 8008320:	d826      	bhi.n	8008370 <UART_SetConfig+0x52c>
 8008322:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <UART_SetConfig+0x4e4>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	08008341 	.word	0x08008341
 800832c:	08008349 	.word	0x08008349
 8008330:	08008351 	.word	0x08008351
 8008334:	08008359 	.word	0x08008359
 8008338:	08008361 	.word	0x08008361
 800833c:	08008369 	.word	0x08008369
 8008340:	2300      	movs	r3, #0
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008346:	e050      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008348:	2304      	movs	r3, #4
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834e:	e04c      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008350:	2308      	movs	r3, #8
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008356:	e048      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008358:	2310      	movs	r3, #16
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835e:	e044      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008360:	2320      	movs	r3, #32
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008366:	e040      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008368:	2340      	movs	r3, #64	; 0x40
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836e:	e03c      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008370:	2380      	movs	r3, #128	; 0x80
 8008372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008376:	e038      	b.n	80083ea <UART_SetConfig+0x5a6>
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a5b      	ldr	r2, [pc, #364]	; (80084ec <UART_SetConfig+0x6a8>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d130      	bne.n	80083e4 <UART_SetConfig+0x5a0>
 8008382:	4b57      	ldr	r3, [pc, #348]	; (80084e0 <UART_SetConfig+0x69c>)
 8008384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	2b05      	cmp	r3, #5
 800838c:	d826      	bhi.n	80083dc <UART_SetConfig+0x598>
 800838e:	a201      	add	r2, pc, #4	; (adr r2, 8008394 <UART_SetConfig+0x550>)
 8008390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008394:	080083ad 	.word	0x080083ad
 8008398:	080083b5 	.word	0x080083b5
 800839c:	080083bd 	.word	0x080083bd
 80083a0:	080083c5 	.word	0x080083c5
 80083a4:	080083cd 	.word	0x080083cd
 80083a8:	080083d5 	.word	0x080083d5
 80083ac:	2302      	movs	r3, #2
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b2:	e01a      	b.n	80083ea <UART_SetConfig+0x5a6>
 80083b4:	2304      	movs	r3, #4
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ba:	e016      	b.n	80083ea <UART_SetConfig+0x5a6>
 80083bc:	2308      	movs	r3, #8
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c2:	e012      	b.n	80083ea <UART_SetConfig+0x5a6>
 80083c4:	2310      	movs	r3, #16
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ca:	e00e      	b.n	80083ea <UART_SetConfig+0x5a6>
 80083cc:	2320      	movs	r3, #32
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d2:	e00a      	b.n	80083ea <UART_SetConfig+0x5a6>
 80083d4:	2340      	movs	r3, #64	; 0x40
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083da:	e006      	b.n	80083ea <UART_SetConfig+0x5a6>
 80083dc:	2380      	movs	r3, #128	; 0x80
 80083de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083e2:	e002      	b.n	80083ea <UART_SetConfig+0x5a6>
 80083e4:	2380      	movs	r3, #128	; 0x80
 80083e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a3f      	ldr	r2, [pc, #252]	; (80084ec <UART_SetConfig+0x6a8>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	f040 80f8 	bne.w	80085e6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80083fa:	2b20      	cmp	r3, #32
 80083fc:	dc46      	bgt.n	800848c <UART_SetConfig+0x648>
 80083fe:	2b02      	cmp	r3, #2
 8008400:	f2c0 8082 	blt.w	8008508 <UART_SetConfig+0x6c4>
 8008404:	3b02      	subs	r3, #2
 8008406:	2b1e      	cmp	r3, #30
 8008408:	d87e      	bhi.n	8008508 <UART_SetConfig+0x6c4>
 800840a:	a201      	add	r2, pc, #4	; (adr r2, 8008410 <UART_SetConfig+0x5cc>)
 800840c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008410:	08008493 	.word	0x08008493
 8008414:	08008509 	.word	0x08008509
 8008418:	0800849b 	.word	0x0800849b
 800841c:	08008509 	.word	0x08008509
 8008420:	08008509 	.word	0x08008509
 8008424:	08008509 	.word	0x08008509
 8008428:	080084ab 	.word	0x080084ab
 800842c:	08008509 	.word	0x08008509
 8008430:	08008509 	.word	0x08008509
 8008434:	08008509 	.word	0x08008509
 8008438:	08008509 	.word	0x08008509
 800843c:	08008509 	.word	0x08008509
 8008440:	08008509 	.word	0x08008509
 8008444:	08008509 	.word	0x08008509
 8008448:	080084bb 	.word	0x080084bb
 800844c:	08008509 	.word	0x08008509
 8008450:	08008509 	.word	0x08008509
 8008454:	08008509 	.word	0x08008509
 8008458:	08008509 	.word	0x08008509
 800845c:	08008509 	.word	0x08008509
 8008460:	08008509 	.word	0x08008509
 8008464:	08008509 	.word	0x08008509
 8008468:	08008509 	.word	0x08008509
 800846c:	08008509 	.word	0x08008509
 8008470:	08008509 	.word	0x08008509
 8008474:	08008509 	.word	0x08008509
 8008478:	08008509 	.word	0x08008509
 800847c:	08008509 	.word	0x08008509
 8008480:	08008509 	.word	0x08008509
 8008484:	08008509 	.word	0x08008509
 8008488:	080084fb 	.word	0x080084fb
 800848c:	2b40      	cmp	r3, #64	; 0x40
 800848e:	d037      	beq.n	8008500 <UART_SetConfig+0x6bc>
 8008490:	e03a      	b.n	8008508 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008492:	f7fd ff89 	bl	80063a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008496:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008498:	e03c      	b.n	8008514 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800849a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fd ff98 	bl	80063d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084a8:	e034      	b.n	8008514 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084aa:	f107 0318 	add.w	r3, r7, #24
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe f8e4 	bl	800667c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084b8:	e02c      	b.n	8008514 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084ba:	4b09      	ldr	r3, [pc, #36]	; (80084e0 <UART_SetConfig+0x69c>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0320 	and.w	r3, r3, #32
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d016      	beq.n	80084f4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80084c6:	4b06      	ldr	r3, [pc, #24]	; (80084e0 <UART_SetConfig+0x69c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	08db      	lsrs	r3, r3, #3
 80084cc:	f003 0303 	and.w	r3, r3, #3
 80084d0:	4a07      	ldr	r2, [pc, #28]	; (80084f0 <UART_SetConfig+0x6ac>)
 80084d2:	fa22 f303 	lsr.w	r3, r2, r3
 80084d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80084d8:	e01c      	b.n	8008514 <UART_SetConfig+0x6d0>
 80084da:	bf00      	nop
 80084dc:	40011400 	.word	0x40011400
 80084e0:	58024400 	.word	0x58024400
 80084e4:	40007800 	.word	0x40007800
 80084e8:	40007c00 	.word	0x40007c00
 80084ec:	58000c00 	.word	0x58000c00
 80084f0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80084f4:	4b9d      	ldr	r3, [pc, #628]	; (800876c <UART_SetConfig+0x928>)
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f8:	e00c      	b.n	8008514 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80084fa:	4b9d      	ldr	r3, [pc, #628]	; (8008770 <UART_SetConfig+0x92c>)
 80084fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084fe:	e009      	b.n	8008514 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008504:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008506:	e005      	b.n	8008514 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008508:	2300      	movs	r3, #0
 800850a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008512:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 81de 	beq.w	80088d8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008520:	4a94      	ldr	r2, [pc, #592]	; (8008774 <UART_SetConfig+0x930>)
 8008522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008526:	461a      	mov	r2, r3
 8008528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852a:	fbb3 f3f2 	udiv	r3, r3, r2
 800852e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	685a      	ldr	r2, [r3, #4]
 8008534:	4613      	mov	r3, r2
 8008536:	005b      	lsls	r3, r3, #1
 8008538:	4413      	add	r3, r2
 800853a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800853c:	429a      	cmp	r2, r3
 800853e:	d305      	bcc.n	800854c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008548:	429a      	cmp	r2, r3
 800854a:	d903      	bls.n	8008554 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008552:	e1c1      	b.n	80088d8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008556:	2200      	movs	r2, #0
 8008558:	60bb      	str	r3, [r7, #8]
 800855a:	60fa      	str	r2, [r7, #12]
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	4a84      	ldr	r2, [pc, #528]	; (8008774 <UART_SetConfig+0x930>)
 8008562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008566:	b29b      	uxth	r3, r3
 8008568:	2200      	movs	r2, #0
 800856a:	603b      	str	r3, [r7, #0]
 800856c:	607a      	str	r2, [r7, #4]
 800856e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008572:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008576:	f7f7 ff03 	bl	8000380 <__aeabi_uldivmod>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	4610      	mov	r0, r2
 8008580:	4619      	mov	r1, r3
 8008582:	f04f 0200 	mov.w	r2, #0
 8008586:	f04f 0300 	mov.w	r3, #0
 800858a:	020b      	lsls	r3, r1, #8
 800858c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008590:	0202      	lsls	r2, r0, #8
 8008592:	6979      	ldr	r1, [r7, #20]
 8008594:	6849      	ldr	r1, [r1, #4]
 8008596:	0849      	lsrs	r1, r1, #1
 8008598:	2000      	movs	r0, #0
 800859a:	460c      	mov	r4, r1
 800859c:	4605      	mov	r5, r0
 800859e:	eb12 0804 	adds.w	r8, r2, r4
 80085a2:	eb43 0905 	adc.w	r9, r3, r5
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	469a      	mov	sl, r3
 80085ae:	4693      	mov	fp, r2
 80085b0:	4652      	mov	r2, sl
 80085b2:	465b      	mov	r3, fp
 80085b4:	4640      	mov	r0, r8
 80085b6:	4649      	mov	r1, r9
 80085b8:	f7f7 fee2 	bl	8000380 <__aeabi_uldivmod>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	4613      	mov	r3, r2
 80085c2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085ca:	d308      	bcc.n	80085de <UART_SetConfig+0x79a>
 80085cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085d2:	d204      	bcs.n	80085de <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085da:	60da      	str	r2, [r3, #12]
 80085dc:	e17c      	b.n	80088d8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80085e4:	e178      	b.n	80088d8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085ee:	f040 80c5 	bne.w	800877c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80085f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80085f6:	2b20      	cmp	r3, #32
 80085f8:	dc48      	bgt.n	800868c <UART_SetConfig+0x848>
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	db7b      	blt.n	80086f6 <UART_SetConfig+0x8b2>
 80085fe:	2b20      	cmp	r3, #32
 8008600:	d879      	bhi.n	80086f6 <UART_SetConfig+0x8b2>
 8008602:	a201      	add	r2, pc, #4	; (adr r2, 8008608 <UART_SetConfig+0x7c4>)
 8008604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008608:	08008693 	.word	0x08008693
 800860c:	0800869b 	.word	0x0800869b
 8008610:	080086f7 	.word	0x080086f7
 8008614:	080086f7 	.word	0x080086f7
 8008618:	080086a3 	.word	0x080086a3
 800861c:	080086f7 	.word	0x080086f7
 8008620:	080086f7 	.word	0x080086f7
 8008624:	080086f7 	.word	0x080086f7
 8008628:	080086b3 	.word	0x080086b3
 800862c:	080086f7 	.word	0x080086f7
 8008630:	080086f7 	.word	0x080086f7
 8008634:	080086f7 	.word	0x080086f7
 8008638:	080086f7 	.word	0x080086f7
 800863c:	080086f7 	.word	0x080086f7
 8008640:	080086f7 	.word	0x080086f7
 8008644:	080086f7 	.word	0x080086f7
 8008648:	080086c3 	.word	0x080086c3
 800864c:	080086f7 	.word	0x080086f7
 8008650:	080086f7 	.word	0x080086f7
 8008654:	080086f7 	.word	0x080086f7
 8008658:	080086f7 	.word	0x080086f7
 800865c:	080086f7 	.word	0x080086f7
 8008660:	080086f7 	.word	0x080086f7
 8008664:	080086f7 	.word	0x080086f7
 8008668:	080086f7 	.word	0x080086f7
 800866c:	080086f7 	.word	0x080086f7
 8008670:	080086f7 	.word	0x080086f7
 8008674:	080086f7 	.word	0x080086f7
 8008678:	080086f7 	.word	0x080086f7
 800867c:	080086f7 	.word	0x080086f7
 8008680:	080086f7 	.word	0x080086f7
 8008684:	080086f7 	.word	0x080086f7
 8008688:	080086e9 	.word	0x080086e9
 800868c:	2b40      	cmp	r3, #64	; 0x40
 800868e:	d02e      	beq.n	80086ee <UART_SetConfig+0x8aa>
 8008690:	e031      	b.n	80086f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008692:	f7fc fed5 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 8008696:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008698:	e033      	b.n	8008702 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800869a:	f7fc fee7 	bl	800546c <HAL_RCC_GetPCLK2Freq>
 800869e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80086a0:	e02f      	b.n	8008702 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7fd fe94 	bl	80063d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086b0:	e027      	b.n	8008702 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086b2:	f107 0318 	add.w	r3, r7, #24
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fd ffe0 	bl	800667c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086c0:	e01f      	b.n	8008702 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086c2:	4b2d      	ldr	r3, [pc, #180]	; (8008778 <UART_SetConfig+0x934>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0320 	and.w	r3, r3, #32
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d009      	beq.n	80086e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086ce:	4b2a      	ldr	r3, [pc, #168]	; (8008778 <UART_SetConfig+0x934>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	08db      	lsrs	r3, r3, #3
 80086d4:	f003 0303 	and.w	r3, r3, #3
 80086d8:	4a24      	ldr	r2, [pc, #144]	; (800876c <UART_SetConfig+0x928>)
 80086da:	fa22 f303 	lsr.w	r3, r2, r3
 80086de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086e0:	e00f      	b.n	8008702 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80086e2:	4b22      	ldr	r3, [pc, #136]	; (800876c <UART_SetConfig+0x928>)
 80086e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086e6:	e00c      	b.n	8008702 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086e8:	4b21      	ldr	r3, [pc, #132]	; (8008770 <UART_SetConfig+0x92c>)
 80086ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ec:	e009      	b.n	8008702 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086f4:	e005      	b.n	8008702 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008700:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 80e7 	beq.w	80088d8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870e:	4a19      	ldr	r2, [pc, #100]	; (8008774 <UART_SetConfig+0x930>)
 8008710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008714:	461a      	mov	r2, r3
 8008716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008718:	fbb3 f3f2 	udiv	r3, r3, r2
 800871c:	005a      	lsls	r2, r3, #1
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	085b      	lsrs	r3, r3, #1
 8008724:	441a      	add	r2, r3
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	fbb2 f3f3 	udiv	r3, r2, r3
 800872e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008732:	2b0f      	cmp	r3, #15
 8008734:	d916      	bls.n	8008764 <UART_SetConfig+0x920>
 8008736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800873c:	d212      	bcs.n	8008764 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800873e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008740:	b29b      	uxth	r3, r3
 8008742:	f023 030f 	bic.w	r3, r3, #15
 8008746:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874a:	085b      	lsrs	r3, r3, #1
 800874c:	b29b      	uxth	r3, r3
 800874e:	f003 0307 	and.w	r3, r3, #7
 8008752:	b29a      	uxth	r2, r3
 8008754:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008756:	4313      	orrs	r3, r2
 8008758:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008760:	60da      	str	r2, [r3, #12]
 8008762:	e0b9      	b.n	80088d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800876a:	e0b5      	b.n	80088d8 <UART_SetConfig+0xa94>
 800876c:	03d09000 	.word	0x03d09000
 8008770:	003d0900 	.word	0x003d0900
 8008774:	08020134 	.word	0x08020134
 8008778:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800877c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008780:	2b20      	cmp	r3, #32
 8008782:	dc49      	bgt.n	8008818 <UART_SetConfig+0x9d4>
 8008784:	2b00      	cmp	r3, #0
 8008786:	db7c      	blt.n	8008882 <UART_SetConfig+0xa3e>
 8008788:	2b20      	cmp	r3, #32
 800878a:	d87a      	bhi.n	8008882 <UART_SetConfig+0xa3e>
 800878c:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <UART_SetConfig+0x950>)
 800878e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008792:	bf00      	nop
 8008794:	0800881f 	.word	0x0800881f
 8008798:	08008827 	.word	0x08008827
 800879c:	08008883 	.word	0x08008883
 80087a0:	08008883 	.word	0x08008883
 80087a4:	0800882f 	.word	0x0800882f
 80087a8:	08008883 	.word	0x08008883
 80087ac:	08008883 	.word	0x08008883
 80087b0:	08008883 	.word	0x08008883
 80087b4:	0800883f 	.word	0x0800883f
 80087b8:	08008883 	.word	0x08008883
 80087bc:	08008883 	.word	0x08008883
 80087c0:	08008883 	.word	0x08008883
 80087c4:	08008883 	.word	0x08008883
 80087c8:	08008883 	.word	0x08008883
 80087cc:	08008883 	.word	0x08008883
 80087d0:	08008883 	.word	0x08008883
 80087d4:	0800884f 	.word	0x0800884f
 80087d8:	08008883 	.word	0x08008883
 80087dc:	08008883 	.word	0x08008883
 80087e0:	08008883 	.word	0x08008883
 80087e4:	08008883 	.word	0x08008883
 80087e8:	08008883 	.word	0x08008883
 80087ec:	08008883 	.word	0x08008883
 80087f0:	08008883 	.word	0x08008883
 80087f4:	08008883 	.word	0x08008883
 80087f8:	08008883 	.word	0x08008883
 80087fc:	08008883 	.word	0x08008883
 8008800:	08008883 	.word	0x08008883
 8008804:	08008883 	.word	0x08008883
 8008808:	08008883 	.word	0x08008883
 800880c:	08008883 	.word	0x08008883
 8008810:	08008883 	.word	0x08008883
 8008814:	08008875 	.word	0x08008875
 8008818:	2b40      	cmp	r3, #64	; 0x40
 800881a:	d02e      	beq.n	800887a <UART_SetConfig+0xa36>
 800881c:	e031      	b.n	8008882 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800881e:	f7fc fe0f 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 8008822:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008824:	e033      	b.n	800888e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008826:	f7fc fe21 	bl	800546c <HAL_RCC_GetPCLK2Freq>
 800882a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800882c:	e02f      	b.n	800888e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800882e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008832:	4618      	mov	r0, r3
 8008834:	f7fd fdce 	bl	80063d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800883c:	e027      	b.n	800888e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800883e:	f107 0318 	add.w	r3, r7, #24
 8008842:	4618      	mov	r0, r3
 8008844:	f7fd ff1a 	bl	800667c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800884c:	e01f      	b.n	800888e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800884e:	4b2d      	ldr	r3, [pc, #180]	; (8008904 <UART_SetConfig+0xac0>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0320 	and.w	r3, r3, #32
 8008856:	2b00      	cmp	r3, #0
 8008858:	d009      	beq.n	800886e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800885a:	4b2a      	ldr	r3, [pc, #168]	; (8008904 <UART_SetConfig+0xac0>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	08db      	lsrs	r3, r3, #3
 8008860:	f003 0303 	and.w	r3, r3, #3
 8008864:	4a28      	ldr	r2, [pc, #160]	; (8008908 <UART_SetConfig+0xac4>)
 8008866:	fa22 f303 	lsr.w	r3, r2, r3
 800886a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800886c:	e00f      	b.n	800888e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800886e:	4b26      	ldr	r3, [pc, #152]	; (8008908 <UART_SetConfig+0xac4>)
 8008870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008872:	e00c      	b.n	800888e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008874:	4b25      	ldr	r3, [pc, #148]	; (800890c <UART_SetConfig+0xac8>)
 8008876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008878:	e009      	b.n	800888e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800887a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800887e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008880:	e005      	b.n	800888e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800888c:	bf00      	nop
    }

    if (pclk != 0U)
 800888e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008890:	2b00      	cmp	r3, #0
 8008892:	d021      	beq.n	80088d8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	4a1d      	ldr	r2, [pc, #116]	; (8008910 <UART_SetConfig+0xacc>)
 800889a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800889e:	461a      	mov	r2, r3
 80088a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	085b      	lsrs	r3, r3, #1
 80088ac:	441a      	add	r2, r3
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	2b0f      	cmp	r3, #15
 80088bc:	d909      	bls.n	80088d2 <UART_SetConfig+0xa8e>
 80088be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088c4:	d205      	bcs.n	80088d2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	60da      	str	r2, [r3, #12]
 80088d0:	e002      	b.n	80088d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	2201      	movs	r2, #1
 80088dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	2200      	movs	r2, #0
 80088ec:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2200      	movs	r2, #0
 80088f2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80088f4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3748      	adds	r7, #72	; 0x48
 80088fc:	46bd      	mov	sp, r7
 80088fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008902:	bf00      	nop
 8008904:	58024400 	.word	0x58024400
 8008908:	03d09000 	.word	0x03d09000
 800890c:	003d0900 	.word	0x003d0900
 8008910:	08020134 	.word	0x08020134

08008914 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008920:	f003 0301 	and.w	r3, r3, #1
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00a      	beq.n	800893e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00a      	beq.n	8008960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	430a      	orrs	r2, r1
 800895e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008964:	f003 0304 	and.w	r3, r3, #4
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00a      	beq.n	8008982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	430a      	orrs	r2, r1
 8008980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008986:	f003 0308 	and.w	r3, r3, #8
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00a      	beq.n	80089a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	430a      	orrs	r2, r1
 80089a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a8:	f003 0310 	and.w	r3, r3, #16
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00a      	beq.n	80089c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	430a      	orrs	r2, r1
 80089c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ca:	f003 0320 	and.w	r3, r3, #32
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00a      	beq.n	80089e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	430a      	orrs	r2, r1
 80089e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d01a      	beq.n	8008a2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	430a      	orrs	r2, r1
 8008a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a12:	d10a      	bne.n	8008a2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	430a      	orrs	r2, r1
 8008a28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00a      	beq.n	8008a4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	605a      	str	r2, [r3, #4]
  }
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af02      	add	r7, sp, #8
 8008a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a68:	f7f9 f830 	bl	8001acc <HAL_GetTick>
 8008a6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 0308 	and.w	r3, r3, #8
 8008a78:	2b08      	cmp	r3, #8
 8008a7a:	d10e      	bne.n	8008a9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f82f 	bl	8008aee <UART_WaitOnFlagUntilTimeout>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e025      	b.n	8008ae6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0304 	and.w	r3, r3, #4
 8008aa4:	2b04      	cmp	r3, #4
 8008aa6:	d10e      	bne.n	8008ac6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008aa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f819 	bl	8008aee <UART_WaitOnFlagUntilTimeout>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e00f      	b.n	8008ae6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2220      	movs	r2, #32
 8008aca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b09c      	sub	sp, #112	; 0x70
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	60f8      	str	r0, [r7, #12]
 8008af6:	60b9      	str	r1, [r7, #8]
 8008af8:	603b      	str	r3, [r7, #0]
 8008afa:	4613      	mov	r3, r2
 8008afc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008afe:	e0a9      	b.n	8008c54 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b06:	f000 80a5 	beq.w	8008c54 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b0a:	f7f8 ffdf 	bl	8001acc <HAL_GetTick>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d302      	bcc.n	8008b20 <UART_WaitOnFlagUntilTimeout+0x32>
 8008b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d140      	bne.n	8008ba2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b34:	667b      	str	r3, [r7, #100]	; 0x64
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b40:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e6      	bne.n	8008b20 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3308      	adds	r3, #8
 8008b58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5c:	e853 3f00 	ldrex	r3, [r3]
 8008b60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b64:	f023 0301 	bic.w	r3, r3, #1
 8008b68:	663b      	str	r3, [r7, #96]	; 0x60
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	3308      	adds	r3, #8
 8008b70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b72:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b7a:	e841 2300 	strex	r3, r2, [r1]
 8008b7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1e5      	bne.n	8008b52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2220      	movs	r2, #32
 8008b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e069      	b.n	8008c76 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 0304 	and.w	r3, r3, #4
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d051      	beq.n	8008c54 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bbe:	d149      	bne.n	8008c54 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	e853 3f00 	ldrex	r3, [r3]
 8008bd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	461a      	mov	r2, r3
 8008be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be8:	637b      	str	r3, [r7, #52]	; 0x34
 8008bea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bf0:	e841 2300 	strex	r3, r2, [r1]
 8008bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1e6      	bne.n	8008bca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	3308      	adds	r3, #8
 8008c02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	e853 3f00 	ldrex	r3, [r3]
 8008c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	f023 0301 	bic.w	r3, r3, #1
 8008c12:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3308      	adds	r3, #8
 8008c1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c1c:	623a      	str	r2, [r7, #32]
 8008c1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c20:	69f9      	ldr	r1, [r7, #28]
 8008c22:	6a3a      	ldr	r2, [r7, #32]
 8008c24:	e841 2300 	strex	r3, r2, [r1]
 8008c28:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1e5      	bne.n	8008bfc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2220      	movs	r2, #32
 8008c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2220      	movs	r2, #32
 8008c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2220      	movs	r2, #32
 8008c44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e010      	b.n	8008c76 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	69da      	ldr	r2, [r3, #28]
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	bf0c      	ite	eq
 8008c64:	2301      	moveq	r3, #1
 8008c66:	2300      	movne	r3, #0
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	79fb      	ldrb	r3, [r7, #7]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	f43f af46 	beq.w	8008b00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3770      	adds	r7, #112	; 0x70
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b085      	sub	sp, #20
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d101      	bne.n	8008c94 <HAL_UARTEx_DisableFifoMode+0x16>
 8008c90:	2302      	movs	r3, #2
 8008c92:	e027      	b.n	8008ce4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2224      	movs	r2, #36	; 0x24
 8008ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f022 0201 	bic.w	r2, r2, #1
 8008cba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008cc2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d101      	bne.n	8008d08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d04:	2302      	movs	r3, #2
 8008d06:	e02d      	b.n	8008d64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2224      	movs	r2, #36	; 0x24
 8008d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 0201 	bic.w	r2, r2, #1
 8008d2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f84f 	bl	8008de8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2220      	movs	r2, #32
 8008d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d101      	bne.n	8008d84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d80:	2302      	movs	r3, #2
 8008d82:	e02d      	b.n	8008de0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2224      	movs	r2, #36	; 0x24
 8008d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f022 0201 	bic.w	r2, r2, #1
 8008daa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f811 	bl	8008de8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d108      	bne.n	8008e0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e08:	e031      	b.n	8008e6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e0a:	2310      	movs	r3, #16
 8008e0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e0e:	2310      	movs	r3, #16
 8008e10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	0e5b      	lsrs	r3, r3, #25
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	f003 0307 	and.w	r3, r3, #7
 8008e20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	0f5b      	lsrs	r3, r3, #29
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	f003 0307 	and.w	r3, r3, #7
 8008e30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e32:	7bbb      	ldrb	r3, [r7, #14]
 8008e34:	7b3a      	ldrb	r2, [r7, #12]
 8008e36:	4911      	ldr	r1, [pc, #68]	; (8008e7c <UARTEx_SetNbDataToProcess+0x94>)
 8008e38:	5c8a      	ldrb	r2, [r1, r2]
 8008e3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e3e:	7b3a      	ldrb	r2, [r7, #12]
 8008e40:	490f      	ldr	r1, [pc, #60]	; (8008e80 <UARTEx_SetNbDataToProcess+0x98>)
 8008e42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e44:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	7b7a      	ldrb	r2, [r7, #13]
 8008e54:	4909      	ldr	r1, [pc, #36]	; (8008e7c <UARTEx_SetNbDataToProcess+0x94>)
 8008e56:	5c8a      	ldrb	r2, [r1, r2]
 8008e58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e5c:	7b7a      	ldrb	r2, [r7, #13]
 8008e5e:	4908      	ldr	r1, [pc, #32]	; (8008e80 <UARTEx_SetNbDataToProcess+0x98>)
 8008e60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e62:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e6e:	bf00      	nop
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	0802014c 	.word	0x0802014c
 8008e80:	08020154 	.word	0x08020154

08008e84 <MSGReceive>:
#import "gpio.h"
#import "MSGHandler.h"
#import "tim.h"

void MSGReceive(char *msg){
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]


	switch( msg[0]){
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	2ba1      	cmp	r3, #161	; 0xa1
 8008e92:	d002      	beq.n	8008e9a <MSGReceive+0x16>
 8008e94:	2ba3      	cmp	r3, #163	; 0xa3
 8008e96:	d00e      	beq.n	8008eb6 <MSGReceive+0x32>


	}


}
 8008e98:	e01d      	b.n	8008ed6 <MSGReceive+0x52>
		HAL_GPIO_WritePin(GPIOB,LD1_Pin,msg[1] && 0b01);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bf14      	ite	ne
 8008ea4:	2301      	movne	r3, #1
 8008ea6:	2300      	moveq	r3, #0
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	461a      	mov	r2, r3
 8008eac:	2101      	movs	r1, #1
 8008eae:	480c      	ldr	r0, [pc, #48]	; (8008ee0 <MSGReceive+0x5c>)
 8008eb0:	f7fb fa6c 	bl	800438c <HAL_GPIO_WritePin>
		break;
 8008eb4:	e00f      	b.n	8008ed6 <MSGReceive+0x52>
	uint16_t PWMVAL = (msg[1] << 8) | msg[2];
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	021b      	lsls	r3, r3, #8
 8008ebe:	b21a      	sxth	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	3302      	adds	r3, #2
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	b21b      	sxth	r3, r3
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	b21b      	sxth	r3, r3
 8008ecc:	81fb      	strh	r3, [r7, #14]
	TIM12->CCR1 = PWMVAL;
 8008ece:	4a05      	ldr	r2, [pc, #20]	; (8008ee4 <MSGReceive+0x60>)
 8008ed0:	89fb      	ldrh	r3, [r7, #14]
 8008ed2:	6353      	str	r3, [r2, #52]	; 0x34
	break;
 8008ed4:	bf00      	nop
}
 8008ed6:	bf00      	nop
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	58020400 	.word	0x58020400
 8008ee4:	40001800 	.word	0x40001800

08008ee8 <tcp_thread>:
char smsg[200];


/**** Send RESPONSE every time the client sends some data ******/
static void tcp_thread(void *arg)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af02      	add	r7, sp, #8
 8008eee:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart3,"server tcp_thread\r\n",20,100);
	err_t err, accept_err, recv_error;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	2010      	movs	r0, #16
 8008ef6:	f004 fe2f 	bl	800db58 <netconn_new_with_proto_and_callback>
 8008efa:	4603      	mov	r3, r0
 8008efc:	4a48      	ldr	r2, [pc, #288]	; (8009020 <tcp_thread+0x138>)
 8008efe:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 8008f00:	4b47      	ldr	r3, [pc, #284]	; (8009020 <tcp_thread+0x138>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f000 8086 	beq.w	8009016 <tcp_thread+0x12e>
	{
		/* Bind connection to the port number 7. */
		err = netconn_bind(conn, IP_ADDR_ANY, 10);
 8008f0a:	4b45      	ldr	r3, [pc, #276]	; (8009020 <tcp_thread+0x138>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	220a      	movs	r2, #10
 8008f10:	4944      	ldr	r1, [pc, #272]	; (8009024 <tcp_thread+0x13c>)
 8008f12:	4618      	mov	r0, r3
 8008f14:	f004 feda 	bl	800dccc <netconn_bind>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 8008f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d173      	bne.n	800900c <tcp_thread+0x124>
		{
			//HAL_UART_Transmit(&huart3,"server listening\r\n",20,100);
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8008f24:	4b3e      	ldr	r3, [pc, #248]	; (8009020 <tcp_thread+0x138>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	21ff      	movs	r1, #255	; 0xff
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f004 ff06 	bl	800dd3c <netconn_listen_with_backlog>

			while (1)
			{
				HAL_UART_Transmit(&huart3,"server ready\r\n",20,100);
 8008f30:	2364      	movs	r3, #100	; 0x64
 8008f32:	2214      	movs	r2, #20
 8008f34:	493c      	ldr	r1, [pc, #240]	; (8009028 <tcp_thread+0x140>)
 8008f36:	483d      	ldr	r0, [pc, #244]	; (800902c <tcp_thread+0x144>)
 8008f38:	f7fe feed 	bl	8007d16 <HAL_UART_Transmit>
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 8008f3c:	4b38      	ldr	r3, [pc, #224]	; (8009020 <tcp_thread+0x138>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	493b      	ldr	r1, [pc, #236]	; (8009030 <tcp_thread+0x148>)
 8008f42:	4618      	mov	r0, r3
 8008f44:	f004 ff26 	bl	800dd94 <netconn_accept>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73bb      	strb	r3, [r7, #14]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 8008f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1ed      	bne.n	8008f30 <tcp_thread+0x48>
				{
					HAL_UART_Transmit(&huart3,"server connected\r\n",20,100);
 8008f54:	2364      	movs	r3, #100	; 0x64
 8008f56:	2214      	movs	r2, #20
 8008f58:	4936      	ldr	r1, [pc, #216]	; (8009034 <tcp_thread+0x14c>)
 8008f5a:	4834      	ldr	r0, [pc, #208]	; (800902c <tcp_thread+0x144>)
 8008f5c:	f7fe fedb 	bl	8007d16 <HAL_UART_Transmit>
					/* receive the data from the client */
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8008f60:	e040      	b.n	8008fe4 <tcp_thread+0xfc>
					{

						/* Extrct the address and port in case they are required */
						addr = netbuf_fromaddr(buf);  // get the address of the client
 8008f62:	4b35      	ldr	r3, [pc, #212]	; (8009038 <tcp_thread+0x150>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3308      	adds	r3, #8
 8008f68:	4a34      	ldr	r2, [pc, #208]	; (800903c <tcp_thread+0x154>)
 8008f6a:	6013      	str	r3, [r2, #0]
						port = netbuf_fromport(buf);  // get the Port of the client
 8008f6c:	4b32      	ldr	r3, [pc, #200]	; (8009038 <tcp_thread+0x150>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	899a      	ldrh	r2, [r3, #12]
 8008f72:	4b33      	ldr	r3, [pc, #204]	; (8009040 <tcp_thread+0x158>)
 8008f74:	801a      	strh	r2, [r3, #0]

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{

							strncpy (msg, buf->p->payload, buf->p->len);   // get the message from the client
 8008f76:	4b30      	ldr	r3, [pc, #192]	; (8009038 <tcp_thread+0x150>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6859      	ldr	r1, [r3, #4]
 8008f7e:	4b2e      	ldr	r3, [pc, #184]	; (8009038 <tcp_thread+0x150>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	895b      	ldrh	r3, [r3, #10]
 8008f86:	461a      	mov	r2, r3
 8008f88:	482e      	ldr	r0, [pc, #184]	; (8009044 <tcp_thread+0x15c>)
 8008f8a:	f012 fd9e 	bl	801baca <strncpy>

							MSGReceive(msg);
 8008f8e:	482d      	ldr	r0, [pc, #180]	; (8009044 <tcp_thread+0x15c>)
 8008f90:	f7ff ff78 	bl	8008e84 <MSGReceive>


							// Or modify the message received, so that we can send it back to the client
							int len = sprintf (smsg, "\"%s\" was sent by PROJECT JAVELIN\n", msg);
 8008f94:	4a2b      	ldr	r2, [pc, #172]	; (8009044 <tcp_thread+0x15c>)
 8008f96:	492c      	ldr	r1, [pc, #176]	; (8009048 <tcp_thread+0x160>)
 8008f98:	482c      	ldr	r0, [pc, #176]	; (800904c <tcp_thread+0x164>)
 8008f9a:	f012 fd33 	bl	801ba04 <siprintf>
 8008f9e:	60b8      	str	r0, [r7, #8]
								HAL_UART_Transmit(&huart3,smsg,len,100);
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	2364      	movs	r3, #100	; 0x64
 8008fa6:	4929      	ldr	r1, [pc, #164]	; (800904c <tcp_thread+0x164>)
 8008fa8:	4820      	ldr	r0, [pc, #128]	; (800902c <tcp_thread+0x144>)
 8008faa:	f7fe feb4 	bl	8007d16 <HAL_UART_Transmit>
							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8008fae:	4b20      	ldr	r3, [pc, #128]	; (8009030 <tcp_thread+0x148>)
 8008fb0:	6818      	ldr	r0, [r3, #0]
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	2301      	movs	r3, #1
 8008fba:	4924      	ldr	r1, [pc, #144]	; (800904c <tcp_thread+0x164>)
 8008fbc:	f005 f96c 	bl	800e298 <netconn_write_partly>
							memset (msg, '\0', 100);  // clear the buffer
 8008fc0:	2264      	movs	r2, #100	; 0x64
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	481f      	ldr	r0, [pc, #124]	; (8009044 <tcp_thread+0x15c>)
 8008fc6:	f012 fbb0 	bl	801b72a <memset>
						}
						while (netbuf_next(buf) >0);
 8008fca:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <tcp_thread+0x150>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f006 fe82 	bl	800fcd8 <netbuf_next>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	dccd      	bgt.n	8008f76 <tcp_thread+0x8e>

						netbuf_delete(buf);
 8008fda:	4b17      	ldr	r3, [pc, #92]	; (8009038 <tcp_thread+0x150>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f006 fe5a 	bl	800fc98 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8008fe4:	4b12      	ldr	r3, [pc, #72]	; (8009030 <tcp_thread+0x148>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4913      	ldr	r1, [pc, #76]	; (8009038 <tcp_thread+0x150>)
 8008fea:	4618      	mov	r0, r3
 8008fec:	f005 f8da 	bl	800e1a4 <netconn_recv>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0b5      	beq.n	8008f62 <tcp_thread+0x7a>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 8008ff6:	4b0e      	ldr	r3, [pc, #56]	; (8009030 <tcp_thread+0x148>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f005 fa4e 	bl	800e49c <netconn_close>
					netconn_delete(newconn);
 8009000:	4b0b      	ldr	r3, [pc, #44]	; (8009030 <tcp_thread+0x148>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4618      	mov	r0, r3
 8009006:	f004 fe45 	bl	800dc94 <netconn_delete>
				HAL_UART_Transmit(&huart3,"server ready\r\n",20,100);
 800900a:	e791      	b.n	8008f30 <tcp_thread+0x48>
			}
		}
		else
		{
			//HAL_UART_Transmit(&huart3,"netconn failed\r\n",20,100);
			netconn_delete(conn);
 800900c:	4b04      	ldr	r3, [pc, #16]	; (8009020 <tcp_thread+0x138>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4618      	mov	r0, r3
 8009012:	f004 fe3f 	bl	800dc94 <netconn_delete>
		}
	}
	//HAL_UART_Transmit(&huart3,"nullconn\r\n",20,100);
}
 8009016:	bf00      	nop
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	24000394 	.word	0x24000394
 8009024:	0802027c 	.word	0x0802027c
 8009028:	0801caf0 	.word	0x0801caf0
 800902c:	24000300 	.word	0x24000300
 8009030:	24000398 	.word	0x24000398
 8009034:	0801cb00 	.word	0x0801cb00
 8009038:	2400039c 	.word	0x2400039c
 800903c:	240003a0 	.word	0x240003a0
 8009040:	240003a4 	.word	0x240003a4
 8009044:	240003a8 	.word	0x240003a8
 8009048:	0801cb14 	.word	0x0801cb14
 800904c:	2400040c 	.word	0x2400040c

08009050 <tcpserver_init>:


void tcpserver_init(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af02      	add	r7, sp, #8
	//HAL_UART_Transmit(&huart3,"server made\r\n",20,100);
  sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityHigh);
 8009056:	2328      	movs	r3, #40	; 0x28
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800905e:	2200      	movs	r2, #0
 8009060:	4903      	ldr	r1, [pc, #12]	; (8009070 <tcpserver_init+0x20>)
 8009062:	4804      	ldr	r0, [pc, #16]	; (8009074 <tcpserver_init+0x24>)
 8009064:	f012 f9ce 	bl	801b404 <sys_thread_new>
}
 8009068:	bf00      	nop
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	08008ee9 	.word	0x08008ee9
 8009074:	0801cb38 	.word	0x0801cb38

08009078 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800907e:	4b98      	ldr	r3, [pc, #608]	; (80092e0 <MX_LWIP_Init+0x268>)
 8009080:	22c0      	movs	r2, #192	; 0xc0
 8009082:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009084:	4b96      	ldr	r3, [pc, #600]	; (80092e0 <MX_LWIP_Init+0x268>)
 8009086:	22a8      	movs	r2, #168	; 0xa8
 8009088:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800908a:	4b95      	ldr	r3, [pc, #596]	; (80092e0 <MX_LWIP_Init+0x268>)
 800908c:	2200      	movs	r2, #0
 800908e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8009090:	4b93      	ldr	r3, [pc, #588]	; (80092e0 <MX_LWIP_Init+0x268>)
 8009092:	227b      	movs	r2, #123	; 0x7b
 8009094:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009096:	4b93      	ldr	r3, [pc, #588]	; (80092e4 <MX_LWIP_Init+0x26c>)
 8009098:	22ff      	movs	r2, #255	; 0xff
 800909a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800909c:	4b91      	ldr	r3, [pc, #580]	; (80092e4 <MX_LWIP_Init+0x26c>)
 800909e:	22ff      	movs	r2, #255	; 0xff
 80090a0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80090a2:	4b90      	ldr	r3, [pc, #576]	; (80092e4 <MX_LWIP_Init+0x26c>)
 80090a4:	22ff      	movs	r2, #255	; 0xff
 80090a6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80090a8:	4b8e      	ldr	r3, [pc, #568]	; (80092e4 <MX_LWIP_Init+0x26c>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80090ae:	4b8e      	ldr	r3, [pc, #568]	; (80092e8 <MX_LWIP_Init+0x270>)
 80090b0:	22c0      	movs	r2, #192	; 0xc0
 80090b2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80090b4:	4b8c      	ldr	r3, [pc, #560]	; (80092e8 <MX_LWIP_Init+0x270>)
 80090b6:	22a8      	movs	r2, #168	; 0xa8
 80090b8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80090ba:	4b8b      	ldr	r3, [pc, #556]	; (80092e8 <MX_LWIP_Init+0x270>)
 80090bc:	2200      	movs	r2, #0
 80090be:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80090c0:	4b89      	ldr	r3, [pc, #548]	; (80092e8 <MX_LWIP_Init+0x270>)
 80090c2:	2201      	movs	r2, #1
 80090c4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80090c6:	2100      	movs	r1, #0
 80090c8:	2000      	movs	r0, #0
 80090ca:	f006 ffa3 	bl	8010014 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80090ce:	4b84      	ldr	r3, [pc, #528]	; (80092e0 <MX_LWIP_Init+0x268>)
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	061a      	lsls	r2, r3, #24
 80090d4:	4b82      	ldr	r3, [pc, #520]	; (80092e0 <MX_LWIP_Init+0x268>)
 80090d6:	785b      	ldrb	r3, [r3, #1]
 80090d8:	041b      	lsls	r3, r3, #16
 80090da:	431a      	orrs	r2, r3
 80090dc:	4b80      	ldr	r3, [pc, #512]	; (80092e0 <MX_LWIP_Init+0x268>)
 80090de:	789b      	ldrb	r3, [r3, #2]
 80090e0:	021b      	lsls	r3, r3, #8
 80090e2:	4313      	orrs	r3, r2
 80090e4:	4a7e      	ldr	r2, [pc, #504]	; (80092e0 <MX_LWIP_Init+0x268>)
 80090e6:	78d2      	ldrb	r2, [r2, #3]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	061a      	lsls	r2, r3, #24
 80090ec:	4b7c      	ldr	r3, [pc, #496]	; (80092e0 <MX_LWIP_Init+0x268>)
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	0619      	lsls	r1, r3, #24
 80090f2:	4b7b      	ldr	r3, [pc, #492]	; (80092e0 <MX_LWIP_Init+0x268>)
 80090f4:	785b      	ldrb	r3, [r3, #1]
 80090f6:	041b      	lsls	r3, r3, #16
 80090f8:	4319      	orrs	r1, r3
 80090fa:	4b79      	ldr	r3, [pc, #484]	; (80092e0 <MX_LWIP_Init+0x268>)
 80090fc:	789b      	ldrb	r3, [r3, #2]
 80090fe:	021b      	lsls	r3, r3, #8
 8009100:	430b      	orrs	r3, r1
 8009102:	4977      	ldr	r1, [pc, #476]	; (80092e0 <MX_LWIP_Init+0x268>)
 8009104:	78c9      	ldrb	r1, [r1, #3]
 8009106:	430b      	orrs	r3, r1
 8009108:	021b      	lsls	r3, r3, #8
 800910a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800910e:	431a      	orrs	r2, r3
 8009110:	4b73      	ldr	r3, [pc, #460]	; (80092e0 <MX_LWIP_Init+0x268>)
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	0619      	lsls	r1, r3, #24
 8009116:	4b72      	ldr	r3, [pc, #456]	; (80092e0 <MX_LWIP_Init+0x268>)
 8009118:	785b      	ldrb	r3, [r3, #1]
 800911a:	041b      	lsls	r3, r3, #16
 800911c:	4319      	orrs	r1, r3
 800911e:	4b70      	ldr	r3, [pc, #448]	; (80092e0 <MX_LWIP_Init+0x268>)
 8009120:	789b      	ldrb	r3, [r3, #2]
 8009122:	021b      	lsls	r3, r3, #8
 8009124:	430b      	orrs	r3, r1
 8009126:	496e      	ldr	r1, [pc, #440]	; (80092e0 <MX_LWIP_Init+0x268>)
 8009128:	78c9      	ldrb	r1, [r1, #3]
 800912a:	430b      	orrs	r3, r1
 800912c:	0a1b      	lsrs	r3, r3, #8
 800912e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009132:	431a      	orrs	r2, r3
 8009134:	4b6a      	ldr	r3, [pc, #424]	; (80092e0 <MX_LWIP_Init+0x268>)
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	0619      	lsls	r1, r3, #24
 800913a:	4b69      	ldr	r3, [pc, #420]	; (80092e0 <MX_LWIP_Init+0x268>)
 800913c:	785b      	ldrb	r3, [r3, #1]
 800913e:	041b      	lsls	r3, r3, #16
 8009140:	4319      	orrs	r1, r3
 8009142:	4b67      	ldr	r3, [pc, #412]	; (80092e0 <MX_LWIP_Init+0x268>)
 8009144:	789b      	ldrb	r3, [r3, #2]
 8009146:	021b      	lsls	r3, r3, #8
 8009148:	430b      	orrs	r3, r1
 800914a:	4965      	ldr	r1, [pc, #404]	; (80092e0 <MX_LWIP_Init+0x268>)
 800914c:	78c9      	ldrb	r1, [r1, #3]
 800914e:	430b      	orrs	r3, r1
 8009150:	0e1b      	lsrs	r3, r3, #24
 8009152:	4313      	orrs	r3, r2
 8009154:	4a65      	ldr	r2, [pc, #404]	; (80092ec <MX_LWIP_Init+0x274>)
 8009156:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009158:	4b62      	ldr	r3, [pc, #392]	; (80092e4 <MX_LWIP_Init+0x26c>)
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	061a      	lsls	r2, r3, #24
 800915e:	4b61      	ldr	r3, [pc, #388]	; (80092e4 <MX_LWIP_Init+0x26c>)
 8009160:	785b      	ldrb	r3, [r3, #1]
 8009162:	041b      	lsls	r3, r3, #16
 8009164:	431a      	orrs	r2, r3
 8009166:	4b5f      	ldr	r3, [pc, #380]	; (80092e4 <MX_LWIP_Init+0x26c>)
 8009168:	789b      	ldrb	r3, [r3, #2]
 800916a:	021b      	lsls	r3, r3, #8
 800916c:	4313      	orrs	r3, r2
 800916e:	4a5d      	ldr	r2, [pc, #372]	; (80092e4 <MX_LWIP_Init+0x26c>)
 8009170:	78d2      	ldrb	r2, [r2, #3]
 8009172:	4313      	orrs	r3, r2
 8009174:	061a      	lsls	r2, r3, #24
 8009176:	4b5b      	ldr	r3, [pc, #364]	; (80092e4 <MX_LWIP_Init+0x26c>)
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	0619      	lsls	r1, r3, #24
 800917c:	4b59      	ldr	r3, [pc, #356]	; (80092e4 <MX_LWIP_Init+0x26c>)
 800917e:	785b      	ldrb	r3, [r3, #1]
 8009180:	041b      	lsls	r3, r3, #16
 8009182:	4319      	orrs	r1, r3
 8009184:	4b57      	ldr	r3, [pc, #348]	; (80092e4 <MX_LWIP_Init+0x26c>)
 8009186:	789b      	ldrb	r3, [r3, #2]
 8009188:	021b      	lsls	r3, r3, #8
 800918a:	430b      	orrs	r3, r1
 800918c:	4955      	ldr	r1, [pc, #340]	; (80092e4 <MX_LWIP_Init+0x26c>)
 800918e:	78c9      	ldrb	r1, [r1, #3]
 8009190:	430b      	orrs	r3, r1
 8009192:	021b      	lsls	r3, r3, #8
 8009194:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009198:	431a      	orrs	r2, r3
 800919a:	4b52      	ldr	r3, [pc, #328]	; (80092e4 <MX_LWIP_Init+0x26c>)
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	0619      	lsls	r1, r3, #24
 80091a0:	4b50      	ldr	r3, [pc, #320]	; (80092e4 <MX_LWIP_Init+0x26c>)
 80091a2:	785b      	ldrb	r3, [r3, #1]
 80091a4:	041b      	lsls	r3, r3, #16
 80091a6:	4319      	orrs	r1, r3
 80091a8:	4b4e      	ldr	r3, [pc, #312]	; (80092e4 <MX_LWIP_Init+0x26c>)
 80091aa:	789b      	ldrb	r3, [r3, #2]
 80091ac:	021b      	lsls	r3, r3, #8
 80091ae:	430b      	orrs	r3, r1
 80091b0:	494c      	ldr	r1, [pc, #304]	; (80092e4 <MX_LWIP_Init+0x26c>)
 80091b2:	78c9      	ldrb	r1, [r1, #3]
 80091b4:	430b      	orrs	r3, r1
 80091b6:	0a1b      	lsrs	r3, r3, #8
 80091b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80091bc:	431a      	orrs	r2, r3
 80091be:	4b49      	ldr	r3, [pc, #292]	; (80092e4 <MX_LWIP_Init+0x26c>)
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	0619      	lsls	r1, r3, #24
 80091c4:	4b47      	ldr	r3, [pc, #284]	; (80092e4 <MX_LWIP_Init+0x26c>)
 80091c6:	785b      	ldrb	r3, [r3, #1]
 80091c8:	041b      	lsls	r3, r3, #16
 80091ca:	4319      	orrs	r1, r3
 80091cc:	4b45      	ldr	r3, [pc, #276]	; (80092e4 <MX_LWIP_Init+0x26c>)
 80091ce:	789b      	ldrb	r3, [r3, #2]
 80091d0:	021b      	lsls	r3, r3, #8
 80091d2:	430b      	orrs	r3, r1
 80091d4:	4943      	ldr	r1, [pc, #268]	; (80092e4 <MX_LWIP_Init+0x26c>)
 80091d6:	78c9      	ldrb	r1, [r1, #3]
 80091d8:	430b      	orrs	r3, r1
 80091da:	0e1b      	lsrs	r3, r3, #24
 80091dc:	4313      	orrs	r3, r2
 80091de:	4a44      	ldr	r2, [pc, #272]	; (80092f0 <MX_LWIP_Init+0x278>)
 80091e0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80091e2:	4b41      	ldr	r3, [pc, #260]	; (80092e8 <MX_LWIP_Init+0x270>)
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	061a      	lsls	r2, r3, #24
 80091e8:	4b3f      	ldr	r3, [pc, #252]	; (80092e8 <MX_LWIP_Init+0x270>)
 80091ea:	785b      	ldrb	r3, [r3, #1]
 80091ec:	041b      	lsls	r3, r3, #16
 80091ee:	431a      	orrs	r2, r3
 80091f0:	4b3d      	ldr	r3, [pc, #244]	; (80092e8 <MX_LWIP_Init+0x270>)
 80091f2:	789b      	ldrb	r3, [r3, #2]
 80091f4:	021b      	lsls	r3, r3, #8
 80091f6:	4313      	orrs	r3, r2
 80091f8:	4a3b      	ldr	r2, [pc, #236]	; (80092e8 <MX_LWIP_Init+0x270>)
 80091fa:	78d2      	ldrb	r2, [r2, #3]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	061a      	lsls	r2, r3, #24
 8009200:	4b39      	ldr	r3, [pc, #228]	; (80092e8 <MX_LWIP_Init+0x270>)
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	0619      	lsls	r1, r3, #24
 8009206:	4b38      	ldr	r3, [pc, #224]	; (80092e8 <MX_LWIP_Init+0x270>)
 8009208:	785b      	ldrb	r3, [r3, #1]
 800920a:	041b      	lsls	r3, r3, #16
 800920c:	4319      	orrs	r1, r3
 800920e:	4b36      	ldr	r3, [pc, #216]	; (80092e8 <MX_LWIP_Init+0x270>)
 8009210:	789b      	ldrb	r3, [r3, #2]
 8009212:	021b      	lsls	r3, r3, #8
 8009214:	430b      	orrs	r3, r1
 8009216:	4934      	ldr	r1, [pc, #208]	; (80092e8 <MX_LWIP_Init+0x270>)
 8009218:	78c9      	ldrb	r1, [r1, #3]
 800921a:	430b      	orrs	r3, r1
 800921c:	021b      	lsls	r3, r3, #8
 800921e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009222:	431a      	orrs	r2, r3
 8009224:	4b30      	ldr	r3, [pc, #192]	; (80092e8 <MX_LWIP_Init+0x270>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	0619      	lsls	r1, r3, #24
 800922a:	4b2f      	ldr	r3, [pc, #188]	; (80092e8 <MX_LWIP_Init+0x270>)
 800922c:	785b      	ldrb	r3, [r3, #1]
 800922e:	041b      	lsls	r3, r3, #16
 8009230:	4319      	orrs	r1, r3
 8009232:	4b2d      	ldr	r3, [pc, #180]	; (80092e8 <MX_LWIP_Init+0x270>)
 8009234:	789b      	ldrb	r3, [r3, #2]
 8009236:	021b      	lsls	r3, r3, #8
 8009238:	430b      	orrs	r3, r1
 800923a:	492b      	ldr	r1, [pc, #172]	; (80092e8 <MX_LWIP_Init+0x270>)
 800923c:	78c9      	ldrb	r1, [r1, #3]
 800923e:	430b      	orrs	r3, r1
 8009240:	0a1b      	lsrs	r3, r3, #8
 8009242:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009246:	431a      	orrs	r2, r3
 8009248:	4b27      	ldr	r3, [pc, #156]	; (80092e8 <MX_LWIP_Init+0x270>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	0619      	lsls	r1, r3, #24
 800924e:	4b26      	ldr	r3, [pc, #152]	; (80092e8 <MX_LWIP_Init+0x270>)
 8009250:	785b      	ldrb	r3, [r3, #1]
 8009252:	041b      	lsls	r3, r3, #16
 8009254:	4319      	orrs	r1, r3
 8009256:	4b24      	ldr	r3, [pc, #144]	; (80092e8 <MX_LWIP_Init+0x270>)
 8009258:	789b      	ldrb	r3, [r3, #2]
 800925a:	021b      	lsls	r3, r3, #8
 800925c:	430b      	orrs	r3, r1
 800925e:	4922      	ldr	r1, [pc, #136]	; (80092e8 <MX_LWIP_Init+0x270>)
 8009260:	78c9      	ldrb	r1, [r1, #3]
 8009262:	430b      	orrs	r3, r1
 8009264:	0e1b      	lsrs	r3, r3, #24
 8009266:	4313      	orrs	r3, r2
 8009268:	4a22      	ldr	r2, [pc, #136]	; (80092f4 <MX_LWIP_Init+0x27c>)
 800926a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800926c:	4b22      	ldr	r3, [pc, #136]	; (80092f8 <MX_LWIP_Init+0x280>)
 800926e:	9302      	str	r3, [sp, #8]
 8009270:	4b22      	ldr	r3, [pc, #136]	; (80092fc <MX_LWIP_Init+0x284>)
 8009272:	9301      	str	r3, [sp, #4]
 8009274:	2300      	movs	r3, #0
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	4b1e      	ldr	r3, [pc, #120]	; (80092f4 <MX_LWIP_Init+0x27c>)
 800927a:	4a1d      	ldr	r2, [pc, #116]	; (80092f0 <MX_LWIP_Init+0x278>)
 800927c:	491b      	ldr	r1, [pc, #108]	; (80092ec <MX_LWIP_Init+0x274>)
 800927e:	4820      	ldr	r0, [pc, #128]	; (8009300 <MX_LWIP_Init+0x288>)
 8009280:	f007 fe16 	bl	8010eb0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009284:	481e      	ldr	r0, [pc, #120]	; (8009300 <MX_LWIP_Init+0x288>)
 8009286:	f007 ffc5 	bl	8011214 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800928a:	4b1d      	ldr	r3, [pc, #116]	; (8009300 <MX_LWIP_Init+0x288>)
 800928c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009290:	089b      	lsrs	r3, r3, #2
 8009292:	f003 0301 	and.w	r3, r3, #1
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800929c:	4818      	ldr	r0, [pc, #96]	; (8009300 <MX_LWIP_Init+0x288>)
 800929e:	f007 ffc9 	bl	8011234 <netif_set_up>
 80092a2:	e002      	b.n	80092aa <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80092a4:	4816      	ldr	r0, [pc, #88]	; (8009300 <MX_LWIP_Init+0x288>)
 80092a6:	f008 f831 	bl	801130c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80092aa:	4916      	ldr	r1, [pc, #88]	; (8009304 <MX_LWIP_Init+0x28c>)
 80092ac:	4814      	ldr	r0, [pc, #80]	; (8009300 <MX_LWIP_Init+0x288>)
 80092ae:	f008 f8c3 	bl	8011438 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80092b2:	2224      	movs	r2, #36	; 0x24
 80092b4:	2100      	movs	r1, #0
 80092b6:	4814      	ldr	r0, [pc, #80]	; (8009308 <MX_LWIP_Init+0x290>)
 80092b8:	f012 fa37 	bl	801b72a <memset>
  attributes.name = "EthLink";
 80092bc:	4b12      	ldr	r3, [pc, #72]	; (8009308 <MX_LWIP_Init+0x290>)
 80092be:	4a13      	ldr	r2, [pc, #76]	; (800930c <MX_LWIP_Init+0x294>)
 80092c0:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80092c2:	4b11      	ldr	r3, [pc, #68]	; (8009308 <MX_LWIP_Init+0x290>)
 80092c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80092c8:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80092ca:	4b0f      	ldr	r3, [pc, #60]	; (8009308 <MX_LWIP_Init+0x290>)
 80092cc:	2210      	movs	r2, #16
 80092ce:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80092d0:	4a0d      	ldr	r2, [pc, #52]	; (8009308 <MX_LWIP_Init+0x290>)
 80092d2:	490b      	ldr	r1, [pc, #44]	; (8009300 <MX_LWIP_Init+0x288>)
 80092d4:	480e      	ldr	r0, [pc, #56]	; (8009310 <MX_LWIP_Init+0x298>)
 80092d6:	f000 fdc4 	bl	8009e62 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80092da:	bf00      	nop
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	24000514 	.word	0x24000514
 80092e4:	24000518 	.word	0x24000518
 80092e8:	2400051c 	.word	0x2400051c
 80092ec:	24000508 	.word	0x24000508
 80092f0:	2400050c 	.word	0x2400050c
 80092f4:	24000510 	.word	0x24000510
 80092f8:	0800ff25 	.word	0x0800ff25
 80092fc:	080097b9 	.word	0x080097b9
 8009300:	240004d4 	.word	0x240004d4
 8009304:	08009315 	.word	0x08009315
 8009308:	24000520 	.word	0x24000520
 800930c:	0801cb44 	.word	0x0801cb44
 8009310:	08009aad 	.word	0x08009aad

08009314 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009330:	4b04      	ldr	r3, [pc, #16]	; (8009344 <HAL_ETH_RxCpltCallback+0x1c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4618      	mov	r0, r3
 8009336:	f001 f82b 	bl	800a390 <osSemaphoreRelease>
}
 800933a:	bf00      	nop
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	24004ed0 	.word	0x24004ed0

08009348 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8009350:	4b04      	ldr	r3, [pc, #16]	; (8009364 <HAL_ETH_TxCpltCallback+0x1c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4618      	mov	r0, r3
 8009356:	f001 f81b 	bl	800a390 <osSemaphoreRelease>
}
 800935a:	bf00      	nop
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	24004ed4 	.word	0x24004ed4

08009368 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7f9 fd75 	bl	8002e60 <HAL_ETH_GetDMAError>
 8009376:	4603      	mov	r3, r0
 8009378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800937c:	2b80      	cmp	r3, #128	; 0x80
 800937e:	d104      	bne.n	800938a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8009380:	4b04      	ldr	r3, [pc, #16]	; (8009394 <HAL_ETH_ErrorCallback+0x2c>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4618      	mov	r0, r3
 8009386:	f001 f803 	bl	800a390 <osSemaphoreRelease>
  }
}
 800938a:	bf00      	nop
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	24004ed0 	.word	0x24004ed0

08009398 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b0aa      	sub	sp, #168	; 0xa8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80093a6:	2300      	movs	r3, #0
 80093a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 80093b2:	f107 0310 	add.w	r3, r7, #16
 80093b6:	2264      	movs	r2, #100	; 0x64
 80093b8:	2100      	movs	r1, #0
 80093ba:	4618      	mov	r0, r3
 80093bc:	f012 f9b5 	bl	801b72a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80093c0:	4b85      	ldr	r3, [pc, #532]	; (80095d8 <low_level_init+0x240>)
 80093c2:	4a86      	ldr	r2, [pc, #536]	; (80095dc <low_level_init+0x244>)
 80093c4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80093c6:	2300      	movs	r3, #0
 80093c8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80093ca:	2380      	movs	r3, #128	; 0x80
 80093cc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80093ce:	23e1      	movs	r3, #225	; 0xe1
 80093d0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80093d2:	2300      	movs	r3, #0
 80093d4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80093d6:	2300      	movs	r3, #0
 80093d8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80093da:	2300      	movs	r3, #0
 80093dc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80093de:	4a7e      	ldr	r2, [pc, #504]	; (80095d8 <low_level_init+0x240>)
 80093e0:	f107 0308 	add.w	r3, r7, #8
 80093e4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80093e6:	4b7c      	ldr	r3, [pc, #496]	; (80095d8 <low_level_init+0x240>)
 80093e8:	2201      	movs	r2, #1
 80093ea:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80093ec:	4b7a      	ldr	r3, [pc, #488]	; (80095d8 <low_level_init+0x240>)
 80093ee:	4a7c      	ldr	r2, [pc, #496]	; (80095e0 <low_level_init+0x248>)
 80093f0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80093f2:	4b79      	ldr	r3, [pc, #484]	; (80095d8 <low_level_init+0x240>)
 80093f4:	4a7b      	ldr	r2, [pc, #492]	; (80095e4 <low_level_init+0x24c>)
 80093f6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80093f8:	4b77      	ldr	r3, [pc, #476]	; (80095d8 <low_level_init+0x240>)
 80093fa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80093fe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009400:	4875      	ldr	r0, [pc, #468]	; (80095d8 <low_level_init+0x240>)
 8009402:	f7f8 fceb 	bl	8001ddc <HAL_ETH_Init>
 8009406:	4603      	mov	r3, r0
 8009408:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800940c:	2238      	movs	r2, #56	; 0x38
 800940e:	2100      	movs	r1, #0
 8009410:	4875      	ldr	r0, [pc, #468]	; (80095e8 <low_level_init+0x250>)
 8009412:	f012 f98a 	bl	801b72a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009416:	4b74      	ldr	r3, [pc, #464]	; (80095e8 <low_level_init+0x250>)
 8009418:	2221      	movs	r2, #33	; 0x21
 800941a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800941c:	4b72      	ldr	r3, [pc, #456]	; (80095e8 <low_level_init+0x250>)
 800941e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009422:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009424:	4b70      	ldr	r3, [pc, #448]	; (80095e8 <low_level_init+0x250>)
 8009426:	2200      	movs	r2, #0
 8009428:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800942a:	4870      	ldr	r0, [pc, #448]	; (80095ec <low_level_init+0x254>)
 800942c:	f007 fbfa 	bl	8010c24 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2206      	movs	r2, #6
 8009434:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009438:	4b67      	ldr	r3, [pc, #412]	; (80095d8 <low_level_init+0x240>)
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	781a      	ldrb	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009444:	4b64      	ldr	r3, [pc, #400]	; (80095d8 <low_level_init+0x240>)
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	785a      	ldrb	r2, [r3, #1]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009450:	4b61      	ldr	r3, [pc, #388]	; (80095d8 <low_level_init+0x240>)
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	789a      	ldrb	r2, [r3, #2]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800945c:	4b5e      	ldr	r3, [pc, #376]	; (80095d8 <low_level_init+0x240>)
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	78da      	ldrb	r2, [r3, #3]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009468:	4b5b      	ldr	r3, [pc, #364]	; (80095d8 <low_level_init+0x240>)
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	791a      	ldrb	r2, [r3, #4]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009474:	4b58      	ldr	r3, [pc, #352]	; (80095d8 <low_level_init+0x240>)
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	795a      	ldrb	r2, [r3, #5]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009486:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800948e:	f043 030a 	orr.w	r3, r3, #10
 8009492:	b2da      	uxtb	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800949a:	2200      	movs	r2, #0
 800949c:	2101      	movs	r1, #1
 800949e:	2001      	movs	r0, #1
 80094a0:	f000 fe9a 	bl	800a1d8 <osSemaphoreNew>
 80094a4:	4603      	mov	r3, r0
 80094a6:	4a52      	ldr	r2, [pc, #328]	; (80095f0 <low_level_init+0x258>)
 80094a8:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80094aa:	2200      	movs	r2, #0
 80094ac:	2101      	movs	r1, #1
 80094ae:	2001      	movs	r0, #1
 80094b0:	f000 fe92 	bl	800a1d8 <osSemaphoreNew>
 80094b4:	4603      	mov	r3, r0
 80094b6:	4a4f      	ldr	r2, [pc, #316]	; (80095f4 <low_level_init+0x25c>)
 80094b8:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80094ba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80094be:	2224      	movs	r2, #36	; 0x24
 80094c0:	2100      	movs	r1, #0
 80094c2:	4618      	mov	r0, r3
 80094c4:	f012 f931 	bl	801b72a <memset>
  attributes.name = "EthIf";
 80094c8:	4b4b      	ldr	r3, [pc, #300]	; (80095f8 <low_level_init+0x260>)
 80094ca:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80094cc:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80094d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 80094d4:	2330      	movs	r3, #48	; 0x30
 80094d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 80094da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80094de:	461a      	mov	r2, r3
 80094e0:	6879      	ldr	r1, [r7, #4]
 80094e2:	4846      	ldr	r0, [pc, #280]	; (80095fc <low_level_init+0x264>)
 80094e4:	f000 fcbd 	bl	8009e62 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80094e8:	4945      	ldr	r1, [pc, #276]	; (8009600 <low_level_init+0x268>)
 80094ea:	4846      	ldr	r0, [pc, #280]	; (8009604 <low_level_init+0x26c>)
 80094ec:	f7f8 f93d 	bl	800176a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80094f0:	4844      	ldr	r0, [pc, #272]	; (8009604 <low_level_init+0x26c>)
 80094f2:	f7f8 f96c 	bl	80017ce <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80094f6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d165      	bne.n	80095ca <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80094fe:	4841      	ldr	r0, [pc, #260]	; (8009604 <low_level_init+0x26c>)
 8009500:	f7f8 fa0d 	bl	800191e <LAN8742_GetLinkState>
 8009504:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8009508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800950c:	2b01      	cmp	r3, #1
 800950e:	dc06      	bgt.n	800951e <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f007 ff61 	bl	80113d8 <netif_set_link_down>
      netif_set_down(netif);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f007 fef8 	bl	801130c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800951c:	e057      	b.n	80095ce <low_level_init+0x236>
      switch (PHYLinkState)
 800951e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009522:	3b02      	subs	r3, #2
 8009524:	2b03      	cmp	r3, #3
 8009526:	d82b      	bhi.n	8009580 <low_level_init+0x1e8>
 8009528:	a201      	add	r2, pc, #4	; (adr r2, 8009530 <low_level_init+0x198>)
 800952a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952e:	bf00      	nop
 8009530:	08009541 	.word	0x08009541
 8009534:	08009553 	.word	0x08009553
 8009538:	08009563 	.word	0x08009563
 800953c:	08009573 	.word	0x08009573
        duplex = ETH_FULLDUPLEX_MODE;
 8009540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009544:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8009548:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800954c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8009550:	e01f      	b.n	8009592 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8009552:	2300      	movs	r3, #0
 8009554:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8009558:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800955c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8009560:	e017      	b.n	8009592 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8009562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009566:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800956a:	2300      	movs	r3, #0
 800956c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8009570:	e00f      	b.n	8009592 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8009572:	2300      	movs	r3, #0
 8009574:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8009578:	2300      	movs	r3, #0
 800957a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800957e:	e008      	b.n	8009592 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8009580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009584:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8009588:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800958c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8009590:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009592:	f107 0310 	add.w	r3, r7, #16
 8009596:	4619      	mov	r1, r3
 8009598:	480f      	ldr	r0, [pc, #60]	; (80095d8 <low_level_init+0x240>)
 800959a:	f7f9 fa1b 	bl	80029d4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800959e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80095a2:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 80095a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80095a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80095aa:	f107 0310 	add.w	r3, r7, #16
 80095ae:	4619      	mov	r1, r3
 80095b0:	4809      	ldr	r0, [pc, #36]	; (80095d8 <low_level_init+0x240>)
 80095b2:	f7f9 fbe3 	bl	8002d7c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80095b6:	4808      	ldr	r0, [pc, #32]	; (80095d8 <low_level_init+0x240>)
 80095b8:	f7f8 fd58 	bl	800206c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f007 fe39 	bl	8011234 <netif_set_up>
    netif_set_link_up(netif);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f007 fed4 	bl	8011370 <netif_set_link_up>
}
 80095c8:	e001      	b.n	80095ce <low_level_init+0x236>
    Error_Handler();
 80095ca:	f7f7 fcef 	bl	8000fac <Error_Handler>
}
 80095ce:	bf00      	nop
 80095d0:	37a8      	adds	r7, #168	; 0xa8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	24004ed8 	.word	0x24004ed8
 80095dc:	40028000 	.word	0x40028000
 80095e0:	30040060 	.word	0x30040060
 80095e4:	30040000 	.word	0x30040000
 80095e8:	24004f88 	.word	0x24004f88
 80095ec:	0802015c 	.word	0x0802015c
 80095f0:	24004ed0 	.word	0x24004ed0
 80095f4:	24004ed4 	.word	0x24004ed4
 80095f8:	0801cb4c 	.word	0x0801cb4c
 80095fc:	08009765 	.word	0x08009765
 8009600:	24000010 	.word	0x24000010
 8009604:	24004fc0 	.word	0x24004fc0

08009608 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b092      	sub	sp, #72	; 0x48
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009612:	2300      	movs	r3, #0
 8009614:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8009616:	2300      	movs	r3, #0
 8009618:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009620:	f107 030c 	add.w	r3, r7, #12
 8009624:	2230      	movs	r2, #48	; 0x30
 8009626:	2100      	movs	r1, #0
 8009628:	4618      	mov	r0, r3
 800962a:	f012 f87e 	bl	801b72a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800962e:	f107 030c 	add.w	r3, r7, #12
 8009632:	2230      	movs	r2, #48	; 0x30
 8009634:	2100      	movs	r1, #0
 8009636:	4618      	mov	r0, r3
 8009638:	f012 f877 	bl	801b72a <memset>

  for(q = p; q != NULL; q = q->next)
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	643b      	str	r3, [r7, #64]	; 0x40
 8009640:	e045      	b.n	80096ce <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009644:	2b03      	cmp	r3, #3
 8009646:	d902      	bls.n	800964e <low_level_output+0x46>
      return ERR_IF;
 8009648:	f06f 030b 	mvn.w	r3, #11
 800964c:	e065      	b.n	800971a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800964e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009650:	6859      	ldr	r1, [r3, #4]
 8009652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009654:	4613      	mov	r3, r2
 8009656:	005b      	lsls	r3, r3, #1
 8009658:	4413      	add	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	3348      	adds	r3, #72	; 0x48
 800965e:	443b      	add	r3, r7
 8009660:	3b3c      	subs	r3, #60	; 0x3c
 8009662:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009666:	895b      	ldrh	r3, [r3, #10]
 8009668:	4619      	mov	r1, r3
 800966a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800966c:	4613      	mov	r3, r2
 800966e:	005b      	lsls	r3, r3, #1
 8009670:	4413      	add	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	3348      	adds	r3, #72	; 0x48
 8009676:	443b      	add	r3, r7
 8009678:	3b38      	subs	r3, #56	; 0x38
 800967a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800967c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800967e:	2b00      	cmp	r3, #0
 8009680:	d011      	beq.n	80096a6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009684:	1e5a      	subs	r2, r3, #1
 8009686:	f107 000c 	add.w	r0, r7, #12
 800968a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800968c:	460b      	mov	r3, r1
 800968e:	005b      	lsls	r3, r3, #1
 8009690:	440b      	add	r3, r1
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	18c1      	adds	r1, r0, r3
 8009696:	4613      	mov	r3, r2
 8009698:	005b      	lsls	r3, r3, #1
 800969a:	4413      	add	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	3348      	adds	r3, #72	; 0x48
 80096a0:	443b      	add	r3, r7
 80096a2:	3b34      	subs	r3, #52	; 0x34
 80096a4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80096a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d109      	bne.n	80096c2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80096ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096b0:	4613      	mov	r3, r2
 80096b2:	005b      	lsls	r3, r3, #1
 80096b4:	4413      	add	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	3348      	adds	r3, #72	; 0x48
 80096ba:	443b      	add	r3, r7
 80096bc:	3b34      	subs	r3, #52	; 0x34
 80096be:	2200      	movs	r2, #0
 80096c0:	601a      	str	r2, [r3, #0]
    }

    i++;
 80096c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096c4:	3301      	adds	r3, #1
 80096c6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80096c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	643b      	str	r3, [r7, #64]	; 0x40
 80096ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1b6      	bne.n	8009642 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	891b      	ldrh	r3, [r3, #8]
 80096d8:	461a      	mov	r2, r3
 80096da:	4b12      	ldr	r3, [pc, #72]	; (8009724 <low_level_output+0x11c>)
 80096dc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80096de:	4a11      	ldr	r2, [pc, #68]	; (8009724 <low_level_output+0x11c>)
 80096e0:	f107 030c 	add.w	r3, r7, #12
 80096e4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80096e6:	4a0f      	ldr	r2, [pc, #60]	; (8009724 <low_level_output+0x11c>)
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80096ec:	6838      	ldr	r0, [r7, #0]
 80096ee:	f008 fafb 	bl	8011ce8 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80096f2:	490c      	ldr	r1, [pc, #48]	; (8009724 <low_level_output+0x11c>)
 80096f4:	480c      	ldr	r0, [pc, #48]	; (8009728 <low_level_output+0x120>)
 80096f6:	f7f8 fdbd 	bl	8002274 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80096fa:	bf00      	nop
 80096fc:	4b0b      	ldr	r3, [pc, #44]	; (800972c <low_level_output+0x124>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f04f 31ff 	mov.w	r1, #4294967295
 8009704:	4618      	mov	r0, r3
 8009706:	f000 fdf1 	bl	800a2ec <osSemaphoreAcquire>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1f5      	bne.n	80096fc <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8009710:	4805      	ldr	r0, [pc, #20]	; (8009728 <low_level_output+0x120>)
 8009712:	f7f8 ff2e 	bl	8002572 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8009716:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800971a:	4618      	mov	r0, r3
 800971c:	3748      	adds	r7, #72	; 0x48
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	24004f88 	.word	0x24004f88
 8009728:	24004ed8 	.word	0x24004ed8
 800972c:	24004ed4 	.word	0x24004ed4

08009730 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009738:	2300      	movs	r3, #0
 800973a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800973c:	4b07      	ldr	r3, [pc, #28]	; (800975c <low_level_input+0x2c>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d105      	bne.n	8009750 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009744:	f107 030c 	add.w	r3, r7, #12
 8009748:	4619      	mov	r1, r3
 800974a:	4805      	ldr	r0, [pc, #20]	; (8009760 <low_level_input+0x30>)
 800974c:	f7f8 fde3 	bl	8002316 <HAL_ETH_ReadData>
  }

  return p;
 8009750:	68fb      	ldr	r3, [r7, #12]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	24004ecc 	.word	0x24004ecc
 8009760:	24004ed8 	.word	0x24004ed8

08009764 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800976c:	2300      	movs	r3, #0
 800976e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009774:	4b0f      	ldr	r3, [pc, #60]	; (80097b4 <ethernetif_input+0x50>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f04f 31ff 	mov.w	r1, #4294967295
 800977c:	4618      	mov	r0, r3
 800977e:	f000 fdb5 	bl	800a2ec <osSemaphoreAcquire>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1f5      	bne.n	8009774 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8009788:	68b8      	ldr	r0, [r7, #8]
 800978a:	f7ff ffd1 	bl	8009730 <low_level_input>
 800978e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00a      	beq.n	80097ac <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	68b9      	ldr	r1, [r7, #8]
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	4798      	blx	r3
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d002      	beq.n	80097ac <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f008 f9f8 	bl	8011b9c <pbuf_free>
          }
        }
      } while(p!=NULL);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1ea      	bne.n	8009788 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80097b2:	e7df      	b.n	8009774 <ethernetif_input+0x10>
 80097b4:	24004ed0 	.word	0x24004ed0

080097b8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d106      	bne.n	80097d4 <ethernetif_init+0x1c>
 80097c6:	4b0e      	ldr	r3, [pc, #56]	; (8009800 <ethernetif_init+0x48>)
 80097c8:	f240 12f5 	movw	r2, #501	; 0x1f5
 80097cc:	490d      	ldr	r1, [pc, #52]	; (8009804 <ethernetif_init+0x4c>)
 80097ce:	480e      	ldr	r0, [pc, #56]	; (8009808 <ethernetif_init+0x50>)
 80097d0:	f012 f848 	bl	801b864 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2273      	movs	r2, #115	; 0x73
 80097d8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2274      	movs	r2, #116	; 0x74
 80097e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a09      	ldr	r2, [pc, #36]	; (800980c <ethernetif_init+0x54>)
 80097e8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a08      	ldr	r2, [pc, #32]	; (8009810 <ethernetif_init+0x58>)
 80097ee:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7ff fdd1 	bl	8009398 <low_level_init>

  return ERR_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	0801cb54 	.word	0x0801cb54
 8009804:	0801cb70 	.word	0x0801cb70
 8009808:	0801cb80 	.word	0x0801cb80
 800980c:	080193d5 	.word	0x080193d5
 8009810:	08009609 	.word	0x08009609

08009814 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009820:	68f9      	ldr	r1, [r7, #12]
 8009822:	4809      	ldr	r0, [pc, #36]	; (8009848 <pbuf_free_custom+0x34>)
 8009824:	f007 faee 	bl	8010e04 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8009828:	4b08      	ldr	r3, [pc, #32]	; (800984c <pbuf_free_custom+0x38>)
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d107      	bne.n	8009840 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009830:	4b06      	ldr	r3, [pc, #24]	; (800984c <pbuf_free_custom+0x38>)
 8009832:	2200      	movs	r2, #0
 8009834:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8009836:	4b06      	ldr	r3, [pc, #24]	; (8009850 <pbuf_free_custom+0x3c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4618      	mov	r0, r3
 800983c:	f000 fda8 	bl	800a390 <osSemaphoreRelease>
  }
}
 8009840:	bf00      	nop
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	0802015c 	.word	0x0802015c
 800984c:	24004ecc 	.word	0x24004ecc
 8009850:	24004ed0 	.word	0x24004ed0

08009854 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009858:	f7f8 f938 	bl	8001acc <HAL_GetTick>
 800985c:	4603      	mov	r3, r0
}
 800985e:	4618      	mov	r0, r3
 8009860:	bd80      	pop	{r7, pc}
	...

08009864 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b08e      	sub	sp, #56	; 0x38
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800986c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009870:	2200      	movs	r2, #0
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	605a      	str	r2, [r3, #4]
 8009876:	609a      	str	r2, [r3, #8]
 8009878:	60da      	str	r2, [r3, #12]
 800987a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a5d      	ldr	r2, [pc, #372]	; (80099f8 <HAL_ETH_MspInit+0x194>)
 8009882:	4293      	cmp	r3, r2
 8009884:	f040 80b3 	bne.w	80099ee <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8009888:	4b5c      	ldr	r3, [pc, #368]	; (80099fc <HAL_ETH_MspInit+0x198>)
 800988a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800988e:	4a5b      	ldr	r2, [pc, #364]	; (80099fc <HAL_ETH_MspInit+0x198>)
 8009890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009894:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009898:	4b58      	ldr	r3, [pc, #352]	; (80099fc <HAL_ETH_MspInit+0x198>)
 800989a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800989e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098a2:	623b      	str	r3, [r7, #32]
 80098a4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80098a6:	4b55      	ldr	r3, [pc, #340]	; (80099fc <HAL_ETH_MspInit+0x198>)
 80098a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80098ac:	4a53      	ldr	r2, [pc, #332]	; (80099fc <HAL_ETH_MspInit+0x198>)
 80098ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80098b6:	4b51      	ldr	r3, [pc, #324]	; (80099fc <HAL_ETH_MspInit+0x198>)
 80098b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80098bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098c0:	61fb      	str	r3, [r7, #28]
 80098c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80098c4:	4b4d      	ldr	r3, [pc, #308]	; (80099fc <HAL_ETH_MspInit+0x198>)
 80098c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80098ca:	4a4c      	ldr	r2, [pc, #304]	; (80099fc <HAL_ETH_MspInit+0x198>)
 80098cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80098d4:	4b49      	ldr	r3, [pc, #292]	; (80099fc <HAL_ETH_MspInit+0x198>)
 80098d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80098da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098de:	61bb      	str	r3, [r7, #24]
 80098e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80098e2:	4b46      	ldr	r3, [pc, #280]	; (80099fc <HAL_ETH_MspInit+0x198>)
 80098e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098e8:	4a44      	ldr	r2, [pc, #272]	; (80099fc <HAL_ETH_MspInit+0x198>)
 80098ea:	f043 0304 	orr.w	r3, r3, #4
 80098ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80098f2:	4b42      	ldr	r3, [pc, #264]	; (80099fc <HAL_ETH_MspInit+0x198>)
 80098f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098f8:	f003 0304 	and.w	r3, r3, #4
 80098fc:	617b      	str	r3, [r7, #20]
 80098fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009900:	4b3e      	ldr	r3, [pc, #248]	; (80099fc <HAL_ETH_MspInit+0x198>)
 8009902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009906:	4a3d      	ldr	r2, [pc, #244]	; (80099fc <HAL_ETH_MspInit+0x198>)
 8009908:	f043 0301 	orr.w	r3, r3, #1
 800990c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009910:	4b3a      	ldr	r3, [pc, #232]	; (80099fc <HAL_ETH_MspInit+0x198>)
 8009912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	613b      	str	r3, [r7, #16]
 800991c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800991e:	4b37      	ldr	r3, [pc, #220]	; (80099fc <HAL_ETH_MspInit+0x198>)
 8009920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009924:	4a35      	ldr	r2, [pc, #212]	; (80099fc <HAL_ETH_MspInit+0x198>)
 8009926:	f043 0302 	orr.w	r3, r3, #2
 800992a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800992e:	4b33      	ldr	r3, [pc, #204]	; (80099fc <HAL_ETH_MspInit+0x198>)
 8009930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009934:	f003 0302 	and.w	r3, r3, #2
 8009938:	60fb      	str	r3, [r7, #12]
 800993a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800993c:	4b2f      	ldr	r3, [pc, #188]	; (80099fc <HAL_ETH_MspInit+0x198>)
 800993e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009942:	4a2e      	ldr	r2, [pc, #184]	; (80099fc <HAL_ETH_MspInit+0x198>)
 8009944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800994c:	4b2b      	ldr	r3, [pc, #172]	; (80099fc <HAL_ETH_MspInit+0x198>)
 800994e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009956:	60bb      	str	r3, [r7, #8]
 8009958:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800995a:	2332      	movs	r3, #50	; 0x32
 800995c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800995e:	2302      	movs	r3, #2
 8009960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009962:	2300      	movs	r3, #0
 8009964:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009966:	2303      	movs	r3, #3
 8009968:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800996a:	230b      	movs	r3, #11
 800996c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800996e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009972:	4619      	mov	r1, r3
 8009974:	4822      	ldr	r0, [pc, #136]	; (8009a00 <HAL_ETH_MspInit+0x19c>)
 8009976:	f7fa fb59 	bl	800402c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800997a:	2386      	movs	r3, #134	; 0x86
 800997c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800997e:	2302      	movs	r3, #2
 8009980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009982:	2300      	movs	r3, #0
 8009984:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009986:	2303      	movs	r3, #3
 8009988:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800998a:	230b      	movs	r3, #11
 800998c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800998e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009992:	4619      	mov	r1, r3
 8009994:	481b      	ldr	r0, [pc, #108]	; (8009a04 <HAL_ETH_MspInit+0x1a0>)
 8009996:	f7fa fb49 	bl	800402c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800999a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800999e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099a0:	2302      	movs	r3, #2
 80099a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099a4:	2300      	movs	r3, #0
 80099a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099a8:	2303      	movs	r3, #3
 80099aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80099ac:	230b      	movs	r3, #11
 80099ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099b4:	4619      	mov	r1, r3
 80099b6:	4814      	ldr	r0, [pc, #80]	; (8009a08 <HAL_ETH_MspInit+0x1a4>)
 80099b8:	f7fa fb38 	bl	800402c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80099bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80099c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099c2:	2302      	movs	r3, #2
 80099c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099c6:	2300      	movs	r3, #0
 80099c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099ca:	2303      	movs	r3, #3
 80099cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80099ce:	230b      	movs	r3, #11
 80099d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80099d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099d6:	4619      	mov	r1, r3
 80099d8:	480c      	ldr	r0, [pc, #48]	; (8009a0c <HAL_ETH_MspInit+0x1a8>)
 80099da:	f7fa fb27 	bl	800402c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80099de:	2200      	movs	r2, #0
 80099e0:	2105      	movs	r1, #5
 80099e2:	203d      	movs	r0, #61	; 0x3d
 80099e4:	f7f8 f956 	bl	8001c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80099e8:	203d      	movs	r0, #61	; 0x3d
 80099ea:	f7f8 f96d 	bl	8001cc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80099ee:	bf00      	nop
 80099f0:	3738      	adds	r7, #56	; 0x38
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	40028000 	.word	0x40028000
 80099fc:	58024400 	.word	0x58024400
 8009a00:	58020800 	.word	0x58020800
 8009a04:	58020000 	.word	0x58020000
 8009a08:	58020400 	.word	0x58020400
 8009a0c:	58021800 	.word	0x58021800

08009a10 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009a14:	4802      	ldr	r0, [pc, #8]	; (8009a20 <ETH_PHY_IO_Init+0x10>)
 8009a16:	f7f9 f9cb 	bl	8002db0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	24004ed8 	.word	0x24004ed8

08009a24 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009a24:	b480      	push	{r7}
 8009a26:	af00      	add	r7, sp, #0
  return 0;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	68f9      	ldr	r1, [r7, #12]
 8009a46:	4807      	ldr	r0, [pc, #28]	; (8009a64 <ETH_PHY_IO_ReadReg+0x30>)
 8009a48:	f7f8 ff1c 	bl	8002884 <HAL_ETH_ReadPHYRegister>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d002      	beq.n	8009a58 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009a52:	f04f 33ff 	mov.w	r3, #4294967295
 8009a56:	e000      	b.n	8009a5a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	24004ed8 	.word	0x24004ed8

08009a68 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	68f9      	ldr	r1, [r7, #12]
 8009a7a:	4807      	ldr	r0, [pc, #28]	; (8009a98 <ETH_PHY_IO_WriteReg+0x30>)
 8009a7c:	f7f8 ff56 	bl	800292c <HAL_ETH_WritePHYRegister>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d002      	beq.n	8009a8c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009a86:	f04f 33ff 	mov.w	r3, #4294967295
 8009a8a:	e000      	b.n	8009a8e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	24004ed8 	.word	0x24004ed8

08009a9c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009aa0:	f7f8 f814 	bl	8001acc <HAL_GetTick>
 8009aa4:	4603      	mov	r3, r0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	bd80      	pop	{r7, pc}
	...

08009aac <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b0a0      	sub	sp, #128	; 0x80
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009ab4:	f107 0308 	add.w	r3, r7, #8
 8009ab8:	2264      	movs	r2, #100	; 0x64
 8009aba:	2100      	movs	r1, #0
 8009abc:	4618      	mov	r0, r3
 8009abe:	f011 fe34 	bl	801b72a <memset>
  int32_t PHYLinkState = 0;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009aca:	2300      	movs	r3, #0
 8009acc:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ace:	2300      	movs	r3, #0
 8009ad0:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009ad6:	483a      	ldr	r0, [pc, #232]	; (8009bc0 <ethernet_link_thread+0x114>)
 8009ad8:	f7f7 ff21 	bl	800191e <LAN8742_GetLinkState>
 8009adc:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ae0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009ae4:	089b      	lsrs	r3, r3, #2
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00c      	beq.n	8009b0a <ethernet_link_thread+0x5e>
 8009af0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	dc09      	bgt.n	8009b0a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8009af6:	4833      	ldr	r0, [pc, #204]	; (8009bc4 <ethernet_link_thread+0x118>)
 8009af8:	f7f8 fb44 	bl	8002184 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8009afc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009afe:	f007 fc05 	bl	801130c <netif_set_down>
    netif_set_link_down(netif);
 8009b02:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009b04:	f007 fc68 	bl	80113d8 <netif_set_link_down>
 8009b08:	e055      	b.n	8009bb6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8009b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b10:	f003 0304 	and.w	r3, r3, #4
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d14e      	bne.n	8009bb6 <ethernet_link_thread+0x10a>
 8009b18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	dd4b      	ble.n	8009bb6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8009b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b20:	3b02      	subs	r3, #2
 8009b22:	2b03      	cmp	r3, #3
 8009b24:	d82a      	bhi.n	8009b7c <ethernet_link_thread+0xd0>
 8009b26:	a201      	add	r2, pc, #4	; (adr r2, 8009b2c <ethernet_link_thread+0x80>)
 8009b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2c:	08009b3d 	.word	0x08009b3d
 8009b30:	08009b4f 	.word	0x08009b4f
 8009b34:	08009b5f 	.word	0x08009b5f
 8009b38:	08009b6f 	.word	0x08009b6f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b40:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8009b42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009b46:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009b4c:	e017      	b.n	8009b7e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8009b52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009b56:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009b5c:	e00f      	b.n	8009b7e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009b5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b62:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009b64:	2300      	movs	r3, #0
 8009b66:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009b6c:	e007      	b.n	8009b7e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009b72:	2300      	movs	r3, #0
 8009b74:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009b76:	2301      	movs	r3, #1
 8009b78:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009b7a:	e000      	b.n	8009b7e <ethernet_link_thread+0xd2>
    default:
      break;
 8009b7c:	bf00      	nop
    }

    if(linkchanged)
 8009b7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d018      	beq.n	8009bb6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009b84:	f107 0308 	add.w	r3, r7, #8
 8009b88:	4619      	mov	r1, r3
 8009b8a:	480e      	ldr	r0, [pc, #56]	; (8009bc4 <ethernet_link_thread+0x118>)
 8009b8c:	f7f8 ff22 	bl	80029d4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b92:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8009b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b96:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009b98:	f107 0308 	add.w	r3, r7, #8
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4809      	ldr	r0, [pc, #36]	; (8009bc4 <ethernet_link_thread+0x118>)
 8009ba0:	f7f9 f8ec 	bl	8002d7c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8009ba4:	4807      	ldr	r0, [pc, #28]	; (8009bc4 <ethernet_link_thread+0x118>)
 8009ba6:	f7f8 f9ff 	bl	8001fa8 <HAL_ETH_Start>
      netif_set_up(netif);
 8009baa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009bac:	f007 fb42 	bl	8011234 <netif_set_up>
      netif_set_link_up(netif);
 8009bb0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009bb2:	f007 fbdd 	bl	8011370 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */
//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8009bb6:	2064      	movs	r0, #100	; 0x64
 8009bb8:	f000 f9e5 	bl	8009f86 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009bbc:	e78b      	b.n	8009ad6 <ethernet_link_thread+0x2a>
 8009bbe:	bf00      	nop
 8009bc0:	24004fc0 	.word	0x24004fc0
 8009bc4:	24004ed8 	.word	0x24004ed8

08009bc8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af02      	add	r7, sp, #8
 8009bce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8009bd0:	2102      	movs	r1, #2
 8009bd2:	4814      	ldr	r0, [pc, #80]	; (8009c24 <HAL_ETH_RxAllocateCallback+0x5c>)
 8009bd4:	f7fa fbf3 	bl	80043be <HAL_GPIO_TogglePin>
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009bd8:	4813      	ldr	r0, [pc, #76]	; (8009c28 <HAL_ETH_RxAllocateCallback+0x60>)
 8009bda:	f007 f89f 	bl	8010d1c <memp_malloc_pool>
 8009bde:	60f8      	str	r0, [r7, #12]
  if (p)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d014      	beq.n	8009c10 <HAL_ETH_RxAllocateCallback+0x48>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f103 0220 	add.w	r2, r3, #32
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	4a0e      	ldr	r2, [pc, #56]	; (8009c2c <HAL_ETH_RxAllocateCallback+0x64>)
 8009bf4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009bfe:	9201      	str	r2, [sp, #4]
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2241      	movs	r2, #65	; 0x41
 8009c06:	2100      	movs	r1, #0
 8009c08:	2000      	movs	r0, #0
 8009c0a:	f007 fe0d 	bl	8011828 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8009c0e:	e005      	b.n	8009c1c <HAL_ETH_RxAllocateCallback+0x54>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009c10:	4b07      	ldr	r3, [pc, #28]	; (8009c30 <HAL_ETH_RxAllocateCallback+0x68>)
 8009c12:	2201      	movs	r2, #1
 8009c14:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	601a      	str	r2, [r3, #0]
}
 8009c1c:	bf00      	nop
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	58021000 	.word	0x58021000
 8009c28:	0802015c 	.word	0x0802015c
 8009c2c:	08009815 	.word	0x08009815
 8009c30:	24004ecc 	.word	0x24004ecc

08009c34 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b08d      	sub	sp, #52	; 0x34
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	3b20      	subs	r3, #32
 8009c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8009c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c56:	2200      	movs	r2, #0
 8009c58:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c62:	887a      	ldrh	r2, [r7, #2]
 8009c64:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d103      	bne.n	8009c76 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	e003      	b.n	8009c7e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c7c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c82:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c8a:	e009      	b.n	8009ca0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8e:	891a      	ldrh	r2, [r3, #8]
 8009c90:	887b      	ldrh	r3, [r7, #2]
 8009c92:	4413      	add	r3, r2
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c98:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1f2      	bne.n	8009c8c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8009ca6:	887b      	ldrh	r3, [r7, #2]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	623a      	str	r2, [r7, #32]
 8009cac:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	dd1d      	ble.n	8009cf0 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	f003 021f 	and.w	r2, r3, #31
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8009cc0:	6a3b      	ldr	r3, [r7, #32]
 8009cc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009cc4:	f3bf 8f4f 	dsb	sy
}
 8009cc8:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8009cca:	4a0d      	ldr	r2, [pc, #52]	; (8009d00 <HAL_ETH_RxLinkCallback+0xcc>)
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	3320      	adds	r3, #32
 8009cd6:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	3b20      	subs	r3, #32
 8009cdc:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	dcf2      	bgt.n	8009cca <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8009ce4:	f3bf 8f4f 	dsb	sy
}
 8009ce8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009cea:	f3bf 8f6f 	isb	sy
}
 8009cee:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8009cf0:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009cf2:	bf00      	nop
 8009cf4:	3734      	adds	r7, #52	; 0x34
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	e000ed00 	.word	0xe000ed00

08009d04 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f007 ff45 	bl	8011b9c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8009d12:	bf00      	nop
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
	...

08009d1c <__NVIC_SetPriority>:
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	4603      	mov	r3, r0
 8009d24:	6039      	str	r1, [r7, #0]
 8009d26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009d28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	db0a      	blt.n	8009d46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	490c      	ldr	r1, [pc, #48]	; (8009d68 <__NVIC_SetPriority+0x4c>)
 8009d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d3a:	0112      	lsls	r2, r2, #4
 8009d3c:	b2d2      	uxtb	r2, r2
 8009d3e:	440b      	add	r3, r1
 8009d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009d44:	e00a      	b.n	8009d5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	4908      	ldr	r1, [pc, #32]	; (8009d6c <__NVIC_SetPriority+0x50>)
 8009d4c:	88fb      	ldrh	r3, [r7, #6]
 8009d4e:	f003 030f 	and.w	r3, r3, #15
 8009d52:	3b04      	subs	r3, #4
 8009d54:	0112      	lsls	r2, r2, #4
 8009d56:	b2d2      	uxtb	r2, r2
 8009d58:	440b      	add	r3, r1
 8009d5a:	761a      	strb	r2, [r3, #24]
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	e000e100 	.word	0xe000e100
 8009d6c:	e000ed00 	.word	0xe000ed00

08009d70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009d70:	b580      	push	{r7, lr}
 8009d72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009d74:	4b05      	ldr	r3, [pc, #20]	; (8009d8c <SysTick_Handler+0x1c>)
 8009d76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009d78:	f002 fd5e 	bl	800c838 <xTaskGetSchedulerState>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d001      	beq.n	8009d86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009d82:	f003 fc51 	bl	800d628 <xPortSysTickHandler>
  }
}
 8009d86:	bf00      	nop
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	e000e010 	.word	0xe000e010

08009d90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009d90:	b580      	push	{r7, lr}
 8009d92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009d94:	2100      	movs	r1, #0
 8009d96:	f06f 0004 	mvn.w	r0, #4
 8009d9a:	f7ff ffbf 	bl	8009d1c <__NVIC_SetPriority>
#endif
}
 8009d9e:	bf00      	nop
 8009da0:	bd80      	pop	{r7, pc}
	...

08009da4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009daa:	f3ef 8305 	mrs	r3, IPSR
 8009dae:	603b      	str	r3, [r7, #0]
  return(result);
 8009db0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d003      	beq.n	8009dbe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009db6:	f06f 0305 	mvn.w	r3, #5
 8009dba:	607b      	str	r3, [r7, #4]
 8009dbc:	e00c      	b.n	8009dd8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009dbe:	4b0a      	ldr	r3, [pc, #40]	; (8009de8 <osKernelInitialize+0x44>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d105      	bne.n	8009dd2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009dc6:	4b08      	ldr	r3, [pc, #32]	; (8009de8 <osKernelInitialize+0x44>)
 8009dc8:	2201      	movs	r2, #1
 8009dca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	607b      	str	r3, [r7, #4]
 8009dd0:	e002      	b.n	8009dd8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009dd8:	687b      	ldr	r3, [r7, #4]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	24004fe0 	.word	0x24004fe0

08009dec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009df2:	f3ef 8305 	mrs	r3, IPSR
 8009df6:	603b      	str	r3, [r7, #0]
  return(result);
 8009df8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d003      	beq.n	8009e06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009dfe:	f06f 0305 	mvn.w	r3, #5
 8009e02:	607b      	str	r3, [r7, #4]
 8009e04:	e010      	b.n	8009e28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009e06:	4b0b      	ldr	r3, [pc, #44]	; (8009e34 <osKernelStart+0x48>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d109      	bne.n	8009e22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009e0e:	f7ff ffbf 	bl	8009d90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009e12:	4b08      	ldr	r3, [pc, #32]	; (8009e34 <osKernelStart+0x48>)
 8009e14:	2202      	movs	r2, #2
 8009e16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009e18:	f002 f872 	bl	800bf00 <vTaskStartScheduler>
      stat = osOK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	607b      	str	r3, [r7, #4]
 8009e20:	e002      	b.n	8009e28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009e22:	f04f 33ff 	mov.w	r3, #4294967295
 8009e26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e28:	687b      	ldr	r3, [r7, #4]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	24004fe0 	.word	0x24004fe0

08009e38 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e3e:	f3ef 8305 	mrs	r3, IPSR
 8009e42:	603b      	str	r3, [r7, #0]
  return(result);
 8009e44:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d003      	beq.n	8009e52 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009e4a:	f002 f987 	bl	800c15c <xTaskGetTickCountFromISR>
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	e002      	b.n	8009e58 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009e52:	f002 f973 	bl	800c13c <xTaskGetTickCount>
 8009e56:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009e58:	687b      	ldr	r3, [r7, #4]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b08e      	sub	sp, #56	; 0x38
 8009e66:	af04      	add	r7, sp, #16
 8009e68:	60f8      	str	r0, [r7, #12]
 8009e6a:	60b9      	str	r1, [r7, #8]
 8009e6c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e72:	f3ef 8305 	mrs	r3, IPSR
 8009e76:	617b      	str	r3, [r7, #20]
  return(result);
 8009e78:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d17e      	bne.n	8009f7c <osThreadNew+0x11a>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d07b      	beq.n	8009f7c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009e84:	2380      	movs	r3, #128	; 0x80
 8009e86:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009e88:	2318      	movs	r3, #24
 8009e8a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009e90:	f04f 33ff 	mov.w	r3, #4294967295
 8009e94:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d045      	beq.n	8009f28 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <osThreadNew+0x48>
        name = attr->name;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d002      	beq.n	8009eb8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d008      	beq.n	8009ed0 <osThreadNew+0x6e>
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	2b38      	cmp	r3, #56	; 0x38
 8009ec2:	d805      	bhi.n	8009ed0 <osThreadNew+0x6e>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	f003 0301 	and.w	r3, r3, #1
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d001      	beq.n	8009ed4 <osThreadNew+0x72>
        return (NULL);
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	e054      	b.n	8009f7e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	695b      	ldr	r3, [r3, #20]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d003      	beq.n	8009ee4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	695b      	ldr	r3, [r3, #20]
 8009ee0:	089b      	lsrs	r3, r3, #2
 8009ee2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00e      	beq.n	8009f0a <osThreadNew+0xa8>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	2bc3      	cmp	r3, #195	; 0xc3
 8009ef2:	d90a      	bls.n	8009f0a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d006      	beq.n	8009f0a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d002      	beq.n	8009f0a <osThreadNew+0xa8>
        mem = 1;
 8009f04:	2301      	movs	r3, #1
 8009f06:	61bb      	str	r3, [r7, #24]
 8009f08:	e010      	b.n	8009f2c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d10c      	bne.n	8009f2c <osThreadNew+0xca>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d108      	bne.n	8009f2c <osThreadNew+0xca>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d104      	bne.n	8009f2c <osThreadNew+0xca>
          mem = 0;
 8009f22:	2300      	movs	r3, #0
 8009f24:	61bb      	str	r3, [r7, #24]
 8009f26:	e001      	b.n	8009f2c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d110      	bne.n	8009f54 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f3a:	9202      	str	r2, [sp, #8]
 8009f3c:	9301      	str	r3, [sp, #4]
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	6a3a      	ldr	r2, [r7, #32]
 8009f46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f001 fde7 	bl	800bb1c <xTaskCreateStatic>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	613b      	str	r3, [r7, #16]
 8009f52:	e013      	b.n	8009f7c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d110      	bne.n	8009f7c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	f107 0310 	add.w	r3, r7, #16
 8009f62:	9301      	str	r3, [sp, #4]
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f001 fe32 	bl	800bbd6 <xTaskCreate>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d001      	beq.n	8009f7c <osThreadNew+0x11a>
            hTask = NULL;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009f7c:	693b      	ldr	r3, [r7, #16]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3728      	adds	r7, #40	; 0x28
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b084      	sub	sp, #16
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f8e:	f3ef 8305 	mrs	r3, IPSR
 8009f92:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d003      	beq.n	8009fa2 <osDelay+0x1c>
    stat = osErrorISR;
 8009f9a:	f06f 0305 	mvn.w	r3, #5
 8009f9e:	60fb      	str	r3, [r7, #12]
 8009fa0:	e007      	b.n	8009fb2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f001 ff73 	bl	800be98 <vTaskDelay>
    }
  }

  return (stat);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b088      	sub	sp, #32
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fc8:	f3ef 8305 	mrs	r3, IPSR
 8009fcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8009fce:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d174      	bne.n	800a0be <osMutexNew+0x102>
    if (attr != NULL) {
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d003      	beq.n	8009fe2 <osMutexNew+0x26>
      type = attr->attr_bits;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	61bb      	str	r3, [r7, #24]
 8009fe0:	e001      	b.n	8009fe6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	f003 0301 	and.w	r3, r3, #1
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d002      	beq.n	8009ff6 <osMutexNew+0x3a>
      rmtx = 1U;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	617b      	str	r3, [r7, #20]
 8009ff4:	e001      	b.n	8009ffa <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	f003 0308 	and.w	r3, r3, #8
 800a000:	2b00      	cmp	r3, #0
 800a002:	d15c      	bne.n	800a0be <osMutexNew+0x102>
      mem = -1;
 800a004:	f04f 33ff 	mov.w	r3, #4294967295
 800a008:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d015      	beq.n	800a03c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d006      	beq.n	800a026 <osMutexNew+0x6a>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	2b4f      	cmp	r3, #79	; 0x4f
 800a01e:	d902      	bls.n	800a026 <osMutexNew+0x6a>
          mem = 1;
 800a020:	2301      	movs	r3, #1
 800a022:	613b      	str	r3, [r7, #16]
 800a024:	e00c      	b.n	800a040 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d108      	bne.n	800a040 <osMutexNew+0x84>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d104      	bne.n	800a040 <osMutexNew+0x84>
            mem = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	613b      	str	r3, [r7, #16]
 800a03a:	e001      	b.n	800a040 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a03c:	2300      	movs	r3, #0
 800a03e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	2b01      	cmp	r3, #1
 800a044:	d112      	bne.n	800a06c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d007      	beq.n	800a05c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	4619      	mov	r1, r3
 800a052:	2004      	movs	r0, #4
 800a054:	f000 fdd1 	bl	800abfa <xQueueCreateMutexStatic>
 800a058:	61f8      	str	r0, [r7, #28]
 800a05a:	e016      	b.n	800a08a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	4619      	mov	r1, r3
 800a062:	2001      	movs	r0, #1
 800a064:	f000 fdc9 	bl	800abfa <xQueueCreateMutexStatic>
 800a068:	61f8      	str	r0, [r7, #28]
 800a06a:	e00e      	b.n	800a08a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10b      	bne.n	800a08a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d004      	beq.n	800a082 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a078:	2004      	movs	r0, #4
 800a07a:	f000 fda6 	bl	800abca <xQueueCreateMutex>
 800a07e:	61f8      	str	r0, [r7, #28]
 800a080:	e003      	b.n	800a08a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a082:	2001      	movs	r0, #1
 800a084:	f000 fda1 	bl	800abca <xQueueCreateMutex>
 800a088:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00c      	beq.n	800a0aa <osMutexNew+0xee>
        if (attr != NULL) {
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d003      	beq.n	800a09e <osMutexNew+0xe2>
          name = attr->name;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	60fb      	str	r3, [r7, #12]
 800a09c:	e001      	b.n	800a0a2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a0a2:	68f9      	ldr	r1, [r7, #12]
 800a0a4:	69f8      	ldr	r0, [r7, #28]
 800a0a6:	f001 fcb1 	bl	800ba0c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d006      	beq.n	800a0be <osMutexNew+0x102>
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d003      	beq.n	800a0be <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	f043 0301 	orr.w	r3, r3, #1
 800a0bc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a0be:	69fb      	ldr	r3, [r7, #28]
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3720      	adds	r7, #32
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f023 0301 	bic.w	r3, r3, #1
 800a0d8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f003 0301 	and.w	r3, r3, #1
 800a0e0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0e6:	f3ef 8305 	mrs	r3, IPSR
 800a0ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0ec:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d003      	beq.n	800a0fa <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a0f2:	f06f 0305 	mvn.w	r3, #5
 800a0f6:	617b      	str	r3, [r7, #20]
 800a0f8:	e02c      	b.n	800a154 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d103      	bne.n	800a108 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a100:	f06f 0303 	mvn.w	r3, #3
 800a104:	617b      	str	r3, [r7, #20]
 800a106:	e025      	b.n	800a154 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d011      	beq.n	800a132 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	6938      	ldr	r0, [r7, #16]
 800a112:	f000 fdc1 	bl	800ac98 <xQueueTakeMutexRecursive>
 800a116:	4603      	mov	r3, r0
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d01b      	beq.n	800a154 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d003      	beq.n	800a12a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a122:	f06f 0301 	mvn.w	r3, #1
 800a126:	617b      	str	r3, [r7, #20]
 800a128:	e014      	b.n	800a154 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a12a:	f06f 0302 	mvn.w	r3, #2
 800a12e:	617b      	str	r3, [r7, #20]
 800a130:	e010      	b.n	800a154 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a132:	6839      	ldr	r1, [r7, #0]
 800a134:	6938      	ldr	r0, [r7, #16]
 800a136:	f001 f955 	bl	800b3e4 <xQueueSemaphoreTake>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d009      	beq.n	800a154 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d003      	beq.n	800a14e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a146:	f06f 0301 	mvn.w	r3, #1
 800a14a:	617b      	str	r3, [r7, #20]
 800a14c:	e002      	b.n	800a154 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a14e:	f06f 0302 	mvn.w	r3, #2
 800a152:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800a154:	697b      	ldr	r3, [r7, #20]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3718      	adds	r7, #24
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a15e:	b580      	push	{r7, lr}
 800a160:	b086      	sub	sp, #24
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f023 0301 	bic.w	r3, r3, #1
 800a16c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f003 0301 	and.w	r3, r3, #1
 800a174:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a176:	2300      	movs	r3, #0
 800a178:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a17a:	f3ef 8305 	mrs	r3, IPSR
 800a17e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a180:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a182:	2b00      	cmp	r3, #0
 800a184:	d003      	beq.n	800a18e <osMutexRelease+0x30>
    stat = osErrorISR;
 800a186:	f06f 0305 	mvn.w	r3, #5
 800a18a:	617b      	str	r3, [r7, #20]
 800a18c:	e01f      	b.n	800a1ce <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d103      	bne.n	800a19c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800a194:	f06f 0303 	mvn.w	r3, #3
 800a198:	617b      	str	r3, [r7, #20]
 800a19a:	e018      	b.n	800a1ce <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d009      	beq.n	800a1b6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a1a2:	6938      	ldr	r0, [r7, #16]
 800a1a4:	f000 fd44 	bl	800ac30 <xQueueGiveMutexRecursive>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d00f      	beq.n	800a1ce <osMutexRelease+0x70>
        stat = osErrorResource;
 800a1ae:	f06f 0302 	mvn.w	r3, #2
 800a1b2:	617b      	str	r3, [r7, #20]
 800a1b4:	e00b      	b.n	800a1ce <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	6938      	ldr	r0, [r7, #16]
 800a1be:	f000 fe0b 	bl	800add8 <xQueueGenericSend>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d002      	beq.n	800a1ce <osMutexRelease+0x70>
        stat = osErrorResource;
 800a1c8:	f06f 0302 	mvn.w	r3, #2
 800a1cc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a1ce:	697b      	ldr	r3, [r7, #20]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3718      	adds	r7, #24
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b08a      	sub	sp, #40	; 0x28
 800a1dc:	af02      	add	r7, sp, #8
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1e8:	f3ef 8305 	mrs	r3, IPSR
 800a1ec:	613b      	str	r3, [r7, #16]
  return(result);
 800a1ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d175      	bne.n	800a2e0 <osSemaphoreNew+0x108>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d072      	beq.n	800a2e0 <osSemaphoreNew+0x108>
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d86e      	bhi.n	800a2e0 <osSemaphoreNew+0x108>
    mem = -1;
 800a202:	f04f 33ff 	mov.w	r3, #4294967295
 800a206:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d015      	beq.n	800a23a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d006      	beq.n	800a224 <osSemaphoreNew+0x4c>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	2b4f      	cmp	r3, #79	; 0x4f
 800a21c:	d902      	bls.n	800a224 <osSemaphoreNew+0x4c>
        mem = 1;
 800a21e:	2301      	movs	r3, #1
 800a220:	61bb      	str	r3, [r7, #24]
 800a222:	e00c      	b.n	800a23e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d108      	bne.n	800a23e <osSemaphoreNew+0x66>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d104      	bne.n	800a23e <osSemaphoreNew+0x66>
          mem = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	61bb      	str	r3, [r7, #24]
 800a238:	e001      	b.n	800a23e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a23a:	2300      	movs	r3, #0
 800a23c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a244:	d04c      	beq.n	800a2e0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d128      	bne.n	800a29e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d10a      	bne.n	800a268 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	2203      	movs	r2, #3
 800a258:	9200      	str	r2, [sp, #0]
 800a25a:	2200      	movs	r2, #0
 800a25c:	2100      	movs	r1, #0
 800a25e:	2001      	movs	r0, #1
 800a260:	f000 fbc4 	bl	800a9ec <xQueueGenericCreateStatic>
 800a264:	61f8      	str	r0, [r7, #28]
 800a266:	e005      	b.n	800a274 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a268:	2203      	movs	r2, #3
 800a26a:	2100      	movs	r1, #0
 800a26c:	2001      	movs	r0, #1
 800a26e:	f000 fc35 	bl	800aadc <xQueueGenericCreate>
 800a272:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d022      	beq.n	800a2c0 <osSemaphoreNew+0xe8>
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d01f      	beq.n	800a2c0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a280:	2300      	movs	r3, #0
 800a282:	2200      	movs	r2, #0
 800a284:	2100      	movs	r1, #0
 800a286:	69f8      	ldr	r0, [r7, #28]
 800a288:	f000 fda6 	bl	800add8 <xQueueGenericSend>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d016      	beq.n	800a2c0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a292:	69f8      	ldr	r0, [r7, #28]
 800a294:	f001 fa6e 	bl	800b774 <vQueueDelete>
            hSemaphore = NULL;
 800a298:	2300      	movs	r3, #0
 800a29a:	61fb      	str	r3, [r7, #28]
 800a29c:	e010      	b.n	800a2c0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d108      	bne.n	800a2b6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	68b9      	ldr	r1, [r7, #8]
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 fd29 	bl	800ad04 <xQueueCreateCountingSemaphoreStatic>
 800a2b2:	61f8      	str	r0, [r7, #28]
 800a2b4:	e004      	b.n	800a2c0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a2b6:	68b9      	ldr	r1, [r7, #8]
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f000 fd5a 	bl	800ad72 <xQueueCreateCountingSemaphore>
 800a2be:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00c      	beq.n	800a2e0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d003      	beq.n	800a2d4 <osSemaphoreNew+0xfc>
          name = attr->name;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	617b      	str	r3, [r7, #20]
 800a2d2:	e001      	b.n	800a2d8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a2d8:	6979      	ldr	r1, [r7, #20]
 800a2da:	69f8      	ldr	r0, [r7, #28]
 800a2dc:	f001 fb96 	bl	800ba0c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a2e0:	69fb      	ldr	r3, [r7, #28]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3720      	adds	r7, #32
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
	...

0800a2ec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d103      	bne.n	800a30c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a304:	f06f 0303 	mvn.w	r3, #3
 800a308:	617b      	str	r3, [r7, #20]
 800a30a:	e039      	b.n	800a380 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a30c:	f3ef 8305 	mrs	r3, IPSR
 800a310:	60fb      	str	r3, [r7, #12]
  return(result);
 800a312:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a314:	2b00      	cmp	r3, #0
 800a316:	d022      	beq.n	800a35e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a31e:	f06f 0303 	mvn.w	r3, #3
 800a322:	617b      	str	r3, [r7, #20]
 800a324:	e02c      	b.n	800a380 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a326:	2300      	movs	r3, #0
 800a328:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a32a:	f107 0308 	add.w	r3, r7, #8
 800a32e:	461a      	mov	r2, r3
 800a330:	2100      	movs	r1, #0
 800a332:	6938      	ldr	r0, [r7, #16]
 800a334:	f001 f962 	bl	800b5fc <xQueueReceiveFromISR>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d003      	beq.n	800a346 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a33e:	f06f 0302 	mvn.w	r3, #2
 800a342:	617b      	str	r3, [r7, #20]
 800a344:	e01c      	b.n	800a380 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d019      	beq.n	800a380 <osSemaphoreAcquire+0x94>
 800a34c:	4b0f      	ldr	r3, [pc, #60]	; (800a38c <osSemaphoreAcquire+0xa0>)
 800a34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	f3bf 8f4f 	dsb	sy
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	e010      	b.n	800a380 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6938      	ldr	r0, [r7, #16]
 800a362:	f001 f83f 	bl	800b3e4 <xQueueSemaphoreTake>
 800a366:	4603      	mov	r3, r0
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d009      	beq.n	800a380 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d003      	beq.n	800a37a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a372:	f06f 0301 	mvn.w	r3, #1
 800a376:	617b      	str	r3, [r7, #20]
 800a378:	e002      	b.n	800a380 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a37a:	f06f 0302 	mvn.w	r3, #2
 800a37e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a380:	697b      	ldr	r3, [r7, #20]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3718      	adds	r7, #24
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	e000ed04 	.word	0xe000ed04

0800a390 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d103      	bne.n	800a3ae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a3a6:	f06f 0303 	mvn.w	r3, #3
 800a3aa:	617b      	str	r3, [r7, #20]
 800a3ac:	e02c      	b.n	800a408 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3ae:	f3ef 8305 	mrs	r3, IPSR
 800a3b2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d01a      	beq.n	800a3f0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a3be:	f107 0308 	add.w	r3, r7, #8
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6938      	ldr	r0, [r7, #16]
 800a3c6:	f000 fea0 	bl	800b10a <xQueueGiveFromISR>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d003      	beq.n	800a3d8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a3d0:	f06f 0302 	mvn.w	r3, #2
 800a3d4:	617b      	str	r3, [r7, #20]
 800a3d6:	e017      	b.n	800a408 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d014      	beq.n	800a408 <osSemaphoreRelease+0x78>
 800a3de:	4b0d      	ldr	r3, [pc, #52]	; (800a414 <osSemaphoreRelease+0x84>)
 800a3e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e4:	601a      	str	r2, [r3, #0]
 800a3e6:	f3bf 8f4f 	dsb	sy
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	e00b      	b.n	800a408 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	6938      	ldr	r0, [r7, #16]
 800a3f8:	f000 fcee 	bl	800add8 <xQueueGenericSend>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d002      	beq.n	800a408 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a402:	f06f 0302 	mvn.w	r3, #2
 800a406:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a408:	697b      	ldr	r3, [r7, #20]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3718      	adds	r7, #24
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	e000ed04 	.word	0xe000ed04

0800a418 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800a418:	b580      	push	{r7, lr}
 800a41a:	b086      	sub	sp, #24
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a424:	f3ef 8305 	mrs	r3, IPSR
 800a428:	60fb      	str	r3, [r7, #12]
  return(result);
 800a42a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d003      	beq.n	800a438 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800a430:	f06f 0305 	mvn.w	r3, #5
 800a434:	617b      	str	r3, [r7, #20]
 800a436:	e00e      	b.n	800a456 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d103      	bne.n	800a446 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800a43e:	f06f 0303 	mvn.w	r3, #3
 800a442:	617b      	str	r3, [r7, #20]
 800a444:	e007      	b.n	800a456 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800a446:	6938      	ldr	r0, [r7, #16]
 800a448:	f001 fb0a 	bl	800ba60 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800a450:	6938      	ldr	r0, [r7, #16]
 800a452:	f001 f98f 	bl	800b774 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800a456:	697b      	ldr	r3, [r7, #20]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3718      	adds	r7, #24
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a460:	b580      	push	{r7, lr}
 800a462:	b08a      	sub	sp, #40	; 0x28
 800a464:	af02      	add	r7, sp, #8
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a46c:	2300      	movs	r3, #0
 800a46e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a470:	f3ef 8305 	mrs	r3, IPSR
 800a474:	613b      	str	r3, [r7, #16]
  return(result);
 800a476:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d15f      	bne.n	800a53c <osMessageQueueNew+0xdc>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d05c      	beq.n	800a53c <osMessageQueueNew+0xdc>
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d059      	beq.n	800a53c <osMessageQueueNew+0xdc>
    mem = -1;
 800a488:	f04f 33ff 	mov.w	r3, #4294967295
 800a48c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d029      	beq.n	800a4e8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d012      	beq.n	800a4c2 <osMessageQueueNew+0x62>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	2b4f      	cmp	r3, #79	; 0x4f
 800a4a2:	d90e      	bls.n	800a4c2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00a      	beq.n	800a4c2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	695a      	ldr	r2, [r3, #20]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	68b9      	ldr	r1, [r7, #8]
 800a4b4:	fb01 f303 	mul.w	r3, r1, r3
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d302      	bcc.n	800a4c2 <osMessageQueueNew+0x62>
        mem = 1;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	61bb      	str	r3, [r7, #24]
 800a4c0:	e014      	b.n	800a4ec <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d110      	bne.n	800a4ec <osMessageQueueNew+0x8c>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d10c      	bne.n	800a4ec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d108      	bne.n	800a4ec <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	695b      	ldr	r3, [r3, #20]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d104      	bne.n	800a4ec <osMessageQueueNew+0x8c>
          mem = 0;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	61bb      	str	r3, [r7, #24]
 800a4e6:	e001      	b.n	800a4ec <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d10b      	bne.n	800a50a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	691a      	ldr	r2, [r3, #16]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	9100      	str	r1, [sp, #0]
 800a4fe:	68b9      	ldr	r1, [r7, #8]
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f000 fa73 	bl	800a9ec <xQueueGenericCreateStatic>
 800a506:	61f8      	str	r0, [r7, #28]
 800a508:	e008      	b.n	800a51c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d105      	bne.n	800a51c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a510:	2200      	movs	r2, #0
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f000 fae1 	bl	800aadc <xQueueGenericCreate>
 800a51a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00c      	beq.n	800a53c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d003      	beq.n	800a530 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	617b      	str	r3, [r7, #20]
 800a52e:	e001      	b.n	800a534 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a530:	2300      	movs	r3, #0
 800a532:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a534:	6979      	ldr	r1, [r7, #20]
 800a536:	69f8      	ldr	r0, [r7, #28]
 800a538:	f001 fa68 	bl	800ba0c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a53c:	69fb      	ldr	r3, [r7, #28]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3720      	adds	r7, #32
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
	...

0800a548 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a548:	b580      	push	{r7, lr}
 800a54a:	b088      	sub	sp, #32
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	603b      	str	r3, [r7, #0]
 800a554:	4613      	mov	r3, r2
 800a556:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a55c:	2300      	movs	r3, #0
 800a55e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a560:	f3ef 8305 	mrs	r3, IPSR
 800a564:	617b      	str	r3, [r7, #20]
  return(result);
 800a566:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d028      	beq.n	800a5be <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d005      	beq.n	800a57e <osMessageQueuePut+0x36>
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d002      	beq.n	800a57e <osMessageQueuePut+0x36>
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d003      	beq.n	800a586 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a57e:	f06f 0303 	mvn.w	r3, #3
 800a582:	61fb      	str	r3, [r7, #28]
 800a584:	e038      	b.n	800a5f8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a586:	2300      	movs	r3, #0
 800a588:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a58a:	f107 0210 	add.w	r2, r7, #16
 800a58e:	2300      	movs	r3, #0
 800a590:	68b9      	ldr	r1, [r7, #8]
 800a592:	69b8      	ldr	r0, [r7, #24]
 800a594:	f000 fd1e 	bl	800afd4 <xQueueGenericSendFromISR>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d003      	beq.n	800a5a6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a59e:	f06f 0302 	mvn.w	r3, #2
 800a5a2:	61fb      	str	r3, [r7, #28]
 800a5a4:	e028      	b.n	800a5f8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d025      	beq.n	800a5f8 <osMessageQueuePut+0xb0>
 800a5ac:	4b15      	ldr	r3, [pc, #84]	; (800a604 <osMessageQueuePut+0xbc>)
 800a5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5b2:	601a      	str	r2, [r3, #0]
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	e01c      	b.n	800a5f8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <osMessageQueuePut+0x82>
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d103      	bne.n	800a5d2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a5ca:	f06f 0303 	mvn.w	r3, #3
 800a5ce:	61fb      	str	r3, [r7, #28]
 800a5d0:	e012      	b.n	800a5f8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	68b9      	ldr	r1, [r7, #8]
 800a5d8:	69b8      	ldr	r0, [r7, #24]
 800a5da:	f000 fbfd 	bl	800add8 <xQueueGenericSend>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d009      	beq.n	800a5f8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d003      	beq.n	800a5f2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a5ea:	f06f 0301 	mvn.w	r3, #1
 800a5ee:	61fb      	str	r3, [r7, #28]
 800a5f0:	e002      	b.n	800a5f8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a5f2:	f06f 0302 	mvn.w	r3, #2
 800a5f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a5f8:	69fb      	ldr	r3, [r7, #28]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3720      	adds	r7, #32
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	e000ed04 	.word	0xe000ed04

0800a608 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a608:	b580      	push	{r7, lr}
 800a60a:	b088      	sub	sp, #32
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
 800a614:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a61e:	f3ef 8305 	mrs	r3, IPSR
 800a622:	617b      	str	r3, [r7, #20]
  return(result);
 800a624:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a626:	2b00      	cmp	r3, #0
 800a628:	d028      	beq.n	800a67c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d005      	beq.n	800a63c <osMessageQueueGet+0x34>
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d002      	beq.n	800a63c <osMessageQueueGet+0x34>
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d003      	beq.n	800a644 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a63c:	f06f 0303 	mvn.w	r3, #3
 800a640:	61fb      	str	r3, [r7, #28]
 800a642:	e037      	b.n	800a6b4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a644:	2300      	movs	r3, #0
 800a646:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a648:	f107 0310 	add.w	r3, r7, #16
 800a64c:	461a      	mov	r2, r3
 800a64e:	68b9      	ldr	r1, [r7, #8]
 800a650:	69b8      	ldr	r0, [r7, #24]
 800a652:	f000 ffd3 	bl	800b5fc <xQueueReceiveFromISR>
 800a656:	4603      	mov	r3, r0
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d003      	beq.n	800a664 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a65c:	f06f 0302 	mvn.w	r3, #2
 800a660:	61fb      	str	r3, [r7, #28]
 800a662:	e027      	b.n	800a6b4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d024      	beq.n	800a6b4 <osMessageQueueGet+0xac>
 800a66a:	4b15      	ldr	r3, [pc, #84]	; (800a6c0 <osMessageQueueGet+0xb8>)
 800a66c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a670:	601a      	str	r2, [r3, #0]
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	e01b      	b.n	800a6b4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d002      	beq.n	800a688 <osMessageQueueGet+0x80>
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d103      	bne.n	800a690 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a688:	f06f 0303 	mvn.w	r3, #3
 800a68c:	61fb      	str	r3, [r7, #28]
 800a68e:	e011      	b.n	800a6b4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a690:	683a      	ldr	r2, [r7, #0]
 800a692:	68b9      	ldr	r1, [r7, #8]
 800a694:	69b8      	ldr	r0, [r7, #24]
 800a696:	f000 fdc5 	bl	800b224 <xQueueReceive>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d009      	beq.n	800a6b4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d003      	beq.n	800a6ae <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a6a6:	f06f 0301 	mvn.w	r3, #1
 800a6aa:	61fb      	str	r3, [r7, #28]
 800a6ac:	e002      	b.n	800a6b4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a6ae:	f06f 0302 	mvn.w	r3, #2
 800a6b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a6b4:	69fb      	ldr	r3, [r7, #28]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3720      	adds	r7, #32
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	e000ed04 	.word	0xe000ed04

0800a6c4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d102      	bne.n	800a6dc <osMessageQueueGetCount+0x18>
    count = 0U;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	617b      	str	r3, [r7, #20]
 800a6da:	e00e      	b.n	800a6fa <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6dc:	f3ef 8305 	mrs	r3, IPSR
 800a6e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d004      	beq.n	800a6f2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800a6e8:	6938      	ldr	r0, [r7, #16]
 800a6ea:	f001 f825 	bl	800b738 <uxQueueMessagesWaitingFromISR>
 800a6ee:	6178      	str	r0, [r7, #20]
 800a6f0:	e003      	b.n	800a6fa <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800a6f2:	6938      	ldr	r0, [r7, #16]
 800a6f4:	f001 f802 	bl	800b6fc <uxQueueMessagesWaiting>
 800a6f8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800a6fa:	697b      	ldr	r3, [r7, #20]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3718      	adds	r7, #24
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a710:	f3ef 8305 	mrs	r3, IPSR
 800a714:	60fb      	str	r3, [r7, #12]
  return(result);
 800a716:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d003      	beq.n	800a724 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800a71c:	f06f 0305 	mvn.w	r3, #5
 800a720:	617b      	str	r3, [r7, #20]
 800a722:	e00e      	b.n	800a742 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d103      	bne.n	800a732 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800a72a:	f06f 0303 	mvn.w	r3, #3
 800a72e:	617b      	str	r3, [r7, #20]
 800a730:	e007      	b.n	800a742 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800a732:	6938      	ldr	r0, [r7, #16]
 800a734:	f001 f994 	bl	800ba60 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800a738:	2300      	movs	r3, #0
 800a73a:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800a73c:	6938      	ldr	r0, [r7, #16]
 800a73e:	f001 f819 	bl	800b774 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800a742:	697b      	ldr	r3, [r7, #20]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	4a07      	ldr	r2, [pc, #28]	; (800a778 <vApplicationGetIdleTaskMemory+0x2c>)
 800a75c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	4a06      	ldr	r2, [pc, #24]	; (800a77c <vApplicationGetIdleTaskMemory+0x30>)
 800a762:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2280      	movs	r2, #128	; 0x80
 800a768:	601a      	str	r2, [r3, #0]
}
 800a76a:	bf00      	nop
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	24004fe4 	.word	0x24004fe4
 800a77c:	240050a8 	.word	0x240050a8

0800a780 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	4a07      	ldr	r2, [pc, #28]	; (800a7ac <vApplicationGetTimerTaskMemory+0x2c>)
 800a790:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	4a06      	ldr	r2, [pc, #24]	; (800a7b0 <vApplicationGetTimerTaskMemory+0x30>)
 800a796:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a79e:	601a      	str	r2, [r3, #0]
}
 800a7a0:	bf00      	nop
 800a7a2:	3714      	adds	r7, #20
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	240052a8 	.word	0x240052a8
 800a7b0:	2400536c 	.word	0x2400536c

0800a7b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f103 0208 	add.w	r2, r3, #8
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f103 0208 	add.w	r2, r3, #8
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f103 0208 	add.w	r2, r3, #8
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a802:	bf00      	nop
 800a804:	370c      	adds	r7, #12
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a80e:	b480      	push	{r7}
 800a810:	b085      	sub	sp, #20
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	689a      	ldr	r2, [r3, #8]
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	683a      	ldr	r2, [r7, #0]
 800a832:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	683a      	ldr	r2, [r7, #0]
 800a838:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	1c5a      	adds	r2, r3, #1
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	601a      	str	r2, [r3, #0]
}
 800a84a:	bf00      	nop
 800a84c:	3714      	adds	r7, #20
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a856:	b480      	push	{r7}
 800a858:	b085      	sub	sp, #20
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86c:	d103      	bne.n	800a876 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	60fb      	str	r3, [r7, #12]
 800a874:	e00c      	b.n	800a890 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	3308      	adds	r3, #8
 800a87a:	60fb      	str	r3, [r7, #12]
 800a87c:	e002      	b.n	800a884 <vListInsert+0x2e>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	60fb      	str	r3, [r7, #12]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d2f6      	bcs.n	800a87e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	685a      	ldr	r2, [r3, #4]
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	1c5a      	adds	r2, r3, #1
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	601a      	str	r2, [r3, #0]
}
 800a8bc:	bf00      	nop
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	6892      	ldr	r2, [r2, #8]
 800a8de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	6852      	ldr	r2, [r2, #4]
 800a8e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d103      	bne.n	800a8fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	689a      	ldr	r2, [r3, #8]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	1e5a      	subs	r2, r3, #1
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10a      	bne.n	800a946 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a934:	f383 8811 	msr	BASEPRI, r3
 800a938:	f3bf 8f6f 	isb	sy
 800a93c:	f3bf 8f4f 	dsb	sy
 800a940:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a942:	bf00      	nop
 800a944:	e7fe      	b.n	800a944 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a946:	f002 fddd 	bl	800d504 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a952:	68f9      	ldr	r1, [r7, #12]
 800a954:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a956:	fb01 f303 	mul.w	r3, r1, r3
 800a95a:	441a      	add	r2, r3
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a976:	3b01      	subs	r3, #1
 800a978:	68f9      	ldr	r1, [r7, #12]
 800a97a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a97c:	fb01 f303 	mul.w	r3, r1, r3
 800a980:	441a      	add	r2, r3
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	22ff      	movs	r2, #255	; 0xff
 800a98a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	22ff      	movs	r2, #255	; 0xff
 800a992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d114      	bne.n	800a9c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d01a      	beq.n	800a9da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	3310      	adds	r3, #16
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f001 fd73 	bl	800c494 <xTaskRemoveFromEventList>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d012      	beq.n	800a9da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a9b4:	4b0c      	ldr	r3, [pc, #48]	; (800a9e8 <xQueueGenericReset+0xcc>)
 800a9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ba:	601a      	str	r2, [r3, #0]
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	e009      	b.n	800a9da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	3310      	adds	r3, #16
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7ff fef2 	bl	800a7b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	3324      	adds	r3, #36	; 0x24
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7ff feed 	bl	800a7b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a9da:	f002 fdc3 	bl	800d564 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a9de:	2301      	movs	r3, #1
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	e000ed04 	.word	0xe000ed04

0800a9ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b08e      	sub	sp, #56	; 0x38
 800a9f0:	af02      	add	r7, sp, #8
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
 800a9f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10a      	bne.n	800aa16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800aa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa04:	f383 8811 	msr	BASEPRI, r3
 800aa08:	f3bf 8f6f 	isb	sy
 800aa0c:	f3bf 8f4f 	dsb	sy
 800aa10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa12:	bf00      	nop
 800aa14:	e7fe      	b.n	800aa14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10a      	bne.n	800aa32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa2e:	bf00      	nop
 800aa30:	e7fe      	b.n	800aa30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d002      	beq.n	800aa3e <xQueueGenericCreateStatic+0x52>
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d001      	beq.n	800aa42 <xQueueGenericCreateStatic+0x56>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e000      	b.n	800aa44 <xQueueGenericCreateStatic+0x58>
 800aa42:	2300      	movs	r3, #0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10a      	bne.n	800aa5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800aa48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4c:	f383 8811 	msr	BASEPRI, r3
 800aa50:	f3bf 8f6f 	isb	sy
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	623b      	str	r3, [r7, #32]
}
 800aa5a:	bf00      	nop
 800aa5c:	e7fe      	b.n	800aa5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d102      	bne.n	800aa6a <xQueueGenericCreateStatic+0x7e>
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d101      	bne.n	800aa6e <xQueueGenericCreateStatic+0x82>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e000      	b.n	800aa70 <xQueueGenericCreateStatic+0x84>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10a      	bne.n	800aa8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800aa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa78:	f383 8811 	msr	BASEPRI, r3
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f3bf 8f4f 	dsb	sy
 800aa84:	61fb      	str	r3, [r7, #28]
}
 800aa86:	bf00      	nop
 800aa88:	e7fe      	b.n	800aa88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aa8a:	2350      	movs	r3, #80	; 0x50
 800aa8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	2b50      	cmp	r3, #80	; 0x50
 800aa92:	d00a      	beq.n	800aaaa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800aa94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	61bb      	str	r3, [r7, #24]
}
 800aaa6:	bf00      	nop
 800aaa8:	e7fe      	b.n	800aaa8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aaaa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00d      	beq.n	800aad2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aabe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	4613      	mov	r3, r2
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	68b9      	ldr	r1, [r7, #8]
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f000 f83f 	bl	800ab50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3730      	adds	r7, #48	; 0x30
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b08a      	sub	sp, #40	; 0x28
 800aae0:	af02      	add	r7, sp, #8
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	4613      	mov	r3, r2
 800aae8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10a      	bne.n	800ab06 <xQueueGenericCreate+0x2a>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	613b      	str	r3, [r7, #16]
}
 800ab02:	bf00      	nop
 800ab04:	e7fe      	b.n	800ab04 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	68ba      	ldr	r2, [r7, #8]
 800ab0a:	fb02 f303 	mul.w	r3, r2, r3
 800ab0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	3350      	adds	r3, #80	; 0x50
 800ab14:	4618      	mov	r0, r3
 800ab16:	f002 fe17 	bl	800d748 <pvPortMalloc>
 800ab1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d011      	beq.n	800ab46 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	3350      	adds	r3, #80	; 0x50
 800ab2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab34:	79fa      	ldrb	r2, [r7, #7]
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	697a      	ldr	r2, [r7, #20]
 800ab3e:	68b9      	ldr	r1, [r7, #8]
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f000 f805 	bl	800ab50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab46:	69bb      	ldr	r3, [r7, #24]
	}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3720      	adds	r7, #32
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
 800ab5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d103      	bne.n	800ab6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	69ba      	ldr	r2, [r7, #24]
 800ab68:	601a      	str	r2, [r3, #0]
 800ab6a:	e002      	b.n	800ab72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	68fa      	ldr	r2, [r7, #12]
 800ab76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	68ba      	ldr	r2, [r7, #8]
 800ab7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab7e:	2101      	movs	r1, #1
 800ab80:	69b8      	ldr	r0, [r7, #24]
 800ab82:	f7ff fecb 	bl	800a91c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	78fa      	ldrb	r2, [r7, #3]
 800ab8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab8e:	bf00      	nop
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b082      	sub	sp, #8
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00e      	beq.n	800abc2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800abb6:	2300      	movs	r3, #0
 800abb8:	2200      	movs	r2, #0
 800abba:	2100      	movs	r1, #0
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 f90b 	bl	800add8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800abc2:	bf00      	nop
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b086      	sub	sp, #24
 800abce:	af00      	add	r7, sp, #0
 800abd0:	4603      	mov	r3, r0
 800abd2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800abd4:	2301      	movs	r3, #1
 800abd6:	617b      	str	r3, [r7, #20]
 800abd8:	2300      	movs	r3, #0
 800abda:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800abdc:	79fb      	ldrb	r3, [r7, #7]
 800abde:	461a      	mov	r2, r3
 800abe0:	6939      	ldr	r1, [r7, #16]
 800abe2:	6978      	ldr	r0, [r7, #20]
 800abe4:	f7ff ff7a 	bl	800aadc <xQueueGenericCreate>
 800abe8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	f7ff ffd3 	bl	800ab96 <prvInitialiseMutex>

		return xNewQueue;
 800abf0:	68fb      	ldr	r3, [r7, #12]
	}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b088      	sub	sp, #32
 800abfe:	af02      	add	r7, sp, #8
 800ac00:	4603      	mov	r3, r0
 800ac02:	6039      	str	r1, [r7, #0]
 800ac04:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ac06:	2301      	movs	r3, #1
 800ac08:	617b      	str	r3, [r7, #20]
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ac0e:	79fb      	ldrb	r3, [r7, #7]
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	2200      	movs	r2, #0
 800ac16:	6939      	ldr	r1, [r7, #16]
 800ac18:	6978      	ldr	r0, [r7, #20]
 800ac1a:	f7ff fee7 	bl	800a9ec <xQueueGenericCreateStatic>
 800ac1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f7ff ffb8 	bl	800ab96 <prvInitialiseMutex>

		return xNewQueue;
 800ac26:	68fb      	ldr	r3, [r7, #12]
	}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3718      	adds	r7, #24
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ac30:	b590      	push	{r4, r7, lr}
 800ac32:	b087      	sub	sp, #28
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d10a      	bne.n	800ac58 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800ac42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac46:	f383 8811 	msr	BASEPRI, r3
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	60fb      	str	r3, [r7, #12]
}
 800ac54:	bf00      	nop
 800ac56:	e7fe      	b.n	800ac56 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	689c      	ldr	r4, [r3, #8]
 800ac5c:	f001 fddc 	bl	800c818 <xTaskGetCurrentTaskHandle>
 800ac60:	4603      	mov	r3, r0
 800ac62:	429c      	cmp	r4, r3
 800ac64:	d111      	bne.n	800ac8a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	1e5a      	subs	r2, r3, #1
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d105      	bne.n	800ac84 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ac78:	2300      	movs	r3, #0
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	6938      	ldr	r0, [r7, #16]
 800ac80:	f000 f8aa 	bl	800add8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800ac84:	2301      	movs	r3, #1
 800ac86:	617b      	str	r3, [r7, #20]
 800ac88:	e001      	b.n	800ac8e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800ac8e:	697b      	ldr	r3, [r7, #20]
	}
 800ac90:	4618      	mov	r0, r3
 800ac92:	371c      	adds	r7, #28
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd90      	pop	{r4, r7, pc}

0800ac98 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ac98:	b590      	push	{r4, r7, lr}
 800ac9a:	b087      	sub	sp, #28
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10a      	bne.n	800acc2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	60fb      	str	r3, [r7, #12]
}
 800acbe:	bf00      	nop
 800acc0:	e7fe      	b.n	800acc0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	689c      	ldr	r4, [r3, #8]
 800acc6:	f001 fda7 	bl	800c818 <xTaskGetCurrentTaskHandle>
 800acca:	4603      	mov	r3, r0
 800accc:	429c      	cmp	r4, r3
 800acce:	d107      	bne.n	800ace0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	1c5a      	adds	r2, r3, #1
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800acda:	2301      	movs	r3, #1
 800acdc:	617b      	str	r3, [r7, #20]
 800acde:	e00c      	b.n	800acfa <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ace0:	6839      	ldr	r1, [r7, #0]
 800ace2:	6938      	ldr	r0, [r7, #16]
 800ace4:	f000 fb7e 	bl	800b3e4 <xQueueSemaphoreTake>
 800ace8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d004      	beq.n	800acfa <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	1c5a      	adds	r2, r3, #1
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800acfa:	697b      	ldr	r3, [r7, #20]
	}
 800acfc:	4618      	mov	r0, r3
 800acfe:	371c      	adds	r7, #28
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd90      	pop	{r4, r7, pc}

0800ad04 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b08a      	sub	sp, #40	; 0x28
 800ad08:	af02      	add	r7, sp, #8
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10a      	bne.n	800ad2c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	61bb      	str	r3, [r7, #24]
}
 800ad28:	bf00      	nop
 800ad2a:	e7fe      	b.n	800ad2a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ad2c:	68ba      	ldr	r2, [r7, #8]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d90a      	bls.n	800ad4a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800ad34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad38:	f383 8811 	msr	BASEPRI, r3
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	f3bf 8f4f 	dsb	sy
 800ad44:	617b      	str	r3, [r7, #20]
}
 800ad46:	bf00      	nop
 800ad48:	e7fe      	b.n	800ad48 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ad4a:	2302      	movs	r3, #2
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2200      	movs	r2, #0
 800ad52:	2100      	movs	r1, #0
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f7ff fe49 	bl	800a9ec <xQueueGenericCreateStatic>
 800ad5a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d002      	beq.n	800ad68 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ad68:	69fb      	ldr	r3, [r7, #28]
	}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3720      	adds	r7, #32
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b086      	sub	sp, #24
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10a      	bne.n	800ad98 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	613b      	str	r3, [r7, #16]
}
 800ad94:	bf00      	nop
 800ad96:	e7fe      	b.n	800ad96 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ad98:	683a      	ldr	r2, [r7, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d90a      	bls.n	800adb6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	60fb      	str	r3, [r7, #12]
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800adb6:	2202      	movs	r2, #2
 800adb8:	2100      	movs	r1, #0
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f7ff fe8e 	bl	800aadc <xQueueGenericCreate>
 800adc0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d002      	beq.n	800adce <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800adce:	697b      	ldr	r3, [r7, #20]
	}
 800add0:	4618      	mov	r0, r3
 800add2:	3718      	adds	r7, #24
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b08e      	sub	sp, #56	; 0x38
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
 800ade4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ade6:	2300      	movs	r3, #0
 800ade8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800adee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10a      	bne.n	800ae0a <xQueueGenericSend+0x32>
	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae06:	bf00      	nop
 800ae08:	e7fe      	b.n	800ae08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d103      	bne.n	800ae18 <xQueueGenericSend+0x40>
 800ae10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d101      	bne.n	800ae1c <xQueueGenericSend+0x44>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e000      	b.n	800ae1e <xQueueGenericSend+0x46>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d10a      	bne.n	800ae38 <xQueueGenericSend+0x60>
	__asm volatile
 800ae22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae26:	f383 8811 	msr	BASEPRI, r3
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae34:	bf00      	nop
 800ae36:	e7fe      	b.n	800ae36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d103      	bne.n	800ae46 <xQueueGenericSend+0x6e>
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d101      	bne.n	800ae4a <xQueueGenericSend+0x72>
 800ae46:	2301      	movs	r3, #1
 800ae48:	e000      	b.n	800ae4c <xQueueGenericSend+0x74>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10a      	bne.n	800ae66 <xQueueGenericSend+0x8e>
	__asm volatile
 800ae50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	623b      	str	r3, [r7, #32]
}
 800ae62:	bf00      	nop
 800ae64:	e7fe      	b.n	800ae64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae66:	f001 fce7 	bl	800c838 <xTaskGetSchedulerState>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d102      	bne.n	800ae76 <xQueueGenericSend+0x9e>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d101      	bne.n	800ae7a <xQueueGenericSend+0xa2>
 800ae76:	2301      	movs	r3, #1
 800ae78:	e000      	b.n	800ae7c <xQueueGenericSend+0xa4>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10a      	bne.n	800ae96 <xQueueGenericSend+0xbe>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	61fb      	str	r3, [r7, #28]
}
 800ae92:	bf00      	nop
 800ae94:	e7fe      	b.n	800ae94 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae96:	f002 fb35 	bl	800d504 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d302      	bcc.n	800aeac <xQueueGenericSend+0xd4>
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d129      	bne.n	800af00 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aeac:	683a      	ldr	r2, [r7, #0]
 800aeae:	68b9      	ldr	r1, [r7, #8]
 800aeb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeb2:	f000 fc9a 	bl	800b7ea <prvCopyDataToQueue>
 800aeb6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d010      	beq.n	800aee2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec2:	3324      	adds	r3, #36	; 0x24
 800aec4:	4618      	mov	r0, r3
 800aec6:	f001 fae5 	bl	800c494 <xTaskRemoveFromEventList>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d013      	beq.n	800aef8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aed0:	4b3f      	ldr	r3, [pc, #252]	; (800afd0 <xQueueGenericSend+0x1f8>)
 800aed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aed6:	601a      	str	r2, [r3, #0]
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	e00a      	b.n	800aef8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d007      	beq.n	800aef8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aee8:	4b39      	ldr	r3, [pc, #228]	; (800afd0 <xQueueGenericSend+0x1f8>)
 800aeea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeee:	601a      	str	r2, [r3, #0]
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aef8:	f002 fb34 	bl	800d564 <vPortExitCritical>
				return pdPASS;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e063      	b.n	800afc8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d103      	bne.n	800af0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af06:	f002 fb2d 	bl	800d564 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af0a:	2300      	movs	r3, #0
 800af0c:	e05c      	b.n	800afc8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af10:	2b00      	cmp	r3, #0
 800af12:	d106      	bne.n	800af22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af14:	f107 0314 	add.w	r3, r7, #20
 800af18:	4618      	mov	r0, r3
 800af1a:	f001 fb1f 	bl	800c55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af1e:	2301      	movs	r3, #1
 800af20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af22:	f002 fb1f 	bl	800d564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af26:	f001 f85d 	bl	800bfe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af2a:	f002 faeb 	bl	800d504 <vPortEnterCritical>
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af34:	b25b      	sxtb	r3, r3
 800af36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3a:	d103      	bne.n	800af44 <xQueueGenericSend+0x16c>
 800af3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3e:	2200      	movs	r2, #0
 800af40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af4a:	b25b      	sxtb	r3, r3
 800af4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af50:	d103      	bne.n	800af5a <xQueueGenericSend+0x182>
 800af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af54:	2200      	movs	r2, #0
 800af56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af5a:	f002 fb03 	bl	800d564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af5e:	1d3a      	adds	r2, r7, #4
 800af60:	f107 0314 	add.w	r3, r7, #20
 800af64:	4611      	mov	r1, r2
 800af66:	4618      	mov	r0, r3
 800af68:	f001 fb0e 	bl	800c588 <xTaskCheckForTimeOut>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d124      	bne.n	800afbc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af74:	f000 fd31 	bl	800b9da <prvIsQueueFull>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d018      	beq.n	800afb0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af80:	3310      	adds	r3, #16
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	4611      	mov	r1, r2
 800af86:	4618      	mov	r0, r3
 800af88:	f001 fa34 	bl	800c3f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af8e:	f000 fcbc 	bl	800b90a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af92:	f001 f835 	bl	800c000 <xTaskResumeAll>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f47f af7c 	bne.w	800ae96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af9e:	4b0c      	ldr	r3, [pc, #48]	; (800afd0 <xQueueGenericSend+0x1f8>)
 800afa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afa4:	601a      	str	r2, [r3, #0]
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	e772      	b.n	800ae96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800afb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afb2:	f000 fcaa 	bl	800b90a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afb6:	f001 f823 	bl	800c000 <xTaskResumeAll>
 800afba:	e76c      	b.n	800ae96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800afbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afbe:	f000 fca4 	bl	800b90a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afc2:	f001 f81d 	bl	800c000 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800afc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3738      	adds	r7, #56	; 0x38
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	e000ed04 	.word	0xe000ed04

0800afd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b090      	sub	sp, #64	; 0x40
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
 800afe0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800afe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10a      	bne.n	800b002 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800afec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800affe:	bf00      	nop
 800b000:	e7fe      	b.n	800b000 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d103      	bne.n	800b010 <xQueueGenericSendFromISR+0x3c>
 800b008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d101      	bne.n	800b014 <xQueueGenericSendFromISR+0x40>
 800b010:	2301      	movs	r3, #1
 800b012:	e000      	b.n	800b016 <xQueueGenericSendFromISR+0x42>
 800b014:	2300      	movs	r3, #0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10a      	bne.n	800b030 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01e:	f383 8811 	msr	BASEPRI, r3
 800b022:	f3bf 8f6f 	isb	sy
 800b026:	f3bf 8f4f 	dsb	sy
 800b02a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b02c:	bf00      	nop
 800b02e:	e7fe      	b.n	800b02e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	2b02      	cmp	r3, #2
 800b034:	d103      	bne.n	800b03e <xQueueGenericSendFromISR+0x6a>
 800b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d101      	bne.n	800b042 <xQueueGenericSendFromISR+0x6e>
 800b03e:	2301      	movs	r3, #1
 800b040:	e000      	b.n	800b044 <xQueueGenericSendFromISR+0x70>
 800b042:	2300      	movs	r3, #0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10a      	bne.n	800b05e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04c:	f383 8811 	msr	BASEPRI, r3
 800b050:	f3bf 8f6f 	isb	sy
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	623b      	str	r3, [r7, #32]
}
 800b05a:	bf00      	nop
 800b05c:	e7fe      	b.n	800b05c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b05e:	f002 fb33 	bl	800d6c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b062:	f3ef 8211 	mrs	r2, BASEPRI
 800b066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06a:	f383 8811 	msr	BASEPRI, r3
 800b06e:	f3bf 8f6f 	isb	sy
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	61fa      	str	r2, [r7, #28]
 800b078:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b07a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b07c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b086:	429a      	cmp	r2, r3
 800b088:	d302      	bcc.n	800b090 <xQueueGenericSendFromISR+0xbc>
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	2b02      	cmp	r3, #2
 800b08e:	d12f      	bne.n	800b0f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	68b9      	ldr	r1, [r7, #8]
 800b0a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0a6:	f000 fba0 	bl	800b7ea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b0aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b2:	d112      	bne.n	800b0da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d016      	beq.n	800b0ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0be:	3324      	adds	r3, #36	; 0x24
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f001 f9e7 	bl	800c494 <xTaskRemoveFromEventList>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00e      	beq.n	800b0ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00b      	beq.n	800b0ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	601a      	str	r2, [r3, #0]
 800b0d8:	e007      	b.n	800b0ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b0da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b0de:	3301      	adds	r3, #1
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	b25a      	sxtb	r2, r3
 800b0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b0ee:	e001      	b.n	800b0f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b0fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b102:	4618      	mov	r0, r3
 800b104:	3740      	adds	r7, #64	; 0x40
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b08e      	sub	sp, #56	; 0x38
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d10a      	bne.n	800b134 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b122:	f383 8811 	msr	BASEPRI, r3
 800b126:	f3bf 8f6f 	isb	sy
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	623b      	str	r3, [r7, #32]
}
 800b130:	bf00      	nop
 800b132:	e7fe      	b.n	800b132 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00a      	beq.n	800b152 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	61fb      	str	r3, [r7, #28]
}
 800b14e:	bf00      	nop
 800b150:	e7fe      	b.n	800b150 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d103      	bne.n	800b162 <xQueueGiveFromISR+0x58>
 800b15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <xQueueGiveFromISR+0x5c>
 800b162:	2301      	movs	r3, #1
 800b164:	e000      	b.n	800b168 <xQueueGiveFromISR+0x5e>
 800b166:	2300      	movs	r3, #0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10a      	bne.n	800b182 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b170:	f383 8811 	msr	BASEPRI, r3
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	61bb      	str	r3, [r7, #24]
}
 800b17e:	bf00      	nop
 800b180:	e7fe      	b.n	800b180 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b182:	f002 faa1 	bl	800d6c8 <vPortValidateInterruptPriority>
	__asm volatile
 800b186:	f3ef 8211 	mrs	r2, BASEPRI
 800b18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	617a      	str	r2, [r7, #20]
 800b19c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b19e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d22b      	bcs.n	800b20a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1be:	1c5a      	adds	r2, r3, #1
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b1c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1cc:	d112      	bne.n	800b1f4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d016      	beq.n	800b204 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d8:	3324      	adds	r3, #36	; 0x24
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f001 f95a 	bl	800c494 <xTaskRemoveFromEventList>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00e      	beq.n	800b204 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00b      	beq.n	800b204 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	601a      	str	r2, [r3, #0]
 800b1f2:	e007      	b.n	800b204 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	b25a      	sxtb	r2, r3
 800b1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b204:	2301      	movs	r3, #1
 800b206:	637b      	str	r3, [r7, #52]	; 0x34
 800b208:	e001      	b.n	800b20e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b20a:	2300      	movs	r3, #0
 800b20c:	637b      	str	r3, [r7, #52]	; 0x34
 800b20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b210:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f383 8811 	msr	BASEPRI, r3
}
 800b218:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3738      	adds	r7, #56	; 0x38
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b08c      	sub	sp, #48	; 0x30
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b230:	2300      	movs	r3, #0
 800b232:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d10a      	bne.n	800b254 <xQueueReceive+0x30>
	__asm volatile
 800b23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b242:	f383 8811 	msr	BASEPRI, r3
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	623b      	str	r3, [r7, #32]
}
 800b250:	bf00      	nop
 800b252:	e7fe      	b.n	800b252 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d103      	bne.n	800b262 <xQueueReceive+0x3e>
 800b25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d101      	bne.n	800b266 <xQueueReceive+0x42>
 800b262:	2301      	movs	r3, #1
 800b264:	e000      	b.n	800b268 <xQueueReceive+0x44>
 800b266:	2300      	movs	r3, #0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d10a      	bne.n	800b282 <xQueueReceive+0x5e>
	__asm volatile
 800b26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b270:	f383 8811 	msr	BASEPRI, r3
 800b274:	f3bf 8f6f 	isb	sy
 800b278:	f3bf 8f4f 	dsb	sy
 800b27c:	61fb      	str	r3, [r7, #28]
}
 800b27e:	bf00      	nop
 800b280:	e7fe      	b.n	800b280 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b282:	f001 fad9 	bl	800c838 <xTaskGetSchedulerState>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d102      	bne.n	800b292 <xQueueReceive+0x6e>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d101      	bne.n	800b296 <xQueueReceive+0x72>
 800b292:	2301      	movs	r3, #1
 800b294:	e000      	b.n	800b298 <xQueueReceive+0x74>
 800b296:	2300      	movs	r3, #0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10a      	bne.n	800b2b2 <xQueueReceive+0x8e>
	__asm volatile
 800b29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a0:	f383 8811 	msr	BASEPRI, r3
 800b2a4:	f3bf 8f6f 	isb	sy
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	61bb      	str	r3, [r7, #24]
}
 800b2ae:	bf00      	nop
 800b2b0:	e7fe      	b.n	800b2b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2b2:	f002 f927 	bl	800d504 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d01f      	beq.n	800b302 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b2c2:	68b9      	ldr	r1, [r7, #8]
 800b2c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2c6:	f000 fafa 	bl	800b8be <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2cc:	1e5a      	subs	r2, r3, #1
 800b2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d4:	691b      	ldr	r3, [r3, #16]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00f      	beq.n	800b2fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2dc:	3310      	adds	r3, #16
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f001 f8d8 	bl	800c494 <xTaskRemoveFromEventList>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d007      	beq.n	800b2fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b2ea:	4b3d      	ldr	r3, [pc, #244]	; (800b3e0 <xQueueReceive+0x1bc>)
 800b2ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2f0:	601a      	str	r2, [r3, #0]
 800b2f2:	f3bf 8f4f 	dsb	sy
 800b2f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b2fa:	f002 f933 	bl	800d564 <vPortExitCritical>
				return pdPASS;
 800b2fe:	2301      	movs	r3, #1
 800b300:	e069      	b.n	800b3d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d103      	bne.n	800b310 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b308:	f002 f92c 	bl	800d564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b30c:	2300      	movs	r3, #0
 800b30e:	e062      	b.n	800b3d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b312:	2b00      	cmp	r3, #0
 800b314:	d106      	bne.n	800b324 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b316:	f107 0310 	add.w	r3, r7, #16
 800b31a:	4618      	mov	r0, r3
 800b31c:	f001 f91e 	bl	800c55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b320:	2301      	movs	r3, #1
 800b322:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b324:	f002 f91e 	bl	800d564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b328:	f000 fe5c 	bl	800bfe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b32c:	f002 f8ea 	bl	800d504 <vPortEnterCritical>
 800b330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b332:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b336:	b25b      	sxtb	r3, r3
 800b338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b33c:	d103      	bne.n	800b346 <xQueueReceive+0x122>
 800b33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b340:	2200      	movs	r2, #0
 800b342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b34c:	b25b      	sxtb	r3, r3
 800b34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b352:	d103      	bne.n	800b35c <xQueueReceive+0x138>
 800b354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b356:	2200      	movs	r2, #0
 800b358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b35c:	f002 f902 	bl	800d564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b360:	1d3a      	adds	r2, r7, #4
 800b362:	f107 0310 	add.w	r3, r7, #16
 800b366:	4611      	mov	r1, r2
 800b368:	4618      	mov	r0, r3
 800b36a:	f001 f90d 	bl	800c588 <xTaskCheckForTimeOut>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d123      	bne.n	800b3bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b376:	f000 fb1a 	bl	800b9ae <prvIsQueueEmpty>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d017      	beq.n	800b3b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b382:	3324      	adds	r3, #36	; 0x24
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	4611      	mov	r1, r2
 800b388:	4618      	mov	r0, r3
 800b38a:	f001 f833 	bl	800c3f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b38e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b390:	f000 fabb 	bl	800b90a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b394:	f000 fe34 	bl	800c000 <xTaskResumeAll>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d189      	bne.n	800b2b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b39e:	4b10      	ldr	r3, [pc, #64]	; (800b3e0 <xQueueReceive+0x1bc>)
 800b3a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	f3bf 8f6f 	isb	sy
 800b3ae:	e780      	b.n	800b2b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b3b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3b2:	f000 faaa 	bl	800b90a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b3b6:	f000 fe23 	bl	800c000 <xTaskResumeAll>
 800b3ba:	e77a      	b.n	800b2b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b3bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3be:	f000 faa4 	bl	800b90a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3c2:	f000 fe1d 	bl	800c000 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3c8:	f000 faf1 	bl	800b9ae <prvIsQueueEmpty>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f43f af6f 	beq.w	800b2b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b3d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3730      	adds	r7, #48	; 0x30
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	e000ed04 	.word	0xe000ed04

0800b3e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b08e      	sub	sp, #56	; 0x38
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d10a      	bne.n	800b416 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b404:	f383 8811 	msr	BASEPRI, r3
 800b408:	f3bf 8f6f 	isb	sy
 800b40c:	f3bf 8f4f 	dsb	sy
 800b410:	623b      	str	r3, [r7, #32]
}
 800b412:	bf00      	nop
 800b414:	e7fe      	b.n	800b414 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00a      	beq.n	800b434 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	61fb      	str	r3, [r7, #28]
}
 800b430:	bf00      	nop
 800b432:	e7fe      	b.n	800b432 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b434:	f001 fa00 	bl	800c838 <xTaskGetSchedulerState>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d102      	bne.n	800b444 <xQueueSemaphoreTake+0x60>
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d101      	bne.n	800b448 <xQueueSemaphoreTake+0x64>
 800b444:	2301      	movs	r3, #1
 800b446:	e000      	b.n	800b44a <xQueueSemaphoreTake+0x66>
 800b448:	2300      	movs	r3, #0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10a      	bne.n	800b464 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	61bb      	str	r3, [r7, #24]
}
 800b460:	bf00      	nop
 800b462:	e7fe      	b.n	800b462 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b464:	f002 f84e 	bl	800d504 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b470:	2b00      	cmp	r3, #0
 800b472:	d024      	beq.n	800b4be <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b476:	1e5a      	subs	r2, r3, #1
 800b478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d104      	bne.n	800b48e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b484:	f001 fb4e 	bl	800cb24 <pvTaskIncrementMutexHeldCount>
 800b488:	4602      	mov	r2, r0
 800b48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00f      	beq.n	800b4b6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b498:	3310      	adds	r3, #16
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 fffa 	bl	800c494 <xTaskRemoveFromEventList>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d007      	beq.n	800b4b6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b4a6:	4b54      	ldr	r3, [pc, #336]	; (800b5f8 <xQueueSemaphoreTake+0x214>)
 800b4a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ac:	601a      	str	r2, [r3, #0]
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b4b6:	f002 f855 	bl	800d564 <vPortExitCritical>
				return pdPASS;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e097      	b.n	800b5ee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d111      	bne.n	800b4e8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00a      	beq.n	800b4e0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ce:	f383 8811 	msr	BASEPRI, r3
 800b4d2:	f3bf 8f6f 	isb	sy
 800b4d6:	f3bf 8f4f 	dsb	sy
 800b4da:	617b      	str	r3, [r7, #20]
}
 800b4dc:	bf00      	nop
 800b4de:	e7fe      	b.n	800b4de <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b4e0:	f002 f840 	bl	800d564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	e082      	b.n	800b5ee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d106      	bne.n	800b4fc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b4ee:	f107 030c 	add.w	r3, r7, #12
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f001 f832 	bl	800c55c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b4fc:	f002 f832 	bl	800d564 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b500:	f000 fd70 	bl	800bfe4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b504:	f001 fffe 	bl	800d504 <vPortEnterCritical>
 800b508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b50e:	b25b      	sxtb	r3, r3
 800b510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b514:	d103      	bne.n	800b51e <xQueueSemaphoreTake+0x13a>
 800b516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b524:	b25b      	sxtb	r3, r3
 800b526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52a:	d103      	bne.n	800b534 <xQueueSemaphoreTake+0x150>
 800b52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52e:	2200      	movs	r2, #0
 800b530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b534:	f002 f816 	bl	800d564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b538:	463a      	mov	r2, r7
 800b53a:	f107 030c 	add.w	r3, r7, #12
 800b53e:	4611      	mov	r1, r2
 800b540:	4618      	mov	r0, r3
 800b542:	f001 f821 	bl	800c588 <xTaskCheckForTimeOut>
 800b546:	4603      	mov	r3, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d132      	bne.n	800b5b2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b54c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b54e:	f000 fa2e 	bl	800b9ae <prvIsQueueEmpty>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d026      	beq.n	800b5a6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d109      	bne.n	800b574 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b560:	f001 ffd0 	bl	800d504 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	4618      	mov	r0, r3
 800b56a:	f001 f983 	bl	800c874 <xTaskPriorityInherit>
 800b56e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b570:	f001 fff8 	bl	800d564 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b576:	3324      	adds	r3, #36	; 0x24
 800b578:	683a      	ldr	r2, [r7, #0]
 800b57a:	4611      	mov	r1, r2
 800b57c:	4618      	mov	r0, r3
 800b57e:	f000 ff39 	bl	800c3f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b582:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b584:	f000 f9c1 	bl	800b90a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b588:	f000 fd3a 	bl	800c000 <xTaskResumeAll>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	f47f af68 	bne.w	800b464 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b594:	4b18      	ldr	r3, [pc, #96]	; (800b5f8 <xQueueSemaphoreTake+0x214>)
 800b596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	f3bf 8f6f 	isb	sy
 800b5a4:	e75e      	b.n	800b464 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b5a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5a8:	f000 f9af 	bl	800b90a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5ac:	f000 fd28 	bl	800c000 <xTaskResumeAll>
 800b5b0:	e758      	b.n	800b464 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b5b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5b4:	f000 f9a9 	bl	800b90a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5b8:	f000 fd22 	bl	800c000 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5be:	f000 f9f6 	bl	800b9ae <prvIsQueueEmpty>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f43f af4d 	beq.w	800b464 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00d      	beq.n	800b5ec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b5d0:	f001 ff98 	bl	800d504 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b5d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5d6:	f000 f8f0 	bl	800b7ba <prvGetDisinheritPriorityAfterTimeout>
 800b5da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f001 fa1c 	bl	800ca20 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b5e8:	f001 ffbc 	bl	800d564 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b5ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3738      	adds	r7, #56	; 0x38
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	e000ed04 	.word	0xe000ed04

0800b5fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b08e      	sub	sp, #56	; 0x38
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d10a      	bne.n	800b628 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b616:	f383 8811 	msr	BASEPRI, r3
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	623b      	str	r3, [r7, #32]
}
 800b624:	bf00      	nop
 800b626:	e7fe      	b.n	800b626 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d103      	bne.n	800b636 <xQueueReceiveFromISR+0x3a>
 800b62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b632:	2b00      	cmp	r3, #0
 800b634:	d101      	bne.n	800b63a <xQueueReceiveFromISR+0x3e>
 800b636:	2301      	movs	r3, #1
 800b638:	e000      	b.n	800b63c <xQueueReceiveFromISR+0x40>
 800b63a:	2300      	movs	r3, #0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d10a      	bne.n	800b656 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b644:	f383 8811 	msr	BASEPRI, r3
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	61fb      	str	r3, [r7, #28]
}
 800b652:	bf00      	nop
 800b654:	e7fe      	b.n	800b654 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b656:	f002 f837 	bl	800d6c8 <vPortValidateInterruptPriority>
	__asm volatile
 800b65a:	f3ef 8211 	mrs	r2, BASEPRI
 800b65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	61ba      	str	r2, [r7, #24]
 800b670:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b672:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b674:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d02f      	beq.n	800b6e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b684:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b68c:	68b9      	ldr	r1, [r7, #8]
 800b68e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b690:	f000 f915 	bl	800b8be <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b696:	1e5a      	subs	r2, r3, #1
 800b698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b69c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a4:	d112      	bne.n	800b6cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d016      	beq.n	800b6dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	3310      	adds	r3, #16
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f000 feee 	bl	800c494 <xTaskRemoveFromEventList>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00e      	beq.n	800b6dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d00b      	beq.n	800b6dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	601a      	str	r2, [r3, #0]
 800b6ca:	e007      	b.n	800b6dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b6cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	b25a      	sxtb	r2, r3
 800b6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	637b      	str	r3, [r7, #52]	; 0x34
 800b6e0:	e001      	b.n	800b6e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	f383 8811 	msr	BASEPRI, r3
}
 800b6f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3738      	adds	r7, #56	; 0x38
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d10a      	bne.n	800b720 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800b70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	60bb      	str	r3, [r7, #8]
}
 800b71c:	bf00      	nop
 800b71e:	e7fe      	b.n	800b71e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800b720:	f001 fef0 	bl	800d504 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b728:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b72a:	f001 ff1b 	bl	800d564 <vPortExitCritical>

	return uxReturn;
 800b72e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b730:	4618      	mov	r0, r3
 800b732:	3710      	adds	r7, #16
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b738:	b480      	push	{r7}
 800b73a:	b087      	sub	sp, #28
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10a      	bne.n	800b760 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800b74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74e:	f383 8811 	msr	BASEPRI, r3
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	60fb      	str	r3, [r7, #12]
}
 800b75c:	bf00      	nop
 800b75e:	e7fe      	b.n	800b75e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b764:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b766:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b768:	4618      	mov	r0, r3
 800b76a:	371c      	adds	r7, #28
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10a      	bne.n	800b79c <vQueueDelete+0x28>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	60bb      	str	r3, [r7, #8]
}
 800b798:	bf00      	nop
 800b79a:	e7fe      	b.n	800b79a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f000 f95f 	bl	800ba60 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d102      	bne.n	800b7b2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f002 f897 	bl	800d8e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b7b2:	bf00      	nop
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b7ba:	b480      	push	{r7}
 800b7bc:	b085      	sub	sp, #20
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d006      	beq.n	800b7d8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b7d4:	60fb      	str	r3, [r7, #12]
 800b7d6:	e001      	b.n	800b7dc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
	}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3714      	adds	r7, #20
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr

0800b7ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b086      	sub	sp, #24
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	60f8      	str	r0, [r7, #12]
 800b7f2:	60b9      	str	r1, [r7, #8]
 800b7f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b804:	2b00      	cmp	r3, #0
 800b806:	d10d      	bne.n	800b824 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d14d      	bne.n	800b8ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	4618      	mov	r0, r3
 800b816:	f001 f895 	bl	800c944 <xTaskPriorityDisinherit>
 800b81a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2200      	movs	r2, #0
 800b820:	609a      	str	r2, [r3, #8]
 800b822:	e043      	b.n	800b8ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d119      	bne.n	800b85e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6858      	ldr	r0, [r3, #4]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b832:	461a      	mov	r2, r3
 800b834:	68b9      	ldr	r1, [r7, #8]
 800b836:	f00f ff50 	bl	801b6da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	685a      	ldr	r2, [r3, #4]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b842:	441a      	add	r2, r3
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	685a      	ldr	r2, [r3, #4]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	429a      	cmp	r2, r3
 800b852:	d32b      	bcc.n	800b8ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	605a      	str	r2, [r3, #4]
 800b85c:	e026      	b.n	800b8ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	68d8      	ldr	r0, [r3, #12]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b866:	461a      	mov	r2, r3
 800b868:	68b9      	ldr	r1, [r7, #8]
 800b86a:	f00f ff36 	bl	801b6da <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	68da      	ldr	r2, [r3, #12]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b876:	425b      	negs	r3, r3
 800b878:	441a      	add	r2, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	68da      	ldr	r2, [r3, #12]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	429a      	cmp	r2, r3
 800b888:	d207      	bcs.n	800b89a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	689a      	ldr	r2, [r3, #8]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b892:	425b      	negs	r3, r3
 800b894:	441a      	add	r2, r3
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	d105      	bne.n	800b8ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d002      	beq.n	800b8ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	1c5a      	adds	r2, r3, #1
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b8b4:	697b      	ldr	r3, [r7, #20]
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3718      	adds	r7, #24
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b082      	sub	sp, #8
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
 800b8c6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d018      	beq.n	800b902 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	68da      	ldr	r2, [r3, #12]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d8:	441a      	add	r2, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	68da      	ldr	r2, [r3, #12]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d303      	bcc.n	800b8f2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	68d9      	ldr	r1, [r3, #12]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	6838      	ldr	r0, [r7, #0]
 800b8fe:	f00f feec 	bl	801b6da <memcpy>
	}
}
 800b902:	bf00      	nop
 800b904:	3708      	adds	r7, #8
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b084      	sub	sp, #16
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b912:	f001 fdf7 	bl	800d504 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b91c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b91e:	e011      	b.n	800b944 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b924:	2b00      	cmp	r3, #0
 800b926:	d012      	beq.n	800b94e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	3324      	adds	r3, #36	; 0x24
 800b92c:	4618      	mov	r0, r3
 800b92e:	f000 fdb1 	bl	800c494 <xTaskRemoveFromEventList>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d001      	beq.n	800b93c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b938:	f000 fe88 	bl	800c64c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b93c:	7bfb      	ldrb	r3, [r7, #15]
 800b93e:	3b01      	subs	r3, #1
 800b940:	b2db      	uxtb	r3, r3
 800b942:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	dce9      	bgt.n	800b920 <prvUnlockQueue+0x16>
 800b94c:	e000      	b.n	800b950 <prvUnlockQueue+0x46>
					break;
 800b94e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	22ff      	movs	r2, #255	; 0xff
 800b954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b958:	f001 fe04 	bl	800d564 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b95c:	f001 fdd2 	bl	800d504 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b966:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b968:	e011      	b.n	800b98e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d012      	beq.n	800b998 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	3310      	adds	r3, #16
 800b976:	4618      	mov	r0, r3
 800b978:	f000 fd8c 	bl	800c494 <xTaskRemoveFromEventList>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d001      	beq.n	800b986 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b982:	f000 fe63 	bl	800c64c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b986:	7bbb      	ldrb	r3, [r7, #14]
 800b988:	3b01      	subs	r3, #1
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b98e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b992:	2b00      	cmp	r3, #0
 800b994:	dce9      	bgt.n	800b96a <prvUnlockQueue+0x60>
 800b996:	e000      	b.n	800b99a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b998:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	22ff      	movs	r2, #255	; 0xff
 800b99e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b9a2:	f001 fddf 	bl	800d564 <vPortExitCritical>
}
 800b9a6:	bf00      	nop
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b084      	sub	sp, #16
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b9b6:	f001 fda5 	bl	800d504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d102      	bne.n	800b9c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	60fb      	str	r3, [r7, #12]
 800b9c6:	e001      	b.n	800b9cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b9cc:	f001 fdca 	bl	800d564 <vPortExitCritical>

	return xReturn;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b084      	sub	sp, #16
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b9e2:	f001 fd8f 	bl	800d504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d102      	bne.n	800b9f8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	60fb      	str	r3, [r7, #12]
 800b9f6:	e001      	b.n	800b9fc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b9fc:	f001 fdb2 	bl	800d564 <vPortExitCritical>

	return xReturn;
 800ba00:	68fb      	ldr	r3, [r7, #12]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
	...

0800ba0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba16:	2300      	movs	r3, #0
 800ba18:	60fb      	str	r3, [r7, #12]
 800ba1a:	e014      	b.n	800ba46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ba1c:	4a0f      	ldr	r2, [pc, #60]	; (800ba5c <vQueueAddToRegistry+0x50>)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d10b      	bne.n	800ba40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ba28:	490c      	ldr	r1, [pc, #48]	; (800ba5c <vQueueAddToRegistry+0x50>)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ba32:	4a0a      	ldr	r2, [pc, #40]	; (800ba5c <vQueueAddToRegistry+0x50>)
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	00db      	lsls	r3, r3, #3
 800ba38:	4413      	add	r3, r2
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ba3e:	e006      	b.n	800ba4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	3301      	adds	r3, #1
 800ba44:	60fb      	str	r3, [r7, #12]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2b07      	cmp	r3, #7
 800ba4a:	d9e7      	bls.n	800ba1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ba4c:	bf00      	nop
 800ba4e:	bf00      	nop
 800ba50:	3714      	adds	r7, #20
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr
 800ba5a:	bf00      	nop
 800ba5c:	2400576c 	.word	0x2400576c

0800ba60 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba68:	2300      	movs	r3, #0
 800ba6a:	60fb      	str	r3, [r7, #12]
 800ba6c:	e016      	b.n	800ba9c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ba6e:	4a10      	ldr	r2, [pc, #64]	; (800bab0 <vQueueUnregisterQueue+0x50>)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	00db      	lsls	r3, r3, #3
 800ba74:	4413      	add	r3, r2
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d10b      	bne.n	800ba96 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ba7e:	4a0c      	ldr	r2, [pc, #48]	; (800bab0 <vQueueUnregisterQueue+0x50>)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2100      	movs	r1, #0
 800ba84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ba88:	4a09      	ldr	r2, [pc, #36]	; (800bab0 <vQueueUnregisterQueue+0x50>)
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	00db      	lsls	r3, r3, #3
 800ba8e:	4413      	add	r3, r2
 800ba90:	2200      	movs	r2, #0
 800ba92:	605a      	str	r2, [r3, #4]
				break;
 800ba94:	e006      	b.n	800baa4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	60fb      	str	r3, [r7, #12]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2b07      	cmp	r3, #7
 800baa0:	d9e5      	bls.n	800ba6e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800baa2:	bf00      	nop
 800baa4:	bf00      	nop
 800baa6:	3714      	adds	r7, #20
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	2400576c 	.word	0x2400576c

0800bab4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b086      	sub	sp, #24
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bac4:	f001 fd1e 	bl	800d504 <vPortEnterCritical>
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bace:	b25b      	sxtb	r3, r3
 800bad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad4:	d103      	bne.n	800bade <vQueueWaitForMessageRestricted+0x2a>
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bae4:	b25b      	sxtb	r3, r3
 800bae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baea:	d103      	bne.n	800baf4 <vQueueWaitForMessageRestricted+0x40>
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800baf4:	f001 fd36 	bl	800d564 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d106      	bne.n	800bb0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	3324      	adds	r3, #36	; 0x24
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	68b9      	ldr	r1, [r7, #8]
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f000 fc97 	bl	800c43c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bb0e:	6978      	ldr	r0, [r7, #20]
 800bb10:	f7ff fefb 	bl	800b90a <prvUnlockQueue>
	}
 800bb14:	bf00      	nop
 800bb16:	3718      	adds	r7, #24
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b08e      	sub	sp, #56	; 0x38
 800bb20:	af04      	add	r7, sp, #16
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
 800bb28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bb2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10a      	bne.n	800bb46 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	623b      	str	r3, [r7, #32]
}
 800bb42:	bf00      	nop
 800bb44:	e7fe      	b.n	800bb44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10a      	bne.n	800bb62 <xTaskCreateStatic+0x46>
	__asm volatile
 800bb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb50:	f383 8811 	msr	BASEPRI, r3
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	61fb      	str	r3, [r7, #28]
}
 800bb5e:	bf00      	nop
 800bb60:	e7fe      	b.n	800bb60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bb62:	23c4      	movs	r3, #196	; 0xc4
 800bb64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	2bc4      	cmp	r3, #196	; 0xc4
 800bb6a:	d00a      	beq.n	800bb82 <xTaskCreateStatic+0x66>
	__asm volatile
 800bb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb70:	f383 8811 	msr	BASEPRI, r3
 800bb74:	f3bf 8f6f 	isb	sy
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	61bb      	str	r3, [r7, #24]
}
 800bb7e:	bf00      	nop
 800bb80:	e7fe      	b.n	800bb80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bb82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d01e      	beq.n	800bbc8 <xTaskCreateStatic+0xac>
 800bb8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d01b      	beq.n	800bbc8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9c:	2202      	movs	r2, #2
 800bb9e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bba2:	2300      	movs	r3, #0
 800bba4:	9303      	str	r3, [sp, #12]
 800bba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba8:	9302      	str	r3, [sp, #8]
 800bbaa:	f107 0314 	add.w	r3, r7, #20
 800bbae:	9301      	str	r3, [sp, #4]
 800bbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	68b9      	ldr	r1, [r7, #8]
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f000 f850 	bl	800bc60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bbc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbc2:	f000 f8f9 	bl	800bdb8 <prvAddNewTaskToReadyList>
 800bbc6:	e001      	b.n	800bbcc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bbcc:	697b      	ldr	r3, [r7, #20]
	}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3728      	adds	r7, #40	; 0x28
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b08c      	sub	sp, #48	; 0x30
 800bbda:	af04      	add	r7, sp, #16
 800bbdc:	60f8      	str	r0, [r7, #12]
 800bbde:	60b9      	str	r1, [r7, #8]
 800bbe0:	603b      	str	r3, [r7, #0]
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bbe6:	88fb      	ldrh	r3, [r7, #6]
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	4618      	mov	r0, r3
 800bbec:	f001 fdac 	bl	800d748 <pvPortMalloc>
 800bbf0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d00e      	beq.n	800bc16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bbf8:	20c4      	movs	r0, #196	; 0xc4
 800bbfa:	f001 fda5 	bl	800d748 <pvPortMalloc>
 800bbfe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d003      	beq.n	800bc0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	697a      	ldr	r2, [r7, #20]
 800bc0a:	631a      	str	r2, [r3, #48]	; 0x30
 800bc0c:	e005      	b.n	800bc1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bc0e:	6978      	ldr	r0, [r7, #20]
 800bc10:	f001 fe66 	bl	800d8e0 <vPortFree>
 800bc14:	e001      	b.n	800bc1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc16:	2300      	movs	r3, #0
 800bc18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d017      	beq.n	800bc50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	2200      	movs	r2, #0
 800bc24:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc28:	88fa      	ldrh	r2, [r7, #6]
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	9303      	str	r3, [sp, #12]
 800bc2e:	69fb      	ldr	r3, [r7, #28]
 800bc30:	9302      	str	r3, [sp, #8]
 800bc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc34:	9301      	str	r3, [sp, #4]
 800bc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	68b9      	ldr	r1, [r7, #8]
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f000 f80e 	bl	800bc60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc44:	69f8      	ldr	r0, [r7, #28]
 800bc46:	f000 f8b7 	bl	800bdb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	61bb      	str	r3, [r7, #24]
 800bc4e:	e002      	b.n	800bc56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bc50:	f04f 33ff 	mov.w	r3, #4294967295
 800bc54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bc56:	69bb      	ldr	r3, [r7, #24]
	}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3720      	adds	r7, #32
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b088      	sub	sp, #32
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	607a      	str	r2, [r7, #4]
 800bc6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	461a      	mov	r2, r3
 800bc78:	21a5      	movs	r1, #165	; 0xa5
 800bc7a:	f00f fd56 	bl	801b72a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc82:	6879      	ldr	r1, [r7, #4]
 800bc84:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bc88:	440b      	add	r3, r1
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4413      	add	r3, r2
 800bc8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	f023 0307 	bic.w	r3, r3, #7
 800bc96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	f003 0307 	and.w	r3, r3, #7
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00a      	beq.n	800bcb8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca6:	f383 8811 	msr	BASEPRI, r3
 800bcaa:	f3bf 8f6f 	isb	sy
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	617b      	str	r3, [r7, #20]
}
 800bcb4:	bf00      	nop
 800bcb6:	e7fe      	b.n	800bcb6 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800bcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcba:	69ba      	ldr	r2, [r7, #24]
 800bcbc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d01f      	beq.n	800bd04 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	61fb      	str	r3, [r7, #28]
 800bcc8:	e012      	b.n	800bcf0 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bcca:	68ba      	ldr	r2, [r7, #8]
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	4413      	add	r3, r2
 800bcd0:	7819      	ldrb	r1, [r3, #0]
 800bcd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	3334      	adds	r3, #52	; 0x34
 800bcda:	460a      	mov	r2, r1
 800bcdc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bcde:	68ba      	ldr	r2, [r7, #8]
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	4413      	add	r3, r2
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d006      	beq.n	800bcf8 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	3301      	adds	r3, #1
 800bcee:	61fb      	str	r3, [r7, #28]
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	2b0f      	cmp	r3, #15
 800bcf4:	d9e9      	bls.n	800bcca <prvInitialiseNewTask+0x6a>
 800bcf6:	e000      	b.n	800bcfa <prvInitialiseNewTask+0x9a>
			{
				break;
 800bcf8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bd02:	e003      	b.n	800bd0c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0e:	2b37      	cmp	r3, #55	; 0x37
 800bd10:	d901      	bls.n	800bd16 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bd12:	2337      	movs	r3, #55	; 0x37
 800bd14:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd1a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd20:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd24:	2200      	movs	r2, #0
 800bd26:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2a:	3304      	adds	r3, #4
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7fe fd61 	bl	800a7f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd34:	3318      	adds	r3, #24
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fe fd5c 	bl	800a7f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd50:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd54:	2200      	movs	r2, #0
 800bd56:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd62:	2200      	movs	r2, #0
 800bd64:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6a:	335c      	adds	r3, #92	; 0x5c
 800bd6c:	2260      	movs	r2, #96	; 0x60
 800bd6e:	2100      	movs	r1, #0
 800bd70:	4618      	mov	r0, r3
 800bd72:	f00f fcda 	bl	801b72a <memset>
 800bd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd78:	4a0c      	ldr	r2, [pc, #48]	; (800bdac <prvInitialiseNewTask+0x14c>)
 800bd7a:	661a      	str	r2, [r3, #96]	; 0x60
 800bd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7e:	4a0c      	ldr	r2, [pc, #48]	; (800bdb0 <prvInitialiseNewTask+0x150>)
 800bd80:	665a      	str	r2, [r3, #100]	; 0x64
 800bd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd84:	4a0b      	ldr	r2, [pc, #44]	; (800bdb4 <prvInitialiseNewTask+0x154>)
 800bd86:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bd88:	683a      	ldr	r2, [r7, #0]
 800bd8a:	68f9      	ldr	r1, [r7, #12]
 800bd8c:	69b8      	ldr	r0, [r7, #24]
 800bd8e:	f001 fa7f 	bl	800d290 <pxPortInitialiseStack>
 800bd92:	4602      	mov	r2, r0
 800bd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd96:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d002      	beq.n	800bda4 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bda2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bda4:	bf00      	nop
 800bda6:	3720      	adds	r7, #32
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	080202b0 	.word	0x080202b0
 800bdb0:	080202d0 	.word	0x080202d0
 800bdb4:	08020290 	.word	0x08020290

0800bdb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bdc0:	f001 fba0 	bl	800d504 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bdc4:	4b2d      	ldr	r3, [pc, #180]	; (800be7c <prvAddNewTaskToReadyList+0xc4>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	4a2c      	ldr	r2, [pc, #176]	; (800be7c <prvAddNewTaskToReadyList+0xc4>)
 800bdcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bdce:	4b2c      	ldr	r3, [pc, #176]	; (800be80 <prvAddNewTaskToReadyList+0xc8>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d109      	bne.n	800bdea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bdd6:	4a2a      	ldr	r2, [pc, #168]	; (800be80 <prvAddNewTaskToReadyList+0xc8>)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bddc:	4b27      	ldr	r3, [pc, #156]	; (800be7c <prvAddNewTaskToReadyList+0xc4>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d110      	bne.n	800be06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bde4:	f000 fc56 	bl	800c694 <prvInitialiseTaskLists>
 800bde8:	e00d      	b.n	800be06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bdea:	4b26      	ldr	r3, [pc, #152]	; (800be84 <prvAddNewTaskToReadyList+0xcc>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d109      	bne.n	800be06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bdf2:	4b23      	ldr	r3, [pc, #140]	; (800be80 <prvAddNewTaskToReadyList+0xc8>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d802      	bhi.n	800be06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800be00:	4a1f      	ldr	r2, [pc, #124]	; (800be80 <prvAddNewTaskToReadyList+0xc8>)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800be06:	4b20      	ldr	r3, [pc, #128]	; (800be88 <prvAddNewTaskToReadyList+0xd0>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	3301      	adds	r3, #1
 800be0c:	4a1e      	ldr	r2, [pc, #120]	; (800be88 <prvAddNewTaskToReadyList+0xd0>)
 800be0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800be10:	4b1d      	ldr	r3, [pc, #116]	; (800be88 <prvAddNewTaskToReadyList+0xd0>)
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be1c:	4b1b      	ldr	r3, [pc, #108]	; (800be8c <prvAddNewTaskToReadyList+0xd4>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	429a      	cmp	r2, r3
 800be22:	d903      	bls.n	800be2c <prvAddNewTaskToReadyList+0x74>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be28:	4a18      	ldr	r2, [pc, #96]	; (800be8c <prvAddNewTaskToReadyList+0xd4>)
 800be2a:	6013      	str	r3, [r2, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be30:	4613      	mov	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	4413      	add	r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	4a15      	ldr	r2, [pc, #84]	; (800be90 <prvAddNewTaskToReadyList+0xd8>)
 800be3a:	441a      	add	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	3304      	adds	r3, #4
 800be40:	4619      	mov	r1, r3
 800be42:	4610      	mov	r0, r2
 800be44:	f7fe fce3 	bl	800a80e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800be48:	f001 fb8c 	bl	800d564 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800be4c:	4b0d      	ldr	r3, [pc, #52]	; (800be84 <prvAddNewTaskToReadyList+0xcc>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00e      	beq.n	800be72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800be54:	4b0a      	ldr	r3, [pc, #40]	; (800be80 <prvAddNewTaskToReadyList+0xc8>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be5e:	429a      	cmp	r2, r3
 800be60:	d207      	bcs.n	800be72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800be62:	4b0c      	ldr	r3, [pc, #48]	; (800be94 <prvAddNewTaskToReadyList+0xdc>)
 800be64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be68:	601a      	str	r2, [r3, #0]
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be72:	bf00      	nop
 800be74:	3708      	adds	r7, #8
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	24005c80 	.word	0x24005c80
 800be80:	240057ac 	.word	0x240057ac
 800be84:	24005c8c 	.word	0x24005c8c
 800be88:	24005c9c 	.word	0x24005c9c
 800be8c:	24005c88 	.word	0x24005c88
 800be90:	240057b0 	.word	0x240057b0
 800be94:	e000ed04 	.word	0xe000ed04

0800be98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bea0:	2300      	movs	r3, #0
 800bea2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d017      	beq.n	800beda <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800beaa:	4b13      	ldr	r3, [pc, #76]	; (800bef8 <vTaskDelay+0x60>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00a      	beq.n	800bec8 <vTaskDelay+0x30>
	__asm volatile
 800beb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb6:	f383 8811 	msr	BASEPRI, r3
 800beba:	f3bf 8f6f 	isb	sy
 800bebe:	f3bf 8f4f 	dsb	sy
 800bec2:	60bb      	str	r3, [r7, #8]
}
 800bec4:	bf00      	nop
 800bec6:	e7fe      	b.n	800bec6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bec8:	f000 f88c 	bl	800bfe4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800becc:	2100      	movs	r1, #0
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 fe3c 	bl	800cb4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bed4:	f000 f894 	bl	800c000 <xTaskResumeAll>
 800bed8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d107      	bne.n	800bef0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bee0:	4b06      	ldr	r3, [pc, #24]	; (800befc <vTaskDelay+0x64>)
 800bee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bee6:	601a      	str	r2, [r3, #0]
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bef0:	bf00      	nop
 800bef2:	3710      	adds	r7, #16
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	24005ca8 	.word	0x24005ca8
 800befc:	e000ed04 	.word	0xe000ed04

0800bf00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b08a      	sub	sp, #40	; 0x28
 800bf04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bf06:	2300      	movs	r3, #0
 800bf08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bf0e:	463a      	mov	r2, r7
 800bf10:	1d39      	adds	r1, r7, #4
 800bf12:	f107 0308 	add.w	r3, r7, #8
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fe fc18 	bl	800a74c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bf1c:	6839      	ldr	r1, [r7, #0]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	68ba      	ldr	r2, [r7, #8]
 800bf22:	9202      	str	r2, [sp, #8]
 800bf24:	9301      	str	r3, [sp, #4]
 800bf26:	2300      	movs	r3, #0
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	460a      	mov	r2, r1
 800bf2e:	4925      	ldr	r1, [pc, #148]	; (800bfc4 <vTaskStartScheduler+0xc4>)
 800bf30:	4825      	ldr	r0, [pc, #148]	; (800bfc8 <vTaskStartScheduler+0xc8>)
 800bf32:	f7ff fdf3 	bl	800bb1c <xTaskCreateStatic>
 800bf36:	4603      	mov	r3, r0
 800bf38:	4a24      	ldr	r2, [pc, #144]	; (800bfcc <vTaskStartScheduler+0xcc>)
 800bf3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bf3c:	4b23      	ldr	r3, [pc, #140]	; (800bfcc <vTaskStartScheduler+0xcc>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d002      	beq.n	800bf4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bf44:	2301      	movs	r3, #1
 800bf46:	617b      	str	r3, [r7, #20]
 800bf48:	e001      	b.n	800bf4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d102      	bne.n	800bf5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bf54:	f000 fe4e 	bl	800cbf4 <xTimerCreateTimerTask>
 800bf58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d11d      	bne.n	800bf9c <vTaskStartScheduler+0x9c>
	__asm volatile
 800bf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	613b      	str	r3, [r7, #16]
}
 800bf72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf74:	4b16      	ldr	r3, [pc, #88]	; (800bfd0 <vTaskStartScheduler+0xd0>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	335c      	adds	r3, #92	; 0x5c
 800bf7a:	4a16      	ldr	r2, [pc, #88]	; (800bfd4 <vTaskStartScheduler+0xd4>)
 800bf7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bf7e:	4b16      	ldr	r3, [pc, #88]	; (800bfd8 <vTaskStartScheduler+0xd8>)
 800bf80:	f04f 32ff 	mov.w	r2, #4294967295
 800bf84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bf86:	4b15      	ldr	r3, [pc, #84]	; (800bfdc <vTaskStartScheduler+0xdc>)
 800bf88:	2201      	movs	r2, #1
 800bf8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bf8c:	4b14      	ldr	r3, [pc, #80]	; (800bfe0 <vTaskStartScheduler+0xe0>)
 800bf8e:	2200      	movs	r2, #0
 800bf90:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800bf92:	f7f4 ffa3 	bl	8000edc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bf96:	f001 fa03 	bl	800d3a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bf9a:	e00e      	b.n	800bfba <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa2:	d10a      	bne.n	800bfba <vTaskStartScheduler+0xba>
	__asm volatile
 800bfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa8:	f383 8811 	msr	BASEPRI, r3
 800bfac:	f3bf 8f6f 	isb	sy
 800bfb0:	f3bf 8f4f 	dsb	sy
 800bfb4:	60fb      	str	r3, [r7, #12]
}
 800bfb6:	bf00      	nop
 800bfb8:	e7fe      	b.n	800bfb8 <vTaskStartScheduler+0xb8>
}
 800bfba:	bf00      	nop
 800bfbc:	3718      	adds	r7, #24
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	0801cba8 	.word	0x0801cba8
 800bfc8:	0800c665 	.word	0x0800c665
 800bfcc:	24005ca4 	.word	0x24005ca4
 800bfd0:	240057ac 	.word	0x240057ac
 800bfd4:	24000034 	.word	0x24000034
 800bfd8:	24005ca0 	.word	0x24005ca0
 800bfdc:	24005c8c 	.word	0x24005c8c
 800bfe0:	24005c84 	.word	0x24005c84

0800bfe4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bfe8:	4b04      	ldr	r3, [pc, #16]	; (800bffc <vTaskSuspendAll+0x18>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	3301      	adds	r3, #1
 800bfee:	4a03      	ldr	r2, [pc, #12]	; (800bffc <vTaskSuspendAll+0x18>)
 800bff0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bff2:	bf00      	nop
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr
 800bffc:	24005ca8 	.word	0x24005ca8

0800c000 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c006:	2300      	movs	r3, #0
 800c008:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c00a:	2300      	movs	r3, #0
 800c00c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c00e:	4b42      	ldr	r3, [pc, #264]	; (800c118 <xTaskResumeAll+0x118>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d10a      	bne.n	800c02c <xTaskResumeAll+0x2c>
	__asm volatile
 800c016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01a:	f383 8811 	msr	BASEPRI, r3
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f3bf 8f4f 	dsb	sy
 800c026:	603b      	str	r3, [r7, #0]
}
 800c028:	bf00      	nop
 800c02a:	e7fe      	b.n	800c02a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c02c:	f001 fa6a 	bl	800d504 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c030:	4b39      	ldr	r3, [pc, #228]	; (800c118 <xTaskResumeAll+0x118>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	3b01      	subs	r3, #1
 800c036:	4a38      	ldr	r2, [pc, #224]	; (800c118 <xTaskResumeAll+0x118>)
 800c038:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c03a:	4b37      	ldr	r3, [pc, #220]	; (800c118 <xTaskResumeAll+0x118>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d162      	bne.n	800c108 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c042:	4b36      	ldr	r3, [pc, #216]	; (800c11c <xTaskResumeAll+0x11c>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d05e      	beq.n	800c108 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c04a:	e02f      	b.n	800c0ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c04c:	4b34      	ldr	r3, [pc, #208]	; (800c120 <xTaskResumeAll+0x120>)
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	3318      	adds	r3, #24
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fe fc35 	bl	800a8c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	3304      	adds	r3, #4
 800c062:	4618      	mov	r0, r3
 800c064:	f7fe fc30 	bl	800a8c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c06c:	4b2d      	ldr	r3, [pc, #180]	; (800c124 <xTaskResumeAll+0x124>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	429a      	cmp	r2, r3
 800c072:	d903      	bls.n	800c07c <xTaskResumeAll+0x7c>
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c078:	4a2a      	ldr	r2, [pc, #168]	; (800c124 <xTaskResumeAll+0x124>)
 800c07a:	6013      	str	r3, [r2, #0]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c080:	4613      	mov	r3, r2
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	4413      	add	r3, r2
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	4a27      	ldr	r2, [pc, #156]	; (800c128 <xTaskResumeAll+0x128>)
 800c08a:	441a      	add	r2, r3
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	3304      	adds	r3, #4
 800c090:	4619      	mov	r1, r3
 800c092:	4610      	mov	r0, r2
 800c094:	f7fe fbbb 	bl	800a80e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c09c:	4b23      	ldr	r3, [pc, #140]	; (800c12c <xTaskResumeAll+0x12c>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d302      	bcc.n	800c0ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c0a6:	4b22      	ldr	r3, [pc, #136]	; (800c130 <xTaskResumeAll+0x130>)
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0ac:	4b1c      	ldr	r3, [pc, #112]	; (800c120 <xTaskResumeAll+0x120>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1cb      	bne.n	800c04c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d001      	beq.n	800c0be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c0ba:	f000 fb8d 	bl	800c7d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c0be:	4b1d      	ldr	r3, [pc, #116]	; (800c134 <xTaskResumeAll+0x134>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d010      	beq.n	800c0ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c0ca:	f000 f859 	bl	800c180 <xTaskIncrementTick>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d002      	beq.n	800c0da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c0d4:	4b16      	ldr	r3, [pc, #88]	; (800c130 <xTaskResumeAll+0x130>)
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d1f1      	bne.n	800c0ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c0e6:	4b13      	ldr	r3, [pc, #76]	; (800c134 <xTaskResumeAll+0x134>)
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c0ec:	4b10      	ldr	r3, [pc, #64]	; (800c130 <xTaskResumeAll+0x130>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d009      	beq.n	800c108 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c0f8:	4b0f      	ldr	r3, [pc, #60]	; (800c138 <xTaskResumeAll+0x138>)
 800c0fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0fe:	601a      	str	r2, [r3, #0]
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c108:	f001 fa2c 	bl	800d564 <vPortExitCritical>

	return xAlreadyYielded;
 800c10c:	68bb      	ldr	r3, [r7, #8]
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	24005ca8 	.word	0x24005ca8
 800c11c:	24005c80 	.word	0x24005c80
 800c120:	24005c40 	.word	0x24005c40
 800c124:	24005c88 	.word	0x24005c88
 800c128:	240057b0 	.word	0x240057b0
 800c12c:	240057ac 	.word	0x240057ac
 800c130:	24005c94 	.word	0x24005c94
 800c134:	24005c90 	.word	0x24005c90
 800c138:	e000ed04 	.word	0xe000ed04

0800c13c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c142:	4b05      	ldr	r3, [pc, #20]	; (800c158 <xTaskGetTickCount+0x1c>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c148:	687b      	ldr	r3, [r7, #4]
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	370c      	adds	r7, #12
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop
 800c158:	24005c84 	.word	0x24005c84

0800c15c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c162:	f001 fab1 	bl	800d6c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c166:	2300      	movs	r3, #0
 800c168:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c16a:	4b04      	ldr	r3, [pc, #16]	; (800c17c <xTaskGetTickCountFromISR+0x20>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c170:	683b      	ldr	r3, [r7, #0]
}
 800c172:	4618      	mov	r0, r3
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	24005c84 	.word	0x24005c84

0800c180 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c186:	2300      	movs	r3, #0
 800c188:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c18a:	4b4f      	ldr	r3, [pc, #316]	; (800c2c8 <xTaskIncrementTick+0x148>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	f040 808f 	bne.w	800c2b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c194:	4b4d      	ldr	r3, [pc, #308]	; (800c2cc <xTaskIncrementTick+0x14c>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	3301      	adds	r3, #1
 800c19a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c19c:	4a4b      	ldr	r2, [pc, #300]	; (800c2cc <xTaskIncrementTick+0x14c>)
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d120      	bne.n	800c1ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c1a8:	4b49      	ldr	r3, [pc, #292]	; (800c2d0 <xTaskIncrementTick+0x150>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00a      	beq.n	800c1c8 <xTaskIncrementTick+0x48>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	603b      	str	r3, [r7, #0]
}
 800c1c4:	bf00      	nop
 800c1c6:	e7fe      	b.n	800c1c6 <xTaskIncrementTick+0x46>
 800c1c8:	4b41      	ldr	r3, [pc, #260]	; (800c2d0 <xTaskIncrementTick+0x150>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	60fb      	str	r3, [r7, #12]
 800c1ce:	4b41      	ldr	r3, [pc, #260]	; (800c2d4 <xTaskIncrementTick+0x154>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a3f      	ldr	r2, [pc, #252]	; (800c2d0 <xTaskIncrementTick+0x150>)
 800c1d4:	6013      	str	r3, [r2, #0]
 800c1d6:	4a3f      	ldr	r2, [pc, #252]	; (800c2d4 <xTaskIncrementTick+0x154>)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	6013      	str	r3, [r2, #0]
 800c1dc:	4b3e      	ldr	r3, [pc, #248]	; (800c2d8 <xTaskIncrementTick+0x158>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	4a3d      	ldr	r2, [pc, #244]	; (800c2d8 <xTaskIncrementTick+0x158>)
 800c1e4:	6013      	str	r3, [r2, #0]
 800c1e6:	f000 faf7 	bl	800c7d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c1ea:	4b3c      	ldr	r3, [pc, #240]	; (800c2dc <xTaskIncrementTick+0x15c>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	693a      	ldr	r2, [r7, #16]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d349      	bcc.n	800c288 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1f4:	4b36      	ldr	r3, [pc, #216]	; (800c2d0 <xTaskIncrementTick+0x150>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d104      	bne.n	800c208 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1fe:	4b37      	ldr	r3, [pc, #220]	; (800c2dc <xTaskIncrementTick+0x15c>)
 800c200:	f04f 32ff 	mov.w	r2, #4294967295
 800c204:	601a      	str	r2, [r3, #0]
					break;
 800c206:	e03f      	b.n	800c288 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c208:	4b31      	ldr	r3, [pc, #196]	; (800c2d0 <xTaskIncrementTick+0x150>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c218:	693a      	ldr	r2, [r7, #16]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d203      	bcs.n	800c228 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c220:	4a2e      	ldr	r2, [pc, #184]	; (800c2dc <xTaskIncrementTick+0x15c>)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c226:	e02f      	b.n	800c288 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	3304      	adds	r3, #4
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fe fb4b 	bl	800a8c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c236:	2b00      	cmp	r3, #0
 800c238:	d004      	beq.n	800c244 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	3318      	adds	r3, #24
 800c23e:	4618      	mov	r0, r3
 800c240:	f7fe fb42 	bl	800a8c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c248:	4b25      	ldr	r3, [pc, #148]	; (800c2e0 <xTaskIncrementTick+0x160>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d903      	bls.n	800c258 <xTaskIncrementTick+0xd8>
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c254:	4a22      	ldr	r2, [pc, #136]	; (800c2e0 <xTaskIncrementTick+0x160>)
 800c256:	6013      	str	r3, [r2, #0]
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c25c:	4613      	mov	r3, r2
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	4413      	add	r3, r2
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	4a1f      	ldr	r2, [pc, #124]	; (800c2e4 <xTaskIncrementTick+0x164>)
 800c266:	441a      	add	r2, r3
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	3304      	adds	r3, #4
 800c26c:	4619      	mov	r1, r3
 800c26e:	4610      	mov	r0, r2
 800c270:	f7fe facd 	bl	800a80e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c278:	4b1b      	ldr	r3, [pc, #108]	; (800c2e8 <xTaskIncrementTick+0x168>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c27e:	429a      	cmp	r2, r3
 800c280:	d3b8      	bcc.n	800c1f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c282:	2301      	movs	r3, #1
 800c284:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c286:	e7b5      	b.n	800c1f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c288:	4b17      	ldr	r3, [pc, #92]	; (800c2e8 <xTaskIncrementTick+0x168>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c28e:	4915      	ldr	r1, [pc, #84]	; (800c2e4 <xTaskIncrementTick+0x164>)
 800c290:	4613      	mov	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	4413      	add	r3, r2
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	440b      	add	r3, r1
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d901      	bls.n	800c2a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c2a4:	4b11      	ldr	r3, [pc, #68]	; (800c2ec <xTaskIncrementTick+0x16c>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d007      	beq.n	800c2bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	617b      	str	r3, [r7, #20]
 800c2b0:	e004      	b.n	800c2bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c2b2:	4b0f      	ldr	r3, [pc, #60]	; (800c2f0 <xTaskIncrementTick+0x170>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	4a0d      	ldr	r2, [pc, #52]	; (800c2f0 <xTaskIncrementTick+0x170>)
 800c2ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c2bc:	697b      	ldr	r3, [r7, #20]
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3718      	adds	r7, #24
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	24005ca8 	.word	0x24005ca8
 800c2cc:	24005c84 	.word	0x24005c84
 800c2d0:	24005c38 	.word	0x24005c38
 800c2d4:	24005c3c 	.word	0x24005c3c
 800c2d8:	24005c98 	.word	0x24005c98
 800c2dc:	24005ca0 	.word	0x24005ca0
 800c2e0:	24005c88 	.word	0x24005c88
 800c2e4:	240057b0 	.word	0x240057b0
 800c2e8:	240057ac 	.word	0x240057ac
 800c2ec:	24005c94 	.word	0x24005c94
 800c2f0:	24005c90 	.word	0x24005c90

0800c2f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c2fa:	4b36      	ldr	r3, [pc, #216]	; (800c3d4 <vTaskSwitchContext+0xe0>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d003      	beq.n	800c30a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c302:	4b35      	ldr	r3, [pc, #212]	; (800c3d8 <vTaskSwitchContext+0xe4>)
 800c304:	2201      	movs	r2, #1
 800c306:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c308:	e05f      	b.n	800c3ca <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800c30a:	4b33      	ldr	r3, [pc, #204]	; (800c3d8 <vTaskSwitchContext+0xe4>)
 800c30c:	2200      	movs	r2, #0
 800c30e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800c310:	f7f4 fdf2 	bl	8000ef8 <getRunTimeCounterValue>
 800c314:	4603      	mov	r3, r0
 800c316:	4a31      	ldr	r2, [pc, #196]	; (800c3dc <vTaskSwitchContext+0xe8>)
 800c318:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800c31a:	4b30      	ldr	r3, [pc, #192]	; (800c3dc <vTaskSwitchContext+0xe8>)
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	4b30      	ldr	r3, [pc, #192]	; (800c3e0 <vTaskSwitchContext+0xec>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	429a      	cmp	r2, r3
 800c324:	d909      	bls.n	800c33a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800c326:	4b2f      	ldr	r3, [pc, #188]	; (800c3e4 <vTaskSwitchContext+0xf0>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800c32c:	4a2b      	ldr	r2, [pc, #172]	; (800c3dc <vTaskSwitchContext+0xe8>)
 800c32e:	6810      	ldr	r0, [r2, #0]
 800c330:	4a2b      	ldr	r2, [pc, #172]	; (800c3e0 <vTaskSwitchContext+0xec>)
 800c332:	6812      	ldr	r2, [r2, #0]
 800c334:	1a82      	subs	r2, r0, r2
 800c336:	440a      	add	r2, r1
 800c338:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800c33a:	4b28      	ldr	r3, [pc, #160]	; (800c3dc <vTaskSwitchContext+0xe8>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a28      	ldr	r2, [pc, #160]	; (800c3e0 <vTaskSwitchContext+0xec>)
 800c340:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c342:	4b29      	ldr	r3, [pc, #164]	; (800c3e8 <vTaskSwitchContext+0xf4>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	60fb      	str	r3, [r7, #12]
 800c348:	e010      	b.n	800c36c <vTaskSwitchContext+0x78>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d10a      	bne.n	800c366 <vTaskSwitchContext+0x72>
	__asm volatile
 800c350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c354:	f383 8811 	msr	BASEPRI, r3
 800c358:	f3bf 8f6f 	isb	sy
 800c35c:	f3bf 8f4f 	dsb	sy
 800c360:	607b      	str	r3, [r7, #4]
}
 800c362:	bf00      	nop
 800c364:	e7fe      	b.n	800c364 <vTaskSwitchContext+0x70>
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3b01      	subs	r3, #1
 800c36a:	60fb      	str	r3, [r7, #12]
 800c36c:	491f      	ldr	r1, [pc, #124]	; (800c3ec <vTaskSwitchContext+0xf8>)
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	4613      	mov	r3, r2
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	4413      	add	r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	440b      	add	r3, r1
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d0e4      	beq.n	800c34a <vTaskSwitchContext+0x56>
 800c380:	68fa      	ldr	r2, [r7, #12]
 800c382:	4613      	mov	r3, r2
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	4413      	add	r3, r2
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	4a18      	ldr	r2, [pc, #96]	; (800c3ec <vTaskSwitchContext+0xf8>)
 800c38c:	4413      	add	r3, r2
 800c38e:	60bb      	str	r3, [r7, #8]
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	685a      	ldr	r2, [r3, #4]
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	605a      	str	r2, [r3, #4]
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	685a      	ldr	r2, [r3, #4]
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	3308      	adds	r3, #8
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d104      	bne.n	800c3b0 <vTaskSwitchContext+0xbc>
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	685a      	ldr	r2, [r3, #4]
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	605a      	str	r2, [r3, #4]
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	4a0b      	ldr	r2, [pc, #44]	; (800c3e4 <vTaskSwitchContext+0xf0>)
 800c3b8:	6013      	str	r3, [r2, #0]
 800c3ba:	4a0b      	ldr	r2, [pc, #44]	; (800c3e8 <vTaskSwitchContext+0xf4>)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c3c0:	4b08      	ldr	r3, [pc, #32]	; (800c3e4 <vTaskSwitchContext+0xf0>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	335c      	adds	r3, #92	; 0x5c
 800c3c6:	4a0a      	ldr	r2, [pc, #40]	; (800c3f0 <vTaskSwitchContext+0xfc>)
 800c3c8:	6013      	str	r3, [r2, #0]
}
 800c3ca:	bf00      	nop
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	24005ca8 	.word	0x24005ca8
 800c3d8:	24005c94 	.word	0x24005c94
 800c3dc:	24005cb0 	.word	0x24005cb0
 800c3e0:	24005cac 	.word	0x24005cac
 800c3e4:	240057ac 	.word	0x240057ac
 800c3e8:	24005c88 	.word	0x24005c88
 800c3ec:	240057b0 	.word	0x240057b0
 800c3f0:	24000034 	.word	0x24000034

0800c3f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d10a      	bne.n	800c41a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c408:	f383 8811 	msr	BASEPRI, r3
 800c40c:	f3bf 8f6f 	isb	sy
 800c410:	f3bf 8f4f 	dsb	sy
 800c414:	60fb      	str	r3, [r7, #12]
}
 800c416:	bf00      	nop
 800c418:	e7fe      	b.n	800c418 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c41a:	4b07      	ldr	r3, [pc, #28]	; (800c438 <vTaskPlaceOnEventList+0x44>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	3318      	adds	r3, #24
 800c420:	4619      	mov	r1, r3
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7fe fa17 	bl	800a856 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c428:	2101      	movs	r1, #1
 800c42a:	6838      	ldr	r0, [r7, #0]
 800c42c:	f000 fb8e 	bl	800cb4c <prvAddCurrentTaskToDelayedList>
}
 800c430:	bf00      	nop
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	240057ac 	.word	0x240057ac

0800c43c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d10a      	bne.n	800c464 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	617b      	str	r3, [r7, #20]
}
 800c460:	bf00      	nop
 800c462:	e7fe      	b.n	800c462 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c464:	4b0a      	ldr	r3, [pc, #40]	; (800c490 <vTaskPlaceOnEventListRestricted+0x54>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	3318      	adds	r3, #24
 800c46a:	4619      	mov	r1, r3
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f7fe f9ce 	bl	800a80e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c478:	f04f 33ff 	mov.w	r3, #4294967295
 800c47c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c47e:	6879      	ldr	r1, [r7, #4]
 800c480:	68b8      	ldr	r0, [r7, #8]
 800c482:	f000 fb63 	bl	800cb4c <prvAddCurrentTaskToDelayedList>
	}
 800c486:	bf00      	nop
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	240057ac 	.word	0x240057ac

0800c494 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b086      	sub	sp, #24
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d10a      	bne.n	800c4c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ae:	f383 8811 	msr	BASEPRI, r3
 800c4b2:	f3bf 8f6f 	isb	sy
 800c4b6:	f3bf 8f4f 	dsb	sy
 800c4ba:	60fb      	str	r3, [r7, #12]
}
 800c4bc:	bf00      	nop
 800c4be:	e7fe      	b.n	800c4be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	3318      	adds	r3, #24
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7fe f9ff 	bl	800a8c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4ca:	4b1e      	ldr	r3, [pc, #120]	; (800c544 <xTaskRemoveFromEventList+0xb0>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d11d      	bne.n	800c50e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	3304      	adds	r3, #4
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7fe f9f6 	bl	800a8c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e0:	4b19      	ldr	r3, [pc, #100]	; (800c548 <xTaskRemoveFromEventList+0xb4>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d903      	bls.n	800c4f0 <xTaskRemoveFromEventList+0x5c>
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ec:	4a16      	ldr	r2, [pc, #88]	; (800c548 <xTaskRemoveFromEventList+0xb4>)
 800c4ee:	6013      	str	r3, [r2, #0]
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f4:	4613      	mov	r3, r2
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	4413      	add	r3, r2
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	4a13      	ldr	r2, [pc, #76]	; (800c54c <xTaskRemoveFromEventList+0xb8>)
 800c4fe:	441a      	add	r2, r3
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	3304      	adds	r3, #4
 800c504:	4619      	mov	r1, r3
 800c506:	4610      	mov	r0, r2
 800c508:	f7fe f981 	bl	800a80e <vListInsertEnd>
 800c50c:	e005      	b.n	800c51a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	3318      	adds	r3, #24
 800c512:	4619      	mov	r1, r3
 800c514:	480e      	ldr	r0, [pc, #56]	; (800c550 <xTaskRemoveFromEventList+0xbc>)
 800c516:	f7fe f97a 	bl	800a80e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c51e:	4b0d      	ldr	r3, [pc, #52]	; (800c554 <xTaskRemoveFromEventList+0xc0>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c524:	429a      	cmp	r2, r3
 800c526:	d905      	bls.n	800c534 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c528:	2301      	movs	r3, #1
 800c52a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c52c:	4b0a      	ldr	r3, [pc, #40]	; (800c558 <xTaskRemoveFromEventList+0xc4>)
 800c52e:	2201      	movs	r2, #1
 800c530:	601a      	str	r2, [r3, #0]
 800c532:	e001      	b.n	800c538 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c534:	2300      	movs	r3, #0
 800c536:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c538:	697b      	ldr	r3, [r7, #20]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3718      	adds	r7, #24
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	24005ca8 	.word	0x24005ca8
 800c548:	24005c88 	.word	0x24005c88
 800c54c:	240057b0 	.word	0x240057b0
 800c550:	24005c40 	.word	0x24005c40
 800c554:	240057ac 	.word	0x240057ac
 800c558:	24005c94 	.word	0x24005c94

0800c55c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c564:	4b06      	ldr	r3, [pc, #24]	; (800c580 <vTaskInternalSetTimeOutState+0x24>)
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c56c:	4b05      	ldr	r3, [pc, #20]	; (800c584 <vTaskInternalSetTimeOutState+0x28>)
 800c56e:	681a      	ldr	r2, [r3, #0]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	605a      	str	r2, [r3, #4]
}
 800c574:	bf00      	nop
 800c576:	370c      	adds	r7, #12
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr
 800c580:	24005c98 	.word	0x24005c98
 800c584:	24005c84 	.word	0x24005c84

0800c588 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b088      	sub	sp, #32
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10a      	bne.n	800c5ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59c:	f383 8811 	msr	BASEPRI, r3
 800c5a0:	f3bf 8f6f 	isb	sy
 800c5a4:	f3bf 8f4f 	dsb	sy
 800c5a8:	613b      	str	r3, [r7, #16]
}
 800c5aa:	bf00      	nop
 800c5ac:	e7fe      	b.n	800c5ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d10a      	bne.n	800c5ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b8:	f383 8811 	msr	BASEPRI, r3
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	60fb      	str	r3, [r7, #12]
}
 800c5c6:	bf00      	nop
 800c5c8:	e7fe      	b.n	800c5c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c5ca:	f000 ff9b 	bl	800d504 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c5ce:	4b1d      	ldr	r3, [pc, #116]	; (800c644 <xTaskCheckForTimeOut+0xbc>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	69ba      	ldr	r2, [r7, #24]
 800c5da:	1ad3      	subs	r3, r2, r3
 800c5dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5e6:	d102      	bne.n	800c5ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	61fb      	str	r3, [r7, #28]
 800c5ec:	e023      	b.n	800c636 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	4b15      	ldr	r3, [pc, #84]	; (800c648 <xTaskCheckForTimeOut+0xc0>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d007      	beq.n	800c60a <xTaskCheckForTimeOut+0x82>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	69ba      	ldr	r2, [r7, #24]
 800c600:	429a      	cmp	r2, r3
 800c602:	d302      	bcc.n	800c60a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c604:	2301      	movs	r3, #1
 800c606:	61fb      	str	r3, [r7, #28]
 800c608:	e015      	b.n	800c636 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	697a      	ldr	r2, [r7, #20]
 800c610:	429a      	cmp	r2, r3
 800c612:	d20b      	bcs.n	800c62c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	1ad2      	subs	r2, r2, r3
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7ff ff9b 	bl	800c55c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c626:	2300      	movs	r3, #0
 800c628:	61fb      	str	r3, [r7, #28]
 800c62a:	e004      	b.n	800c636 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	2200      	movs	r2, #0
 800c630:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c632:	2301      	movs	r3, #1
 800c634:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c636:	f000 ff95 	bl	800d564 <vPortExitCritical>

	return xReturn;
 800c63a:	69fb      	ldr	r3, [r7, #28]
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3720      	adds	r7, #32
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	24005c84 	.word	0x24005c84
 800c648:	24005c98 	.word	0x24005c98

0800c64c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c64c:	b480      	push	{r7}
 800c64e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c650:	4b03      	ldr	r3, [pc, #12]	; (800c660 <vTaskMissedYield+0x14>)
 800c652:	2201      	movs	r2, #1
 800c654:	601a      	str	r2, [r3, #0]
}
 800c656:	bf00      	nop
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr
 800c660:	24005c94 	.word	0x24005c94

0800c664 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c66c:	f000 f852 	bl	800c714 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c670:	4b06      	ldr	r3, [pc, #24]	; (800c68c <prvIdleTask+0x28>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2b01      	cmp	r3, #1
 800c676:	d9f9      	bls.n	800c66c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c678:	4b05      	ldr	r3, [pc, #20]	; (800c690 <prvIdleTask+0x2c>)
 800c67a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c67e:	601a      	str	r2, [r3, #0]
 800c680:	f3bf 8f4f 	dsb	sy
 800c684:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c688:	e7f0      	b.n	800c66c <prvIdleTask+0x8>
 800c68a:	bf00      	nop
 800c68c:	240057b0 	.word	0x240057b0
 800c690:	e000ed04 	.word	0xe000ed04

0800c694 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c69a:	2300      	movs	r3, #0
 800c69c:	607b      	str	r3, [r7, #4]
 800c69e:	e00c      	b.n	800c6ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	4613      	mov	r3, r2
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	4413      	add	r3, r2
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	4a12      	ldr	r2, [pc, #72]	; (800c6f4 <prvInitialiseTaskLists+0x60>)
 800c6ac:	4413      	add	r3, r2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7fe f880 	bl	800a7b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	607b      	str	r3, [r7, #4]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2b37      	cmp	r3, #55	; 0x37
 800c6be:	d9ef      	bls.n	800c6a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c6c0:	480d      	ldr	r0, [pc, #52]	; (800c6f8 <prvInitialiseTaskLists+0x64>)
 800c6c2:	f7fe f877 	bl	800a7b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c6c6:	480d      	ldr	r0, [pc, #52]	; (800c6fc <prvInitialiseTaskLists+0x68>)
 800c6c8:	f7fe f874 	bl	800a7b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c6cc:	480c      	ldr	r0, [pc, #48]	; (800c700 <prvInitialiseTaskLists+0x6c>)
 800c6ce:	f7fe f871 	bl	800a7b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c6d2:	480c      	ldr	r0, [pc, #48]	; (800c704 <prvInitialiseTaskLists+0x70>)
 800c6d4:	f7fe f86e 	bl	800a7b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c6d8:	480b      	ldr	r0, [pc, #44]	; (800c708 <prvInitialiseTaskLists+0x74>)
 800c6da:	f7fe f86b 	bl	800a7b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c6de:	4b0b      	ldr	r3, [pc, #44]	; (800c70c <prvInitialiseTaskLists+0x78>)
 800c6e0:	4a05      	ldr	r2, [pc, #20]	; (800c6f8 <prvInitialiseTaskLists+0x64>)
 800c6e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c6e4:	4b0a      	ldr	r3, [pc, #40]	; (800c710 <prvInitialiseTaskLists+0x7c>)
 800c6e6:	4a05      	ldr	r2, [pc, #20]	; (800c6fc <prvInitialiseTaskLists+0x68>)
 800c6e8:	601a      	str	r2, [r3, #0]
}
 800c6ea:	bf00      	nop
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	240057b0 	.word	0x240057b0
 800c6f8:	24005c10 	.word	0x24005c10
 800c6fc:	24005c24 	.word	0x24005c24
 800c700:	24005c40 	.word	0x24005c40
 800c704:	24005c54 	.word	0x24005c54
 800c708:	24005c6c 	.word	0x24005c6c
 800c70c:	24005c38 	.word	0x24005c38
 800c710:	24005c3c 	.word	0x24005c3c

0800c714 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c71a:	e019      	b.n	800c750 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c71c:	f000 fef2 	bl	800d504 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c720:	4b10      	ldr	r3, [pc, #64]	; (800c764 <prvCheckTasksWaitingTermination+0x50>)
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	68db      	ldr	r3, [r3, #12]
 800c726:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	3304      	adds	r3, #4
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7fe f8cb 	bl	800a8c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c732:	4b0d      	ldr	r3, [pc, #52]	; (800c768 <prvCheckTasksWaitingTermination+0x54>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	3b01      	subs	r3, #1
 800c738:	4a0b      	ldr	r2, [pc, #44]	; (800c768 <prvCheckTasksWaitingTermination+0x54>)
 800c73a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c73c:	4b0b      	ldr	r3, [pc, #44]	; (800c76c <prvCheckTasksWaitingTermination+0x58>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	3b01      	subs	r3, #1
 800c742:	4a0a      	ldr	r2, [pc, #40]	; (800c76c <prvCheckTasksWaitingTermination+0x58>)
 800c744:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c746:	f000 ff0d 	bl	800d564 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 f810 	bl	800c770 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c750:	4b06      	ldr	r3, [pc, #24]	; (800c76c <prvCheckTasksWaitingTermination+0x58>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d1e1      	bne.n	800c71c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c758:	bf00      	nop
 800c75a:	bf00      	nop
 800c75c:	3708      	adds	r7, #8
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	24005c54 	.word	0x24005c54
 800c768:	24005c80 	.word	0x24005c80
 800c76c:	24005c68 	.word	0x24005c68

0800c770 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	335c      	adds	r3, #92	; 0x5c
 800c77c:	4618      	mov	r0, r3
 800c77e:	f00f f8d5 	bl	801b92c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d108      	bne.n	800c79e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c790:	4618      	mov	r0, r3
 800c792:	f001 f8a5 	bl	800d8e0 <vPortFree>
				vPortFree( pxTCB );
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f001 f8a2 	bl	800d8e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c79c:	e018      	b.n	800c7d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d103      	bne.n	800c7b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f001 f899 	bl	800d8e0 <vPortFree>
	}
 800c7ae:	e00f      	b.n	800c7d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800c7b6:	2b02      	cmp	r3, #2
 800c7b8:	d00a      	beq.n	800c7d0 <prvDeleteTCB+0x60>
	__asm volatile
 800c7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7be:	f383 8811 	msr	BASEPRI, r3
 800c7c2:	f3bf 8f6f 	isb	sy
 800c7c6:	f3bf 8f4f 	dsb	sy
 800c7ca:	60fb      	str	r3, [r7, #12]
}
 800c7cc:	bf00      	nop
 800c7ce:	e7fe      	b.n	800c7ce <prvDeleteTCB+0x5e>
	}
 800c7d0:	bf00      	nop
 800c7d2:	3710      	adds	r7, #16
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b083      	sub	sp, #12
 800c7dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7de:	4b0c      	ldr	r3, [pc, #48]	; (800c810 <prvResetNextTaskUnblockTime+0x38>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d104      	bne.n	800c7f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c7e8:	4b0a      	ldr	r3, [pc, #40]	; (800c814 <prvResetNextTaskUnblockTime+0x3c>)
 800c7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c7f0:	e008      	b.n	800c804 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7f2:	4b07      	ldr	r3, [pc, #28]	; (800c810 <prvResetNextTaskUnblockTime+0x38>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	68db      	ldr	r3, [r3, #12]
 800c7fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	4a04      	ldr	r2, [pc, #16]	; (800c814 <prvResetNextTaskUnblockTime+0x3c>)
 800c802:	6013      	str	r3, [r2, #0]
}
 800c804:	bf00      	nop
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr
 800c810:	24005c38 	.word	0x24005c38
 800c814:	24005ca0 	.word	0x24005ca0

0800c818 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c81e:	4b05      	ldr	r3, [pc, #20]	; (800c834 <xTaskGetCurrentTaskHandle+0x1c>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c824:	687b      	ldr	r3, [r7, #4]
	}
 800c826:	4618      	mov	r0, r3
 800c828:	370c      	adds	r7, #12
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr
 800c832:	bf00      	nop
 800c834:	240057ac 	.word	0x240057ac

0800c838 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c83e:	4b0b      	ldr	r3, [pc, #44]	; (800c86c <xTaskGetSchedulerState+0x34>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d102      	bne.n	800c84c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c846:	2301      	movs	r3, #1
 800c848:	607b      	str	r3, [r7, #4]
 800c84a:	e008      	b.n	800c85e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c84c:	4b08      	ldr	r3, [pc, #32]	; (800c870 <xTaskGetSchedulerState+0x38>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d102      	bne.n	800c85a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c854:	2302      	movs	r3, #2
 800c856:	607b      	str	r3, [r7, #4]
 800c858:	e001      	b.n	800c85e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c85a:	2300      	movs	r3, #0
 800c85c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c85e:	687b      	ldr	r3, [r7, #4]
	}
 800c860:	4618      	mov	r0, r3
 800c862:	370c      	adds	r7, #12
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr
 800c86c:	24005c8c 	.word	0x24005c8c
 800c870:	24005ca8 	.word	0x24005ca8

0800c874 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c880:	2300      	movs	r3, #0
 800c882:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d051      	beq.n	800c92e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88e:	4b2a      	ldr	r3, [pc, #168]	; (800c938 <xTaskPriorityInherit+0xc4>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c894:	429a      	cmp	r2, r3
 800c896:	d241      	bcs.n	800c91c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	699b      	ldr	r3, [r3, #24]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	db06      	blt.n	800c8ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8a0:	4b25      	ldr	r3, [pc, #148]	; (800c938 <xTaskPriorityInherit+0xc4>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	6959      	ldr	r1, [r3, #20]
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	4413      	add	r3, r2
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	4a1f      	ldr	r2, [pc, #124]	; (800c93c <xTaskPriorityInherit+0xc8>)
 800c8c0:	4413      	add	r3, r2
 800c8c2:	4299      	cmp	r1, r3
 800c8c4:	d122      	bne.n	800c90c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	3304      	adds	r3, #4
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f7fd fffc 	bl	800a8c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c8d0:	4b19      	ldr	r3, [pc, #100]	; (800c938 <xTaskPriorityInherit+0xc4>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8de:	4b18      	ldr	r3, [pc, #96]	; (800c940 <xTaskPriorityInherit+0xcc>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d903      	bls.n	800c8ee <xTaskPriorityInherit+0x7a>
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ea:	4a15      	ldr	r2, [pc, #84]	; (800c940 <xTaskPriorityInherit+0xcc>)
 800c8ec:	6013      	str	r3, [r2, #0]
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	4413      	add	r3, r2
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	4a10      	ldr	r2, [pc, #64]	; (800c93c <xTaskPriorityInherit+0xc8>)
 800c8fc:	441a      	add	r2, r3
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	3304      	adds	r3, #4
 800c902:	4619      	mov	r1, r3
 800c904:	4610      	mov	r0, r2
 800c906:	f7fd ff82 	bl	800a80e <vListInsertEnd>
 800c90a:	e004      	b.n	800c916 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c90c:	4b0a      	ldr	r3, [pc, #40]	; (800c938 <xTaskPriorityInherit+0xc4>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c916:	2301      	movs	r3, #1
 800c918:	60fb      	str	r3, [r7, #12]
 800c91a:	e008      	b.n	800c92e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c920:	4b05      	ldr	r3, [pc, #20]	; (800c938 <xTaskPriorityInherit+0xc4>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c926:	429a      	cmp	r2, r3
 800c928:	d201      	bcs.n	800c92e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c92a:	2301      	movs	r3, #1
 800c92c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c92e:	68fb      	ldr	r3, [r7, #12]
	}
 800c930:	4618      	mov	r0, r3
 800c932:	3710      	adds	r7, #16
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	240057ac 	.word	0x240057ac
 800c93c:	240057b0 	.word	0x240057b0
 800c940:	24005c88 	.word	0x24005c88

0800c944 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c944:	b580      	push	{r7, lr}
 800c946:	b086      	sub	sp, #24
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c950:	2300      	movs	r3, #0
 800c952:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d056      	beq.n	800ca08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c95a:	4b2e      	ldr	r3, [pc, #184]	; (800ca14 <xTaskPriorityDisinherit+0xd0>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	693a      	ldr	r2, [r7, #16]
 800c960:	429a      	cmp	r2, r3
 800c962:	d00a      	beq.n	800c97a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c968:	f383 8811 	msr	BASEPRI, r3
 800c96c:	f3bf 8f6f 	isb	sy
 800c970:	f3bf 8f4f 	dsb	sy
 800c974:	60fb      	str	r3, [r7, #12]
}
 800c976:	bf00      	nop
 800c978:	e7fe      	b.n	800c978 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d10a      	bne.n	800c998 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c986:	f383 8811 	msr	BASEPRI, r3
 800c98a:	f3bf 8f6f 	isb	sy
 800c98e:	f3bf 8f4f 	dsb	sy
 800c992:	60bb      	str	r3, [r7, #8]
}
 800c994:	bf00      	nop
 800c996:	e7fe      	b.n	800c996 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c99c:	1e5a      	subs	r2, r3, #1
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d02c      	beq.n	800ca08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d128      	bne.n	800ca08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	3304      	adds	r3, #4
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7fd ff84 	bl	800a8c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9d8:	4b0f      	ldr	r3, [pc, #60]	; (800ca18 <xTaskPriorityDisinherit+0xd4>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d903      	bls.n	800c9e8 <xTaskPriorityDisinherit+0xa4>
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e4:	4a0c      	ldr	r2, [pc, #48]	; (800ca18 <xTaskPriorityDisinherit+0xd4>)
 800c9e6:	6013      	str	r3, [r2, #0]
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	009b      	lsls	r3, r3, #2
 800c9f0:	4413      	add	r3, r2
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	4a09      	ldr	r2, [pc, #36]	; (800ca1c <xTaskPriorityDisinherit+0xd8>)
 800c9f6:	441a      	add	r2, r3
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	3304      	adds	r3, #4
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	4610      	mov	r0, r2
 800ca00:	f7fd ff05 	bl	800a80e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ca04:	2301      	movs	r3, #1
 800ca06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ca08:	697b      	ldr	r3, [r7, #20]
	}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3718      	adds	r7, #24
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	240057ac 	.word	0x240057ac
 800ca18:	24005c88 	.word	0x24005c88
 800ca1c:	240057b0 	.word	0x240057b0

0800ca20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b088      	sub	sp, #32
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d06a      	beq.n	800cb0e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10a      	bne.n	800ca56 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ca40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	60fb      	str	r3, [r7, #12]
}
 800ca52:	bf00      	nop
 800ca54:	e7fe      	b.n	800ca54 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca5a:	683a      	ldr	r2, [r7, #0]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d902      	bls.n	800ca66 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	61fb      	str	r3, [r7, #28]
 800ca64:	e002      	b.n	800ca6c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca6a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca70:	69fa      	ldr	r2, [r7, #28]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d04b      	beq.n	800cb0e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca7a:	697a      	ldr	r2, [r7, #20]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d146      	bne.n	800cb0e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ca80:	4b25      	ldr	r3, [pc, #148]	; (800cb18 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	69ba      	ldr	r2, [r7, #24]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d10a      	bne.n	800caa0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ca8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8e:	f383 8811 	msr	BASEPRI, r3
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	f3bf 8f4f 	dsb	sy
 800ca9a:	60bb      	str	r3, [r7, #8]
}
 800ca9c:	bf00      	nop
 800ca9e:	e7fe      	b.n	800ca9e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	69fa      	ldr	r2, [r7, #28]
 800caaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	699b      	ldr	r3, [r3, #24]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	db04      	blt.n	800cabe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	6959      	ldr	r1, [r3, #20]
 800cac2:	693a      	ldr	r2, [r7, #16]
 800cac4:	4613      	mov	r3, r2
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	4413      	add	r3, r2
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	4a13      	ldr	r2, [pc, #76]	; (800cb1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cace:	4413      	add	r3, r2
 800cad0:	4299      	cmp	r1, r3
 800cad2:	d11c      	bne.n	800cb0e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	3304      	adds	r3, #4
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fd fef5 	bl	800a8c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae2:	4b0f      	ldr	r3, [pc, #60]	; (800cb20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d903      	bls.n	800caf2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caee:	4a0c      	ldr	r2, [pc, #48]	; (800cb20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800caf0:	6013      	str	r3, [r2, #0]
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caf6:	4613      	mov	r3, r2
 800caf8:	009b      	lsls	r3, r3, #2
 800cafa:	4413      	add	r3, r2
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	4a07      	ldr	r2, [pc, #28]	; (800cb1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cb00:	441a      	add	r2, r3
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	3304      	adds	r3, #4
 800cb06:	4619      	mov	r1, r3
 800cb08:	4610      	mov	r0, r2
 800cb0a:	f7fd fe80 	bl	800a80e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb0e:	bf00      	nop
 800cb10:	3720      	adds	r7, #32
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop
 800cb18:	240057ac 	.word	0x240057ac
 800cb1c:	240057b0 	.word	0x240057b0
 800cb20:	24005c88 	.word	0x24005c88

0800cb24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cb24:	b480      	push	{r7}
 800cb26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cb28:	4b07      	ldr	r3, [pc, #28]	; (800cb48 <pvTaskIncrementMutexHeldCount+0x24>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d004      	beq.n	800cb3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cb30:	4b05      	ldr	r3, [pc, #20]	; (800cb48 <pvTaskIncrementMutexHeldCount+0x24>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb36:	3201      	adds	r2, #1
 800cb38:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800cb3a:	4b03      	ldr	r3, [pc, #12]	; (800cb48 <pvTaskIncrementMutexHeldCount+0x24>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
	}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr
 800cb48:	240057ac 	.word	0x240057ac

0800cb4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cb56:	4b21      	ldr	r3, [pc, #132]	; (800cbdc <prvAddCurrentTaskToDelayedList+0x90>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb5c:	4b20      	ldr	r3, [pc, #128]	; (800cbe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	3304      	adds	r3, #4
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7fd feb0 	bl	800a8c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb6e:	d10a      	bne.n	800cb86 <prvAddCurrentTaskToDelayedList+0x3a>
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d007      	beq.n	800cb86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb76:	4b1a      	ldr	r3, [pc, #104]	; (800cbe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	3304      	adds	r3, #4
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	4819      	ldr	r0, [pc, #100]	; (800cbe4 <prvAddCurrentTaskToDelayedList+0x98>)
 800cb80:	f7fd fe45 	bl	800a80e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cb84:	e026      	b.n	800cbd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cb86:	68fa      	ldr	r2, [r7, #12]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	4413      	add	r3, r2
 800cb8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cb8e:	4b14      	ldr	r3, [pc, #80]	; (800cbe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	68ba      	ldr	r2, [r7, #8]
 800cb94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cb96:	68ba      	ldr	r2, [r7, #8]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d209      	bcs.n	800cbb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb9e:	4b12      	ldr	r3, [pc, #72]	; (800cbe8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	4b0f      	ldr	r3, [pc, #60]	; (800cbe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	3304      	adds	r3, #4
 800cba8:	4619      	mov	r1, r3
 800cbaa:	4610      	mov	r0, r2
 800cbac:	f7fd fe53 	bl	800a856 <vListInsert>
}
 800cbb0:	e010      	b.n	800cbd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbb2:	4b0e      	ldr	r3, [pc, #56]	; (800cbec <prvAddCurrentTaskToDelayedList+0xa0>)
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	4b0a      	ldr	r3, [pc, #40]	; (800cbe0 <prvAddCurrentTaskToDelayedList+0x94>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	3304      	adds	r3, #4
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	4610      	mov	r0, r2
 800cbc0:	f7fd fe49 	bl	800a856 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cbc4:	4b0a      	ldr	r3, [pc, #40]	; (800cbf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	68ba      	ldr	r2, [r7, #8]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d202      	bcs.n	800cbd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cbce:	4a08      	ldr	r2, [pc, #32]	; (800cbf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	6013      	str	r3, [r2, #0]
}
 800cbd4:	bf00      	nop
 800cbd6:	3710      	adds	r7, #16
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	24005c84 	.word	0x24005c84
 800cbe0:	240057ac 	.word	0x240057ac
 800cbe4:	24005c6c 	.word	0x24005c6c
 800cbe8:	24005c3c 	.word	0x24005c3c
 800cbec:	24005c38 	.word	0x24005c38
 800cbf0:	24005ca0 	.word	0x24005ca0

0800cbf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b08a      	sub	sp, #40	; 0x28
 800cbf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cbfe:	f000 fb07 	bl	800d210 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cc02:	4b1c      	ldr	r3, [pc, #112]	; (800cc74 <xTimerCreateTimerTask+0x80>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d021      	beq.n	800cc4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cc12:	1d3a      	adds	r2, r7, #4
 800cc14:	f107 0108 	add.w	r1, r7, #8
 800cc18:	f107 030c 	add.w	r3, r7, #12
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7fd fdaf 	bl	800a780 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cc22:	6879      	ldr	r1, [r7, #4]
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	9202      	str	r2, [sp, #8]
 800cc2a:	9301      	str	r3, [sp, #4]
 800cc2c:	2302      	movs	r3, #2
 800cc2e:	9300      	str	r3, [sp, #0]
 800cc30:	2300      	movs	r3, #0
 800cc32:	460a      	mov	r2, r1
 800cc34:	4910      	ldr	r1, [pc, #64]	; (800cc78 <xTimerCreateTimerTask+0x84>)
 800cc36:	4811      	ldr	r0, [pc, #68]	; (800cc7c <xTimerCreateTimerTask+0x88>)
 800cc38:	f7fe ff70 	bl	800bb1c <xTaskCreateStatic>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	4a10      	ldr	r2, [pc, #64]	; (800cc80 <xTimerCreateTimerTask+0x8c>)
 800cc40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cc42:	4b0f      	ldr	r3, [pc, #60]	; (800cc80 <xTimerCreateTimerTask+0x8c>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d001      	beq.n	800cc4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d10a      	bne.n	800cc6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc58:	f383 8811 	msr	BASEPRI, r3
 800cc5c:	f3bf 8f6f 	isb	sy
 800cc60:	f3bf 8f4f 	dsb	sy
 800cc64:	613b      	str	r3, [r7, #16]
}
 800cc66:	bf00      	nop
 800cc68:	e7fe      	b.n	800cc68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cc6a:	697b      	ldr	r3, [r7, #20]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	24005ce4 	.word	0x24005ce4
 800cc78:	0801cbd8 	.word	0x0801cbd8
 800cc7c:	0800cdb9 	.word	0x0800cdb9
 800cc80:	24005ce8 	.word	0x24005ce8

0800cc84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b08a      	sub	sp, #40	; 0x28
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
 800cc90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cc92:	2300      	movs	r3, #0
 800cc94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10a      	bne.n	800ccb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca0:	f383 8811 	msr	BASEPRI, r3
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	623b      	str	r3, [r7, #32]
}
 800ccae:	bf00      	nop
 800ccb0:	e7fe      	b.n	800ccb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ccb2:	4b1a      	ldr	r3, [pc, #104]	; (800cd1c <xTimerGenericCommand+0x98>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d02a      	beq.n	800cd10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	2b05      	cmp	r3, #5
 800ccca:	dc18      	bgt.n	800ccfe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cccc:	f7ff fdb4 	bl	800c838 <xTaskGetSchedulerState>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b02      	cmp	r3, #2
 800ccd4:	d109      	bne.n	800ccea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ccd6:	4b11      	ldr	r3, [pc, #68]	; (800cd1c <xTimerGenericCommand+0x98>)
 800ccd8:	6818      	ldr	r0, [r3, #0]
 800ccda:	f107 0110 	add.w	r1, r7, #16
 800ccde:	2300      	movs	r3, #0
 800cce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cce2:	f7fe f879 	bl	800add8 <xQueueGenericSend>
 800cce6:	6278      	str	r0, [r7, #36]	; 0x24
 800cce8:	e012      	b.n	800cd10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ccea:	4b0c      	ldr	r3, [pc, #48]	; (800cd1c <xTimerGenericCommand+0x98>)
 800ccec:	6818      	ldr	r0, [r3, #0]
 800ccee:	f107 0110 	add.w	r1, r7, #16
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f7fe f86f 	bl	800add8 <xQueueGenericSend>
 800ccfa:	6278      	str	r0, [r7, #36]	; 0x24
 800ccfc:	e008      	b.n	800cd10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ccfe:	4b07      	ldr	r3, [pc, #28]	; (800cd1c <xTimerGenericCommand+0x98>)
 800cd00:	6818      	ldr	r0, [r3, #0]
 800cd02:	f107 0110 	add.w	r1, r7, #16
 800cd06:	2300      	movs	r3, #0
 800cd08:	683a      	ldr	r2, [r7, #0]
 800cd0a:	f7fe f963 	bl	800afd4 <xQueueGenericSendFromISR>
 800cd0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3728      	adds	r7, #40	; 0x28
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	24005ce4 	.word	0x24005ce4

0800cd20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b088      	sub	sp, #32
 800cd24:	af02      	add	r7, sp, #8
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd2a:	4b22      	ldr	r3, [pc, #136]	; (800cdb4 <prvProcessExpiredTimer+0x94>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	68db      	ldr	r3, [r3, #12]
 800cd32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	3304      	adds	r3, #4
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7fd fdc5 	bl	800a8c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd44:	f003 0304 	and.w	r3, r3, #4
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d022      	beq.n	800cd92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	699a      	ldr	r2, [r3, #24]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	18d1      	adds	r1, r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	683a      	ldr	r2, [r7, #0]
 800cd58:	6978      	ldr	r0, [r7, #20]
 800cd5a:	f000 f8d1 	bl	800cf00 <prvInsertTimerInActiveList>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d01f      	beq.n	800cda4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cd64:	2300      	movs	r3, #0
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	2300      	movs	r3, #0
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	6978      	ldr	r0, [r7, #20]
 800cd70:	f7ff ff88 	bl	800cc84 <xTimerGenericCommand>
 800cd74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d113      	bne.n	800cda4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd80:	f383 8811 	msr	BASEPRI, r3
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	f3bf 8f4f 	dsb	sy
 800cd8c:	60fb      	str	r3, [r7, #12]
}
 800cd8e:	bf00      	nop
 800cd90:	e7fe      	b.n	800cd90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd98:	f023 0301 	bic.w	r3, r3, #1
 800cd9c:	b2da      	uxtb	r2, r3
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	6a1b      	ldr	r3, [r3, #32]
 800cda8:	6978      	ldr	r0, [r7, #20]
 800cdaa:	4798      	blx	r3
}
 800cdac:	bf00      	nop
 800cdae:	3718      	adds	r7, #24
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	24005cdc 	.word	0x24005cdc

0800cdb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cdc0:	f107 0308 	add.w	r3, r7, #8
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f000 f857 	bl	800ce78 <prvGetNextExpireTime>
 800cdca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	4619      	mov	r1, r3
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f000 f803 	bl	800cddc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cdd6:	f000 f8d5 	bl	800cf84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cdda:	e7f1      	b.n	800cdc0 <prvTimerTask+0x8>

0800cddc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cde6:	f7ff f8fd 	bl	800bfe4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cdea:	f107 0308 	add.w	r3, r7, #8
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f000 f866 	bl	800cec0 <prvSampleTimeNow>
 800cdf4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d130      	bne.n	800ce5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d10a      	bne.n	800ce18 <prvProcessTimerOrBlockTask+0x3c>
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d806      	bhi.n	800ce18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ce0a:	f7ff f8f9 	bl	800c000 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ce0e:	68f9      	ldr	r1, [r7, #12]
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f7ff ff85 	bl	800cd20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ce16:	e024      	b.n	800ce62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d008      	beq.n	800ce30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ce1e:	4b13      	ldr	r3, [pc, #76]	; (800ce6c <prvProcessTimerOrBlockTask+0x90>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d101      	bne.n	800ce2c <prvProcessTimerOrBlockTask+0x50>
 800ce28:	2301      	movs	r3, #1
 800ce2a:	e000      	b.n	800ce2e <prvProcessTimerOrBlockTask+0x52>
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ce30:	4b0f      	ldr	r3, [pc, #60]	; (800ce70 <prvProcessTimerOrBlockTask+0x94>)
 800ce32:	6818      	ldr	r0, [r3, #0]
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	1ad3      	subs	r3, r2, r3
 800ce3a:	683a      	ldr	r2, [r7, #0]
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	f7fe fe39 	bl	800bab4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ce42:	f7ff f8dd 	bl	800c000 <xTaskResumeAll>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d10a      	bne.n	800ce62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ce4c:	4b09      	ldr	r3, [pc, #36]	; (800ce74 <prvProcessTimerOrBlockTask+0x98>)
 800ce4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce52:	601a      	str	r2, [r3, #0]
 800ce54:	f3bf 8f4f 	dsb	sy
 800ce58:	f3bf 8f6f 	isb	sy
}
 800ce5c:	e001      	b.n	800ce62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ce5e:	f7ff f8cf 	bl	800c000 <xTaskResumeAll>
}
 800ce62:	bf00      	nop
 800ce64:	3710      	adds	r7, #16
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	24005ce0 	.word	0x24005ce0
 800ce70:	24005ce4 	.word	0x24005ce4
 800ce74:	e000ed04 	.word	0xe000ed04

0800ce78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ce80:	4b0e      	ldr	r3, [pc, #56]	; (800cebc <prvGetNextExpireTime+0x44>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d101      	bne.n	800ce8e <prvGetNextExpireTime+0x16>
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	e000      	b.n	800ce90 <prvGetNextExpireTime+0x18>
 800ce8e:	2200      	movs	r2, #0
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d105      	bne.n	800cea8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce9c:	4b07      	ldr	r3, [pc, #28]	; (800cebc <prvGetNextExpireTime+0x44>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	60fb      	str	r3, [r7, #12]
 800cea6:	e001      	b.n	800ceac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ceac:	68fb      	ldr	r3, [r7, #12]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3714      	adds	r7, #20
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr
 800ceba:	bf00      	nop
 800cebc:	24005cdc 	.word	0x24005cdc

0800cec0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cec8:	f7ff f938 	bl	800c13c <xTaskGetTickCount>
 800cecc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cece:	4b0b      	ldr	r3, [pc, #44]	; (800cefc <prvSampleTimeNow+0x3c>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d205      	bcs.n	800cee4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ced8:	f000 f936 	bl	800d148 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2201      	movs	r2, #1
 800cee0:	601a      	str	r2, [r3, #0]
 800cee2:	e002      	b.n	800ceea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2200      	movs	r2, #0
 800cee8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ceea:	4a04      	ldr	r2, [pc, #16]	; (800cefc <prvSampleTimeNow+0x3c>)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cef0:	68fb      	ldr	r3, [r7, #12]
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	24005cec 	.word	0x24005cec

0800cf00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b086      	sub	sp, #24
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	607a      	str	r2, [r7, #4]
 800cf0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	68ba      	ldr	r2, [r7, #8]
 800cf16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	68fa      	ldr	r2, [r7, #12]
 800cf1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d812      	bhi.n	800cf4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	1ad2      	subs	r2, r2, r3
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	699b      	ldr	r3, [r3, #24]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d302      	bcc.n	800cf3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cf34:	2301      	movs	r3, #1
 800cf36:	617b      	str	r3, [r7, #20]
 800cf38:	e01b      	b.n	800cf72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cf3a:	4b10      	ldr	r3, [pc, #64]	; (800cf7c <prvInsertTimerInActiveList+0x7c>)
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	3304      	adds	r3, #4
 800cf42:	4619      	mov	r1, r3
 800cf44:	4610      	mov	r0, r2
 800cf46:	f7fd fc86 	bl	800a856 <vListInsert>
 800cf4a:	e012      	b.n	800cf72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d206      	bcs.n	800cf62 <prvInsertTimerInActiveList+0x62>
 800cf54:	68ba      	ldr	r2, [r7, #8]
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d302      	bcc.n	800cf62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	617b      	str	r3, [r7, #20]
 800cf60:	e007      	b.n	800cf72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf62:	4b07      	ldr	r3, [pc, #28]	; (800cf80 <prvInsertTimerInActiveList+0x80>)
 800cf64:	681a      	ldr	r2, [r3, #0]
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	3304      	adds	r3, #4
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	4610      	mov	r0, r2
 800cf6e:	f7fd fc72 	bl	800a856 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cf72:	697b      	ldr	r3, [r7, #20]
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3718      	adds	r7, #24
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	24005ce0 	.word	0x24005ce0
 800cf80:	24005cdc 	.word	0x24005cdc

0800cf84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b08e      	sub	sp, #56	; 0x38
 800cf88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf8a:	e0ca      	b.n	800d122 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	da18      	bge.n	800cfc4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cf92:	1d3b      	adds	r3, r7, #4
 800cf94:	3304      	adds	r3, #4
 800cf96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d10a      	bne.n	800cfb4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa2:	f383 8811 	msr	BASEPRI, r3
 800cfa6:	f3bf 8f6f 	isb	sy
 800cfaa:	f3bf 8f4f 	dsb	sy
 800cfae:	61fb      	str	r3, [r7, #28]
}
 800cfb0:	bf00      	nop
 800cfb2:	e7fe      	b.n	800cfb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfba:	6850      	ldr	r0, [r2, #4]
 800cfbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfbe:	6892      	ldr	r2, [r2, #8]
 800cfc0:	4611      	mov	r1, r2
 800cfc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	f2c0 80aa 	blt.w	800d120 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd2:	695b      	ldr	r3, [r3, #20]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d004      	beq.n	800cfe2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfda:	3304      	adds	r3, #4
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7fd fc73 	bl	800a8c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cfe2:	463b      	mov	r3, r7
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7ff ff6b 	bl	800cec0 <prvSampleTimeNow>
 800cfea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2b09      	cmp	r3, #9
 800cff0:	f200 8097 	bhi.w	800d122 <prvProcessReceivedCommands+0x19e>
 800cff4:	a201      	add	r2, pc, #4	; (adr r2, 800cffc <prvProcessReceivedCommands+0x78>)
 800cff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cffa:	bf00      	nop
 800cffc:	0800d025 	.word	0x0800d025
 800d000:	0800d025 	.word	0x0800d025
 800d004:	0800d025 	.word	0x0800d025
 800d008:	0800d099 	.word	0x0800d099
 800d00c:	0800d0ad 	.word	0x0800d0ad
 800d010:	0800d0f7 	.word	0x0800d0f7
 800d014:	0800d025 	.word	0x0800d025
 800d018:	0800d025 	.word	0x0800d025
 800d01c:	0800d099 	.word	0x0800d099
 800d020:	0800d0ad 	.word	0x0800d0ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d02a:	f043 0301 	orr.w	r3, r3, #1
 800d02e:	b2da      	uxtb	r2, r3
 800d030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d036:	68ba      	ldr	r2, [r7, #8]
 800d038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03a:	699b      	ldr	r3, [r3, #24]
 800d03c:	18d1      	adds	r1, r2, r3
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d044:	f7ff ff5c 	bl	800cf00 <prvInsertTimerInActiveList>
 800d048:	4603      	mov	r3, r0
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d069      	beq.n	800d122 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d050:	6a1b      	ldr	r3, [r3, #32]
 800d052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d054:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d05c:	f003 0304 	and.w	r3, r3, #4
 800d060:	2b00      	cmp	r3, #0
 800d062:	d05e      	beq.n	800d122 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d064:	68ba      	ldr	r2, [r7, #8]
 800d066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d068:	699b      	ldr	r3, [r3, #24]
 800d06a:	441a      	add	r2, r3
 800d06c:	2300      	movs	r3, #0
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	2300      	movs	r3, #0
 800d072:	2100      	movs	r1, #0
 800d074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d076:	f7ff fe05 	bl	800cc84 <xTimerGenericCommand>
 800d07a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d07c:	6a3b      	ldr	r3, [r7, #32]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d14f      	bne.n	800d122 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d086:	f383 8811 	msr	BASEPRI, r3
 800d08a:	f3bf 8f6f 	isb	sy
 800d08e:	f3bf 8f4f 	dsb	sy
 800d092:	61bb      	str	r3, [r7, #24]
}
 800d094:	bf00      	nop
 800d096:	e7fe      	b.n	800d096 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d09e:	f023 0301 	bic.w	r3, r3, #1
 800d0a2:	b2da      	uxtb	r2, r3
 800d0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d0aa:	e03a      	b.n	800d122 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0b2:	f043 0301 	orr.w	r3, r3, #1
 800d0b6:	b2da      	uxtb	r2, r3
 800d0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d0be:	68ba      	ldr	r2, [r7, #8]
 800d0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c6:	699b      	ldr	r3, [r3, #24]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d10a      	bne.n	800d0e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d0:	f383 8811 	msr	BASEPRI, r3
 800d0d4:	f3bf 8f6f 	isb	sy
 800d0d8:	f3bf 8f4f 	dsb	sy
 800d0dc:	617b      	str	r3, [r7, #20]
}
 800d0de:	bf00      	nop
 800d0e0:	e7fe      	b.n	800d0e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e4:	699a      	ldr	r2, [r3, #24]
 800d0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e8:	18d1      	adds	r1, r2, r3
 800d0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0f0:	f7ff ff06 	bl	800cf00 <prvInsertTimerInActiveList>
					break;
 800d0f4:	e015      	b.n	800d122 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0fc:	f003 0302 	and.w	r3, r3, #2
 800d100:	2b00      	cmp	r3, #0
 800d102:	d103      	bne.n	800d10c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d106:	f000 fbeb 	bl	800d8e0 <vPortFree>
 800d10a:	e00a      	b.n	800d122 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d112:	f023 0301 	bic.w	r3, r3, #1
 800d116:	b2da      	uxtb	r2, r3
 800d118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d11e:	e000      	b.n	800d122 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d120:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d122:	4b08      	ldr	r3, [pc, #32]	; (800d144 <prvProcessReceivedCommands+0x1c0>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	1d39      	adds	r1, r7, #4
 800d128:	2200      	movs	r2, #0
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7fe f87a 	bl	800b224 <xQueueReceive>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	f47f af2a 	bne.w	800cf8c <prvProcessReceivedCommands+0x8>
	}
}
 800d138:	bf00      	nop
 800d13a:	bf00      	nop
 800d13c:	3730      	adds	r7, #48	; 0x30
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	24005ce4 	.word	0x24005ce4

0800d148 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b088      	sub	sp, #32
 800d14c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d14e:	e048      	b.n	800d1e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d150:	4b2d      	ldr	r3, [pc, #180]	; (800d208 <prvSwitchTimerLists+0xc0>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	68db      	ldr	r3, [r3, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d15a:	4b2b      	ldr	r3, [pc, #172]	; (800d208 <prvSwitchTimerLists+0xc0>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	68db      	ldr	r3, [r3, #12]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	3304      	adds	r3, #4
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fd fbad 	bl	800a8c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	6a1b      	ldr	r3, [r3, #32]
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d17c:	f003 0304 	and.w	r3, r3, #4
 800d180:	2b00      	cmp	r3, #0
 800d182:	d02e      	beq.n	800d1e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	699b      	ldr	r3, [r3, #24]
 800d188:	693a      	ldr	r2, [r7, #16]
 800d18a:	4413      	add	r3, r2
 800d18c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d18e:	68ba      	ldr	r2, [r7, #8]
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	429a      	cmp	r2, r3
 800d194:	d90e      	bls.n	800d1b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	68ba      	ldr	r2, [r7, #8]
 800d19a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	68fa      	ldr	r2, [r7, #12]
 800d1a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d1a2:	4b19      	ldr	r3, [pc, #100]	; (800d208 <prvSwitchTimerLists+0xc0>)
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	3304      	adds	r3, #4
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	4610      	mov	r0, r2
 800d1ae:	f7fd fb52 	bl	800a856 <vListInsert>
 800d1b2:	e016      	b.n	800d1e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	9300      	str	r3, [sp, #0]
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	693a      	ldr	r2, [r7, #16]
 800d1bc:	2100      	movs	r1, #0
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f7ff fd60 	bl	800cc84 <xTimerGenericCommand>
 800d1c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d10a      	bne.n	800d1e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d0:	f383 8811 	msr	BASEPRI, r3
 800d1d4:	f3bf 8f6f 	isb	sy
 800d1d8:	f3bf 8f4f 	dsb	sy
 800d1dc:	603b      	str	r3, [r7, #0]
}
 800d1de:	bf00      	nop
 800d1e0:	e7fe      	b.n	800d1e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d1e2:	4b09      	ldr	r3, [pc, #36]	; (800d208 <prvSwitchTimerLists+0xc0>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d1b1      	bne.n	800d150 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d1ec:	4b06      	ldr	r3, [pc, #24]	; (800d208 <prvSwitchTimerLists+0xc0>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d1f2:	4b06      	ldr	r3, [pc, #24]	; (800d20c <prvSwitchTimerLists+0xc4>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a04      	ldr	r2, [pc, #16]	; (800d208 <prvSwitchTimerLists+0xc0>)
 800d1f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d1fa:	4a04      	ldr	r2, [pc, #16]	; (800d20c <prvSwitchTimerLists+0xc4>)
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	6013      	str	r3, [r2, #0]
}
 800d200:	bf00      	nop
 800d202:	3718      	adds	r7, #24
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	24005cdc 	.word	0x24005cdc
 800d20c:	24005ce0 	.word	0x24005ce0

0800d210 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d216:	f000 f975 	bl	800d504 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d21a:	4b15      	ldr	r3, [pc, #84]	; (800d270 <prvCheckForValidListAndQueue+0x60>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d120      	bne.n	800d264 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d222:	4814      	ldr	r0, [pc, #80]	; (800d274 <prvCheckForValidListAndQueue+0x64>)
 800d224:	f7fd fac6 	bl	800a7b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d228:	4813      	ldr	r0, [pc, #76]	; (800d278 <prvCheckForValidListAndQueue+0x68>)
 800d22a:	f7fd fac3 	bl	800a7b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d22e:	4b13      	ldr	r3, [pc, #76]	; (800d27c <prvCheckForValidListAndQueue+0x6c>)
 800d230:	4a10      	ldr	r2, [pc, #64]	; (800d274 <prvCheckForValidListAndQueue+0x64>)
 800d232:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d234:	4b12      	ldr	r3, [pc, #72]	; (800d280 <prvCheckForValidListAndQueue+0x70>)
 800d236:	4a10      	ldr	r2, [pc, #64]	; (800d278 <prvCheckForValidListAndQueue+0x68>)
 800d238:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d23a:	2300      	movs	r3, #0
 800d23c:	9300      	str	r3, [sp, #0]
 800d23e:	4b11      	ldr	r3, [pc, #68]	; (800d284 <prvCheckForValidListAndQueue+0x74>)
 800d240:	4a11      	ldr	r2, [pc, #68]	; (800d288 <prvCheckForValidListAndQueue+0x78>)
 800d242:	2110      	movs	r1, #16
 800d244:	200a      	movs	r0, #10
 800d246:	f7fd fbd1 	bl	800a9ec <xQueueGenericCreateStatic>
 800d24a:	4603      	mov	r3, r0
 800d24c:	4a08      	ldr	r2, [pc, #32]	; (800d270 <prvCheckForValidListAndQueue+0x60>)
 800d24e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d250:	4b07      	ldr	r3, [pc, #28]	; (800d270 <prvCheckForValidListAndQueue+0x60>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d005      	beq.n	800d264 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d258:	4b05      	ldr	r3, [pc, #20]	; (800d270 <prvCheckForValidListAndQueue+0x60>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	490b      	ldr	r1, [pc, #44]	; (800d28c <prvCheckForValidListAndQueue+0x7c>)
 800d25e:	4618      	mov	r0, r3
 800d260:	f7fe fbd4 	bl	800ba0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d264:	f000 f97e 	bl	800d564 <vPortExitCritical>
}
 800d268:	bf00      	nop
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	24005ce4 	.word	0x24005ce4
 800d274:	24005cb4 	.word	0x24005cb4
 800d278:	24005cc8 	.word	0x24005cc8
 800d27c:	24005cdc 	.word	0x24005cdc
 800d280:	24005ce0 	.word	0x24005ce0
 800d284:	24005d90 	.word	0x24005d90
 800d288:	24005cf0 	.word	0x24005cf0
 800d28c:	0801cbe0 	.word	0x0801cbe0

0800d290 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d290:	b480      	push	{r7}
 800d292:	b085      	sub	sp, #20
 800d294:	af00      	add	r7, sp, #0
 800d296:	60f8      	str	r0, [r7, #12]
 800d298:	60b9      	str	r1, [r7, #8]
 800d29a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	3b04      	subs	r3, #4
 800d2a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d2a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	3b04      	subs	r3, #4
 800d2ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	f023 0201 	bic.w	r2, r3, #1
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	3b04      	subs	r3, #4
 800d2be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d2c0:	4a0c      	ldr	r2, [pc, #48]	; (800d2f4 <pxPortInitialiseStack+0x64>)
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	3b14      	subs	r3, #20
 800d2ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	3b04      	subs	r3, #4
 800d2d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f06f 0202 	mvn.w	r2, #2
 800d2de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	3b20      	subs	r3, #32
 800d2e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3714      	adds	r7, #20
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr
 800d2f4:	0800d2f9 	.word	0x0800d2f9

0800d2f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d2fe:	2300      	movs	r3, #0
 800d300:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d302:	4b12      	ldr	r3, [pc, #72]	; (800d34c <prvTaskExitError+0x54>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d30a:	d00a      	beq.n	800d322 <prvTaskExitError+0x2a>
	__asm volatile
 800d30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d310:	f383 8811 	msr	BASEPRI, r3
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	f3bf 8f4f 	dsb	sy
 800d31c:	60fb      	str	r3, [r7, #12]
}
 800d31e:	bf00      	nop
 800d320:	e7fe      	b.n	800d320 <prvTaskExitError+0x28>
	__asm volatile
 800d322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d326:	f383 8811 	msr	BASEPRI, r3
 800d32a:	f3bf 8f6f 	isb	sy
 800d32e:	f3bf 8f4f 	dsb	sy
 800d332:	60bb      	str	r3, [r7, #8]
}
 800d334:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d336:	bf00      	nop
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d0fc      	beq.n	800d338 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d33e:	bf00      	nop
 800d340:	bf00      	nop
 800d342:	3714      	adds	r7, #20
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr
 800d34c:	24000024 	.word	0x24000024

0800d350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d350:	4b07      	ldr	r3, [pc, #28]	; (800d370 <pxCurrentTCBConst2>)
 800d352:	6819      	ldr	r1, [r3, #0]
 800d354:	6808      	ldr	r0, [r1, #0]
 800d356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d35a:	f380 8809 	msr	PSP, r0
 800d35e:	f3bf 8f6f 	isb	sy
 800d362:	f04f 0000 	mov.w	r0, #0
 800d366:	f380 8811 	msr	BASEPRI, r0
 800d36a:	4770      	bx	lr
 800d36c:	f3af 8000 	nop.w

0800d370 <pxCurrentTCBConst2>:
 800d370:	240057ac 	.word	0x240057ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d374:	bf00      	nop
 800d376:	bf00      	nop

0800d378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d378:	4808      	ldr	r0, [pc, #32]	; (800d39c <prvPortStartFirstTask+0x24>)
 800d37a:	6800      	ldr	r0, [r0, #0]
 800d37c:	6800      	ldr	r0, [r0, #0]
 800d37e:	f380 8808 	msr	MSP, r0
 800d382:	f04f 0000 	mov.w	r0, #0
 800d386:	f380 8814 	msr	CONTROL, r0
 800d38a:	b662      	cpsie	i
 800d38c:	b661      	cpsie	f
 800d38e:	f3bf 8f4f 	dsb	sy
 800d392:	f3bf 8f6f 	isb	sy
 800d396:	df00      	svc	0
 800d398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d39a:	bf00      	nop
 800d39c:	e000ed08 	.word	0xe000ed08

0800d3a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b088      	sub	sp, #32
 800d3a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d3a6:	4b4e      	ldr	r3, [pc, #312]	; (800d4e0 <xPortStartScheduler+0x140>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a4e      	ldr	r2, [pc, #312]	; (800d4e4 <xPortStartScheduler+0x144>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d10a      	bne.n	800d3c6 <xPortStartScheduler+0x26>
	__asm volatile
 800d3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b4:	f383 8811 	msr	BASEPRI, r3
 800d3b8:	f3bf 8f6f 	isb	sy
 800d3bc:	f3bf 8f4f 	dsb	sy
 800d3c0:	61bb      	str	r3, [r7, #24]
}
 800d3c2:	bf00      	nop
 800d3c4:	e7fe      	b.n	800d3c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d3c6:	4b46      	ldr	r3, [pc, #280]	; (800d4e0 <xPortStartScheduler+0x140>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4a47      	ldr	r2, [pc, #284]	; (800d4e8 <xPortStartScheduler+0x148>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d10a      	bne.n	800d3e6 <xPortStartScheduler+0x46>
	__asm volatile
 800d3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d4:	f383 8811 	msr	BASEPRI, r3
 800d3d8:	f3bf 8f6f 	isb	sy
 800d3dc:	f3bf 8f4f 	dsb	sy
 800d3e0:	617b      	str	r3, [r7, #20]
}
 800d3e2:	bf00      	nop
 800d3e4:	e7fe      	b.n	800d3e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d3e6:	4b41      	ldr	r3, [pc, #260]	; (800d4ec <xPortStartScheduler+0x14c>)
 800d3e8:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d3ea:	69fb      	ldr	r3, [r7, #28]
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	22ff      	movs	r2, #255	; 0xff
 800d3f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d400:	79fb      	ldrb	r3, [r7, #7]
 800d402:	b2db      	uxtb	r3, r3
 800d404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d408:	b2da      	uxtb	r2, r3
 800d40a:	4b39      	ldr	r3, [pc, #228]	; (800d4f0 <xPortStartScheduler+0x150>)
 800d40c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d40e:	4b39      	ldr	r3, [pc, #228]	; (800d4f4 <xPortStartScheduler+0x154>)
 800d410:	2207      	movs	r2, #7
 800d412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d414:	e009      	b.n	800d42a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d416:	4b37      	ldr	r3, [pc, #220]	; (800d4f4 <xPortStartScheduler+0x154>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	3b01      	subs	r3, #1
 800d41c:	4a35      	ldr	r2, [pc, #212]	; (800d4f4 <xPortStartScheduler+0x154>)
 800d41e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d420:	79fb      	ldrb	r3, [r7, #7]
 800d422:	b2db      	uxtb	r3, r3
 800d424:	005b      	lsls	r3, r3, #1
 800d426:	b2db      	uxtb	r3, r3
 800d428:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d42a:	79fb      	ldrb	r3, [r7, #7]
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d432:	2b80      	cmp	r3, #128	; 0x80
 800d434:	d0ef      	beq.n	800d416 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800d436:	4b2f      	ldr	r3, [pc, #188]	; (800d4f4 <xPortStartScheduler+0x154>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f1c3 0307 	rsb	r3, r3, #7
 800d43e:	2b04      	cmp	r3, #4
 800d440:	d00a      	beq.n	800d458 <xPortStartScheduler+0xb8>
	__asm volatile
 800d442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d446:	f383 8811 	msr	BASEPRI, r3
 800d44a:	f3bf 8f6f 	isb	sy
 800d44e:	f3bf 8f4f 	dsb	sy
 800d452:	613b      	str	r3, [r7, #16]
}
 800d454:	bf00      	nop
 800d456:	e7fe      	b.n	800d456 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d458:	4b26      	ldr	r3, [pc, #152]	; (800d4f4 <xPortStartScheduler+0x154>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f1c3 0307 	rsb	r3, r3, #7
 800d460:	2b04      	cmp	r3, #4
 800d462:	d00a      	beq.n	800d47a <xPortStartScheduler+0xda>
	__asm volatile
 800d464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d468:	f383 8811 	msr	BASEPRI, r3
 800d46c:	f3bf 8f6f 	isb	sy
 800d470:	f3bf 8f4f 	dsb	sy
 800d474:	60fb      	str	r3, [r7, #12]
}
 800d476:	bf00      	nop
 800d478:	e7fe      	b.n	800d478 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d47a:	4b1e      	ldr	r3, [pc, #120]	; (800d4f4 <xPortStartScheduler+0x154>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	021b      	lsls	r3, r3, #8
 800d480:	4a1c      	ldr	r2, [pc, #112]	; (800d4f4 <xPortStartScheduler+0x154>)
 800d482:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d484:	4b1b      	ldr	r3, [pc, #108]	; (800d4f4 <xPortStartScheduler+0x154>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d48c:	4a19      	ldr	r2, [pc, #100]	; (800d4f4 <xPortStartScheduler+0x154>)
 800d48e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	b2da      	uxtb	r2, r3
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d498:	4b17      	ldr	r3, [pc, #92]	; (800d4f8 <xPortStartScheduler+0x158>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4a16      	ldr	r2, [pc, #88]	; (800d4f8 <xPortStartScheduler+0x158>)
 800d49e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d4a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d4a4:	4b14      	ldr	r3, [pc, #80]	; (800d4f8 <xPortStartScheduler+0x158>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4a13      	ldr	r2, [pc, #76]	; (800d4f8 <xPortStartScheduler+0x158>)
 800d4aa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d4ae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d4b0:	f000 f8dc 	bl	800d66c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d4b4:	4b11      	ldr	r3, [pc, #68]	; (800d4fc <xPortStartScheduler+0x15c>)
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d4ba:	f000 f8fb 	bl	800d6b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d4be:	4b10      	ldr	r3, [pc, #64]	; (800d500 <xPortStartScheduler+0x160>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	4a0f      	ldr	r2, [pc, #60]	; (800d500 <xPortStartScheduler+0x160>)
 800d4c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d4c8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d4ca:	f7ff ff55 	bl	800d378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d4ce:	f7fe ff11 	bl	800c2f4 <vTaskSwitchContext>
	prvTaskExitError();
 800d4d2:	f7ff ff11 	bl	800d2f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d4d6:	2300      	movs	r3, #0
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3720      	adds	r7, #32
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	e000ed00 	.word	0xe000ed00
 800d4e4:	410fc271 	.word	0x410fc271
 800d4e8:	410fc270 	.word	0x410fc270
 800d4ec:	e000e400 	.word	0xe000e400
 800d4f0:	24005de0 	.word	0x24005de0
 800d4f4:	24005de4 	.word	0x24005de4
 800d4f8:	e000ed20 	.word	0xe000ed20
 800d4fc:	24000024 	.word	0x24000024
 800d500:	e000ef34 	.word	0xe000ef34

0800d504 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
	__asm volatile
 800d50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50e:	f383 8811 	msr	BASEPRI, r3
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	607b      	str	r3, [r7, #4]
}
 800d51c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d51e:	4b0f      	ldr	r3, [pc, #60]	; (800d55c <vPortEnterCritical+0x58>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	3301      	adds	r3, #1
 800d524:	4a0d      	ldr	r2, [pc, #52]	; (800d55c <vPortEnterCritical+0x58>)
 800d526:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d528:	4b0c      	ldr	r3, [pc, #48]	; (800d55c <vPortEnterCritical+0x58>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d10f      	bne.n	800d550 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d530:	4b0b      	ldr	r3, [pc, #44]	; (800d560 <vPortEnterCritical+0x5c>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	b2db      	uxtb	r3, r3
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00a      	beq.n	800d550 <vPortEnterCritical+0x4c>
	__asm volatile
 800d53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53e:	f383 8811 	msr	BASEPRI, r3
 800d542:	f3bf 8f6f 	isb	sy
 800d546:	f3bf 8f4f 	dsb	sy
 800d54a:	603b      	str	r3, [r7, #0]
}
 800d54c:	bf00      	nop
 800d54e:	e7fe      	b.n	800d54e <vPortEnterCritical+0x4a>
	}
}
 800d550:	bf00      	nop
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr
 800d55c:	24000024 	.word	0x24000024
 800d560:	e000ed04 	.word	0xe000ed04

0800d564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d564:	b480      	push	{r7}
 800d566:	b083      	sub	sp, #12
 800d568:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d56a:	4b12      	ldr	r3, [pc, #72]	; (800d5b4 <vPortExitCritical+0x50>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d10a      	bne.n	800d588 <vPortExitCritical+0x24>
	__asm volatile
 800d572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d576:	f383 8811 	msr	BASEPRI, r3
 800d57a:	f3bf 8f6f 	isb	sy
 800d57e:	f3bf 8f4f 	dsb	sy
 800d582:	607b      	str	r3, [r7, #4]
}
 800d584:	bf00      	nop
 800d586:	e7fe      	b.n	800d586 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d588:	4b0a      	ldr	r3, [pc, #40]	; (800d5b4 <vPortExitCritical+0x50>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	3b01      	subs	r3, #1
 800d58e:	4a09      	ldr	r2, [pc, #36]	; (800d5b4 <vPortExitCritical+0x50>)
 800d590:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d592:	4b08      	ldr	r3, [pc, #32]	; (800d5b4 <vPortExitCritical+0x50>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d105      	bne.n	800d5a6 <vPortExitCritical+0x42>
 800d59a:	2300      	movs	r3, #0
 800d59c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	f383 8811 	msr	BASEPRI, r3
}
 800d5a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d5a6:	bf00      	nop
 800d5a8:	370c      	adds	r7, #12
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr
 800d5b2:	bf00      	nop
 800d5b4:	24000024 	.word	0x24000024
	...

0800d5c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d5c0:	f3ef 8009 	mrs	r0, PSP
 800d5c4:	f3bf 8f6f 	isb	sy
 800d5c8:	4b15      	ldr	r3, [pc, #84]	; (800d620 <pxCurrentTCBConst>)
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	f01e 0f10 	tst.w	lr, #16
 800d5d0:	bf08      	it	eq
 800d5d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d5d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5da:	6010      	str	r0, [r2, #0]
 800d5dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d5e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d5e4:	f380 8811 	msr	BASEPRI, r0
 800d5e8:	f3bf 8f4f 	dsb	sy
 800d5ec:	f3bf 8f6f 	isb	sy
 800d5f0:	f7fe fe80 	bl	800c2f4 <vTaskSwitchContext>
 800d5f4:	f04f 0000 	mov.w	r0, #0
 800d5f8:	f380 8811 	msr	BASEPRI, r0
 800d5fc:	bc09      	pop	{r0, r3}
 800d5fe:	6819      	ldr	r1, [r3, #0]
 800d600:	6808      	ldr	r0, [r1, #0]
 800d602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d606:	f01e 0f10 	tst.w	lr, #16
 800d60a:	bf08      	it	eq
 800d60c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d610:	f380 8809 	msr	PSP, r0
 800d614:	f3bf 8f6f 	isb	sy
 800d618:	4770      	bx	lr
 800d61a:	bf00      	nop
 800d61c:	f3af 8000 	nop.w

0800d620 <pxCurrentTCBConst>:
 800d620:	240057ac 	.word	0x240057ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d624:	bf00      	nop
 800d626:	bf00      	nop

0800d628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
	__asm volatile
 800d62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d632:	f383 8811 	msr	BASEPRI, r3
 800d636:	f3bf 8f6f 	isb	sy
 800d63a:	f3bf 8f4f 	dsb	sy
 800d63e:	607b      	str	r3, [r7, #4]
}
 800d640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d642:	f7fe fd9d 	bl	800c180 <xTaskIncrementTick>
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d003      	beq.n	800d654 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d64c:	4b06      	ldr	r3, [pc, #24]	; (800d668 <xPortSysTickHandler+0x40>)
 800d64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d652:	601a      	str	r2, [r3, #0]
 800d654:	2300      	movs	r3, #0
 800d656:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	f383 8811 	msr	BASEPRI, r3
}
 800d65e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d660:	bf00      	nop
 800d662:	3708      	adds	r7, #8
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	e000ed04 	.word	0xe000ed04

0800d66c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d66c:	b480      	push	{r7}
 800d66e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d670:	4b0b      	ldr	r3, [pc, #44]	; (800d6a0 <vPortSetupTimerInterrupt+0x34>)
 800d672:	2200      	movs	r2, #0
 800d674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d676:	4b0b      	ldr	r3, [pc, #44]	; (800d6a4 <vPortSetupTimerInterrupt+0x38>)
 800d678:	2200      	movs	r2, #0
 800d67a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d67c:	4b0a      	ldr	r3, [pc, #40]	; (800d6a8 <vPortSetupTimerInterrupt+0x3c>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4a0a      	ldr	r2, [pc, #40]	; (800d6ac <vPortSetupTimerInterrupt+0x40>)
 800d682:	fba2 2303 	umull	r2, r3, r2, r3
 800d686:	099b      	lsrs	r3, r3, #6
 800d688:	4a09      	ldr	r2, [pc, #36]	; (800d6b0 <vPortSetupTimerInterrupt+0x44>)
 800d68a:	3b01      	subs	r3, #1
 800d68c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d68e:	4b04      	ldr	r3, [pc, #16]	; (800d6a0 <vPortSetupTimerInterrupt+0x34>)
 800d690:	2207      	movs	r2, #7
 800d692:	601a      	str	r2, [r3, #0]
}
 800d694:	bf00      	nop
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr
 800d69e:	bf00      	nop
 800d6a0:	e000e010 	.word	0xe000e010
 800d6a4:	e000e018 	.word	0xe000e018
 800d6a8:	24000000 	.word	0x24000000
 800d6ac:	10624dd3 	.word	0x10624dd3
 800d6b0:	e000e014 	.word	0xe000e014

0800d6b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d6b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d6c4 <vPortEnableVFP+0x10>
 800d6b8:	6801      	ldr	r1, [r0, #0]
 800d6ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d6be:	6001      	str	r1, [r0, #0]
 800d6c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d6c2:	bf00      	nop
 800d6c4:	e000ed88 	.word	0xe000ed88

0800d6c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b085      	sub	sp, #20
 800d6cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d6ce:	f3ef 8305 	mrs	r3, IPSR
 800d6d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2b0f      	cmp	r3, #15
 800d6d8:	d914      	bls.n	800d704 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d6da:	4a17      	ldr	r2, [pc, #92]	; (800d738 <vPortValidateInterruptPriority+0x70>)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	4413      	add	r3, r2
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d6e4:	4b15      	ldr	r3, [pc, #84]	; (800d73c <vPortValidateInterruptPriority+0x74>)
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	7afa      	ldrb	r2, [r7, #11]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d20a      	bcs.n	800d704 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f2:	f383 8811 	msr	BASEPRI, r3
 800d6f6:	f3bf 8f6f 	isb	sy
 800d6fa:	f3bf 8f4f 	dsb	sy
 800d6fe:	607b      	str	r3, [r7, #4]
}
 800d700:	bf00      	nop
 800d702:	e7fe      	b.n	800d702 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d704:	4b0e      	ldr	r3, [pc, #56]	; (800d740 <vPortValidateInterruptPriority+0x78>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d70c:	4b0d      	ldr	r3, [pc, #52]	; (800d744 <vPortValidateInterruptPriority+0x7c>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	429a      	cmp	r2, r3
 800d712:	d90a      	bls.n	800d72a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d718:	f383 8811 	msr	BASEPRI, r3
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	603b      	str	r3, [r7, #0]
}
 800d726:	bf00      	nop
 800d728:	e7fe      	b.n	800d728 <vPortValidateInterruptPriority+0x60>
	}
 800d72a:	bf00      	nop
 800d72c:	3714      	adds	r7, #20
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr
 800d736:	bf00      	nop
 800d738:	e000e3f0 	.word	0xe000e3f0
 800d73c:	24005de0 	.word	0x24005de0
 800d740:	e000ed0c 	.word	0xe000ed0c
 800d744:	24005de4 	.word	0x24005de4

0800d748 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b08a      	sub	sp, #40	; 0x28
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d750:	2300      	movs	r3, #0
 800d752:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d754:	f7fe fc46 	bl	800bfe4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d758:	4b5b      	ldr	r3, [pc, #364]	; (800d8c8 <pvPortMalloc+0x180>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d101      	bne.n	800d764 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d760:	f000 f920 	bl	800d9a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d764:	4b59      	ldr	r3, [pc, #356]	; (800d8cc <pvPortMalloc+0x184>)
 800d766:	681a      	ldr	r2, [r3, #0]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	4013      	ands	r3, r2
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	f040 8093 	bne.w	800d898 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d01d      	beq.n	800d7b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d778:	2208      	movs	r2, #8
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	4413      	add	r3, r2
 800d77e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f003 0307 	and.w	r3, r3, #7
 800d786:	2b00      	cmp	r3, #0
 800d788:	d014      	beq.n	800d7b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f023 0307 	bic.w	r3, r3, #7
 800d790:	3308      	adds	r3, #8
 800d792:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f003 0307 	and.w	r3, r3, #7
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00a      	beq.n	800d7b4 <pvPortMalloc+0x6c>
	__asm volatile
 800d79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	617b      	str	r3, [r7, #20]
}
 800d7b0:	bf00      	nop
 800d7b2:	e7fe      	b.n	800d7b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d06e      	beq.n	800d898 <pvPortMalloc+0x150>
 800d7ba:	4b45      	ldr	r3, [pc, #276]	; (800d8d0 <pvPortMalloc+0x188>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d869      	bhi.n	800d898 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d7c4:	4b43      	ldr	r3, [pc, #268]	; (800d8d4 <pvPortMalloc+0x18c>)
 800d7c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d7c8:	4b42      	ldr	r3, [pc, #264]	; (800d8d4 <pvPortMalloc+0x18c>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7ce:	e004      	b.n	800d7da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d903      	bls.n	800d7ec <pvPortMalloc+0xa4>
 800d7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d1f1      	bne.n	800d7d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d7ec:	4b36      	ldr	r3, [pc, #216]	; (800d8c8 <pvPortMalloc+0x180>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d050      	beq.n	800d898 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d7f6:	6a3b      	ldr	r3, [r7, #32]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2208      	movs	r2, #8
 800d7fc:	4413      	add	r3, r2
 800d7fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	6a3b      	ldr	r3, [r7, #32]
 800d806:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80a:	685a      	ldr	r2, [r3, #4]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	1ad2      	subs	r2, r2, r3
 800d810:	2308      	movs	r3, #8
 800d812:	005b      	lsls	r3, r3, #1
 800d814:	429a      	cmp	r2, r3
 800d816:	d91f      	bls.n	800d858 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	4413      	add	r3, r2
 800d81e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d820:	69bb      	ldr	r3, [r7, #24]
 800d822:	f003 0307 	and.w	r3, r3, #7
 800d826:	2b00      	cmp	r3, #0
 800d828:	d00a      	beq.n	800d840 <pvPortMalloc+0xf8>
	__asm volatile
 800d82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82e:	f383 8811 	msr	BASEPRI, r3
 800d832:	f3bf 8f6f 	isb	sy
 800d836:	f3bf 8f4f 	dsb	sy
 800d83a:	613b      	str	r3, [r7, #16]
}
 800d83c:	bf00      	nop
 800d83e:	e7fe      	b.n	800d83e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d842:	685a      	ldr	r2, [r3, #4]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	1ad2      	subs	r2, r2, r3
 800d848:	69bb      	ldr	r3, [r7, #24]
 800d84a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d852:	69b8      	ldr	r0, [r7, #24]
 800d854:	f000 f908 	bl	800da68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d858:	4b1d      	ldr	r3, [pc, #116]	; (800d8d0 <pvPortMalloc+0x188>)
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85e:	685b      	ldr	r3, [r3, #4]
 800d860:	1ad3      	subs	r3, r2, r3
 800d862:	4a1b      	ldr	r2, [pc, #108]	; (800d8d0 <pvPortMalloc+0x188>)
 800d864:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d866:	4b1a      	ldr	r3, [pc, #104]	; (800d8d0 <pvPortMalloc+0x188>)
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	4b1b      	ldr	r3, [pc, #108]	; (800d8d8 <pvPortMalloc+0x190>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d203      	bcs.n	800d87a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d872:	4b17      	ldr	r3, [pc, #92]	; (800d8d0 <pvPortMalloc+0x188>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4a18      	ldr	r2, [pc, #96]	; (800d8d8 <pvPortMalloc+0x190>)
 800d878:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87c:	685a      	ldr	r2, [r3, #4]
 800d87e:	4b13      	ldr	r3, [pc, #76]	; (800d8cc <pvPortMalloc+0x184>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	431a      	orrs	r2, r3
 800d884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d886:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88a:	2200      	movs	r2, #0
 800d88c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d88e:	4b13      	ldr	r3, [pc, #76]	; (800d8dc <pvPortMalloc+0x194>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	3301      	adds	r3, #1
 800d894:	4a11      	ldr	r2, [pc, #68]	; (800d8dc <pvPortMalloc+0x194>)
 800d896:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d898:	f7fe fbb2 	bl	800c000 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	f003 0307 	and.w	r3, r3, #7
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d00a      	beq.n	800d8bc <pvPortMalloc+0x174>
	__asm volatile
 800d8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8aa:	f383 8811 	msr	BASEPRI, r3
 800d8ae:	f3bf 8f6f 	isb	sy
 800d8b2:	f3bf 8f4f 	dsb	sy
 800d8b6:	60fb      	str	r3, [r7, #12]
}
 800d8b8:	bf00      	nop
 800d8ba:	e7fe      	b.n	800d8ba <pvPortMalloc+0x172>
	return pvReturn;
 800d8bc:	69fb      	ldr	r3, [r7, #28]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3728      	adds	r7, #40	; 0x28
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	24015df0 	.word	0x24015df0
 800d8cc:	24015e04 	.word	0x24015e04
 800d8d0:	24015df4 	.word	0x24015df4
 800d8d4:	24015de8 	.word	0x24015de8
 800d8d8:	24015df8 	.word	0x24015df8
 800d8dc:	24015dfc 	.word	0x24015dfc

0800d8e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b086      	sub	sp, #24
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d04d      	beq.n	800d98e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d8f2:	2308      	movs	r3, #8
 800d8f4:	425b      	negs	r3, r3
 800d8f6:	697a      	ldr	r2, [r7, #20]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	685a      	ldr	r2, [r3, #4]
 800d904:	4b24      	ldr	r3, [pc, #144]	; (800d998 <vPortFree+0xb8>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4013      	ands	r3, r2
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d10a      	bne.n	800d924 <vPortFree+0x44>
	__asm volatile
 800d90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d912:	f383 8811 	msr	BASEPRI, r3
 800d916:	f3bf 8f6f 	isb	sy
 800d91a:	f3bf 8f4f 	dsb	sy
 800d91e:	60fb      	str	r3, [r7, #12]
}
 800d920:	bf00      	nop
 800d922:	e7fe      	b.n	800d922 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d00a      	beq.n	800d942 <vPortFree+0x62>
	__asm volatile
 800d92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d930:	f383 8811 	msr	BASEPRI, r3
 800d934:	f3bf 8f6f 	isb	sy
 800d938:	f3bf 8f4f 	dsb	sy
 800d93c:	60bb      	str	r3, [r7, #8]
}
 800d93e:	bf00      	nop
 800d940:	e7fe      	b.n	800d940 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	685a      	ldr	r2, [r3, #4]
 800d946:	4b14      	ldr	r3, [pc, #80]	; (800d998 <vPortFree+0xb8>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4013      	ands	r3, r2
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d01e      	beq.n	800d98e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d11a      	bne.n	800d98e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	685a      	ldr	r2, [r3, #4]
 800d95c:	4b0e      	ldr	r3, [pc, #56]	; (800d998 <vPortFree+0xb8>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	43db      	mvns	r3, r3
 800d962:	401a      	ands	r2, r3
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d968:	f7fe fb3c 	bl	800bfe4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	685a      	ldr	r2, [r3, #4]
 800d970:	4b0a      	ldr	r3, [pc, #40]	; (800d99c <vPortFree+0xbc>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4413      	add	r3, r2
 800d976:	4a09      	ldr	r2, [pc, #36]	; (800d99c <vPortFree+0xbc>)
 800d978:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d97a:	6938      	ldr	r0, [r7, #16]
 800d97c:	f000 f874 	bl	800da68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d980:	4b07      	ldr	r3, [pc, #28]	; (800d9a0 <vPortFree+0xc0>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	3301      	adds	r3, #1
 800d986:	4a06      	ldr	r2, [pc, #24]	; (800d9a0 <vPortFree+0xc0>)
 800d988:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d98a:	f7fe fb39 	bl	800c000 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d98e:	bf00      	nop
 800d990:	3718      	adds	r7, #24
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	24015e04 	.word	0x24015e04
 800d99c:	24015df4 	.word	0x24015df4
 800d9a0:	24015e00 	.word	0x24015e00

0800d9a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d9aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d9ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d9b0:	4b27      	ldr	r3, [pc, #156]	; (800da50 <prvHeapInit+0xac>)
 800d9b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f003 0307 	and.w	r3, r3, #7
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00c      	beq.n	800d9d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	3307      	adds	r3, #7
 800d9c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f023 0307 	bic.w	r3, r3, #7
 800d9ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d9cc:	68ba      	ldr	r2, [r7, #8]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	1ad3      	subs	r3, r2, r3
 800d9d2:	4a1f      	ldr	r2, [pc, #124]	; (800da50 <prvHeapInit+0xac>)
 800d9d4:	4413      	add	r3, r2
 800d9d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d9dc:	4a1d      	ldr	r2, [pc, #116]	; (800da54 <prvHeapInit+0xb0>)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d9e2:	4b1c      	ldr	r3, [pc, #112]	; (800da54 <prvHeapInit+0xb0>)
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	68ba      	ldr	r2, [r7, #8]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d9f0:	2208      	movs	r2, #8
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	1a9b      	subs	r3, r3, r2
 800d9f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f023 0307 	bic.w	r3, r3, #7
 800d9fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	4a15      	ldr	r2, [pc, #84]	; (800da58 <prvHeapInit+0xb4>)
 800da04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800da06:	4b14      	ldr	r3, [pc, #80]	; (800da58 <prvHeapInit+0xb4>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	2200      	movs	r2, #0
 800da0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800da0e:	4b12      	ldr	r3, [pc, #72]	; (800da58 <prvHeapInit+0xb4>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2200      	movs	r2, #0
 800da14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	68fa      	ldr	r2, [r7, #12]
 800da1e:	1ad2      	subs	r2, r2, r3
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800da24:	4b0c      	ldr	r3, [pc, #48]	; (800da58 <prvHeapInit+0xb4>)
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	4a0a      	ldr	r2, [pc, #40]	; (800da5c <prvHeapInit+0xb8>)
 800da32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	4a09      	ldr	r2, [pc, #36]	; (800da60 <prvHeapInit+0xbc>)
 800da3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da3c:	4b09      	ldr	r3, [pc, #36]	; (800da64 <prvHeapInit+0xc0>)
 800da3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800da42:	601a      	str	r2, [r3, #0]
}
 800da44:	bf00      	nop
 800da46:	3714      	adds	r7, #20
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr
 800da50:	24005de8 	.word	0x24005de8
 800da54:	24015de8 	.word	0x24015de8
 800da58:	24015df0 	.word	0x24015df0
 800da5c:	24015df8 	.word	0x24015df8
 800da60:	24015df4 	.word	0x24015df4
 800da64:	24015e04 	.word	0x24015e04

0800da68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800da68:	b480      	push	{r7}
 800da6a:	b085      	sub	sp, #20
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da70:	4b28      	ldr	r3, [pc, #160]	; (800db14 <prvInsertBlockIntoFreeList+0xac>)
 800da72:	60fb      	str	r3, [r7, #12]
 800da74:	e002      	b.n	800da7c <prvInsertBlockIntoFreeList+0x14>
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	60fb      	str	r3, [r7, #12]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	687a      	ldr	r2, [r7, #4]
 800da82:	429a      	cmp	r2, r3
 800da84:	d8f7      	bhi.n	800da76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	68ba      	ldr	r2, [r7, #8]
 800da90:	4413      	add	r3, r2
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	429a      	cmp	r2, r3
 800da96:	d108      	bne.n	800daaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	685a      	ldr	r2, [r3, #4]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	441a      	add	r2, r3
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	68ba      	ldr	r2, [r7, #8]
 800dab4:	441a      	add	r2, r3
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d118      	bne.n	800daf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	681a      	ldr	r2, [r3, #0]
 800dac2:	4b15      	ldr	r3, [pc, #84]	; (800db18 <prvInsertBlockIntoFreeList+0xb0>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d00d      	beq.n	800dae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	685a      	ldr	r2, [r3, #4]
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	441a      	add	r2, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	601a      	str	r2, [r3, #0]
 800dae4:	e008      	b.n	800daf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dae6:	4b0c      	ldr	r3, [pc, #48]	; (800db18 <prvInsertBlockIntoFreeList+0xb0>)
 800dae8:	681a      	ldr	r2, [r3, #0]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	601a      	str	r2, [r3, #0]
 800daee:	e003      	b.n	800daf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681a      	ldr	r2, [r3, #0]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800daf8:	68fa      	ldr	r2, [r7, #12]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d002      	beq.n	800db06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	687a      	ldr	r2, [r7, #4]
 800db04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db06:	bf00      	nop
 800db08:	3714      	adds	r7, #20
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr
 800db12:	bf00      	nop
 800db14:	24015de8 	.word	0x24015de8
 800db18:	24015df0 	.word	0x24015df0

0800db1c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	330c      	adds	r3, #12
 800db2c:	461a      	mov	r2, r3
 800db2e:	6839      	ldr	r1, [r7, #0]
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f002 fa59 	bl	800ffe8 <tcpip_send_msg_wait_sem>
 800db36:	4603      	mov	r3, r0
 800db38:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800db3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d103      	bne.n	800db4a <netconn_apimsg+0x2e>
    return apimsg->err;
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800db48:	e001      	b.n	800db4e <netconn_apimsg+0x32>
  }
  return err;
 800db4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3710      	adds	r7, #16
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
	...

0800db58 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b08c      	sub	sp, #48	; 0x30
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	4603      	mov	r3, r0
 800db60:	603a      	str	r2, [r7, #0]
 800db62:	71fb      	strb	r3, [r7, #7]
 800db64:	460b      	mov	r3, r1
 800db66:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800db68:	79fb      	ldrb	r3, [r7, #7]
 800db6a:	6839      	ldr	r1, [r7, #0]
 800db6c:	4618      	mov	r0, r3
 800db6e:	f001 f923 	bl	800edb8 <netconn_alloc>
 800db72:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800db74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db76:	2b00      	cmp	r3, #0
 800db78:	d054      	beq.n	800dc24 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800db7a:	79bb      	ldrb	r3, [r7, #6]
 800db7c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800db7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db80:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800db82:	f107 0308 	add.w	r3, r7, #8
 800db86:	4619      	mov	r1, r3
 800db88:	4829      	ldr	r0, [pc, #164]	; (800dc30 <netconn_new_with_proto_and_callback+0xd8>)
 800db8a:	f7ff ffc7 	bl	800db1c <netconn_apimsg>
 800db8e:	4603      	mov	r3, r0
 800db90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800db94:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d043      	beq.n	800dc24 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800db9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d005      	beq.n	800dbb0 <netconn_new_with_proto_and_callback+0x58>
 800dba4:	4b23      	ldr	r3, [pc, #140]	; (800dc34 <netconn_new_with_proto_and_callback+0xdc>)
 800dba6:	22a3      	movs	r2, #163	; 0xa3
 800dba8:	4923      	ldr	r1, [pc, #140]	; (800dc38 <netconn_new_with_proto_and_callback+0xe0>)
 800dbaa:	4824      	ldr	r0, [pc, #144]	; (800dc3c <netconn_new_with_proto_and_callback+0xe4>)
 800dbac:	f00d fe5a 	bl	801b864 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800dbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb2:	3310      	adds	r3, #16
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f00d fb3b 	bl	801b230 <sys_mbox_valid>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d105      	bne.n	800dbcc <netconn_new_with_proto_and_callback+0x74>
 800dbc0:	4b1c      	ldr	r3, [pc, #112]	; (800dc34 <netconn_new_with_proto_and_callback+0xdc>)
 800dbc2:	22a4      	movs	r2, #164	; 0xa4
 800dbc4:	491e      	ldr	r1, [pc, #120]	; (800dc40 <netconn_new_with_proto_and_callback+0xe8>)
 800dbc6:	481d      	ldr	r0, [pc, #116]	; (800dc3c <netconn_new_with_proto_and_callback+0xe4>)
 800dbc8:	f00d fe4c 	bl	801b864 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800dbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbce:	3314      	adds	r3, #20
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f00d fb2d 	bl	801b230 <sys_mbox_valid>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d005      	beq.n	800dbe8 <netconn_new_with_proto_and_callback+0x90>
 800dbdc:	4b15      	ldr	r3, [pc, #84]	; (800dc34 <netconn_new_with_proto_and_callback+0xdc>)
 800dbde:	22a6      	movs	r2, #166	; 0xa6
 800dbe0:	4918      	ldr	r1, [pc, #96]	; (800dc44 <netconn_new_with_proto_and_callback+0xec>)
 800dbe2:	4816      	ldr	r0, [pc, #88]	; (800dc3c <netconn_new_with_proto_and_callback+0xe4>)
 800dbe4:	f00d fe3e 	bl	801b864 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800dbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbea:	330c      	adds	r3, #12
 800dbec:	4618      	mov	r0, r3
 800dbee:	f00d fbad 	bl	801b34c <sys_sem_valid>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d105      	bne.n	800dc04 <netconn_new_with_proto_and_callback+0xac>
 800dbf8:	4b0e      	ldr	r3, [pc, #56]	; (800dc34 <netconn_new_with_proto_and_callback+0xdc>)
 800dbfa:	22a9      	movs	r2, #169	; 0xa9
 800dbfc:	4912      	ldr	r1, [pc, #72]	; (800dc48 <netconn_new_with_proto_and_callback+0xf0>)
 800dbfe:	480f      	ldr	r0, [pc, #60]	; (800dc3c <netconn_new_with_proto_and_callback+0xe4>)
 800dc00:	f00d fe30 	bl	801b864 <iprintf>
      sys_sem_free(&conn->op_completed);
 800dc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc06:	330c      	adds	r3, #12
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f00d fb92 	bl	801b332 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800dc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc10:	3310      	adds	r3, #16
 800dc12:	4618      	mov	r0, r3
 800dc14:	f00d fa98 	bl	801b148 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800dc18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc1a:	2007      	movs	r0, #7
 800dc1c:	f003 f916 	bl	8010e4c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800dc20:	2300      	movs	r3, #0
 800dc22:	e000      	b.n	800dc26 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800dc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3730      	adds	r7, #48	; 0x30
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	0800ed8d 	.word	0x0800ed8d
 800dc34:	0801cbe8 	.word	0x0801cbe8
 800dc38:	0801cc1c 	.word	0x0801cc1c
 800dc3c:	0801cc40 	.word	0x0801cc40
 800dc40:	0801cc68 	.word	0x0801cc68
 800dc44:	0801cc80 	.word	0x0801cc80
 800dc48:	0801cca4 	.word	0x0801cca4

0800dc4c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b08c      	sub	sp, #48	; 0x30
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d101      	bne.n	800dc5e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	e014      	b.n	800dc88 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800dc62:	2329      	movs	r3, #41	; 0x29
 800dc64:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800dc66:	f107 030c 	add.w	r3, r7, #12
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	4808      	ldr	r0, [pc, #32]	; (800dc90 <netconn_prepare_delete+0x44>)
 800dc6e:	f7ff ff55 	bl	800db1c <netconn_apimsg>
 800dc72:	4603      	mov	r3, r0
 800dc74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800dc78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d002      	beq.n	800dc86 <netconn_prepare_delete+0x3a>
    return err;
 800dc80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800dc84:	e000      	b.n	800dc88 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800dc86:	2300      	movs	r3, #0
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3730      	adds	r7, #48	; 0x30
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}
 800dc90:	0800f2f9 	.word	0x0800f2f9

0800dc94 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d101      	bne.n	800dca6 <netconn_delete+0x12>
    return ERR_OK;
 800dca2:	2300      	movs	r3, #0
 800dca4:	e00d      	b.n	800dcc2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f7ff ffd0 	bl	800dc4c <netconn_prepare_delete>
 800dcac:	4603      	mov	r3, r0
 800dcae:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800dcb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d102      	bne.n	800dcbe <netconn_delete+0x2a>
    netconn_free(conn);
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f001 f8eb 	bl	800ee94 <netconn_free>
  }
  return err;
 800dcbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
	...

0800dccc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b08e      	sub	sp, #56	; 0x38
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d109      	bne.n	800dcf4 <netconn_bind+0x28>
 800dce0:	4b11      	ldr	r3, [pc, #68]	; (800dd28 <netconn_bind+0x5c>)
 800dce2:	f44f 729c 	mov.w	r2, #312	; 0x138
 800dce6:	4911      	ldr	r1, [pc, #68]	; (800dd2c <netconn_bind+0x60>)
 800dce8:	4811      	ldr	r0, [pc, #68]	; (800dd30 <netconn_bind+0x64>)
 800dcea:	f00d fdbb 	bl	801b864 <iprintf>
 800dcee:	f06f 030f 	mvn.w	r3, #15
 800dcf2:	e015      	b.n	800dd20 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d101      	bne.n	800dcfe <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800dcfa:	4b0e      	ldr	r3, [pc, #56]	; (800dd34 <netconn_bind+0x68>)
 800dcfc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800dd06:	88fb      	ldrh	r3, [r7, #6]
 800dd08:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800dd0a:	f107 0314 	add.w	r3, r7, #20
 800dd0e:	4619      	mov	r1, r3
 800dd10:	4809      	ldr	r0, [pc, #36]	; (800dd38 <netconn_bind+0x6c>)
 800dd12:	f7ff ff03 	bl	800db1c <netconn_apimsg>
 800dd16:	4603      	mov	r3, r0
 800dd18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800dd1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3738      	adds	r7, #56	; 0x38
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	0801cbe8 	.word	0x0801cbe8
 800dd2c:	0801cd20 	.word	0x0801cd20
 800dd30:	0801cc40 	.word	0x0801cc40
 800dd34:	0802027c 	.word	0x0802027c
 800dd38:	0800f4c1 	.word	0x0800f4c1

0800dd3c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b08c      	sub	sp, #48	; 0x30
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	460b      	mov	r3, r1
 800dd46:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d109      	bne.n	800dd62 <netconn_listen_with_backlog+0x26>
 800dd4e:	4b0d      	ldr	r3, [pc, #52]	; (800dd84 <netconn_listen_with_backlog+0x48>)
 800dd50:	f240 12bb 	movw	r2, #443	; 0x1bb
 800dd54:	490c      	ldr	r1, [pc, #48]	; (800dd88 <netconn_listen_with_backlog+0x4c>)
 800dd56:	480d      	ldr	r0, [pc, #52]	; (800dd8c <netconn_listen_with_backlog+0x50>)
 800dd58:	f00d fd84 	bl	801b864 <iprintf>
 800dd5c:	f06f 030f 	mvn.w	r3, #15
 800dd60:	e00c      	b.n	800dd7c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800dd66:	f107 030c 	add.w	r3, r7, #12
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	4808      	ldr	r0, [pc, #32]	; (800dd90 <netconn_listen_with_backlog+0x54>)
 800dd6e:	f7ff fed5 	bl	800db1c <netconn_apimsg>
 800dd72:	4603      	mov	r3, r0
 800dd74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800dd78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3730      	adds	r7, #48	; 0x30
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	0801cbe8 	.word	0x0801cbe8
 800dd88:	0801cda0 	.word	0x0801cda0
 800dd8c:	0801cc40 	.word	0x0801cc40
 800dd90:	0800f535 	.word	0x0800f535

0800dd94 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b086      	sub	sp, #24
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d109      	bne.n	800ddb8 <netconn_accept+0x24>
 800dda4:	4b3d      	ldr	r3, [pc, #244]	; (800de9c <netconn_accept+0x108>)
 800dda6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ddaa:	493d      	ldr	r1, [pc, #244]	; (800dea0 <netconn_accept+0x10c>)
 800ddac:	483d      	ldr	r0, [pc, #244]	; (800dea4 <netconn_accept+0x110>)
 800ddae:	f00d fd59 	bl	801b864 <iprintf>
 800ddb2:	f06f 030f 	mvn.w	r3, #15
 800ddb6:	e06c      	b.n	800de92 <netconn_accept+0xfe>
  *new_conn = NULL;
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d109      	bne.n	800ddd8 <netconn_accept+0x44>
 800ddc4:	4b35      	ldr	r3, [pc, #212]	; (800de9c <netconn_accept+0x108>)
 800ddc6:	f240 12e3 	movw	r2, #483	; 0x1e3
 800ddca:	4937      	ldr	r1, [pc, #220]	; (800dea8 <netconn_accept+0x114>)
 800ddcc:	4835      	ldr	r0, [pc, #212]	; (800dea4 <netconn_accept+0x110>)
 800ddce:	f00d fd49 	bl	801b864 <iprintf>
 800ddd2:	f06f 030f 	mvn.w	r3, #15
 800ddd6:	e05c      	b.n	800de92 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 fb6c 	bl	800e4b6 <netconn_err>
 800ddde:	4603      	mov	r3, r0
 800dde0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800dde2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d002      	beq.n	800ddf0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800ddea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ddee:	e050      	b.n	800de92 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	3314      	adds	r3, #20
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f00d fa1b 	bl	801b230 <sys_mbox_valid>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d005      	beq.n	800de0c <netconn_accept+0x78>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	7f1b      	ldrb	r3, [r3, #28]
 800de04:	f003 0301 	and.w	r3, r3, #1
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d002      	beq.n	800de12 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800de0c:	f06f 030e 	mvn.w	r3, #14
 800de10:	e03f      	b.n	800de92 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	7f1b      	ldrb	r3, [r3, #28]
 800de16:	f003 0302 	and.w	r3, r3, #2
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d00e      	beq.n	800de3c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	3314      	adds	r3, #20
 800de22:	f107 020c 	add.w	r2, r7, #12
 800de26:	4611      	mov	r1, r2
 800de28:	4618      	mov	r0, r3
 800de2a:	f00d f9ea 	bl	801b202 <sys_arch_mbox_tryfetch>
 800de2e:	4603      	mov	r3, r0
 800de30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de34:	d10a      	bne.n	800de4c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800de36:	f06f 0306 	mvn.w	r3, #6
 800de3a:	e02a      	b.n	800de92 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	3314      	adds	r3, #20
 800de40:	f107 010c 	add.w	r1, r7, #12
 800de44:	2200      	movs	r2, #0
 800de46:	4618      	mov	r0, r3
 800de48:	f00d f9aa 	bl	801b1a0 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de50:	2b00      	cmp	r3, #0
 800de52:	d005      	beq.n	800de60 <netconn_accept+0xcc>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de58:	2200      	movs	r2, #0
 800de5a:	2101      	movs	r1, #1
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	f107 0213 	add.w	r2, r7, #19
 800de66:	4611      	mov	r1, r2
 800de68:	4618      	mov	r0, r3
 800de6a:	f000 fb75 	bl	800e558 <lwip_netconn_is_err_msg>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d002      	beq.n	800de7a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800de74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de78:	e00b      	b.n	800de92 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d102      	bne.n	800de86 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800de80:	f06f 030e 	mvn.w	r3, #14
 800de84:	e005      	b.n	800de92 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	697a      	ldr	r2, [r7, #20]
 800de8e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800de90:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800de92:	4618      	mov	r0, r3
 800de94:	3718      	adds	r7, #24
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	0801cbe8 	.word	0x0801cbe8
 800dea0:	0801cdc0 	.word	0x0801cdc0
 800dea4:	0801cc40 	.word	0x0801cc40
 800dea8:	0801cde0 	.word	0x0801cde0

0800deac <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b088      	sub	sp, #32
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	4613      	mov	r3, r2
 800deb8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800deba:	2300      	movs	r3, #0
 800debc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d109      	bne.n	800ded8 <netconn_recv_data+0x2c>
 800dec4:	4b58      	ldr	r3, [pc, #352]	; (800e028 <netconn_recv_data+0x17c>)
 800dec6:	f44f 7212 	mov.w	r2, #584	; 0x248
 800deca:	4958      	ldr	r1, [pc, #352]	; (800e02c <netconn_recv_data+0x180>)
 800decc:	4858      	ldr	r0, [pc, #352]	; (800e030 <netconn_recv_data+0x184>)
 800dece:	f00d fcc9 	bl	801b864 <iprintf>
 800ded2:	f06f 030f 	mvn.w	r3, #15
 800ded6:	e0a2      	b.n	800e01e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	2200      	movs	r2, #0
 800dedc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d109      	bne.n	800def8 <netconn_recv_data+0x4c>
 800dee4:	4b50      	ldr	r3, [pc, #320]	; (800e028 <netconn_recv_data+0x17c>)
 800dee6:	f240 224a 	movw	r2, #586	; 0x24a
 800deea:	4952      	ldr	r1, [pc, #328]	; (800e034 <netconn_recv_data+0x188>)
 800deec:	4850      	ldr	r0, [pc, #320]	; (800e030 <netconn_recv_data+0x184>)
 800deee:	f00d fcb9 	bl	801b864 <iprintf>
 800def2:	f06f 030f 	mvn.w	r3, #15
 800def6:	e092      	b.n	800e01e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	3310      	adds	r3, #16
 800defc:	4618      	mov	r0, r3
 800defe:	f00d f997 	bl	801b230 <sys_mbox_valid>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d10e      	bne.n	800df26 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f000 fad4 	bl	800e4b6 <netconn_err>
 800df0e:	4603      	mov	r3, r0
 800df10:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800df12:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d002      	beq.n	800df20 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800df1a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800df1e:	e07e      	b.n	800e01e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800df20:	f06f 030a 	mvn.w	r3, #10
 800df24:	e07b      	b.n	800e01e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	7f1b      	ldrb	r3, [r3, #28]
 800df2a:	f003 0302 	and.w	r3, r3, #2
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d10f      	bne.n	800df52 <netconn_recv_data+0xa6>
 800df32:	79fb      	ldrb	r3, [r7, #7]
 800df34:	f003 0304 	and.w	r3, r3, #4
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d10a      	bne.n	800df52 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	7f1b      	ldrb	r3, [r3, #28]
 800df40:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800df44:	2b00      	cmp	r3, #0
 800df46:	d104      	bne.n	800df52 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d023      	beq.n	800df9a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	3310      	adds	r3, #16
 800df56:	f107 0218 	add.w	r2, r7, #24
 800df5a:	4611      	mov	r1, r2
 800df5c:	4618      	mov	r0, r3
 800df5e:	f00d f950 	bl	801b202 <sys_arch_mbox_tryfetch>
 800df62:	4603      	mov	r3, r0
 800df64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df68:	d11f      	bne.n	800dfaa <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f000 faa3 	bl	800e4b6 <netconn_err>
 800df70:	4603      	mov	r3, r0
 800df72:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800df74:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d002      	beq.n	800df82 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800df7c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800df80:	e04d      	b.n	800e01e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	7f1b      	ldrb	r3, [r3, #28]
 800df86:	f003 0301 	and.w	r3, r3, #1
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d002      	beq.n	800df94 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800df8e:	f06f 030a 	mvn.w	r3, #10
 800df92:	e044      	b.n	800e01e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800df94:	f06f 0306 	mvn.w	r3, #6
 800df98:	e041      	b.n	800e01e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	3310      	adds	r3, #16
 800df9e:	f107 0118 	add.w	r1, r7, #24
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f00d f8fb 	bl	801b1a0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dfb2:	2b10      	cmp	r3, #16
 800dfb4:	d117      	bne.n	800dfe6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	f107 0217 	add.w	r2, r7, #23
 800dfbc:	4611      	mov	r1, r2
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f000 faca 	bl	800e558 <lwip_netconn_is_err_msg>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d009      	beq.n	800dfde <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800dfca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dfce:	f113 0f0f 	cmn.w	r3, #15
 800dfd2:	d101      	bne.n	800dfd8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	e022      	b.n	800e01e <netconn_recv_data+0x172>
      }
      return err;
 800dfd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dfdc:	e01f      	b.n	800e01e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800dfde:	69bb      	ldr	r3, [r7, #24]
 800dfe0:	891b      	ldrh	r3, [r3, #8]
 800dfe2:	83fb      	strh	r3, [r7, #30]
 800dfe4:	e00d      	b.n	800e002 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d106      	bne.n	800dffa <netconn_recv_data+0x14e>
 800dfec:	4b0e      	ldr	r3, [pc, #56]	; (800e028 <netconn_recv_data+0x17c>)
 800dfee:	f240 2291 	movw	r2, #657	; 0x291
 800dff2:	4911      	ldr	r1, [pc, #68]	; (800e038 <netconn_recv_data+0x18c>)
 800dff4:	480e      	ldr	r0, [pc, #56]	; (800e030 <netconn_recv_data+0x184>)
 800dff6:	f00d fc35 	bl	801b864 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800dffa:	69bb      	ldr	r3, [r7, #24]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	891b      	ldrh	r3, [r3, #8]
 800e000:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e006:	2b00      	cmp	r3, #0
 800e008:	d005      	beq.n	800e016 <netconn_recv_data+0x16a>
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e00e:	8bfa      	ldrh	r2, [r7, #30]
 800e010:	2101      	movs	r1, #1
 800e012:	68f8      	ldr	r0, [r7, #12]
 800e014:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800e016:	69ba      	ldr	r2, [r7, #24]
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3720      	adds	r7, #32
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	0801cbe8 	.word	0x0801cbe8
 800e02c:	0801ce00 	.word	0x0801ce00
 800e030:	0801cc40 	.word	0x0801cc40
 800e034:	0801ce20 	.word	0x0801ce20
 800e038:	0801ce3c 	.word	0x0801ce3c

0800e03c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	60b9      	str	r1, [r7, #8]
 800e046:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d005      	beq.n	800e05a <netconn_tcp_recvd_msg+0x1e>
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e056:	2b10      	cmp	r3, #16
 800e058:	d009      	beq.n	800e06e <netconn_tcp_recvd_msg+0x32>
 800e05a:	4b0c      	ldr	r3, [pc, #48]	; (800e08c <netconn_tcp_recvd_msg+0x50>)
 800e05c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800e060:	490b      	ldr	r1, [pc, #44]	; (800e090 <netconn_tcp_recvd_msg+0x54>)
 800e062:	480c      	ldr	r0, [pc, #48]	; (800e094 <netconn_tcp_recvd_msg+0x58>)
 800e064:	f00d fbfe 	bl	801b864 <iprintf>
 800e068:	f06f 030f 	mvn.w	r3, #15
 800e06c:	e00a      	b.n	800e084 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	68fa      	ldr	r2, [r7, #12]
 800e072:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	68ba      	ldr	r2, [r7, #8]
 800e078:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800e07a:	6879      	ldr	r1, [r7, #4]
 800e07c:	4806      	ldr	r0, [pc, #24]	; (800e098 <netconn_tcp_recvd_msg+0x5c>)
 800e07e:	f7ff fd4d 	bl	800db1c <netconn_apimsg>
 800e082:	4603      	mov	r3, r0
}
 800e084:	4618      	mov	r0, r3
 800e086:	3710      	adds	r7, #16
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	0801cbe8 	.word	0x0801cbe8
 800e090:	0801ce48 	.word	0x0801ce48
 800e094:	0801cc40 	.word	0x0801cc40
 800e098:	0800f665 	.word	0x0800f665

0800e09c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b090      	sub	sp, #64	; 0x40
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	60b9      	str	r1, [r7, #8]
 800e0a6:	4613      	mov	r3, r2
 800e0a8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	3310      	adds	r3, #16
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f00d f8be 	bl	801b230 <sys_mbox_valid>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d102      	bne.n	800e0c0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800e0ba:	f06f 030a 	mvn.w	r3, #10
 800e0be:	e06d      	b.n	800e19c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	7f1b      	ldrb	r3, [r3, #28]
 800e0c4:	b25b      	sxtb	r3, r3
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	da07      	bge.n	800e0da <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	7f1b      	ldrb	r3, [r3, #28]
 800e0ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0d2:	b2da      	uxtb	r2, r3
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800e0d8:	e039      	b.n	800e14e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e0da:	79fb      	ldrb	r3, [r7, #7]
 800e0dc:	461a      	mov	r2, r3
 800e0de:	68b9      	ldr	r1, [r7, #8]
 800e0e0:	68f8      	ldr	r0, [r7, #12]
 800e0e2:	f7ff fee3 	bl	800deac <netconn_recv_data>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800e0ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d002      	beq.n	800e0fa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800e0f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e0f8:	e050      	b.n	800e19c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800e100:	79fb      	ldrb	r3, [r7, #7]
 800e102:	f003 0308 	and.w	r3, r3, #8
 800e106:	2b00      	cmp	r3, #0
 800e108:	d10e      	bne.n	800e128 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800e10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d002      	beq.n	800e116 <netconn_recv_data_tcp+0x7a>
 800e110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e112:	891b      	ldrh	r3, [r3, #8]
 800e114:	e000      	b.n	800e118 <netconn_recv_data_tcp+0x7c>
 800e116:	2301      	movs	r3, #1
 800e118:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800e11a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e11c:	f107 0214 	add.w	r2, r7, #20
 800e120:	4619      	mov	r1, r3
 800e122:	68f8      	ldr	r0, [r7, #12]
 800e124:	f7ff ff8a 	bl	800e03c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800e128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d134      	bne.n	800e198 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800e12e:	79fb      	ldrb	r3, [r7, #7]
 800e130:	f003 0310 	and.w	r3, r3, #16
 800e134:	2b00      	cmp	r3, #0
 800e136:	d009      	beq.n	800e14c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	7f1b      	ldrb	r3, [r3, #28]
 800e13c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e140:	b2da      	uxtb	r2, r3
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800e146:	f06f 0306 	mvn.w	r3, #6
 800e14a:	e027      	b.n	800e19c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800e14c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e152:	2b00      	cmp	r3, #0
 800e154:	d005      	beq.n	800e162 <netconn_recv_data_tcp+0xc6>
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e15a:	2200      	movs	r2, #0
 800e15c:	2101      	movs	r1, #1
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d10f      	bne.n	800e18a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800e16a:	68f8      	ldr	r0, [r7, #12]
 800e16c:	f000 f9a3 	bl	800e4b6 <netconn_err>
 800e170:	4603      	mov	r3, r0
 800e172:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800e176:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d002      	beq.n	800e184 <netconn_recv_data_tcp+0xe8>
          return err;
 800e17e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e182:	e00b      	b.n	800e19c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800e184:	f06f 030d 	mvn.w	r3, #13
 800e188:	e008      	b.n	800e19c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800e18a:	2101      	movs	r1, #1
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	f000 f955 	bl	800e43c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800e192:	f06f 030e 	mvn.w	r3, #14
 800e196:	e001      	b.n	800e19c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800e198:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3740      	adds	r7, #64	; 0x40
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b086      	sub	sp, #24
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d109      	bne.n	800e1cc <netconn_recv+0x28>
 800e1b8:	4b32      	ldr	r3, [pc, #200]	; (800e284 <netconn_recv+0xe0>)
 800e1ba:	f240 3263 	movw	r2, #867	; 0x363
 800e1be:	4932      	ldr	r1, [pc, #200]	; (800e288 <netconn_recv+0xe4>)
 800e1c0:	4832      	ldr	r0, [pc, #200]	; (800e28c <netconn_recv+0xe8>)
 800e1c2:	f00d fb4f 	bl	801b864 <iprintf>
 800e1c6:	f06f 030f 	mvn.w	r3, #15
 800e1ca:	e056      	b.n	800e27a <netconn_recv+0xd6>
  *new_buf = NULL;
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d109      	bne.n	800e1ec <netconn_recv+0x48>
 800e1d8:	4b2a      	ldr	r3, [pc, #168]	; (800e284 <netconn_recv+0xe0>)
 800e1da:	f240 3265 	movw	r2, #869	; 0x365
 800e1de:	492c      	ldr	r1, [pc, #176]	; (800e290 <netconn_recv+0xec>)
 800e1e0:	482a      	ldr	r0, [pc, #168]	; (800e28c <netconn_recv+0xe8>)
 800e1e2:	f00d fb3f 	bl	801b864 <iprintf>
 800e1e6:	f06f 030f 	mvn.w	r3, #15
 800e1ea:	e046      	b.n	800e27a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e1f4:	2b10      	cmp	r3, #16
 800e1f6:	d13a      	bne.n	800e26e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e1fc:	2006      	movs	r0, #6
 800e1fe:	f002 fdaf 	bl	8010d60 <memp_malloc>
 800e202:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d102      	bne.n	800e210 <netconn_recv+0x6c>
      return ERR_MEM;
 800e20a:	f04f 33ff 	mov.w	r3, #4294967295
 800e20e:	e034      	b.n	800e27a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800e210:	f107 030c 	add.w	r3, r7, #12
 800e214:	2200      	movs	r2, #0
 800e216:	4619      	mov	r1, r3
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f7ff ff3f 	bl	800e09c <netconn_recv_data_tcp>
 800e21e:	4603      	mov	r3, r0
 800e220:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e222:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d006      	beq.n	800e238 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800e22a:	6979      	ldr	r1, [r7, #20]
 800e22c:	2006      	movs	r0, #6
 800e22e:	f002 fe0d 	bl	8010e4c <memp_free>
      return err;
 800e232:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e236:	e020      	b.n	800e27a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d106      	bne.n	800e24c <netconn_recv+0xa8>
 800e23e:	4b11      	ldr	r3, [pc, #68]	; (800e284 <netconn_recv+0xe0>)
 800e240:	f240 3279 	movw	r2, #889	; 0x379
 800e244:	4913      	ldr	r1, [pc, #76]	; (800e294 <netconn_recv+0xf0>)
 800e246:	4811      	ldr	r0, [pc, #68]	; (800e28c <netconn_recv+0xe8>)
 800e248:	f00d fb0c 	bl	801b864 <iprintf>

    buf->p = p;
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800e252:	68fa      	ldr	r2, [r7, #12]
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	2200      	movs	r2, #0
 800e25c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	2200      	movs	r2, #0
 800e262:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	697a      	ldr	r2, [r7, #20]
 800e268:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800e26a:	2300      	movs	r3, #0
 800e26c:	e005      	b.n	800e27a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800e26e:	2200      	movs	r2, #0
 800e270:	6839      	ldr	r1, [r7, #0]
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f7ff fe1a 	bl	800deac <netconn_recv_data>
 800e278:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3718      	adds	r7, #24
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	0801cbe8 	.word	0x0801cbe8
 800e288:	0801ce00 	.word	0x0801ce00
 800e28c:	0801cc40 	.word	0x0801cc40
 800e290:	0801ce20 	.word	0x0801ce20
 800e294:	0801ce98 	.word	0x0801ce98

0800e298 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b088      	sub	sp, #32
 800e29c:	af02      	add	r7, sp, #8
 800e29e:	60f8      	str	r0, [r7, #12]
 800e2a0:	60b9      	str	r1, [r7, #8]
 800e2a2:	607a      	str	r2, [r7, #4]
 800e2a4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800e2ae:	78fa      	ldrb	r2, [r7, #3]
 800e2b0:	f107 0110 	add.w	r1, r7, #16
 800e2b4:	6a3b      	ldr	r3, [r7, #32]
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	68f8      	ldr	r0, [r7, #12]
 800e2be:	f000 f805 	bl	800e2cc <netconn_write_vectors_partly>
 800e2c2:	4603      	mov	r3, r0
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3718      	adds	r7, #24
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b092      	sub	sp, #72	; 0x48
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	4611      	mov	r1, r2
 800e2d8:	461a      	mov	r2, r3
 800e2da:	460b      	mov	r3, r1
 800e2dc:	80fb      	strh	r3, [r7, #6]
 800e2de:	4613      	mov	r3, r2
 800e2e0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d109      	bne.n	800e2fc <netconn_write_vectors_partly+0x30>
 800e2e8:	4b4e      	ldr	r3, [pc, #312]	; (800e424 <netconn_write_vectors_partly+0x158>)
 800e2ea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e2ee:	494e      	ldr	r1, [pc, #312]	; (800e428 <netconn_write_vectors_partly+0x15c>)
 800e2f0:	484e      	ldr	r0, [pc, #312]	; (800e42c <netconn_write_vectors_partly+0x160>)
 800e2f2:	f00d fab7 	bl	801b864 <iprintf>
 800e2f6:	f06f 030f 	mvn.w	r3, #15
 800e2fa:	e08e      	b.n	800e41a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e304:	2b10      	cmp	r3, #16
 800e306:	d009      	beq.n	800e31c <netconn_write_vectors_partly+0x50>
 800e308:	4b46      	ldr	r3, [pc, #280]	; (800e424 <netconn_write_vectors_partly+0x158>)
 800e30a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e30e:	4948      	ldr	r1, [pc, #288]	; (800e430 <netconn_write_vectors_partly+0x164>)
 800e310:	4846      	ldr	r0, [pc, #280]	; (800e42c <netconn_write_vectors_partly+0x160>)
 800e312:	f00d faa7 	bl	801b864 <iprintf>
 800e316:	f06f 0305 	mvn.w	r3, #5
 800e31a:	e07e      	b.n	800e41a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	7f1b      	ldrb	r3, [r3, #28]
 800e320:	f003 0302 	and.w	r3, r3, #2
 800e324:	2b00      	cmp	r3, #0
 800e326:	d104      	bne.n	800e332 <netconn_write_vectors_partly+0x66>
 800e328:	797b      	ldrb	r3, [r7, #5]
 800e32a:	f003 0304 	and.w	r3, r3, #4
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d001      	beq.n	800e336 <netconn_write_vectors_partly+0x6a>
 800e332:	2301      	movs	r3, #1
 800e334:	e000      	b.n	800e338 <netconn_write_vectors_partly+0x6c>
 800e336:	2300      	movs	r3, #0
 800e338:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800e33c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e340:	2b00      	cmp	r3, #0
 800e342:	d005      	beq.n	800e350 <netconn_write_vectors_partly+0x84>
 800e344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e346:	2b00      	cmp	r3, #0
 800e348:	d102      	bne.n	800e350 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800e34a:	f06f 0305 	mvn.w	r3, #5
 800e34e:	e064      	b.n	800e41a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800e350:	2300      	movs	r3, #0
 800e352:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800e354:	2300      	movs	r3, #0
 800e356:	643b      	str	r3, [r7, #64]	; 0x40
 800e358:	e015      	b.n	800e386 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800e35a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e35c:	00db      	lsls	r3, r3, #3
 800e35e:	68ba      	ldr	r2, [r7, #8]
 800e360:	4413      	add	r3, r2
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e366:	4413      	add	r3, r2
 800e368:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800e36a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e36c:	00db      	lsls	r3, r3, #3
 800e36e:	68ba      	ldr	r2, [r7, #8]
 800e370:	4413      	add	r3, r2
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e376:	429a      	cmp	r2, r3
 800e378:	d202      	bcs.n	800e380 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800e37a:	f06f 0305 	mvn.w	r3, #5
 800e37e:	e04c      	b.n	800e41a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800e380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e382:	3301      	adds	r3, #1
 800e384:	643b      	str	r3, [r7, #64]	; 0x40
 800e386:	88fb      	ldrh	r3, [r7, #6]
 800e388:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e38a:	429a      	cmp	r2, r3
 800e38c:	dbe5      	blt.n	800e35a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800e38e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e390:	2b00      	cmp	r3, #0
 800e392:	d101      	bne.n	800e398 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800e394:	2300      	movs	r3, #0
 800e396:	e040      	b.n	800e41a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800e398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	da0a      	bge.n	800e3b4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800e39e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d102      	bne.n	800e3aa <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800e3a4:	f06f 0305 	mvn.w	r3, #5
 800e3a8:	e037      	b.n	800e41a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800e3aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e3ae:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800e3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800e3bc:	88fb      	ldrh	r3, [r7, #6]
 800e3be:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800e3c4:	797b      	ldrb	r3, [r7, #5]
 800e3c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800e3ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3cc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800e3d2:	f107 0314 	add.w	r3, r7, #20
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	4816      	ldr	r0, [pc, #88]	; (800e434 <netconn_write_vectors_partly+0x168>)
 800e3da:	f7ff fb9f 	bl	800db1c <netconn_apimsg>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800e3e4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d114      	bne.n	800e416 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800e3ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d002      	beq.n	800e3f8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800e3f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3f6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800e3f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d10a      	bne.n	800e416 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800e400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e404:	429a      	cmp	r2, r3
 800e406:	d006      	beq.n	800e416 <netconn_write_vectors_partly+0x14a>
 800e408:	4b06      	ldr	r3, [pc, #24]	; (800e424 <netconn_write_vectors_partly+0x158>)
 800e40a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e40e:	490a      	ldr	r1, [pc, #40]	; (800e438 <netconn_write_vectors_partly+0x16c>)
 800e410:	4806      	ldr	r0, [pc, #24]	; (800e42c <netconn_write_vectors_partly+0x160>)
 800e412:	f00d fa27 	bl	801b864 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800e416:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3748      	adds	r7, #72	; 0x48
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}
 800e422:	bf00      	nop
 800e424:	0801cbe8 	.word	0x0801cbe8
 800e428:	0801cec0 	.word	0x0801cec0
 800e42c:	0801cc40 	.word	0x0801cc40
 800e430:	0801cedc 	.word	0x0801cedc
 800e434:	0800fa69 	.word	0x0800fa69
 800e438:	0801cf00 	.word	0x0801cf00

0800e43c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b08c      	sub	sp, #48	; 0x30
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	460b      	mov	r3, r1
 800e446:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d109      	bne.n	800e462 <netconn_close_shutdown+0x26>
 800e44e:	4b0f      	ldr	r3, [pc, #60]	; (800e48c <netconn_close_shutdown+0x50>)
 800e450:	f240 4247 	movw	r2, #1095	; 0x447
 800e454:	490e      	ldr	r1, [pc, #56]	; (800e490 <netconn_close_shutdown+0x54>)
 800e456:	480f      	ldr	r0, [pc, #60]	; (800e494 <netconn_close_shutdown+0x58>)
 800e458:	f00d fa04 	bl	801b864 <iprintf>
 800e45c:	f06f 030f 	mvn.w	r3, #15
 800e460:	e010      	b.n	800e484 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800e466:	78fb      	ldrb	r3, [r7, #3]
 800e468:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e46a:	2329      	movs	r3, #41	; 0x29
 800e46c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800e46e:	f107 030c 	add.w	r3, r7, #12
 800e472:	4619      	mov	r1, r3
 800e474:	4808      	ldr	r0, [pc, #32]	; (800e498 <netconn_close_shutdown+0x5c>)
 800e476:	f7ff fb51 	bl	800db1c <netconn_apimsg>
 800e47a:	4603      	mov	r3, r0
 800e47c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e480:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e484:	4618      	mov	r0, r3
 800e486:	3730      	adds	r7, #48	; 0x30
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	0801cbe8 	.word	0x0801cbe8
 800e490:	0801cf24 	.word	0x0801cf24
 800e494:	0801cc40 	.word	0x0801cc40
 800e498:	0800fb81 	.word	0x0800fb81

0800e49c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800e4a4:	2103      	movs	r1, #3
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f7ff ffc8 	bl	800e43c <netconn_close_shutdown>
 800e4ac:	4603      	mov	r3, r0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800e4b6:	b580      	push	{r7, lr}
 800e4b8:	b084      	sub	sp, #16
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d101      	bne.n	800e4c8 <netconn_err+0x12>
    return ERR_OK;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	e00d      	b.n	800e4e4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800e4c8:	f00c ffbc 	bl	801b444 <sys_arch_protect>
 800e4cc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	7a1b      	ldrb	r3, [r3, #8]
 800e4d2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800e4da:	68f8      	ldr	r0, [r7, #12]
 800e4dc:	f00c ffc0 	bl	801b460 <sys_arch_unprotect>
  return err;
 800e4e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3710      	adds	r7, #16
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800e4f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e4fa:	f113 0f0d 	cmn.w	r3, #13
 800e4fe:	d009      	beq.n	800e514 <lwip_netconn_err_to_msg+0x28>
 800e500:	f113 0f0d 	cmn.w	r3, #13
 800e504:	dc0c      	bgt.n	800e520 <lwip_netconn_err_to_msg+0x34>
 800e506:	f113 0f0f 	cmn.w	r3, #15
 800e50a:	d007      	beq.n	800e51c <lwip_netconn_err_to_msg+0x30>
 800e50c:	f113 0f0e 	cmn.w	r3, #14
 800e510:	d002      	beq.n	800e518 <lwip_netconn_err_to_msg+0x2c>
 800e512:	e005      	b.n	800e520 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800e514:	4b0a      	ldr	r3, [pc, #40]	; (800e540 <lwip_netconn_err_to_msg+0x54>)
 800e516:	e00e      	b.n	800e536 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800e518:	4b0a      	ldr	r3, [pc, #40]	; (800e544 <lwip_netconn_err_to_msg+0x58>)
 800e51a:	e00c      	b.n	800e536 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800e51c:	4b0a      	ldr	r3, [pc, #40]	; (800e548 <lwip_netconn_err_to_msg+0x5c>)
 800e51e:	e00a      	b.n	800e536 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800e520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d005      	beq.n	800e534 <lwip_netconn_err_to_msg+0x48>
 800e528:	4b08      	ldr	r3, [pc, #32]	; (800e54c <lwip_netconn_err_to_msg+0x60>)
 800e52a:	227d      	movs	r2, #125	; 0x7d
 800e52c:	4908      	ldr	r1, [pc, #32]	; (800e550 <lwip_netconn_err_to_msg+0x64>)
 800e52e:	4809      	ldr	r0, [pc, #36]	; (800e554 <lwip_netconn_err_to_msg+0x68>)
 800e530:	f00d f998 	bl	801b864 <iprintf>
      return NULL;
 800e534:	2300      	movs	r3, #0
  }
}
 800e536:	4618      	mov	r0, r3
 800e538:	3708      	adds	r7, #8
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}
 800e53e:	bf00      	nop
 800e540:	08020168 	.word	0x08020168
 800e544:	08020169 	.word	0x08020169
 800e548:	0802016a 	.word	0x0802016a
 800e54c:	0801cf40 	.word	0x0801cf40
 800e550:	0801cf74 	.word	0x0801cf74
 800e554:	0801cf84 	.word	0x0801cf84

0800e558 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d105      	bne.n	800e574 <lwip_netconn_is_err_msg+0x1c>
 800e568:	4b12      	ldr	r3, [pc, #72]	; (800e5b4 <lwip_netconn_is_err_msg+0x5c>)
 800e56a:	2285      	movs	r2, #133	; 0x85
 800e56c:	4912      	ldr	r1, [pc, #72]	; (800e5b8 <lwip_netconn_is_err_msg+0x60>)
 800e56e:	4813      	ldr	r0, [pc, #76]	; (800e5bc <lwip_netconn_is_err_msg+0x64>)
 800e570:	f00d f978 	bl	801b864 <iprintf>

  if (msg == &netconn_aborted) {
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	4a12      	ldr	r2, [pc, #72]	; (800e5c0 <lwip_netconn_is_err_msg+0x68>)
 800e578:	4293      	cmp	r3, r2
 800e57a:	d104      	bne.n	800e586 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	22f3      	movs	r2, #243	; 0xf3
 800e580:	701a      	strb	r2, [r3, #0]
    return 1;
 800e582:	2301      	movs	r3, #1
 800e584:	e012      	b.n	800e5ac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4a0e      	ldr	r2, [pc, #56]	; (800e5c4 <lwip_netconn_is_err_msg+0x6c>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d104      	bne.n	800e598 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	22f2      	movs	r2, #242	; 0xf2
 800e592:	701a      	strb	r2, [r3, #0]
    return 1;
 800e594:	2301      	movs	r3, #1
 800e596:	e009      	b.n	800e5ac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	4a0b      	ldr	r2, [pc, #44]	; (800e5c8 <lwip_netconn_is_err_msg+0x70>)
 800e59c:	4293      	cmp	r3, r2
 800e59e:	d104      	bne.n	800e5aa <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	22f1      	movs	r2, #241	; 0xf1
 800e5a4:	701a      	strb	r2, [r3, #0]
    return 1;
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e000      	b.n	800e5ac <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800e5aa:	2300      	movs	r3, #0
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3708      	adds	r7, #8
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	0801cf40 	.word	0x0801cf40
 800e5b8:	0801cfac 	.word	0x0801cfac
 800e5bc:	0801cf84 	.word	0x0801cf84
 800e5c0:	08020168 	.word	0x08020168
 800e5c4:	08020169 	.word	0x08020169
 800e5c8:	0802016a 	.word	0x0802016a

0800e5cc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b088      	sub	sp, #32
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	60b9      	str	r1, [r7, #8]
 800e5d6:	607a      	str	r2, [r7, #4]
 800e5d8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d105      	bne.n	800e5ec <recv_udp+0x20>
 800e5e0:	4b34      	ldr	r3, [pc, #208]	; (800e6b4 <recv_udp+0xe8>)
 800e5e2:	22e5      	movs	r2, #229	; 0xe5
 800e5e4:	4934      	ldr	r1, [pc, #208]	; (800e6b8 <recv_udp+0xec>)
 800e5e6:	4835      	ldr	r0, [pc, #212]	; (800e6bc <recv_udp+0xf0>)
 800e5e8:	f00d f93c 	bl	801b864 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d105      	bne.n	800e5fe <recv_udp+0x32>
 800e5f2:	4b30      	ldr	r3, [pc, #192]	; (800e6b4 <recv_udp+0xe8>)
 800e5f4:	22e6      	movs	r2, #230	; 0xe6
 800e5f6:	4932      	ldr	r1, [pc, #200]	; (800e6c0 <recv_udp+0xf4>)
 800e5f8:	4830      	ldr	r0, [pc, #192]	; (800e6bc <recv_udp+0xf0>)
 800e5fa:	f00d f933 	bl	801b864 <iprintf>
  conn = (struct netconn *)arg;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800e602:	69fb      	ldr	r3, [r7, #28]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d103      	bne.n	800e610 <recv_udp+0x44>
    pbuf_free(p);
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f003 fac7 	bl	8011b9c <pbuf_free>
    return;
 800e60e:	e04d      	b.n	800e6ac <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	68ba      	ldr	r2, [r7, #8]
 800e616:	429a      	cmp	r2, r3
 800e618:	d005      	beq.n	800e626 <recv_udp+0x5a>
 800e61a:	4b26      	ldr	r3, [pc, #152]	; (800e6b4 <recv_udp+0xe8>)
 800e61c:	22ee      	movs	r2, #238	; 0xee
 800e61e:	4929      	ldr	r1, [pc, #164]	; (800e6c4 <recv_udp+0xf8>)
 800e620:	4826      	ldr	r0, [pc, #152]	; (800e6bc <recv_udp+0xf0>)
 800e622:	f00d f91f 	bl	801b864 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e626:	69fb      	ldr	r3, [r7, #28]
 800e628:	3310      	adds	r3, #16
 800e62a:	4618      	mov	r0, r3
 800e62c:	f00c fe00 	bl	801b230 <sys_mbox_valid>
 800e630:	4603      	mov	r3, r0
 800e632:	2b00      	cmp	r3, #0
 800e634:	d103      	bne.n	800e63e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f003 fab0 	bl	8011b9c <pbuf_free>
    return;
 800e63c:	e036      	b.n	800e6ac <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e63e:	2006      	movs	r0, #6
 800e640:	f002 fb8e 	bl	8010d60 <memp_malloc>
 800e644:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d103      	bne.n	800e654 <recv_udp+0x88>
    pbuf_free(p);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f003 faa5 	bl	8011b9c <pbuf_free>
    return;
 800e652:	e02b      	b.n	800e6ac <recv_udp+0xe0>
  } else {
    buf->p = p;
 800e654:	69bb      	ldr	r3, [r7, #24]
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d002      	beq.n	800e66c <recv_udp+0xa0>
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	e000      	b.n	800e66e <recv_udp+0xa2>
 800e66c:	2300      	movs	r3, #0
 800e66e:	69ba      	ldr	r2, [r7, #24]
 800e670:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800e672:	69bb      	ldr	r3, [r7, #24]
 800e674:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e676:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	891b      	ldrh	r3, [r3, #8]
 800e67c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800e67e:	69fb      	ldr	r3, [r7, #28]
 800e680:	3310      	adds	r3, #16
 800e682:	69b9      	ldr	r1, [r7, #24]
 800e684:	4618      	mov	r0, r3
 800e686:	f00c fd71 	bl	801b16c <sys_mbox_trypost>
 800e68a:	4603      	mov	r3, r0
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d003      	beq.n	800e698 <recv_udp+0xcc>
    netbuf_delete(buf);
 800e690:	69b8      	ldr	r0, [r7, #24]
 800e692:	f001 fb01 	bl	800fc98 <netbuf_delete>
    return;
 800e696:	e009      	b.n	800e6ac <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d005      	beq.n	800e6ac <recv_udp+0xe0>
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6a4:	8afa      	ldrh	r2, [r7, #22]
 800e6a6:	2100      	movs	r1, #0
 800e6a8:	69f8      	ldr	r0, [r7, #28]
 800e6aa:	4798      	blx	r3
  }
}
 800e6ac:	3720      	adds	r7, #32
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	0801cf40 	.word	0x0801cf40
 800e6b8:	0801cfb8 	.word	0x0801cfb8
 800e6bc:	0801cf84 	.word	0x0801cf84
 800e6c0:	0801cfdc 	.word	0x0801cfdc
 800e6c4:	0801cffc 	.word	0x0801cffc

0800e6c8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b088      	sub	sp, #32
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	607a      	str	r2, [r7, #4]
 800e6d4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d106      	bne.n	800e6ea <recv_tcp+0x22>
 800e6dc:	4b36      	ldr	r3, [pc, #216]	; (800e7b8 <recv_tcp+0xf0>)
 800e6de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800e6e2:	4936      	ldr	r1, [pc, #216]	; (800e7bc <recv_tcp+0xf4>)
 800e6e4:	4836      	ldr	r0, [pc, #216]	; (800e7c0 <recv_tcp+0xf8>)
 800e6e6:	f00d f8bd 	bl	801b864 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d106      	bne.n	800e6fe <recv_tcp+0x36>
 800e6f0:	4b31      	ldr	r3, [pc, #196]	; (800e7b8 <recv_tcp+0xf0>)
 800e6f2:	f240 122d 	movw	r2, #301	; 0x12d
 800e6f6:	4933      	ldr	r1, [pc, #204]	; (800e7c4 <recv_tcp+0xfc>)
 800e6f8:	4831      	ldr	r0, [pc, #196]	; (800e7c0 <recv_tcp+0xf8>)
 800e6fa:	f00d f8b3 	bl	801b864 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800e6fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d006      	beq.n	800e714 <recv_tcp+0x4c>
 800e706:	4b2c      	ldr	r3, [pc, #176]	; (800e7b8 <recv_tcp+0xf0>)
 800e708:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800e70c:	492e      	ldr	r1, [pc, #184]	; (800e7c8 <recv_tcp+0x100>)
 800e70e:	482c      	ldr	r0, [pc, #176]	; (800e7c0 <recv_tcp+0xf8>)
 800e710:	f00d f8a8 	bl	801b864 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d102      	bne.n	800e724 <recv_tcp+0x5c>
    return ERR_VAL;
 800e71e:	f06f 0305 	mvn.w	r3, #5
 800e722:	e045      	b.n	800e7b0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	685b      	ldr	r3, [r3, #4]
 800e728:	68ba      	ldr	r2, [r7, #8]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d006      	beq.n	800e73c <recv_tcp+0x74>
 800e72e:	4b22      	ldr	r3, [pc, #136]	; (800e7b8 <recv_tcp+0xf0>)
 800e730:	f240 1235 	movw	r2, #309	; 0x135
 800e734:	4925      	ldr	r1, [pc, #148]	; (800e7cc <recv_tcp+0x104>)
 800e736:	4822      	ldr	r0, [pc, #136]	; (800e7c0 <recv_tcp+0xf8>)
 800e738:	f00d f894 	bl	801b864 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	3310      	adds	r3, #16
 800e740:	4618      	mov	r0, r3
 800e742:	f00c fd75 	bl	801b230 <sys_mbox_valid>
 800e746:	4603      	mov	r3, r0
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d10d      	bne.n	800e768 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d008      	beq.n	800e764 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	891b      	ldrh	r3, [r3, #8]
 800e756:	4619      	mov	r1, r3
 800e758:	68b8      	ldr	r0, [r7, #8]
 800e75a:	f004 f9d7 	bl	8012b0c <tcp_recved>
      pbuf_free(p);
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f003 fa1c 	bl	8011b9c <pbuf_free>
    }
    return ERR_OK;
 800e764:	2300      	movs	r3, #0
 800e766:	e023      	b.n	800e7b0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d005      	beq.n	800e77a <recv_tcp+0xb2>
    msg = p;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	891b      	ldrh	r3, [r3, #8]
 800e776:	83fb      	strh	r3, [r7, #30]
 800e778:	e003      	b.n	800e782 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800e77a:	4b15      	ldr	r3, [pc, #84]	; (800e7d0 <recv_tcp+0x108>)
 800e77c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800e77e:	2300      	movs	r3, #0
 800e780:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	3310      	adds	r3, #16
 800e786:	69b9      	ldr	r1, [r7, #24]
 800e788:	4618      	mov	r0, r3
 800e78a:	f00c fcef 	bl	801b16c <sys_mbox_trypost>
 800e78e:	4603      	mov	r3, r0
 800e790:	2b00      	cmp	r3, #0
 800e792:	d002      	beq.n	800e79a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800e794:	f04f 33ff 	mov.w	r3, #4294967295
 800e798:	e00a      	b.n	800e7b0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d005      	beq.n	800e7ae <recv_tcp+0xe6>
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7a6:	8bfa      	ldrh	r2, [r7, #30]
 800e7a8:	2100      	movs	r1, #0
 800e7aa:	6978      	ldr	r0, [r7, #20]
 800e7ac:	4798      	blx	r3
  }

  return ERR_OK;
 800e7ae:	2300      	movs	r3, #0
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3720      	adds	r7, #32
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	0801cf40 	.word	0x0801cf40
 800e7bc:	0801d01c 	.word	0x0801d01c
 800e7c0:	0801cf84 	.word	0x0801cf84
 800e7c4:	0801d040 	.word	0x0801d040
 800e7c8:	0801d060 	.word	0x0801d060
 800e7cc:	0801d078 	.word	0x0801d078
 800e7d0:	0802016a 	.word	0x0802016a

0800e7d4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b084      	sub	sp, #16
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d106      	bne.n	800e7f6 <poll_tcp+0x22>
 800e7e8:	4b29      	ldr	r3, [pc, #164]	; (800e890 <poll_tcp+0xbc>)
 800e7ea:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800e7ee:	4929      	ldr	r1, [pc, #164]	; (800e894 <poll_tcp+0xc0>)
 800e7f0:	4829      	ldr	r0, [pc, #164]	; (800e898 <poll_tcp+0xc4>)
 800e7f2:	f00d f837 	bl	801b864 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	785b      	ldrb	r3, [r3, #1]
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	d104      	bne.n	800e808 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800e7fe:	2101      	movs	r1, #1
 800e800:	68f8      	ldr	r0, [r7, #12]
 800e802:	f000 ff65 	bl	800f6d0 <lwip_netconn_do_writemore>
 800e806:	e016      	b.n	800e836 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	785b      	ldrb	r3, [r3, #1]
 800e80c:	2b04      	cmp	r3, #4
 800e80e:	d112      	bne.n	800e836 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	6a1b      	ldr	r3, [r3, #32]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d00a      	beq.n	800e82e <poll_tcp+0x5a>
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	6a1b      	ldr	r3, [r3, #32]
 800e81c:	7a5b      	ldrb	r3, [r3, #9]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d005      	beq.n	800e82e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	6a1b      	ldr	r3, [r3, #32]
 800e826:	7a5a      	ldrb	r2, [r3, #9]
 800e828:	3a01      	subs	r2, #1
 800e82a:	b2d2      	uxtb	r2, r2
 800e82c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800e82e:	2101      	movs	r1, #1
 800e830:	68f8      	ldr	r0, [r7, #12]
 800e832:	f000 fbf7 	bl	800f024 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	7f1b      	ldrb	r3, [r3, #28]
 800e83a:	f003 0310 	and.w	r3, r3, #16
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d021      	beq.n	800e886 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d01d      	beq.n	800e886 <poll_tcp+0xb2>
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e852:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e856:	d316      	bcc.n	800e886 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e860:	2b04      	cmp	r3, #4
 800e862:	d810      	bhi.n	800e886 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	7f1b      	ldrb	r3, [r3, #28]
 800e868:	f023 0310 	bic.w	r3, r3, #16
 800e86c:	b2da      	uxtb	r2, r3
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e876:	2b00      	cmp	r3, #0
 800e878:	d005      	beq.n	800e886 <poll_tcp+0xb2>
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e87e:	2200      	movs	r2, #0
 800e880:	2102      	movs	r1, #2
 800e882:	68f8      	ldr	r0, [r7, #12]
 800e884:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800e886:	2300      	movs	r3, #0
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3710      	adds	r7, #16
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	0801cf40 	.word	0x0801cf40
 800e894:	0801d098 	.word	0x0801d098
 800e898:	0801cf84 	.word	0x0801cf84

0800e89c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b086      	sub	sp, #24
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	60f8      	str	r0, [r7, #12]
 800e8a4:	60b9      	str	r1, [r7, #8]
 800e8a6:	4613      	mov	r3, r2
 800e8a8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d106      	bne.n	800e8c2 <sent_tcp+0x26>
 800e8b4:	4b20      	ldr	r3, [pc, #128]	; (800e938 <sent_tcp+0x9c>)
 800e8b6:	f240 1293 	movw	r2, #403	; 0x193
 800e8ba:	4920      	ldr	r1, [pc, #128]	; (800e93c <sent_tcp+0xa0>)
 800e8bc:	4820      	ldr	r0, [pc, #128]	; (800e940 <sent_tcp+0xa4>)
 800e8be:	f00c ffd1 	bl	801b864 <iprintf>

  if (conn) {
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d032      	beq.n	800e92e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	785b      	ldrb	r3, [r3, #1]
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d104      	bne.n	800e8da <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800e8d0:	2101      	movs	r1, #1
 800e8d2:	6978      	ldr	r0, [r7, #20]
 800e8d4:	f000 fefc 	bl	800f6d0 <lwip_netconn_do_writemore>
 800e8d8:	e007      	b.n	800e8ea <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	785b      	ldrb	r3, [r3, #1]
 800e8de:	2b04      	cmp	r3, #4
 800e8e0:	d103      	bne.n	800e8ea <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800e8e2:	2101      	movs	r1, #1
 800e8e4:	6978      	ldr	r0, [r7, #20]
 800e8e6:	f000 fb9d 	bl	800f024 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d01d      	beq.n	800e92e <sent_tcp+0x92>
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	685b      	ldr	r3, [r3, #4]
 800e8f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e8fa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e8fe:	d316      	bcc.n	800e92e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800e908:	2b04      	cmp	r3, #4
 800e90a:	d810      	bhi.n	800e92e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	7f1b      	ldrb	r3, [r3, #28]
 800e910:	f023 0310 	bic.w	r3, r3, #16
 800e914:	b2da      	uxtb	r2, r3
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d005      	beq.n	800e92e <sent_tcp+0x92>
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e926:	88fa      	ldrh	r2, [r7, #6]
 800e928:	2102      	movs	r1, #2
 800e92a:	6978      	ldr	r0, [r7, #20]
 800e92c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800e92e:	2300      	movs	r3, #0
}
 800e930:	4618      	mov	r0, r3
 800e932:	3718      	adds	r7, #24
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}
 800e938:	0801cf40 	.word	0x0801cf40
 800e93c:	0801d098 	.word	0x0801d098
 800e940:	0801cf84 	.word	0x0801cf84

0800e944 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b088      	sub	sp, #32
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	460b      	mov	r3, r1
 800e94e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d106      	bne.n	800e968 <err_tcp+0x24>
 800e95a:	4b5f      	ldr	r3, [pc, #380]	; (800ead8 <err_tcp+0x194>)
 800e95c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800e960:	495e      	ldr	r1, [pc, #376]	; (800eadc <err_tcp+0x198>)
 800e962:	485f      	ldr	r0, [pc, #380]	; (800eae0 <err_tcp+0x19c>)
 800e964:	f00c ff7e 	bl	801b864 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800e968:	f00c fd6c 	bl	801b444 <sys_arch_protect>
 800e96c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	2200      	movs	r2, #0
 800e972:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	78fa      	ldrb	r2, [r7, #3]
 800e978:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	7f1b      	ldrb	r3, [r3, #28]
 800e97e:	f043 0301 	orr.w	r3, r3, #1
 800e982:	b2da      	uxtb	r2, r3
 800e984:	69fb      	ldr	r3, [r7, #28]
 800e986:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	785b      	ldrb	r3, [r3, #1]
 800e98c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800e98e:	69fb      	ldr	r3, [r7, #28]
 800e990:	2200      	movs	r2, #0
 800e992:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800e994:	69b8      	ldr	r0, [r7, #24]
 800e996:	f00c fd63 	bl	801b460 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800e99a:	69fb      	ldr	r3, [r7, #28]
 800e99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d005      	beq.n	800e9ae <err_tcp+0x6a>
 800e9a2:	69fb      	ldr	r3, [r7, #28]
 800e9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	2104      	movs	r1, #4
 800e9aa:	69f8      	ldr	r0, [r7, #28]
 800e9ac:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d005      	beq.n	800e9c2 <err_tcp+0x7e>
 800e9b6:	69fb      	ldr	r3, [r7, #28]
 800e9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	2100      	movs	r1, #0
 800e9be:	69f8      	ldr	r0, [r7, #28]
 800e9c0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d005      	beq.n	800e9d6 <err_tcp+0x92>
 800e9ca:	69fb      	ldr	r3, [r7, #28]
 800e9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	2102      	movs	r1, #2
 800e9d2:	69f8      	ldr	r0, [r7, #28]
 800e9d4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800e9d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7ff fd86 	bl	800e4ec <lwip_netconn_err_to_msg>
 800e9e0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800e9e2:	69fb      	ldr	r3, [r7, #28]
 800e9e4:	3310      	adds	r3, #16
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f00c fc22 	bl	801b230 <sys_mbox_valid>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d005      	beq.n	800e9fe <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800e9f2:	69fb      	ldr	r3, [r7, #28]
 800e9f4:	3310      	adds	r3, #16
 800e9f6:	6939      	ldr	r1, [r7, #16]
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f00c fbb7 	bl	801b16c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800e9fe:	69fb      	ldr	r3, [r7, #28]
 800ea00:	3314      	adds	r3, #20
 800ea02:	4618      	mov	r0, r3
 800ea04:	f00c fc14 	bl	801b230 <sys_mbox_valid>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d005      	beq.n	800ea1a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800ea0e:	69fb      	ldr	r3, [r7, #28]
 800ea10:	3314      	adds	r3, #20
 800ea12:	6939      	ldr	r1, [r7, #16]
 800ea14:	4618      	mov	r0, r3
 800ea16:	f00c fba9 	bl	801b16c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800ea1a:	7dfb      	ldrb	r3, [r7, #23]
 800ea1c:	2b01      	cmp	r3, #1
 800ea1e:	d005      	beq.n	800ea2c <err_tcp+0xe8>
 800ea20:	7dfb      	ldrb	r3, [r7, #23]
 800ea22:	2b04      	cmp	r3, #4
 800ea24:	d002      	beq.n	800ea2c <err_tcp+0xe8>
 800ea26:	7dfb      	ldrb	r3, [r7, #23]
 800ea28:	2b03      	cmp	r3, #3
 800ea2a:	d143      	bne.n	800eab4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	7f1b      	ldrb	r3, [r3, #28]
 800ea30:	f003 0304 	and.w	r3, r3, #4
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	bf14      	ite	ne
 800ea38:	2301      	movne	r3, #1
 800ea3a:	2300      	moveq	r3, #0
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	7f1b      	ldrb	r3, [r3, #28]
 800ea44:	f023 0304 	bic.w	r3, r3, #4
 800ea48:	b2da      	uxtb	r2, r3
 800ea4a:	69fb      	ldr	r3, [r7, #28]
 800ea4c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d13b      	bne.n	800eacc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	6a1b      	ldr	r3, [r3, #32]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d106      	bne.n	800ea6a <err_tcp+0x126>
 800ea5c:	4b1e      	ldr	r3, [pc, #120]	; (800ead8 <err_tcp+0x194>)
 800ea5e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ea62:	4920      	ldr	r1, [pc, #128]	; (800eae4 <err_tcp+0x1a0>)
 800ea64:	481e      	ldr	r0, [pc, #120]	; (800eae0 <err_tcp+0x19c>)
 800ea66:	f00c fefd 	bl	801b864 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800ea6a:	7dfb      	ldrb	r3, [r7, #23]
 800ea6c:	2b04      	cmp	r3, #4
 800ea6e:	d104      	bne.n	800ea7a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	6a1b      	ldr	r3, [r3, #32]
 800ea74:	2200      	movs	r2, #0
 800ea76:	711a      	strb	r2, [r3, #4]
 800ea78:	e003      	b.n	800ea82 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	6a1b      	ldr	r3, [r3, #32]
 800ea7e:	78fa      	ldrb	r2, [r7, #3]
 800ea80:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ea82:	69fb      	ldr	r3, [r7, #28]
 800ea84:	6a1b      	ldr	r3, [r3, #32]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	330c      	adds	r3, #12
 800ea8a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800ea8c:	68b8      	ldr	r0, [r7, #8]
 800ea8e:	f00c fc5d 	bl	801b34c <sys_sem_valid>
 800ea92:	4603      	mov	r3, r0
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d106      	bne.n	800eaa6 <err_tcp+0x162>
 800ea98:	4b0f      	ldr	r3, [pc, #60]	; (800ead8 <err_tcp+0x194>)
 800ea9a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800ea9e:	4912      	ldr	r1, [pc, #72]	; (800eae8 <err_tcp+0x1a4>)
 800eaa0:	480f      	ldr	r0, [pc, #60]	; (800eae0 <err_tcp+0x19c>)
 800eaa2:	f00c fedf 	bl	801b864 <iprintf>
      conn->current_msg = NULL;
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800eaac:	68b8      	ldr	r0, [r7, #8]
 800eaae:	f00c fc33 	bl	801b318 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800eab2:	e00b      	b.n	800eacc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	6a1b      	ldr	r3, [r3, #32]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d008      	beq.n	800eace <err_tcp+0x18a>
 800eabc:	4b06      	ldr	r3, [pc, #24]	; (800ead8 <err_tcp+0x194>)
 800eabe:	f240 12f7 	movw	r2, #503	; 0x1f7
 800eac2:	490a      	ldr	r1, [pc, #40]	; (800eaec <err_tcp+0x1a8>)
 800eac4:	4806      	ldr	r0, [pc, #24]	; (800eae0 <err_tcp+0x19c>)
 800eac6:	f00c fecd 	bl	801b864 <iprintf>
  }
}
 800eaca:	e000      	b.n	800eace <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800eacc:	bf00      	nop
}
 800eace:	bf00      	nop
 800ead0:	3720      	adds	r7, #32
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	bf00      	nop
 800ead8:	0801cf40 	.word	0x0801cf40
 800eadc:	0801d098 	.word	0x0801d098
 800eae0:	0801cf84 	.word	0x0801cf84
 800eae4:	0801d0a8 	.word	0x0801d0a8
 800eae8:	0801d0c4 	.word	0x0801d0c4
 800eaec:	0801d0e0 	.word	0x0801d0e0

0800eaf0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	685b      	ldr	r3, [r3, #4]
 800eafc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800eafe:	6879      	ldr	r1, [r7, #4]
 800eb00:	68f8      	ldr	r0, [r7, #12]
 800eb02:	f004 fec9 	bl	8013898 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800eb06:	490a      	ldr	r1, [pc, #40]	; (800eb30 <setup_tcp+0x40>)
 800eb08:	68f8      	ldr	r0, [r7, #12]
 800eb0a:	f004 fed7 	bl	80138bc <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800eb0e:	4909      	ldr	r1, [pc, #36]	; (800eb34 <setup_tcp+0x44>)
 800eb10:	68f8      	ldr	r0, [r7, #12]
 800eb12:	f004 fef5 	bl	8013900 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800eb16:	2202      	movs	r2, #2
 800eb18:	4907      	ldr	r1, [pc, #28]	; (800eb38 <setup_tcp+0x48>)
 800eb1a:	68f8      	ldr	r0, [r7, #12]
 800eb1c:	f004 ff4c 	bl	80139b8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800eb20:	4906      	ldr	r1, [pc, #24]	; (800eb3c <setup_tcp+0x4c>)
 800eb22:	68f8      	ldr	r0, [r7, #12]
 800eb24:	f004 ff0e 	bl	8013944 <tcp_err>
}
 800eb28:	bf00      	nop
 800eb2a:	3710      	adds	r7, #16
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	0800e6c9 	.word	0x0800e6c9
 800eb34:	0800e89d 	.word	0x0800e89d
 800eb38:	0800e7d5 	.word	0x0800e7d5
 800eb3c:	0800e945 	.word	0x0800e945

0800eb40 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800eb40:	b590      	push	{r4, r7, lr}
 800eb42:	b089      	sub	sp, #36	; 0x24
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	4613      	mov	r3, r2
 800eb4c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800eb52:	69fb      	ldr	r3, [r7, #28]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d102      	bne.n	800eb5e <accept_function+0x1e>
    return ERR_VAL;
 800eb58:	f06f 0305 	mvn.w	r3, #5
 800eb5c:	e0a1      	b.n	800eca2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800eb5e:	69fb      	ldr	r3, [r7, #28]
 800eb60:	3314      	adds	r3, #20
 800eb62:	4618      	mov	r0, r3
 800eb64:	f00c fb64 	bl	801b230 <sys_mbox_valid>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d102      	bne.n	800eb74 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800eb6e:	f06f 0305 	mvn.w	r3, #5
 800eb72:	e096      	b.n	800eca2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d11b      	bne.n	800ebb2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800eb7a:	69fb      	ldr	r3, [r7, #28]
 800eb7c:	f103 0414 	add.w	r4, r3, #20
 800eb80:	f06f 000c 	mvn.w	r0, #12
 800eb84:	f7ff fcb2 	bl	800e4ec <lwip_netconn_err_to_msg>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	f00c faed 	bl	801b16c <sys_mbox_trypost>
 800eb92:	4603      	mov	r3, r0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d109      	bne.n	800ebac <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d005      	beq.n	800ebac <accept_function+0x6c>
 800eba0:	69fb      	ldr	r3, [r7, #28]
 800eba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eba4:	2200      	movs	r2, #0
 800eba6:	2100      	movs	r1, #0
 800eba8:	69f8      	ldr	r0, [r7, #28]
 800ebaa:	4798      	blx	r3
    }
    return ERR_VAL;
 800ebac:	f06f 0305 	mvn.w	r3, #5
 800ebb0:	e077      	b.n	800eca2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800ebb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d006      	beq.n	800ebc8 <accept_function+0x88>
 800ebba:	4b3c      	ldr	r3, [pc, #240]	; (800ecac <accept_function+0x16c>)
 800ebbc:	f240 222a 	movw	r2, #554	; 0x22a
 800ebc0:	493b      	ldr	r1, [pc, #236]	; (800ecb0 <accept_function+0x170>)
 800ebc2:	483c      	ldr	r0, [pc, #240]	; (800ecb4 <accept_function+0x174>)
 800ebc4:	f00c fe4e 	bl	801b864 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800ebc8:	69fb      	ldr	r3, [r7, #28]
 800ebca:	781a      	ldrb	r2, [r3, #0]
 800ebcc:	69fb      	ldr	r3, [r7, #28]
 800ebce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	4610      	mov	r0, r2
 800ebd4:	f000 f8f0 	bl	800edb8 <netconn_alloc>
 800ebd8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800ebda:	69bb      	ldr	r3, [r7, #24]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d11b      	bne.n	800ec18 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	f103 0414 	add.w	r4, r3, #20
 800ebe6:	f06f 000c 	mvn.w	r0, #12
 800ebea:	f7ff fc7f 	bl	800e4ec <lwip_netconn_err_to_msg>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f00c faba 	bl	801b16c <sys_mbox_trypost>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d109      	bne.n	800ec12 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ebfe:	69fb      	ldr	r3, [r7, #28]
 800ec00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d005      	beq.n	800ec12 <accept_function+0xd2>
 800ec06:	69fb      	ldr	r3, [r7, #28]
 800ec08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	2100      	movs	r1, #0
 800ec0e:	69f8      	ldr	r0, [r7, #28]
 800ec10:	4798      	blx	r3
    }
    return ERR_MEM;
 800ec12:	f04f 33ff 	mov.w	r3, #4294967295
 800ec16:	e044      	b.n	800eca2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	68ba      	ldr	r2, [r7, #8]
 800ec1c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800ec1e:	69b8      	ldr	r0, [r7, #24]
 800ec20:	f7ff ff66 	bl	800eaf0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	3314      	adds	r3, #20
 800ec28:	69b9      	ldr	r1, [r7, #24]
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f00c fa9e 	bl	801b16c <sys_mbox_trypost>
 800ec30:	4603      	mov	r3, r0
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d02a      	beq.n	800ec8c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800ec36:	69bb      	ldr	r3, [r7, #24]
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800ec3c:	2100      	movs	r1, #0
 800ec3e:	6978      	ldr	r0, [r7, #20]
 800ec40:	f004 fe2a 	bl	8013898 <tcp_arg>
    tcp_recv(pcb, NULL);
 800ec44:	2100      	movs	r1, #0
 800ec46:	6978      	ldr	r0, [r7, #20]
 800ec48:	f004 fe38 	bl	80138bc <tcp_recv>
    tcp_sent(pcb, NULL);
 800ec4c:	2100      	movs	r1, #0
 800ec4e:	6978      	ldr	r0, [r7, #20]
 800ec50:	f004 fe56 	bl	8013900 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800ec54:	2200      	movs	r2, #0
 800ec56:	2100      	movs	r1, #0
 800ec58:	6978      	ldr	r0, [r7, #20]
 800ec5a:	f004 fead 	bl	80139b8 <tcp_poll>
    tcp_err(pcb, NULL);
 800ec5e:	2100      	movs	r1, #0
 800ec60:	6978      	ldr	r0, [r7, #20]
 800ec62:	f004 fe6f 	bl	8013944 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800ec66:	69bb      	ldr	r3, [r7, #24]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	3310      	adds	r3, #16
 800ec70:	4618      	mov	r0, r3
 800ec72:	f00c fa69 	bl	801b148 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	3310      	adds	r3, #16
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f00c fae9 	bl	801b252 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800ec80:	69b8      	ldr	r0, [r7, #24]
 800ec82:	f000 f907 	bl	800ee94 <netconn_free>
    return ERR_MEM;
 800ec86:	f04f 33ff 	mov.w	r3, #4294967295
 800ec8a:	e00a      	b.n	800eca2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d005      	beq.n	800eca0 <accept_function+0x160>
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec98:	2200      	movs	r2, #0
 800ec9a:	2100      	movs	r1, #0
 800ec9c:	69f8      	ldr	r0, [r7, #28]
 800ec9e:	4798      	blx	r3
  }

  return ERR_OK;
 800eca0:	2300      	movs	r3, #0
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3724      	adds	r7, #36	; 0x24
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd90      	pop	{r4, r7, pc}
 800ecaa:	bf00      	nop
 800ecac:	0801cf40 	.word	0x0801cf40
 800ecb0:	0801d0fc 	.word	0x0801d0fc
 800ecb4:	0801cf84 	.word	0x0801cf84

0800ecb8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ecb8:	b590      	push	{r4, r7, lr}
 800ecba:	b085      	sub	sp, #20
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d006      	beq.n	800ecdc <pcb_new+0x24>
 800ecce:	4b2b      	ldr	r3, [pc, #172]	; (800ed7c <pcb_new+0xc4>)
 800ecd0:	f240 2265 	movw	r2, #613	; 0x265
 800ecd4:	492a      	ldr	r1, [pc, #168]	; (800ed80 <pcb_new+0xc8>)
 800ecd6:	482b      	ldr	r0, [pc, #172]	; (800ed84 <pcb_new+0xcc>)
 800ecd8:	f00c fdc4 	bl	801b864 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ece6:	2b10      	cmp	r3, #16
 800ece8:	d022      	beq.n	800ed30 <pcb_new+0x78>
 800ecea:	2b20      	cmp	r3, #32
 800ecec:	d133      	bne.n	800ed56 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681c      	ldr	r4, [r3, #0]
 800ecf2:	7bfb      	ldrb	r3, [r7, #15]
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f009 fee4 	bl	8018ac2 <udp_new_ip_type>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	685b      	ldr	r3, [r3, #4]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d02a      	beq.n	800ed5e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	781b      	ldrb	r3, [r3, #0]
 800ed0e:	2b22      	cmp	r3, #34	; 0x22
 800ed10:	d104      	bne.n	800ed1c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	2201      	movs	r2, #1
 800ed1a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	6858      	ldr	r0, [r3, #4]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	461a      	mov	r2, r3
 800ed28:	4917      	ldr	r1, [pc, #92]	; (800ed88 <pcb_new+0xd0>)
 800ed2a:	f009 fe51 	bl	80189d0 <udp_recv>
      }
      break;
 800ed2e:	e016      	b.n	800ed5e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681c      	ldr	r4, [r3, #0]
 800ed34:	7bfb      	ldrb	r3, [r7, #15]
 800ed36:	4618      	mov	r0, r3
 800ed38:	f004 fda0 	bl	801387c <tcp_new_ip_type>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	685b      	ldr	r3, [r3, #4]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d00b      	beq.n	800ed62 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7ff fece 	bl	800eaf0 <setup_tcp>
      }
      break;
 800ed54:	e005      	b.n	800ed62 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	22fa      	movs	r2, #250	; 0xfa
 800ed5a:	711a      	strb	r2, [r3, #4]
      return;
 800ed5c:	e00a      	b.n	800ed74 <pcb_new+0xbc>
      break;
 800ed5e:	bf00      	nop
 800ed60:	e000      	b.n	800ed64 <pcb_new+0xac>
      break;
 800ed62:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d102      	bne.n	800ed74 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	22ff      	movs	r2, #255	; 0xff
 800ed72:	711a      	strb	r2, [r3, #4]
  }
}
 800ed74:	3714      	adds	r7, #20
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd90      	pop	{r4, r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	0801cf40 	.word	0x0801cf40
 800ed80:	0801d124 	.word	0x0801d124
 800ed84:	0801cf84 	.word	0x0801cf84
 800ed88:	0800e5cd 	.word	0x0800e5cd

0800ed8c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d102      	bne.n	800edae <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800eda8:	68f8      	ldr	r0, [r7, #12]
 800edaa:	f7ff ff85 	bl	800ecb8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800edae:	bf00      	nop
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
	...

0800edb8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b086      	sub	sp, #24
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	4603      	mov	r3, r0
 800edc0:	6039      	str	r1, [r7, #0]
 800edc2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800edc4:	2300      	movs	r3, #0
 800edc6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800edc8:	2007      	movs	r0, #7
 800edca:	f001 ffc9 	bl	8010d60 <memp_malloc>
 800edce:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d101      	bne.n	800edda <netconn_alloc+0x22>
    return NULL;
 800edd6:	2300      	movs	r3, #0
 800edd8:	e052      	b.n	800ee80 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2200      	movs	r2, #0
 800edde:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	79fa      	ldrb	r2, [r7, #7]
 800ede4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2200      	movs	r2, #0
 800edea:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800edec:	79fb      	ldrb	r3, [r7, #7]
 800edee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800edf2:	2b10      	cmp	r3, #16
 800edf4:	d004      	beq.n	800ee00 <netconn_alloc+0x48>
 800edf6:	2b20      	cmp	r3, #32
 800edf8:	d105      	bne.n	800ee06 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800edfa:	2306      	movs	r3, #6
 800edfc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800edfe:	e00a      	b.n	800ee16 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ee00:	2306      	movs	r3, #6
 800ee02:	617b      	str	r3, [r7, #20]
      break;
 800ee04:	e007      	b.n	800ee16 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ee06:	4b20      	ldr	r3, [pc, #128]	; (800ee88 <netconn_alloc+0xd0>)
 800ee08:	f240 22e5 	movw	r2, #741	; 0x2e5
 800ee0c:	491f      	ldr	r1, [pc, #124]	; (800ee8c <netconn_alloc+0xd4>)
 800ee0e:	4820      	ldr	r0, [pc, #128]	; (800ee90 <netconn_alloc+0xd8>)
 800ee10:	f00c fd28 	bl	801b864 <iprintf>
      goto free_and_return;
 800ee14:	e02f      	b.n	800ee76 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	3310      	adds	r3, #16
 800ee1a:	6979      	ldr	r1, [r7, #20]
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f00c f979 	bl	801b114 <sys_mbox_new>
 800ee22:	4603      	mov	r3, r0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d125      	bne.n	800ee74 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	330c      	adds	r3, #12
 800ee2c:	2100      	movs	r1, #0
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f00c fa1c 	bl	801b26c <sys_sem_new>
 800ee34:	4603      	mov	r3, r0
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d005      	beq.n	800ee46 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	3310      	adds	r3, #16
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f00c f982 	bl	801b148 <sys_mbox_free>
    goto free_and_return;
 800ee44:	e017      	b.n	800ee76 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	3314      	adds	r3, #20
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f00c fa01 	bl	801b252 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2200      	movs	r2, #0
 800ee54:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f04f 32ff 	mov.w	r2, #4294967295
 800ee5c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	683a      	ldr	r2, [r7, #0]
 800ee62:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2200      	movs	r2, #0
 800ee68:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	7cfa      	ldrb	r2, [r7, #19]
 800ee6e:	771a      	strb	r2, [r3, #28]
  return conn;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	e005      	b.n	800ee80 <netconn_alloc+0xc8>
    goto free_and_return;
 800ee74:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800ee76:	68f9      	ldr	r1, [r7, #12]
 800ee78:	2007      	movs	r0, #7
 800ee7a:	f001 ffe7 	bl	8010e4c <memp_free>
  return NULL;
 800ee7e:	2300      	movs	r3, #0
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3718      	adds	r7, #24
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	0801cf40 	.word	0x0801cf40
 800ee8c:	0801d144 	.word	0x0801d144
 800ee90:	0801cf84 	.word	0x0801cf84

0800ee94 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	685b      	ldr	r3, [r3, #4]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d006      	beq.n	800eeb2 <netconn_free+0x1e>
 800eea4:	4b1b      	ldr	r3, [pc, #108]	; (800ef14 <netconn_free+0x80>)
 800eea6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800eeaa:	491b      	ldr	r1, [pc, #108]	; (800ef18 <netconn_free+0x84>)
 800eeac:	481b      	ldr	r0, [pc, #108]	; (800ef1c <netconn_free+0x88>)
 800eeae:	f00c fcd9 	bl	801b864 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	3310      	adds	r3, #16
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f00c f9ba 	bl	801b230 <sys_mbox_valid>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d006      	beq.n	800eed0 <netconn_free+0x3c>
 800eec2:	4b14      	ldr	r3, [pc, #80]	; (800ef14 <netconn_free+0x80>)
 800eec4:	f240 3223 	movw	r2, #803	; 0x323
 800eec8:	4915      	ldr	r1, [pc, #84]	; (800ef20 <netconn_free+0x8c>)
 800eeca:	4814      	ldr	r0, [pc, #80]	; (800ef1c <netconn_free+0x88>)
 800eecc:	f00c fcca 	bl	801b864 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	3314      	adds	r3, #20
 800eed4:	4618      	mov	r0, r3
 800eed6:	f00c f9ab 	bl	801b230 <sys_mbox_valid>
 800eeda:	4603      	mov	r3, r0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d006      	beq.n	800eeee <netconn_free+0x5a>
 800eee0:	4b0c      	ldr	r3, [pc, #48]	; (800ef14 <netconn_free+0x80>)
 800eee2:	f240 3226 	movw	r2, #806	; 0x326
 800eee6:	490f      	ldr	r1, [pc, #60]	; (800ef24 <netconn_free+0x90>)
 800eee8:	480c      	ldr	r0, [pc, #48]	; (800ef1c <netconn_free+0x88>)
 800eeea:	f00c fcbb 	bl	801b864 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	330c      	adds	r3, #12
 800eef2:	4618      	mov	r0, r3
 800eef4:	f00c fa1d 	bl	801b332 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	330c      	adds	r3, #12
 800eefc:	4618      	mov	r0, r3
 800eefe:	f00c fa36 	bl	801b36e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800ef02:	6879      	ldr	r1, [r7, #4]
 800ef04:	2007      	movs	r0, #7
 800ef06:	f001 ffa1 	bl	8010e4c <memp_free>
}
 800ef0a:	bf00      	nop
 800ef0c:	3708      	adds	r7, #8
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	0801cf40 	.word	0x0801cf40
 800ef18:	0801d16c 	.word	0x0801d16c
 800ef1c:	0801cf84 	.word	0x0801cf84
 800ef20:	0801d19c 	.word	0x0801d19c
 800ef24:	0801d1d8 	.word	0x0801d1d8

0800ef28 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b086      	sub	sp, #24
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	3310      	adds	r3, #16
 800ef34:	4618      	mov	r0, r3
 800ef36:	f00c f97b 	bl	801b230 <sys_mbox_valid>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d02f      	beq.n	800efa0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ef40:	e018      	b.n	800ef74 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef4a:	2b10      	cmp	r3, #16
 800ef4c:	d10e      	bne.n	800ef6c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ef4e:	693b      	ldr	r3, [r7, #16]
 800ef50:	f107 020f 	add.w	r2, r7, #15
 800ef54:	4611      	mov	r1, r2
 800ef56:	4618      	mov	r0, r3
 800ef58:	f7ff fafe 	bl	800e558 <lwip_netconn_is_err_msg>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d108      	bne.n	800ef74 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	4618      	mov	r0, r3
 800ef66:	f002 fe19 	bl	8011b9c <pbuf_free>
 800ef6a:	e003      	b.n	800ef74 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f000 fe92 	bl	800fc98 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	3310      	adds	r3, #16
 800ef78:	f107 0210 	add.w	r2, r7, #16
 800ef7c:	4611      	mov	r1, r2
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f00c f93f 	bl	801b202 <sys_arch_mbox_tryfetch>
 800ef84:	4603      	mov	r3, r0
 800ef86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef8a:	d1da      	bne.n	800ef42 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	3310      	adds	r3, #16
 800ef90:	4618      	mov	r0, r3
 800ef92:	f00c f8d9 	bl	801b148 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	3310      	adds	r3, #16
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f00c f959 	bl	801b252 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	3314      	adds	r3, #20
 800efa4:	4618      	mov	r0, r3
 800efa6:	f00c f943 	bl	801b230 <sys_mbox_valid>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	d034      	beq.n	800f01a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800efb0:	e01d      	b.n	800efee <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	f107 020e 	add.w	r2, r7, #14
 800efb8:	4611      	mov	r1, r2
 800efba:	4618      	mov	r0, r3
 800efbc:	f7ff facc 	bl	800e558 <lwip_netconn_is_err_msg>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d113      	bne.n	800efee <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800efca:	6978      	ldr	r0, [r7, #20]
 800efcc:	f7ff ffac 	bl	800ef28 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d007      	beq.n	800efe8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	4618      	mov	r0, r3
 800efde:	f003 fbcd 	bl	801277c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	2200      	movs	r2, #0
 800efe6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800efe8:	6978      	ldr	r0, [r7, #20]
 800efea:	f7ff ff53 	bl	800ee94 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	3314      	adds	r3, #20
 800eff2:	f107 0210 	add.w	r2, r7, #16
 800eff6:	4611      	mov	r1, r2
 800eff8:	4618      	mov	r0, r3
 800effa:	f00c f902 	bl	801b202 <sys_arch_mbox_tryfetch>
 800effe:	4603      	mov	r3, r0
 800f000:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f004:	d1d5      	bne.n	800efb2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	3314      	adds	r3, #20
 800f00a:	4618      	mov	r0, r3
 800f00c:	f00c f89c 	bl	801b148 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	3314      	adds	r3, #20
 800f014:	4618      	mov	r0, r3
 800f016:	f00c f91c 	bl	801b252 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800f01a:	bf00      	nop
 800f01c:	3718      	adds	r7, #24
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}
	...

0800f024 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b086      	sub	sp, #24
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	460b      	mov	r3, r1
 800f02e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800f030:	2300      	movs	r3, #0
 800f032:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d106      	bne.n	800f048 <lwip_netconn_do_close_internal+0x24>
 800f03a:	4b87      	ldr	r3, [pc, #540]	; (800f258 <lwip_netconn_do_close_internal+0x234>)
 800f03c:	f240 32a2 	movw	r2, #930	; 0x3a2
 800f040:	4986      	ldr	r1, [pc, #536]	; (800f25c <lwip_netconn_do_close_internal+0x238>)
 800f042:	4887      	ldr	r0, [pc, #540]	; (800f260 <lwip_netconn_do_close_internal+0x23c>)
 800f044:	f00c fc0e 	bl	801b864 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	781b      	ldrb	r3, [r3, #0]
 800f04c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f050:	2b10      	cmp	r3, #16
 800f052:	d006      	beq.n	800f062 <lwip_netconn_do_close_internal+0x3e>
 800f054:	4b80      	ldr	r3, [pc, #512]	; (800f258 <lwip_netconn_do_close_internal+0x234>)
 800f056:	f240 32a3 	movw	r2, #931	; 0x3a3
 800f05a:	4982      	ldr	r1, [pc, #520]	; (800f264 <lwip_netconn_do_close_internal+0x240>)
 800f05c:	4880      	ldr	r0, [pc, #512]	; (800f260 <lwip_netconn_do_close_internal+0x23c>)
 800f05e:	f00c fc01 	bl	801b864 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	785b      	ldrb	r3, [r3, #1]
 800f066:	2b04      	cmp	r3, #4
 800f068:	d006      	beq.n	800f078 <lwip_netconn_do_close_internal+0x54>
 800f06a:	4b7b      	ldr	r3, [pc, #492]	; (800f258 <lwip_netconn_do_close_internal+0x234>)
 800f06c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800f070:	497d      	ldr	r1, [pc, #500]	; (800f268 <lwip_netconn_do_close_internal+0x244>)
 800f072:	487b      	ldr	r0, [pc, #492]	; (800f260 <lwip_netconn_do_close_internal+0x23c>)
 800f074:	f00c fbf6 	bl	801b864 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d106      	bne.n	800f08e <lwip_netconn_do_close_internal+0x6a>
 800f080:	4b75      	ldr	r3, [pc, #468]	; (800f258 <lwip_netconn_do_close_internal+0x234>)
 800f082:	f240 32a5 	movw	r2, #933	; 0x3a5
 800f086:	4979      	ldr	r1, [pc, #484]	; (800f26c <lwip_netconn_do_close_internal+0x248>)
 800f088:	4875      	ldr	r0, [pc, #468]	; (800f260 <lwip_netconn_do_close_internal+0x23c>)
 800f08a:	f00c fbeb 	bl	801b864 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6a1b      	ldr	r3, [r3, #32]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d106      	bne.n	800f0a4 <lwip_netconn_do_close_internal+0x80>
 800f096:	4b70      	ldr	r3, [pc, #448]	; (800f258 <lwip_netconn_do_close_internal+0x234>)
 800f098:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f09c:	4974      	ldr	r1, [pc, #464]	; (800f270 <lwip_netconn_do_close_internal+0x24c>)
 800f09e:	4870      	ldr	r0, [pc, #448]	; (800f260 <lwip_netconn_do_close_internal+0x23c>)
 800f0a0:	f00c fbe0 	bl	801b864 <iprintf>

  tpcb = conn->pcb.tcp;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	685b      	ldr	r3, [r3, #4]
 800f0a8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6a1b      	ldr	r3, [r3, #32]
 800f0ae:	7a1b      	ldrb	r3, [r3, #8]
 800f0b0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800f0b2:	7bfb      	ldrb	r3, [r7, #15]
 800f0b4:	f003 0301 	and.w	r3, r3, #1
 800f0b8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800f0ba:	7bfb      	ldrb	r3, [r7, #15]
 800f0bc:	f003 0302 	and.w	r3, r3, #2
 800f0c0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800f0c2:	7bfb      	ldrb	r3, [r7, #15]
 800f0c4:	2b03      	cmp	r3, #3
 800f0c6:	d102      	bne.n	800f0ce <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	75bb      	strb	r3, [r7, #22]
 800f0cc:	e01f      	b.n	800f10e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800f0ce:	7bbb      	ldrb	r3, [r7, #14]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d00e      	beq.n	800f0f2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800f0d8:	2b05      	cmp	r3, #5
 800f0da:	d007      	beq.n	800f0ec <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800f0e0:	2b06      	cmp	r3, #6
 800f0e2:	d003      	beq.n	800f0ec <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800f0e8:	2b08      	cmp	r3, #8
 800f0ea:	d102      	bne.n	800f0f2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	75bb      	strb	r3, [r7, #22]
 800f0f0:	e00d      	b.n	800f10e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800f0f2:	7b7b      	ldrb	r3, [r7, #13]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d008      	beq.n	800f10a <lwip_netconn_do_close_internal+0xe6>
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	8b5b      	ldrh	r3, [r3, #26]
 800f0fc:	f003 0310 	and.w	r3, r3, #16
 800f100:	2b00      	cmp	r3, #0
 800f102:	d002      	beq.n	800f10a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800f104:	2301      	movs	r3, #1
 800f106:	75bb      	strb	r3, [r7, #22]
 800f108:	e001      	b.n	800f10e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800f10a:	2300      	movs	r3, #0
 800f10c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800f10e:	7dbb      	ldrb	r3, [r7, #22]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d003      	beq.n	800f11c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800f114:	2100      	movs	r1, #0
 800f116:	6938      	ldr	r0, [r7, #16]
 800f118:	f004 fbbe 	bl	8013898 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	7d1b      	ldrb	r3, [r3, #20]
 800f120:	2b01      	cmp	r3, #1
 800f122:	d104      	bne.n	800f12e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800f124:	2100      	movs	r1, #0
 800f126:	6938      	ldr	r0, [r7, #16]
 800f128:	f004 fc2e 	bl	8013988 <tcp_accept>
 800f12c:	e01d      	b.n	800f16a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800f12e:	7bbb      	ldrb	r3, [r7, #14]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d007      	beq.n	800f144 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800f134:	2100      	movs	r1, #0
 800f136:	6938      	ldr	r0, [r7, #16]
 800f138:	f004 fbc0 	bl	80138bc <tcp_recv>
      tcp_accept(tpcb, NULL);
 800f13c:	2100      	movs	r1, #0
 800f13e:	6938      	ldr	r0, [r7, #16]
 800f140:	f004 fc22 	bl	8013988 <tcp_accept>
    }
    if (shut_tx) {
 800f144:	7b7b      	ldrb	r3, [r7, #13]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d003      	beq.n	800f152 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800f14a:	2100      	movs	r1, #0
 800f14c:	6938      	ldr	r0, [r7, #16]
 800f14e:	f004 fbd7 	bl	8013900 <tcp_sent>
    }
    if (shut_close) {
 800f152:	7dbb      	ldrb	r3, [r7, #22]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d008      	beq.n	800f16a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800f158:	2200      	movs	r2, #0
 800f15a:	2100      	movs	r1, #0
 800f15c:	6938      	ldr	r0, [r7, #16]
 800f15e:	f004 fc2b 	bl	80139b8 <tcp_poll>
      tcp_err(tpcb, NULL);
 800f162:	2100      	movs	r1, #0
 800f164:	6938      	ldr	r0, [r7, #16]
 800f166:	f004 fbed 	bl	8013944 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800f16a:	7dbb      	ldrb	r3, [r7, #22]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d005      	beq.n	800f17c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800f170:	6938      	ldr	r0, [r7, #16]
 800f172:	f003 f9bd 	bl	80124f0 <tcp_close>
 800f176:	4603      	mov	r3, r0
 800f178:	75fb      	strb	r3, [r7, #23]
 800f17a:	e007      	b.n	800f18c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800f17c:	7bbb      	ldrb	r3, [r7, #14]
 800f17e:	7b7a      	ldrb	r2, [r7, #13]
 800f180:	4619      	mov	r1, r3
 800f182:	6938      	ldr	r0, [r7, #16]
 800f184:	f003 f9e0 	bl	8012548 <tcp_shutdown>
 800f188:	4603      	mov	r3, r0
 800f18a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800f18c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d102      	bne.n	800f19a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800f194:	2301      	movs	r3, #1
 800f196:	757b      	strb	r3, [r7, #21]
 800f198:	e016      	b.n	800f1c8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800f19a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1a2:	d10f      	bne.n	800f1c4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6a1b      	ldr	r3, [r3, #32]
 800f1a8:	7a5b      	ldrb	r3, [r3, #9]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d10c      	bne.n	800f1c8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800f1b2:	7dbb      	ldrb	r3, [r7, #22]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d007      	beq.n	800f1c8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800f1b8:	6938      	ldr	r0, [r7, #16]
 800f1ba:	f003 fadf 	bl	801277c <tcp_abort>
          err = ERR_OK;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	75fb      	strb	r3, [r7, #23]
 800f1c2:	e001      	b.n	800f1c8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800f1c8:	7d7b      	ldrb	r3, [r7, #21]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d052      	beq.n	800f274 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6a1b      	ldr	r3, [r3, #32]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	330c      	adds	r3, #12
 800f1d6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6a1b      	ldr	r3, [r3, #32]
 800f1dc:	7dfa      	ldrb	r2, [r7, #23]
 800f1de:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800f1ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d129      	bne.n	800f248 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800f1f4:	7dbb      	ldrb	r3, [r7, #22]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d00c      	beq.n	800f214 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f204:	2b00      	cmp	r3, #0
 800f206:	d005      	beq.n	800f214 <lwip_netconn_do_close_internal+0x1f0>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f20c:	2200      	movs	r2, #0
 800f20e:	2104      	movs	r1, #4
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	4798      	blx	r3
      }
      if (shut_rx) {
 800f214:	7bbb      	ldrb	r3, [r7, #14]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d009      	beq.n	800f22e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d005      	beq.n	800f22e <lwip_netconn_do_close_internal+0x20a>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f226:	2200      	movs	r2, #0
 800f228:	2100      	movs	r1, #0
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	4798      	blx	r3
      }
      if (shut_tx) {
 800f22e:	7b7b      	ldrb	r3, [r7, #13]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d009      	beq.n	800f248 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d005      	beq.n	800f248 <lwip_netconn_do_close_internal+0x224>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f240:	2200      	movs	r2, #0
 800f242:	2102      	movs	r1, #2
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800f248:	78fb      	ldrb	r3, [r7, #3]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d002      	beq.n	800f254 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800f24e:	68b8      	ldr	r0, [r7, #8]
 800f250:	f00c f862 	bl	801b318 <sys_sem_signal>
    }
    return ERR_OK;
 800f254:	2300      	movs	r3, #0
 800f256:	e03c      	b.n	800f2d2 <lwip_netconn_do_close_internal+0x2ae>
 800f258:	0801cf40 	.word	0x0801cf40
 800f25c:	0801d214 	.word	0x0801d214
 800f260:	0801cf84 	.word	0x0801cf84
 800f264:	0801d224 	.word	0x0801d224
 800f268:	0801d244 	.word	0x0801d244
 800f26c:	0801d268 	.word	0x0801d268
 800f270:	0801d0a8 	.word	0x0801d0a8
  }
  if (!close_finished) {
 800f274:	7d7b      	ldrb	r3, [r7, #21]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d11e      	bne.n	800f2b8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800f27a:	693b      	ldr	r3, [r7, #16]
 800f27c:	7d1b      	ldrb	r3, [r3, #20]
 800f27e:	2b01      	cmp	r3, #1
 800f280:	d106      	bne.n	800f290 <lwip_netconn_do_close_internal+0x26c>
 800f282:	4b16      	ldr	r3, [pc, #88]	; (800f2dc <lwip_netconn_do_close_internal+0x2b8>)
 800f284:	f240 4241 	movw	r2, #1089	; 0x441
 800f288:	4915      	ldr	r1, [pc, #84]	; (800f2e0 <lwip_netconn_do_close_internal+0x2bc>)
 800f28a:	4816      	ldr	r0, [pc, #88]	; (800f2e4 <lwip_netconn_do_close_internal+0x2c0>)
 800f28c:	f00c faea 	bl	801b864 <iprintf>
    if (shut_tx) {
 800f290:	7b7b      	ldrb	r3, [r7, #13]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d003      	beq.n	800f29e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800f296:	4914      	ldr	r1, [pc, #80]	; (800f2e8 <lwip_netconn_do_close_internal+0x2c4>)
 800f298:	6938      	ldr	r0, [r7, #16]
 800f29a:	f004 fb31 	bl	8013900 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800f29e:	2201      	movs	r2, #1
 800f2a0:	4912      	ldr	r1, [pc, #72]	; (800f2ec <lwip_netconn_do_close_internal+0x2c8>)
 800f2a2:	6938      	ldr	r0, [r7, #16]
 800f2a4:	f004 fb88 	bl	80139b8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800f2a8:	4911      	ldr	r1, [pc, #68]	; (800f2f0 <lwip_netconn_do_close_internal+0x2cc>)
 800f2aa:	6938      	ldr	r0, [r7, #16]
 800f2ac:	f004 fb4a 	bl	8013944 <tcp_err>
    tcp_arg(tpcb, conn);
 800f2b0:	6879      	ldr	r1, [r7, #4]
 800f2b2:	6938      	ldr	r0, [r7, #16]
 800f2b4:	f004 faf0 	bl	8013898 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800f2b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d106      	bne.n	800f2ce <lwip_netconn_do_close_internal+0x2aa>
 800f2c0:	4b06      	ldr	r3, [pc, #24]	; (800f2dc <lwip_netconn_do_close_internal+0x2b8>)
 800f2c2:	f240 424d 	movw	r2, #1101	; 0x44d
 800f2c6:	490b      	ldr	r1, [pc, #44]	; (800f2f4 <lwip_netconn_do_close_internal+0x2d0>)
 800f2c8:	4806      	ldr	r0, [pc, #24]	; (800f2e4 <lwip_netconn_do_close_internal+0x2c0>)
 800f2ca:	f00c facb 	bl	801b864 <iprintf>
  return err;
 800f2ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3718      	adds	r7, #24
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
 800f2da:	bf00      	nop
 800f2dc:	0801cf40 	.word	0x0801cf40
 800f2e0:	0801d27c 	.word	0x0801d27c
 800f2e4:	0801cf84 	.word	0x0801cf84
 800f2e8:	0800e89d 	.word	0x0800e89d
 800f2ec:	0800e7d5 	.word	0x0800e7d5
 800f2f0:	0800e945 	.word	0x0800e945
 800f2f4:	0801d2a0 	.word	0x0801d2a0

0800f2f8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	785b      	ldrb	r3, [r3, #1]
 800f30a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800f30c:	7afb      	ldrb	r3, [r7, #11]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d00d      	beq.n	800f32e <lwip_netconn_do_delconn+0x36>
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f31c:	2b10      	cmp	r3, #16
 800f31e:	d006      	beq.n	800f32e <lwip_netconn_do_delconn+0x36>
 800f320:	4b60      	ldr	r3, [pc, #384]	; (800f4a4 <lwip_netconn_do_delconn+0x1ac>)
 800f322:	f240 425e 	movw	r2, #1118	; 0x45e
 800f326:	4960      	ldr	r1, [pc, #384]	; (800f4a8 <lwip_netconn_do_delconn+0x1b0>)
 800f328:	4860      	ldr	r0, [pc, #384]	; (800f4ac <lwip_netconn_do_delconn+0x1b4>)
 800f32a:	f00c fa9b 	bl	801b864 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800f32e:	7afb      	ldrb	r3, [r7, #11]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d005      	beq.n	800f340 <lwip_netconn_do_delconn+0x48>
 800f334:	7afb      	ldrb	r3, [r7, #11]
 800f336:	2b02      	cmp	r3, #2
 800f338:	d002      	beq.n	800f340 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800f33a:	7afb      	ldrb	r3, [r7, #11]
 800f33c:	2b03      	cmp	r3, #3
 800f33e:	d109      	bne.n	800f354 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800f340:	7afb      	ldrb	r3, [r7, #11]
 800f342:	2b03      	cmp	r3, #3
 800f344:	d10a      	bne.n	800f35c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	7f1b      	ldrb	r3, [r3, #28]
 800f34c:	f003 0304 	and.w	r3, r3, #4
 800f350:	2b00      	cmp	r3, #0
 800f352:	d103      	bne.n	800f35c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	22fb      	movs	r2, #251	; 0xfb
 800f358:	711a      	strb	r2, [r3, #4]
 800f35a:	e097      	b.n	800f48c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800f35c:	7afb      	ldrb	r3, [r7, #11]
 800f35e:	2b03      	cmp	r3, #3
 800f360:	d10d      	bne.n	800f37e <lwip_netconn_do_delconn+0x86>
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	7f1b      	ldrb	r3, [r3, #28]
 800f368:	f003 0304 	and.w	r3, r3, #4
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d106      	bne.n	800f37e <lwip_netconn_do_delconn+0x86>
 800f370:	4b4c      	ldr	r3, [pc, #304]	; (800f4a4 <lwip_netconn_do_delconn+0x1ac>)
 800f372:	f240 427a 	movw	r2, #1146	; 0x47a
 800f376:	494e      	ldr	r1, [pc, #312]	; (800f4b0 <lwip_netconn_do_delconn+0x1b8>)
 800f378:	484c      	ldr	r0, [pc, #304]	; (800f4ac <lwip_netconn_do_delconn+0x1b4>)
 800f37a:	f00c fa73 	bl	801b864 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	2200      	movs	r2, #0
 800f382:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4618      	mov	r0, r3
 800f38a:	f7ff fdcd 	bl	800ef28 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d05f      	beq.n	800f458 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	781b      	ldrb	r3, [r3, #0]
 800f39e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f3a2:	2b10      	cmp	r3, #16
 800f3a4:	d00d      	beq.n	800f3c2 <lwip_netconn_do_delconn+0xca>
 800f3a6:	2b20      	cmp	r3, #32
 800f3a8:	d151      	bne.n	800f44e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f009 fb28 	bl	8018a10 <udp_remove>
          break;
 800f3c0:	e046      	b.n	800f450 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	6a1b      	ldr	r3, [r3, #32]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d006      	beq.n	800f3da <lwip_netconn_do_delconn+0xe2>
 800f3cc:	4b35      	ldr	r3, [pc, #212]	; (800f4a4 <lwip_netconn_do_delconn+0x1ac>)
 800f3ce:	f240 4294 	movw	r2, #1172	; 0x494
 800f3d2:	4938      	ldr	r1, [pc, #224]	; (800f4b4 <lwip_netconn_do_delconn+0x1bc>)
 800f3d4:	4835      	ldr	r0, [pc, #212]	; (800f4ac <lwip_netconn_do_delconn+0x1b4>)
 800f3d6:	f00c fa45 	bl	801b864 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	2204      	movs	r2, #4
 800f3e0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2203      	movs	r2, #3
 800f3e6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	2100      	movs	r1, #0
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7ff fe14 	bl	800f024 <lwip_netconn_do_close_internal>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d04b      	beq.n	800f49a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	785b      	ldrb	r3, [r3, #1]
 800f408:	2b04      	cmp	r3, #4
 800f40a:	d006      	beq.n	800f41a <lwip_netconn_do_delconn+0x122>
 800f40c:	4b25      	ldr	r3, [pc, #148]	; (800f4a4 <lwip_netconn_do_delconn+0x1ac>)
 800f40e:	f240 429a 	movw	r2, #1178	; 0x49a
 800f412:	4929      	ldr	r1, [pc, #164]	; (800f4b8 <lwip_netconn_do_delconn+0x1c0>)
 800f414:	4825      	ldr	r0, [pc, #148]	; (800f4ac <lwip_netconn_do_delconn+0x1b4>)
 800f416:	f00c fa25 	bl	801b864 <iprintf>
            UNLOCK_TCPIP_CORE();
 800f41a:	4828      	ldr	r0, [pc, #160]	; (800f4bc <lwip_netconn_do_delconn+0x1c4>)
 800f41c:	f00b ffe5 	bl	801b3ea <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	330c      	adds	r3, #12
 800f426:	2100      	movs	r1, #0
 800f428:	4618      	mov	r0, r3
 800f42a:	f00b ff44 	bl	801b2b6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800f42e:	4823      	ldr	r0, [pc, #140]	; (800f4bc <lwip_netconn_do_delconn+0x1c4>)
 800f430:	f00b ffcc 	bl	801b3cc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	785b      	ldrb	r3, [r3, #1]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d02d      	beq.n	800f49a <lwip_netconn_do_delconn+0x1a2>
 800f43e:	4b19      	ldr	r3, [pc, #100]	; (800f4a4 <lwip_netconn_do_delconn+0x1ac>)
 800f440:	f240 429e 	movw	r2, #1182	; 0x49e
 800f444:	491c      	ldr	r1, [pc, #112]	; (800f4b8 <lwip_netconn_do_delconn+0x1c0>)
 800f446:	4819      	ldr	r0, [pc, #100]	; (800f4ac <lwip_netconn_do_delconn+0x1b4>)
 800f448:	f00c fa0c 	bl	801b864 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800f44c:	e025      	b.n	800f49a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800f44e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	2200      	movs	r2, #0
 800f456:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d007      	beq.n	800f472 <lwip_netconn_do_delconn+0x17a>
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	6810      	ldr	r0, [r2, #0]
 800f46c:	2200      	movs	r2, #0
 800f46e:	2100      	movs	r1, #0
 800f470:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d007      	beq.n	800f48c <lwip_netconn_do_delconn+0x194>
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f482:	68fa      	ldr	r2, [r7, #12]
 800f484:	6810      	ldr	r0, [r2, #0]
 800f486:	2200      	movs	r2, #0
 800f488:	2102      	movs	r1, #2
 800f48a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	330c      	adds	r3, #12
 800f492:	4618      	mov	r0, r3
 800f494:	f00b ff5a 	bl	801b34c <sys_sem_valid>
 800f498:	e000      	b.n	800f49c <lwip_netconn_do_delconn+0x1a4>
          return;
 800f49a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800f49c:	3710      	adds	r7, #16
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	0801cf40 	.word	0x0801cf40
 800f4a8:	0801d2b0 	.word	0x0801d2b0
 800f4ac:	0801cf84 	.word	0x0801cf84
 800f4b0:	0801d2c4 	.word	0x0801d2c4
 800f4b4:	0801d2e4 	.word	0x0801d2e4
 800f4b8:	0801d300 	.word	0x0801d300
 800f4bc:	24015e14 	.word	0x24015e14

0800f4c0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b084      	sub	sp, #16
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d025      	beq.n	800f522 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f4e0:	2b10      	cmp	r3, #16
 800f4e2:	d00e      	beq.n	800f502 <lwip_netconn_do_bind+0x42>
 800f4e4:	2b20      	cmp	r3, #32
 800f4e6:	d119      	bne.n	800f51c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	6858      	ldr	r0, [r3, #4]
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	6899      	ldr	r1, [r3, #8]
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	899b      	ldrh	r3, [r3, #12]
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	f009 f9e2 	bl	80188c0 <udp_bind>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	73fb      	strb	r3, [r7, #15]
        break;
 800f500:	e011      	b.n	800f526 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	6858      	ldr	r0, [r3, #4]
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	6899      	ldr	r1, [r3, #8]
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	899b      	ldrh	r3, [r3, #12]
 800f510:	461a      	mov	r2, r3
 800f512:	f003 f93f 	bl	8012794 <tcp_bind>
 800f516:	4603      	mov	r3, r0
 800f518:	73fb      	strb	r3, [r7, #15]
        break;
 800f51a:	e004      	b.n	800f526 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800f51c:	23fa      	movs	r3, #250	; 0xfa
 800f51e:	73fb      	strb	r3, [r7, #15]
        break;
 800f520:	e001      	b.n	800f526 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800f522:	23fa      	movs	r3, #250	; 0xfa
 800f524:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	7bfa      	ldrb	r2, [r7, #15]
 800f52a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800f52c:	bf00      	nop
 800f52e:	3710      	adds	r7, #16
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b086      	sub	sp, #24
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	685b      	ldr	r3, [r3, #4]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d07f      	beq.n	800f64a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f554:	2b10      	cmp	r3, #16
 800f556:	d175      	bne.n	800f644 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	785b      	ldrb	r3, [r3, #1]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d165      	bne.n	800f62e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	7d1b      	ldrb	r3, [r3, #20]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d002      	beq.n	800f574 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800f56e:	23fa      	movs	r3, #250	; 0xfa
 800f570:	72fb      	strb	r3, [r7, #11]
 800f572:	e06c      	b.n	800f64e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800f574:	23ff      	movs	r3, #255	; 0xff
 800f576:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	685b      	ldr	r3, [r3, #4]
 800f57e:	f107 020b 	add.w	r2, r7, #11
 800f582:	7cf9      	ldrb	r1, [r7, #19]
 800f584:	4618      	mov	r0, r3
 800f586:	f003 f9bd 	bl	8012904 <tcp_listen_with_backlog_and_err>
 800f58a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d05d      	beq.n	800f64e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	3310      	adds	r3, #16
 800f598:	4618      	mov	r0, r3
 800f59a:	f00b fe49 	bl	801b230 <sys_mbox_valid>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d00b      	beq.n	800f5bc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	3310      	adds	r3, #16
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f00b fdcc 	bl	801b148 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	3310      	adds	r3, #16
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f00b fe4b 	bl	801b252 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	3314      	adds	r3, #20
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f00b fe32 	bl	801b230 <sys_mbox_valid>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d108      	bne.n	800f5e4 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800f5d2:	697b      	ldr	r3, [r7, #20]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	3314      	adds	r3, #20
 800f5d8:	2106      	movs	r1, #6
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f00b fd9a 	bl	801b114 <sys_mbox_new>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800f5e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d118      	bne.n	800f61e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	2202      	movs	r2, #2
 800f5f2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	68fa      	ldr	r2, [r7, #12]
 800f5fa:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	685a      	ldr	r2, [r3, #4]
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	4619      	mov	r1, r3
 800f608:	4610      	mov	r0, r2
 800f60a:	f004 f945 	bl	8013898 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	685b      	ldr	r3, [r3, #4]
 800f614:	4912      	ldr	r1, [pc, #72]	; (800f660 <lwip_netconn_do_listen+0x12c>)
 800f616:	4618      	mov	r0, r3
 800f618:	f004 f9b6 	bl	8013988 <tcp_accept>
 800f61c:	e017      	b.n	800f64e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800f61e:	68f8      	ldr	r0, [r7, #12]
 800f620:	f002 ff66 	bl	80124f0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	2200      	movs	r2, #0
 800f62a:	605a      	str	r2, [r3, #4]
 800f62c:	e00f      	b.n	800f64e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	785b      	ldrb	r3, [r3, #1]
 800f634:	2b02      	cmp	r3, #2
 800f636:	d102      	bne.n	800f63e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800f638:	2300      	movs	r3, #0
 800f63a:	72fb      	strb	r3, [r7, #11]
 800f63c:	e007      	b.n	800f64e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800f63e:	23f5      	movs	r3, #245	; 0xf5
 800f640:	72fb      	strb	r3, [r7, #11]
 800f642:	e004      	b.n	800f64e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800f644:	23f0      	movs	r3, #240	; 0xf0
 800f646:	72fb      	strb	r3, [r7, #11]
 800f648:	e001      	b.n	800f64e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800f64a:	23f5      	movs	r3, #245	; 0xf5
 800f64c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800f64e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800f656:	bf00      	nop
 800f658:	3718      	adds	r7, #24
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	0800eb41 	.word	0x0800eb41

0800f664 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b086      	sub	sp, #24
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	2200      	movs	r2, #0
 800f674:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	685b      	ldr	r3, [r3, #4]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d022      	beq.n	800f6c6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f680:	693b      	ldr	r3, [r7, #16]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f68a:	2b10      	cmp	r3, #16
 800f68c:	d11b      	bne.n	800f6c6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	689b      	ldr	r3, [r3, #8]
 800f692:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f69a:	d202      	bcs.n	800f6a2 <lwip_netconn_do_recv+0x3e>
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	b29b      	uxth	r3, r3
 800f6a0:	e001      	b.n	800f6a6 <lwip_netconn_do_recv+0x42>
 800f6a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6a6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	89fa      	ldrh	r2, [r7, #14]
 800f6b0:	4611      	mov	r1, r2
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f003 fa2a 	bl	8012b0c <tcp_recved>
        remaining -= recved;
 800f6b8:	89fb      	ldrh	r3, [r7, #14]
 800f6ba:	697a      	ldr	r2, [r7, #20]
 800f6bc:	1ad3      	subs	r3, r2, r3
 800f6be:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d1e6      	bne.n	800f694 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800f6c6:	bf00      	nop
 800f6c8:	3718      	adds	r7, #24
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
	...

0800f6d0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b088      	sub	sp, #32
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	460b      	mov	r3, r1
 800f6da:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d106      	bne.n	800f6f4 <lwip_netconn_do_writemore+0x24>
 800f6e6:	4b96      	ldr	r3, [pc, #600]	; (800f940 <lwip_netconn_do_writemore+0x270>)
 800f6e8:	f240 6273 	movw	r2, #1651	; 0x673
 800f6ec:	4995      	ldr	r1, [pc, #596]	; (800f944 <lwip_netconn_do_writemore+0x274>)
 800f6ee:	4896      	ldr	r0, [pc, #600]	; (800f948 <lwip_netconn_do_writemore+0x278>)
 800f6f0:	f00c f8b8 	bl	801b864 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	785b      	ldrb	r3, [r3, #1]
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	d006      	beq.n	800f70a <lwip_netconn_do_writemore+0x3a>
 800f6fc:	4b90      	ldr	r3, [pc, #576]	; (800f940 <lwip_netconn_do_writemore+0x270>)
 800f6fe:	f240 6274 	movw	r2, #1652	; 0x674
 800f702:	4992      	ldr	r1, [pc, #584]	; (800f94c <lwip_netconn_do_writemore+0x27c>)
 800f704:	4890      	ldr	r0, [pc, #576]	; (800f948 <lwip_netconn_do_writemore+0x278>)
 800f706:	f00c f8ad 	bl	801b864 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6a1b      	ldr	r3, [r3, #32]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d106      	bne.n	800f720 <lwip_netconn_do_writemore+0x50>
 800f712:	4b8b      	ldr	r3, [pc, #556]	; (800f940 <lwip_netconn_do_writemore+0x270>)
 800f714:	f240 6275 	movw	r2, #1653	; 0x675
 800f718:	498d      	ldr	r1, [pc, #564]	; (800f950 <lwip_netconn_do_writemore+0x280>)
 800f71a:	488b      	ldr	r0, [pc, #556]	; (800f948 <lwip_netconn_do_writemore+0x278>)
 800f71c:	f00c f8a2 	bl	801b864 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d106      	bne.n	800f736 <lwip_netconn_do_writemore+0x66>
 800f728:	4b85      	ldr	r3, [pc, #532]	; (800f940 <lwip_netconn_do_writemore+0x270>)
 800f72a:	f240 6276 	movw	r2, #1654	; 0x676
 800f72e:	4989      	ldr	r1, [pc, #548]	; (800f954 <lwip_netconn_do_writemore+0x284>)
 800f730:	4885      	ldr	r0, [pc, #532]	; (800f948 <lwip_netconn_do_writemore+0x278>)
 800f732:	f00c f897 	bl	801b864 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6a1b      	ldr	r3, [r3, #32]
 800f73a:	699a      	ldr	r2, [r3, #24]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6a1b      	ldr	r3, [r3, #32]
 800f740:	695b      	ldr	r3, [r3, #20]
 800f742:	429a      	cmp	r2, r3
 800f744:	d306      	bcc.n	800f754 <lwip_netconn_do_writemore+0x84>
 800f746:	4b7e      	ldr	r3, [pc, #504]	; (800f940 <lwip_netconn_do_writemore+0x270>)
 800f748:	f240 6277 	movw	r2, #1655	; 0x677
 800f74c:	4982      	ldr	r1, [pc, #520]	; (800f958 <lwip_netconn_do_writemore+0x288>)
 800f74e:	487e      	ldr	r0, [pc, #504]	; (800f948 <lwip_netconn_do_writemore+0x278>)
 800f750:	f00c f888 	bl	801b864 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6a1b      	ldr	r3, [r3, #32]
 800f758:	899b      	ldrh	r3, [r3, #12]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d106      	bne.n	800f76c <lwip_netconn_do_writemore+0x9c>
 800f75e:	4b78      	ldr	r3, [pc, #480]	; (800f940 <lwip_netconn_do_writemore+0x270>)
 800f760:	f240 6279 	movw	r2, #1657	; 0x679
 800f764:	497d      	ldr	r1, [pc, #500]	; (800f95c <lwip_netconn_do_writemore+0x28c>)
 800f766:	4878      	ldr	r0, [pc, #480]	; (800f948 <lwip_netconn_do_writemore+0x278>)
 800f768:	f00c f87c 	bl	801b864 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6a1b      	ldr	r3, [r3, #32]
 800f770:	7f1b      	ldrb	r3, [r3, #28]
 800f772:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	7f1b      	ldrb	r3, [r3, #28]
 800f778:	f003 0302 	and.w	r3, r3, #2
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d104      	bne.n	800f78a <lwip_netconn_do_writemore+0xba>
 800f780:	7ebb      	ldrb	r3, [r7, #26]
 800f782:	f003 0304 	and.w	r3, r3, #4
 800f786:	2b00      	cmp	r3, #0
 800f788:	d001      	beq.n	800f78e <lwip_netconn_do_writemore+0xbe>
 800f78a:	2301      	movs	r3, #1
 800f78c:	e000      	b.n	800f790 <lwip_netconn_do_writemore+0xc0>
 800f78e:	2300      	movs	r3, #0
 800f790:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6a1b      	ldr	r3, [r3, #32]
 800f796:	689b      	ldr	r3, [r3, #8]
 800f798:	681a      	ldr	r2, [r3, #0]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6a1b      	ldr	r3, [r3, #32]
 800f79e:	691b      	ldr	r3, [r3, #16]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6a1b      	ldr	r3, [r3, #32]
 800f7a8:	689b      	ldr	r3, [r3, #8]
 800f7aa:	685a      	ldr	r2, [r3, #4]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6a1b      	ldr	r3, [r3, #32]
 800f7b0:	691b      	ldr	r3, [r3, #16]
 800f7b2:	1ad3      	subs	r3, r2, r3
 800f7b4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800f7b6:	693b      	ldr	r3, [r7, #16]
 800f7b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7bc:	d307      	bcc.n	800f7ce <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800f7be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7c2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800f7c4:	7ebb      	ldrb	r3, [r7, #26]
 800f7c6:	f043 0302 	orr.w	r3, r3, #2
 800f7ca:	76bb      	strb	r3, [r7, #26]
 800f7cc:	e001      	b.n	800f7d2 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800f7ce:	693b      	ldr	r3, [r7, #16]
 800f7d0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f7da:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800f7dc:	89fa      	ldrh	r2, [r7, #14]
 800f7de:	8bbb      	ldrh	r3, [r7, #28]
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d216      	bcs.n	800f812 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800f7e4:	89fb      	ldrh	r3, [r7, #14]
 800f7e6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800f7e8:	7e3b      	ldrb	r3, [r7, #24]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d00d      	beq.n	800f80a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800f7ee:	8bbb      	ldrh	r3, [r7, #28]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d10e      	bne.n	800f812 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6a1b      	ldr	r3, [r3, #32]
 800f7f8:	699b      	ldr	r3, [r3, #24]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d102      	bne.n	800f804 <lwip_netconn_do_writemore+0x134>
 800f7fe:	f06f 0306 	mvn.w	r3, #6
 800f802:	e000      	b.n	800f806 <lwip_netconn_do_writemore+0x136>
 800f804:	2300      	movs	r3, #0
 800f806:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800f808:	e07d      	b.n	800f906 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800f80a:	7ebb      	ldrb	r3, [r7, #26]
 800f80c:	f043 0302 	orr.w	r3, r3, #2
 800f810:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6a1b      	ldr	r3, [r3, #32]
 800f816:	691a      	ldr	r2, [r3, #16]
 800f818:	8bbb      	ldrh	r3, [r7, #28]
 800f81a:	441a      	add	r2, r3
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6a1b      	ldr	r3, [r3, #32]
 800f820:	689b      	ldr	r3, [r3, #8]
 800f822:	685b      	ldr	r3, [r3, #4]
 800f824:	429a      	cmp	r2, r3
 800f826:	d906      	bls.n	800f836 <lwip_netconn_do_writemore+0x166>
 800f828:	4b45      	ldr	r3, [pc, #276]	; (800f940 <lwip_netconn_do_writemore+0x270>)
 800f82a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800f82e:	494c      	ldr	r1, [pc, #304]	; (800f960 <lwip_netconn_do_writemore+0x290>)
 800f830:	4845      	ldr	r0, [pc, #276]	; (800f948 <lwip_netconn_do_writemore+0x278>)
 800f832:	f00c f817 	bl	801b864 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800f836:	8bbb      	ldrh	r3, [r7, #28]
 800f838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d103      	bne.n	800f848 <lwip_netconn_do_writemore+0x178>
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f846:	d209      	bcs.n	800f85c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800f84c:	8bba      	ldrh	r2, [r7, #28]
 800f84e:	429a      	cmp	r2, r3
 800f850:	d10b      	bne.n	800f86a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6a1b      	ldr	r3, [r3, #32]
 800f856:	899b      	ldrh	r3, [r3, #12]
 800f858:	2b01      	cmp	r3, #1
 800f85a:	d906      	bls.n	800f86a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800f85c:	2301      	movs	r3, #1
 800f85e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800f860:	7ebb      	ldrb	r3, [r7, #26]
 800f862:	f043 0302 	orr.w	r3, r3, #2
 800f866:	76bb      	strb	r3, [r7, #26]
 800f868:	e001      	b.n	800f86e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800f86a:	2300      	movs	r3, #0
 800f86c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6858      	ldr	r0, [r3, #4]
 800f872:	7ebb      	ldrb	r3, [r7, #26]
 800f874:	8bba      	ldrh	r2, [r7, #28]
 800f876:	6979      	ldr	r1, [r7, #20]
 800f878:	f006 ff64 	bl	8016744 <tcp_write>
 800f87c:	4603      	mov	r3, r0
 800f87e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800f880:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d12c      	bne.n	800f8e2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6a1b      	ldr	r3, [r3, #32]
 800f88c:	6999      	ldr	r1, [r3, #24]
 800f88e:	8bba      	ldrh	r2, [r7, #28]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6a1b      	ldr	r3, [r3, #32]
 800f894:	440a      	add	r2, r1
 800f896:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6a1b      	ldr	r3, [r3, #32]
 800f89c:	6919      	ldr	r1, [r3, #16]
 800f89e:	8bba      	ldrh	r2, [r7, #28]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6a1b      	ldr	r3, [r3, #32]
 800f8a4:	440a      	add	r2, r1
 800f8a6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6a1b      	ldr	r3, [r3, #32]
 800f8ac:	691a      	ldr	r2, [r3, #16]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6a1b      	ldr	r3, [r3, #32]
 800f8b2:	689b      	ldr	r3, [r3, #8]
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d113      	bne.n	800f8e2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6a1b      	ldr	r3, [r3, #32]
 800f8be:	899a      	ldrh	r2, [r3, #12]
 800f8c0:	3a01      	subs	r2, #1
 800f8c2:	b292      	uxth	r2, r2
 800f8c4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6a1b      	ldr	r3, [r3, #32]
 800f8ca:	899b      	ldrh	r3, [r3, #12]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d008      	beq.n	800f8e2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6a1b      	ldr	r3, [r3, #32]
 800f8d4:	689a      	ldr	r2, [r3, #8]
 800f8d6:	3208      	adds	r2, #8
 800f8d8:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6a1b      	ldr	r3, [r3, #32]
 800f8de:	2200      	movs	r2, #0
 800f8e0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800f8e2:	7e7b      	ldrb	r3, [r7, #25]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d004      	beq.n	800f8f2 <lwip_netconn_do_writemore+0x222>
 800f8e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	f43f af50 	beq.w	800f792 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800f8f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d004      	beq.n	800f904 <lwip_netconn_do_writemore+0x234>
 800f8fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f902:	d146      	bne.n	800f992 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800f904:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800f906:	7e3b      	ldrb	r3, [r7, #24]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d02b      	beq.n	800f964 <lwip_netconn_do_writemore+0x294>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6a1b      	ldr	r3, [r3, #32]
 800f910:	699a      	ldr	r2, [r3, #24]
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6a1b      	ldr	r3, [r3, #32]
 800f916:	695b      	ldr	r3, [r3, #20]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d223      	bcs.n	800f964 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f920:	2b00      	cmp	r3, #0
 800f922:	d005      	beq.n	800f930 <lwip_netconn_do_writemore+0x260>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f928:	2200      	movs	r2, #0
 800f92a:	2103      	movs	r1, #3
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	7f1b      	ldrb	r3, [r3, #28]
 800f934:	f043 0310 	orr.w	r3, r3, #16
 800f938:	b2da      	uxtb	r2, r3
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	771a      	strb	r2, [r3, #28]
 800f93e:	e028      	b.n	800f992 <lwip_netconn_do_writemore+0x2c2>
 800f940:	0801cf40 	.word	0x0801cf40
 800f944:	0801d098 	.word	0x0801d098
 800f948:	0801cf84 	.word	0x0801cf84
 800f94c:	0801d3a0 	.word	0x0801d3a0
 800f950:	0801d0a8 	.word	0x0801d0a8
 800f954:	0801d3c0 	.word	0x0801d3c0
 800f958:	0801d3d8 	.word	0x0801d3d8
 800f95c:	0801d418 	.word	0x0801d418
 800f960:	0801d440 	.word	0x0801d440
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f96c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f970:	d305      	bcc.n	800f97e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800f97a:	2b04      	cmp	r3, #4
 800f97c:	d909      	bls.n	800f992 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f982:	2b00      	cmp	r3, #0
 800f984:	d005      	beq.n	800f992 <lwip_netconn_do_writemore+0x2c2>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f98a:	2200      	movs	r2, #0
 800f98c:	2103      	movs	r1, #3
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800f992:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d11d      	bne.n	800f9d6 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6a1b      	ldr	r3, [r3, #32]
 800f99e:	699a      	ldr	r2, [r3, #24]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6a1b      	ldr	r3, [r3, #32]
 800f9a4:	695b      	ldr	r3, [r3, #20]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d002      	beq.n	800f9b0 <lwip_netconn_do_writemore+0x2e0>
 800f9aa:	7e3b      	ldrb	r3, [r7, #24]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d001      	beq.n	800f9b4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	685b      	ldr	r3, [r3, #4]
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f007 fcad 	bl	8017318 <tcp_output>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800f9c2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800f9c6:	f113 0f04 	cmn.w	r3, #4
 800f9ca:	d12c      	bne.n	800fa26 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800f9cc:	7b3b      	ldrb	r3, [r7, #12]
 800f9ce:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	76fb      	strb	r3, [r7, #27]
 800f9d4:	e027      	b.n	800fa26 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800f9d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9de:	d120      	bne.n	800fa22 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f007 fc97 	bl	8017318 <tcp_output>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800f9ee:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800f9f2:	f113 0f04 	cmn.w	r3, #4
 800f9f6:	d104      	bne.n	800fa02 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800f9f8:	7b7b      	ldrb	r3, [r7, #13]
 800f9fa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800f9fc:	2301      	movs	r3, #1
 800f9fe:	76fb      	strb	r3, [r7, #27]
 800fa00:	e011      	b.n	800fa26 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800fa02:	7e3b      	ldrb	r3, [r7, #24]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d00e      	beq.n	800fa26 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6a1b      	ldr	r3, [r3, #32]
 800fa0c:	699b      	ldr	r3, [r3, #24]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d102      	bne.n	800fa18 <lwip_netconn_do_writemore+0x348>
 800fa12:	f06f 0306 	mvn.w	r3, #6
 800fa16:	e000      	b.n	800fa1a <lwip_netconn_do_writemore+0x34a>
 800fa18:	2300      	movs	r3, #0
 800fa1a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	76fb      	strb	r3, [r7, #27]
 800fa20:	e001      	b.n	800fa26 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800fa22:	2301      	movs	r3, #1
 800fa24:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800fa26:	7efb      	ldrb	r3, [r7, #27]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d015      	beq.n	800fa58 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6a1b      	ldr	r3, [r3, #32]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	330c      	adds	r3, #12
 800fa34:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6a1b      	ldr	r3, [r3, #32]
 800fa3a:	7ffa      	ldrb	r2, [r7, #31]
 800fa3c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2200      	movs	r2, #0
 800fa42:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2200      	movs	r2, #0
 800fa48:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800fa4a:	78fb      	ldrb	r3, [r7, #3]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d006      	beq.n	800fa5e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800fa50:	68b8      	ldr	r0, [r7, #8]
 800fa52:	f00b fc61 	bl	801b318 <sys_sem_signal>
 800fa56:	e002      	b.n	800fa5e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800fa58:	f04f 33ff 	mov.w	r3, #4294967295
 800fa5c:	e000      	b.n	800fa60 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800fa5e:	2300      	movs	r3, #0
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3720      	adds	r7, #32
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b084      	sub	sp, #16
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f7fe fd1c 	bl	800e4b6 <netconn_err>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800fa82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d166      	bne.n	800fb58 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa94:	2b10      	cmp	r3, #16
 800fa96:	d15d      	bne.n	800fb54 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	785b      	ldrb	r3, [r3, #1]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d002      	beq.n	800faa8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800faa2:	23fb      	movs	r3, #251	; 0xfb
 800faa4:	73fb      	strb	r3, [r7, #15]
 800faa6:	e057      	b.n	800fb58 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d04d      	beq.n	800fb4e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	2201      	movs	r2, #1
 800fab8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	6a1b      	ldr	r3, [r3, #32]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d006      	beq.n	800fad2 <lwip_netconn_do_write+0x6a>
 800fac4:	4b28      	ldr	r3, [pc, #160]	; (800fb68 <lwip_netconn_do_write+0x100>)
 800fac6:	f240 7223 	movw	r2, #1827	; 0x723
 800faca:	4928      	ldr	r1, [pc, #160]	; (800fb6c <lwip_netconn_do_write+0x104>)
 800facc:	4828      	ldr	r0, [pc, #160]	; (800fb70 <lwip_netconn_do_write+0x108>)
 800face:	f00b fec9 	bl	801b864 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	695b      	ldr	r3, [r3, #20]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d106      	bne.n	800fae8 <lwip_netconn_do_write+0x80>
 800fada:	4b23      	ldr	r3, [pc, #140]	; (800fb68 <lwip_netconn_do_write+0x100>)
 800fadc:	f240 7224 	movw	r2, #1828	; 0x724
 800fae0:	4924      	ldr	r1, [pc, #144]	; (800fb74 <lwip_netconn_do_write+0x10c>)
 800fae2:	4823      	ldr	r0, [pc, #140]	; (800fb70 <lwip_netconn_do_write+0x108>)
 800fae4:	f00b febe 	bl	801b864 <iprintf>
        msg->conn->current_msg = msg;
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	68ba      	ldr	r2, [r7, #8]
 800faee:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	2100      	movs	r1, #0
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7ff fdea 	bl	800f6d0 <lwip_netconn_do_writemore>
 800fafc:	4603      	mov	r3, r0
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d02e      	beq.n	800fb60 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	785b      	ldrb	r3, [r3, #1]
 800fb08:	2b01      	cmp	r3, #1
 800fb0a:	d006      	beq.n	800fb1a <lwip_netconn_do_write+0xb2>
 800fb0c:	4b16      	ldr	r3, [pc, #88]	; (800fb68 <lwip_netconn_do_write+0x100>)
 800fb0e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800fb12:	4919      	ldr	r1, [pc, #100]	; (800fb78 <lwip_netconn_do_write+0x110>)
 800fb14:	4816      	ldr	r0, [pc, #88]	; (800fb70 <lwip_netconn_do_write+0x108>)
 800fb16:	f00b fea5 	bl	801b864 <iprintf>
          UNLOCK_TCPIP_CORE();
 800fb1a:	4818      	ldr	r0, [pc, #96]	; (800fb7c <lwip_netconn_do_write+0x114>)
 800fb1c:	f00b fc65 	bl	801b3ea <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	330c      	adds	r3, #12
 800fb26:	2100      	movs	r1, #0
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f00b fbc4 	bl	801b2b6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800fb2e:	4813      	ldr	r0, [pc, #76]	; (800fb7c <lwip_netconn_do_write+0x114>)
 800fb30:	f00b fc4c 	bl	801b3cc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	785b      	ldrb	r3, [r3, #1]
 800fb3a:	2b01      	cmp	r3, #1
 800fb3c:	d110      	bne.n	800fb60 <lwip_netconn_do_write+0xf8>
 800fb3e:	4b0a      	ldr	r3, [pc, #40]	; (800fb68 <lwip_netconn_do_write+0x100>)
 800fb40:	f240 722c 	movw	r2, #1836	; 0x72c
 800fb44:	490c      	ldr	r1, [pc, #48]	; (800fb78 <lwip_netconn_do_write+0x110>)
 800fb46:	480a      	ldr	r0, [pc, #40]	; (800fb70 <lwip_netconn_do_write+0x108>)
 800fb48:	f00b fe8c 	bl	801b864 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800fb4c:	e008      	b.n	800fb60 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800fb4e:	23f5      	movs	r3, #245	; 0xf5
 800fb50:	73fb      	strb	r3, [r7, #15]
 800fb52:	e001      	b.n	800fb58 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800fb54:	23fa      	movs	r3, #250	; 0xfa
 800fb56:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	7bfa      	ldrb	r2, [r7, #15]
 800fb5c:	711a      	strb	r2, [r3, #4]
 800fb5e:	e000      	b.n	800fb62 <lwip_netconn_do_write+0xfa>
        return;
 800fb60:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800fb62:	3710      	adds	r7, #16
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	0801cf40 	.word	0x0801cf40
 800fb6c:	0801d2e4 	.word	0x0801d2e4
 800fb70:	0801cf84 	.word	0x0801cf84
 800fb74:	0801d46c 	.word	0x0801d46c
 800fb78:	0801d300 	.word	0x0801d300
 800fb7c:	24015e14 	.word	0x24015e14

0800fb80 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b084      	sub	sp, #16
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	785b      	ldrb	r3, [r3, #1]
 800fb92:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	685b      	ldr	r3, [r3, #4]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d069      	beq.n	800fc72 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800fba8:	2b10      	cmp	r3, #16
 800fbaa:	d162      	bne.n	800fc72 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800fbb0:	2b03      	cmp	r3, #3
 800fbb2:	d002      	beq.n	800fbba <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800fbb4:	7afb      	ldrb	r3, [r7, #11]
 800fbb6:	2b02      	cmp	r3, #2
 800fbb8:	d05b      	beq.n	800fc72 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800fbba:	7afb      	ldrb	r3, [r7, #11]
 800fbbc:	2b03      	cmp	r3, #3
 800fbbe:	d103      	bne.n	800fbc8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	22f5      	movs	r2, #245	; 0xf5
 800fbc4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800fbc6:	e059      	b.n	800fc7c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800fbc8:	7afb      	ldrb	r3, [r7, #11]
 800fbca:	2b01      	cmp	r3, #1
 800fbcc:	d103      	bne.n	800fbd6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	22fb      	movs	r2, #251	; 0xfb
 800fbd2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800fbd4:	e052      	b.n	800fc7c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	7a1b      	ldrb	r3, [r3, #8]
 800fbda:	f003 0301 	and.w	r3, r3, #1
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d004      	beq.n	800fbec <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7ff f99e 	bl	800ef28 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	6a1b      	ldr	r3, [r3, #32]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d006      	beq.n	800fc04 <lwip_netconn_do_close+0x84>
 800fbf6:	4b23      	ldr	r3, [pc, #140]	; (800fc84 <lwip_netconn_do_close+0x104>)
 800fbf8:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800fbfc:	4922      	ldr	r1, [pc, #136]	; (800fc88 <lwip_netconn_do_close+0x108>)
 800fbfe:	4823      	ldr	r0, [pc, #140]	; (800fc8c <lwip_netconn_do_close+0x10c>)
 800fc00:	f00b fe30 	bl	801b864 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	2204      	movs	r2, #4
 800fc0a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	68fa      	ldr	r2, [r7, #12]
 800fc12:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	2100      	movs	r1, #0
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7ff fa02 	bl	800f024 <lwip_netconn_do_close_internal>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d029      	beq.n	800fc7a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	785b      	ldrb	r3, [r3, #1]
 800fc2c:	2b04      	cmp	r3, #4
 800fc2e:	d006      	beq.n	800fc3e <lwip_netconn_do_close+0xbe>
 800fc30:	4b14      	ldr	r3, [pc, #80]	; (800fc84 <lwip_netconn_do_close+0x104>)
 800fc32:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800fc36:	4916      	ldr	r1, [pc, #88]	; (800fc90 <lwip_netconn_do_close+0x110>)
 800fc38:	4814      	ldr	r0, [pc, #80]	; (800fc8c <lwip_netconn_do_close+0x10c>)
 800fc3a:	f00b fe13 	bl	801b864 <iprintf>
        UNLOCK_TCPIP_CORE();
 800fc3e:	4815      	ldr	r0, [pc, #84]	; (800fc94 <lwip_netconn_do_close+0x114>)
 800fc40:	f00b fbd3 	bl	801b3ea <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	330c      	adds	r3, #12
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f00b fb32 	bl	801b2b6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800fc52:	4810      	ldr	r0, [pc, #64]	; (800fc94 <lwip_netconn_do_close+0x114>)
 800fc54:	f00b fbba 	bl	801b3cc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	785b      	ldrb	r3, [r3, #1]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d00b      	beq.n	800fc7a <lwip_netconn_do_close+0xfa>
 800fc62:	4b08      	ldr	r3, [pc, #32]	; (800fc84 <lwip_netconn_do_close+0x104>)
 800fc64:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800fc68:	4909      	ldr	r1, [pc, #36]	; (800fc90 <lwip_netconn_do_close+0x110>)
 800fc6a:	4808      	ldr	r0, [pc, #32]	; (800fc8c <lwip_netconn_do_close+0x10c>)
 800fc6c:	f00b fdfa 	bl	801b864 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800fc70:	e003      	b.n	800fc7a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	22f5      	movs	r2, #245	; 0xf5
 800fc76:	711a      	strb	r2, [r3, #4]
 800fc78:	e000      	b.n	800fc7c <lwip_netconn_do_close+0xfc>
      return;
 800fc7a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800fc7c:	3710      	adds	r7, #16
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}
 800fc82:	bf00      	nop
 800fc84:	0801cf40 	.word	0x0801cf40
 800fc88:	0801d2e4 	.word	0x0801d2e4
 800fc8c:	0801cf84 	.word	0x0801cf84
 800fc90:	0801d300 	.word	0x0801d300
 800fc94:	24015e14 	.word	0x24015e14

0800fc98 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d013      	beq.n	800fcce <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d00b      	beq.n	800fcc6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f001 ff72 	bl	8011b9c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	605a      	str	r2, [r3, #4]
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	685a      	ldr	r2, [r3, #4]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800fcc6:	6879      	ldr	r1, [r7, #4]
 800fcc8:	2006      	movs	r0, #6
 800fcca:	f001 f8bf 	bl	8010e4c <memp_free>
  }
}
 800fcce:	bf00      	nop
 800fcd0:	3708      	adds	r7, #8
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
	...

0800fcd8 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d108      	bne.n	800fcf8 <netbuf_next+0x20>
 800fce6:	4b11      	ldr	r3, [pc, #68]	; (800fd2c <netbuf_next+0x54>)
 800fce8:	22e0      	movs	r2, #224	; 0xe0
 800fcea:	4911      	ldr	r1, [pc, #68]	; (800fd30 <netbuf_next+0x58>)
 800fcec:	4811      	ldr	r0, [pc, #68]	; (800fd34 <netbuf_next+0x5c>)
 800fcee:	f00b fdb9 	bl	801b864 <iprintf>
 800fcf2:	f04f 33ff 	mov.w	r3, #4294967295
 800fcf6:	e014      	b.n	800fd22 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d102      	bne.n	800fd08 <netbuf_next+0x30>
    return -1;
 800fd02:	f04f 33ff 	mov.w	r3, #4294967295
 800fd06:	e00c      	b.n	800fd22 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	685b      	ldr	r3, [r3, #4]
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	685b      	ldr	r3, [r3, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d101      	bne.n	800fd20 <netbuf_next+0x48>
    return 1;
 800fd1c:	2301      	movs	r3, #1
 800fd1e:	e000      	b.n	800fd22 <netbuf_next+0x4a>
  }
  return 0;
 800fd20:	2300      	movs	r3, #0
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	3708      	adds	r7, #8
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
 800fd2a:	bf00      	nop
 800fd2c:	0801d498 	.word	0x0801d498
 800fd30:	0801d5f8 	.word	0x0801d5f8
 800fd34:	0801d4e8 	.word	0x0801d4e8

0800fd38 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b084      	sub	sp, #16
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800fd42:	f008 fbc3 	bl	80184cc <sys_timeouts_sleeptime>
 800fd46:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd4e:	d10b      	bne.n	800fd68 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800fd50:	4813      	ldr	r0, [pc, #76]	; (800fda0 <tcpip_timeouts_mbox_fetch+0x68>)
 800fd52:	f00b fb4a 	bl	801b3ea <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800fd56:	2200      	movs	r2, #0
 800fd58:	6839      	ldr	r1, [r7, #0]
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f00b fa20 	bl	801b1a0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800fd60:	480f      	ldr	r0, [pc, #60]	; (800fda0 <tcpip_timeouts_mbox_fetch+0x68>)
 800fd62:	f00b fb33 	bl	801b3cc <sys_mutex_lock>
    return;
 800fd66:	e018      	b.n	800fd9a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d102      	bne.n	800fd74 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800fd6e:	f008 fb73 	bl	8018458 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800fd72:	e7e6      	b.n	800fd42 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800fd74:	480a      	ldr	r0, [pc, #40]	; (800fda0 <tcpip_timeouts_mbox_fetch+0x68>)
 800fd76:	f00b fb38 	bl	801b3ea <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800fd7a:	68fa      	ldr	r2, [r7, #12]
 800fd7c:	6839      	ldr	r1, [r7, #0]
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f00b fa0e 	bl	801b1a0 <sys_arch_mbox_fetch>
 800fd84:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800fd86:	4806      	ldr	r0, [pc, #24]	; (800fda0 <tcpip_timeouts_mbox_fetch+0x68>)
 800fd88:	f00b fb20 	bl	801b3cc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd92:	d102      	bne.n	800fd9a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800fd94:	f008 fb60 	bl	8018458 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800fd98:	e7d3      	b.n	800fd42 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800fd9a:	3710      	adds	r7, #16
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	24015e14 	.word	0x24015e14

0800fda4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800fdac:	4810      	ldr	r0, [pc, #64]	; (800fdf0 <tcpip_thread+0x4c>)
 800fdae:	f00b fb0d 	bl	801b3cc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800fdb2:	4b10      	ldr	r3, [pc, #64]	; (800fdf4 <tcpip_thread+0x50>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d005      	beq.n	800fdc6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800fdba:	4b0e      	ldr	r3, [pc, #56]	; (800fdf4 <tcpip_thread+0x50>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	4a0e      	ldr	r2, [pc, #56]	; (800fdf8 <tcpip_thread+0x54>)
 800fdc0:	6812      	ldr	r2, [r2, #0]
 800fdc2:	4610      	mov	r0, r2
 800fdc4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800fdc6:	f107 030c 	add.w	r3, r7, #12
 800fdca:	4619      	mov	r1, r3
 800fdcc:	480b      	ldr	r0, [pc, #44]	; (800fdfc <tcpip_thread+0x58>)
 800fdce:	f7ff ffb3 	bl	800fd38 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d106      	bne.n	800fde6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800fdd8:	4b09      	ldr	r3, [pc, #36]	; (800fe00 <tcpip_thread+0x5c>)
 800fdda:	2291      	movs	r2, #145	; 0x91
 800fddc:	4909      	ldr	r1, [pc, #36]	; (800fe04 <tcpip_thread+0x60>)
 800fdde:	480a      	ldr	r0, [pc, #40]	; (800fe08 <tcpip_thread+0x64>)
 800fde0:	f00b fd40 	bl	801b864 <iprintf>
      continue;
 800fde4:	e003      	b.n	800fdee <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f000 f80f 	bl	800fe0c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800fdee:	e7ea      	b.n	800fdc6 <tcpip_thread+0x22>
 800fdf0:	24015e14 	.word	0x24015e14
 800fdf4:	24015e08 	.word	0x24015e08
 800fdf8:	24015e0c 	.word	0x24015e0c
 800fdfc:	24015e10 	.word	0x24015e10
 800fe00:	0801d630 	.word	0x0801d630
 800fe04:	0801d660 	.word	0x0801d660
 800fe08:	0801d680 	.word	0x0801d680

0800fe0c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	781b      	ldrb	r3, [r3, #0]
 800fe18:	2b02      	cmp	r3, #2
 800fe1a:	d026      	beq.n	800fe6a <tcpip_thread_handle_msg+0x5e>
 800fe1c:	2b02      	cmp	r3, #2
 800fe1e:	dc2b      	bgt.n	800fe78 <tcpip_thread_handle_msg+0x6c>
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d002      	beq.n	800fe2a <tcpip_thread_handle_msg+0x1e>
 800fe24:	2b01      	cmp	r3, #1
 800fe26:	d015      	beq.n	800fe54 <tcpip_thread_handle_msg+0x48>
 800fe28:	e026      	b.n	800fe78 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	6850      	ldr	r0, [r2, #4]
 800fe32:	687a      	ldr	r2, [r7, #4]
 800fe34:	6892      	ldr	r2, [r2, #8]
 800fe36:	4611      	mov	r1, r2
 800fe38:	4798      	blx	r3
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d004      	beq.n	800fe4a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	4618      	mov	r0, r3
 800fe46:	f001 fea9 	bl	8011b9c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800fe4a:	6879      	ldr	r1, [r7, #4]
 800fe4c:	2009      	movs	r0, #9
 800fe4e:	f000 fffd 	bl	8010e4c <memp_free>
      break;
 800fe52:	e018      	b.n	800fe86 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	687a      	ldr	r2, [r7, #4]
 800fe5a:	6892      	ldr	r2, [r2, #8]
 800fe5c:	4610      	mov	r0, r2
 800fe5e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800fe60:	6879      	ldr	r1, [r7, #4]
 800fe62:	2008      	movs	r0, #8
 800fe64:	f000 fff2 	bl	8010e4c <memp_free>
      break;
 800fe68:	e00d      	b.n	800fe86 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	685b      	ldr	r3, [r3, #4]
 800fe6e:	687a      	ldr	r2, [r7, #4]
 800fe70:	6892      	ldr	r2, [r2, #8]
 800fe72:	4610      	mov	r0, r2
 800fe74:	4798      	blx	r3
      break;
 800fe76:	e006      	b.n	800fe86 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800fe78:	4b05      	ldr	r3, [pc, #20]	; (800fe90 <tcpip_thread_handle_msg+0x84>)
 800fe7a:	22cf      	movs	r2, #207	; 0xcf
 800fe7c:	4905      	ldr	r1, [pc, #20]	; (800fe94 <tcpip_thread_handle_msg+0x88>)
 800fe7e:	4806      	ldr	r0, [pc, #24]	; (800fe98 <tcpip_thread_handle_msg+0x8c>)
 800fe80:	f00b fcf0 	bl	801b864 <iprintf>
      break;
 800fe84:	bf00      	nop
  }
}
 800fe86:	bf00      	nop
 800fe88:	3708      	adds	r7, #8
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
 800fe8e:	bf00      	nop
 800fe90:	0801d630 	.word	0x0801d630
 800fe94:	0801d660 	.word	0x0801d660
 800fe98:	0801d680 	.word	0x0801d680

0800fe9c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b086      	sub	sp, #24
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800fea8:	481a      	ldr	r0, [pc, #104]	; (800ff14 <tcpip_inpkt+0x78>)
 800feaa:	f00b f9c1 	bl	801b230 <sys_mbox_valid>
 800feae:	4603      	mov	r3, r0
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d105      	bne.n	800fec0 <tcpip_inpkt+0x24>
 800feb4:	4b18      	ldr	r3, [pc, #96]	; (800ff18 <tcpip_inpkt+0x7c>)
 800feb6:	22fc      	movs	r2, #252	; 0xfc
 800feb8:	4918      	ldr	r1, [pc, #96]	; (800ff1c <tcpip_inpkt+0x80>)
 800feba:	4819      	ldr	r0, [pc, #100]	; (800ff20 <tcpip_inpkt+0x84>)
 800febc:	f00b fcd2 	bl	801b864 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800fec0:	2009      	movs	r0, #9
 800fec2:	f000 ff4d 	bl	8010d60 <memp_malloc>
 800fec6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d102      	bne.n	800fed4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800fece:	f04f 33ff 	mov.w	r3, #4294967295
 800fed2:	e01a      	b.n	800ff0a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	2200      	movs	r2, #0
 800fed8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	68fa      	ldr	r2, [r7, #12]
 800fede:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	68ba      	ldr	r2, [r7, #8]
 800fee4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	687a      	ldr	r2, [r7, #4]
 800feea:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800feec:	6979      	ldr	r1, [r7, #20]
 800feee:	4809      	ldr	r0, [pc, #36]	; (800ff14 <tcpip_inpkt+0x78>)
 800fef0:	f00b f93c 	bl	801b16c <sys_mbox_trypost>
 800fef4:	4603      	mov	r3, r0
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d006      	beq.n	800ff08 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800fefa:	6979      	ldr	r1, [r7, #20]
 800fefc:	2009      	movs	r0, #9
 800fefe:	f000 ffa5 	bl	8010e4c <memp_free>
    return ERR_MEM;
 800ff02:	f04f 33ff 	mov.w	r3, #4294967295
 800ff06:	e000      	b.n	800ff0a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ff08:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3718      	adds	r7, #24
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}
 800ff12:	bf00      	nop
 800ff14:	24015e10 	.word	0x24015e10
 800ff18:	0801d630 	.word	0x0801d630
 800ff1c:	0801d6a8 	.word	0x0801d6a8
 800ff20:	0801d680 	.word	0x0801d680

0800ff24 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
 800ff2c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff34:	f003 0318 	and.w	r3, r3, #24
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d006      	beq.n	800ff4a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ff3c:	4a08      	ldr	r2, [pc, #32]	; (800ff60 <tcpip_input+0x3c>)
 800ff3e:	6839      	ldr	r1, [r7, #0]
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f7ff ffab 	bl	800fe9c <tcpip_inpkt>
 800ff46:	4603      	mov	r3, r0
 800ff48:	e005      	b.n	800ff56 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ff4a:	4a06      	ldr	r2, [pc, #24]	; (800ff64 <tcpip_input+0x40>)
 800ff4c:	6839      	ldr	r1, [r7, #0]
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f7ff ffa4 	bl	800fe9c <tcpip_inpkt>
 800ff54:	4603      	mov	r3, r0
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3708      	adds	r7, #8
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	0801af69 	.word	0x0801af69
 800ff64:	08019e71 	.word	0x08019e71

0800ff68 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ff72:	4819      	ldr	r0, [pc, #100]	; (800ffd8 <tcpip_try_callback+0x70>)
 800ff74:	f00b f95c 	bl	801b230 <sys_mbox_valid>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d106      	bne.n	800ff8c <tcpip_try_callback+0x24>
 800ff7e:	4b17      	ldr	r3, [pc, #92]	; (800ffdc <tcpip_try_callback+0x74>)
 800ff80:	f240 125d 	movw	r2, #349	; 0x15d
 800ff84:	4916      	ldr	r1, [pc, #88]	; (800ffe0 <tcpip_try_callback+0x78>)
 800ff86:	4817      	ldr	r0, [pc, #92]	; (800ffe4 <tcpip_try_callback+0x7c>)
 800ff88:	f00b fc6c 	bl	801b864 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ff8c:	2008      	movs	r0, #8
 800ff8e:	f000 fee7 	bl	8010d60 <memp_malloc>
 800ff92:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d102      	bne.n	800ffa0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ff9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ff9e:	e017      	b.n	800ffd0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	683a      	ldr	r2, [r7, #0]
 800ffb0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ffb2:	68f9      	ldr	r1, [r7, #12]
 800ffb4:	4808      	ldr	r0, [pc, #32]	; (800ffd8 <tcpip_try_callback+0x70>)
 800ffb6:	f00b f8d9 	bl	801b16c <sys_mbox_trypost>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d006      	beq.n	800ffce <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ffc0:	68f9      	ldr	r1, [r7, #12]
 800ffc2:	2008      	movs	r0, #8
 800ffc4:	f000 ff42 	bl	8010e4c <memp_free>
    return ERR_MEM;
 800ffc8:	f04f 33ff 	mov.w	r3, #4294967295
 800ffcc:	e000      	b.n	800ffd0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ffce:	2300      	movs	r3, #0
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3710      	adds	r7, #16
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}
 800ffd8:	24015e10 	.word	0x24015e10
 800ffdc:	0801d630 	.word	0x0801d630
 800ffe0:	0801d6a8 	.word	0x0801d6a8
 800ffe4:	0801d680 	.word	0x0801d680

0800ffe8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b084      	sub	sp, #16
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	60f8      	str	r0, [r7, #12]
 800fff0:	60b9      	str	r1, [r7, #8]
 800fff2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800fff4:	4806      	ldr	r0, [pc, #24]	; (8010010 <tcpip_send_msg_wait_sem+0x28>)
 800fff6:	f00b f9e9 	bl	801b3cc <sys_mutex_lock>
  fn(apimsg);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	68b8      	ldr	r0, [r7, #8]
 800fffe:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8010000:	4803      	ldr	r0, [pc, #12]	; (8010010 <tcpip_send_msg_wait_sem+0x28>)
 8010002:	f00b f9f2 	bl	801b3ea <sys_mutex_unlock>
  return ERR_OK;
 8010006:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8010008:	4618      	mov	r0, r3
 801000a:	3710      	adds	r7, #16
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}
 8010010:	24015e14 	.word	0x24015e14

08010014 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b084      	sub	sp, #16
 8010018:	af02      	add	r7, sp, #8
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	6039      	str	r1, [r7, #0]
  lwip_init();
 801001e:	f000 f9ea 	bl	80103f6 <lwip_init>

  tcpip_init_done = initfunc;
 8010022:	4a17      	ldr	r2, [pc, #92]	; (8010080 <tcpip_init+0x6c>)
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010028:	4a16      	ldr	r2, [pc, #88]	; (8010084 <tcpip_init+0x70>)
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801002e:	2106      	movs	r1, #6
 8010030:	4815      	ldr	r0, [pc, #84]	; (8010088 <tcpip_init+0x74>)
 8010032:	f00b f86f 	bl	801b114 <sys_mbox_new>
 8010036:	4603      	mov	r3, r0
 8010038:	2b00      	cmp	r3, #0
 801003a:	d006      	beq.n	801004a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801003c:	4b13      	ldr	r3, [pc, #76]	; (801008c <tcpip_init+0x78>)
 801003e:	f240 2261 	movw	r2, #609	; 0x261
 8010042:	4913      	ldr	r1, [pc, #76]	; (8010090 <tcpip_init+0x7c>)
 8010044:	4813      	ldr	r0, [pc, #76]	; (8010094 <tcpip_init+0x80>)
 8010046:	f00b fc0d 	bl	801b864 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801004a:	4813      	ldr	r0, [pc, #76]	; (8010098 <tcpip_init+0x84>)
 801004c:	f00b f9a8 	bl	801b3a0 <sys_mutex_new>
 8010050:	4603      	mov	r3, r0
 8010052:	2b00      	cmp	r3, #0
 8010054:	d006      	beq.n	8010064 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8010056:	4b0d      	ldr	r3, [pc, #52]	; (801008c <tcpip_init+0x78>)
 8010058:	f240 2265 	movw	r2, #613	; 0x265
 801005c:	490f      	ldr	r1, [pc, #60]	; (801009c <tcpip_init+0x88>)
 801005e:	480d      	ldr	r0, [pc, #52]	; (8010094 <tcpip_init+0x80>)
 8010060:	f00b fc00 	bl	801b864 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010064:	2318      	movs	r3, #24
 8010066:	9300      	str	r3, [sp, #0]
 8010068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801006c:	2200      	movs	r2, #0
 801006e:	490c      	ldr	r1, [pc, #48]	; (80100a0 <tcpip_init+0x8c>)
 8010070:	480c      	ldr	r0, [pc, #48]	; (80100a4 <tcpip_init+0x90>)
 8010072:	f00b f9c7 	bl	801b404 <sys_thread_new>
}
 8010076:	bf00      	nop
 8010078:	3708      	adds	r7, #8
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	24015e08 	.word	0x24015e08
 8010084:	24015e0c 	.word	0x24015e0c
 8010088:	24015e10 	.word	0x24015e10
 801008c:	0801d630 	.word	0x0801d630
 8010090:	0801d6b8 	.word	0x0801d6b8
 8010094:	0801d680 	.word	0x0801d680
 8010098:	24015e14 	.word	0x24015e14
 801009c:	0801d6dc 	.word	0x0801d6dc
 80100a0:	0800fda5 	.word	0x0800fda5
 80100a4:	0801d700 	.word	0x0801d700

080100a8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80100a8:	b480      	push	{r7}
 80100aa:	b083      	sub	sp, #12
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	4603      	mov	r3, r0
 80100b0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80100b2:	88fb      	ldrh	r3, [r7, #6]
 80100b4:	021b      	lsls	r3, r3, #8
 80100b6:	b21a      	sxth	r2, r3
 80100b8:	88fb      	ldrh	r3, [r7, #6]
 80100ba:	0a1b      	lsrs	r3, r3, #8
 80100bc:	b29b      	uxth	r3, r3
 80100be:	b21b      	sxth	r3, r3
 80100c0:	4313      	orrs	r3, r2
 80100c2:	b21b      	sxth	r3, r3
 80100c4:	b29b      	uxth	r3, r3
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	370c      	adds	r7, #12
 80100ca:	46bd      	mov	sp, r7
 80100cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d0:	4770      	bx	lr

080100d2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80100d2:	b480      	push	{r7}
 80100d4:	b083      	sub	sp, #12
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	061a      	lsls	r2, r3, #24
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	021b      	lsls	r3, r3, #8
 80100e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80100e6:	431a      	orrs	r2, r3
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	0a1b      	lsrs	r3, r3, #8
 80100ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80100f0:	431a      	orrs	r2, r3
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	0e1b      	lsrs	r3, r3, #24
 80100f6:	4313      	orrs	r3, r2
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	370c      	adds	r7, #12
 80100fc:	46bd      	mov	sp, r7
 80100fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010102:	4770      	bx	lr

08010104 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8010104:	b480      	push	{r7}
 8010106:	b089      	sub	sp, #36	; 0x24
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8010112:	2300      	movs	r3, #0
 8010114:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8010116:	2300      	movs	r3, #0
 8010118:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 801011a:	69fb      	ldr	r3, [r7, #28]
 801011c:	f003 0301 	and.w	r3, r3, #1
 8010120:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d00d      	beq.n	8010144 <lwip_standard_chksum+0x40>
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	dd0a      	ble.n	8010144 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 801012e:	69fa      	ldr	r2, [r7, #28]
 8010130:	1c53      	adds	r3, r2, #1
 8010132:	61fb      	str	r3, [r7, #28]
 8010134:	f107 030e 	add.w	r3, r7, #14
 8010138:	3301      	adds	r3, #1
 801013a:	7812      	ldrb	r2, [r2, #0]
 801013c:	701a      	strb	r2, [r3, #0]
    len--;
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	3b01      	subs	r3, #1
 8010142:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8010144:	69fb      	ldr	r3, [r7, #28]
 8010146:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8010148:	e00a      	b.n	8010160 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 801014a:	69bb      	ldr	r3, [r7, #24]
 801014c:	1c9a      	adds	r2, r3, #2
 801014e:	61ba      	str	r2, [r7, #24]
 8010150:	881b      	ldrh	r3, [r3, #0]
 8010152:	461a      	mov	r2, r3
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	4413      	add	r3, r2
 8010158:	617b      	str	r3, [r7, #20]
    len -= 2;
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	3b02      	subs	r3, #2
 801015e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	2b01      	cmp	r3, #1
 8010164:	dcf1      	bgt.n	801014a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	2b00      	cmp	r3, #0
 801016a:	dd04      	ble.n	8010176 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 801016c:	f107 030e 	add.w	r3, r7, #14
 8010170:	69ba      	ldr	r2, [r7, #24]
 8010172:	7812      	ldrb	r2, [r2, #0]
 8010174:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8010176:	89fb      	ldrh	r3, [r7, #14]
 8010178:	461a      	mov	r2, r3
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	4413      	add	r3, r2
 801017e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	0c1a      	lsrs	r2, r3, #16
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	b29b      	uxth	r3, r3
 8010188:	4413      	add	r3, r2
 801018a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	0c1a      	lsrs	r2, r3, #16
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	b29b      	uxth	r3, r3
 8010194:	4413      	add	r3, r2
 8010196:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d007      	beq.n	80101ae <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	021b      	lsls	r3, r3, #8
 80101a2:	b29a      	uxth	r2, r3
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	0a1b      	lsrs	r3, r3, #8
 80101a8:	b2db      	uxtb	r3, r3
 80101aa:	4313      	orrs	r3, r2
 80101ac:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	b29b      	uxth	r3, r3
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3724      	adds	r7, #36	; 0x24
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr

080101be <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 80101be:	b580      	push	{r7, lr}
 80101c0:	b086      	sub	sp, #24
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	60f8      	str	r0, [r7, #12]
 80101c6:	607b      	str	r3, [r7, #4]
 80101c8:	460b      	mov	r3, r1
 80101ca:	72fb      	strb	r3, [r7, #11]
 80101cc:	4613      	mov	r3, r2
 80101ce:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 80101d0:	2300      	movs	r3, #0
 80101d2:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	617b      	str	r3, [r7, #20]
 80101d8:	e02b      	b.n	8010232 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 80101da:	697b      	ldr	r3, [r7, #20]
 80101dc:	685a      	ldr	r2, [r3, #4]
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	895b      	ldrh	r3, [r3, #10]
 80101e2:	4619      	mov	r1, r3
 80101e4:	4610      	mov	r0, r2
 80101e6:	f7ff ff8d 	bl	8010104 <lwip_standard_chksum>
 80101ea:	4603      	mov	r3, r0
 80101ec:	461a      	mov	r2, r3
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	4413      	add	r3, r2
 80101f2:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	0c1a      	lsrs	r2, r3, #16
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	b29b      	uxth	r3, r3
 80101fc:	4413      	add	r3, r2
 80101fe:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	895b      	ldrh	r3, [r3, #10]
 8010204:	f003 0301 	and.w	r3, r3, #1
 8010208:	b29b      	uxth	r3, r3
 801020a:	2b00      	cmp	r3, #0
 801020c:	d00e      	beq.n	801022c <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	2b00      	cmp	r3, #0
 8010212:	bf0c      	ite	eq
 8010214:	2301      	moveq	r3, #1
 8010216:	2300      	movne	r3, #0
 8010218:	b2db      	uxtb	r3, r3
 801021a:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	021b      	lsls	r3, r3, #8
 8010220:	b29a      	uxth	r2, r3
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	0a1b      	lsrs	r3, r3, #8
 8010226:	b2db      	uxtb	r3, r3
 8010228:	4313      	orrs	r3, r2
 801022a:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	617b      	str	r3, [r7, #20]
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d1d0      	bne.n	80101da <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d007      	beq.n	801024e <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	021b      	lsls	r3, r3, #8
 8010242:	b29a      	uxth	r2, r3
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	0a1b      	lsrs	r3, r3, #8
 8010248:	b2db      	uxtb	r3, r3
 801024a:	4313      	orrs	r3, r2
 801024c:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 801024e:	7afb      	ldrb	r3, [r7, #11]
 8010250:	b29b      	uxth	r3, r3
 8010252:	4618      	mov	r0, r3
 8010254:	f7ff ff28 	bl	80100a8 <lwip_htons>
 8010258:	4603      	mov	r3, r0
 801025a:	461a      	mov	r2, r3
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	4413      	add	r3, r2
 8010260:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8010262:	893b      	ldrh	r3, [r7, #8]
 8010264:	4618      	mov	r0, r3
 8010266:	f7ff ff1f 	bl	80100a8 <lwip_htons>
 801026a:	4603      	mov	r3, r0
 801026c:	461a      	mov	r2, r3
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	4413      	add	r3, r2
 8010272:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	0c1a      	lsrs	r2, r3, #16
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	b29b      	uxth	r3, r3
 801027c:	4413      	add	r3, r2
 801027e:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	0c1a      	lsrs	r2, r3, #16
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	b29b      	uxth	r3, r3
 8010288:	4413      	add	r3, r2
 801028a:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	b29b      	uxth	r3, r3
 8010290:	43db      	mvns	r3, r3
 8010292:	b29b      	uxth	r3, r3
}
 8010294:	4618      	mov	r0, r3
 8010296:	3718      	adds	r7, #24
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}

0801029c <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b086      	sub	sp, #24
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	60f8      	str	r0, [r7, #12]
 80102a4:	607b      	str	r3, [r7, #4]
 80102a6:	460b      	mov	r3, r1
 80102a8:	72fb      	strb	r3, [r7, #11]
 80102aa:	4613      	mov	r3, r2
 80102ac:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	b29b      	uxth	r3, r3
 80102b8:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	0c1b      	lsrs	r3, r3, #16
 80102be:	693a      	ldr	r2, [r7, #16]
 80102c0:	4413      	add	r3, r2
 80102c2:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 80102c4:	6a3b      	ldr	r3, [r7, #32]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	693a      	ldr	r2, [r7, #16]
 80102d0:	4413      	add	r3, r2
 80102d2:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	0c1b      	lsrs	r3, r3, #16
 80102d8:	693a      	ldr	r2, [r7, #16]
 80102da:	4413      	add	r3, r2
 80102dc:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	0c1a      	lsrs	r2, r3, #16
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	b29b      	uxth	r3, r3
 80102e6:	4413      	add	r3, r2
 80102e8:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	0c1a      	lsrs	r2, r3, #16
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	b29b      	uxth	r3, r3
 80102f2:	4413      	add	r3, r2
 80102f4:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 80102f6:	893a      	ldrh	r2, [r7, #8]
 80102f8:	7af9      	ldrb	r1, [r7, #11]
 80102fa:	693b      	ldr	r3, [r7, #16]
 80102fc:	68f8      	ldr	r0, [r7, #12]
 80102fe:	f7ff ff5e 	bl	80101be <inet_cksum_pseudo_base>
 8010302:	4603      	mov	r3, r0
}
 8010304:	4618      	mov	r0, r3
 8010306:	3718      	adds	r7, #24
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}

0801030c <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b086      	sub	sp, #24
 8010310:	af02      	add	r7, sp, #8
 8010312:	60f8      	str	r0, [r7, #12]
 8010314:	607b      	str	r3, [r7, #4]
 8010316:	460b      	mov	r3, r1
 8010318:	72fb      	strb	r3, [r7, #11]
 801031a:	4613      	mov	r3, r2
 801031c:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 801031e:	893a      	ldrh	r2, [r7, #8]
 8010320:	7af9      	ldrb	r1, [r7, #11]
 8010322:	69bb      	ldr	r3, [r7, #24]
 8010324:	9300      	str	r3, [sp, #0]
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	68f8      	ldr	r0, [r7, #12]
 801032a:	f7ff ffb7 	bl	801029c <inet_chksum_pseudo>
 801032e:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8010330:	4618      	mov	r0, r3
 8010332:	3710      	adds	r7, #16
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	460b      	mov	r3, r1
 8010342:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8010344:	887b      	ldrh	r3, [r7, #2]
 8010346:	4619      	mov	r1, r3
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f7ff fedb 	bl	8010104 <lwip_standard_chksum>
 801034e:	4603      	mov	r3, r0
 8010350:	43db      	mvns	r3, r3
 8010352:	b29b      	uxth	r3, r3
}
 8010354:	4618      	mov	r0, r3
 8010356:	3708      	adds	r7, #8
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}

0801035c <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b086      	sub	sp, #24
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8010364:	2300      	movs	r3, #0
 8010366:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8010368:	2300      	movs	r3, #0
 801036a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	613b      	str	r3, [r7, #16]
 8010370:	e02b      	b.n	80103ca <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	685a      	ldr	r2, [r3, #4]
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	895b      	ldrh	r3, [r3, #10]
 801037a:	4619      	mov	r1, r3
 801037c:	4610      	mov	r0, r2
 801037e:	f7ff fec1 	bl	8010104 <lwip_standard_chksum>
 8010382:	4603      	mov	r3, r0
 8010384:	461a      	mov	r2, r3
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	4413      	add	r3, r2
 801038a:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	0c1a      	lsrs	r2, r3, #16
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	b29b      	uxth	r3, r3
 8010394:	4413      	add	r3, r2
 8010396:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8010398:	693b      	ldr	r3, [r7, #16]
 801039a:	895b      	ldrh	r3, [r3, #10]
 801039c:	f003 0301 	and.w	r3, r3, #1
 80103a0:	b29b      	uxth	r3, r3
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d00e      	beq.n	80103c4 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	bf0c      	ite	eq
 80103ac:	2301      	moveq	r3, #1
 80103ae:	2300      	movne	r3, #0
 80103b0:	b2db      	uxtb	r3, r3
 80103b2:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	021b      	lsls	r3, r3, #8
 80103b8:	b29a      	uxth	r2, r3
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	0a1b      	lsrs	r3, r3, #8
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	4313      	orrs	r3, r2
 80103c2:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	613b      	str	r3, [r7, #16]
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d1d0      	bne.n	8010372 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d007      	beq.n	80103e6 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	021b      	lsls	r3, r3, #8
 80103da:	b29a      	uxth	r2, r3
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	0a1b      	lsrs	r3, r3, #8
 80103e0:	b2db      	uxtb	r3, r3
 80103e2:	4313      	orrs	r3, r2
 80103e4:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	b29b      	uxth	r3, r3
 80103ea:	43db      	mvns	r3, r3
 80103ec:	b29b      	uxth	r3, r3
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3718      	adds	r7, #24
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}

080103f6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80103f6:	b580      	push	{r7, lr}
 80103f8:	b082      	sub	sp, #8
 80103fa:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80103fc:	2300      	movs	r3, #0
 80103fe:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8010400:	f00a ffc2 	bl	801b388 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010404:	f000 f8d8 	bl	80105b8 <mem_init>
  memp_init();
 8010408:	f000 fc3c 	bl	8010c84 <memp_init>
  pbuf_init();
  netif_init();
 801040c:	f000 fd48 	bl	8010ea0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010410:	f008 f894 	bl	801853c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010414:	f001 fe5c 	bl	80120d0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010418:	f007 ffd6 	bl	80183c8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801041c:	bf00      	nop
 801041e:	3708      	adds	r7, #8
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010424:	b480      	push	{r7}
 8010426:	b083      	sub	sp, #12
 8010428:	af00      	add	r7, sp, #0
 801042a:	4603      	mov	r3, r0
 801042c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801042e:	4b05      	ldr	r3, [pc, #20]	; (8010444 <ptr_to_mem+0x20>)
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	88fb      	ldrh	r3, [r7, #6]
 8010434:	4413      	add	r3, r2
}
 8010436:	4618      	mov	r0, r3
 8010438:	370c      	adds	r7, #12
 801043a:	46bd      	mov	sp, r7
 801043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010440:	4770      	bx	lr
 8010442:	bf00      	nop
 8010444:	24015e30 	.word	0x24015e30

08010448 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010448:	b480      	push	{r7}
 801044a:	b083      	sub	sp, #12
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010450:	4b05      	ldr	r3, [pc, #20]	; (8010468 <mem_to_ptr+0x20>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	687a      	ldr	r2, [r7, #4]
 8010456:	1ad3      	subs	r3, r2, r3
 8010458:	b29b      	uxth	r3, r3
}
 801045a:	4618      	mov	r0, r3
 801045c:	370c      	adds	r7, #12
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr
 8010466:	bf00      	nop
 8010468:	24015e30 	.word	0x24015e30

0801046c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801046c:	b590      	push	{r4, r7, lr}
 801046e:	b085      	sub	sp, #20
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010474:	4b47      	ldr	r3, [pc, #284]	; (8010594 <plug_holes+0x128>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	687a      	ldr	r2, [r7, #4]
 801047a:	429a      	cmp	r2, r3
 801047c:	d206      	bcs.n	801048c <plug_holes+0x20>
 801047e:	4b46      	ldr	r3, [pc, #280]	; (8010598 <plug_holes+0x12c>)
 8010480:	f240 12df 	movw	r2, #479	; 0x1df
 8010484:	4945      	ldr	r1, [pc, #276]	; (801059c <plug_holes+0x130>)
 8010486:	4846      	ldr	r0, [pc, #280]	; (80105a0 <plug_holes+0x134>)
 8010488:	f00b f9ec 	bl	801b864 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801048c:	4b45      	ldr	r3, [pc, #276]	; (80105a4 <plug_holes+0x138>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	429a      	cmp	r2, r3
 8010494:	d306      	bcc.n	80104a4 <plug_holes+0x38>
 8010496:	4b40      	ldr	r3, [pc, #256]	; (8010598 <plug_holes+0x12c>)
 8010498:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801049c:	4942      	ldr	r1, [pc, #264]	; (80105a8 <plug_holes+0x13c>)
 801049e:	4840      	ldr	r0, [pc, #256]	; (80105a0 <plug_holes+0x134>)
 80104a0:	f00b f9e0 	bl	801b864 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	791b      	ldrb	r3, [r3, #4]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d006      	beq.n	80104ba <plug_holes+0x4e>
 80104ac:	4b3a      	ldr	r3, [pc, #232]	; (8010598 <plug_holes+0x12c>)
 80104ae:	f240 12e1 	movw	r2, #481	; 0x1e1
 80104b2:	493e      	ldr	r1, [pc, #248]	; (80105ac <plug_holes+0x140>)
 80104b4:	483a      	ldr	r0, [pc, #232]	; (80105a0 <plug_holes+0x134>)
 80104b6:	f00b f9d5 	bl	801b864 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	881b      	ldrh	r3, [r3, #0]
 80104be:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80104c2:	4293      	cmp	r3, r2
 80104c4:	d906      	bls.n	80104d4 <plug_holes+0x68>
 80104c6:	4b34      	ldr	r3, [pc, #208]	; (8010598 <plug_holes+0x12c>)
 80104c8:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80104cc:	4938      	ldr	r1, [pc, #224]	; (80105b0 <plug_holes+0x144>)
 80104ce:	4834      	ldr	r0, [pc, #208]	; (80105a0 <plug_holes+0x134>)
 80104d0:	f00b f9c8 	bl	801b864 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	881b      	ldrh	r3, [r3, #0]
 80104d8:	4618      	mov	r0, r3
 80104da:	f7ff ffa3 	bl	8010424 <ptr_to_mem>
 80104de:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80104e0:	687a      	ldr	r2, [r7, #4]
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d025      	beq.n	8010534 <plug_holes+0xc8>
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	791b      	ldrb	r3, [r3, #4]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d121      	bne.n	8010534 <plug_holes+0xc8>
 80104f0:	4b2c      	ldr	r3, [pc, #176]	; (80105a4 <plug_holes+0x138>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	68fa      	ldr	r2, [r7, #12]
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d01c      	beq.n	8010534 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80104fa:	4b2e      	ldr	r3, [pc, #184]	; (80105b4 <plug_holes+0x148>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	68fa      	ldr	r2, [r7, #12]
 8010500:	429a      	cmp	r2, r3
 8010502:	d102      	bne.n	801050a <plug_holes+0x9e>
      lfree = mem;
 8010504:	4a2b      	ldr	r2, [pc, #172]	; (80105b4 <plug_holes+0x148>)
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	881a      	ldrh	r2, [r3, #0]
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	881b      	ldrh	r3, [r3, #0]
 8010516:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 801051a:	4293      	cmp	r3, r2
 801051c:	d00a      	beq.n	8010534 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	881b      	ldrh	r3, [r3, #0]
 8010522:	4618      	mov	r0, r3
 8010524:	f7ff ff7e 	bl	8010424 <ptr_to_mem>
 8010528:	4604      	mov	r4, r0
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f7ff ff8c 	bl	8010448 <mem_to_ptr>
 8010530:	4603      	mov	r3, r0
 8010532:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	885b      	ldrh	r3, [r3, #2]
 8010538:	4618      	mov	r0, r3
 801053a:	f7ff ff73 	bl	8010424 <ptr_to_mem>
 801053e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010540:	68ba      	ldr	r2, [r7, #8]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	429a      	cmp	r2, r3
 8010546:	d020      	beq.n	801058a <plug_holes+0x11e>
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	791b      	ldrb	r3, [r3, #4]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d11c      	bne.n	801058a <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010550:	4b18      	ldr	r3, [pc, #96]	; (80105b4 <plug_holes+0x148>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	687a      	ldr	r2, [r7, #4]
 8010556:	429a      	cmp	r2, r3
 8010558:	d102      	bne.n	8010560 <plug_holes+0xf4>
      lfree = pmem;
 801055a:	4a16      	ldr	r2, [pc, #88]	; (80105b4 <plug_holes+0x148>)
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	881a      	ldrh	r2, [r3, #0]
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	881b      	ldrh	r3, [r3, #0]
 801056c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8010570:	4293      	cmp	r3, r2
 8010572:	d00a      	beq.n	801058a <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	881b      	ldrh	r3, [r3, #0]
 8010578:	4618      	mov	r0, r3
 801057a:	f7ff ff53 	bl	8010424 <ptr_to_mem>
 801057e:	4604      	mov	r4, r0
 8010580:	68b8      	ldr	r0, [r7, #8]
 8010582:	f7ff ff61 	bl	8010448 <mem_to_ptr>
 8010586:	4603      	mov	r3, r0
 8010588:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801058a:	bf00      	nop
 801058c:	3714      	adds	r7, #20
 801058e:	46bd      	mov	sp, r7
 8010590:	bd90      	pop	{r4, r7, pc}
 8010592:	bf00      	nop
 8010594:	24015e30 	.word	0x24015e30
 8010598:	0801d710 	.word	0x0801d710
 801059c:	0801d740 	.word	0x0801d740
 80105a0:	0801d758 	.word	0x0801d758
 80105a4:	24015e34 	.word	0x24015e34
 80105a8:	0801d780 	.word	0x0801d780
 80105ac:	0801d79c 	.word	0x0801d79c
 80105b0:	0801d7b8 	.word	0x0801d7b8
 80105b4:	24015e3c 	.word	0x24015e3c

080105b8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80105be:	4b1d      	ldr	r3, [pc, #116]	; (8010634 <mem_init+0x7c>)
 80105c0:	4a1d      	ldr	r2, [pc, #116]	; (8010638 <mem_init+0x80>)
 80105c2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80105c4:	4b1b      	ldr	r3, [pc, #108]	; (8010634 <mem_init+0x7c>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80105d0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2200      	movs	r2, #0
 80105d6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2200      	movs	r2, #0
 80105dc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80105de:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 80105e2:	f7ff ff1f 	bl	8010424 <ptr_to_mem>
 80105e6:	4603      	mov	r3, r0
 80105e8:	4a14      	ldr	r2, [pc, #80]	; (801063c <mem_init+0x84>)
 80105ea:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80105ec:	4b13      	ldr	r3, [pc, #76]	; (801063c <mem_init+0x84>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	2201      	movs	r2, #1
 80105f2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80105f4:	4b11      	ldr	r3, [pc, #68]	; (801063c <mem_init+0x84>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80105fc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80105fe:	4b0f      	ldr	r3, [pc, #60]	; (801063c <mem_init+0x84>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8010606:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010608:	4b0a      	ldr	r3, [pc, #40]	; (8010634 <mem_init+0x7c>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	4a0c      	ldr	r2, [pc, #48]	; (8010640 <mem_init+0x88>)
 801060e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010610:	480c      	ldr	r0, [pc, #48]	; (8010644 <mem_init+0x8c>)
 8010612:	f00a fec5 	bl	801b3a0 <sys_mutex_new>
 8010616:	4603      	mov	r3, r0
 8010618:	2b00      	cmp	r3, #0
 801061a:	d006      	beq.n	801062a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801061c:	4b0a      	ldr	r3, [pc, #40]	; (8010648 <mem_init+0x90>)
 801061e:	f240 221f 	movw	r2, #543	; 0x21f
 8010622:	490a      	ldr	r1, [pc, #40]	; (801064c <mem_init+0x94>)
 8010624:	480a      	ldr	r0, [pc, #40]	; (8010650 <mem_init+0x98>)
 8010626:	f00b f91d 	bl	801b864 <iprintf>
  }
}
 801062a:	bf00      	nop
 801062c:	3708      	adds	r7, #8
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	24015e30 	.word	0x24015e30
 8010638:	30044000 	.word	0x30044000
 801063c:	24015e34 	.word	0x24015e34
 8010640:	24015e3c 	.word	0x24015e3c
 8010644:	24015e38 	.word	0x24015e38
 8010648:	0801d710 	.word	0x0801d710
 801064c:	0801d7e4 	.word	0x0801d7e4
 8010650:	0801d758 	.word	0x0801d758

08010654 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b086      	sub	sp, #24
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f7ff fef3 	bl	8010448 <mem_to_ptr>
 8010662:	4603      	mov	r3, r0
 8010664:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	881b      	ldrh	r3, [r3, #0]
 801066a:	4618      	mov	r0, r3
 801066c:	f7ff feda 	bl	8010424 <ptr_to_mem>
 8010670:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	885b      	ldrh	r3, [r3, #2]
 8010676:	4618      	mov	r0, r3
 8010678:	f7ff fed4 	bl	8010424 <ptr_to_mem>
 801067c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	881b      	ldrh	r3, [r3, #0]
 8010682:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8010686:	4293      	cmp	r3, r2
 8010688:	d819      	bhi.n	80106be <mem_link_valid+0x6a>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	885b      	ldrh	r3, [r3, #2]
 801068e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8010692:	4293      	cmp	r3, r2
 8010694:	d813      	bhi.n	80106be <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801069a:	8afa      	ldrh	r2, [r7, #22]
 801069c:	429a      	cmp	r2, r3
 801069e:	d004      	beq.n	80106aa <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	881b      	ldrh	r3, [r3, #0]
 80106a4:	8afa      	ldrh	r2, [r7, #22]
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d109      	bne.n	80106be <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80106aa:	4b08      	ldr	r3, [pc, #32]	; (80106cc <mem_link_valid+0x78>)
 80106ac:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80106ae:	693a      	ldr	r2, [r7, #16]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d006      	beq.n	80106c2 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	885b      	ldrh	r3, [r3, #2]
 80106b8:	8afa      	ldrh	r2, [r7, #22]
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d001      	beq.n	80106c2 <mem_link_valid+0x6e>
    return 0;
 80106be:	2300      	movs	r3, #0
 80106c0:	e000      	b.n	80106c4 <mem_link_valid+0x70>
  }
  return 1;
 80106c2:	2301      	movs	r3, #1
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3718      	adds	r7, #24
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}
 80106cc:	24015e34 	.word	0x24015e34

080106d0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b088      	sub	sp, #32
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d070      	beq.n	80107c0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f003 0303 	and.w	r3, r3, #3
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d00d      	beq.n	8010704 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80106e8:	4b37      	ldr	r3, [pc, #220]	; (80107c8 <mem_free+0xf8>)
 80106ea:	f240 2273 	movw	r2, #627	; 0x273
 80106ee:	4937      	ldr	r1, [pc, #220]	; (80107cc <mem_free+0xfc>)
 80106f0:	4837      	ldr	r0, [pc, #220]	; (80107d0 <mem_free+0x100>)
 80106f2:	f00b f8b7 	bl	801b864 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80106f6:	f00a fea5 	bl	801b444 <sys_arch_protect>
 80106fa:	60f8      	str	r0, [r7, #12]
 80106fc:	68f8      	ldr	r0, [r7, #12]
 80106fe:	f00a feaf 	bl	801b460 <sys_arch_unprotect>
    return;
 8010702:	e05e      	b.n	80107c2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	3b08      	subs	r3, #8
 8010708:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801070a:	4b32      	ldr	r3, [pc, #200]	; (80107d4 <mem_free+0x104>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	69fa      	ldr	r2, [r7, #28]
 8010710:	429a      	cmp	r2, r3
 8010712:	d306      	bcc.n	8010722 <mem_free+0x52>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f103 020c 	add.w	r2, r3, #12
 801071a:	4b2f      	ldr	r3, [pc, #188]	; (80107d8 <mem_free+0x108>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	429a      	cmp	r2, r3
 8010720:	d90d      	bls.n	801073e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010722:	4b29      	ldr	r3, [pc, #164]	; (80107c8 <mem_free+0xf8>)
 8010724:	f240 227f 	movw	r2, #639	; 0x27f
 8010728:	492c      	ldr	r1, [pc, #176]	; (80107dc <mem_free+0x10c>)
 801072a:	4829      	ldr	r0, [pc, #164]	; (80107d0 <mem_free+0x100>)
 801072c:	f00b f89a 	bl	801b864 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010730:	f00a fe88 	bl	801b444 <sys_arch_protect>
 8010734:	6138      	str	r0, [r7, #16]
 8010736:	6938      	ldr	r0, [r7, #16]
 8010738:	f00a fe92 	bl	801b460 <sys_arch_unprotect>
    return;
 801073c:	e041      	b.n	80107c2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801073e:	4828      	ldr	r0, [pc, #160]	; (80107e0 <mem_free+0x110>)
 8010740:	f00a fe44 	bl	801b3cc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010744:	69fb      	ldr	r3, [r7, #28]
 8010746:	791b      	ldrb	r3, [r3, #4]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d110      	bne.n	801076e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801074c:	4b1e      	ldr	r3, [pc, #120]	; (80107c8 <mem_free+0xf8>)
 801074e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8010752:	4924      	ldr	r1, [pc, #144]	; (80107e4 <mem_free+0x114>)
 8010754:	481e      	ldr	r0, [pc, #120]	; (80107d0 <mem_free+0x100>)
 8010756:	f00b f885 	bl	801b864 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801075a:	4821      	ldr	r0, [pc, #132]	; (80107e0 <mem_free+0x110>)
 801075c:	f00a fe45 	bl	801b3ea <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010760:	f00a fe70 	bl	801b444 <sys_arch_protect>
 8010764:	6178      	str	r0, [r7, #20]
 8010766:	6978      	ldr	r0, [r7, #20]
 8010768:	f00a fe7a 	bl	801b460 <sys_arch_unprotect>
    return;
 801076c:	e029      	b.n	80107c2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801076e:	69f8      	ldr	r0, [r7, #28]
 8010770:	f7ff ff70 	bl	8010654 <mem_link_valid>
 8010774:	4603      	mov	r3, r0
 8010776:	2b00      	cmp	r3, #0
 8010778:	d110      	bne.n	801079c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801077a:	4b13      	ldr	r3, [pc, #76]	; (80107c8 <mem_free+0xf8>)
 801077c:	f240 2295 	movw	r2, #661	; 0x295
 8010780:	4919      	ldr	r1, [pc, #100]	; (80107e8 <mem_free+0x118>)
 8010782:	4813      	ldr	r0, [pc, #76]	; (80107d0 <mem_free+0x100>)
 8010784:	f00b f86e 	bl	801b864 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010788:	4815      	ldr	r0, [pc, #84]	; (80107e0 <mem_free+0x110>)
 801078a:	f00a fe2e 	bl	801b3ea <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801078e:	f00a fe59 	bl	801b444 <sys_arch_protect>
 8010792:	61b8      	str	r0, [r7, #24]
 8010794:	69b8      	ldr	r0, [r7, #24]
 8010796:	f00a fe63 	bl	801b460 <sys_arch_unprotect>
    return;
 801079a:	e012      	b.n	80107c2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801079c:	69fb      	ldr	r3, [r7, #28]
 801079e:	2200      	movs	r2, #0
 80107a0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80107a2:	4b12      	ldr	r3, [pc, #72]	; (80107ec <mem_free+0x11c>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	69fa      	ldr	r2, [r7, #28]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d202      	bcs.n	80107b2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80107ac:	4a0f      	ldr	r2, [pc, #60]	; (80107ec <mem_free+0x11c>)
 80107ae:	69fb      	ldr	r3, [r7, #28]
 80107b0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80107b2:	69f8      	ldr	r0, [r7, #28]
 80107b4:	f7ff fe5a 	bl	801046c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80107b8:	4809      	ldr	r0, [pc, #36]	; (80107e0 <mem_free+0x110>)
 80107ba:	f00a fe16 	bl	801b3ea <sys_mutex_unlock>
 80107be:	e000      	b.n	80107c2 <mem_free+0xf2>
    return;
 80107c0:	bf00      	nop
}
 80107c2:	3720      	adds	r7, #32
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}
 80107c8:	0801d710 	.word	0x0801d710
 80107cc:	0801d800 	.word	0x0801d800
 80107d0:	0801d758 	.word	0x0801d758
 80107d4:	24015e30 	.word	0x24015e30
 80107d8:	24015e34 	.word	0x24015e34
 80107dc:	0801d824 	.word	0x0801d824
 80107e0:	24015e38 	.word	0x24015e38
 80107e4:	0801d840 	.word	0x0801d840
 80107e8:	0801d868 	.word	0x0801d868
 80107ec:	24015e3c 	.word	0x24015e3c

080107f0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b088      	sub	sp, #32
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	460b      	mov	r3, r1
 80107fa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80107fc:	887b      	ldrh	r3, [r7, #2]
 80107fe:	3303      	adds	r3, #3
 8010800:	b29b      	uxth	r3, r3
 8010802:	f023 0303 	bic.w	r3, r3, #3
 8010806:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010808:	8bfb      	ldrh	r3, [r7, #30]
 801080a:	2b0b      	cmp	r3, #11
 801080c:	d801      	bhi.n	8010812 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801080e:	230c      	movs	r3, #12
 8010810:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010812:	8bfb      	ldrh	r3, [r7, #30]
 8010814:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8010818:	4293      	cmp	r3, r2
 801081a:	d803      	bhi.n	8010824 <mem_trim+0x34>
 801081c:	8bfa      	ldrh	r2, [r7, #30]
 801081e:	887b      	ldrh	r3, [r7, #2]
 8010820:	429a      	cmp	r2, r3
 8010822:	d201      	bcs.n	8010828 <mem_trim+0x38>
    return NULL;
 8010824:	2300      	movs	r3, #0
 8010826:	e0dc      	b.n	80109e2 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010828:	4b70      	ldr	r3, [pc, #448]	; (80109ec <mem_trim+0x1fc>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	687a      	ldr	r2, [r7, #4]
 801082e:	429a      	cmp	r2, r3
 8010830:	d304      	bcc.n	801083c <mem_trim+0x4c>
 8010832:	4b6f      	ldr	r3, [pc, #444]	; (80109f0 <mem_trim+0x200>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	687a      	ldr	r2, [r7, #4]
 8010838:	429a      	cmp	r2, r3
 801083a:	d306      	bcc.n	801084a <mem_trim+0x5a>
 801083c:	4b6d      	ldr	r3, [pc, #436]	; (80109f4 <mem_trim+0x204>)
 801083e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010842:	496d      	ldr	r1, [pc, #436]	; (80109f8 <mem_trim+0x208>)
 8010844:	486d      	ldr	r0, [pc, #436]	; (80109fc <mem_trim+0x20c>)
 8010846:	f00b f80d 	bl	801b864 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801084a:	4b68      	ldr	r3, [pc, #416]	; (80109ec <mem_trim+0x1fc>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	687a      	ldr	r2, [r7, #4]
 8010850:	429a      	cmp	r2, r3
 8010852:	d304      	bcc.n	801085e <mem_trim+0x6e>
 8010854:	4b66      	ldr	r3, [pc, #408]	; (80109f0 <mem_trim+0x200>)
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	687a      	ldr	r2, [r7, #4]
 801085a:	429a      	cmp	r2, r3
 801085c:	d307      	bcc.n	801086e <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801085e:	f00a fdf1 	bl	801b444 <sys_arch_protect>
 8010862:	60b8      	str	r0, [r7, #8]
 8010864:	68b8      	ldr	r0, [r7, #8]
 8010866:	f00a fdfb 	bl	801b460 <sys_arch_unprotect>
    return rmem;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	e0b9      	b.n	80109e2 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	3b08      	subs	r3, #8
 8010872:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010874:	69b8      	ldr	r0, [r7, #24]
 8010876:	f7ff fde7 	bl	8010448 <mem_to_ptr>
 801087a:	4603      	mov	r3, r0
 801087c:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801087e:	69bb      	ldr	r3, [r7, #24]
 8010880:	881a      	ldrh	r2, [r3, #0]
 8010882:	8afb      	ldrh	r3, [r7, #22]
 8010884:	1ad3      	subs	r3, r2, r3
 8010886:	b29b      	uxth	r3, r3
 8010888:	3b08      	subs	r3, #8
 801088a:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801088c:	8bfa      	ldrh	r2, [r7, #30]
 801088e:	8abb      	ldrh	r3, [r7, #20]
 8010890:	429a      	cmp	r2, r3
 8010892:	d906      	bls.n	80108a2 <mem_trim+0xb2>
 8010894:	4b57      	ldr	r3, [pc, #348]	; (80109f4 <mem_trim+0x204>)
 8010896:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801089a:	4959      	ldr	r1, [pc, #356]	; (8010a00 <mem_trim+0x210>)
 801089c:	4857      	ldr	r0, [pc, #348]	; (80109fc <mem_trim+0x20c>)
 801089e:	f00a ffe1 	bl	801b864 <iprintf>
  if (newsize > size) {
 80108a2:	8bfa      	ldrh	r2, [r7, #30]
 80108a4:	8abb      	ldrh	r3, [r7, #20]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d901      	bls.n	80108ae <mem_trim+0xbe>
    /* not supported */
    return NULL;
 80108aa:	2300      	movs	r3, #0
 80108ac:	e099      	b.n	80109e2 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 80108ae:	8bfa      	ldrh	r2, [r7, #30]
 80108b0:	8abb      	ldrh	r3, [r7, #20]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d101      	bne.n	80108ba <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	e093      	b.n	80109e2 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80108ba:	4852      	ldr	r0, [pc, #328]	; (8010a04 <mem_trim+0x214>)
 80108bc:	f00a fd86 	bl	801b3cc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80108c0:	69bb      	ldr	r3, [r7, #24]
 80108c2:	881b      	ldrh	r3, [r3, #0]
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7ff fdad 	bl	8010424 <ptr_to_mem>
 80108ca:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	791b      	ldrb	r3, [r3, #4]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d141      	bne.n	8010958 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80108d4:	69bb      	ldr	r3, [r7, #24]
 80108d6:	881b      	ldrh	r3, [r3, #0]
 80108d8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80108dc:	4293      	cmp	r3, r2
 80108de:	d106      	bne.n	80108ee <mem_trim+0xfe>
 80108e0:	4b44      	ldr	r3, [pc, #272]	; (80109f4 <mem_trim+0x204>)
 80108e2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80108e6:	4948      	ldr	r1, [pc, #288]	; (8010a08 <mem_trim+0x218>)
 80108e8:	4844      	ldr	r0, [pc, #272]	; (80109fc <mem_trim+0x20c>)
 80108ea:	f00a ffbb 	bl	801b864 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	881b      	ldrh	r3, [r3, #0]
 80108f2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80108f4:	8afa      	ldrh	r2, [r7, #22]
 80108f6:	8bfb      	ldrh	r3, [r7, #30]
 80108f8:	4413      	add	r3, r2
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	3308      	adds	r3, #8
 80108fe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010900:	4b42      	ldr	r3, [pc, #264]	; (8010a0c <mem_trim+0x21c>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	693a      	ldr	r2, [r7, #16]
 8010906:	429a      	cmp	r2, r3
 8010908:	d106      	bne.n	8010918 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 801090a:	89fb      	ldrh	r3, [r7, #14]
 801090c:	4618      	mov	r0, r3
 801090e:	f7ff fd89 	bl	8010424 <ptr_to_mem>
 8010912:	4603      	mov	r3, r0
 8010914:	4a3d      	ldr	r2, [pc, #244]	; (8010a0c <mem_trim+0x21c>)
 8010916:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010918:	89fb      	ldrh	r3, [r7, #14]
 801091a:	4618      	mov	r0, r3
 801091c:	f7ff fd82 	bl	8010424 <ptr_to_mem>
 8010920:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	2200      	movs	r2, #0
 8010926:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	89ba      	ldrh	r2, [r7, #12]
 801092c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	8afa      	ldrh	r2, [r7, #22]
 8010932:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010934:	69bb      	ldr	r3, [r7, #24]
 8010936:	89fa      	ldrh	r2, [r7, #14]
 8010938:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801093a:	693b      	ldr	r3, [r7, #16]
 801093c:	881b      	ldrh	r3, [r3, #0]
 801093e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8010942:	4293      	cmp	r3, r2
 8010944:	d049      	beq.n	80109da <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	881b      	ldrh	r3, [r3, #0]
 801094a:	4618      	mov	r0, r3
 801094c:	f7ff fd6a 	bl	8010424 <ptr_to_mem>
 8010950:	4602      	mov	r2, r0
 8010952:	89fb      	ldrh	r3, [r7, #14]
 8010954:	8053      	strh	r3, [r2, #2]
 8010956:	e040      	b.n	80109da <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010958:	8bfb      	ldrh	r3, [r7, #30]
 801095a:	f103 0214 	add.w	r2, r3, #20
 801095e:	8abb      	ldrh	r3, [r7, #20]
 8010960:	429a      	cmp	r2, r3
 8010962:	d83a      	bhi.n	80109da <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010964:	8afa      	ldrh	r2, [r7, #22]
 8010966:	8bfb      	ldrh	r3, [r7, #30]
 8010968:	4413      	add	r3, r2
 801096a:	b29b      	uxth	r3, r3
 801096c:	3308      	adds	r3, #8
 801096e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010970:	69bb      	ldr	r3, [r7, #24]
 8010972:	881b      	ldrh	r3, [r3, #0]
 8010974:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8010978:	4293      	cmp	r3, r2
 801097a:	d106      	bne.n	801098a <mem_trim+0x19a>
 801097c:	4b1d      	ldr	r3, [pc, #116]	; (80109f4 <mem_trim+0x204>)
 801097e:	f240 3216 	movw	r2, #790	; 0x316
 8010982:	4921      	ldr	r1, [pc, #132]	; (8010a08 <mem_trim+0x218>)
 8010984:	481d      	ldr	r0, [pc, #116]	; (80109fc <mem_trim+0x20c>)
 8010986:	f00a ff6d 	bl	801b864 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801098a:	89fb      	ldrh	r3, [r7, #14]
 801098c:	4618      	mov	r0, r3
 801098e:	f7ff fd49 	bl	8010424 <ptr_to_mem>
 8010992:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010994:	4b1d      	ldr	r3, [pc, #116]	; (8010a0c <mem_trim+0x21c>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	693a      	ldr	r2, [r7, #16]
 801099a:	429a      	cmp	r2, r3
 801099c:	d202      	bcs.n	80109a4 <mem_trim+0x1b4>
      lfree = mem2;
 801099e:	4a1b      	ldr	r2, [pc, #108]	; (8010a0c <mem_trim+0x21c>)
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	2200      	movs	r2, #0
 80109a8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80109aa:	69bb      	ldr	r3, [r7, #24]
 80109ac:	881a      	ldrh	r2, [r3, #0]
 80109ae:	693b      	ldr	r3, [r7, #16]
 80109b0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	8afa      	ldrh	r2, [r7, #22]
 80109b6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80109b8:	69bb      	ldr	r3, [r7, #24]
 80109ba:	89fa      	ldrh	r2, [r7, #14]
 80109bc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80109be:	693b      	ldr	r3, [r7, #16]
 80109c0:	881b      	ldrh	r3, [r3, #0]
 80109c2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80109c6:	4293      	cmp	r3, r2
 80109c8:	d007      	beq.n	80109da <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80109ca:	693b      	ldr	r3, [r7, #16]
 80109cc:	881b      	ldrh	r3, [r3, #0]
 80109ce:	4618      	mov	r0, r3
 80109d0:	f7ff fd28 	bl	8010424 <ptr_to_mem>
 80109d4:	4602      	mov	r2, r0
 80109d6:	89fb      	ldrh	r3, [r7, #14]
 80109d8:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80109da:	480a      	ldr	r0, [pc, #40]	; (8010a04 <mem_trim+0x214>)
 80109dc:	f00a fd05 	bl	801b3ea <sys_mutex_unlock>
  return rmem;
 80109e0:	687b      	ldr	r3, [r7, #4]
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	3720      	adds	r7, #32
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
 80109ea:	bf00      	nop
 80109ec:	24015e30 	.word	0x24015e30
 80109f0:	24015e34 	.word	0x24015e34
 80109f4:	0801d710 	.word	0x0801d710
 80109f8:	0801d89c 	.word	0x0801d89c
 80109fc:	0801d758 	.word	0x0801d758
 8010a00:	0801d8b4 	.word	0x0801d8b4
 8010a04:	24015e38 	.word	0x24015e38
 8010a08:	0801d8d4 	.word	0x0801d8d4
 8010a0c:	24015e3c 	.word	0x24015e3c

08010a10 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b088      	sub	sp, #32
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	4603      	mov	r3, r0
 8010a18:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010a1a:	88fb      	ldrh	r3, [r7, #6]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d101      	bne.n	8010a24 <mem_malloc+0x14>
    return NULL;
 8010a20:	2300      	movs	r3, #0
 8010a22:	e0e6      	b.n	8010bf2 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010a24:	88fb      	ldrh	r3, [r7, #6]
 8010a26:	3303      	adds	r3, #3
 8010a28:	b29b      	uxth	r3, r3
 8010a2a:	f023 0303 	bic.w	r3, r3, #3
 8010a2e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010a30:	8bbb      	ldrh	r3, [r7, #28]
 8010a32:	2b0b      	cmp	r3, #11
 8010a34:	d801      	bhi.n	8010a3a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010a36:	230c      	movs	r3, #12
 8010a38:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010a3a:	8bbb      	ldrh	r3, [r7, #28]
 8010a3c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8010a40:	4293      	cmp	r3, r2
 8010a42:	d803      	bhi.n	8010a4c <mem_malloc+0x3c>
 8010a44:	8bba      	ldrh	r2, [r7, #28]
 8010a46:	88fb      	ldrh	r3, [r7, #6]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d201      	bcs.n	8010a50 <mem_malloc+0x40>
    return NULL;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	e0d0      	b.n	8010bf2 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010a50:	486a      	ldr	r0, [pc, #424]	; (8010bfc <mem_malloc+0x1ec>)
 8010a52:	f00a fcbb 	bl	801b3cc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010a56:	4b6a      	ldr	r3, [pc, #424]	; (8010c00 <mem_malloc+0x1f0>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7ff fcf4 	bl	8010448 <mem_to_ptr>
 8010a60:	4603      	mov	r3, r0
 8010a62:	83fb      	strh	r3, [r7, #30]
 8010a64:	e0b9      	b.n	8010bda <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010a66:	8bfb      	ldrh	r3, [r7, #30]
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7ff fcdb 	bl	8010424 <ptr_to_mem>
 8010a6e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	791b      	ldrb	r3, [r3, #4]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	f040 80a9 	bne.w	8010bcc <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010a7a:	697b      	ldr	r3, [r7, #20]
 8010a7c:	881b      	ldrh	r3, [r3, #0]
 8010a7e:	461a      	mov	r2, r3
 8010a80:	8bfb      	ldrh	r3, [r7, #30]
 8010a82:	1ad3      	subs	r3, r2, r3
 8010a84:	f1a3 0208 	sub.w	r2, r3, #8
 8010a88:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	f0c0 809e 	bcc.w	8010bcc <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	881b      	ldrh	r3, [r3, #0]
 8010a94:	461a      	mov	r2, r3
 8010a96:	8bfb      	ldrh	r3, [r7, #30]
 8010a98:	1ad3      	subs	r3, r2, r3
 8010a9a:	f1a3 0208 	sub.w	r2, r3, #8
 8010a9e:	8bbb      	ldrh	r3, [r7, #28]
 8010aa0:	3314      	adds	r3, #20
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d335      	bcc.n	8010b12 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010aa6:	8bfa      	ldrh	r2, [r7, #30]
 8010aa8:	8bbb      	ldrh	r3, [r7, #28]
 8010aaa:	4413      	add	r3, r2
 8010aac:	b29b      	uxth	r3, r3
 8010aae:	3308      	adds	r3, #8
 8010ab0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010ab2:	8a7b      	ldrh	r3, [r7, #18]
 8010ab4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8010ab8:	4293      	cmp	r3, r2
 8010aba:	d106      	bne.n	8010aca <mem_malloc+0xba>
 8010abc:	4b51      	ldr	r3, [pc, #324]	; (8010c04 <mem_malloc+0x1f4>)
 8010abe:	f240 3287 	movw	r2, #903	; 0x387
 8010ac2:	4951      	ldr	r1, [pc, #324]	; (8010c08 <mem_malloc+0x1f8>)
 8010ac4:	4851      	ldr	r0, [pc, #324]	; (8010c0c <mem_malloc+0x1fc>)
 8010ac6:	f00a fecd 	bl	801b864 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010aca:	8a7b      	ldrh	r3, [r7, #18]
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7ff fca9 	bl	8010424 <ptr_to_mem>
 8010ad2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	881a      	ldrh	r2, [r3, #0]
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	8bfa      	ldrh	r2, [r7, #30]
 8010ae6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	8a7a      	ldrh	r2, [r7, #18]
 8010aec:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	2201      	movs	r2, #1
 8010af2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	881b      	ldrh	r3, [r3, #0]
 8010af8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d00b      	beq.n	8010b18 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	881b      	ldrh	r3, [r3, #0]
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7ff fc8d 	bl	8010424 <ptr_to_mem>
 8010b0a:	4602      	mov	r2, r0
 8010b0c:	8a7b      	ldrh	r3, [r7, #18]
 8010b0e:	8053      	strh	r3, [r2, #2]
 8010b10:	e002      	b.n	8010b18 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010b12:	697b      	ldr	r3, [r7, #20]
 8010b14:	2201      	movs	r2, #1
 8010b16:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010b18:	4b39      	ldr	r3, [pc, #228]	; (8010c00 <mem_malloc+0x1f0>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	697a      	ldr	r2, [r7, #20]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d127      	bne.n	8010b72 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8010b22:	4b37      	ldr	r3, [pc, #220]	; (8010c00 <mem_malloc+0x1f0>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010b28:	e005      	b.n	8010b36 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010b2a:	69bb      	ldr	r3, [r7, #24]
 8010b2c:	881b      	ldrh	r3, [r3, #0]
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7ff fc78 	bl	8010424 <ptr_to_mem>
 8010b34:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010b36:	69bb      	ldr	r3, [r7, #24]
 8010b38:	791b      	ldrb	r3, [r3, #4]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d004      	beq.n	8010b48 <mem_malloc+0x138>
 8010b3e:	4b34      	ldr	r3, [pc, #208]	; (8010c10 <mem_malloc+0x200>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	69ba      	ldr	r2, [r7, #24]
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d1f0      	bne.n	8010b2a <mem_malloc+0x11a>
          }
          lfree = cur;
 8010b48:	4a2d      	ldr	r2, [pc, #180]	; (8010c00 <mem_malloc+0x1f0>)
 8010b4a:	69bb      	ldr	r3, [r7, #24]
 8010b4c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010b4e:	4b2c      	ldr	r3, [pc, #176]	; (8010c00 <mem_malloc+0x1f0>)
 8010b50:	681a      	ldr	r2, [r3, #0]
 8010b52:	4b2f      	ldr	r3, [pc, #188]	; (8010c10 <mem_malloc+0x200>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	429a      	cmp	r2, r3
 8010b58:	d00b      	beq.n	8010b72 <mem_malloc+0x162>
 8010b5a:	4b29      	ldr	r3, [pc, #164]	; (8010c00 <mem_malloc+0x1f0>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	791b      	ldrb	r3, [r3, #4]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d006      	beq.n	8010b72 <mem_malloc+0x162>
 8010b64:	4b27      	ldr	r3, [pc, #156]	; (8010c04 <mem_malloc+0x1f4>)
 8010b66:	f240 32b5 	movw	r2, #949	; 0x3b5
 8010b6a:	492a      	ldr	r1, [pc, #168]	; (8010c14 <mem_malloc+0x204>)
 8010b6c:	4827      	ldr	r0, [pc, #156]	; (8010c0c <mem_malloc+0x1fc>)
 8010b6e:	f00a fe79 	bl	801b864 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8010b72:	4822      	ldr	r0, [pc, #136]	; (8010bfc <mem_malloc+0x1ec>)
 8010b74:	f00a fc39 	bl	801b3ea <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010b78:	8bba      	ldrh	r2, [r7, #28]
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	4413      	add	r3, r2
 8010b7e:	3308      	adds	r3, #8
 8010b80:	4a23      	ldr	r2, [pc, #140]	; (8010c10 <mem_malloc+0x200>)
 8010b82:	6812      	ldr	r2, [r2, #0]
 8010b84:	4293      	cmp	r3, r2
 8010b86:	d906      	bls.n	8010b96 <mem_malloc+0x186>
 8010b88:	4b1e      	ldr	r3, [pc, #120]	; (8010c04 <mem_malloc+0x1f4>)
 8010b8a:	f240 32b9 	movw	r2, #953	; 0x3b9
 8010b8e:	4922      	ldr	r1, [pc, #136]	; (8010c18 <mem_malloc+0x208>)
 8010b90:	481e      	ldr	r0, [pc, #120]	; (8010c0c <mem_malloc+0x1fc>)
 8010b92:	f00a fe67 	bl	801b864 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	f003 0303 	and.w	r3, r3, #3
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d006      	beq.n	8010bae <mem_malloc+0x19e>
 8010ba0:	4b18      	ldr	r3, [pc, #96]	; (8010c04 <mem_malloc+0x1f4>)
 8010ba2:	f240 32bb 	movw	r2, #955	; 0x3bb
 8010ba6:	491d      	ldr	r1, [pc, #116]	; (8010c1c <mem_malloc+0x20c>)
 8010ba8:	4818      	ldr	r0, [pc, #96]	; (8010c0c <mem_malloc+0x1fc>)
 8010baa:	f00a fe5b 	bl	801b864 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	f003 0303 	and.w	r3, r3, #3
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d006      	beq.n	8010bc6 <mem_malloc+0x1b6>
 8010bb8:	4b12      	ldr	r3, [pc, #72]	; (8010c04 <mem_malloc+0x1f4>)
 8010bba:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010bbe:	4918      	ldr	r1, [pc, #96]	; (8010c20 <mem_malloc+0x210>)
 8010bc0:	4812      	ldr	r0, [pc, #72]	; (8010c0c <mem_malloc+0x1fc>)
 8010bc2:	f00a fe4f 	bl	801b864 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	3308      	adds	r3, #8
 8010bca:	e012      	b.n	8010bf2 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8010bcc:	8bfb      	ldrh	r3, [r7, #30]
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7ff fc28 	bl	8010424 <ptr_to_mem>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	881b      	ldrh	r3, [r3, #0]
 8010bd8:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010bda:	8bfa      	ldrh	r2, [r7, #30]
 8010bdc:	8bb9      	ldrh	r1, [r7, #28]
 8010bde:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 8010be2:	1a5b      	subs	r3, r3, r1
 8010be4:	429a      	cmp	r2, r3
 8010be6:	f4ff af3e 	bcc.w	8010a66 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010bea:	4804      	ldr	r0, [pc, #16]	; (8010bfc <mem_malloc+0x1ec>)
 8010bec:	f00a fbfd 	bl	801b3ea <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010bf0:	2300      	movs	r3, #0
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3720      	adds	r7, #32
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}
 8010bfa:	bf00      	nop
 8010bfc:	24015e38 	.word	0x24015e38
 8010c00:	24015e3c 	.word	0x24015e3c
 8010c04:	0801d710 	.word	0x0801d710
 8010c08:	0801d8d4 	.word	0x0801d8d4
 8010c0c:	0801d758 	.word	0x0801d758
 8010c10:	24015e34 	.word	0x24015e34
 8010c14:	0801d8e8 	.word	0x0801d8e8
 8010c18:	0801d904 	.word	0x0801d904
 8010c1c:	0801d934 	.word	0x0801d934
 8010c20:	0801d964 	.word	0x0801d964

08010c24 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010c24:	b480      	push	{r7}
 8010c26:	b085      	sub	sp, #20
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	689b      	ldr	r3, [r3, #8]
 8010c30:	2200      	movs	r2, #0
 8010c32:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	685b      	ldr	r3, [r3, #4]
 8010c38:	3303      	adds	r3, #3
 8010c3a:	f023 0303 	bic.w	r3, r3, #3
 8010c3e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010c40:	2300      	movs	r3, #0
 8010c42:	60fb      	str	r3, [r7, #12]
 8010c44:	e011      	b.n	8010c6a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	689b      	ldr	r3, [r3, #8]
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	689b      	ldr	r3, [r3, #8]
 8010c54:	68ba      	ldr	r2, [r7, #8]
 8010c56:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	881b      	ldrh	r3, [r3, #0]
 8010c5c:	461a      	mov	r2, r3
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	4413      	add	r3, r2
 8010c62:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	3301      	adds	r3, #1
 8010c68:	60fb      	str	r3, [r7, #12]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	885b      	ldrh	r3, [r3, #2]
 8010c6e:	461a      	mov	r2, r3
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	4293      	cmp	r3, r2
 8010c74:	dbe7      	blt.n	8010c46 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8010c76:	bf00      	nop
 8010c78:	bf00      	nop
 8010c7a:	3714      	adds	r7, #20
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c82:	4770      	bx	lr

08010c84 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	80fb      	strh	r3, [r7, #6]
 8010c8e:	e009      	b.n	8010ca4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010c90:	88fb      	ldrh	r3, [r7, #6]
 8010c92:	4a08      	ldr	r2, [pc, #32]	; (8010cb4 <memp_init+0x30>)
 8010c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7ff ffc3 	bl	8010c24 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010c9e:	88fb      	ldrh	r3, [r7, #6]
 8010ca0:	3301      	adds	r3, #1
 8010ca2:	80fb      	strh	r3, [r7, #6]
 8010ca4:	88fb      	ldrh	r3, [r7, #6]
 8010ca6:	2b0c      	cmp	r3, #12
 8010ca8:	d9f2      	bls.n	8010c90 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010caa:	bf00      	nop
 8010cac:	bf00      	nop
 8010cae:	3708      	adds	r7, #8
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	08020208 	.word	0x08020208

08010cb8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b084      	sub	sp, #16
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010cc0:	f00a fbc0 	bl	801b444 <sys_arch_protect>
 8010cc4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	689b      	ldr	r3, [r3, #8]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d015      	beq.n	8010d00 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	689b      	ldr	r3, [r3, #8]
 8010cd8:	68ba      	ldr	r2, [r7, #8]
 8010cda:	6812      	ldr	r2, [r2, #0]
 8010cdc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	f003 0303 	and.w	r3, r3, #3
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d006      	beq.n	8010cf6 <do_memp_malloc_pool+0x3e>
 8010ce8:	4b09      	ldr	r3, [pc, #36]	; (8010d10 <do_memp_malloc_pool+0x58>)
 8010cea:	f44f 728c 	mov.w	r2, #280	; 0x118
 8010cee:	4909      	ldr	r1, [pc, #36]	; (8010d14 <do_memp_malloc_pool+0x5c>)
 8010cf0:	4809      	ldr	r0, [pc, #36]	; (8010d18 <do_memp_malloc_pool+0x60>)
 8010cf2:	f00a fdb7 	bl	801b864 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010cf6:	68f8      	ldr	r0, [r7, #12]
 8010cf8:	f00a fbb2 	bl	801b460 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	e003      	b.n	8010d08 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010d00:	68f8      	ldr	r0, [r7, #12]
 8010d02:	f00a fbad 	bl	801b460 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010d06:	2300      	movs	r3, #0
}
 8010d08:	4618      	mov	r0, r3
 8010d0a:	3710      	adds	r7, #16
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}
 8010d10:	0801d988 	.word	0x0801d988
 8010d14:	0801d9b8 	.word	0x0801d9b8
 8010d18:	0801d9dc 	.word	0x0801d9dc

08010d1c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d106      	bne.n	8010d38 <memp_malloc_pool+0x1c>
 8010d2a:	4b0a      	ldr	r3, [pc, #40]	; (8010d54 <memp_malloc_pool+0x38>)
 8010d2c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8010d30:	4909      	ldr	r1, [pc, #36]	; (8010d58 <memp_malloc_pool+0x3c>)
 8010d32:	480a      	ldr	r0, [pc, #40]	; (8010d5c <memp_malloc_pool+0x40>)
 8010d34:	f00a fd96 	bl	801b864 <iprintf>
  if (desc == NULL) {
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d101      	bne.n	8010d42 <memp_malloc_pool+0x26>
    return NULL;
 8010d3e:	2300      	movs	r3, #0
 8010d40:	e003      	b.n	8010d4a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f7ff ffb8 	bl	8010cb8 <do_memp_malloc_pool>
 8010d48:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3708      	adds	r7, #8
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	0801d988 	.word	0x0801d988
 8010d58:	0801da04 	.word	0x0801da04
 8010d5c:	0801d9dc 	.word	0x0801d9dc

08010d60 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b084      	sub	sp, #16
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	4603      	mov	r3, r0
 8010d68:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010d6a:	79fb      	ldrb	r3, [r7, #7]
 8010d6c:	2b0c      	cmp	r3, #12
 8010d6e:	d908      	bls.n	8010d82 <memp_malloc+0x22>
 8010d70:	4b0a      	ldr	r3, [pc, #40]	; (8010d9c <memp_malloc+0x3c>)
 8010d72:	f240 1257 	movw	r2, #343	; 0x157
 8010d76:	490a      	ldr	r1, [pc, #40]	; (8010da0 <memp_malloc+0x40>)
 8010d78:	480a      	ldr	r0, [pc, #40]	; (8010da4 <memp_malloc+0x44>)
 8010d7a:	f00a fd73 	bl	801b864 <iprintf>
 8010d7e:	2300      	movs	r3, #0
 8010d80:	e008      	b.n	8010d94 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010d82:	79fb      	ldrb	r3, [r7, #7]
 8010d84:	4a08      	ldr	r2, [pc, #32]	; (8010da8 <memp_malloc+0x48>)
 8010d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7ff ff94 	bl	8010cb8 <do_memp_malloc_pool>
 8010d90:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010d92:	68fb      	ldr	r3, [r7, #12]
}
 8010d94:	4618      	mov	r0, r3
 8010d96:	3710      	adds	r7, #16
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	0801d988 	.word	0x0801d988
 8010da0:	0801da18 	.word	0x0801da18
 8010da4:	0801d9dc 	.word	0x0801d9dc
 8010da8:	08020208 	.word	0x08020208

08010dac <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
 8010db4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	f003 0303 	and.w	r3, r3, #3
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d006      	beq.n	8010dce <do_memp_free_pool+0x22>
 8010dc0:	4b0d      	ldr	r3, [pc, #52]	; (8010df8 <do_memp_free_pool+0x4c>)
 8010dc2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8010dc6:	490d      	ldr	r1, [pc, #52]	; (8010dfc <do_memp_free_pool+0x50>)
 8010dc8:	480d      	ldr	r0, [pc, #52]	; (8010e00 <do_memp_free_pool+0x54>)
 8010dca:	f00a fd4b 	bl	801b864 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8010dd2:	f00a fb37 	bl	801b444 <sys_arch_protect>
 8010dd6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	689b      	ldr	r3, [r3, #8]
 8010ddc:	681a      	ldr	r2, [r3, #0]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	689b      	ldr	r3, [r3, #8]
 8010de6:	68fa      	ldr	r2, [r7, #12]
 8010de8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010dea:	68b8      	ldr	r0, [r7, #8]
 8010dec:	f00a fb38 	bl	801b460 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010df0:	bf00      	nop
 8010df2:	3710      	adds	r7, #16
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	0801d988 	.word	0x0801d988
 8010dfc:	0801da38 	.word	0x0801da38
 8010e00:	0801d9dc 	.word	0x0801d9dc

08010e04 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b082      	sub	sp, #8
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
 8010e0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d106      	bne.n	8010e22 <memp_free_pool+0x1e>
 8010e14:	4b0a      	ldr	r3, [pc, #40]	; (8010e40 <memp_free_pool+0x3c>)
 8010e16:	f240 1295 	movw	r2, #405	; 0x195
 8010e1a:	490a      	ldr	r1, [pc, #40]	; (8010e44 <memp_free_pool+0x40>)
 8010e1c:	480a      	ldr	r0, [pc, #40]	; (8010e48 <memp_free_pool+0x44>)
 8010e1e:	f00a fd21 	bl	801b864 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d007      	beq.n	8010e38 <memp_free_pool+0x34>
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d004      	beq.n	8010e38 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010e2e:	6839      	ldr	r1, [r7, #0]
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f7ff ffbb 	bl	8010dac <do_memp_free_pool>
 8010e36:	e000      	b.n	8010e3a <memp_free_pool+0x36>
    return;
 8010e38:	bf00      	nop
}
 8010e3a:	3708      	adds	r7, #8
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}
 8010e40:	0801d988 	.word	0x0801d988
 8010e44:	0801da04 	.word	0x0801da04
 8010e48:	0801d9dc 	.word	0x0801d9dc

08010e4c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	4603      	mov	r3, r0
 8010e54:	6039      	str	r1, [r7, #0]
 8010e56:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010e58:	79fb      	ldrb	r3, [r7, #7]
 8010e5a:	2b0c      	cmp	r3, #12
 8010e5c:	d907      	bls.n	8010e6e <memp_free+0x22>
 8010e5e:	4b0c      	ldr	r3, [pc, #48]	; (8010e90 <memp_free+0x44>)
 8010e60:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010e64:	490b      	ldr	r1, [pc, #44]	; (8010e94 <memp_free+0x48>)
 8010e66:	480c      	ldr	r0, [pc, #48]	; (8010e98 <memp_free+0x4c>)
 8010e68:	f00a fcfc 	bl	801b864 <iprintf>
 8010e6c:	e00c      	b.n	8010e88 <memp_free+0x3c>

  if (mem == NULL) {
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d008      	beq.n	8010e86 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010e74:	79fb      	ldrb	r3, [r7, #7]
 8010e76:	4a09      	ldr	r2, [pc, #36]	; (8010e9c <memp_free+0x50>)
 8010e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e7c:	6839      	ldr	r1, [r7, #0]
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7ff ff94 	bl	8010dac <do_memp_free_pool>
 8010e84:	e000      	b.n	8010e88 <memp_free+0x3c>
    return;
 8010e86:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010e88:	3708      	adds	r7, #8
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}
 8010e8e:	bf00      	nop
 8010e90:	0801d988 	.word	0x0801d988
 8010e94:	0801da58 	.word	0x0801da58
 8010e98:	0801d9dc 	.word	0x0801d9dc
 8010e9c:	08020208 	.word	0x08020208

08010ea0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010ea4:	bf00      	nop
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eac:	4770      	bx	lr
	...

08010eb0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b086      	sub	sp, #24
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	60f8      	str	r0, [r7, #12]
 8010eb8:	60b9      	str	r1, [r7, #8]
 8010eba:	607a      	str	r2, [r7, #4]
 8010ebc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d108      	bne.n	8010ed6 <netif_add+0x26>
 8010ec4:	4b57      	ldr	r3, [pc, #348]	; (8011024 <netif_add+0x174>)
 8010ec6:	f240 1227 	movw	r2, #295	; 0x127
 8010eca:	4957      	ldr	r1, [pc, #348]	; (8011028 <netif_add+0x178>)
 8010ecc:	4857      	ldr	r0, [pc, #348]	; (801102c <netif_add+0x17c>)
 8010ece:	f00a fcc9 	bl	801b864 <iprintf>
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	e0a2      	b.n	801101c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d108      	bne.n	8010eee <netif_add+0x3e>
 8010edc:	4b51      	ldr	r3, [pc, #324]	; (8011024 <netif_add+0x174>)
 8010ede:	f44f 7294 	mov.w	r2, #296	; 0x128
 8010ee2:	4953      	ldr	r1, [pc, #332]	; (8011030 <netif_add+0x180>)
 8010ee4:	4851      	ldr	r0, [pc, #324]	; (801102c <netif_add+0x17c>)
 8010ee6:	f00a fcbd 	bl	801b864 <iprintf>
 8010eea:	2300      	movs	r3, #0
 8010eec:	e096      	b.n	801101c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d101      	bne.n	8010ef8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010ef4:	4b4f      	ldr	r3, [pc, #316]	; (8011034 <netif_add+0x184>)
 8010ef6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d101      	bne.n	8010f02 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010efe:	4b4d      	ldr	r3, [pc, #308]	; (8011034 <netif_add+0x184>)
 8010f00:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d101      	bne.n	8010f0c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010f08:	4b4a      	ldr	r3, [pc, #296]	; (8011034 <netif_add+0x184>)
 8010f0a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	2200      	movs	r2, #0
 8010f16:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	4a45      	ldr	r2, [pc, #276]	; (8011038 <netif_add+0x188>)
 8010f22:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	2200      	movs	r2, #0
 8010f28:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	2200      	movs	r2, #0
 8010f36:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	6a3a      	ldr	r2, [r7, #32]
 8010f3c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010f3e:	4b3f      	ldr	r3, [pc, #252]	; (801103c <netif_add+0x18c>)
 8010f40:	781a      	ldrb	r2, [r3, #0]
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f4c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	687a      	ldr	r2, [r7, #4]
 8010f52:	68b9      	ldr	r1, [r7, #8]
 8010f54:	68f8      	ldr	r0, [r7, #12]
 8010f56:	f000 f913 	bl	8011180 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f5c:	68f8      	ldr	r0, [r7, #12]
 8010f5e:	4798      	blx	r3
 8010f60:	4603      	mov	r3, r0
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d001      	beq.n	8010f6a <netif_add+0xba>
    return NULL;
 8010f66:	2300      	movs	r3, #0
 8010f68:	e058      	b.n	801101c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f70:	2bff      	cmp	r3, #255	; 0xff
 8010f72:	d103      	bne.n	8010f7c <netif_add+0xcc>
        netif->num = 0;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	2200      	movs	r2, #0
 8010f78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010f80:	4b2f      	ldr	r3, [pc, #188]	; (8011040 <netif_add+0x190>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	617b      	str	r3, [r7, #20]
 8010f86:	e02b      	b.n	8010fe0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010f88:	697a      	ldr	r2, [r7, #20]
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	d106      	bne.n	8010f9e <netif_add+0xee>
 8010f90:	4b24      	ldr	r3, [pc, #144]	; (8011024 <netif_add+0x174>)
 8010f92:	f240 128b 	movw	r2, #395	; 0x18b
 8010f96:	492b      	ldr	r1, [pc, #172]	; (8011044 <netif_add+0x194>)
 8010f98:	4824      	ldr	r0, [pc, #144]	; (801102c <netif_add+0x17c>)
 8010f9a:	f00a fc63 	bl	801b864 <iprintf>
        num_netifs++;
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	2bff      	cmp	r3, #255	; 0xff
 8010fa8:	dd06      	ble.n	8010fb8 <netif_add+0x108>
 8010faa:	4b1e      	ldr	r3, [pc, #120]	; (8011024 <netif_add+0x174>)
 8010fac:	f240 128d 	movw	r2, #397	; 0x18d
 8010fb0:	4925      	ldr	r1, [pc, #148]	; (8011048 <netif_add+0x198>)
 8010fb2:	481e      	ldr	r0, [pc, #120]	; (801102c <netif_add+0x17c>)
 8010fb4:	f00a fc56 	bl	801b864 <iprintf>
        if (netif2->num == netif->num) {
 8010fb8:	697b      	ldr	r3, [r7, #20]
 8010fba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d108      	bne.n	8010fda <netif_add+0x12a>
          netif->num++;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010fce:	3301      	adds	r3, #1
 8010fd0:	b2da      	uxtb	r2, r3
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8010fd8:	e005      	b.n	8010fe6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	617b      	str	r3, [r7, #20]
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d1d0      	bne.n	8010f88 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d1be      	bne.n	8010f6a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ff2:	2bfe      	cmp	r3, #254	; 0xfe
 8010ff4:	d103      	bne.n	8010ffe <netif_add+0x14e>
    netif_num = 0;
 8010ff6:	4b11      	ldr	r3, [pc, #68]	; (801103c <netif_add+0x18c>)
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	701a      	strb	r2, [r3, #0]
 8010ffc:	e006      	b.n	801100c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011004:	3301      	adds	r3, #1
 8011006:	b2da      	uxtb	r2, r3
 8011008:	4b0c      	ldr	r3, [pc, #48]	; (801103c <netif_add+0x18c>)
 801100a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801100c:	4b0c      	ldr	r3, [pc, #48]	; (8011040 <netif_add+0x190>)
 801100e:	681a      	ldr	r2, [r3, #0]
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011014:	4a0a      	ldr	r2, [pc, #40]	; (8011040 <netif_add+0x190>)
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801101a:	68fb      	ldr	r3, [r7, #12]
}
 801101c:	4618      	mov	r0, r3
 801101e:	3718      	adds	r7, #24
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	0801da74 	.word	0x0801da74
 8011028:	0801db08 	.word	0x0801db08
 801102c:	0801dac4 	.word	0x0801dac4
 8011030:	0801db24 	.word	0x0801db24
 8011034:	0802027c 	.word	0x0802027c
 8011038:	0801145b 	.word	0x0801145b
 801103c:	2405e884 	.word	0x2405e884
 8011040:	2405e87c 	.word	0x2405e87c
 8011044:	0801db48 	.word	0x0801db48
 8011048:	0801db5c 	.word	0x0801db5c

0801104c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b082      	sub	sp, #8
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
 8011054:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8011056:	6839      	ldr	r1, [r7, #0]
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f002 fe53 	bl	8013d04 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801105e:	6839      	ldr	r1, [r7, #0]
 8011060:	6878      	ldr	r0, [r7, #4]
 8011062:	f007 fd3b 	bl	8018adc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011066:	bf00      	nop
 8011068:	3708      	adds	r7, #8
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}
	...

08011070 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b086      	sub	sp, #24
 8011074:	af00      	add	r7, sp, #0
 8011076:	60f8      	str	r0, [r7, #12]
 8011078:	60b9      	str	r1, [r7, #8]
 801107a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d106      	bne.n	8011090 <netif_do_set_ipaddr+0x20>
 8011082:	4b1d      	ldr	r3, [pc, #116]	; (80110f8 <netif_do_set_ipaddr+0x88>)
 8011084:	f240 12cb 	movw	r2, #459	; 0x1cb
 8011088:	491c      	ldr	r1, [pc, #112]	; (80110fc <netif_do_set_ipaddr+0x8c>)
 801108a:	481d      	ldr	r0, [pc, #116]	; (8011100 <netif_do_set_ipaddr+0x90>)
 801108c:	f00a fbea 	bl	801b864 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d106      	bne.n	80110a4 <netif_do_set_ipaddr+0x34>
 8011096:	4b18      	ldr	r3, [pc, #96]	; (80110f8 <netif_do_set_ipaddr+0x88>)
 8011098:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801109c:	4917      	ldr	r1, [pc, #92]	; (80110fc <netif_do_set_ipaddr+0x8c>)
 801109e:	4818      	ldr	r0, [pc, #96]	; (8011100 <netif_do_set_ipaddr+0x90>)
 80110a0:	f00a fbe0 	bl	801b864 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	681a      	ldr	r2, [r3, #0]
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	3304      	adds	r3, #4
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d01c      	beq.n	80110ec <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	3304      	adds	r3, #4
 80110bc:	681a      	ldr	r2, [r3, #0]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80110c2:	f107 0314 	add.w	r3, r7, #20
 80110c6:	4619      	mov	r1, r3
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	f7ff ffbf 	bl	801104c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d002      	beq.n	80110da <netif_do_set_ipaddr+0x6a>
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	e000      	b.n	80110dc <netif_do_set_ipaddr+0x6c>
 80110da:	2300      	movs	r3, #0
 80110dc:	68fa      	ldr	r2, [r7, #12]
 80110de:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80110e0:	2101      	movs	r1, #1
 80110e2:	68f8      	ldr	r0, [r7, #12]
 80110e4:	f000 f8d2 	bl	801128c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80110e8:	2301      	movs	r3, #1
 80110ea:	e000      	b.n	80110ee <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80110ec:	2300      	movs	r3, #0
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	3718      	adds	r7, #24
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
 80110f6:	bf00      	nop
 80110f8:	0801da74 	.word	0x0801da74
 80110fc:	0801db8c 	.word	0x0801db8c
 8011100:	0801dac4 	.word	0x0801dac4

08011104 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011104:	b480      	push	{r7}
 8011106:	b085      	sub	sp, #20
 8011108:	af00      	add	r7, sp, #0
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	681a      	ldr	r2, [r3, #0]
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	3308      	adds	r3, #8
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	429a      	cmp	r2, r3
 801111c:	d00a      	beq.n	8011134 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d002      	beq.n	801112a <netif_do_set_netmask+0x26>
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	e000      	b.n	801112c <netif_do_set_netmask+0x28>
 801112a:	2300      	movs	r3, #0
 801112c:	68fa      	ldr	r2, [r7, #12]
 801112e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8011130:	2301      	movs	r3, #1
 8011132:	e000      	b.n	8011136 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011134:	2300      	movs	r3, #0
}
 8011136:	4618      	mov	r0, r3
 8011138:	3714      	adds	r7, #20
 801113a:	46bd      	mov	sp, r7
 801113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011140:	4770      	bx	lr

08011142 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8011142:	b480      	push	{r7}
 8011144:	b085      	sub	sp, #20
 8011146:	af00      	add	r7, sp, #0
 8011148:	60f8      	str	r0, [r7, #12]
 801114a:	60b9      	str	r1, [r7, #8]
 801114c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	681a      	ldr	r2, [r3, #0]
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	330c      	adds	r3, #12
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	429a      	cmp	r2, r3
 801115a:	d00a      	beq.n	8011172 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d002      	beq.n	8011168 <netif_do_set_gw+0x26>
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	e000      	b.n	801116a <netif_do_set_gw+0x28>
 8011168:	2300      	movs	r3, #0
 801116a:	68fa      	ldr	r2, [r7, #12]
 801116c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801116e:	2301      	movs	r3, #1
 8011170:	e000      	b.n	8011174 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8011172:	2300      	movs	r3, #0
}
 8011174:	4618      	mov	r0, r3
 8011176:	3714      	adds	r7, #20
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr

08011180 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b088      	sub	sp, #32
 8011184:	af00      	add	r7, sp, #0
 8011186:	60f8      	str	r0, [r7, #12]
 8011188:	60b9      	str	r1, [r7, #8]
 801118a:	607a      	str	r2, [r7, #4]
 801118c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801118e:	2300      	movs	r3, #0
 8011190:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011192:	2300      	movs	r3, #0
 8011194:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d101      	bne.n	80111a0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801119c:	4b1c      	ldr	r3, [pc, #112]	; (8011210 <netif_set_addr+0x90>)
 801119e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d101      	bne.n	80111aa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80111a6:	4b1a      	ldr	r3, [pc, #104]	; (8011210 <netif_set_addr+0x90>)
 80111a8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d101      	bne.n	80111b4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80111b0:	4b17      	ldr	r3, [pc, #92]	; (8011210 <netif_set_addr+0x90>)
 80111b2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d003      	beq.n	80111c2 <netif_set_addr+0x42>
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d101      	bne.n	80111c6 <netif_set_addr+0x46>
 80111c2:	2301      	movs	r3, #1
 80111c4:	e000      	b.n	80111c8 <netif_set_addr+0x48>
 80111c6:	2300      	movs	r3, #0
 80111c8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d006      	beq.n	80111de <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80111d0:	f107 0310 	add.w	r3, r7, #16
 80111d4:	461a      	mov	r2, r3
 80111d6:	68b9      	ldr	r1, [r7, #8]
 80111d8:	68f8      	ldr	r0, [r7, #12]
 80111da:	f7ff ff49 	bl	8011070 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80111de:	69fa      	ldr	r2, [r7, #28]
 80111e0:	6879      	ldr	r1, [r7, #4]
 80111e2:	68f8      	ldr	r0, [r7, #12]
 80111e4:	f7ff ff8e 	bl	8011104 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80111e8:	69ba      	ldr	r2, [r7, #24]
 80111ea:	6839      	ldr	r1, [r7, #0]
 80111ec:	68f8      	ldr	r0, [r7, #12]
 80111ee:	f7ff ffa8 	bl	8011142 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d106      	bne.n	8011206 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80111f8:	f107 0310 	add.w	r3, r7, #16
 80111fc:	461a      	mov	r2, r3
 80111fe:	68b9      	ldr	r1, [r7, #8]
 8011200:	68f8      	ldr	r0, [r7, #12]
 8011202:	f7ff ff35 	bl	8011070 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8011206:	bf00      	nop
 8011208:	3720      	adds	r7, #32
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}
 801120e:	bf00      	nop
 8011210:	0802027c 	.word	0x0802027c

08011214 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011214:	b480      	push	{r7}
 8011216:	b083      	sub	sp, #12
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801121c:	4a04      	ldr	r2, [pc, #16]	; (8011230 <netif_set_default+0x1c>)
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011222:	bf00      	nop
 8011224:	370c      	adds	r7, #12
 8011226:	46bd      	mov	sp, r7
 8011228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122c:	4770      	bx	lr
 801122e:	bf00      	nop
 8011230:	2405e880 	.word	0x2405e880

08011234 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b082      	sub	sp, #8
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d107      	bne.n	8011252 <netif_set_up+0x1e>
 8011242:	4b0f      	ldr	r3, [pc, #60]	; (8011280 <netif_set_up+0x4c>)
 8011244:	f44f 7254 	mov.w	r2, #848	; 0x350
 8011248:	490e      	ldr	r1, [pc, #56]	; (8011284 <netif_set_up+0x50>)
 801124a:	480f      	ldr	r0, [pc, #60]	; (8011288 <netif_set_up+0x54>)
 801124c:	f00a fb0a 	bl	801b864 <iprintf>
 8011250:	e013      	b.n	801127a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011258:	f003 0301 	and.w	r3, r3, #1
 801125c:	2b00      	cmp	r3, #0
 801125e:	d10c      	bne.n	801127a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011266:	f043 0301 	orr.w	r3, r3, #1
 801126a:	b2da      	uxtb	r2, r3
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011272:	2103      	movs	r1, #3
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f000 f809 	bl	801128c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801127a:	3708      	adds	r7, #8
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}
 8011280:	0801da74 	.word	0x0801da74
 8011284:	0801dbfc 	.word	0x0801dbfc
 8011288:	0801dac4 	.word	0x0801dac4

0801128c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	460b      	mov	r3, r1
 8011296:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d106      	bne.n	80112ac <netif_issue_reports+0x20>
 801129e:	4b18      	ldr	r3, [pc, #96]	; (8011300 <netif_issue_reports+0x74>)
 80112a0:	f240 326d 	movw	r2, #877	; 0x36d
 80112a4:	4917      	ldr	r1, [pc, #92]	; (8011304 <netif_issue_reports+0x78>)
 80112a6:	4818      	ldr	r0, [pc, #96]	; (8011308 <netif_issue_reports+0x7c>)
 80112a8:	f00a fadc 	bl	801b864 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80112b2:	f003 0304 	and.w	r3, r3, #4
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d01e      	beq.n	80112f8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80112c0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d017      	beq.n	80112f8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80112c8:	78fb      	ldrb	r3, [r7, #3]
 80112ca:	f003 0301 	and.w	r3, r3, #1
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d013      	beq.n	80112fa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	3304      	adds	r3, #4
 80112d6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d00e      	beq.n	80112fa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80112e2:	f003 0308 	and.w	r3, r3, #8
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d007      	beq.n	80112fa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	3304      	adds	r3, #4
 80112ee:	4619      	mov	r1, r3
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f008 fb5d 	bl	80199b0 <etharp_request>
 80112f6:	e000      	b.n	80112fa <netif_issue_reports+0x6e>
    return;
 80112f8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80112fa:	3708      	adds	r7, #8
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}
 8011300:	0801da74 	.word	0x0801da74
 8011304:	0801dc18 	.word	0x0801dc18
 8011308:	0801dac4 	.word	0x0801dac4

0801130c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b082      	sub	sp, #8
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d107      	bne.n	801132a <netif_set_down+0x1e>
 801131a:	4b12      	ldr	r3, [pc, #72]	; (8011364 <netif_set_down+0x58>)
 801131c:	f240 329b 	movw	r2, #923	; 0x39b
 8011320:	4911      	ldr	r1, [pc, #68]	; (8011368 <netif_set_down+0x5c>)
 8011322:	4812      	ldr	r0, [pc, #72]	; (801136c <netif_set_down+0x60>)
 8011324:	f00a fa9e 	bl	801b864 <iprintf>
 8011328:	e019      	b.n	801135e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011330:	f003 0301 	and.w	r3, r3, #1
 8011334:	2b00      	cmp	r3, #0
 8011336:	d012      	beq.n	801135e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801133e:	f023 0301 	bic.w	r3, r3, #1
 8011342:	b2da      	uxtb	r2, r3
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011350:	f003 0308 	and.w	r3, r3, #8
 8011354:	2b00      	cmp	r3, #0
 8011356:	d002      	beq.n	801135e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f007 fee7 	bl	801912c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801135e:	3708      	adds	r7, #8
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	0801da74 	.word	0x0801da74
 8011368:	0801dc3c 	.word	0x0801dc3c
 801136c:	0801dac4 	.word	0x0801dac4

08011370 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d107      	bne.n	801138e <netif_set_link_up+0x1e>
 801137e:	4b13      	ldr	r3, [pc, #76]	; (80113cc <netif_set_link_up+0x5c>)
 8011380:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8011384:	4912      	ldr	r1, [pc, #72]	; (80113d0 <netif_set_link_up+0x60>)
 8011386:	4813      	ldr	r0, [pc, #76]	; (80113d4 <netif_set_link_up+0x64>)
 8011388:	f00a fa6c 	bl	801b864 <iprintf>
 801138c:	e01b      	b.n	80113c6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011394:	f003 0304 	and.w	r3, r3, #4
 8011398:	2b00      	cmp	r3, #0
 801139a:	d114      	bne.n	80113c6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80113a2:	f043 0304 	orr.w	r3, r3, #4
 80113a6:	b2da      	uxtb	r2, r3
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80113ae:	2103      	movs	r1, #3
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f7ff ff6b 	bl	801128c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	69db      	ldr	r3, [r3, #28]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d003      	beq.n	80113c6 <netif_set_link_up+0x56>
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	69db      	ldr	r3, [r3, #28]
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80113c6:	3708      	adds	r7, #8
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}
 80113cc:	0801da74 	.word	0x0801da74
 80113d0:	0801dc5c 	.word	0x0801dc5c
 80113d4:	0801dac4 	.word	0x0801dac4

080113d8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b082      	sub	sp, #8
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d107      	bne.n	80113f6 <netif_set_link_down+0x1e>
 80113e6:	4b11      	ldr	r3, [pc, #68]	; (801142c <netif_set_link_down+0x54>)
 80113e8:	f240 4206 	movw	r2, #1030	; 0x406
 80113ec:	4910      	ldr	r1, [pc, #64]	; (8011430 <netif_set_link_down+0x58>)
 80113ee:	4811      	ldr	r0, [pc, #68]	; (8011434 <netif_set_link_down+0x5c>)
 80113f0:	f00a fa38 	bl	801b864 <iprintf>
 80113f4:	e017      	b.n	8011426 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80113fc:	f003 0304 	and.w	r3, r3, #4
 8011400:	2b00      	cmp	r3, #0
 8011402:	d010      	beq.n	8011426 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801140a:	f023 0304 	bic.w	r3, r3, #4
 801140e:	b2da      	uxtb	r2, r3
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	69db      	ldr	r3, [r3, #28]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d003      	beq.n	8011426 <netif_set_link_down+0x4e>
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	69db      	ldr	r3, [r3, #28]
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011426:	3708      	adds	r7, #8
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}
 801142c:	0801da74 	.word	0x0801da74
 8011430:	0801dc80 	.word	0x0801dc80
 8011434:	0801dac4 	.word	0x0801dac4

08011438 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011438:	b480      	push	{r7}
 801143a:	b083      	sub	sp, #12
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d002      	beq.n	801144e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	683a      	ldr	r2, [r7, #0]
 801144c:	61da      	str	r2, [r3, #28]
  }
}
 801144e:	bf00      	nop
 8011450:	370c      	adds	r7, #12
 8011452:	46bd      	mov	sp, r7
 8011454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011458:	4770      	bx	lr

0801145a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801145a:	b480      	push	{r7}
 801145c:	b085      	sub	sp, #20
 801145e:	af00      	add	r7, sp, #0
 8011460:	60f8      	str	r0, [r7, #12]
 8011462:	60b9      	str	r1, [r7, #8]
 8011464:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8011466:	f06f 030b 	mvn.w	r3, #11
}
 801146a:	4618      	mov	r0, r3
 801146c:	3714      	adds	r7, #20
 801146e:	46bd      	mov	sp, r7
 8011470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011474:	4770      	bx	lr
	...

08011478 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011478:	b480      	push	{r7}
 801147a:	b085      	sub	sp, #20
 801147c:	af00      	add	r7, sp, #0
 801147e:	4603      	mov	r3, r0
 8011480:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011482:	79fb      	ldrb	r3, [r7, #7]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d013      	beq.n	80114b0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011488:	4b0d      	ldr	r3, [pc, #52]	; (80114c0 <netif_get_by_index+0x48>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	60fb      	str	r3, [r7, #12]
 801148e:	e00c      	b.n	80114aa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011496:	3301      	adds	r3, #1
 8011498:	b2db      	uxtb	r3, r3
 801149a:	79fa      	ldrb	r2, [r7, #7]
 801149c:	429a      	cmp	r2, r3
 801149e:	d101      	bne.n	80114a4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	e006      	b.n	80114b2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	60fb      	str	r3, [r7, #12]
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d1ef      	bne.n	8011490 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80114b0:	2300      	movs	r3, #0
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3714      	adds	r7, #20
 80114b6:	46bd      	mov	sp, r7
 80114b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114bc:	4770      	bx	lr
 80114be:	bf00      	nop
 80114c0:	2405e87c 	.word	0x2405e87c

080114c4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b082      	sub	sp, #8
 80114c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80114ca:	f009 ffbb 	bl	801b444 <sys_arch_protect>
 80114ce:	6038      	str	r0, [r7, #0]
 80114d0:	4b0d      	ldr	r3, [pc, #52]	; (8011508 <pbuf_free_ooseq+0x44>)
 80114d2:	2200      	movs	r2, #0
 80114d4:	701a      	strb	r2, [r3, #0]
 80114d6:	6838      	ldr	r0, [r7, #0]
 80114d8:	f009 ffc2 	bl	801b460 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80114dc:	4b0b      	ldr	r3, [pc, #44]	; (801150c <pbuf_free_ooseq+0x48>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	607b      	str	r3, [r7, #4]
 80114e2:	e00a      	b.n	80114fa <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d003      	beq.n	80114f4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f002 fc47 	bl	8013d80 <tcp_free_ooseq>
      return;
 80114f2:	e005      	b.n	8011500 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	68db      	ldr	r3, [r3, #12]
 80114f8:	607b      	str	r3, [r7, #4]
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d1f1      	bne.n	80114e4 <pbuf_free_ooseq+0x20>
    }
  }
}
 8011500:	3708      	adds	r7, #8
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}
 8011506:	bf00      	nop
 8011508:	2405e885 	.word	0x2405e885
 801150c:	2405e894 	.word	0x2405e894

08011510 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b082      	sub	sp, #8
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8011518:	f7ff ffd4 	bl	80114c4 <pbuf_free_ooseq>
}
 801151c:	bf00      	nop
 801151e:	3708      	adds	r7, #8
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}

08011524 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801152a:	f009 ff8b 	bl	801b444 <sys_arch_protect>
 801152e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011530:	4b0f      	ldr	r3, [pc, #60]	; (8011570 <pbuf_pool_is_empty+0x4c>)
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8011536:	4b0e      	ldr	r3, [pc, #56]	; (8011570 <pbuf_pool_is_empty+0x4c>)
 8011538:	2201      	movs	r2, #1
 801153a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f009 ff8f 	bl	801b460 <sys_arch_unprotect>

  if (!queued) {
 8011542:	78fb      	ldrb	r3, [r7, #3]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d10f      	bne.n	8011568 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8011548:	2100      	movs	r1, #0
 801154a:	480a      	ldr	r0, [pc, #40]	; (8011574 <pbuf_pool_is_empty+0x50>)
 801154c:	f7fe fd0c 	bl	800ff68 <tcpip_try_callback>
 8011550:	4603      	mov	r3, r0
 8011552:	2b00      	cmp	r3, #0
 8011554:	d008      	beq.n	8011568 <pbuf_pool_is_empty+0x44>
 8011556:	f009 ff75 	bl	801b444 <sys_arch_protect>
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	4b04      	ldr	r3, [pc, #16]	; (8011570 <pbuf_pool_is_empty+0x4c>)
 801155e:	2200      	movs	r2, #0
 8011560:	701a      	strb	r2, [r3, #0]
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f009 ff7c 	bl	801b460 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011568:	bf00      	nop
 801156a:	3708      	adds	r7, #8
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}
 8011570:	2405e885 	.word	0x2405e885
 8011574:	08011511 	.word	0x08011511

08011578 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011578:	b480      	push	{r7}
 801157a:	b085      	sub	sp, #20
 801157c:	af00      	add	r7, sp, #0
 801157e:	60f8      	str	r0, [r7, #12]
 8011580:	60b9      	str	r1, [r7, #8]
 8011582:	4611      	mov	r1, r2
 8011584:	461a      	mov	r2, r3
 8011586:	460b      	mov	r3, r1
 8011588:	80fb      	strh	r3, [r7, #6]
 801158a:	4613      	mov	r3, r2
 801158c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	2200      	movs	r2, #0
 8011592:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	68ba      	ldr	r2, [r7, #8]
 8011598:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	88fa      	ldrh	r2, [r7, #6]
 801159e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	88ba      	ldrh	r2, [r7, #4]
 80115a4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80115a6:	8b3b      	ldrh	r3, [r7, #24]
 80115a8:	b2da      	uxtb	r2, r3
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	7f3a      	ldrb	r2, [r7, #28]
 80115b2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	2201      	movs	r2, #1
 80115b8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	2200      	movs	r2, #0
 80115be:	73da      	strb	r2, [r3, #15]
}
 80115c0:	bf00      	nop
 80115c2:	3714      	adds	r7, #20
 80115c4:	46bd      	mov	sp, r7
 80115c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ca:	4770      	bx	lr

080115cc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b08c      	sub	sp, #48	; 0x30
 80115d0:	af02      	add	r7, sp, #8
 80115d2:	4603      	mov	r3, r0
 80115d4:	71fb      	strb	r3, [r7, #7]
 80115d6:	460b      	mov	r3, r1
 80115d8:	80bb      	strh	r3, [r7, #4]
 80115da:	4613      	mov	r3, r2
 80115dc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80115de:	79fb      	ldrb	r3, [r7, #7]
 80115e0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80115e2:	887b      	ldrh	r3, [r7, #2]
 80115e4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80115e8:	f000 8082 	beq.w	80116f0 <pbuf_alloc+0x124>
 80115ec:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80115f0:	f300 80ca 	bgt.w	8011788 <pbuf_alloc+0x1bc>
 80115f4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80115f8:	d010      	beq.n	801161c <pbuf_alloc+0x50>
 80115fa:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80115fe:	f300 80c3 	bgt.w	8011788 <pbuf_alloc+0x1bc>
 8011602:	2b01      	cmp	r3, #1
 8011604:	d002      	beq.n	801160c <pbuf_alloc+0x40>
 8011606:	2b41      	cmp	r3, #65	; 0x41
 8011608:	f040 80be 	bne.w	8011788 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801160c:	887a      	ldrh	r2, [r7, #2]
 801160e:	88bb      	ldrh	r3, [r7, #4]
 8011610:	4619      	mov	r1, r3
 8011612:	2000      	movs	r0, #0
 8011614:	f000 f8d4 	bl	80117c0 <pbuf_alloc_reference>
 8011618:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801161a:	e0bf      	b.n	801179c <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801161c:	2300      	movs	r3, #0
 801161e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8011620:	2300      	movs	r3, #0
 8011622:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011624:	88bb      	ldrh	r3, [r7, #4]
 8011626:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011628:	200c      	movs	r0, #12
 801162a:	f7ff fb99 	bl	8010d60 <memp_malloc>
 801162e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011630:	693b      	ldr	r3, [r7, #16]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d109      	bne.n	801164a <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8011636:	f7ff ff75 	bl	8011524 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801163c:	2b00      	cmp	r3, #0
 801163e:	d002      	beq.n	8011646 <pbuf_alloc+0x7a>
            pbuf_free(p);
 8011640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011642:	f000 faab 	bl	8011b9c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011646:	2300      	movs	r3, #0
 8011648:	e0a9      	b.n	801179e <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801164a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801164c:	3303      	adds	r3, #3
 801164e:	b29b      	uxth	r3, r3
 8011650:	f023 0303 	bic.w	r3, r3, #3
 8011654:	b29a      	uxth	r2, r3
 8011656:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 801165a:	1a9b      	subs	r3, r3, r2
 801165c:	b29b      	uxth	r3, r3
 801165e:	8b7a      	ldrh	r2, [r7, #26]
 8011660:	4293      	cmp	r3, r2
 8011662:	bf28      	it	cs
 8011664:	4613      	movcs	r3, r2
 8011666:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011668:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801166a:	3310      	adds	r3, #16
 801166c:	693a      	ldr	r2, [r7, #16]
 801166e:	4413      	add	r3, r2
 8011670:	3303      	adds	r3, #3
 8011672:	f023 0303 	bic.w	r3, r3, #3
 8011676:	4618      	mov	r0, r3
 8011678:	89f9      	ldrh	r1, [r7, #14]
 801167a:	8b7a      	ldrh	r2, [r7, #26]
 801167c:	2300      	movs	r3, #0
 801167e:	9301      	str	r3, [sp, #4]
 8011680:	887b      	ldrh	r3, [r7, #2]
 8011682:	9300      	str	r3, [sp, #0]
 8011684:	460b      	mov	r3, r1
 8011686:	4601      	mov	r1, r0
 8011688:	6938      	ldr	r0, [r7, #16]
 801168a:	f7ff ff75 	bl	8011578 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	685b      	ldr	r3, [r3, #4]
 8011692:	f003 0303 	and.w	r3, r3, #3
 8011696:	2b00      	cmp	r3, #0
 8011698:	d006      	beq.n	80116a8 <pbuf_alloc+0xdc>
 801169a:	4b43      	ldr	r3, [pc, #268]	; (80117a8 <pbuf_alloc+0x1dc>)
 801169c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80116a0:	4942      	ldr	r1, [pc, #264]	; (80117ac <pbuf_alloc+0x1e0>)
 80116a2:	4843      	ldr	r0, [pc, #268]	; (80117b0 <pbuf_alloc+0x1e4>)
 80116a4:	f00a f8de 	bl	801b864 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80116a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80116aa:	3303      	adds	r3, #3
 80116ac:	f023 0303 	bic.w	r3, r3, #3
 80116b0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80116b4:	4293      	cmp	r3, r2
 80116b6:	d106      	bne.n	80116c6 <pbuf_alloc+0xfa>
 80116b8:	4b3b      	ldr	r3, [pc, #236]	; (80117a8 <pbuf_alloc+0x1dc>)
 80116ba:	f44f 7281 	mov.w	r2, #258	; 0x102
 80116be:	493d      	ldr	r1, [pc, #244]	; (80117b4 <pbuf_alloc+0x1e8>)
 80116c0:	483b      	ldr	r0, [pc, #236]	; (80117b0 <pbuf_alloc+0x1e4>)
 80116c2:	f00a f8cf 	bl	801b864 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80116c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d102      	bne.n	80116d2 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80116cc:	693b      	ldr	r3, [r7, #16]
 80116ce:	627b      	str	r3, [r7, #36]	; 0x24
 80116d0:	e002      	b.n	80116d8 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80116d2:	69fb      	ldr	r3, [r7, #28]
 80116d4:	693a      	ldr	r2, [r7, #16]
 80116d6:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80116dc:	8b7a      	ldrh	r2, [r7, #26]
 80116de:	89fb      	ldrh	r3, [r7, #14]
 80116e0:	1ad3      	subs	r3, r2, r3
 80116e2:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80116e4:	2300      	movs	r3, #0
 80116e6:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80116e8:	8b7b      	ldrh	r3, [r7, #26]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d19c      	bne.n	8011628 <pbuf_alloc+0x5c>
      break;
 80116ee:	e055      	b.n	801179c <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80116f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80116f2:	3303      	adds	r3, #3
 80116f4:	b29b      	uxth	r3, r3
 80116f6:	f023 0303 	bic.w	r3, r3, #3
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	88bb      	ldrh	r3, [r7, #4]
 80116fe:	3303      	adds	r3, #3
 8011700:	b29b      	uxth	r3, r3
 8011702:	f023 0303 	bic.w	r3, r3, #3
 8011706:	b29b      	uxth	r3, r3
 8011708:	4413      	add	r3, r2
 801170a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801170c:	8b3b      	ldrh	r3, [r7, #24]
 801170e:	3310      	adds	r3, #16
 8011710:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011712:	8b3a      	ldrh	r2, [r7, #24]
 8011714:	88bb      	ldrh	r3, [r7, #4]
 8011716:	3303      	adds	r3, #3
 8011718:	f023 0303 	bic.w	r3, r3, #3
 801171c:	429a      	cmp	r2, r3
 801171e:	d306      	bcc.n	801172e <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011720:	8afa      	ldrh	r2, [r7, #22]
 8011722:	88bb      	ldrh	r3, [r7, #4]
 8011724:	3303      	adds	r3, #3
 8011726:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801172a:	429a      	cmp	r2, r3
 801172c:	d201      	bcs.n	8011732 <pbuf_alloc+0x166>
        return NULL;
 801172e:	2300      	movs	r3, #0
 8011730:	e035      	b.n	801179e <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011732:	8afb      	ldrh	r3, [r7, #22]
 8011734:	4618      	mov	r0, r3
 8011736:	f7ff f96b 	bl	8010a10 <mem_malloc>
 801173a:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801173e:	2b00      	cmp	r3, #0
 8011740:	d101      	bne.n	8011746 <pbuf_alloc+0x17a>
        return NULL;
 8011742:	2300      	movs	r3, #0
 8011744:	e02b      	b.n	801179e <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011746:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011748:	3310      	adds	r3, #16
 801174a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801174c:	4413      	add	r3, r2
 801174e:	3303      	adds	r3, #3
 8011750:	f023 0303 	bic.w	r3, r3, #3
 8011754:	4618      	mov	r0, r3
 8011756:	88b9      	ldrh	r1, [r7, #4]
 8011758:	88ba      	ldrh	r2, [r7, #4]
 801175a:	2300      	movs	r3, #0
 801175c:	9301      	str	r3, [sp, #4]
 801175e:	887b      	ldrh	r3, [r7, #2]
 8011760:	9300      	str	r3, [sp, #0]
 8011762:	460b      	mov	r3, r1
 8011764:	4601      	mov	r1, r0
 8011766:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011768:	f7ff ff06 	bl	8011578 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176e:	685b      	ldr	r3, [r3, #4]
 8011770:	f003 0303 	and.w	r3, r3, #3
 8011774:	2b00      	cmp	r3, #0
 8011776:	d010      	beq.n	801179a <pbuf_alloc+0x1ce>
 8011778:	4b0b      	ldr	r3, [pc, #44]	; (80117a8 <pbuf_alloc+0x1dc>)
 801177a:	f44f 7291 	mov.w	r2, #290	; 0x122
 801177e:	490e      	ldr	r1, [pc, #56]	; (80117b8 <pbuf_alloc+0x1ec>)
 8011780:	480b      	ldr	r0, [pc, #44]	; (80117b0 <pbuf_alloc+0x1e4>)
 8011782:	f00a f86f 	bl	801b864 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011786:	e008      	b.n	801179a <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011788:	4b07      	ldr	r3, [pc, #28]	; (80117a8 <pbuf_alloc+0x1dc>)
 801178a:	f240 1227 	movw	r2, #295	; 0x127
 801178e:	490b      	ldr	r1, [pc, #44]	; (80117bc <pbuf_alloc+0x1f0>)
 8011790:	4807      	ldr	r0, [pc, #28]	; (80117b0 <pbuf_alloc+0x1e4>)
 8011792:	f00a f867 	bl	801b864 <iprintf>
      return NULL;
 8011796:	2300      	movs	r3, #0
 8011798:	e001      	b.n	801179e <pbuf_alloc+0x1d2>
      break;
 801179a:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3728      	adds	r7, #40	; 0x28
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}
 80117a6:	bf00      	nop
 80117a8:	0801dca4 	.word	0x0801dca4
 80117ac:	0801dcd4 	.word	0x0801dcd4
 80117b0:	0801dd04 	.word	0x0801dd04
 80117b4:	0801dd2c 	.word	0x0801dd2c
 80117b8:	0801dd60 	.word	0x0801dd60
 80117bc:	0801dd8c 	.word	0x0801dd8c

080117c0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b086      	sub	sp, #24
 80117c4:	af02      	add	r7, sp, #8
 80117c6:	6078      	str	r0, [r7, #4]
 80117c8:	460b      	mov	r3, r1
 80117ca:	807b      	strh	r3, [r7, #2]
 80117cc:	4613      	mov	r3, r2
 80117ce:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80117d0:	883b      	ldrh	r3, [r7, #0]
 80117d2:	2b41      	cmp	r3, #65	; 0x41
 80117d4:	d009      	beq.n	80117ea <pbuf_alloc_reference+0x2a>
 80117d6:	883b      	ldrh	r3, [r7, #0]
 80117d8:	2b01      	cmp	r3, #1
 80117da:	d006      	beq.n	80117ea <pbuf_alloc_reference+0x2a>
 80117dc:	4b0f      	ldr	r3, [pc, #60]	; (801181c <pbuf_alloc_reference+0x5c>)
 80117de:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80117e2:	490f      	ldr	r1, [pc, #60]	; (8011820 <pbuf_alloc_reference+0x60>)
 80117e4:	480f      	ldr	r0, [pc, #60]	; (8011824 <pbuf_alloc_reference+0x64>)
 80117e6:	f00a f83d 	bl	801b864 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80117ea:	200b      	movs	r0, #11
 80117ec:	f7ff fab8 	bl	8010d60 <memp_malloc>
 80117f0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d101      	bne.n	80117fc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80117f8:	2300      	movs	r3, #0
 80117fa:	e00b      	b.n	8011814 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80117fc:	8879      	ldrh	r1, [r7, #2]
 80117fe:	887a      	ldrh	r2, [r7, #2]
 8011800:	2300      	movs	r3, #0
 8011802:	9301      	str	r3, [sp, #4]
 8011804:	883b      	ldrh	r3, [r7, #0]
 8011806:	9300      	str	r3, [sp, #0]
 8011808:	460b      	mov	r3, r1
 801180a:	6879      	ldr	r1, [r7, #4]
 801180c:	68f8      	ldr	r0, [r7, #12]
 801180e:	f7ff feb3 	bl	8011578 <pbuf_init_alloced_pbuf>
  return p;
 8011812:	68fb      	ldr	r3, [r7, #12]
}
 8011814:	4618      	mov	r0, r3
 8011816:	3710      	adds	r7, #16
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}
 801181c:	0801dca4 	.word	0x0801dca4
 8011820:	0801dda8 	.word	0x0801dda8
 8011824:	0801dd04 	.word	0x0801dd04

08011828 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b088      	sub	sp, #32
 801182c:	af02      	add	r7, sp, #8
 801182e:	607b      	str	r3, [r7, #4]
 8011830:	4603      	mov	r3, r0
 8011832:	73fb      	strb	r3, [r7, #15]
 8011834:	460b      	mov	r3, r1
 8011836:	81bb      	strh	r3, [r7, #12]
 8011838:	4613      	mov	r3, r2
 801183a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801183c:	7bfb      	ldrb	r3, [r7, #15]
 801183e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011840:	8a7b      	ldrh	r3, [r7, #18]
 8011842:	3303      	adds	r3, #3
 8011844:	f023 0203 	bic.w	r2, r3, #3
 8011848:	89bb      	ldrh	r3, [r7, #12]
 801184a:	441a      	add	r2, r3
 801184c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801184e:	429a      	cmp	r2, r3
 8011850:	d901      	bls.n	8011856 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011852:	2300      	movs	r3, #0
 8011854:	e018      	b.n	8011888 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011856:	6a3b      	ldr	r3, [r7, #32]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d007      	beq.n	801186c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801185c:	8a7b      	ldrh	r3, [r7, #18]
 801185e:	3303      	adds	r3, #3
 8011860:	f023 0303 	bic.w	r3, r3, #3
 8011864:	6a3a      	ldr	r2, [r7, #32]
 8011866:	4413      	add	r3, r2
 8011868:	617b      	str	r3, [r7, #20]
 801186a:	e001      	b.n	8011870 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801186c:	2300      	movs	r3, #0
 801186e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011870:	6878      	ldr	r0, [r7, #4]
 8011872:	89b9      	ldrh	r1, [r7, #12]
 8011874:	89ba      	ldrh	r2, [r7, #12]
 8011876:	2302      	movs	r3, #2
 8011878:	9301      	str	r3, [sp, #4]
 801187a:	897b      	ldrh	r3, [r7, #10]
 801187c:	9300      	str	r3, [sp, #0]
 801187e:	460b      	mov	r3, r1
 8011880:	6979      	ldr	r1, [r7, #20]
 8011882:	f7ff fe79 	bl	8011578 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011886:	687b      	ldr	r3, [r7, #4]
}
 8011888:	4618      	mov	r0, r3
 801188a:	3718      	adds	r7, #24
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}

08011890 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	460b      	mov	r3, r1
 801189a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d106      	bne.n	80118b0 <pbuf_realloc+0x20>
 80118a2:	4b3a      	ldr	r3, [pc, #232]	; (801198c <pbuf_realloc+0xfc>)
 80118a4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80118a8:	4939      	ldr	r1, [pc, #228]	; (8011990 <pbuf_realloc+0x100>)
 80118aa:	483a      	ldr	r0, [pc, #232]	; (8011994 <pbuf_realloc+0x104>)
 80118ac:	f009 ffda 	bl	801b864 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	891b      	ldrh	r3, [r3, #8]
 80118b4:	887a      	ldrh	r2, [r7, #2]
 80118b6:	429a      	cmp	r2, r3
 80118b8:	d263      	bcs.n	8011982 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	891a      	ldrh	r2, [r3, #8]
 80118be:	887b      	ldrh	r3, [r7, #2]
 80118c0:	1ad3      	subs	r3, r2, r3
 80118c2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80118c4:	887b      	ldrh	r3, [r7, #2]
 80118c6:	817b      	strh	r3, [r7, #10]
  q = p;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80118cc:	e018      	b.n	8011900 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	895b      	ldrh	r3, [r3, #10]
 80118d2:	897a      	ldrh	r2, [r7, #10]
 80118d4:	1ad3      	subs	r3, r2, r3
 80118d6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	891a      	ldrh	r2, [r3, #8]
 80118dc:	893b      	ldrh	r3, [r7, #8]
 80118de:	1ad3      	subs	r3, r2, r3
 80118e0:	b29a      	uxth	r2, r3
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d106      	bne.n	8011900 <pbuf_realloc+0x70>
 80118f2:	4b26      	ldr	r3, [pc, #152]	; (801198c <pbuf_realloc+0xfc>)
 80118f4:	f240 12af 	movw	r2, #431	; 0x1af
 80118f8:	4927      	ldr	r1, [pc, #156]	; (8011998 <pbuf_realloc+0x108>)
 80118fa:	4826      	ldr	r0, [pc, #152]	; (8011994 <pbuf_realloc+0x104>)
 80118fc:	f009 ffb2 	bl	801b864 <iprintf>
  while (rem_len > q->len) {
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	895b      	ldrh	r3, [r3, #10]
 8011904:	897a      	ldrh	r2, [r7, #10]
 8011906:	429a      	cmp	r2, r3
 8011908:	d8e1      	bhi.n	80118ce <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	7b1b      	ldrb	r3, [r3, #12]
 801190e:	f003 030f 	and.w	r3, r3, #15
 8011912:	2b00      	cmp	r3, #0
 8011914:	d121      	bne.n	801195a <pbuf_realloc+0xca>
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	895b      	ldrh	r3, [r3, #10]
 801191a:	897a      	ldrh	r2, [r7, #10]
 801191c:	429a      	cmp	r2, r3
 801191e:	d01c      	beq.n	801195a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	7b5b      	ldrb	r3, [r3, #13]
 8011924:	f003 0302 	and.w	r3, r3, #2
 8011928:	2b00      	cmp	r3, #0
 801192a:	d116      	bne.n	801195a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	685a      	ldr	r2, [r3, #4]
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	1ad3      	subs	r3, r2, r3
 8011934:	b29a      	uxth	r2, r3
 8011936:	897b      	ldrh	r3, [r7, #10]
 8011938:	4413      	add	r3, r2
 801193a:	b29b      	uxth	r3, r3
 801193c:	4619      	mov	r1, r3
 801193e:	68f8      	ldr	r0, [r7, #12]
 8011940:	f7fe ff56 	bl	80107f0 <mem_trim>
 8011944:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d106      	bne.n	801195a <pbuf_realloc+0xca>
 801194c:	4b0f      	ldr	r3, [pc, #60]	; (801198c <pbuf_realloc+0xfc>)
 801194e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8011952:	4912      	ldr	r1, [pc, #72]	; (801199c <pbuf_realloc+0x10c>)
 8011954:	480f      	ldr	r0, [pc, #60]	; (8011994 <pbuf_realloc+0x104>)
 8011956:	f009 ff85 	bl	801b864 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	897a      	ldrh	r2, [r7, #10]
 801195e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	895a      	ldrh	r2, [r3, #10]
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d004      	beq.n	801197a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	4618      	mov	r0, r3
 8011976:	f000 f911 	bl	8011b9c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	2200      	movs	r2, #0
 801197e:	601a      	str	r2, [r3, #0]
 8011980:	e000      	b.n	8011984 <pbuf_realloc+0xf4>
    return;
 8011982:	bf00      	nop

}
 8011984:	3710      	adds	r7, #16
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}
 801198a:	bf00      	nop
 801198c:	0801dca4 	.word	0x0801dca4
 8011990:	0801ddbc 	.word	0x0801ddbc
 8011994:	0801dd04 	.word	0x0801dd04
 8011998:	0801ddd4 	.word	0x0801ddd4
 801199c:	0801ddec 	.word	0x0801ddec

080119a0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b086      	sub	sp, #24
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	60f8      	str	r0, [r7, #12]
 80119a8:	60b9      	str	r1, [r7, #8]
 80119aa:	4613      	mov	r3, r2
 80119ac:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d106      	bne.n	80119c2 <pbuf_add_header_impl+0x22>
 80119b4:	4b2b      	ldr	r3, [pc, #172]	; (8011a64 <pbuf_add_header_impl+0xc4>)
 80119b6:	f240 12df 	movw	r2, #479	; 0x1df
 80119ba:	492b      	ldr	r1, [pc, #172]	; (8011a68 <pbuf_add_header_impl+0xc8>)
 80119bc:	482b      	ldr	r0, [pc, #172]	; (8011a6c <pbuf_add_header_impl+0xcc>)
 80119be:	f009 ff51 	bl	801b864 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d003      	beq.n	80119d0 <pbuf_add_header_impl+0x30>
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80119ce:	d301      	bcc.n	80119d4 <pbuf_add_header_impl+0x34>
    return 1;
 80119d0:	2301      	movs	r3, #1
 80119d2:	e043      	b.n	8011a5c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d101      	bne.n	80119de <pbuf_add_header_impl+0x3e>
    return 0;
 80119da:	2300      	movs	r3, #0
 80119dc:	e03e      	b.n	8011a5c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	891a      	ldrh	r2, [r3, #8]
 80119e6:	8a7b      	ldrh	r3, [r7, #18]
 80119e8:	4413      	add	r3, r2
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	8a7a      	ldrh	r2, [r7, #18]
 80119ee:	429a      	cmp	r2, r3
 80119f0:	d901      	bls.n	80119f6 <pbuf_add_header_impl+0x56>
    return 1;
 80119f2:	2301      	movs	r3, #1
 80119f4:	e032      	b.n	8011a5c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	7b1b      	ldrb	r3, [r3, #12]
 80119fa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80119fc:	8a3b      	ldrh	r3, [r7, #16]
 80119fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d00c      	beq.n	8011a20 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	685a      	ldr	r2, [r3, #4]
 8011a0a:	68bb      	ldr	r3, [r7, #8]
 8011a0c:	425b      	negs	r3, r3
 8011a0e:	4413      	add	r3, r2
 8011a10:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	3310      	adds	r3, #16
 8011a16:	697a      	ldr	r2, [r7, #20]
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	d20d      	bcs.n	8011a38 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	e01d      	b.n	8011a5c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011a20:	79fb      	ldrb	r3, [r7, #7]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d006      	beq.n	8011a34 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	685a      	ldr	r2, [r3, #4]
 8011a2a:	68bb      	ldr	r3, [r7, #8]
 8011a2c:	425b      	negs	r3, r3
 8011a2e:	4413      	add	r3, r2
 8011a30:	617b      	str	r3, [r7, #20]
 8011a32:	e001      	b.n	8011a38 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011a34:	2301      	movs	r3, #1
 8011a36:	e011      	b.n	8011a5c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	697a      	ldr	r2, [r7, #20]
 8011a3c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	895a      	ldrh	r2, [r3, #10]
 8011a42:	8a7b      	ldrh	r3, [r7, #18]
 8011a44:	4413      	add	r3, r2
 8011a46:	b29a      	uxth	r2, r3
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	891a      	ldrh	r2, [r3, #8]
 8011a50:	8a7b      	ldrh	r3, [r7, #18]
 8011a52:	4413      	add	r3, r2
 8011a54:	b29a      	uxth	r2, r3
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	811a      	strh	r2, [r3, #8]


  return 0;
 8011a5a:	2300      	movs	r3, #0
}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3718      	adds	r7, #24
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}
 8011a64:	0801dca4 	.word	0x0801dca4
 8011a68:	0801de08 	.word	0x0801de08
 8011a6c:	0801dd04 	.word	0x0801dd04

08011a70 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b082      	sub	sp, #8
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
 8011a78:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	6839      	ldr	r1, [r7, #0]
 8011a7e:	6878      	ldr	r0, [r7, #4]
 8011a80:	f7ff ff8e 	bl	80119a0 <pbuf_add_header_impl>
 8011a84:	4603      	mov	r3, r0
}
 8011a86:	4618      	mov	r0, r3
 8011a88:	3708      	adds	r7, #8
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd80      	pop	{r7, pc}
	...

08011a90 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b084      	sub	sp, #16
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
 8011a98:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d106      	bne.n	8011aae <pbuf_remove_header+0x1e>
 8011aa0:	4b20      	ldr	r3, [pc, #128]	; (8011b24 <pbuf_remove_header+0x94>)
 8011aa2:	f240 224b 	movw	r2, #587	; 0x24b
 8011aa6:	4920      	ldr	r1, [pc, #128]	; (8011b28 <pbuf_remove_header+0x98>)
 8011aa8:	4820      	ldr	r0, [pc, #128]	; (8011b2c <pbuf_remove_header+0x9c>)
 8011aaa:	f009 fedb 	bl	801b864 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d003      	beq.n	8011abc <pbuf_remove_header+0x2c>
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011aba:	d301      	bcc.n	8011ac0 <pbuf_remove_header+0x30>
    return 1;
 8011abc:	2301      	movs	r3, #1
 8011abe:	e02c      	b.n	8011b1a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d101      	bne.n	8011aca <pbuf_remove_header+0x3a>
    return 0;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	e027      	b.n	8011b1a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	895b      	ldrh	r3, [r3, #10]
 8011ad2:	89fa      	ldrh	r2, [r7, #14]
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	d908      	bls.n	8011aea <pbuf_remove_header+0x5a>
 8011ad8:	4b12      	ldr	r3, [pc, #72]	; (8011b24 <pbuf_remove_header+0x94>)
 8011ada:	f240 2255 	movw	r2, #597	; 0x255
 8011ade:	4914      	ldr	r1, [pc, #80]	; (8011b30 <pbuf_remove_header+0xa0>)
 8011ae0:	4812      	ldr	r0, [pc, #72]	; (8011b2c <pbuf_remove_header+0x9c>)
 8011ae2:	f009 febf 	bl	801b864 <iprintf>
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	e017      	b.n	8011b1a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	685b      	ldr	r3, [r3, #4]
 8011aee:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	685a      	ldr	r2, [r3, #4]
 8011af4:	683b      	ldr	r3, [r7, #0]
 8011af6:	441a      	add	r2, r3
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	895a      	ldrh	r2, [r3, #10]
 8011b00:	89fb      	ldrh	r3, [r7, #14]
 8011b02:	1ad3      	subs	r3, r2, r3
 8011b04:	b29a      	uxth	r2, r3
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	891a      	ldrh	r2, [r3, #8]
 8011b0e:	89fb      	ldrh	r3, [r7, #14]
 8011b10:	1ad3      	subs	r3, r2, r3
 8011b12:	b29a      	uxth	r2, r3
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011b18:	2300      	movs	r3, #0
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3710      	adds	r7, #16
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}
 8011b22:	bf00      	nop
 8011b24:	0801dca4 	.word	0x0801dca4
 8011b28:	0801de08 	.word	0x0801de08
 8011b2c:	0801dd04 	.word	0x0801dd04
 8011b30:	0801de14 	.word	0x0801de14

08011b34 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	460b      	mov	r3, r1
 8011b3e:	807b      	strh	r3, [r7, #2]
 8011b40:	4613      	mov	r3, r2
 8011b42:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011b44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	da08      	bge.n	8011b5e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011b4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011b50:	425b      	negs	r3, r3
 8011b52:	4619      	mov	r1, r3
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f7ff ff9b 	bl	8011a90 <pbuf_remove_header>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	e007      	b.n	8011b6e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011b5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011b62:	787a      	ldrb	r2, [r7, #1]
 8011b64:	4619      	mov	r1, r3
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f7ff ff1a 	bl	80119a0 <pbuf_add_header_impl>
 8011b6c:	4603      	mov	r3, r0
  }
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3708      	adds	r7, #8
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}

08011b76 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011b76:	b580      	push	{r7, lr}
 8011b78:	b082      	sub	sp, #8
 8011b7a:	af00      	add	r7, sp, #0
 8011b7c:	6078      	str	r0, [r7, #4]
 8011b7e:	460b      	mov	r3, r1
 8011b80:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011b82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011b86:	2201      	movs	r2, #1
 8011b88:	4619      	mov	r1, r3
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f7ff ffd2 	bl	8011b34 <pbuf_header_impl>
 8011b90:	4603      	mov	r3, r0
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3708      	adds	r7, #8
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
	...

08011b9c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b088      	sub	sp, #32
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d10b      	bne.n	8011bc2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d106      	bne.n	8011bbe <pbuf_free+0x22>
 8011bb0:	4b3b      	ldr	r3, [pc, #236]	; (8011ca0 <pbuf_free+0x104>)
 8011bb2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8011bb6:	493b      	ldr	r1, [pc, #236]	; (8011ca4 <pbuf_free+0x108>)
 8011bb8:	483b      	ldr	r0, [pc, #236]	; (8011ca8 <pbuf_free+0x10c>)
 8011bba:	f009 fe53 	bl	801b864 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	e069      	b.n	8011c96 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011bc6:	e062      	b.n	8011c8e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011bc8:	f009 fc3c 	bl	801b444 <sys_arch_protect>
 8011bcc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	7b9b      	ldrb	r3, [r3, #14]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d106      	bne.n	8011be4 <pbuf_free+0x48>
 8011bd6:	4b32      	ldr	r3, [pc, #200]	; (8011ca0 <pbuf_free+0x104>)
 8011bd8:	f240 22f1 	movw	r2, #753	; 0x2f1
 8011bdc:	4933      	ldr	r1, [pc, #204]	; (8011cac <pbuf_free+0x110>)
 8011bde:	4832      	ldr	r0, [pc, #200]	; (8011ca8 <pbuf_free+0x10c>)
 8011be0:	f009 fe40 	bl	801b864 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	7b9b      	ldrb	r3, [r3, #14]
 8011be8:	3b01      	subs	r3, #1
 8011bea:	b2da      	uxtb	r2, r3
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	739a      	strb	r2, [r3, #14]
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	7b9b      	ldrb	r3, [r3, #14]
 8011bf4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011bf6:	69b8      	ldr	r0, [r7, #24]
 8011bf8:	f009 fc32 	bl	801b460 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011bfc:	7dfb      	ldrb	r3, [r7, #23]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d143      	bne.n	8011c8a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	7b1b      	ldrb	r3, [r3, #12]
 8011c0c:	f003 030f 	and.w	r3, r3, #15
 8011c10:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	7b5b      	ldrb	r3, [r3, #13]
 8011c16:	f003 0302 	and.w	r3, r3, #2
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d011      	beq.n	8011c42 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	691b      	ldr	r3, [r3, #16]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d106      	bne.n	8011c38 <pbuf_free+0x9c>
 8011c2a:	4b1d      	ldr	r3, [pc, #116]	; (8011ca0 <pbuf_free+0x104>)
 8011c2c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011c30:	491f      	ldr	r1, [pc, #124]	; (8011cb0 <pbuf_free+0x114>)
 8011c32:	481d      	ldr	r0, [pc, #116]	; (8011ca8 <pbuf_free+0x10c>)
 8011c34:	f009 fe16 	bl	801b864 <iprintf>
        pc->custom_free_function(p);
 8011c38:	68bb      	ldr	r3, [r7, #8]
 8011c3a:	691b      	ldr	r3, [r3, #16]
 8011c3c:	6878      	ldr	r0, [r7, #4]
 8011c3e:	4798      	blx	r3
 8011c40:	e01d      	b.n	8011c7e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011c42:	7bfb      	ldrb	r3, [r7, #15]
 8011c44:	2b02      	cmp	r3, #2
 8011c46:	d104      	bne.n	8011c52 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011c48:	6879      	ldr	r1, [r7, #4]
 8011c4a:	200c      	movs	r0, #12
 8011c4c:	f7ff f8fe 	bl	8010e4c <memp_free>
 8011c50:	e015      	b.n	8011c7e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011c52:	7bfb      	ldrb	r3, [r7, #15]
 8011c54:	2b01      	cmp	r3, #1
 8011c56:	d104      	bne.n	8011c62 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011c58:	6879      	ldr	r1, [r7, #4]
 8011c5a:	200b      	movs	r0, #11
 8011c5c:	f7ff f8f6 	bl	8010e4c <memp_free>
 8011c60:	e00d      	b.n	8011c7e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011c62:	7bfb      	ldrb	r3, [r7, #15]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d103      	bne.n	8011c70 <pbuf_free+0xd4>
          mem_free(p);
 8011c68:	6878      	ldr	r0, [r7, #4]
 8011c6a:	f7fe fd31 	bl	80106d0 <mem_free>
 8011c6e:	e006      	b.n	8011c7e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011c70:	4b0b      	ldr	r3, [pc, #44]	; (8011ca0 <pbuf_free+0x104>)
 8011c72:	f240 320f 	movw	r2, #783	; 0x30f
 8011c76:	490f      	ldr	r1, [pc, #60]	; (8011cb4 <pbuf_free+0x118>)
 8011c78:	480b      	ldr	r0, [pc, #44]	; (8011ca8 <pbuf_free+0x10c>)
 8011c7a:	f009 fdf3 	bl	801b864 <iprintf>
        }
      }
      count++;
 8011c7e:	7ffb      	ldrb	r3, [r7, #31]
 8011c80:	3301      	adds	r3, #1
 8011c82:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	607b      	str	r3, [r7, #4]
 8011c88:	e001      	b.n	8011c8e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d199      	bne.n	8011bc8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011c94:	7ffb      	ldrb	r3, [r7, #31]
}
 8011c96:	4618      	mov	r0, r3
 8011c98:	3720      	adds	r7, #32
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd80      	pop	{r7, pc}
 8011c9e:	bf00      	nop
 8011ca0:	0801dca4 	.word	0x0801dca4
 8011ca4:	0801de08 	.word	0x0801de08
 8011ca8:	0801dd04 	.word	0x0801dd04
 8011cac:	0801de34 	.word	0x0801de34
 8011cb0:	0801de4c 	.word	0x0801de4c
 8011cb4:	0801de70 	.word	0x0801de70

08011cb8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011cb8:	b480      	push	{r7}
 8011cba:	b085      	sub	sp, #20
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011cc4:	e005      	b.n	8011cd2 <pbuf_clen+0x1a>
    ++len;
 8011cc6:	89fb      	ldrh	r3, [r7, #14]
 8011cc8:	3301      	adds	r3, #1
 8011cca:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d1f6      	bne.n	8011cc6 <pbuf_clen+0xe>
  }
  return len;
 8011cd8:	89fb      	ldrh	r3, [r7, #14]
}
 8011cda:	4618      	mov	r0, r3
 8011cdc:	3714      	adds	r7, #20
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce4:	4770      	bx	lr
	...

08011ce8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b084      	sub	sp, #16
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d016      	beq.n	8011d24 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011cf6:	f009 fba5 	bl	801b444 <sys_arch_protect>
 8011cfa:	60f8      	str	r0, [r7, #12]
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	7b9b      	ldrb	r3, [r3, #14]
 8011d00:	3301      	adds	r3, #1
 8011d02:	b2da      	uxtb	r2, r3
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	739a      	strb	r2, [r3, #14]
 8011d08:	68f8      	ldr	r0, [r7, #12]
 8011d0a:	f009 fba9 	bl	801b460 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	7b9b      	ldrb	r3, [r3, #14]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d106      	bne.n	8011d24 <pbuf_ref+0x3c>
 8011d16:	4b05      	ldr	r3, [pc, #20]	; (8011d2c <pbuf_ref+0x44>)
 8011d18:	f240 3242 	movw	r2, #834	; 0x342
 8011d1c:	4904      	ldr	r1, [pc, #16]	; (8011d30 <pbuf_ref+0x48>)
 8011d1e:	4805      	ldr	r0, [pc, #20]	; (8011d34 <pbuf_ref+0x4c>)
 8011d20:	f009 fda0 	bl	801b864 <iprintf>
  }
}
 8011d24:	bf00      	nop
 8011d26:	3710      	adds	r7, #16
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}
 8011d2c:	0801dca4 	.word	0x0801dca4
 8011d30:	0801de84 	.word	0x0801de84
 8011d34:	0801dd04 	.word	0x0801dd04

08011d38 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b084      	sub	sp, #16
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d002      	beq.n	8011d4e <pbuf_cat+0x16>
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d107      	bne.n	8011d5e <pbuf_cat+0x26>
 8011d4e:	4b20      	ldr	r3, [pc, #128]	; (8011dd0 <pbuf_cat+0x98>)
 8011d50:	f240 3259 	movw	r2, #857	; 0x359
 8011d54:	491f      	ldr	r1, [pc, #124]	; (8011dd4 <pbuf_cat+0x9c>)
 8011d56:	4820      	ldr	r0, [pc, #128]	; (8011dd8 <pbuf_cat+0xa0>)
 8011d58:	f009 fd84 	bl	801b864 <iprintf>
 8011d5c:	e034      	b.n	8011dc8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	60fb      	str	r3, [r7, #12]
 8011d62:	e00a      	b.n	8011d7a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	891a      	ldrh	r2, [r3, #8]
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	891b      	ldrh	r3, [r3, #8]
 8011d6c:	4413      	add	r3, r2
 8011d6e:	b29a      	uxth	r2, r3
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	60fb      	str	r3, [r7, #12]
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d1f0      	bne.n	8011d64 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	891a      	ldrh	r2, [r3, #8]
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	895b      	ldrh	r3, [r3, #10]
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	d006      	beq.n	8011d9c <pbuf_cat+0x64>
 8011d8e:	4b10      	ldr	r3, [pc, #64]	; (8011dd0 <pbuf_cat+0x98>)
 8011d90:	f240 3262 	movw	r2, #866	; 0x362
 8011d94:	4911      	ldr	r1, [pc, #68]	; (8011ddc <pbuf_cat+0xa4>)
 8011d96:	4810      	ldr	r0, [pc, #64]	; (8011dd8 <pbuf_cat+0xa0>)
 8011d98:	f009 fd64 	bl	801b864 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d006      	beq.n	8011db2 <pbuf_cat+0x7a>
 8011da4:	4b0a      	ldr	r3, [pc, #40]	; (8011dd0 <pbuf_cat+0x98>)
 8011da6:	f240 3263 	movw	r2, #867	; 0x363
 8011daa:	490d      	ldr	r1, [pc, #52]	; (8011de0 <pbuf_cat+0xa8>)
 8011dac:	480a      	ldr	r0, [pc, #40]	; (8011dd8 <pbuf_cat+0xa0>)
 8011dae:	f009 fd59 	bl	801b864 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	891a      	ldrh	r2, [r3, #8]
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	891b      	ldrh	r3, [r3, #8]
 8011dba:	4413      	add	r3, r2
 8011dbc:	b29a      	uxth	r2, r3
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	683a      	ldr	r2, [r7, #0]
 8011dc6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011dc8:	3710      	adds	r7, #16
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	bd80      	pop	{r7, pc}
 8011dce:	bf00      	nop
 8011dd0:	0801dca4 	.word	0x0801dca4
 8011dd4:	0801de98 	.word	0x0801de98
 8011dd8:	0801dd04 	.word	0x0801dd04
 8011ddc:	0801ded0 	.word	0x0801ded0
 8011de0:	0801df00 	.word	0x0801df00

08011de4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b086      	sub	sp, #24
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011dee:	2300      	movs	r3, #0
 8011df0:	617b      	str	r3, [r7, #20]
 8011df2:	2300      	movs	r3, #0
 8011df4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d008      	beq.n	8011e0e <pbuf_copy+0x2a>
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d005      	beq.n	8011e0e <pbuf_copy+0x2a>
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	891a      	ldrh	r2, [r3, #8]
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	891b      	ldrh	r3, [r3, #8]
 8011e0a:	429a      	cmp	r2, r3
 8011e0c:	d209      	bcs.n	8011e22 <pbuf_copy+0x3e>
 8011e0e:	4b57      	ldr	r3, [pc, #348]	; (8011f6c <pbuf_copy+0x188>)
 8011e10:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011e14:	4956      	ldr	r1, [pc, #344]	; (8011f70 <pbuf_copy+0x18c>)
 8011e16:	4857      	ldr	r0, [pc, #348]	; (8011f74 <pbuf_copy+0x190>)
 8011e18:	f009 fd24 	bl	801b864 <iprintf>
 8011e1c:	f06f 030f 	mvn.w	r3, #15
 8011e20:	e09f      	b.n	8011f62 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	895b      	ldrh	r3, [r3, #10]
 8011e26:	461a      	mov	r2, r3
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	1ad2      	subs	r2, r2, r3
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	895b      	ldrh	r3, [r3, #10]
 8011e30:	4619      	mov	r1, r3
 8011e32:	693b      	ldr	r3, [r7, #16]
 8011e34:	1acb      	subs	r3, r1, r3
 8011e36:	429a      	cmp	r2, r3
 8011e38:	d306      	bcc.n	8011e48 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	895b      	ldrh	r3, [r3, #10]
 8011e3e:	461a      	mov	r2, r3
 8011e40:	693b      	ldr	r3, [r7, #16]
 8011e42:	1ad3      	subs	r3, r2, r3
 8011e44:	60fb      	str	r3, [r7, #12]
 8011e46:	e005      	b.n	8011e54 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	895b      	ldrh	r3, [r3, #10]
 8011e4c:	461a      	mov	r2, r3
 8011e4e:	697b      	ldr	r3, [r7, #20]
 8011e50:	1ad3      	subs	r3, r2, r3
 8011e52:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	685a      	ldr	r2, [r3, #4]
 8011e58:	697b      	ldr	r3, [r7, #20]
 8011e5a:	18d0      	adds	r0, r2, r3
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	685a      	ldr	r2, [r3, #4]
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	4413      	add	r3, r2
 8011e64:	68fa      	ldr	r2, [r7, #12]
 8011e66:	4619      	mov	r1, r3
 8011e68:	f009 fc37 	bl	801b6da <memcpy>
    offset_to += len;
 8011e6c:	697a      	ldr	r2, [r7, #20]
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	4413      	add	r3, r2
 8011e72:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011e74:	693a      	ldr	r2, [r7, #16]
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	4413      	add	r3, r2
 8011e7a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	895b      	ldrh	r3, [r3, #10]
 8011e80:	461a      	mov	r2, r3
 8011e82:	697b      	ldr	r3, [r7, #20]
 8011e84:	4293      	cmp	r3, r2
 8011e86:	d906      	bls.n	8011e96 <pbuf_copy+0xb2>
 8011e88:	4b38      	ldr	r3, [pc, #224]	; (8011f6c <pbuf_copy+0x188>)
 8011e8a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8011e8e:	493a      	ldr	r1, [pc, #232]	; (8011f78 <pbuf_copy+0x194>)
 8011e90:	4838      	ldr	r0, [pc, #224]	; (8011f74 <pbuf_copy+0x190>)
 8011e92:	f009 fce7 	bl	801b864 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	895b      	ldrh	r3, [r3, #10]
 8011e9a:	461a      	mov	r2, r3
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	4293      	cmp	r3, r2
 8011ea0:	d906      	bls.n	8011eb0 <pbuf_copy+0xcc>
 8011ea2:	4b32      	ldr	r3, [pc, #200]	; (8011f6c <pbuf_copy+0x188>)
 8011ea4:	f240 32da 	movw	r2, #986	; 0x3da
 8011ea8:	4934      	ldr	r1, [pc, #208]	; (8011f7c <pbuf_copy+0x198>)
 8011eaa:	4832      	ldr	r0, [pc, #200]	; (8011f74 <pbuf_copy+0x190>)
 8011eac:	f009 fcda 	bl	801b864 <iprintf>
    if (offset_from >= p_from->len) {
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	895b      	ldrh	r3, [r3, #10]
 8011eb4:	461a      	mov	r2, r3
 8011eb6:	693b      	ldr	r3, [r7, #16]
 8011eb8:	4293      	cmp	r3, r2
 8011eba:	d304      	bcc.n	8011ec6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	895b      	ldrh	r3, [r3, #10]
 8011eca:	461a      	mov	r2, r3
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	4293      	cmp	r3, r2
 8011ed0:	d114      	bne.n	8011efc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d10c      	bne.n	8011efc <pbuf_copy+0x118>
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d009      	beq.n	8011efc <pbuf_copy+0x118>
 8011ee8:	4b20      	ldr	r3, [pc, #128]	; (8011f6c <pbuf_copy+0x188>)
 8011eea:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8011eee:	4924      	ldr	r1, [pc, #144]	; (8011f80 <pbuf_copy+0x19c>)
 8011ef0:	4820      	ldr	r0, [pc, #128]	; (8011f74 <pbuf_copy+0x190>)
 8011ef2:	f009 fcb7 	bl	801b864 <iprintf>
 8011ef6:	f06f 030f 	mvn.w	r3, #15
 8011efa:	e032      	b.n	8011f62 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d013      	beq.n	8011f2a <pbuf_copy+0x146>
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	895a      	ldrh	r2, [r3, #10]
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	891b      	ldrh	r3, [r3, #8]
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d10d      	bne.n	8011f2a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d009      	beq.n	8011f2a <pbuf_copy+0x146>
 8011f16:	4b15      	ldr	r3, [pc, #84]	; (8011f6c <pbuf_copy+0x188>)
 8011f18:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8011f1c:	4919      	ldr	r1, [pc, #100]	; (8011f84 <pbuf_copy+0x1a0>)
 8011f1e:	4815      	ldr	r0, [pc, #84]	; (8011f74 <pbuf_copy+0x190>)
 8011f20:	f009 fca0 	bl	801b864 <iprintf>
 8011f24:	f06f 0305 	mvn.w	r3, #5
 8011f28:	e01b      	b.n	8011f62 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d013      	beq.n	8011f58 <pbuf_copy+0x174>
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	895a      	ldrh	r2, [r3, #10]
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	891b      	ldrh	r3, [r3, #8]
 8011f38:	429a      	cmp	r2, r3
 8011f3a:	d10d      	bne.n	8011f58 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d009      	beq.n	8011f58 <pbuf_copy+0x174>
 8011f44:	4b09      	ldr	r3, [pc, #36]	; (8011f6c <pbuf_copy+0x188>)
 8011f46:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8011f4a:	490e      	ldr	r1, [pc, #56]	; (8011f84 <pbuf_copy+0x1a0>)
 8011f4c:	4809      	ldr	r0, [pc, #36]	; (8011f74 <pbuf_copy+0x190>)
 8011f4e:	f009 fc89 	bl	801b864 <iprintf>
 8011f52:	f06f 0305 	mvn.w	r3, #5
 8011f56:	e004      	b.n	8011f62 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	f47f af61 	bne.w	8011e22 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011f60:	2300      	movs	r3, #0
}
 8011f62:	4618      	mov	r0, r3
 8011f64:	3718      	adds	r7, #24
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd80      	pop	{r7, pc}
 8011f6a:	bf00      	nop
 8011f6c:	0801dca4 	.word	0x0801dca4
 8011f70:	0801df4c 	.word	0x0801df4c
 8011f74:	0801dd04 	.word	0x0801dd04
 8011f78:	0801df7c 	.word	0x0801df7c
 8011f7c:	0801df94 	.word	0x0801df94
 8011f80:	0801dfb0 	.word	0x0801dfb0
 8011f84:	0801dfc0 	.word	0x0801dfc0

08011f88 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b088      	sub	sp, #32
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	60f8      	str	r0, [r7, #12]
 8011f90:	60b9      	str	r1, [r7, #8]
 8011f92:	4611      	mov	r1, r2
 8011f94:	461a      	mov	r2, r3
 8011f96:	460b      	mov	r3, r1
 8011f98:	80fb      	strh	r3, [r7, #6]
 8011f9a:	4613      	mov	r3, r2
 8011f9c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d108      	bne.n	8011fbe <pbuf_copy_partial+0x36>
 8011fac:	4b2b      	ldr	r3, [pc, #172]	; (801205c <pbuf_copy_partial+0xd4>)
 8011fae:	f240 420a 	movw	r2, #1034	; 0x40a
 8011fb2:	492b      	ldr	r1, [pc, #172]	; (8012060 <pbuf_copy_partial+0xd8>)
 8011fb4:	482b      	ldr	r0, [pc, #172]	; (8012064 <pbuf_copy_partial+0xdc>)
 8011fb6:	f009 fc55 	bl	801b864 <iprintf>
 8011fba:	2300      	movs	r3, #0
 8011fbc:	e04a      	b.n	8012054 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d108      	bne.n	8011fd6 <pbuf_copy_partial+0x4e>
 8011fc4:	4b25      	ldr	r3, [pc, #148]	; (801205c <pbuf_copy_partial+0xd4>)
 8011fc6:	f240 420b 	movw	r2, #1035	; 0x40b
 8011fca:	4927      	ldr	r1, [pc, #156]	; (8012068 <pbuf_copy_partial+0xe0>)
 8011fcc:	4825      	ldr	r0, [pc, #148]	; (8012064 <pbuf_copy_partial+0xdc>)
 8011fce:	f009 fc49 	bl	801b864 <iprintf>
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	e03e      	b.n	8012054 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	61fb      	str	r3, [r7, #28]
 8011fda:	e034      	b.n	8012046 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011fdc:	88bb      	ldrh	r3, [r7, #4]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d00a      	beq.n	8011ff8 <pbuf_copy_partial+0x70>
 8011fe2:	69fb      	ldr	r3, [r7, #28]
 8011fe4:	895b      	ldrh	r3, [r3, #10]
 8011fe6:	88ba      	ldrh	r2, [r7, #4]
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d305      	bcc.n	8011ff8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011fec:	69fb      	ldr	r3, [r7, #28]
 8011fee:	895b      	ldrh	r3, [r3, #10]
 8011ff0:	88ba      	ldrh	r2, [r7, #4]
 8011ff2:	1ad3      	subs	r3, r2, r3
 8011ff4:	80bb      	strh	r3, [r7, #4]
 8011ff6:	e023      	b.n	8012040 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011ff8:	69fb      	ldr	r3, [r7, #28]
 8011ffa:	895a      	ldrh	r2, [r3, #10]
 8011ffc:	88bb      	ldrh	r3, [r7, #4]
 8011ffe:	1ad3      	subs	r3, r2, r3
 8012000:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8012002:	8b3a      	ldrh	r2, [r7, #24]
 8012004:	88fb      	ldrh	r3, [r7, #6]
 8012006:	429a      	cmp	r2, r3
 8012008:	d901      	bls.n	801200e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801200a:	88fb      	ldrh	r3, [r7, #6]
 801200c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801200e:	8b7b      	ldrh	r3, [r7, #26]
 8012010:	68ba      	ldr	r2, [r7, #8]
 8012012:	18d0      	adds	r0, r2, r3
 8012014:	69fb      	ldr	r3, [r7, #28]
 8012016:	685a      	ldr	r2, [r3, #4]
 8012018:	88bb      	ldrh	r3, [r7, #4]
 801201a:	4413      	add	r3, r2
 801201c:	8b3a      	ldrh	r2, [r7, #24]
 801201e:	4619      	mov	r1, r3
 8012020:	f009 fb5b 	bl	801b6da <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8012024:	8afa      	ldrh	r2, [r7, #22]
 8012026:	8b3b      	ldrh	r3, [r7, #24]
 8012028:	4413      	add	r3, r2
 801202a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801202c:	8b7a      	ldrh	r2, [r7, #26]
 801202e:	8b3b      	ldrh	r3, [r7, #24]
 8012030:	4413      	add	r3, r2
 8012032:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8012034:	88fa      	ldrh	r2, [r7, #6]
 8012036:	8b3b      	ldrh	r3, [r7, #24]
 8012038:	1ad3      	subs	r3, r2, r3
 801203a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801203c:	2300      	movs	r3, #0
 801203e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012040:	69fb      	ldr	r3, [r7, #28]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	61fb      	str	r3, [r7, #28]
 8012046:	88fb      	ldrh	r3, [r7, #6]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d002      	beq.n	8012052 <pbuf_copy_partial+0xca>
 801204c:	69fb      	ldr	r3, [r7, #28]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d1c4      	bne.n	8011fdc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8012052:	8afb      	ldrh	r3, [r7, #22]
}
 8012054:	4618      	mov	r0, r3
 8012056:	3720      	adds	r7, #32
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}
 801205c:	0801dca4 	.word	0x0801dca4
 8012060:	0801dfec 	.word	0x0801dfec
 8012064:	0801dd04 	.word	0x0801dd04
 8012068:	0801e00c 	.word	0x0801e00c

0801206c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b084      	sub	sp, #16
 8012070:	af00      	add	r7, sp, #0
 8012072:	4603      	mov	r3, r0
 8012074:	603a      	str	r2, [r7, #0]
 8012076:	71fb      	strb	r3, [r7, #7]
 8012078:	460b      	mov	r3, r1
 801207a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	8919      	ldrh	r1, [r3, #8]
 8012080:	88ba      	ldrh	r2, [r7, #4]
 8012082:	79fb      	ldrb	r3, [r7, #7]
 8012084:	4618      	mov	r0, r3
 8012086:	f7ff faa1 	bl	80115cc <pbuf_alloc>
 801208a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d101      	bne.n	8012096 <pbuf_clone+0x2a>
    return NULL;
 8012092:	2300      	movs	r3, #0
 8012094:	e011      	b.n	80120ba <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8012096:	6839      	ldr	r1, [r7, #0]
 8012098:	68f8      	ldr	r0, [r7, #12]
 801209a:	f7ff fea3 	bl	8011de4 <pbuf_copy>
 801209e:	4603      	mov	r3, r0
 80120a0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80120a2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d006      	beq.n	80120b8 <pbuf_clone+0x4c>
 80120aa:	4b06      	ldr	r3, [pc, #24]	; (80120c4 <pbuf_clone+0x58>)
 80120ac:	f240 5224 	movw	r2, #1316	; 0x524
 80120b0:	4905      	ldr	r1, [pc, #20]	; (80120c8 <pbuf_clone+0x5c>)
 80120b2:	4806      	ldr	r0, [pc, #24]	; (80120cc <pbuf_clone+0x60>)
 80120b4:	f009 fbd6 	bl	801b864 <iprintf>
  return q;
 80120b8:	68fb      	ldr	r3, [r7, #12]
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3710      	adds	r7, #16
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}
 80120c2:	bf00      	nop
 80120c4:	0801dca4 	.word	0x0801dca4
 80120c8:	0801e118 	.word	0x0801e118
 80120cc:	0801dd04 	.word	0x0801dd04

080120d0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80120d4:	f009 fbde 	bl	801b894 <rand>
 80120d8:	4603      	mov	r3, r0
 80120da:	b29b      	uxth	r3, r3
 80120dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80120e0:	b29b      	uxth	r3, r3
 80120e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80120e6:	b29a      	uxth	r2, r3
 80120e8:	4b01      	ldr	r3, [pc, #4]	; (80120f0 <tcp_init+0x20>)
 80120ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80120ec:	bf00      	nop
 80120ee:	bd80      	pop	{r7, pc}
 80120f0:	24000028 	.word	0x24000028

080120f4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b082      	sub	sp, #8
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	7d1b      	ldrb	r3, [r3, #20]
 8012100:	2b01      	cmp	r3, #1
 8012102:	d105      	bne.n	8012110 <tcp_free+0x1c>
 8012104:	4b06      	ldr	r3, [pc, #24]	; (8012120 <tcp_free+0x2c>)
 8012106:	22d4      	movs	r2, #212	; 0xd4
 8012108:	4906      	ldr	r1, [pc, #24]	; (8012124 <tcp_free+0x30>)
 801210a:	4807      	ldr	r0, [pc, #28]	; (8012128 <tcp_free+0x34>)
 801210c:	f009 fbaa 	bl	801b864 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8012110:	6879      	ldr	r1, [r7, #4]
 8012112:	2001      	movs	r0, #1
 8012114:	f7fe fe9a 	bl	8010e4c <memp_free>
}
 8012118:	bf00      	nop
 801211a:	3708      	adds	r7, #8
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}
 8012120:	0801e1a4 	.word	0x0801e1a4
 8012124:	0801e1d4 	.word	0x0801e1d4
 8012128:	0801e1e8 	.word	0x0801e1e8

0801212c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	7d1b      	ldrb	r3, [r3, #20]
 8012138:	2b01      	cmp	r3, #1
 801213a:	d105      	bne.n	8012148 <tcp_free_listen+0x1c>
 801213c:	4b06      	ldr	r3, [pc, #24]	; (8012158 <tcp_free_listen+0x2c>)
 801213e:	22df      	movs	r2, #223	; 0xdf
 8012140:	4906      	ldr	r1, [pc, #24]	; (801215c <tcp_free_listen+0x30>)
 8012142:	4807      	ldr	r0, [pc, #28]	; (8012160 <tcp_free_listen+0x34>)
 8012144:	f009 fb8e 	bl	801b864 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012148:	6879      	ldr	r1, [r7, #4]
 801214a:	2002      	movs	r0, #2
 801214c:	f7fe fe7e 	bl	8010e4c <memp_free>
}
 8012150:	bf00      	nop
 8012152:	3708      	adds	r7, #8
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}
 8012158:	0801e1a4 	.word	0x0801e1a4
 801215c:	0801e210 	.word	0x0801e210
 8012160:	0801e1e8 	.word	0x0801e1e8

08012164 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012164:	b580      	push	{r7, lr}
 8012166:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012168:	f001 f8a6 	bl	80132b8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801216c:	4b07      	ldr	r3, [pc, #28]	; (801218c <tcp_tmr+0x28>)
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	3301      	adds	r3, #1
 8012172:	b2da      	uxtb	r2, r3
 8012174:	4b05      	ldr	r3, [pc, #20]	; (801218c <tcp_tmr+0x28>)
 8012176:	701a      	strb	r2, [r3, #0]
 8012178:	4b04      	ldr	r3, [pc, #16]	; (801218c <tcp_tmr+0x28>)
 801217a:	781b      	ldrb	r3, [r3, #0]
 801217c:	f003 0301 	and.w	r3, r3, #1
 8012180:	2b00      	cmp	r3, #0
 8012182:	d001      	beq.n	8012188 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012184:	f000 fd58 	bl	8012c38 <tcp_slowtmr>
  }
}
 8012188:	bf00      	nop
 801218a:	bd80      	pop	{r7, pc}
 801218c:	2405e89d 	.word	0x2405e89d

08012190 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b084      	sub	sp, #16
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d105      	bne.n	80121ac <tcp_remove_listener+0x1c>
 80121a0:	4b0d      	ldr	r3, [pc, #52]	; (80121d8 <tcp_remove_listener+0x48>)
 80121a2:	22ff      	movs	r2, #255	; 0xff
 80121a4:	490d      	ldr	r1, [pc, #52]	; (80121dc <tcp_remove_listener+0x4c>)
 80121a6:	480e      	ldr	r0, [pc, #56]	; (80121e0 <tcp_remove_listener+0x50>)
 80121a8:	f009 fb5c 	bl	801b864 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	60fb      	str	r3, [r7, #12]
 80121b0:	e00a      	b.n	80121c8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80121b6:	683a      	ldr	r2, [r7, #0]
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d102      	bne.n	80121c2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	2200      	movs	r2, #0
 80121c0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	68db      	ldr	r3, [r3, #12]
 80121c6:	60fb      	str	r3, [r7, #12]
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d1f1      	bne.n	80121b2 <tcp_remove_listener+0x22>
    }
  }
}
 80121ce:	bf00      	nop
 80121d0:	bf00      	nop
 80121d2:	3710      	adds	r7, #16
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}
 80121d8:	0801e1a4 	.word	0x0801e1a4
 80121dc:	0801e22c 	.word	0x0801e22c
 80121e0:	0801e1e8 	.word	0x0801e1e8

080121e4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b084      	sub	sp, #16
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d106      	bne.n	8012200 <tcp_listen_closed+0x1c>
 80121f2:	4b14      	ldr	r3, [pc, #80]	; (8012244 <tcp_listen_closed+0x60>)
 80121f4:	f240 1211 	movw	r2, #273	; 0x111
 80121f8:	4913      	ldr	r1, [pc, #76]	; (8012248 <tcp_listen_closed+0x64>)
 80121fa:	4814      	ldr	r0, [pc, #80]	; (801224c <tcp_listen_closed+0x68>)
 80121fc:	f009 fb32 	bl	801b864 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	7d1b      	ldrb	r3, [r3, #20]
 8012204:	2b01      	cmp	r3, #1
 8012206:	d006      	beq.n	8012216 <tcp_listen_closed+0x32>
 8012208:	4b0e      	ldr	r3, [pc, #56]	; (8012244 <tcp_listen_closed+0x60>)
 801220a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801220e:	4910      	ldr	r1, [pc, #64]	; (8012250 <tcp_listen_closed+0x6c>)
 8012210:	480e      	ldr	r0, [pc, #56]	; (801224c <tcp_listen_closed+0x68>)
 8012212:	f009 fb27 	bl	801b864 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012216:	2301      	movs	r3, #1
 8012218:	60fb      	str	r3, [r7, #12]
 801221a:	e00b      	b.n	8012234 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801221c:	4a0d      	ldr	r2, [pc, #52]	; (8012254 <tcp_listen_closed+0x70>)
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	6879      	ldr	r1, [r7, #4]
 8012228:	4618      	mov	r0, r3
 801222a:	f7ff ffb1 	bl	8012190 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	3301      	adds	r3, #1
 8012232:	60fb      	str	r3, [r7, #12]
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2b03      	cmp	r3, #3
 8012238:	d9f0      	bls.n	801221c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801223a:	bf00      	nop
 801223c:	bf00      	nop
 801223e:	3710      	adds	r7, #16
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	0801e1a4 	.word	0x0801e1a4
 8012248:	0801e254 	.word	0x0801e254
 801224c:	0801e1e8 	.word	0x0801e1e8
 8012250:	0801e260 	.word	0x0801e260
 8012254:	08020254 	.word	0x08020254

08012258 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012258:	b5b0      	push	{r4, r5, r7, lr}
 801225a:	b088      	sub	sp, #32
 801225c:	af04      	add	r7, sp, #16
 801225e:	6078      	str	r0, [r7, #4]
 8012260:	460b      	mov	r3, r1
 8012262:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d106      	bne.n	8012278 <tcp_close_shutdown+0x20>
 801226a:	4b63      	ldr	r3, [pc, #396]	; (80123f8 <tcp_close_shutdown+0x1a0>)
 801226c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8012270:	4962      	ldr	r1, [pc, #392]	; (80123fc <tcp_close_shutdown+0x1a4>)
 8012272:	4863      	ldr	r0, [pc, #396]	; (8012400 <tcp_close_shutdown+0x1a8>)
 8012274:	f009 faf6 	bl	801b864 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012278:	78fb      	ldrb	r3, [r7, #3]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d066      	beq.n	801234c <tcp_close_shutdown+0xf4>
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	7d1b      	ldrb	r3, [r3, #20]
 8012282:	2b04      	cmp	r3, #4
 8012284:	d003      	beq.n	801228e <tcp_close_shutdown+0x36>
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	7d1b      	ldrb	r3, [r3, #20]
 801228a:	2b07      	cmp	r3, #7
 801228c:	d15e      	bne.n	801234c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012292:	2b00      	cmp	r3, #0
 8012294:	d104      	bne.n	80122a0 <tcp_close_shutdown+0x48>
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801229a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801229e:	d055      	beq.n	801234c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	8b5b      	ldrh	r3, [r3, #26]
 80122a4:	f003 0310 	and.w	r3, r3, #16
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d106      	bne.n	80122ba <tcp_close_shutdown+0x62>
 80122ac:	4b52      	ldr	r3, [pc, #328]	; (80123f8 <tcp_close_shutdown+0x1a0>)
 80122ae:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80122b2:	4954      	ldr	r1, [pc, #336]	; (8012404 <tcp_close_shutdown+0x1ac>)
 80122b4:	4852      	ldr	r0, [pc, #328]	; (8012400 <tcp_close_shutdown+0x1a8>)
 80122b6:	f009 fad5 	bl	801b864 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80122c2:	687d      	ldr	r5, [r7, #4]
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	3304      	adds	r3, #4
 80122c8:	687a      	ldr	r2, [r7, #4]
 80122ca:	8ad2      	ldrh	r2, [r2, #22]
 80122cc:	6879      	ldr	r1, [r7, #4]
 80122ce:	8b09      	ldrh	r1, [r1, #24]
 80122d0:	9102      	str	r1, [sp, #8]
 80122d2:	9201      	str	r2, [sp, #4]
 80122d4:	9300      	str	r3, [sp, #0]
 80122d6:	462b      	mov	r3, r5
 80122d8:	4622      	mov	r2, r4
 80122da:	4601      	mov	r1, r0
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f005 fdf1 	bl	8017ec4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	f001 fb98 	bl	8013a18 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80122e8:	4b47      	ldr	r3, [pc, #284]	; (8012408 <tcp_close_shutdown+0x1b0>)
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	687a      	ldr	r2, [r7, #4]
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d105      	bne.n	80122fe <tcp_close_shutdown+0xa6>
 80122f2:	4b45      	ldr	r3, [pc, #276]	; (8012408 <tcp_close_shutdown+0x1b0>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	68db      	ldr	r3, [r3, #12]
 80122f8:	4a43      	ldr	r2, [pc, #268]	; (8012408 <tcp_close_shutdown+0x1b0>)
 80122fa:	6013      	str	r3, [r2, #0]
 80122fc:	e013      	b.n	8012326 <tcp_close_shutdown+0xce>
 80122fe:	4b42      	ldr	r3, [pc, #264]	; (8012408 <tcp_close_shutdown+0x1b0>)
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	60fb      	str	r3, [r7, #12]
 8012304:	e00c      	b.n	8012320 <tcp_close_shutdown+0xc8>
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	68db      	ldr	r3, [r3, #12]
 801230a:	687a      	ldr	r2, [r7, #4]
 801230c:	429a      	cmp	r2, r3
 801230e:	d104      	bne.n	801231a <tcp_close_shutdown+0xc2>
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	68da      	ldr	r2, [r3, #12]
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	60da      	str	r2, [r3, #12]
 8012318:	e005      	b.n	8012326 <tcp_close_shutdown+0xce>
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	68db      	ldr	r3, [r3, #12]
 801231e:	60fb      	str	r3, [r7, #12]
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d1ef      	bne.n	8012306 <tcp_close_shutdown+0xae>
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	2200      	movs	r2, #0
 801232a:	60da      	str	r2, [r3, #12]
 801232c:	4b37      	ldr	r3, [pc, #220]	; (801240c <tcp_close_shutdown+0x1b4>)
 801232e:	2201      	movs	r2, #1
 8012330:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8012332:	4b37      	ldr	r3, [pc, #220]	; (8012410 <tcp_close_shutdown+0x1b8>)
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	687a      	ldr	r2, [r7, #4]
 8012338:	429a      	cmp	r2, r3
 801233a:	d102      	bne.n	8012342 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801233c:	f004 f844 	bl	80163c8 <tcp_trigger_input_pcb_close>
 8012340:	e002      	b.n	8012348 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8012342:	6878      	ldr	r0, [r7, #4]
 8012344:	f7ff fed6 	bl	80120f4 <tcp_free>
      }
      return ERR_OK;
 8012348:	2300      	movs	r3, #0
 801234a:	e050      	b.n	80123ee <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	7d1b      	ldrb	r3, [r3, #20]
 8012350:	2b02      	cmp	r3, #2
 8012352:	d03b      	beq.n	80123cc <tcp_close_shutdown+0x174>
 8012354:	2b02      	cmp	r3, #2
 8012356:	dc44      	bgt.n	80123e2 <tcp_close_shutdown+0x18a>
 8012358:	2b00      	cmp	r3, #0
 801235a:	d002      	beq.n	8012362 <tcp_close_shutdown+0x10a>
 801235c:	2b01      	cmp	r3, #1
 801235e:	d02a      	beq.n	80123b6 <tcp_close_shutdown+0x15e>
 8012360:	e03f      	b.n	80123e2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	8adb      	ldrh	r3, [r3, #22]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d021      	beq.n	80123ae <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801236a:	4b2a      	ldr	r3, [pc, #168]	; (8012414 <tcp_close_shutdown+0x1bc>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	687a      	ldr	r2, [r7, #4]
 8012370:	429a      	cmp	r2, r3
 8012372:	d105      	bne.n	8012380 <tcp_close_shutdown+0x128>
 8012374:	4b27      	ldr	r3, [pc, #156]	; (8012414 <tcp_close_shutdown+0x1bc>)
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	68db      	ldr	r3, [r3, #12]
 801237a:	4a26      	ldr	r2, [pc, #152]	; (8012414 <tcp_close_shutdown+0x1bc>)
 801237c:	6013      	str	r3, [r2, #0]
 801237e:	e013      	b.n	80123a8 <tcp_close_shutdown+0x150>
 8012380:	4b24      	ldr	r3, [pc, #144]	; (8012414 <tcp_close_shutdown+0x1bc>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	60bb      	str	r3, [r7, #8]
 8012386:	e00c      	b.n	80123a2 <tcp_close_shutdown+0x14a>
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	68db      	ldr	r3, [r3, #12]
 801238c:	687a      	ldr	r2, [r7, #4]
 801238e:	429a      	cmp	r2, r3
 8012390:	d104      	bne.n	801239c <tcp_close_shutdown+0x144>
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	68da      	ldr	r2, [r3, #12]
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	60da      	str	r2, [r3, #12]
 801239a:	e005      	b.n	80123a8 <tcp_close_shutdown+0x150>
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	68db      	ldr	r3, [r3, #12]
 80123a0:	60bb      	str	r3, [r7, #8]
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d1ef      	bne.n	8012388 <tcp_close_shutdown+0x130>
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2200      	movs	r2, #0
 80123ac:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f7ff fea0 	bl	80120f4 <tcp_free>
      break;
 80123b4:	e01a      	b.n	80123ec <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f7ff ff14 	bl	80121e4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80123bc:	6879      	ldr	r1, [r7, #4]
 80123be:	4816      	ldr	r0, [pc, #88]	; (8012418 <tcp_close_shutdown+0x1c0>)
 80123c0:	f001 fb7a 	bl	8013ab8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f7ff feb1 	bl	801212c <tcp_free_listen>
      break;
 80123ca:	e00f      	b.n	80123ec <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80123cc:	6879      	ldr	r1, [r7, #4]
 80123ce:	480e      	ldr	r0, [pc, #56]	; (8012408 <tcp_close_shutdown+0x1b0>)
 80123d0:	f001 fb72 	bl	8013ab8 <tcp_pcb_remove>
 80123d4:	4b0d      	ldr	r3, [pc, #52]	; (801240c <tcp_close_shutdown+0x1b4>)
 80123d6:	2201      	movs	r2, #1
 80123d8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f7ff fe8a 	bl	80120f4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80123e0:	e004      	b.n	80123ec <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f000 f81a 	bl	801241c <tcp_close_shutdown_fin>
 80123e8:	4603      	mov	r3, r0
 80123ea:	e000      	b.n	80123ee <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80123ec:	2300      	movs	r3, #0
}
 80123ee:	4618      	mov	r0, r3
 80123f0:	3710      	adds	r7, #16
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bdb0      	pop	{r4, r5, r7, pc}
 80123f6:	bf00      	nop
 80123f8:	0801e1a4 	.word	0x0801e1a4
 80123fc:	0801e278 	.word	0x0801e278
 8012400:	0801e1e8 	.word	0x0801e1e8
 8012404:	0801e298 	.word	0x0801e298
 8012408:	2405e894 	.word	0x2405e894
 801240c:	2405e89c 	.word	0x2405e89c
 8012410:	2405e8d4 	.word	0x2405e8d4
 8012414:	2405e88c 	.word	0x2405e88c
 8012418:	2405e890 	.word	0x2405e890

0801241c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b084      	sub	sp, #16
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d106      	bne.n	8012438 <tcp_close_shutdown_fin+0x1c>
 801242a:	4b2e      	ldr	r3, [pc, #184]	; (80124e4 <tcp_close_shutdown_fin+0xc8>)
 801242c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8012430:	492d      	ldr	r1, [pc, #180]	; (80124e8 <tcp_close_shutdown_fin+0xcc>)
 8012432:	482e      	ldr	r0, [pc, #184]	; (80124ec <tcp_close_shutdown_fin+0xd0>)
 8012434:	f009 fa16 	bl	801b864 <iprintf>

  switch (pcb->state) {
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	7d1b      	ldrb	r3, [r3, #20]
 801243c:	2b07      	cmp	r3, #7
 801243e:	d020      	beq.n	8012482 <tcp_close_shutdown_fin+0x66>
 8012440:	2b07      	cmp	r3, #7
 8012442:	dc2b      	bgt.n	801249c <tcp_close_shutdown_fin+0x80>
 8012444:	2b03      	cmp	r3, #3
 8012446:	d002      	beq.n	801244e <tcp_close_shutdown_fin+0x32>
 8012448:	2b04      	cmp	r3, #4
 801244a:	d00d      	beq.n	8012468 <tcp_close_shutdown_fin+0x4c>
 801244c:	e026      	b.n	801249c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801244e:	6878      	ldr	r0, [r7, #4]
 8012450:	f004 fe24 	bl	801709c <tcp_send_fin>
 8012454:	4603      	mov	r3, r0
 8012456:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d11f      	bne.n	80124a0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2205      	movs	r2, #5
 8012464:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012466:	e01b      	b.n	80124a0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f004 fe17 	bl	801709c <tcp_send_fin>
 801246e:	4603      	mov	r3, r0
 8012470:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d114      	bne.n	80124a4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2205      	movs	r2, #5
 801247e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012480:	e010      	b.n	80124a4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f004 fe0a 	bl	801709c <tcp_send_fin>
 8012488:	4603      	mov	r3, r0
 801248a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801248c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d109      	bne.n	80124a8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2209      	movs	r2, #9
 8012498:	751a      	strb	r2, [r3, #20]
      }
      break;
 801249a:	e005      	b.n	80124a8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801249c:	2300      	movs	r3, #0
 801249e:	e01c      	b.n	80124da <tcp_close_shutdown_fin+0xbe>
      break;
 80124a0:	bf00      	nop
 80124a2:	e002      	b.n	80124aa <tcp_close_shutdown_fin+0x8e>
      break;
 80124a4:	bf00      	nop
 80124a6:	e000      	b.n	80124aa <tcp_close_shutdown_fin+0x8e>
      break;
 80124a8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80124aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d103      	bne.n	80124ba <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f004 ff30 	bl	8017318 <tcp_output>
 80124b8:	e00d      	b.n	80124d6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80124ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124c2:	d108      	bne.n	80124d6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	8b5b      	ldrh	r3, [r3, #26]
 80124c8:	f043 0308 	orr.w	r3, r3, #8
 80124cc:	b29a      	uxth	r2, r3
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80124d2:	2300      	movs	r3, #0
 80124d4:	e001      	b.n	80124da <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80124d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80124da:	4618      	mov	r0, r3
 80124dc:	3710      	adds	r7, #16
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
 80124e2:	bf00      	nop
 80124e4:	0801e1a4 	.word	0x0801e1a4
 80124e8:	0801e254 	.word	0x0801e254
 80124ec:	0801e1e8 	.word	0x0801e1e8

080124f0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b082      	sub	sp, #8
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d109      	bne.n	8012512 <tcp_close+0x22>
 80124fe:	4b0f      	ldr	r3, [pc, #60]	; (801253c <tcp_close+0x4c>)
 8012500:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8012504:	490e      	ldr	r1, [pc, #56]	; (8012540 <tcp_close+0x50>)
 8012506:	480f      	ldr	r0, [pc, #60]	; (8012544 <tcp_close+0x54>)
 8012508:	f009 f9ac 	bl	801b864 <iprintf>
 801250c:	f06f 030f 	mvn.w	r3, #15
 8012510:	e00f      	b.n	8012532 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	7d1b      	ldrb	r3, [r3, #20]
 8012516:	2b01      	cmp	r3, #1
 8012518:	d006      	beq.n	8012528 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	8b5b      	ldrh	r3, [r3, #26]
 801251e:	f043 0310 	orr.w	r3, r3, #16
 8012522:	b29a      	uxth	r2, r3
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012528:	2101      	movs	r1, #1
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f7ff fe94 	bl	8012258 <tcp_close_shutdown>
 8012530:	4603      	mov	r3, r0
}
 8012532:	4618      	mov	r0, r3
 8012534:	3708      	adds	r7, #8
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}
 801253a:	bf00      	nop
 801253c:	0801e1a4 	.word	0x0801e1a4
 8012540:	0801e2b4 	.word	0x0801e2b4
 8012544:	0801e1e8 	.word	0x0801e1e8

08012548 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b084      	sub	sp, #16
 801254c:	af00      	add	r7, sp, #0
 801254e:	60f8      	str	r0, [r7, #12]
 8012550:	60b9      	str	r1, [r7, #8]
 8012552:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d109      	bne.n	801256e <tcp_shutdown+0x26>
 801255a:	4b26      	ldr	r3, [pc, #152]	; (80125f4 <tcp_shutdown+0xac>)
 801255c:	f240 2207 	movw	r2, #519	; 0x207
 8012560:	4925      	ldr	r1, [pc, #148]	; (80125f8 <tcp_shutdown+0xb0>)
 8012562:	4826      	ldr	r0, [pc, #152]	; (80125fc <tcp_shutdown+0xb4>)
 8012564:	f009 f97e 	bl	801b864 <iprintf>
 8012568:	f06f 030f 	mvn.w	r3, #15
 801256c:	e03d      	b.n	80125ea <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	7d1b      	ldrb	r3, [r3, #20]
 8012572:	2b01      	cmp	r3, #1
 8012574:	d102      	bne.n	801257c <tcp_shutdown+0x34>
    return ERR_CONN;
 8012576:	f06f 030a 	mvn.w	r3, #10
 801257a:	e036      	b.n	80125ea <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d01b      	beq.n	80125ba <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	8b5b      	ldrh	r3, [r3, #26]
 8012586:	f043 0310 	orr.w	r3, r3, #16
 801258a:	b29a      	uxth	r2, r3
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d005      	beq.n	80125a2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8012596:	2101      	movs	r1, #1
 8012598:	68f8      	ldr	r0, [r7, #12]
 801259a:	f7ff fe5d 	bl	8012258 <tcp_close_shutdown>
 801259e:	4603      	mov	r3, r0
 80125a0:	e023      	b.n	80125ea <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d007      	beq.n	80125ba <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80125ae:	4618      	mov	r0, r3
 80125b0:	f7ff faf4 	bl	8011b9c <pbuf_free>
      pcb->refused_data = NULL;
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	2200      	movs	r2, #0
 80125b8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d013      	beq.n	80125e8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	7d1b      	ldrb	r3, [r3, #20]
 80125c4:	2b04      	cmp	r3, #4
 80125c6:	dc02      	bgt.n	80125ce <tcp_shutdown+0x86>
 80125c8:	2b03      	cmp	r3, #3
 80125ca:	da02      	bge.n	80125d2 <tcp_shutdown+0x8a>
 80125cc:	e009      	b.n	80125e2 <tcp_shutdown+0x9a>
 80125ce:	2b07      	cmp	r3, #7
 80125d0:	d107      	bne.n	80125e2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	b2db      	uxtb	r3, r3
 80125d6:	4619      	mov	r1, r3
 80125d8:	68f8      	ldr	r0, [r7, #12]
 80125da:	f7ff fe3d 	bl	8012258 <tcp_close_shutdown>
 80125de:	4603      	mov	r3, r0
 80125e0:	e003      	b.n	80125ea <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80125e2:	f06f 030a 	mvn.w	r3, #10
 80125e6:	e000      	b.n	80125ea <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80125e8:	2300      	movs	r3, #0
}
 80125ea:	4618      	mov	r0, r3
 80125ec:	3710      	adds	r7, #16
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}
 80125f2:	bf00      	nop
 80125f4:	0801e1a4 	.word	0x0801e1a4
 80125f8:	0801e2cc 	.word	0x0801e2cc
 80125fc:	0801e1e8 	.word	0x0801e1e8

08012600 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b08e      	sub	sp, #56	; 0x38
 8012604:	af04      	add	r7, sp, #16
 8012606:	6078      	str	r0, [r7, #4]
 8012608:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d107      	bne.n	8012620 <tcp_abandon+0x20>
 8012610:	4b52      	ldr	r3, [pc, #328]	; (801275c <tcp_abandon+0x15c>)
 8012612:	f240 223d 	movw	r2, #573	; 0x23d
 8012616:	4952      	ldr	r1, [pc, #328]	; (8012760 <tcp_abandon+0x160>)
 8012618:	4852      	ldr	r0, [pc, #328]	; (8012764 <tcp_abandon+0x164>)
 801261a:	f009 f923 	bl	801b864 <iprintf>
 801261e:	e099      	b.n	8012754 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	7d1b      	ldrb	r3, [r3, #20]
 8012624:	2b01      	cmp	r3, #1
 8012626:	d106      	bne.n	8012636 <tcp_abandon+0x36>
 8012628:	4b4c      	ldr	r3, [pc, #304]	; (801275c <tcp_abandon+0x15c>)
 801262a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801262e:	494e      	ldr	r1, [pc, #312]	; (8012768 <tcp_abandon+0x168>)
 8012630:	484c      	ldr	r0, [pc, #304]	; (8012764 <tcp_abandon+0x164>)
 8012632:	f009 f917 	bl	801b864 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	7d1b      	ldrb	r3, [r3, #20]
 801263a:	2b0a      	cmp	r3, #10
 801263c:	d107      	bne.n	801264e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801263e:	6879      	ldr	r1, [r7, #4]
 8012640:	484a      	ldr	r0, [pc, #296]	; (801276c <tcp_abandon+0x16c>)
 8012642:	f001 fa39 	bl	8013ab8 <tcp_pcb_remove>
    tcp_free(pcb);
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	f7ff fd54 	bl	80120f4 <tcp_free>
 801264c:	e082      	b.n	8012754 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801264e:	2300      	movs	r3, #0
 8012650:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8012652:	2300      	movs	r3, #0
 8012654:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801265a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012660:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012668:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	691b      	ldr	r3, [r3, #16]
 801266e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	7d1b      	ldrb	r3, [r3, #20]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d126      	bne.n	80126c6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	8adb      	ldrh	r3, [r3, #22]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d02e      	beq.n	80126de <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012680:	4b3b      	ldr	r3, [pc, #236]	; (8012770 <tcp_abandon+0x170>)
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	687a      	ldr	r2, [r7, #4]
 8012686:	429a      	cmp	r2, r3
 8012688:	d105      	bne.n	8012696 <tcp_abandon+0x96>
 801268a:	4b39      	ldr	r3, [pc, #228]	; (8012770 <tcp_abandon+0x170>)
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	68db      	ldr	r3, [r3, #12]
 8012690:	4a37      	ldr	r2, [pc, #220]	; (8012770 <tcp_abandon+0x170>)
 8012692:	6013      	str	r3, [r2, #0]
 8012694:	e013      	b.n	80126be <tcp_abandon+0xbe>
 8012696:	4b36      	ldr	r3, [pc, #216]	; (8012770 <tcp_abandon+0x170>)
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	61fb      	str	r3, [r7, #28]
 801269c:	e00c      	b.n	80126b8 <tcp_abandon+0xb8>
 801269e:	69fb      	ldr	r3, [r7, #28]
 80126a0:	68db      	ldr	r3, [r3, #12]
 80126a2:	687a      	ldr	r2, [r7, #4]
 80126a4:	429a      	cmp	r2, r3
 80126a6:	d104      	bne.n	80126b2 <tcp_abandon+0xb2>
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	68da      	ldr	r2, [r3, #12]
 80126ac:	69fb      	ldr	r3, [r7, #28]
 80126ae:	60da      	str	r2, [r3, #12]
 80126b0:	e005      	b.n	80126be <tcp_abandon+0xbe>
 80126b2:	69fb      	ldr	r3, [r7, #28]
 80126b4:	68db      	ldr	r3, [r3, #12]
 80126b6:	61fb      	str	r3, [r7, #28]
 80126b8:	69fb      	ldr	r3, [r7, #28]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d1ef      	bne.n	801269e <tcp_abandon+0x9e>
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	2200      	movs	r2, #0
 80126c2:	60da      	str	r2, [r3, #12]
 80126c4:	e00b      	b.n	80126de <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	8adb      	ldrh	r3, [r3, #22]
 80126ce:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80126d0:	6879      	ldr	r1, [r7, #4]
 80126d2:	4828      	ldr	r0, [pc, #160]	; (8012774 <tcp_abandon+0x174>)
 80126d4:	f001 f9f0 	bl	8013ab8 <tcp_pcb_remove>
 80126d8:	4b27      	ldr	r3, [pc, #156]	; (8012778 <tcp_abandon+0x178>)
 80126da:	2201      	movs	r2, #1
 80126dc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d004      	beq.n	80126f0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126ea:	4618      	mov	r0, r3
 80126ec:	f000 fec4 	bl	8013478 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d004      	beq.n	8012702 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126fc:	4618      	mov	r0, r3
 80126fe:	f000 febb 	bl	8013478 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012706:	2b00      	cmp	r3, #0
 8012708:	d004      	beq.n	8012714 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801270e:	4618      	mov	r0, r3
 8012710:	f000 feb2 	bl	8013478 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012716:	2b00      	cmp	r3, #0
 8012718:	d00e      	beq.n	8012738 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801271a:	6879      	ldr	r1, [r7, #4]
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	3304      	adds	r3, #4
 8012720:	687a      	ldr	r2, [r7, #4]
 8012722:	8b12      	ldrh	r2, [r2, #24]
 8012724:	9202      	str	r2, [sp, #8]
 8012726:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012728:	9201      	str	r2, [sp, #4]
 801272a:	9300      	str	r3, [sp, #0]
 801272c:	460b      	mov	r3, r1
 801272e:	697a      	ldr	r2, [r7, #20]
 8012730:	69b9      	ldr	r1, [r7, #24]
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f005 fbc6 	bl	8017ec4 <tcp_rst>
    }
    last_state = pcb->state;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	7d1b      	ldrb	r3, [r3, #20]
 801273c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f7ff fcd8 	bl	80120f4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d004      	beq.n	8012754 <tcp_abandon+0x154>
 801274a:	693b      	ldr	r3, [r7, #16]
 801274c:	f06f 010c 	mvn.w	r1, #12
 8012750:	68f8      	ldr	r0, [r7, #12]
 8012752:	4798      	blx	r3
  }
}
 8012754:	3728      	adds	r7, #40	; 0x28
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}
 801275a:	bf00      	nop
 801275c:	0801e1a4 	.word	0x0801e1a4
 8012760:	0801e2e8 	.word	0x0801e2e8
 8012764:	0801e1e8 	.word	0x0801e1e8
 8012768:	0801e304 	.word	0x0801e304
 801276c:	2405e898 	.word	0x2405e898
 8012770:	2405e88c 	.word	0x2405e88c
 8012774:	2405e894 	.word	0x2405e894
 8012778:	2405e89c 	.word	0x2405e89c

0801277c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b082      	sub	sp, #8
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012784:	2101      	movs	r1, #1
 8012786:	6878      	ldr	r0, [r7, #4]
 8012788:	f7ff ff3a 	bl	8012600 <tcp_abandon>
}
 801278c:	bf00      	nop
 801278e:	3708      	adds	r7, #8
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}

08012794 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b088      	sub	sp, #32
 8012798:	af00      	add	r7, sp, #0
 801279a:	60f8      	str	r0, [r7, #12]
 801279c:	60b9      	str	r1, [r7, #8]
 801279e:	4613      	mov	r3, r2
 80127a0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80127a2:	2304      	movs	r3, #4
 80127a4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80127a6:	68bb      	ldr	r3, [r7, #8]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d101      	bne.n	80127b0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80127ac:	4b3e      	ldr	r3, [pc, #248]	; (80128a8 <tcp_bind+0x114>)
 80127ae:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d109      	bne.n	80127ca <tcp_bind+0x36>
 80127b6:	4b3d      	ldr	r3, [pc, #244]	; (80128ac <tcp_bind+0x118>)
 80127b8:	f240 22a9 	movw	r2, #681	; 0x2a9
 80127bc:	493c      	ldr	r1, [pc, #240]	; (80128b0 <tcp_bind+0x11c>)
 80127be:	483d      	ldr	r0, [pc, #244]	; (80128b4 <tcp_bind+0x120>)
 80127c0:	f009 f850 	bl	801b864 <iprintf>
 80127c4:	f06f 030f 	mvn.w	r3, #15
 80127c8:	e06a      	b.n	80128a0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	7d1b      	ldrb	r3, [r3, #20]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d009      	beq.n	80127e6 <tcp_bind+0x52>
 80127d2:	4b36      	ldr	r3, [pc, #216]	; (80128ac <tcp_bind+0x118>)
 80127d4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80127d8:	4937      	ldr	r1, [pc, #220]	; (80128b8 <tcp_bind+0x124>)
 80127da:	4836      	ldr	r0, [pc, #216]	; (80128b4 <tcp_bind+0x120>)
 80127dc:	f009 f842 	bl	801b864 <iprintf>
 80127e0:	f06f 0305 	mvn.w	r3, #5
 80127e4:	e05c      	b.n	80128a0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80127e6:	88fb      	ldrh	r3, [r7, #6]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d109      	bne.n	8012800 <tcp_bind+0x6c>
    port = tcp_new_port();
 80127ec:	f000 f9de 	bl	8012bac <tcp_new_port>
 80127f0:	4603      	mov	r3, r0
 80127f2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80127f4:	88fb      	ldrh	r3, [r7, #6]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d135      	bne.n	8012866 <tcp_bind+0xd2>
      return ERR_BUF;
 80127fa:	f06f 0301 	mvn.w	r3, #1
 80127fe:	e04f      	b.n	80128a0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8012800:	2300      	movs	r3, #0
 8012802:	61fb      	str	r3, [r7, #28]
 8012804:	e02b      	b.n	801285e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012806:	4a2d      	ldr	r2, [pc, #180]	; (80128bc <tcp_bind+0x128>)
 8012808:	69fb      	ldr	r3, [r7, #28]
 801280a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	61bb      	str	r3, [r7, #24]
 8012812:	e01e      	b.n	8012852 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8012814:	69bb      	ldr	r3, [r7, #24]
 8012816:	8adb      	ldrh	r3, [r3, #22]
 8012818:	88fa      	ldrh	r2, [r7, #6]
 801281a:	429a      	cmp	r2, r3
 801281c:	d116      	bne.n	801284c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801281e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012820:	2b00      	cmp	r3, #0
 8012822:	d010      	beq.n	8012846 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8012824:	69bb      	ldr	r3, [r7, #24]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d00c      	beq.n	8012846 <tcp_bind+0xb2>
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d009      	beq.n	8012846 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8012832:	68bb      	ldr	r3, [r7, #8]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d005      	beq.n	8012846 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801283a:	69bb      	ldr	r3, [r7, #24]
 801283c:	681a      	ldr	r2, [r3, #0]
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012842:	429a      	cmp	r2, r3
 8012844:	d102      	bne.n	801284c <tcp_bind+0xb8>
              return ERR_USE;
 8012846:	f06f 0307 	mvn.w	r3, #7
 801284a:	e029      	b.n	80128a0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801284c:	69bb      	ldr	r3, [r7, #24]
 801284e:	68db      	ldr	r3, [r3, #12]
 8012850:	61bb      	str	r3, [r7, #24]
 8012852:	69bb      	ldr	r3, [r7, #24]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d1dd      	bne.n	8012814 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	3301      	adds	r3, #1
 801285c:	61fb      	str	r3, [r7, #28]
 801285e:	69fa      	ldr	r2, [r7, #28]
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	429a      	cmp	r2, r3
 8012864:	dbcf      	blt.n	8012806 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8012866:	68bb      	ldr	r3, [r7, #8]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d00c      	beq.n	8012886 <tcp_bind+0xf2>
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d008      	beq.n	8012886 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d002      	beq.n	8012880 <tcp_bind+0xec>
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	e000      	b.n	8012882 <tcp_bind+0xee>
 8012880:	2300      	movs	r3, #0
 8012882:	68fa      	ldr	r2, [r7, #12]
 8012884:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	88fa      	ldrh	r2, [r7, #6]
 801288a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801288c:	4b0c      	ldr	r3, [pc, #48]	; (80128c0 <tcp_bind+0x12c>)
 801288e:	681a      	ldr	r2, [r3, #0]
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	60da      	str	r2, [r3, #12]
 8012894:	4a0a      	ldr	r2, [pc, #40]	; (80128c0 <tcp_bind+0x12c>)
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	6013      	str	r3, [r2, #0]
 801289a:	f005 fcd5 	bl	8018248 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801289e:	2300      	movs	r3, #0
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3720      	adds	r7, #32
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}
 80128a8:	0802027c 	.word	0x0802027c
 80128ac:	0801e1a4 	.word	0x0801e1a4
 80128b0:	0801e338 	.word	0x0801e338
 80128b4:	0801e1e8 	.word	0x0801e1e8
 80128b8:	0801e350 	.word	0x0801e350
 80128bc:	08020254 	.word	0x08020254
 80128c0:	2405e88c 	.word	0x2405e88c

080128c4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b084      	sub	sp, #16
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	60f8      	str	r0, [r7, #12]
 80128cc:	60b9      	str	r1, [r7, #8]
 80128ce:	4613      	mov	r3, r2
 80128d0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d106      	bne.n	80128e6 <tcp_accept_null+0x22>
 80128d8:	4b07      	ldr	r3, [pc, #28]	; (80128f8 <tcp_accept_null+0x34>)
 80128da:	f240 320f 	movw	r2, #783	; 0x30f
 80128de:	4907      	ldr	r1, [pc, #28]	; (80128fc <tcp_accept_null+0x38>)
 80128e0:	4807      	ldr	r0, [pc, #28]	; (8012900 <tcp_accept_null+0x3c>)
 80128e2:	f008 ffbf 	bl	801b864 <iprintf>

  tcp_abort(pcb);
 80128e6:	68b8      	ldr	r0, [r7, #8]
 80128e8:	f7ff ff48 	bl	801277c <tcp_abort>

  return ERR_ABRT;
 80128ec:	f06f 030c 	mvn.w	r3, #12
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3710      	adds	r7, #16
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}
 80128f8:	0801e1a4 	.word	0x0801e1a4
 80128fc:	0801e378 	.word	0x0801e378
 8012900:	0801e1e8 	.word	0x0801e1e8

08012904 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b088      	sub	sp, #32
 8012908:	af00      	add	r7, sp, #0
 801290a:	60f8      	str	r0, [r7, #12]
 801290c:	460b      	mov	r3, r1
 801290e:	607a      	str	r2, [r7, #4]
 8012910:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8012912:	2300      	movs	r3, #0
 8012914:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d109      	bne.n	8012930 <tcp_listen_with_backlog_and_err+0x2c>
 801291c:	4b47      	ldr	r3, [pc, #284]	; (8012a3c <tcp_listen_with_backlog_and_err+0x138>)
 801291e:	f240 3259 	movw	r2, #857	; 0x359
 8012922:	4947      	ldr	r1, [pc, #284]	; (8012a40 <tcp_listen_with_backlog_and_err+0x13c>)
 8012924:	4847      	ldr	r0, [pc, #284]	; (8012a44 <tcp_listen_with_backlog_and_err+0x140>)
 8012926:	f008 ff9d 	bl	801b864 <iprintf>
 801292a:	23f0      	movs	r3, #240	; 0xf0
 801292c:	76fb      	strb	r3, [r7, #27]
 801292e:	e079      	b.n	8012a24 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	7d1b      	ldrb	r3, [r3, #20]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d009      	beq.n	801294c <tcp_listen_with_backlog_and_err+0x48>
 8012938:	4b40      	ldr	r3, [pc, #256]	; (8012a3c <tcp_listen_with_backlog_and_err+0x138>)
 801293a:	f240 325a 	movw	r2, #858	; 0x35a
 801293e:	4942      	ldr	r1, [pc, #264]	; (8012a48 <tcp_listen_with_backlog_and_err+0x144>)
 8012940:	4840      	ldr	r0, [pc, #256]	; (8012a44 <tcp_listen_with_backlog_and_err+0x140>)
 8012942:	f008 ff8f 	bl	801b864 <iprintf>
 8012946:	23f1      	movs	r3, #241	; 0xf1
 8012948:	76fb      	strb	r3, [r7, #27]
 801294a:	e06b      	b.n	8012a24 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	7d1b      	ldrb	r3, [r3, #20]
 8012950:	2b01      	cmp	r3, #1
 8012952:	d104      	bne.n	801295e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8012958:	23f7      	movs	r3, #247	; 0xf7
 801295a:	76fb      	strb	r3, [r7, #27]
    goto done;
 801295c:	e062      	b.n	8012a24 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801295e:	2002      	movs	r0, #2
 8012960:	f7fe f9fe 	bl	8010d60 <memp_malloc>
 8012964:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8012966:	69fb      	ldr	r3, [r7, #28]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d102      	bne.n	8012972 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 801296c:	23ff      	movs	r3, #255	; 0xff
 801296e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8012970:	e058      	b.n	8012a24 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	691a      	ldr	r2, [r3, #16]
 8012976:	69fb      	ldr	r3, [r7, #28]
 8012978:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	8ada      	ldrh	r2, [r3, #22]
 801297e:	69fb      	ldr	r3, [r7, #28]
 8012980:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8012982:	69fb      	ldr	r3, [r7, #28]
 8012984:	2201      	movs	r2, #1
 8012986:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	7d5a      	ldrb	r2, [r3, #21]
 801298c:	69fb      	ldr	r3, [r7, #28]
 801298e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	7a5a      	ldrb	r2, [r3, #9]
 8012994:	69fb      	ldr	r3, [r7, #28]
 8012996:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8012998:	69fb      	ldr	r3, [r7, #28]
 801299a:	2200      	movs	r2, #0
 801299c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	7ada      	ldrb	r2, [r3, #11]
 80129a2:	69fb      	ldr	r3, [r7, #28]
 80129a4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	7a9a      	ldrb	r2, [r3, #10]
 80129aa:	69fb      	ldr	r3, [r7, #28]
 80129ac:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	681a      	ldr	r2, [r3, #0]
 80129b2:	69fb      	ldr	r3, [r7, #28]
 80129b4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	8adb      	ldrh	r3, [r3, #22]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d021      	beq.n	8012a02 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80129be:	4b23      	ldr	r3, [pc, #140]	; (8012a4c <tcp_listen_with_backlog_and_err+0x148>)
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	68fa      	ldr	r2, [r7, #12]
 80129c4:	429a      	cmp	r2, r3
 80129c6:	d105      	bne.n	80129d4 <tcp_listen_with_backlog_and_err+0xd0>
 80129c8:	4b20      	ldr	r3, [pc, #128]	; (8012a4c <tcp_listen_with_backlog_and_err+0x148>)
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	68db      	ldr	r3, [r3, #12]
 80129ce:	4a1f      	ldr	r2, [pc, #124]	; (8012a4c <tcp_listen_with_backlog_and_err+0x148>)
 80129d0:	6013      	str	r3, [r2, #0]
 80129d2:	e013      	b.n	80129fc <tcp_listen_with_backlog_and_err+0xf8>
 80129d4:	4b1d      	ldr	r3, [pc, #116]	; (8012a4c <tcp_listen_with_backlog_and_err+0x148>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	617b      	str	r3, [r7, #20]
 80129da:	e00c      	b.n	80129f6 <tcp_listen_with_backlog_and_err+0xf2>
 80129dc:	697b      	ldr	r3, [r7, #20]
 80129de:	68db      	ldr	r3, [r3, #12]
 80129e0:	68fa      	ldr	r2, [r7, #12]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d104      	bne.n	80129f0 <tcp_listen_with_backlog_and_err+0xec>
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	68da      	ldr	r2, [r3, #12]
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	60da      	str	r2, [r3, #12]
 80129ee:	e005      	b.n	80129fc <tcp_listen_with_backlog_and_err+0xf8>
 80129f0:	697b      	ldr	r3, [r7, #20]
 80129f2:	68db      	ldr	r3, [r3, #12]
 80129f4:	617b      	str	r3, [r7, #20]
 80129f6:	697b      	ldr	r3, [r7, #20]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d1ef      	bne.n	80129dc <tcp_listen_with_backlog_and_err+0xd8>
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	2200      	movs	r2, #0
 8012a00:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8012a02:	68f8      	ldr	r0, [r7, #12]
 8012a04:	f7ff fb76 	bl	80120f4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8012a08:	69fb      	ldr	r3, [r7, #28]
 8012a0a:	4a11      	ldr	r2, [pc, #68]	; (8012a50 <tcp_listen_with_backlog_and_err+0x14c>)
 8012a0c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8012a0e:	4b11      	ldr	r3, [pc, #68]	; (8012a54 <tcp_listen_with_backlog_and_err+0x150>)
 8012a10:	681a      	ldr	r2, [r3, #0]
 8012a12:	69fb      	ldr	r3, [r7, #28]
 8012a14:	60da      	str	r2, [r3, #12]
 8012a16:	4a0f      	ldr	r2, [pc, #60]	; (8012a54 <tcp_listen_with_backlog_and_err+0x150>)
 8012a18:	69fb      	ldr	r3, [r7, #28]
 8012a1a:	6013      	str	r3, [r2, #0]
 8012a1c:	f005 fc14 	bl	8018248 <tcp_timer_needed>
  res = ERR_OK;
 8012a20:	2300      	movs	r3, #0
 8012a22:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d002      	beq.n	8012a30 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	7efa      	ldrb	r2, [r7, #27]
 8012a2e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8012a30:	69fb      	ldr	r3, [r7, #28]
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3720      	adds	r7, #32
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	0801e1a4 	.word	0x0801e1a4
 8012a40:	0801e398 	.word	0x0801e398
 8012a44:	0801e1e8 	.word	0x0801e1e8
 8012a48:	0801e3c8 	.word	0x0801e3c8
 8012a4c:	2405e88c 	.word	0x2405e88c
 8012a50:	080128c5 	.word	0x080128c5
 8012a54:	2405e890 	.word	0x2405e890

08012a58 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b084      	sub	sp, #16
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d106      	bne.n	8012a74 <tcp_update_rcv_ann_wnd+0x1c>
 8012a66:	4b25      	ldr	r3, [pc, #148]	; (8012afc <tcp_update_rcv_ann_wnd+0xa4>)
 8012a68:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012a6c:	4924      	ldr	r1, [pc, #144]	; (8012b00 <tcp_update_rcv_ann_wnd+0xa8>)
 8012a6e:	4825      	ldr	r0, [pc, #148]	; (8012b04 <tcp_update_rcv_ann_wnd+0xac>)
 8012a70:	f008 fef8 	bl	801b864 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a78:	687a      	ldr	r2, [r7, #4]
 8012a7a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012a7c:	4413      	add	r3, r2
 8012a7e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a84:	687a      	ldr	r2, [r7, #4]
 8012a86:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012a88:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8012a8c:	bf28      	it	cs
 8012a8e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8012a92:	b292      	uxth	r2, r2
 8012a94:	4413      	add	r3, r2
 8012a96:	68fa      	ldr	r2, [r7, #12]
 8012a98:	1ad3      	subs	r3, r2, r3
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	db08      	blt.n	8012ab0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aaa:	68fa      	ldr	r2, [r7, #12]
 8012aac:	1ad3      	subs	r3, r2, r3
 8012aae:	e020      	b.n	8012af2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ab8:	1ad3      	subs	r3, r2, r3
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	dd03      	ble.n	8012ac6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012ac4:	e014      	b.n	8012af0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ace:	1ad3      	subs	r3, r2, r3
 8012ad0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012ad2:	68bb      	ldr	r3, [r7, #8]
 8012ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ad8:	d306      	bcc.n	8012ae8 <tcp_update_rcv_ann_wnd+0x90>
 8012ada:	4b08      	ldr	r3, [pc, #32]	; (8012afc <tcp_update_rcv_ann_wnd+0xa4>)
 8012adc:	f240 32b6 	movw	r2, #950	; 0x3b6
 8012ae0:	4909      	ldr	r1, [pc, #36]	; (8012b08 <tcp_update_rcv_ann_wnd+0xb0>)
 8012ae2:	4808      	ldr	r0, [pc, #32]	; (8012b04 <tcp_update_rcv_ann_wnd+0xac>)
 8012ae4:	f008 febe 	bl	801b864 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012ae8:	68bb      	ldr	r3, [r7, #8]
 8012aea:	b29a      	uxth	r2, r3
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012af0:	2300      	movs	r3, #0
  }
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	3710      	adds	r7, #16
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bd80      	pop	{r7, pc}
 8012afa:	bf00      	nop
 8012afc:	0801e1a4 	.word	0x0801e1a4
 8012b00:	0801e400 	.word	0x0801e400
 8012b04:	0801e1e8 	.word	0x0801e1e8
 8012b08:	0801e424 	.word	0x0801e424

08012b0c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b084      	sub	sp, #16
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
 8012b14:	460b      	mov	r3, r1
 8012b16:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d107      	bne.n	8012b2e <tcp_recved+0x22>
 8012b1e:	4b1f      	ldr	r3, [pc, #124]	; (8012b9c <tcp_recved+0x90>)
 8012b20:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012b24:	491e      	ldr	r1, [pc, #120]	; (8012ba0 <tcp_recved+0x94>)
 8012b26:	481f      	ldr	r0, [pc, #124]	; (8012ba4 <tcp_recved+0x98>)
 8012b28:	f008 fe9c 	bl	801b864 <iprintf>
 8012b2c:	e032      	b.n	8012b94 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	7d1b      	ldrb	r3, [r3, #20]
 8012b32:	2b01      	cmp	r3, #1
 8012b34:	d106      	bne.n	8012b44 <tcp_recved+0x38>
 8012b36:	4b19      	ldr	r3, [pc, #100]	; (8012b9c <tcp_recved+0x90>)
 8012b38:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012b3c:	491a      	ldr	r1, [pc, #104]	; (8012ba8 <tcp_recved+0x9c>)
 8012b3e:	4819      	ldr	r0, [pc, #100]	; (8012ba4 <tcp_recved+0x98>)
 8012b40:	f008 fe90 	bl	801b864 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012b48:	887b      	ldrh	r3, [r7, #2]
 8012b4a:	4413      	add	r3, r2
 8012b4c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012b4e:	89fb      	ldrh	r3, [r7, #14]
 8012b50:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012b54:	d804      	bhi.n	8012b60 <tcp_recved+0x54>
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b5a:	89fa      	ldrh	r2, [r7, #14]
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	d204      	bcs.n	8012b6a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012b66:	851a      	strh	r2, [r3, #40]	; 0x28
 8012b68:	e002      	b.n	8012b70 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	89fa      	ldrh	r2, [r7, #14]
 8012b6e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012b70:	6878      	ldr	r0, [r7, #4]
 8012b72:	f7ff ff71 	bl	8012a58 <tcp_update_rcv_ann_wnd>
 8012b76:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012b78:	68bb      	ldr	r3, [r7, #8]
 8012b7a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012b7e:	d309      	bcc.n	8012b94 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	8b5b      	ldrh	r3, [r3, #26]
 8012b84:	f043 0302 	orr.w	r3, r3, #2
 8012b88:	b29a      	uxth	r2, r3
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f004 fbc2 	bl	8017318 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012b94:	3710      	adds	r7, #16
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}
 8012b9a:	bf00      	nop
 8012b9c:	0801e1a4 	.word	0x0801e1a4
 8012ba0:	0801e440 	.word	0x0801e440
 8012ba4:	0801e1e8 	.word	0x0801e1e8
 8012ba8:	0801e458 	.word	0x0801e458

08012bac <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012bac:	b480      	push	{r7}
 8012bae:	b083      	sub	sp, #12
 8012bb0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012bb6:	4b1e      	ldr	r3, [pc, #120]	; (8012c30 <tcp_new_port+0x84>)
 8012bb8:	881b      	ldrh	r3, [r3, #0]
 8012bba:	3301      	adds	r3, #1
 8012bbc:	b29a      	uxth	r2, r3
 8012bbe:	4b1c      	ldr	r3, [pc, #112]	; (8012c30 <tcp_new_port+0x84>)
 8012bc0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8012bc2:	4b1b      	ldr	r3, [pc, #108]	; (8012c30 <tcp_new_port+0x84>)
 8012bc4:	881b      	ldrh	r3, [r3, #0]
 8012bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012bca:	4293      	cmp	r3, r2
 8012bcc:	d103      	bne.n	8012bd6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8012bce:	4b18      	ldr	r3, [pc, #96]	; (8012c30 <tcp_new_port+0x84>)
 8012bd0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012bd4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	71fb      	strb	r3, [r7, #7]
 8012bda:	e01e      	b.n	8012c1a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012bdc:	79fb      	ldrb	r3, [r7, #7]
 8012bde:	4a15      	ldr	r2, [pc, #84]	; (8012c34 <tcp_new_port+0x88>)
 8012be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	603b      	str	r3, [r7, #0]
 8012be8:	e011      	b.n	8012c0e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	8ada      	ldrh	r2, [r3, #22]
 8012bee:	4b10      	ldr	r3, [pc, #64]	; (8012c30 <tcp_new_port+0x84>)
 8012bf0:	881b      	ldrh	r3, [r3, #0]
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	d108      	bne.n	8012c08 <tcp_new_port+0x5c>
        n++;
 8012bf6:	88bb      	ldrh	r3, [r7, #4]
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012bfc:	88bb      	ldrh	r3, [r7, #4]
 8012bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012c02:	d3d8      	bcc.n	8012bb6 <tcp_new_port+0xa>
          return 0;
 8012c04:	2300      	movs	r3, #0
 8012c06:	e00d      	b.n	8012c24 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	68db      	ldr	r3, [r3, #12]
 8012c0c:	603b      	str	r3, [r7, #0]
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d1ea      	bne.n	8012bea <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012c14:	79fb      	ldrb	r3, [r7, #7]
 8012c16:	3301      	adds	r3, #1
 8012c18:	71fb      	strb	r3, [r7, #7]
 8012c1a:	79fb      	ldrb	r3, [r7, #7]
 8012c1c:	2b03      	cmp	r3, #3
 8012c1e:	d9dd      	bls.n	8012bdc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8012c20:	4b03      	ldr	r3, [pc, #12]	; (8012c30 <tcp_new_port+0x84>)
 8012c22:	881b      	ldrh	r3, [r3, #0]
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	370c      	adds	r7, #12
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2e:	4770      	bx	lr
 8012c30:	24000028 	.word	0x24000028
 8012c34:	08020254 	.word	0x08020254

08012c38 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012c38:	b5b0      	push	{r4, r5, r7, lr}
 8012c3a:	b090      	sub	sp, #64	; 0x40
 8012c3c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012c44:	4b94      	ldr	r3, [pc, #592]	; (8012e98 <tcp_slowtmr+0x260>)
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	3301      	adds	r3, #1
 8012c4a:	4a93      	ldr	r2, [pc, #588]	; (8012e98 <tcp_slowtmr+0x260>)
 8012c4c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012c4e:	4b93      	ldr	r3, [pc, #588]	; (8012e9c <tcp_slowtmr+0x264>)
 8012c50:	781b      	ldrb	r3, [r3, #0]
 8012c52:	3301      	adds	r3, #1
 8012c54:	b2da      	uxtb	r2, r3
 8012c56:	4b91      	ldr	r3, [pc, #580]	; (8012e9c <tcp_slowtmr+0x264>)
 8012c58:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8012c5e:	4b90      	ldr	r3, [pc, #576]	; (8012ea0 <tcp_slowtmr+0x268>)
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012c64:	e29d      	b.n	80131a2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c68:	7d1b      	ldrb	r3, [r3, #20]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d106      	bne.n	8012c7c <tcp_slowtmr+0x44>
 8012c6e:	4b8d      	ldr	r3, [pc, #564]	; (8012ea4 <tcp_slowtmr+0x26c>)
 8012c70:	f240 42be 	movw	r2, #1214	; 0x4be
 8012c74:	498c      	ldr	r1, [pc, #560]	; (8012ea8 <tcp_slowtmr+0x270>)
 8012c76:	488d      	ldr	r0, [pc, #564]	; (8012eac <tcp_slowtmr+0x274>)
 8012c78:	f008 fdf4 	bl	801b864 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c7e:	7d1b      	ldrb	r3, [r3, #20]
 8012c80:	2b01      	cmp	r3, #1
 8012c82:	d106      	bne.n	8012c92 <tcp_slowtmr+0x5a>
 8012c84:	4b87      	ldr	r3, [pc, #540]	; (8012ea4 <tcp_slowtmr+0x26c>)
 8012c86:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8012c8a:	4989      	ldr	r1, [pc, #548]	; (8012eb0 <tcp_slowtmr+0x278>)
 8012c8c:	4887      	ldr	r0, [pc, #540]	; (8012eac <tcp_slowtmr+0x274>)
 8012c8e:	f008 fde9 	bl	801b864 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c94:	7d1b      	ldrb	r3, [r3, #20]
 8012c96:	2b0a      	cmp	r3, #10
 8012c98:	d106      	bne.n	8012ca8 <tcp_slowtmr+0x70>
 8012c9a:	4b82      	ldr	r3, [pc, #520]	; (8012ea4 <tcp_slowtmr+0x26c>)
 8012c9c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8012ca0:	4984      	ldr	r1, [pc, #528]	; (8012eb4 <tcp_slowtmr+0x27c>)
 8012ca2:	4882      	ldr	r0, [pc, #520]	; (8012eac <tcp_slowtmr+0x274>)
 8012ca4:	f008 fdde 	bl	801b864 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012caa:	7f9a      	ldrb	r2, [r3, #30]
 8012cac:	4b7b      	ldr	r3, [pc, #492]	; (8012e9c <tcp_slowtmr+0x264>)
 8012cae:	781b      	ldrb	r3, [r3, #0]
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	d105      	bne.n	8012cc0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cb6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cba:	68db      	ldr	r3, [r3, #12]
 8012cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8012cbe:	e270      	b.n	80131a2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8012cc0:	4b76      	ldr	r3, [pc, #472]	; (8012e9c <tcp_slowtmr+0x264>)
 8012cc2:	781a      	ldrb	r2, [r3, #0]
 8012cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cc6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8012cc8:	2300      	movs	r3, #0
 8012cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd6:	7d1b      	ldrb	r3, [r3, #20]
 8012cd8:	2b02      	cmp	r3, #2
 8012cda:	d10a      	bne.n	8012cf2 <tcp_slowtmr+0xba>
 8012cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012ce2:	2b05      	cmp	r3, #5
 8012ce4:	d905      	bls.n	8012cf2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8012ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cea:	3301      	adds	r3, #1
 8012cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012cf0:	e11e      	b.n	8012f30 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012cf8:	2b0b      	cmp	r3, #11
 8012cfa:	d905      	bls.n	8012d08 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d00:	3301      	adds	r3, #1
 8012d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012d06:	e113      	b.n	8012f30 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d0a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d075      	beq.n	8012dfe <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d006      	beq.n	8012d28 <tcp_slowtmr+0xf0>
 8012d1a:	4b62      	ldr	r3, [pc, #392]	; (8012ea4 <tcp_slowtmr+0x26c>)
 8012d1c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8012d20:	4965      	ldr	r1, [pc, #404]	; (8012eb8 <tcp_slowtmr+0x280>)
 8012d22:	4862      	ldr	r0, [pc, #392]	; (8012eac <tcp_slowtmr+0x274>)
 8012d24:	f008 fd9e 	bl	801b864 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d106      	bne.n	8012d3e <tcp_slowtmr+0x106>
 8012d30:	4b5c      	ldr	r3, [pc, #368]	; (8012ea4 <tcp_slowtmr+0x26c>)
 8012d32:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012d36:	4961      	ldr	r1, [pc, #388]	; (8012ebc <tcp_slowtmr+0x284>)
 8012d38:	485c      	ldr	r0, [pc, #368]	; (8012eac <tcp_slowtmr+0x274>)
 8012d3a:	f008 fd93 	bl	801b864 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012d44:	2b0b      	cmp	r3, #11
 8012d46:	d905      	bls.n	8012d54 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d4c:	3301      	adds	r3, #1
 8012d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012d52:	e0ed      	b.n	8012f30 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d56:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012d5a:	3b01      	subs	r3, #1
 8012d5c:	4a58      	ldr	r2, [pc, #352]	; (8012ec0 <tcp_slowtmr+0x288>)
 8012d5e:	5cd3      	ldrb	r3, [r2, r3]
 8012d60:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012d68:	7c7a      	ldrb	r2, [r7, #17]
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	d907      	bls.n	8012d7e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8012d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d70:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012d74:	3301      	adds	r3, #1
 8012d76:	b2da      	uxtb	r2, r3
 8012d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d7a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8012d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d80:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012d84:	7c7a      	ldrb	r2, [r7, #17]
 8012d86:	429a      	cmp	r2, r3
 8012d88:	f200 80d2 	bhi.w	8012f30 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8012d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d108      	bne.n	8012dac <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012d9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d9c:	f005 f986 	bl	80180ac <tcp_zero_window_probe>
 8012da0:	4603      	mov	r3, r0
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d014      	beq.n	8012dd0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8012da6:	2300      	movs	r3, #0
 8012da8:	623b      	str	r3, [r7, #32]
 8012daa:	e011      	b.n	8012dd0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012db2:	4619      	mov	r1, r3
 8012db4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012db6:	f004 f829 	bl	8016e0c <tcp_split_unsent_seg>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d107      	bne.n	8012dd0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8012dc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012dc2:	f004 faa9 	bl	8017318 <tcp_output>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d101      	bne.n	8012dd0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8012dd0:	6a3b      	ldr	r3, [r7, #32]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	f000 80ac 	beq.w	8012f30 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8012dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dda:	2200      	movs	r2, #0
 8012ddc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012de6:	2b06      	cmp	r3, #6
 8012de8:	f200 80a2 	bhi.w	8012f30 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8012dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012df2:	3301      	adds	r3, #1
 8012df4:	b2da      	uxtb	r2, r3
 8012df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012dfc:	e098      	b.n	8012f30 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	db0f      	blt.n	8012e28 <tcp_slowtmr+0x1f0>
 8012e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e0a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012e0e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012e12:	4293      	cmp	r3, r2
 8012e14:	d008      	beq.n	8012e28 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8012e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e18:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012e1c:	b29b      	uxth	r3, r3
 8012e1e:	3301      	adds	r3, #1
 8012e20:	b29b      	uxth	r3, r3
 8012e22:	b21a      	sxth	r2, r3
 8012e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e26:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8012e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e2a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8012e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e30:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012e34:	429a      	cmp	r2, r3
 8012e36:	db7b      	blt.n	8012f30 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012e38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012e3a:	f004 fd71 	bl	8017920 <tcp_rexmit_rto_prepare>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d007      	beq.n	8012e54 <tcp_slowtmr+0x21c>
 8012e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d171      	bne.n	8012f30 <tcp_slowtmr+0x2f8>
 8012e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d06d      	beq.n	8012f30 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8012e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e56:	7d1b      	ldrb	r3, [r3, #20]
 8012e58:	2b02      	cmp	r3, #2
 8012e5a:	d03a      	beq.n	8012ed2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e62:	2b0c      	cmp	r3, #12
 8012e64:	bf28      	it	cs
 8012e66:	230c      	movcs	r3, #12
 8012e68:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012e70:	10db      	asrs	r3, r3, #3
 8012e72:	b21b      	sxth	r3, r3
 8012e74:	461a      	mov	r2, r3
 8012e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e78:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012e7c:	4413      	add	r3, r2
 8012e7e:	7efa      	ldrb	r2, [r7, #27]
 8012e80:	4910      	ldr	r1, [pc, #64]	; (8012ec4 <tcp_slowtmr+0x28c>)
 8012e82:	5c8a      	ldrb	r2, [r1, r2]
 8012e84:	4093      	lsls	r3, r2
 8012e86:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8012e8e:	4293      	cmp	r3, r2
 8012e90:	dc1a      	bgt.n	8012ec8 <tcp_slowtmr+0x290>
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	b21a      	sxth	r2, r3
 8012e96:	e019      	b.n	8012ecc <tcp_slowtmr+0x294>
 8012e98:	2405e888 	.word	0x2405e888
 8012e9c:	2405e89e 	.word	0x2405e89e
 8012ea0:	2405e894 	.word	0x2405e894
 8012ea4:	0801e1a4 	.word	0x0801e1a4
 8012ea8:	0801e4e8 	.word	0x0801e4e8
 8012eac:	0801e1e8 	.word	0x0801e1e8
 8012eb0:	0801e514 	.word	0x0801e514
 8012eb4:	0801e540 	.word	0x0801e540
 8012eb8:	0801e570 	.word	0x0801e570
 8012ebc:	0801e5a4 	.word	0x0801e5a4
 8012ec0:	0802024c 	.word	0x0802024c
 8012ec4:	0802023c 	.word	0x0802023c
 8012ec8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ece:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8012ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ee0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012ee4:	4293      	cmp	r3, r2
 8012ee6:	bf28      	it	cs
 8012ee8:	4613      	movcs	r3, r2
 8012eea:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012eec:	8a7b      	ldrh	r3, [r7, #18]
 8012eee:	085b      	lsrs	r3, r3, #1
 8012ef0:	b29a      	uxth	r2, r3
 8012ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012efa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f02:	005b      	lsls	r3, r3, #1
 8012f04:	b29b      	uxth	r3, r3
 8012f06:	429a      	cmp	r2, r3
 8012f08:	d206      	bcs.n	8012f18 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f0e:	005b      	lsls	r3, r3, #1
 8012f10:	b29a      	uxth	r2, r3
 8012f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8012f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f1a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8012f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f24:	2200      	movs	r2, #0
 8012f26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8012f2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f2c:	f004 fd68 	bl	8017a00 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8012f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f32:	7d1b      	ldrb	r3, [r3, #20]
 8012f34:	2b06      	cmp	r3, #6
 8012f36:	d111      	bne.n	8012f5c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f3a:	8b5b      	ldrh	r3, [r3, #26]
 8012f3c:	f003 0310 	and.w	r3, r3, #16
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d00b      	beq.n	8012f5c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012f44:	4b9c      	ldr	r3, [pc, #624]	; (80131b8 <tcp_slowtmr+0x580>)
 8012f46:	681a      	ldr	r2, [r3, #0]
 8012f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f4a:	6a1b      	ldr	r3, [r3, #32]
 8012f4c:	1ad3      	subs	r3, r2, r3
 8012f4e:	2b28      	cmp	r3, #40	; 0x28
 8012f50:	d904      	bls.n	8012f5c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8012f52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f56:	3301      	adds	r3, #1
 8012f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f5e:	7a5b      	ldrb	r3, [r3, #9]
 8012f60:	f003 0308 	and.w	r3, r3, #8
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d04a      	beq.n	8012ffe <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8012f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f6a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012f6c:	2b04      	cmp	r3, #4
 8012f6e:	d003      	beq.n	8012f78 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8012f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f72:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012f74:	2b07      	cmp	r3, #7
 8012f76:	d142      	bne.n	8012ffe <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012f78:	4b8f      	ldr	r3, [pc, #572]	; (80131b8 <tcp_slowtmr+0x580>)
 8012f7a:	681a      	ldr	r2, [r3, #0]
 8012f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f7e:	6a1b      	ldr	r3, [r3, #32]
 8012f80:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f84:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012f88:	4b8c      	ldr	r3, [pc, #560]	; (80131bc <tcp_slowtmr+0x584>)
 8012f8a:	440b      	add	r3, r1
 8012f8c:	498c      	ldr	r1, [pc, #560]	; (80131c0 <tcp_slowtmr+0x588>)
 8012f8e:	fba1 1303 	umull	r1, r3, r1, r3
 8012f92:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012f94:	429a      	cmp	r2, r3
 8012f96:	d90a      	bls.n	8012fae <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8012f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f9c:	3301      	adds	r3, #1
 8012f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8012fa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012fa6:	3301      	adds	r3, #1
 8012fa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012fac:	e027      	b.n	8012ffe <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012fae:	4b82      	ldr	r3, [pc, #520]	; (80131b8 <tcp_slowtmr+0x580>)
 8012fb0:	681a      	ldr	r2, [r3, #0]
 8012fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fb4:	6a1b      	ldr	r3, [r3, #32]
 8012fb6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fba:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fc0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	4b7f      	ldr	r3, [pc, #508]	; (80131c4 <tcp_slowtmr+0x58c>)
 8012fc8:	fb00 f303 	mul.w	r3, r0, r3
 8012fcc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012fce:	497c      	ldr	r1, [pc, #496]	; (80131c0 <tcp_slowtmr+0x588>)
 8012fd0:	fba1 1303 	umull	r1, r3, r1, r3
 8012fd4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d911      	bls.n	8012ffe <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8012fda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012fdc:	f005 f826 	bl	801802c <tcp_keepalive>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8012fe6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d107      	bne.n	8012ffe <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8012fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	b2da      	uxtb	r2, r3
 8012ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ffa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8012ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013002:	2b00      	cmp	r3, #0
 8013004:	d011      	beq.n	801302a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8013006:	4b6c      	ldr	r3, [pc, #432]	; (80131b8 <tcp_slowtmr+0x580>)
 8013008:	681a      	ldr	r2, [r3, #0]
 801300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801300c:	6a1b      	ldr	r3, [r3, #32]
 801300e:	1ad2      	subs	r2, r2, r3
 8013010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013012:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013016:	4619      	mov	r1, r3
 8013018:	460b      	mov	r3, r1
 801301a:	005b      	lsls	r3, r3, #1
 801301c:	440b      	add	r3, r1
 801301e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8013020:	429a      	cmp	r2, r3
 8013022:	d302      	bcc.n	801302a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8013024:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013026:	f000 feab 	bl	8013d80 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801302c:	7d1b      	ldrb	r3, [r3, #20]
 801302e:	2b03      	cmp	r3, #3
 8013030:	d10b      	bne.n	801304a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013032:	4b61      	ldr	r3, [pc, #388]	; (80131b8 <tcp_slowtmr+0x580>)
 8013034:	681a      	ldr	r2, [r3, #0]
 8013036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013038:	6a1b      	ldr	r3, [r3, #32]
 801303a:	1ad3      	subs	r3, r2, r3
 801303c:	2b28      	cmp	r3, #40	; 0x28
 801303e:	d904      	bls.n	801304a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8013040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013044:	3301      	adds	r3, #1
 8013046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801304a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801304c:	7d1b      	ldrb	r3, [r3, #20]
 801304e:	2b09      	cmp	r3, #9
 8013050:	d10b      	bne.n	801306a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013052:	4b59      	ldr	r3, [pc, #356]	; (80131b8 <tcp_slowtmr+0x580>)
 8013054:	681a      	ldr	r2, [r3, #0]
 8013056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013058:	6a1b      	ldr	r3, [r3, #32]
 801305a:	1ad3      	subs	r3, r2, r3
 801305c:	2bf0      	cmp	r3, #240	; 0xf0
 801305e:	d904      	bls.n	801306a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8013060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013064:	3301      	adds	r3, #1
 8013066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801306a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801306e:	2b00      	cmp	r3, #0
 8013070:	d060      	beq.n	8013134 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8013072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013078:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801307a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801307c:	f000 fccc 	bl	8013a18 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8013080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013082:	2b00      	cmp	r3, #0
 8013084:	d010      	beq.n	80130a8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8013086:	4b50      	ldr	r3, [pc, #320]	; (80131c8 <tcp_slowtmr+0x590>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801308c:	429a      	cmp	r2, r3
 801308e:	d106      	bne.n	801309e <tcp_slowtmr+0x466>
 8013090:	4b4e      	ldr	r3, [pc, #312]	; (80131cc <tcp_slowtmr+0x594>)
 8013092:	f240 526d 	movw	r2, #1389	; 0x56d
 8013096:	494e      	ldr	r1, [pc, #312]	; (80131d0 <tcp_slowtmr+0x598>)
 8013098:	484e      	ldr	r0, [pc, #312]	; (80131d4 <tcp_slowtmr+0x59c>)
 801309a:	f008 fbe3 	bl	801b864 <iprintf>
        prev->next = pcb->next;
 801309e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a0:	68da      	ldr	r2, [r3, #12]
 80130a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130a4:	60da      	str	r2, [r3, #12]
 80130a6:	e00f      	b.n	80130c8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80130a8:	4b47      	ldr	r3, [pc, #284]	; (80131c8 <tcp_slowtmr+0x590>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d006      	beq.n	80130c0 <tcp_slowtmr+0x488>
 80130b2:	4b46      	ldr	r3, [pc, #280]	; (80131cc <tcp_slowtmr+0x594>)
 80130b4:	f240 5271 	movw	r2, #1393	; 0x571
 80130b8:	4947      	ldr	r1, [pc, #284]	; (80131d8 <tcp_slowtmr+0x5a0>)
 80130ba:	4846      	ldr	r0, [pc, #280]	; (80131d4 <tcp_slowtmr+0x59c>)
 80130bc:	f008 fbd2 	bl	801b864 <iprintf>
        tcp_active_pcbs = pcb->next;
 80130c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130c2:	68db      	ldr	r3, [r3, #12]
 80130c4:	4a40      	ldr	r2, [pc, #256]	; (80131c8 <tcp_slowtmr+0x590>)
 80130c6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80130c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d013      	beq.n	80130f8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80130d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130d2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80130d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80130d8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80130da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130dc:	3304      	adds	r3, #4
 80130de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130e0:	8ad2      	ldrh	r2, [r2, #22]
 80130e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80130e4:	8b09      	ldrh	r1, [r1, #24]
 80130e6:	9102      	str	r1, [sp, #8]
 80130e8:	9201      	str	r2, [sp, #4]
 80130ea:	9300      	str	r3, [sp, #0]
 80130ec:	462b      	mov	r3, r5
 80130ee:	4622      	mov	r2, r4
 80130f0:	4601      	mov	r1, r0
 80130f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80130f4:	f004 fee6 	bl	8017ec4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80130f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130fa:	691b      	ldr	r3, [r3, #16]
 80130fc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80130fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013100:	7d1b      	ldrb	r3, [r3, #20]
 8013102:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8013104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013106:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801310a:	68db      	ldr	r3, [r3, #12]
 801310c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801310e:	6838      	ldr	r0, [r7, #0]
 8013110:	f7fe fff0 	bl	80120f4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8013114:	4b31      	ldr	r3, [pc, #196]	; (80131dc <tcp_slowtmr+0x5a4>)
 8013116:	2200      	movs	r2, #0
 8013118:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d004      	beq.n	801312a <tcp_slowtmr+0x4f2>
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	f06f 010c 	mvn.w	r1, #12
 8013126:	68b8      	ldr	r0, [r7, #8]
 8013128:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801312a:	4b2c      	ldr	r3, [pc, #176]	; (80131dc <tcp_slowtmr+0x5a4>)
 801312c:	781b      	ldrb	r3, [r3, #0]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d037      	beq.n	80131a2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8013132:	e592      	b.n	8012c5a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8013134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013136:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801313a:	68db      	ldr	r3, [r3, #12]
 801313c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013140:	7f1b      	ldrb	r3, [r3, #28]
 8013142:	3301      	adds	r3, #1
 8013144:	b2da      	uxtb	r2, r3
 8013146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013148:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801314c:	7f1a      	ldrb	r2, [r3, #28]
 801314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013150:	7f5b      	ldrb	r3, [r3, #29]
 8013152:	429a      	cmp	r2, r3
 8013154:	d325      	bcc.n	80131a2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8013156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013158:	2200      	movs	r2, #0
 801315a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801315c:	4b1f      	ldr	r3, [pc, #124]	; (80131dc <tcp_slowtmr+0x5a4>)
 801315e:	2200      	movs	r2, #0
 8013160:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8013162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013168:	2b00      	cmp	r3, #0
 801316a:	d00b      	beq.n	8013184 <tcp_slowtmr+0x54c>
 801316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801316e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013174:	6912      	ldr	r2, [r2, #16]
 8013176:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013178:	4610      	mov	r0, r2
 801317a:	4798      	blx	r3
 801317c:	4603      	mov	r3, r0
 801317e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8013182:	e002      	b.n	801318a <tcp_slowtmr+0x552>
 8013184:	2300      	movs	r3, #0
 8013186:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801318a:	4b14      	ldr	r3, [pc, #80]	; (80131dc <tcp_slowtmr+0x5a4>)
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d000      	beq.n	8013194 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8013192:	e562      	b.n	8012c5a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013194:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013198:	2b00      	cmp	r3, #0
 801319a:	d102      	bne.n	80131a2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801319c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801319e:	f004 f8bb 	bl	8017318 <tcp_output>
  while (pcb != NULL) {
 80131a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	f47f ad5e 	bne.w	8012c66 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80131aa:	2300      	movs	r3, #0
 80131ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80131ae:	4b0c      	ldr	r3, [pc, #48]	; (80131e0 <tcp_slowtmr+0x5a8>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80131b4:	e069      	b.n	801328a <tcp_slowtmr+0x652>
 80131b6:	bf00      	nop
 80131b8:	2405e888 	.word	0x2405e888
 80131bc:	000a4cb8 	.word	0x000a4cb8
 80131c0:	10624dd3 	.word	0x10624dd3
 80131c4:	000124f8 	.word	0x000124f8
 80131c8:	2405e894 	.word	0x2405e894
 80131cc:	0801e1a4 	.word	0x0801e1a4
 80131d0:	0801e5dc 	.word	0x0801e5dc
 80131d4:	0801e1e8 	.word	0x0801e1e8
 80131d8:	0801e608 	.word	0x0801e608
 80131dc:	2405e89c 	.word	0x2405e89c
 80131e0:	2405e898 	.word	0x2405e898
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80131e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e6:	7d1b      	ldrb	r3, [r3, #20]
 80131e8:	2b0a      	cmp	r3, #10
 80131ea:	d006      	beq.n	80131fa <tcp_slowtmr+0x5c2>
 80131ec:	4b2b      	ldr	r3, [pc, #172]	; (801329c <tcp_slowtmr+0x664>)
 80131ee:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80131f2:	492b      	ldr	r1, [pc, #172]	; (80132a0 <tcp_slowtmr+0x668>)
 80131f4:	482b      	ldr	r0, [pc, #172]	; (80132a4 <tcp_slowtmr+0x66c>)
 80131f6:	f008 fb35 	bl	801b864 <iprintf>
    pcb_remove = 0;
 80131fa:	2300      	movs	r3, #0
 80131fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013200:	4b29      	ldr	r3, [pc, #164]	; (80132a8 <tcp_slowtmr+0x670>)
 8013202:	681a      	ldr	r2, [r3, #0]
 8013204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013206:	6a1b      	ldr	r3, [r3, #32]
 8013208:	1ad3      	subs	r3, r2, r3
 801320a:	2bf0      	cmp	r3, #240	; 0xf0
 801320c:	d904      	bls.n	8013218 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801320e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013212:	3301      	adds	r3, #1
 8013214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801321c:	2b00      	cmp	r3, #0
 801321e:	d02f      	beq.n	8013280 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8013220:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013222:	f000 fbf9 	bl	8013a18 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8013226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013228:	2b00      	cmp	r3, #0
 801322a:	d010      	beq.n	801324e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801322c:	4b1f      	ldr	r3, [pc, #124]	; (80132ac <tcp_slowtmr+0x674>)
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013232:	429a      	cmp	r2, r3
 8013234:	d106      	bne.n	8013244 <tcp_slowtmr+0x60c>
 8013236:	4b19      	ldr	r3, [pc, #100]	; (801329c <tcp_slowtmr+0x664>)
 8013238:	f240 52af 	movw	r2, #1455	; 0x5af
 801323c:	491c      	ldr	r1, [pc, #112]	; (80132b0 <tcp_slowtmr+0x678>)
 801323e:	4819      	ldr	r0, [pc, #100]	; (80132a4 <tcp_slowtmr+0x66c>)
 8013240:	f008 fb10 	bl	801b864 <iprintf>
        prev->next = pcb->next;
 8013244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013246:	68da      	ldr	r2, [r3, #12]
 8013248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801324a:	60da      	str	r2, [r3, #12]
 801324c:	e00f      	b.n	801326e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801324e:	4b17      	ldr	r3, [pc, #92]	; (80132ac <tcp_slowtmr+0x674>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013254:	429a      	cmp	r2, r3
 8013256:	d006      	beq.n	8013266 <tcp_slowtmr+0x62e>
 8013258:	4b10      	ldr	r3, [pc, #64]	; (801329c <tcp_slowtmr+0x664>)
 801325a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801325e:	4915      	ldr	r1, [pc, #84]	; (80132b4 <tcp_slowtmr+0x67c>)
 8013260:	4810      	ldr	r0, [pc, #64]	; (80132a4 <tcp_slowtmr+0x66c>)
 8013262:	f008 faff 	bl	801b864 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8013266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013268:	68db      	ldr	r3, [r3, #12]
 801326a:	4a10      	ldr	r2, [pc, #64]	; (80132ac <tcp_slowtmr+0x674>)
 801326c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013270:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8013272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013274:	68db      	ldr	r3, [r3, #12]
 8013276:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013278:	69f8      	ldr	r0, [r7, #28]
 801327a:	f7fe ff3b 	bl	80120f4 <tcp_free>
 801327e:	e004      	b.n	801328a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8013280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013282:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013286:	68db      	ldr	r3, [r3, #12]
 8013288:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801328c:	2b00      	cmp	r3, #0
 801328e:	d1a9      	bne.n	80131e4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8013290:	bf00      	nop
 8013292:	bf00      	nop
 8013294:	3730      	adds	r7, #48	; 0x30
 8013296:	46bd      	mov	sp, r7
 8013298:	bdb0      	pop	{r4, r5, r7, pc}
 801329a:	bf00      	nop
 801329c:	0801e1a4 	.word	0x0801e1a4
 80132a0:	0801e634 	.word	0x0801e634
 80132a4:	0801e1e8 	.word	0x0801e1e8
 80132a8:	2405e888 	.word	0x2405e888
 80132ac:	2405e898 	.word	0x2405e898
 80132b0:	0801e664 	.word	0x0801e664
 80132b4:	0801e68c 	.word	0x0801e68c

080132b8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b082      	sub	sp, #8
 80132bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80132be:	4b2d      	ldr	r3, [pc, #180]	; (8013374 <tcp_fasttmr+0xbc>)
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	3301      	adds	r3, #1
 80132c4:	b2da      	uxtb	r2, r3
 80132c6:	4b2b      	ldr	r3, [pc, #172]	; (8013374 <tcp_fasttmr+0xbc>)
 80132c8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80132ca:	4b2b      	ldr	r3, [pc, #172]	; (8013378 <tcp_fasttmr+0xc0>)
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80132d0:	e048      	b.n	8013364 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	7f9a      	ldrb	r2, [r3, #30]
 80132d6:	4b27      	ldr	r3, [pc, #156]	; (8013374 <tcp_fasttmr+0xbc>)
 80132d8:	781b      	ldrb	r3, [r3, #0]
 80132da:	429a      	cmp	r2, r3
 80132dc:	d03f      	beq.n	801335e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80132de:	4b25      	ldr	r3, [pc, #148]	; (8013374 <tcp_fasttmr+0xbc>)
 80132e0:	781a      	ldrb	r2, [r3, #0]
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	8b5b      	ldrh	r3, [r3, #26]
 80132ea:	f003 0301 	and.w	r3, r3, #1
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d010      	beq.n	8013314 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	8b5b      	ldrh	r3, [r3, #26]
 80132f6:	f043 0302 	orr.w	r3, r3, #2
 80132fa:	b29a      	uxth	r2, r3
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	f004 f809 	bl	8017318 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	8b5b      	ldrh	r3, [r3, #26]
 801330a:	f023 0303 	bic.w	r3, r3, #3
 801330e:	b29a      	uxth	r2, r3
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	8b5b      	ldrh	r3, [r3, #26]
 8013318:	f003 0308 	and.w	r3, r3, #8
 801331c:	2b00      	cmp	r3, #0
 801331e:	d009      	beq.n	8013334 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	8b5b      	ldrh	r3, [r3, #26]
 8013324:	f023 0308 	bic.w	r3, r3, #8
 8013328:	b29a      	uxth	r2, r3
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801332e:	6878      	ldr	r0, [r7, #4]
 8013330:	f7ff f874 	bl	801241c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	68db      	ldr	r3, [r3, #12]
 8013338:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801333e:	2b00      	cmp	r3, #0
 8013340:	d00a      	beq.n	8013358 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8013342:	4b0e      	ldr	r3, [pc, #56]	; (801337c <tcp_fasttmr+0xc4>)
 8013344:	2200      	movs	r2, #0
 8013346:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013348:	6878      	ldr	r0, [r7, #4]
 801334a:	f000 f819 	bl	8013380 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801334e:	4b0b      	ldr	r3, [pc, #44]	; (801337c <tcp_fasttmr+0xc4>)
 8013350:	781b      	ldrb	r3, [r3, #0]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d000      	beq.n	8013358 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8013356:	e7b8      	b.n	80132ca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	607b      	str	r3, [r7, #4]
 801335c:	e002      	b.n	8013364 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	68db      	ldr	r3, [r3, #12]
 8013362:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d1b3      	bne.n	80132d2 <tcp_fasttmr+0x1a>
    }
  }
}
 801336a:	bf00      	nop
 801336c:	bf00      	nop
 801336e:	3708      	adds	r7, #8
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}
 8013374:	2405e89e 	.word	0x2405e89e
 8013378:	2405e894 	.word	0x2405e894
 801337c:	2405e89c 	.word	0x2405e89c

08013380 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013380:	b590      	push	{r4, r7, lr}
 8013382:	b085      	sub	sp, #20
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d109      	bne.n	80133a2 <tcp_process_refused_data+0x22>
 801338e:	4b37      	ldr	r3, [pc, #220]	; (801346c <tcp_process_refused_data+0xec>)
 8013390:	f240 6209 	movw	r2, #1545	; 0x609
 8013394:	4936      	ldr	r1, [pc, #216]	; (8013470 <tcp_process_refused_data+0xf0>)
 8013396:	4837      	ldr	r0, [pc, #220]	; (8013474 <tcp_process_refused_data+0xf4>)
 8013398:	f008 fa64 	bl	801b864 <iprintf>
 801339c:	f06f 030f 	mvn.w	r3, #15
 80133a0:	e060      	b.n	8013464 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80133a6:	7b5b      	ldrb	r3, [r3, #13]
 80133a8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80133ae:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2200      	movs	r2, #0
 80133b4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d00b      	beq.n	80133d8 <tcp_process_refused_data+0x58>
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	6918      	ldr	r0, [r3, #16]
 80133ca:	2300      	movs	r3, #0
 80133cc:	68ba      	ldr	r2, [r7, #8]
 80133ce:	6879      	ldr	r1, [r7, #4]
 80133d0:	47a0      	blx	r4
 80133d2:	4603      	mov	r3, r0
 80133d4:	73fb      	strb	r3, [r7, #15]
 80133d6:	e007      	b.n	80133e8 <tcp_process_refused_data+0x68>
 80133d8:	2300      	movs	r3, #0
 80133da:	68ba      	ldr	r2, [r7, #8]
 80133dc:	6879      	ldr	r1, [r7, #4]
 80133de:	2000      	movs	r0, #0
 80133e0:	f000 f8a4 	bl	801352c <tcp_recv_null>
 80133e4:	4603      	mov	r3, r0
 80133e6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80133e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d12a      	bne.n	8013446 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80133f0:	7bbb      	ldrb	r3, [r7, #14]
 80133f2:	f003 0320 	and.w	r3, r3, #32
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d033      	beq.n	8013462 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80133fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013402:	d005      	beq.n	8013410 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013408:	3301      	adds	r3, #1
 801340a:	b29a      	uxth	r2, r3
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013416:	2b00      	cmp	r3, #0
 8013418:	d00b      	beq.n	8013432 <tcp_process_refused_data+0xb2>
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	6918      	ldr	r0, [r3, #16]
 8013424:	2300      	movs	r3, #0
 8013426:	2200      	movs	r2, #0
 8013428:	6879      	ldr	r1, [r7, #4]
 801342a:	47a0      	blx	r4
 801342c:	4603      	mov	r3, r0
 801342e:	73fb      	strb	r3, [r7, #15]
 8013430:	e001      	b.n	8013436 <tcp_process_refused_data+0xb6>
 8013432:	2300      	movs	r3, #0
 8013434:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8013436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801343a:	f113 0f0d 	cmn.w	r3, #13
 801343e:	d110      	bne.n	8013462 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013440:	f06f 030c 	mvn.w	r3, #12
 8013444:	e00e      	b.n	8013464 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8013446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801344a:	f113 0f0d 	cmn.w	r3, #13
 801344e:	d102      	bne.n	8013456 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013450:	f06f 030c 	mvn.w	r3, #12
 8013454:	e006      	b.n	8013464 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	68ba      	ldr	r2, [r7, #8]
 801345a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801345c:	f06f 0304 	mvn.w	r3, #4
 8013460:	e000      	b.n	8013464 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8013462:	2300      	movs	r3, #0
}
 8013464:	4618      	mov	r0, r3
 8013466:	3714      	adds	r7, #20
 8013468:	46bd      	mov	sp, r7
 801346a:	bd90      	pop	{r4, r7, pc}
 801346c:	0801e1a4 	.word	0x0801e1a4
 8013470:	0801e6b4 	.word	0x0801e6b4
 8013474:	0801e1e8 	.word	0x0801e1e8

08013478 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b084      	sub	sp, #16
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013480:	e007      	b.n	8013492 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013488:	6878      	ldr	r0, [r7, #4]
 801348a:	f000 f80a 	bl	80134a2 <tcp_seg_free>
    seg = next;
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d1f4      	bne.n	8013482 <tcp_segs_free+0xa>
  }
}
 8013498:	bf00      	nop
 801349a:	bf00      	nop
 801349c:	3710      	adds	r7, #16
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}

080134a2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80134a2:	b580      	push	{r7, lr}
 80134a4:	b082      	sub	sp, #8
 80134a6:	af00      	add	r7, sp, #0
 80134a8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d00c      	beq.n	80134ca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	685b      	ldr	r3, [r3, #4]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d004      	beq.n	80134c2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	685b      	ldr	r3, [r3, #4]
 80134bc:	4618      	mov	r0, r3
 80134be:	f7fe fb6d 	bl	8011b9c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80134c2:	6879      	ldr	r1, [r7, #4]
 80134c4:	2003      	movs	r0, #3
 80134c6:	f7fd fcc1 	bl	8010e4c <memp_free>
  }
}
 80134ca:	bf00      	nop
 80134cc:	3708      	adds	r7, #8
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}
	...

080134d4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b084      	sub	sp, #16
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d106      	bne.n	80134f0 <tcp_seg_copy+0x1c>
 80134e2:	4b0f      	ldr	r3, [pc, #60]	; (8013520 <tcp_seg_copy+0x4c>)
 80134e4:	f240 6282 	movw	r2, #1666	; 0x682
 80134e8:	490e      	ldr	r1, [pc, #56]	; (8013524 <tcp_seg_copy+0x50>)
 80134ea:	480f      	ldr	r0, [pc, #60]	; (8013528 <tcp_seg_copy+0x54>)
 80134ec:	f008 f9ba 	bl	801b864 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80134f0:	2003      	movs	r0, #3
 80134f2:	f7fd fc35 	bl	8010d60 <memp_malloc>
 80134f6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d101      	bne.n	8013502 <tcp_seg_copy+0x2e>
    return NULL;
 80134fe:	2300      	movs	r3, #0
 8013500:	e00a      	b.n	8013518 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013502:	2210      	movs	r2, #16
 8013504:	6879      	ldr	r1, [r7, #4]
 8013506:	68f8      	ldr	r0, [r7, #12]
 8013508:	f008 f8e7 	bl	801b6da <memcpy>
  pbuf_ref(cseg->p);
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	685b      	ldr	r3, [r3, #4]
 8013510:	4618      	mov	r0, r3
 8013512:	f7fe fbe9 	bl	8011ce8 <pbuf_ref>
  return cseg;
 8013516:	68fb      	ldr	r3, [r7, #12]
}
 8013518:	4618      	mov	r0, r3
 801351a:	3710      	adds	r7, #16
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}
 8013520:	0801e1a4 	.word	0x0801e1a4
 8013524:	0801e6f8 	.word	0x0801e6f8
 8013528:	0801e1e8 	.word	0x0801e1e8

0801352c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b084      	sub	sp, #16
 8013530:	af00      	add	r7, sp, #0
 8013532:	60f8      	str	r0, [r7, #12]
 8013534:	60b9      	str	r1, [r7, #8]
 8013536:	607a      	str	r2, [r7, #4]
 8013538:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d109      	bne.n	8013554 <tcp_recv_null+0x28>
 8013540:	4b12      	ldr	r3, [pc, #72]	; (801358c <tcp_recv_null+0x60>)
 8013542:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013546:	4912      	ldr	r1, [pc, #72]	; (8013590 <tcp_recv_null+0x64>)
 8013548:	4812      	ldr	r0, [pc, #72]	; (8013594 <tcp_recv_null+0x68>)
 801354a:	f008 f98b 	bl	801b864 <iprintf>
 801354e:	f06f 030f 	mvn.w	r3, #15
 8013552:	e016      	b.n	8013582 <tcp_recv_null+0x56>

  if (p != NULL) {
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d009      	beq.n	801356e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	891b      	ldrh	r3, [r3, #8]
 801355e:	4619      	mov	r1, r3
 8013560:	68b8      	ldr	r0, [r7, #8]
 8013562:	f7ff fad3 	bl	8012b0c <tcp_recved>
    pbuf_free(p);
 8013566:	6878      	ldr	r0, [r7, #4]
 8013568:	f7fe fb18 	bl	8011b9c <pbuf_free>
 801356c:	e008      	b.n	8013580 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801356e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d104      	bne.n	8013580 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013576:	68b8      	ldr	r0, [r7, #8]
 8013578:	f7fe ffba 	bl	80124f0 <tcp_close>
 801357c:	4603      	mov	r3, r0
 801357e:	e000      	b.n	8013582 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013580:	2300      	movs	r3, #0
}
 8013582:	4618      	mov	r0, r3
 8013584:	3710      	adds	r7, #16
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}
 801358a:	bf00      	nop
 801358c:	0801e1a4 	.word	0x0801e1a4
 8013590:	0801e714 	.word	0x0801e714
 8013594:	0801e1e8 	.word	0x0801e1e8

08013598 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b086      	sub	sp, #24
 801359c:	af00      	add	r7, sp, #0
 801359e:	4603      	mov	r3, r0
 80135a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80135a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	db01      	blt.n	80135ae <tcp_kill_prio+0x16>
 80135aa:	79fb      	ldrb	r3, [r7, #7]
 80135ac:	e000      	b.n	80135b0 <tcp_kill_prio+0x18>
 80135ae:	237f      	movs	r3, #127	; 0x7f
 80135b0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80135b2:	7afb      	ldrb	r3, [r7, #11]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d034      	beq.n	8013622 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80135b8:	7afb      	ldrb	r3, [r7, #11]
 80135ba:	3b01      	subs	r3, #1
 80135bc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80135be:	2300      	movs	r3, #0
 80135c0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80135c2:	2300      	movs	r3, #0
 80135c4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80135c6:	4b19      	ldr	r3, [pc, #100]	; (801362c <tcp_kill_prio+0x94>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	617b      	str	r3, [r7, #20]
 80135cc:	e01f      	b.n	801360e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80135ce:	697b      	ldr	r3, [r7, #20]
 80135d0:	7d5b      	ldrb	r3, [r3, #21]
 80135d2:	7afa      	ldrb	r2, [r7, #11]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d80c      	bhi.n	80135f2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80135d8:	697b      	ldr	r3, [r7, #20]
 80135da:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80135dc:	7afa      	ldrb	r2, [r7, #11]
 80135de:	429a      	cmp	r2, r3
 80135e0:	d112      	bne.n	8013608 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80135e2:	4b13      	ldr	r3, [pc, #76]	; (8013630 <tcp_kill_prio+0x98>)
 80135e4:	681a      	ldr	r2, [r3, #0]
 80135e6:	697b      	ldr	r3, [r7, #20]
 80135e8:	6a1b      	ldr	r3, [r3, #32]
 80135ea:	1ad3      	subs	r3, r2, r3
 80135ec:	68fa      	ldr	r2, [r7, #12]
 80135ee:	429a      	cmp	r2, r3
 80135f0:	d80a      	bhi.n	8013608 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80135f2:	4b0f      	ldr	r3, [pc, #60]	; (8013630 <tcp_kill_prio+0x98>)
 80135f4:	681a      	ldr	r2, [r3, #0]
 80135f6:	697b      	ldr	r3, [r7, #20]
 80135f8:	6a1b      	ldr	r3, [r3, #32]
 80135fa:	1ad3      	subs	r3, r2, r3
 80135fc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	7d5b      	ldrb	r3, [r3, #21]
 8013606:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	68db      	ldr	r3, [r3, #12]
 801360c:	617b      	str	r3, [r7, #20]
 801360e:	697b      	ldr	r3, [r7, #20]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d1dc      	bne.n	80135ce <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013614:	693b      	ldr	r3, [r7, #16]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d004      	beq.n	8013624 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801361a:	6938      	ldr	r0, [r7, #16]
 801361c:	f7ff f8ae 	bl	801277c <tcp_abort>
 8013620:	e000      	b.n	8013624 <tcp_kill_prio+0x8c>
    return;
 8013622:	bf00      	nop
  }
}
 8013624:	3718      	adds	r7, #24
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}
 801362a:	bf00      	nop
 801362c:	2405e894 	.word	0x2405e894
 8013630:	2405e888 	.word	0x2405e888

08013634 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b086      	sub	sp, #24
 8013638:	af00      	add	r7, sp, #0
 801363a:	4603      	mov	r3, r0
 801363c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801363e:	79fb      	ldrb	r3, [r7, #7]
 8013640:	2b08      	cmp	r3, #8
 8013642:	d009      	beq.n	8013658 <tcp_kill_state+0x24>
 8013644:	79fb      	ldrb	r3, [r7, #7]
 8013646:	2b09      	cmp	r3, #9
 8013648:	d006      	beq.n	8013658 <tcp_kill_state+0x24>
 801364a:	4b1a      	ldr	r3, [pc, #104]	; (80136b4 <tcp_kill_state+0x80>)
 801364c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8013650:	4919      	ldr	r1, [pc, #100]	; (80136b8 <tcp_kill_state+0x84>)
 8013652:	481a      	ldr	r0, [pc, #104]	; (80136bc <tcp_kill_state+0x88>)
 8013654:	f008 f906 	bl	801b864 <iprintf>

  inactivity = 0;
 8013658:	2300      	movs	r3, #0
 801365a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801365c:	2300      	movs	r3, #0
 801365e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013660:	4b17      	ldr	r3, [pc, #92]	; (80136c0 <tcp_kill_state+0x8c>)
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	617b      	str	r3, [r7, #20]
 8013666:	e017      	b.n	8013698 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013668:	697b      	ldr	r3, [r7, #20]
 801366a:	7d1b      	ldrb	r3, [r3, #20]
 801366c:	79fa      	ldrb	r2, [r7, #7]
 801366e:	429a      	cmp	r2, r3
 8013670:	d10f      	bne.n	8013692 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013672:	4b14      	ldr	r3, [pc, #80]	; (80136c4 <tcp_kill_state+0x90>)
 8013674:	681a      	ldr	r2, [r3, #0]
 8013676:	697b      	ldr	r3, [r7, #20]
 8013678:	6a1b      	ldr	r3, [r3, #32]
 801367a:	1ad3      	subs	r3, r2, r3
 801367c:	68fa      	ldr	r2, [r7, #12]
 801367e:	429a      	cmp	r2, r3
 8013680:	d807      	bhi.n	8013692 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013682:	4b10      	ldr	r3, [pc, #64]	; (80136c4 <tcp_kill_state+0x90>)
 8013684:	681a      	ldr	r2, [r3, #0]
 8013686:	697b      	ldr	r3, [r7, #20]
 8013688:	6a1b      	ldr	r3, [r3, #32]
 801368a:	1ad3      	subs	r3, r2, r3
 801368c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801368e:	697b      	ldr	r3, [r7, #20]
 8013690:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013692:	697b      	ldr	r3, [r7, #20]
 8013694:	68db      	ldr	r3, [r3, #12]
 8013696:	617b      	str	r3, [r7, #20]
 8013698:	697b      	ldr	r3, [r7, #20]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d1e4      	bne.n	8013668 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801369e:	693b      	ldr	r3, [r7, #16]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d003      	beq.n	80136ac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80136a4:	2100      	movs	r1, #0
 80136a6:	6938      	ldr	r0, [r7, #16]
 80136a8:	f7fe ffaa 	bl	8012600 <tcp_abandon>
  }
}
 80136ac:	bf00      	nop
 80136ae:	3718      	adds	r7, #24
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}
 80136b4:	0801e1a4 	.word	0x0801e1a4
 80136b8:	0801e730 	.word	0x0801e730
 80136bc:	0801e1e8 	.word	0x0801e1e8
 80136c0:	2405e894 	.word	0x2405e894
 80136c4:	2405e888 	.word	0x2405e888

080136c8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b084      	sub	sp, #16
 80136cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80136ce:	2300      	movs	r3, #0
 80136d0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80136d2:	2300      	movs	r3, #0
 80136d4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80136d6:	4b12      	ldr	r3, [pc, #72]	; (8013720 <tcp_kill_timewait+0x58>)
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	60fb      	str	r3, [r7, #12]
 80136dc:	e012      	b.n	8013704 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80136de:	4b11      	ldr	r3, [pc, #68]	; (8013724 <tcp_kill_timewait+0x5c>)
 80136e0:	681a      	ldr	r2, [r3, #0]
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	6a1b      	ldr	r3, [r3, #32]
 80136e6:	1ad3      	subs	r3, r2, r3
 80136e8:	687a      	ldr	r2, [r7, #4]
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d807      	bhi.n	80136fe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80136ee:	4b0d      	ldr	r3, [pc, #52]	; (8013724 <tcp_kill_timewait+0x5c>)
 80136f0:	681a      	ldr	r2, [r3, #0]
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	6a1b      	ldr	r3, [r3, #32]
 80136f6:	1ad3      	subs	r3, r2, r3
 80136f8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	68db      	ldr	r3, [r3, #12]
 8013702:	60fb      	str	r3, [r7, #12]
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d1e9      	bne.n	80136de <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801370a:	68bb      	ldr	r3, [r7, #8]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d002      	beq.n	8013716 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013710:	68b8      	ldr	r0, [r7, #8]
 8013712:	f7ff f833 	bl	801277c <tcp_abort>
  }
}
 8013716:	bf00      	nop
 8013718:	3710      	adds	r7, #16
 801371a:	46bd      	mov	sp, r7
 801371c:	bd80      	pop	{r7, pc}
 801371e:	bf00      	nop
 8013720:	2405e898 	.word	0x2405e898
 8013724:	2405e888 	.word	0x2405e888

08013728 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b082      	sub	sp, #8
 801372c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801372e:	4b10      	ldr	r3, [pc, #64]	; (8013770 <tcp_handle_closepend+0x48>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013734:	e014      	b.n	8013760 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	68db      	ldr	r3, [r3, #12]
 801373a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	8b5b      	ldrh	r3, [r3, #26]
 8013740:	f003 0308 	and.w	r3, r3, #8
 8013744:	2b00      	cmp	r3, #0
 8013746:	d009      	beq.n	801375c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	8b5b      	ldrh	r3, [r3, #26]
 801374c:	f023 0308 	bic.w	r3, r3, #8
 8013750:	b29a      	uxth	r2, r3
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f7fe fe60 	bl	801241c <tcp_close_shutdown_fin>
    }
    pcb = next;
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d1e7      	bne.n	8013736 <tcp_handle_closepend+0xe>
  }
}
 8013766:	bf00      	nop
 8013768:	bf00      	nop
 801376a:	3708      	adds	r7, #8
 801376c:	46bd      	mov	sp, r7
 801376e:	bd80      	pop	{r7, pc}
 8013770:	2405e894 	.word	0x2405e894

08013774 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b084      	sub	sp, #16
 8013778:	af00      	add	r7, sp, #0
 801377a:	4603      	mov	r3, r0
 801377c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801377e:	2001      	movs	r0, #1
 8013780:	f7fd faee 	bl	8010d60 <memp_malloc>
 8013784:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d126      	bne.n	80137da <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801378c:	f7ff ffcc 	bl	8013728 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013790:	f7ff ff9a 	bl	80136c8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013794:	2001      	movs	r0, #1
 8013796:	f7fd fae3 	bl	8010d60 <memp_malloc>
 801379a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d11b      	bne.n	80137da <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80137a2:	2009      	movs	r0, #9
 80137a4:	f7ff ff46 	bl	8013634 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80137a8:	2001      	movs	r0, #1
 80137aa:	f7fd fad9 	bl	8010d60 <memp_malloc>
 80137ae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d111      	bne.n	80137da <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80137b6:	2008      	movs	r0, #8
 80137b8:	f7ff ff3c 	bl	8013634 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80137bc:	2001      	movs	r0, #1
 80137be:	f7fd facf 	bl	8010d60 <memp_malloc>
 80137c2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d107      	bne.n	80137da <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80137ca:	79fb      	ldrb	r3, [r7, #7]
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7ff fee3 	bl	8013598 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80137d2:	2001      	movs	r0, #1
 80137d4:	f7fd fac4 	bl	8010d60 <memp_malloc>
 80137d8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d03f      	beq.n	8013860 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80137e0:	229c      	movs	r2, #156	; 0x9c
 80137e2:	2100      	movs	r1, #0
 80137e4:	68f8      	ldr	r0, [r7, #12]
 80137e6:	f007 ffa0 	bl	801b72a <memset>
    pcb->prio = prio;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	79fa      	ldrb	r2, [r7, #7]
 80137ee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80137f6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013800:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	22ff      	movs	r2, #255	; 0xff
 801380e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013816:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	2206      	movs	r2, #6
 801381c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	2206      	movs	r2, #6
 8013824:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801382c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	2201      	movs	r2, #1
 8013832:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8013836:	4b0d      	ldr	r3, [pc, #52]	; (801386c <tcp_alloc+0xf8>)
 8013838:	681a      	ldr	r2, [r3, #0]
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801383e:	4b0c      	ldr	r3, [pc, #48]	; (8013870 <tcp_alloc+0xfc>)
 8013840:	781a      	ldrb	r2, [r3, #0]
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801384c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	4a08      	ldr	r2, [pc, #32]	; (8013874 <tcp_alloc+0x100>)
 8013854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	4a07      	ldr	r2, [pc, #28]	; (8013878 <tcp_alloc+0x104>)
 801385c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013860:	68fb      	ldr	r3, [r7, #12]
}
 8013862:	4618      	mov	r0, r3
 8013864:	3710      	adds	r7, #16
 8013866:	46bd      	mov	sp, r7
 8013868:	bd80      	pop	{r7, pc}
 801386a:	bf00      	nop
 801386c:	2405e888 	.word	0x2405e888
 8013870:	2405e89e 	.word	0x2405e89e
 8013874:	0801352d 	.word	0x0801352d
 8013878:	006ddd00 	.word	0x006ddd00

0801387c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b084      	sub	sp, #16
 8013880:	af00      	add	r7, sp, #0
 8013882:	4603      	mov	r3, r0
 8013884:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8013886:	2040      	movs	r0, #64	; 0x40
 8013888:	f7ff ff74 	bl	8013774 <tcp_alloc>
 801388c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801388e:	68fb      	ldr	r3, [r7, #12]
}
 8013890:	4618      	mov	r0, r3
 8013892:	3710      	adds	r7, #16
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}

08013898 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8013898:	b480      	push	{r7}
 801389a:	b083      	sub	sp, #12
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
 80138a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d002      	beq.n	80138ae <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	683a      	ldr	r2, [r7, #0]
 80138ac:	611a      	str	r2, [r3, #16]
  }
}
 80138ae:	bf00      	nop
 80138b0:	370c      	adds	r7, #12
 80138b2:	46bd      	mov	sp, r7
 80138b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b8:	4770      	bx	lr
	...

080138bc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b082      	sub	sp, #8
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d00e      	beq.n	80138ea <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	7d1b      	ldrb	r3, [r3, #20]
 80138d0:	2b01      	cmp	r3, #1
 80138d2:	d106      	bne.n	80138e2 <tcp_recv+0x26>
 80138d4:	4b07      	ldr	r3, [pc, #28]	; (80138f4 <tcp_recv+0x38>)
 80138d6:	f240 72df 	movw	r2, #2015	; 0x7df
 80138da:	4907      	ldr	r1, [pc, #28]	; (80138f8 <tcp_recv+0x3c>)
 80138dc:	4807      	ldr	r0, [pc, #28]	; (80138fc <tcp_recv+0x40>)
 80138de:	f007 ffc1 	bl	801b864 <iprintf>
    pcb->recv = recv;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	683a      	ldr	r2, [r7, #0]
 80138e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80138ea:	bf00      	nop
 80138ec:	3708      	adds	r7, #8
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd80      	pop	{r7, pc}
 80138f2:	bf00      	nop
 80138f4:	0801e1a4 	.word	0x0801e1a4
 80138f8:	0801e740 	.word	0x0801e740
 80138fc:	0801e1e8 	.word	0x0801e1e8

08013900 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b082      	sub	sp, #8
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d00e      	beq.n	801392e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	7d1b      	ldrb	r3, [r3, #20]
 8013914:	2b01      	cmp	r3, #1
 8013916:	d106      	bne.n	8013926 <tcp_sent+0x26>
 8013918:	4b07      	ldr	r3, [pc, #28]	; (8013938 <tcp_sent+0x38>)
 801391a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801391e:	4907      	ldr	r1, [pc, #28]	; (801393c <tcp_sent+0x3c>)
 8013920:	4807      	ldr	r0, [pc, #28]	; (8013940 <tcp_sent+0x40>)
 8013922:	f007 ff9f 	bl	801b864 <iprintf>
    pcb->sent = sent;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	683a      	ldr	r2, [r7, #0]
 801392a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801392e:	bf00      	nop
 8013930:	3708      	adds	r7, #8
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}
 8013936:	bf00      	nop
 8013938:	0801e1a4 	.word	0x0801e1a4
 801393c:	0801e768 	.word	0x0801e768
 8013940:	0801e1e8 	.word	0x0801e1e8

08013944 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b082      	sub	sp, #8
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
 801394c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d00e      	beq.n	8013972 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	7d1b      	ldrb	r3, [r3, #20]
 8013958:	2b01      	cmp	r3, #1
 801395a:	d106      	bne.n	801396a <tcp_err+0x26>
 801395c:	4b07      	ldr	r3, [pc, #28]	; (801397c <tcp_err+0x38>)
 801395e:	f640 020d 	movw	r2, #2061	; 0x80d
 8013962:	4907      	ldr	r1, [pc, #28]	; (8013980 <tcp_err+0x3c>)
 8013964:	4807      	ldr	r0, [pc, #28]	; (8013984 <tcp_err+0x40>)
 8013966:	f007 ff7d 	bl	801b864 <iprintf>
    pcb->errf = err;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	683a      	ldr	r2, [r7, #0]
 801396e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8013972:	bf00      	nop
 8013974:	3708      	adds	r7, #8
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}
 801397a:	bf00      	nop
 801397c:	0801e1a4 	.word	0x0801e1a4
 8013980:	0801e790 	.word	0x0801e790
 8013984:	0801e1e8 	.word	0x0801e1e8

08013988 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8013988:	b480      	push	{r7}
 801398a:	b085      	sub	sp, #20
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
 8013990:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d008      	beq.n	80139aa <tcp_accept+0x22>
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	7d1b      	ldrb	r3, [r3, #20]
 801399c:	2b01      	cmp	r3, #1
 801399e:	d104      	bne.n	80139aa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	683a      	ldr	r2, [r7, #0]
 80139a8:	619a      	str	r2, [r3, #24]
  }
}
 80139aa:	bf00      	nop
 80139ac:	3714      	adds	r7, #20
 80139ae:	46bd      	mov	sp, r7
 80139b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b4:	4770      	bx	lr
	...

080139b8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b084      	sub	sp, #16
 80139bc:	af00      	add	r7, sp, #0
 80139be:	60f8      	str	r0, [r7, #12]
 80139c0:	60b9      	str	r1, [r7, #8]
 80139c2:	4613      	mov	r3, r2
 80139c4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d107      	bne.n	80139dc <tcp_poll+0x24>
 80139cc:	4b0e      	ldr	r3, [pc, #56]	; (8013a08 <tcp_poll+0x50>)
 80139ce:	f640 023d 	movw	r2, #2109	; 0x83d
 80139d2:	490e      	ldr	r1, [pc, #56]	; (8013a0c <tcp_poll+0x54>)
 80139d4:	480e      	ldr	r0, [pc, #56]	; (8013a10 <tcp_poll+0x58>)
 80139d6:	f007 ff45 	bl	801b864 <iprintf>
 80139da:	e011      	b.n	8013a00 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	7d1b      	ldrb	r3, [r3, #20]
 80139e0:	2b01      	cmp	r3, #1
 80139e2:	d106      	bne.n	80139f2 <tcp_poll+0x3a>
 80139e4:	4b08      	ldr	r3, [pc, #32]	; (8013a08 <tcp_poll+0x50>)
 80139e6:	f640 023e 	movw	r2, #2110	; 0x83e
 80139ea:	490a      	ldr	r1, [pc, #40]	; (8013a14 <tcp_poll+0x5c>)
 80139ec:	4808      	ldr	r0, [pc, #32]	; (8013a10 <tcp_poll+0x58>)
 80139ee:	f007 ff39 	bl	801b864 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	68ba      	ldr	r2, [r7, #8]
 80139f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	79fa      	ldrb	r2, [r7, #7]
 80139fe:	775a      	strb	r2, [r3, #29]
}
 8013a00:	3710      	adds	r7, #16
 8013a02:	46bd      	mov	sp, r7
 8013a04:	bd80      	pop	{r7, pc}
 8013a06:	bf00      	nop
 8013a08:	0801e1a4 	.word	0x0801e1a4
 8013a0c:	0801e7b8 	.word	0x0801e7b8
 8013a10:	0801e1e8 	.word	0x0801e1e8
 8013a14:	0801e7d0 	.word	0x0801e7d0

08013a18 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d107      	bne.n	8013a36 <tcp_pcb_purge+0x1e>
 8013a26:	4b21      	ldr	r3, [pc, #132]	; (8013aac <tcp_pcb_purge+0x94>)
 8013a28:	f640 0251 	movw	r2, #2129	; 0x851
 8013a2c:	4920      	ldr	r1, [pc, #128]	; (8013ab0 <tcp_pcb_purge+0x98>)
 8013a2e:	4821      	ldr	r0, [pc, #132]	; (8013ab4 <tcp_pcb_purge+0x9c>)
 8013a30:	f007 ff18 	bl	801b864 <iprintf>
 8013a34:	e037      	b.n	8013aa6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	7d1b      	ldrb	r3, [r3, #20]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d033      	beq.n	8013aa6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013a42:	2b0a      	cmp	r3, #10
 8013a44:	d02f      	beq.n	8013aa6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013a4a:	2b01      	cmp	r3, #1
 8013a4c:	d02b      	beq.n	8013aa6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d007      	beq.n	8013a66 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f7fe f89e 	bl	8011b9c <pbuf_free>
      pcb->refused_data = NULL;
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	2200      	movs	r2, #0
 8013a64:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d002      	beq.n	8013a74 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013a6e:	6878      	ldr	r0, [r7, #4]
 8013a70:	f000 f986 	bl	8013d80 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a7a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7ff fcf9 	bl	8013478 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f7ff fcf4 	bl	8013478 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	2200      	movs	r2, #0
 8013a94:	66da      	str	r2, [r3, #108]	; 0x6c
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013aa6:	3708      	adds	r7, #8
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}
 8013aac:	0801e1a4 	.word	0x0801e1a4
 8013ab0:	0801e7f0 	.word	0x0801e7f0
 8013ab4:	0801e1e8 	.word	0x0801e1e8

08013ab8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b084      	sub	sp, #16
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
 8013ac0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013ac2:	683b      	ldr	r3, [r7, #0]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d106      	bne.n	8013ad6 <tcp_pcb_remove+0x1e>
 8013ac8:	4b3e      	ldr	r3, [pc, #248]	; (8013bc4 <tcp_pcb_remove+0x10c>)
 8013aca:	f640 0283 	movw	r2, #2179	; 0x883
 8013ace:	493e      	ldr	r1, [pc, #248]	; (8013bc8 <tcp_pcb_remove+0x110>)
 8013ad0:	483e      	ldr	r0, [pc, #248]	; (8013bcc <tcp_pcb_remove+0x114>)
 8013ad2:	f007 fec7 	bl	801b864 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d106      	bne.n	8013aea <tcp_pcb_remove+0x32>
 8013adc:	4b39      	ldr	r3, [pc, #228]	; (8013bc4 <tcp_pcb_remove+0x10c>)
 8013ade:	f640 0284 	movw	r2, #2180	; 0x884
 8013ae2:	493b      	ldr	r1, [pc, #236]	; (8013bd0 <tcp_pcb_remove+0x118>)
 8013ae4:	4839      	ldr	r0, [pc, #228]	; (8013bcc <tcp_pcb_remove+0x114>)
 8013ae6:	f007 febd 	bl	801b864 <iprintf>

  TCP_RMV(pcblist, pcb);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	683a      	ldr	r2, [r7, #0]
 8013af0:	429a      	cmp	r2, r3
 8013af2:	d105      	bne.n	8013b00 <tcp_pcb_remove+0x48>
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	68da      	ldr	r2, [r3, #12]
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	601a      	str	r2, [r3, #0]
 8013afe:	e013      	b.n	8013b28 <tcp_pcb_remove+0x70>
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	60fb      	str	r3, [r7, #12]
 8013b06:	e00c      	b.n	8013b22 <tcp_pcb_remove+0x6a>
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	68db      	ldr	r3, [r3, #12]
 8013b0c:	683a      	ldr	r2, [r7, #0]
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	d104      	bne.n	8013b1c <tcp_pcb_remove+0x64>
 8013b12:	683b      	ldr	r3, [r7, #0]
 8013b14:	68da      	ldr	r2, [r3, #12]
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	60da      	str	r2, [r3, #12]
 8013b1a:	e005      	b.n	8013b28 <tcp_pcb_remove+0x70>
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	68db      	ldr	r3, [r3, #12]
 8013b20:	60fb      	str	r3, [r7, #12]
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d1ef      	bne.n	8013b08 <tcp_pcb_remove+0x50>
 8013b28:	683b      	ldr	r3, [r7, #0]
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013b2e:	6838      	ldr	r0, [r7, #0]
 8013b30:	f7ff ff72 	bl	8013a18 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	7d1b      	ldrb	r3, [r3, #20]
 8013b38:	2b0a      	cmp	r3, #10
 8013b3a:	d013      	beq.n	8013b64 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013b3c:	683b      	ldr	r3, [r7, #0]
 8013b3e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013b40:	2b01      	cmp	r3, #1
 8013b42:	d00f      	beq.n	8013b64 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	8b5b      	ldrh	r3, [r3, #26]
 8013b48:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d009      	beq.n	8013b64 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	8b5b      	ldrh	r3, [r3, #26]
 8013b54:	f043 0302 	orr.w	r3, r3, #2
 8013b58:	b29a      	uxth	r2, r3
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013b5e:	6838      	ldr	r0, [r7, #0]
 8013b60:	f003 fbda 	bl	8017318 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	7d1b      	ldrb	r3, [r3, #20]
 8013b68:	2b01      	cmp	r3, #1
 8013b6a:	d020      	beq.n	8013bae <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d006      	beq.n	8013b82 <tcp_pcb_remove+0xca>
 8013b74:	4b13      	ldr	r3, [pc, #76]	; (8013bc4 <tcp_pcb_remove+0x10c>)
 8013b76:	f640 0293 	movw	r2, #2195	; 0x893
 8013b7a:	4916      	ldr	r1, [pc, #88]	; (8013bd4 <tcp_pcb_remove+0x11c>)
 8013b7c:	4813      	ldr	r0, [pc, #76]	; (8013bcc <tcp_pcb_remove+0x114>)
 8013b7e:	f007 fe71 	bl	801b864 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d006      	beq.n	8013b98 <tcp_pcb_remove+0xe0>
 8013b8a:	4b0e      	ldr	r3, [pc, #56]	; (8013bc4 <tcp_pcb_remove+0x10c>)
 8013b8c:	f640 0294 	movw	r2, #2196	; 0x894
 8013b90:	4911      	ldr	r1, [pc, #68]	; (8013bd8 <tcp_pcb_remove+0x120>)
 8013b92:	480e      	ldr	r0, [pc, #56]	; (8013bcc <tcp_pcb_remove+0x114>)
 8013b94:	f007 fe66 	bl	801b864 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013b98:	683b      	ldr	r3, [r7, #0]
 8013b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d006      	beq.n	8013bae <tcp_pcb_remove+0xf6>
 8013ba0:	4b08      	ldr	r3, [pc, #32]	; (8013bc4 <tcp_pcb_remove+0x10c>)
 8013ba2:	f640 0296 	movw	r2, #2198	; 0x896
 8013ba6:	490d      	ldr	r1, [pc, #52]	; (8013bdc <tcp_pcb_remove+0x124>)
 8013ba8:	4808      	ldr	r0, [pc, #32]	; (8013bcc <tcp_pcb_remove+0x114>)
 8013baa:	f007 fe5b 	bl	801b864 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013bba:	bf00      	nop
 8013bbc:	3710      	adds	r7, #16
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}
 8013bc2:	bf00      	nop
 8013bc4:	0801e1a4 	.word	0x0801e1a4
 8013bc8:	0801e80c 	.word	0x0801e80c
 8013bcc:	0801e1e8 	.word	0x0801e1e8
 8013bd0:	0801e828 	.word	0x0801e828
 8013bd4:	0801e848 	.word	0x0801e848
 8013bd8:	0801e860 	.word	0x0801e860
 8013bdc:	0801e87c 	.word	0x0801e87c

08013be0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b082      	sub	sp, #8
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d106      	bne.n	8013bfc <tcp_next_iss+0x1c>
 8013bee:	4b0a      	ldr	r3, [pc, #40]	; (8013c18 <tcp_next_iss+0x38>)
 8013bf0:	f640 02af 	movw	r2, #2223	; 0x8af
 8013bf4:	4909      	ldr	r1, [pc, #36]	; (8013c1c <tcp_next_iss+0x3c>)
 8013bf6:	480a      	ldr	r0, [pc, #40]	; (8013c20 <tcp_next_iss+0x40>)
 8013bf8:	f007 fe34 	bl	801b864 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013bfc:	4b09      	ldr	r3, [pc, #36]	; (8013c24 <tcp_next_iss+0x44>)
 8013bfe:	681a      	ldr	r2, [r3, #0]
 8013c00:	4b09      	ldr	r3, [pc, #36]	; (8013c28 <tcp_next_iss+0x48>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	4413      	add	r3, r2
 8013c06:	4a07      	ldr	r2, [pc, #28]	; (8013c24 <tcp_next_iss+0x44>)
 8013c08:	6013      	str	r3, [r2, #0]
  return iss;
 8013c0a:	4b06      	ldr	r3, [pc, #24]	; (8013c24 <tcp_next_iss+0x44>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013c0e:	4618      	mov	r0, r3
 8013c10:	3708      	adds	r7, #8
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}
 8013c16:	bf00      	nop
 8013c18:	0801e1a4 	.word	0x0801e1a4
 8013c1c:	0801e894 	.word	0x0801e894
 8013c20:	0801e1e8 	.word	0x0801e1e8
 8013c24:	2400002c 	.word	0x2400002c
 8013c28:	2405e888 	.word	0x2405e888

08013c2c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b086      	sub	sp, #24
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	4603      	mov	r3, r0
 8013c34:	60b9      	str	r1, [r7, #8]
 8013c36:	607a      	str	r2, [r7, #4]
 8013c38:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d106      	bne.n	8013c4e <tcp_eff_send_mss_netif+0x22>
 8013c40:	4b14      	ldr	r3, [pc, #80]	; (8013c94 <tcp_eff_send_mss_netif+0x68>)
 8013c42:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8013c46:	4914      	ldr	r1, [pc, #80]	; (8013c98 <tcp_eff_send_mss_netif+0x6c>)
 8013c48:	4814      	ldr	r0, [pc, #80]	; (8013c9c <tcp_eff_send_mss_netif+0x70>)
 8013c4a:	f007 fe0b 	bl	801b864 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013c4e:	68bb      	ldr	r3, [r7, #8]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d101      	bne.n	8013c58 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013c54:	89fb      	ldrh	r3, [r7, #14]
 8013c56:	e019      	b.n	8013c8c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013c5c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013c5e:	8afb      	ldrh	r3, [r7, #22]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d012      	beq.n	8013c8a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013c64:	2328      	movs	r3, #40	; 0x28
 8013c66:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013c68:	8afa      	ldrh	r2, [r7, #22]
 8013c6a:	8abb      	ldrh	r3, [r7, #20]
 8013c6c:	429a      	cmp	r2, r3
 8013c6e:	d904      	bls.n	8013c7a <tcp_eff_send_mss_netif+0x4e>
 8013c70:	8afa      	ldrh	r2, [r7, #22]
 8013c72:	8abb      	ldrh	r3, [r7, #20]
 8013c74:	1ad3      	subs	r3, r2, r3
 8013c76:	b29b      	uxth	r3, r3
 8013c78:	e000      	b.n	8013c7c <tcp_eff_send_mss_netif+0x50>
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013c7e:	8a7a      	ldrh	r2, [r7, #18]
 8013c80:	89fb      	ldrh	r3, [r7, #14]
 8013c82:	4293      	cmp	r3, r2
 8013c84:	bf28      	it	cs
 8013c86:	4613      	movcs	r3, r2
 8013c88:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8013c8a:	89fb      	ldrh	r3, [r7, #14]
}
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	3718      	adds	r7, #24
 8013c90:	46bd      	mov	sp, r7
 8013c92:	bd80      	pop	{r7, pc}
 8013c94:	0801e1a4 	.word	0x0801e1a4
 8013c98:	0801e8b0 	.word	0x0801e8b0
 8013c9c:	0801e1e8 	.word	0x0801e1e8

08013ca0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b084      	sub	sp, #16
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
 8013ca8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8013caa:	683b      	ldr	r3, [r7, #0]
 8013cac:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d119      	bne.n	8013ce8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013cb4:	4b10      	ldr	r3, [pc, #64]	; (8013cf8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013cb6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8013cba:	4910      	ldr	r1, [pc, #64]	; (8013cfc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013cbc:	4810      	ldr	r0, [pc, #64]	; (8013d00 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013cbe:	f007 fdd1 	bl	801b864 <iprintf>

  while (pcb != NULL) {
 8013cc2:	e011      	b.n	8013ce8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	681a      	ldr	r2, [r3, #0]
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	d108      	bne.n	8013ce2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	68db      	ldr	r3, [r3, #12]
 8013cd4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013cd6:	68f8      	ldr	r0, [r7, #12]
 8013cd8:	f7fe fd50 	bl	801277c <tcp_abort>
      pcb = next;
 8013cdc:	68bb      	ldr	r3, [r7, #8]
 8013cde:	60fb      	str	r3, [r7, #12]
 8013ce0:	e002      	b.n	8013ce8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	68db      	ldr	r3, [r3, #12]
 8013ce6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d1ea      	bne.n	8013cc4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013cee:	bf00      	nop
 8013cf0:	bf00      	nop
 8013cf2:	3710      	adds	r7, #16
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bd80      	pop	{r7, pc}
 8013cf8:	0801e1a4 	.word	0x0801e1a4
 8013cfc:	0801e8d8 	.word	0x0801e8d8
 8013d00:	0801e1e8 	.word	0x0801e1e8

08013d04 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b084      	sub	sp, #16
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
 8013d0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d02a      	beq.n	8013d6a <tcp_netif_ip_addr_changed+0x66>
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d026      	beq.n	8013d6a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013d1c:	4b15      	ldr	r3, [pc, #84]	; (8013d74 <tcp_netif_ip_addr_changed+0x70>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	4619      	mov	r1, r3
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	f7ff ffbc 	bl	8013ca0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013d28:	4b13      	ldr	r3, [pc, #76]	; (8013d78 <tcp_netif_ip_addr_changed+0x74>)
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	4619      	mov	r1, r3
 8013d2e:	6878      	ldr	r0, [r7, #4]
 8013d30:	f7ff ffb6 	bl	8013ca0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013d34:	683b      	ldr	r3, [r7, #0]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d017      	beq.n	8013d6a <tcp_netif_ip_addr_changed+0x66>
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d013      	beq.n	8013d6a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013d42:	4b0e      	ldr	r3, [pc, #56]	; (8013d7c <tcp_netif_ip_addr_changed+0x78>)
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	60fb      	str	r3, [r7, #12]
 8013d48:	e00c      	b.n	8013d64 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	681a      	ldr	r2, [r3, #0]
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	429a      	cmp	r2, r3
 8013d54:	d103      	bne.n	8013d5e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013d56:	683b      	ldr	r3, [r7, #0]
 8013d58:	681a      	ldr	r2, [r3, #0]
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	68db      	ldr	r3, [r3, #12]
 8013d62:	60fb      	str	r3, [r7, #12]
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d1ef      	bne.n	8013d4a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013d6a:	bf00      	nop
 8013d6c:	3710      	adds	r7, #16
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}
 8013d72:	bf00      	nop
 8013d74:	2405e894 	.word	0x2405e894
 8013d78:	2405e88c 	.word	0x2405e88c
 8013d7c:	2405e890 	.word	0x2405e890

08013d80 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b082      	sub	sp, #8
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d007      	beq.n	8013da0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7ff fb6f 	bl	8013478 <tcp_segs_free>
    pcb->ooseq = NULL;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013da0:	bf00      	nop
 8013da2:	3708      	adds	r7, #8
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}

08013da8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013da8:	b590      	push	{r4, r7, lr}
 8013daa:	b08d      	sub	sp, #52	; 0x34
 8013dac:	af04      	add	r7, sp, #16
 8013dae:	6078      	str	r0, [r7, #4]
 8013db0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d105      	bne.n	8013dc4 <tcp_input+0x1c>
 8013db8:	4b8b      	ldr	r3, [pc, #556]	; (8013fe8 <tcp_input+0x240>)
 8013dba:	2283      	movs	r2, #131	; 0x83
 8013dbc:	498b      	ldr	r1, [pc, #556]	; (8013fec <tcp_input+0x244>)
 8013dbe:	488c      	ldr	r0, [pc, #560]	; (8013ff0 <tcp_input+0x248>)
 8013dc0:	f007 fd50 	bl	801b864 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	685b      	ldr	r3, [r3, #4]
 8013dc8:	4a8a      	ldr	r2, [pc, #552]	; (8013ff4 <tcp_input+0x24c>)
 8013dca:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	895b      	ldrh	r3, [r3, #10]
 8013dd0:	2b13      	cmp	r3, #19
 8013dd2:	f240 83e3 	bls.w	801459c <tcp_input+0x7f4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013dd6:	4b88      	ldr	r3, [pc, #544]	; (8013ff8 <tcp_input+0x250>)
 8013dd8:	695b      	ldr	r3, [r3, #20]
 8013dda:	4a87      	ldr	r2, [pc, #540]	; (8013ff8 <tcp_input+0x250>)
 8013ddc:	6812      	ldr	r2, [r2, #0]
 8013dde:	4611      	mov	r1, r2
 8013de0:	4618      	mov	r0, r3
 8013de2:	f006 fa41 	bl	801a268 <ip4_addr_isbroadcast_u32>
 8013de6:	4603      	mov	r3, r0
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	f040 83d9 	bne.w	80145a0 <tcp_input+0x7f8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013dee:	4b82      	ldr	r3, [pc, #520]	; (8013ff8 <tcp_input+0x250>)
 8013df0:	695b      	ldr	r3, [r3, #20]
 8013df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013df6:	2be0      	cmp	r3, #224	; 0xe0
 8013df8:	f000 83d2 	beq.w	80145a0 <tcp_input+0x7f8>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	891a      	ldrh	r2, [r3, #8]
 8013e00:	4b7e      	ldr	r3, [pc, #504]	; (8013ffc <tcp_input+0x254>)
 8013e02:	9300      	str	r3, [sp, #0]
 8013e04:	4b7e      	ldr	r3, [pc, #504]	; (8014000 <tcp_input+0x258>)
 8013e06:	2106      	movs	r1, #6
 8013e08:	6878      	ldr	r0, [r7, #4]
 8013e0a:	f7fc fa7f 	bl	801030c <ip_chksum_pseudo>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 8013e12:	8a3b      	ldrh	r3, [r7, #16]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	f040 83c5 	bne.w	80145a4 <tcp_input+0x7fc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013e1a:	4b76      	ldr	r3, [pc, #472]	; (8013ff4 <tcp_input+0x24c>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	899b      	ldrh	r3, [r3, #12]
 8013e20:	b29b      	uxth	r3, r3
 8013e22:	4618      	mov	r0, r3
 8013e24:	f7fc f940 	bl	80100a8 <lwip_htons>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	0b1b      	lsrs	r3, r3, #12
 8013e2c:	b29b      	uxth	r3, r3
 8013e2e:	b2db      	uxtb	r3, r3
 8013e30:	009b      	lsls	r3, r3, #2
 8013e32:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013e34:	7bfb      	ldrb	r3, [r7, #15]
 8013e36:	2b13      	cmp	r3, #19
 8013e38:	f240 83b6 	bls.w	80145a8 <tcp_input+0x800>
 8013e3c:	7bfb      	ldrb	r3, [r7, #15]
 8013e3e:	b29a      	uxth	r2, r3
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	891b      	ldrh	r3, [r3, #8]
 8013e44:	429a      	cmp	r2, r3
 8013e46:	f200 83af 	bhi.w	80145a8 <tcp_input+0x800>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013e4a:	7bfb      	ldrb	r3, [r7, #15]
 8013e4c:	b29b      	uxth	r3, r3
 8013e4e:	3b14      	subs	r3, #20
 8013e50:	b29a      	uxth	r2, r3
 8013e52:	4b6c      	ldr	r3, [pc, #432]	; (8014004 <tcp_input+0x25c>)
 8013e54:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8013e56:	4b6c      	ldr	r3, [pc, #432]	; (8014008 <tcp_input+0x260>)
 8013e58:	2200      	movs	r2, #0
 8013e5a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	895a      	ldrh	r2, [r3, #10]
 8013e60:	7bfb      	ldrb	r3, [r7, #15]
 8013e62:	b29b      	uxth	r3, r3
 8013e64:	429a      	cmp	r2, r3
 8013e66:	d309      	bcc.n	8013e7c <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8013e68:	4b66      	ldr	r3, [pc, #408]	; (8014004 <tcp_input+0x25c>)
 8013e6a:	881a      	ldrh	r2, [r3, #0]
 8013e6c:	4b67      	ldr	r3, [pc, #412]	; (801400c <tcp_input+0x264>)
 8013e6e:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013e70:	7bfb      	ldrb	r3, [r7, #15]
 8013e72:	4619      	mov	r1, r3
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	f7fd fe0b 	bl	8011a90 <pbuf_remove_header>
 8013e7a:	e04e      	b.n	8013f1a <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d105      	bne.n	8013e90 <tcp_input+0xe8>
 8013e84:	4b58      	ldr	r3, [pc, #352]	; (8013fe8 <tcp_input+0x240>)
 8013e86:	22c2      	movs	r2, #194	; 0xc2
 8013e88:	4961      	ldr	r1, [pc, #388]	; (8014010 <tcp_input+0x268>)
 8013e8a:	4859      	ldr	r0, [pc, #356]	; (8013ff0 <tcp_input+0x248>)
 8013e8c:	f007 fcea 	bl	801b864 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013e90:	2114      	movs	r1, #20
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f7fd fdfc 	bl	8011a90 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	895a      	ldrh	r2, [r3, #10]
 8013e9c:	4b5b      	ldr	r3, [pc, #364]	; (801400c <tcp_input+0x264>)
 8013e9e:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013ea0:	4b58      	ldr	r3, [pc, #352]	; (8014004 <tcp_input+0x25c>)
 8013ea2:	881a      	ldrh	r2, [r3, #0]
 8013ea4:	4b59      	ldr	r3, [pc, #356]	; (801400c <tcp_input+0x264>)
 8013ea6:	881b      	ldrh	r3, [r3, #0]
 8013ea8:	1ad3      	subs	r3, r2, r3
 8013eaa:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8013eac:	4b57      	ldr	r3, [pc, #348]	; (801400c <tcp_input+0x264>)
 8013eae:	881b      	ldrh	r3, [r3, #0]
 8013eb0:	4619      	mov	r1, r3
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f7fd fdec 	bl	8011a90 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	895b      	ldrh	r3, [r3, #10]
 8013ebe:	89ba      	ldrh	r2, [r7, #12]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	f200 8373 	bhi.w	80145ac <tcp_input+0x804>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	685b      	ldr	r3, [r3, #4]
 8013ecc:	4a4e      	ldr	r2, [pc, #312]	; (8014008 <tcp_input+0x260>)
 8013ece:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	89ba      	ldrh	r2, [r7, #12]
 8013ed6:	4611      	mov	r1, r2
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f7fd fdd9 	bl	8011a90 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	891a      	ldrh	r2, [r3, #8]
 8013ee2:	89bb      	ldrh	r3, [r7, #12]
 8013ee4:	1ad3      	subs	r3, r2, r3
 8013ee6:	b29a      	uxth	r2, r3
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	895b      	ldrh	r3, [r3, #10]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d005      	beq.n	8013f00 <tcp_input+0x158>
 8013ef4:	4b3c      	ldr	r3, [pc, #240]	; (8013fe8 <tcp_input+0x240>)
 8013ef6:	22df      	movs	r2, #223	; 0xdf
 8013ef8:	4946      	ldr	r1, [pc, #280]	; (8014014 <tcp_input+0x26c>)
 8013efa:	483d      	ldr	r0, [pc, #244]	; (8013ff0 <tcp_input+0x248>)
 8013efc:	f007 fcb2 	bl	801b864 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	891a      	ldrh	r2, [r3, #8]
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	891b      	ldrh	r3, [r3, #8]
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	d005      	beq.n	8013f1a <tcp_input+0x172>
 8013f0e:	4b36      	ldr	r3, [pc, #216]	; (8013fe8 <tcp_input+0x240>)
 8013f10:	22e0      	movs	r2, #224	; 0xe0
 8013f12:	4941      	ldr	r1, [pc, #260]	; (8014018 <tcp_input+0x270>)
 8013f14:	4836      	ldr	r0, [pc, #216]	; (8013ff0 <tcp_input+0x248>)
 8013f16:	f007 fca5 	bl	801b864 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013f1a:	4b36      	ldr	r3, [pc, #216]	; (8013ff4 <tcp_input+0x24c>)
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	881b      	ldrh	r3, [r3, #0]
 8013f20:	b29b      	uxth	r3, r3
 8013f22:	4a34      	ldr	r2, [pc, #208]	; (8013ff4 <tcp_input+0x24c>)
 8013f24:	6814      	ldr	r4, [r2, #0]
 8013f26:	4618      	mov	r0, r3
 8013f28:	f7fc f8be 	bl	80100a8 <lwip_htons>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013f30:	4b30      	ldr	r3, [pc, #192]	; (8013ff4 <tcp_input+0x24c>)
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	885b      	ldrh	r3, [r3, #2]
 8013f36:	b29b      	uxth	r3, r3
 8013f38:	4a2e      	ldr	r2, [pc, #184]	; (8013ff4 <tcp_input+0x24c>)
 8013f3a:	6814      	ldr	r4, [r2, #0]
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f7fc f8b3 	bl	80100a8 <lwip_htons>
 8013f42:	4603      	mov	r3, r0
 8013f44:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013f46:	4b2b      	ldr	r3, [pc, #172]	; (8013ff4 <tcp_input+0x24c>)
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	685b      	ldr	r3, [r3, #4]
 8013f4c:	4a29      	ldr	r2, [pc, #164]	; (8013ff4 <tcp_input+0x24c>)
 8013f4e:	6814      	ldr	r4, [r2, #0]
 8013f50:	4618      	mov	r0, r3
 8013f52:	f7fc f8be 	bl	80100d2 <lwip_htonl>
 8013f56:	4603      	mov	r3, r0
 8013f58:	6063      	str	r3, [r4, #4]
 8013f5a:	6863      	ldr	r3, [r4, #4]
 8013f5c:	4a2f      	ldr	r2, [pc, #188]	; (801401c <tcp_input+0x274>)
 8013f5e:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013f60:	4b24      	ldr	r3, [pc, #144]	; (8013ff4 <tcp_input+0x24c>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	689b      	ldr	r3, [r3, #8]
 8013f66:	4a23      	ldr	r2, [pc, #140]	; (8013ff4 <tcp_input+0x24c>)
 8013f68:	6814      	ldr	r4, [r2, #0]
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7fc f8b1 	bl	80100d2 <lwip_htonl>
 8013f70:	4603      	mov	r3, r0
 8013f72:	60a3      	str	r3, [r4, #8]
 8013f74:	68a3      	ldr	r3, [r4, #8]
 8013f76:	4a2a      	ldr	r2, [pc, #168]	; (8014020 <tcp_input+0x278>)
 8013f78:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013f7a:	4b1e      	ldr	r3, [pc, #120]	; (8013ff4 <tcp_input+0x24c>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	89db      	ldrh	r3, [r3, #14]
 8013f80:	b29b      	uxth	r3, r3
 8013f82:	4a1c      	ldr	r2, [pc, #112]	; (8013ff4 <tcp_input+0x24c>)
 8013f84:	6814      	ldr	r4, [r2, #0]
 8013f86:	4618      	mov	r0, r3
 8013f88:	f7fc f88e 	bl	80100a8 <lwip_htons>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013f90:	4b18      	ldr	r3, [pc, #96]	; (8013ff4 <tcp_input+0x24c>)
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	899b      	ldrh	r3, [r3, #12]
 8013f96:	b29b      	uxth	r3, r3
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7fc f885 	bl	80100a8 <lwip_htons>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	b2db      	uxtb	r3, r3
 8013fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013fa6:	b2da      	uxtb	r2, r3
 8013fa8:	4b1e      	ldr	r3, [pc, #120]	; (8014024 <tcp_input+0x27c>)
 8013faa:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	891a      	ldrh	r2, [r3, #8]
 8013fb0:	4b1d      	ldr	r3, [pc, #116]	; (8014028 <tcp_input+0x280>)
 8013fb2:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013fb4:	4b1b      	ldr	r3, [pc, #108]	; (8014024 <tcp_input+0x27c>)
 8013fb6:	781b      	ldrb	r3, [r3, #0]
 8013fb8:	f003 0303 	and.w	r3, r3, #3
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d00c      	beq.n	8013fda <tcp_input+0x232>
    tcplen++;
 8013fc0:	4b19      	ldr	r3, [pc, #100]	; (8014028 <tcp_input+0x280>)
 8013fc2:	881b      	ldrh	r3, [r3, #0]
 8013fc4:	3301      	adds	r3, #1
 8013fc6:	b29a      	uxth	r2, r3
 8013fc8:	4b17      	ldr	r3, [pc, #92]	; (8014028 <tcp_input+0x280>)
 8013fca:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	891a      	ldrh	r2, [r3, #8]
 8013fd0:	4b15      	ldr	r3, [pc, #84]	; (8014028 <tcp_input+0x280>)
 8013fd2:	881b      	ldrh	r3, [r3, #0]
 8013fd4:	429a      	cmp	r2, r3
 8013fd6:	f200 82eb 	bhi.w	80145b0 <tcp_input+0x808>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013fde:	4b13      	ldr	r3, [pc, #76]	; (801402c <tcp_input+0x284>)
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	61fb      	str	r3, [r7, #28]
 8013fe4:	e09b      	b.n	801411e <tcp_input+0x376>
 8013fe6:	bf00      	nop
 8013fe8:	0801e90c 	.word	0x0801e90c
 8013fec:	0801e940 	.word	0x0801e940
 8013ff0:	0801e958 	.word	0x0801e958
 8013ff4:	2405e8b0 	.word	0x2405e8b0
 8013ff8:	24015e18 	.word	0x24015e18
 8013ffc:	24015e2c 	.word	0x24015e2c
 8014000:	24015e28 	.word	0x24015e28
 8014004:	2405e8b4 	.word	0x2405e8b4
 8014008:	2405e8b8 	.word	0x2405e8b8
 801400c:	2405e8b6 	.word	0x2405e8b6
 8014010:	0801e980 	.word	0x0801e980
 8014014:	0801e990 	.word	0x0801e990
 8014018:	0801e99c 	.word	0x0801e99c
 801401c:	2405e8c0 	.word	0x2405e8c0
 8014020:	2405e8c4 	.word	0x2405e8c4
 8014024:	2405e8cc 	.word	0x2405e8cc
 8014028:	2405e8ca 	.word	0x2405e8ca
 801402c:	2405e894 	.word	0x2405e894
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8014030:	69fb      	ldr	r3, [r7, #28]
 8014032:	7d1b      	ldrb	r3, [r3, #20]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d105      	bne.n	8014044 <tcp_input+0x29c>
 8014038:	4b88      	ldr	r3, [pc, #544]	; (801425c <tcp_input+0x4b4>)
 801403a:	22fb      	movs	r2, #251	; 0xfb
 801403c:	4988      	ldr	r1, [pc, #544]	; (8014260 <tcp_input+0x4b8>)
 801403e:	4889      	ldr	r0, [pc, #548]	; (8014264 <tcp_input+0x4bc>)
 8014040:	f007 fc10 	bl	801b864 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8014044:	69fb      	ldr	r3, [r7, #28]
 8014046:	7d1b      	ldrb	r3, [r3, #20]
 8014048:	2b0a      	cmp	r3, #10
 801404a:	d105      	bne.n	8014058 <tcp_input+0x2b0>
 801404c:	4b83      	ldr	r3, [pc, #524]	; (801425c <tcp_input+0x4b4>)
 801404e:	22fc      	movs	r2, #252	; 0xfc
 8014050:	4985      	ldr	r1, [pc, #532]	; (8014268 <tcp_input+0x4c0>)
 8014052:	4884      	ldr	r0, [pc, #528]	; (8014264 <tcp_input+0x4bc>)
 8014054:	f007 fc06 	bl	801b864 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8014058:	69fb      	ldr	r3, [r7, #28]
 801405a:	7d1b      	ldrb	r3, [r3, #20]
 801405c:	2b01      	cmp	r3, #1
 801405e:	d105      	bne.n	801406c <tcp_input+0x2c4>
 8014060:	4b7e      	ldr	r3, [pc, #504]	; (801425c <tcp_input+0x4b4>)
 8014062:	22fd      	movs	r2, #253	; 0xfd
 8014064:	4981      	ldr	r1, [pc, #516]	; (801426c <tcp_input+0x4c4>)
 8014066:	487f      	ldr	r0, [pc, #508]	; (8014264 <tcp_input+0x4bc>)
 8014068:	f007 fbfc 	bl	801b864 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801406c:	69fb      	ldr	r3, [r7, #28]
 801406e:	7a1b      	ldrb	r3, [r3, #8]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d00c      	beq.n	801408e <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014074:	69fb      	ldr	r3, [r7, #28]
 8014076:	7a1a      	ldrb	r2, [r3, #8]
 8014078:	4b7d      	ldr	r3, [pc, #500]	; (8014270 <tcp_input+0x4c8>)
 801407a:	685b      	ldr	r3, [r3, #4]
 801407c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014080:	3301      	adds	r3, #1
 8014082:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014084:	429a      	cmp	r2, r3
 8014086:	d002      	beq.n	801408e <tcp_input+0x2e6>
      prev = pcb;
 8014088:	69fb      	ldr	r3, [r7, #28]
 801408a:	61bb      	str	r3, [r7, #24]
      continue;
 801408c:	e044      	b.n	8014118 <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 801408e:	69fb      	ldr	r3, [r7, #28]
 8014090:	8b1a      	ldrh	r2, [r3, #24]
 8014092:	4b78      	ldr	r3, [pc, #480]	; (8014274 <tcp_input+0x4cc>)
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	881b      	ldrh	r3, [r3, #0]
 8014098:	b29b      	uxth	r3, r3
 801409a:	429a      	cmp	r2, r3
 801409c:	d13a      	bne.n	8014114 <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 801409e:	69fb      	ldr	r3, [r7, #28]
 80140a0:	8ada      	ldrh	r2, [r3, #22]
 80140a2:	4b74      	ldr	r3, [pc, #464]	; (8014274 <tcp_input+0x4cc>)
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	885b      	ldrh	r3, [r3, #2]
 80140a8:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80140aa:	429a      	cmp	r2, r3
 80140ac:	d132      	bne.n	8014114 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80140ae:	69fb      	ldr	r3, [r7, #28]
 80140b0:	685a      	ldr	r2, [r3, #4]
 80140b2:	4b6f      	ldr	r3, [pc, #444]	; (8014270 <tcp_input+0x4c8>)
 80140b4:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80140b6:	429a      	cmp	r2, r3
 80140b8:	d12c      	bne.n	8014114 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80140ba:	69fb      	ldr	r3, [r7, #28]
 80140bc:	681a      	ldr	r2, [r3, #0]
 80140be:	4b6c      	ldr	r3, [pc, #432]	; (8014270 <tcp_input+0x4c8>)
 80140c0:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80140c2:	429a      	cmp	r2, r3
 80140c4:	d126      	bne.n	8014114 <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80140c6:	69fb      	ldr	r3, [r7, #28]
 80140c8:	68db      	ldr	r3, [r3, #12]
 80140ca:	69fa      	ldr	r2, [r7, #28]
 80140cc:	429a      	cmp	r2, r3
 80140ce:	d106      	bne.n	80140de <tcp_input+0x336>
 80140d0:	4b62      	ldr	r3, [pc, #392]	; (801425c <tcp_input+0x4b4>)
 80140d2:	f240 120d 	movw	r2, #269	; 0x10d
 80140d6:	4968      	ldr	r1, [pc, #416]	; (8014278 <tcp_input+0x4d0>)
 80140d8:	4862      	ldr	r0, [pc, #392]	; (8014264 <tcp_input+0x4bc>)
 80140da:	f007 fbc3 	bl	801b864 <iprintf>
      if (prev != NULL) {
 80140de:	69bb      	ldr	r3, [r7, #24]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d00a      	beq.n	80140fa <tcp_input+0x352>
        prev->next = pcb->next;
 80140e4:	69fb      	ldr	r3, [r7, #28]
 80140e6:	68da      	ldr	r2, [r3, #12]
 80140e8:	69bb      	ldr	r3, [r7, #24]
 80140ea:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80140ec:	4b63      	ldr	r3, [pc, #396]	; (801427c <tcp_input+0x4d4>)
 80140ee:	681a      	ldr	r2, [r3, #0]
 80140f0:	69fb      	ldr	r3, [r7, #28]
 80140f2:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80140f4:	4a61      	ldr	r2, [pc, #388]	; (801427c <tcp_input+0x4d4>)
 80140f6:	69fb      	ldr	r3, [r7, #28]
 80140f8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80140fa:	69fb      	ldr	r3, [r7, #28]
 80140fc:	68db      	ldr	r3, [r3, #12]
 80140fe:	69fa      	ldr	r2, [r7, #28]
 8014100:	429a      	cmp	r2, r3
 8014102:	d110      	bne.n	8014126 <tcp_input+0x37e>
 8014104:	4b55      	ldr	r3, [pc, #340]	; (801425c <tcp_input+0x4b4>)
 8014106:	f240 1215 	movw	r2, #277	; 0x115
 801410a:	495d      	ldr	r1, [pc, #372]	; (8014280 <tcp_input+0x4d8>)
 801410c:	4855      	ldr	r0, [pc, #340]	; (8014264 <tcp_input+0x4bc>)
 801410e:	f007 fba9 	bl	801b864 <iprintf>
      break;
 8014112:	e008      	b.n	8014126 <tcp_input+0x37e>
    }
    prev = pcb;
 8014114:	69fb      	ldr	r3, [r7, #28]
 8014116:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014118:	69fb      	ldr	r3, [r7, #28]
 801411a:	68db      	ldr	r3, [r3, #12]
 801411c:	61fb      	str	r3, [r7, #28]
 801411e:	69fb      	ldr	r3, [r7, #28]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d185      	bne.n	8014030 <tcp_input+0x288>
 8014124:	e000      	b.n	8014128 <tcp_input+0x380>
      break;
 8014126:	bf00      	nop
  }

  if (pcb == NULL) {
 8014128:	69fb      	ldr	r3, [r7, #28]
 801412a:	2b00      	cmp	r3, #0
 801412c:	f040 80b0 	bne.w	8014290 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014130:	4b54      	ldr	r3, [pc, #336]	; (8014284 <tcp_input+0x4dc>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	61fb      	str	r3, [r7, #28]
 8014136:	e03f      	b.n	80141b8 <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014138:	69fb      	ldr	r3, [r7, #28]
 801413a:	7d1b      	ldrb	r3, [r3, #20]
 801413c:	2b0a      	cmp	r3, #10
 801413e:	d006      	beq.n	801414e <tcp_input+0x3a6>
 8014140:	4b46      	ldr	r3, [pc, #280]	; (801425c <tcp_input+0x4b4>)
 8014142:	f240 121f 	movw	r2, #287	; 0x11f
 8014146:	4950      	ldr	r1, [pc, #320]	; (8014288 <tcp_input+0x4e0>)
 8014148:	4846      	ldr	r0, [pc, #280]	; (8014264 <tcp_input+0x4bc>)
 801414a:	f007 fb8b 	bl	801b864 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801414e:	69fb      	ldr	r3, [r7, #28]
 8014150:	7a1b      	ldrb	r3, [r3, #8]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d009      	beq.n	801416a <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014156:	69fb      	ldr	r3, [r7, #28]
 8014158:	7a1a      	ldrb	r2, [r3, #8]
 801415a:	4b45      	ldr	r3, [pc, #276]	; (8014270 <tcp_input+0x4c8>)
 801415c:	685b      	ldr	r3, [r3, #4]
 801415e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014162:	3301      	adds	r3, #1
 8014164:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014166:	429a      	cmp	r2, r3
 8014168:	d122      	bne.n	80141b0 <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801416a:	69fb      	ldr	r3, [r7, #28]
 801416c:	8b1a      	ldrh	r2, [r3, #24]
 801416e:	4b41      	ldr	r3, [pc, #260]	; (8014274 <tcp_input+0x4cc>)
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	881b      	ldrh	r3, [r3, #0]
 8014174:	b29b      	uxth	r3, r3
 8014176:	429a      	cmp	r2, r3
 8014178:	d11b      	bne.n	80141b2 <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 801417a:	69fb      	ldr	r3, [r7, #28]
 801417c:	8ada      	ldrh	r2, [r3, #22]
 801417e:	4b3d      	ldr	r3, [pc, #244]	; (8014274 <tcp_input+0x4cc>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	885b      	ldrh	r3, [r3, #2]
 8014184:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8014186:	429a      	cmp	r2, r3
 8014188:	d113      	bne.n	80141b2 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801418a:	69fb      	ldr	r3, [r7, #28]
 801418c:	685a      	ldr	r2, [r3, #4]
 801418e:	4b38      	ldr	r3, [pc, #224]	; (8014270 <tcp_input+0x4c8>)
 8014190:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8014192:	429a      	cmp	r2, r3
 8014194:	d10d      	bne.n	80141b2 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014196:	69fb      	ldr	r3, [r7, #28]
 8014198:	681a      	ldr	r2, [r3, #0]
 801419a:	4b35      	ldr	r3, [pc, #212]	; (8014270 <tcp_input+0x4c8>)
 801419c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801419e:	429a      	cmp	r2, r3
 80141a0:	d107      	bne.n	80141b2 <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80141a2:	69f8      	ldr	r0, [r7, #28]
 80141a4:	f000 fb5e 	bl	8014864 <tcp_timewait_input>
        }
        pbuf_free(p);
 80141a8:	6878      	ldr	r0, [r7, #4]
 80141aa:	f7fd fcf7 	bl	8011b9c <pbuf_free>
        return;
 80141ae:	e205      	b.n	80145bc <tcp_input+0x814>
        continue;
 80141b0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80141b2:	69fb      	ldr	r3, [r7, #28]
 80141b4:	68db      	ldr	r3, [r3, #12]
 80141b6:	61fb      	str	r3, [r7, #28]
 80141b8:	69fb      	ldr	r3, [r7, #28]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d1bc      	bne.n	8014138 <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80141be:	2300      	movs	r3, #0
 80141c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80141c2:	4b32      	ldr	r3, [pc, #200]	; (801428c <tcp_input+0x4e4>)
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	617b      	str	r3, [r7, #20]
 80141c8:	e02a      	b.n	8014220 <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80141ca:	697b      	ldr	r3, [r7, #20]
 80141cc:	7a1b      	ldrb	r3, [r3, #8]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d00c      	beq.n	80141ec <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80141d2:	697b      	ldr	r3, [r7, #20]
 80141d4:	7a1a      	ldrb	r2, [r3, #8]
 80141d6:	4b26      	ldr	r3, [pc, #152]	; (8014270 <tcp_input+0x4c8>)
 80141d8:	685b      	ldr	r3, [r3, #4]
 80141da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80141de:	3301      	adds	r3, #1
 80141e0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80141e2:	429a      	cmp	r2, r3
 80141e4:	d002      	beq.n	80141ec <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 80141e6:	697b      	ldr	r3, [r7, #20]
 80141e8:	61bb      	str	r3, [r7, #24]
        continue;
 80141ea:	e016      	b.n	801421a <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80141ec:	697b      	ldr	r3, [r7, #20]
 80141ee:	8ada      	ldrh	r2, [r3, #22]
 80141f0:	4b20      	ldr	r3, [pc, #128]	; (8014274 <tcp_input+0x4cc>)
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	885b      	ldrh	r3, [r3, #2]
 80141f6:	b29b      	uxth	r3, r3
 80141f8:	429a      	cmp	r2, r3
 80141fa:	d10c      	bne.n	8014216 <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80141fc:	697b      	ldr	r3, [r7, #20]
 80141fe:	681a      	ldr	r2, [r3, #0]
 8014200:	4b1b      	ldr	r3, [pc, #108]	; (8014270 <tcp_input+0x4c8>)
 8014202:	695b      	ldr	r3, [r3, #20]
 8014204:	429a      	cmp	r2, r3
 8014206:	d00f      	beq.n	8014228 <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d00d      	beq.n	801422a <tcp_input+0x482>
 801420e:	697b      	ldr	r3, [r7, #20]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d009      	beq.n	801422a <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8014216:	697b      	ldr	r3, [r7, #20]
 8014218:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801421a:	697b      	ldr	r3, [r7, #20]
 801421c:	68db      	ldr	r3, [r3, #12]
 801421e:	617b      	str	r3, [r7, #20]
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d1d1      	bne.n	80141ca <tcp_input+0x422>
 8014226:	e000      	b.n	801422a <tcp_input+0x482>
            break;
 8014228:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801422a:	697b      	ldr	r3, [r7, #20]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d02f      	beq.n	8014290 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8014230:	69bb      	ldr	r3, [r7, #24]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d00a      	beq.n	801424c <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	68da      	ldr	r2, [r3, #12]
 801423a:	69bb      	ldr	r3, [r7, #24]
 801423c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801423e:	4b13      	ldr	r3, [pc, #76]	; (801428c <tcp_input+0x4e4>)
 8014240:	681a      	ldr	r2, [r3, #0]
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8014246:	4a11      	ldr	r2, [pc, #68]	; (801428c <tcp_input+0x4e4>)
 8014248:	697b      	ldr	r3, [r7, #20]
 801424a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801424c:	6978      	ldr	r0, [r7, #20]
 801424e:	f000 fa0b 	bl	8014668 <tcp_listen_input>
      }
      pbuf_free(p);
 8014252:	6878      	ldr	r0, [r7, #4]
 8014254:	f7fd fca2 	bl	8011b9c <pbuf_free>
      return;
 8014258:	e1b0      	b.n	80145bc <tcp_input+0x814>
 801425a:	bf00      	nop
 801425c:	0801e90c 	.word	0x0801e90c
 8014260:	0801e9bc 	.word	0x0801e9bc
 8014264:	0801e958 	.word	0x0801e958
 8014268:	0801e9e4 	.word	0x0801e9e4
 801426c:	0801ea10 	.word	0x0801ea10
 8014270:	24015e18 	.word	0x24015e18
 8014274:	2405e8b0 	.word	0x2405e8b0
 8014278:	0801ea38 	.word	0x0801ea38
 801427c:	2405e894 	.word	0x2405e894
 8014280:	0801ea64 	.word	0x0801ea64
 8014284:	2405e898 	.word	0x2405e898
 8014288:	0801ea90 	.word	0x0801ea90
 801428c:	2405e890 	.word	0x2405e890
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	2b00      	cmp	r3, #0
 8014294:	f000 8158 	beq.w	8014548 <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8014298:	4b95      	ldr	r3, [pc, #596]	; (80144f0 <tcp_input+0x748>)
 801429a:	2200      	movs	r2, #0
 801429c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	891a      	ldrh	r2, [r3, #8]
 80142a2:	4b93      	ldr	r3, [pc, #588]	; (80144f0 <tcp_input+0x748>)
 80142a4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80142a6:	4a92      	ldr	r2, [pc, #584]	; (80144f0 <tcp_input+0x748>)
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80142ac:	4b91      	ldr	r3, [pc, #580]	; (80144f4 <tcp_input+0x74c>)
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	4a8f      	ldr	r2, [pc, #572]	; (80144f0 <tcp_input+0x748>)
 80142b2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80142b4:	4b90      	ldr	r3, [pc, #576]	; (80144f8 <tcp_input+0x750>)
 80142b6:	2200      	movs	r2, #0
 80142b8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80142ba:	4b90      	ldr	r3, [pc, #576]	; (80144fc <tcp_input+0x754>)
 80142bc:	2200      	movs	r2, #0
 80142be:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80142c0:	4b8f      	ldr	r3, [pc, #572]	; (8014500 <tcp_input+0x758>)
 80142c2:	2200      	movs	r2, #0
 80142c4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80142c6:	4b8f      	ldr	r3, [pc, #572]	; (8014504 <tcp_input+0x75c>)
 80142c8:	781b      	ldrb	r3, [r3, #0]
 80142ca:	f003 0308 	and.w	r3, r3, #8
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d006      	beq.n	80142e0 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	7b5b      	ldrb	r3, [r3, #13]
 80142d6:	f043 0301 	orr.w	r3, r3, #1
 80142da:	b2da      	uxtb	r2, r3
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80142e0:	69fb      	ldr	r3, [r7, #28]
 80142e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d017      	beq.n	8014318 <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80142e8:	69f8      	ldr	r0, [r7, #28]
 80142ea:	f7ff f849 	bl	8013380 <tcp_process_refused_data>
 80142ee:	4603      	mov	r3, r0
 80142f0:	f113 0f0d 	cmn.w	r3, #13
 80142f4:	d007      	beq.n	8014306 <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80142f6:	69fb      	ldr	r3, [r7, #28]
 80142f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d00c      	beq.n	8014318 <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80142fe:	4b82      	ldr	r3, [pc, #520]	; (8014508 <tcp_input+0x760>)
 8014300:	881b      	ldrh	r3, [r3, #0]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d008      	beq.n	8014318 <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8014306:	69fb      	ldr	r3, [r7, #28]
 8014308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801430a:	2b00      	cmp	r3, #0
 801430c:	f040 80e3 	bne.w	80144d6 <tcp_input+0x72e>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014310:	69f8      	ldr	r0, [r7, #28]
 8014312:	f003 fe29 	bl	8017f68 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8014316:	e0de      	b.n	80144d6 <tcp_input+0x72e>
      }
    }
    tcp_input_pcb = pcb;
 8014318:	4a7c      	ldr	r2, [pc, #496]	; (801450c <tcp_input+0x764>)
 801431a:	69fb      	ldr	r3, [r7, #28]
 801431c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801431e:	69f8      	ldr	r0, [r7, #28]
 8014320:	f000 fb1a 	bl	8014958 <tcp_process>
 8014324:	4603      	mov	r3, r0
 8014326:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8014328:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801432c:	f113 0f0d 	cmn.w	r3, #13
 8014330:	f000 80d3 	beq.w	80144da <tcp_input+0x732>
      if (recv_flags & TF_RESET) {
 8014334:	4b71      	ldr	r3, [pc, #452]	; (80144fc <tcp_input+0x754>)
 8014336:	781b      	ldrb	r3, [r3, #0]
 8014338:	f003 0308 	and.w	r3, r3, #8
 801433c:	2b00      	cmp	r3, #0
 801433e:	d015      	beq.n	801436c <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014340:	69fb      	ldr	r3, [r7, #28]
 8014342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014346:	2b00      	cmp	r3, #0
 8014348:	d008      	beq.n	801435c <tcp_input+0x5b4>
 801434a:	69fb      	ldr	r3, [r7, #28]
 801434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014350:	69fa      	ldr	r2, [r7, #28]
 8014352:	6912      	ldr	r2, [r2, #16]
 8014354:	f06f 010d 	mvn.w	r1, #13
 8014358:	4610      	mov	r0, r2
 801435a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801435c:	69f9      	ldr	r1, [r7, #28]
 801435e:	486c      	ldr	r0, [pc, #432]	; (8014510 <tcp_input+0x768>)
 8014360:	f7ff fbaa 	bl	8013ab8 <tcp_pcb_remove>
        tcp_free(pcb);
 8014364:	69f8      	ldr	r0, [r7, #28]
 8014366:	f7fd fec5 	bl	80120f4 <tcp_free>
 801436a:	e0da      	b.n	8014522 <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 801436c:	2300      	movs	r3, #0
 801436e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8014370:	4b63      	ldr	r3, [pc, #396]	; (8014500 <tcp_input+0x758>)
 8014372:	881b      	ldrh	r3, [r3, #0]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d01d      	beq.n	80143b4 <tcp_input+0x60c>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014378:	4b61      	ldr	r3, [pc, #388]	; (8014500 <tcp_input+0x758>)
 801437a:	881b      	ldrh	r3, [r3, #0]
 801437c:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801437e:	69fb      	ldr	r3, [r7, #28]
 8014380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014384:	2b00      	cmp	r3, #0
 8014386:	d00a      	beq.n	801439e <tcp_input+0x5f6>
 8014388:	69fb      	ldr	r3, [r7, #28]
 801438a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801438e:	69fa      	ldr	r2, [r7, #28]
 8014390:	6910      	ldr	r0, [r2, #16]
 8014392:	897a      	ldrh	r2, [r7, #10]
 8014394:	69f9      	ldr	r1, [r7, #28]
 8014396:	4798      	blx	r3
 8014398:	4603      	mov	r3, r0
 801439a:	74fb      	strb	r3, [r7, #19]
 801439c:	e001      	b.n	80143a2 <tcp_input+0x5fa>
 801439e:	2300      	movs	r3, #0
 80143a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80143a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80143a6:	f113 0f0d 	cmn.w	r3, #13
 80143aa:	f000 8098 	beq.w	80144de <tcp_input+0x736>
              goto aborted;
            }
          }
          recv_acked = 0;
 80143ae:	4b54      	ldr	r3, [pc, #336]	; (8014500 <tcp_input+0x758>)
 80143b0:	2200      	movs	r2, #0
 80143b2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80143b4:	69f8      	ldr	r0, [r7, #28]
 80143b6:	f000 f917 	bl	80145e8 <tcp_input_delayed_close>
 80143ba:	4603      	mov	r3, r0
 80143bc:	2b00      	cmp	r3, #0
 80143be:	f040 8090 	bne.w	80144e2 <tcp_input+0x73a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80143c2:	4b4d      	ldr	r3, [pc, #308]	; (80144f8 <tcp_input+0x750>)
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d041      	beq.n	801444e <tcp_input+0x6a6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80143ca:	69fb      	ldr	r3, [r7, #28]
 80143cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d006      	beq.n	80143e0 <tcp_input+0x638>
 80143d2:	4b50      	ldr	r3, [pc, #320]	; (8014514 <tcp_input+0x76c>)
 80143d4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80143d8:	494f      	ldr	r1, [pc, #316]	; (8014518 <tcp_input+0x770>)
 80143da:	4850      	ldr	r0, [pc, #320]	; (801451c <tcp_input+0x774>)
 80143dc:	f007 fa42 	bl	801b864 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80143e0:	69fb      	ldr	r3, [r7, #28]
 80143e2:	8b5b      	ldrh	r3, [r3, #26]
 80143e4:	f003 0310 	and.w	r3, r3, #16
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d008      	beq.n	80143fe <tcp_input+0x656>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80143ec:	4b42      	ldr	r3, [pc, #264]	; (80144f8 <tcp_input+0x750>)
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	4618      	mov	r0, r3
 80143f2:	f7fd fbd3 	bl	8011b9c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80143f6:	69f8      	ldr	r0, [r7, #28]
 80143f8:	f7fe f9c0 	bl	801277c <tcp_abort>
            goto aborted;
 80143fc:	e091      	b.n	8014522 <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80143fe:	69fb      	ldr	r3, [r7, #28]
 8014400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014404:	2b00      	cmp	r3, #0
 8014406:	d00c      	beq.n	8014422 <tcp_input+0x67a>
 8014408:	69fb      	ldr	r3, [r7, #28]
 801440a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801440e:	69fb      	ldr	r3, [r7, #28]
 8014410:	6918      	ldr	r0, [r3, #16]
 8014412:	4b39      	ldr	r3, [pc, #228]	; (80144f8 <tcp_input+0x750>)
 8014414:	681a      	ldr	r2, [r3, #0]
 8014416:	2300      	movs	r3, #0
 8014418:	69f9      	ldr	r1, [r7, #28]
 801441a:	47a0      	blx	r4
 801441c:	4603      	mov	r3, r0
 801441e:	74fb      	strb	r3, [r7, #19]
 8014420:	e008      	b.n	8014434 <tcp_input+0x68c>
 8014422:	4b35      	ldr	r3, [pc, #212]	; (80144f8 <tcp_input+0x750>)
 8014424:	681a      	ldr	r2, [r3, #0]
 8014426:	2300      	movs	r3, #0
 8014428:	69f9      	ldr	r1, [r7, #28]
 801442a:	2000      	movs	r0, #0
 801442c:	f7ff f87e 	bl	801352c <tcp_recv_null>
 8014430:	4603      	mov	r3, r0
 8014432:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014434:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014438:	f113 0f0d 	cmn.w	r3, #13
 801443c:	d053      	beq.n	80144e6 <tcp_input+0x73e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801443e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d003      	beq.n	801444e <tcp_input+0x6a6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014446:	4b2c      	ldr	r3, [pc, #176]	; (80144f8 <tcp_input+0x750>)
 8014448:	681a      	ldr	r2, [r3, #0]
 801444a:	69fb      	ldr	r3, [r7, #28]
 801444c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801444e:	4b2b      	ldr	r3, [pc, #172]	; (80144fc <tcp_input+0x754>)
 8014450:	781b      	ldrb	r3, [r3, #0]
 8014452:	f003 0320 	and.w	r3, r3, #32
 8014456:	2b00      	cmp	r3, #0
 8014458:	d030      	beq.n	80144bc <tcp_input+0x714>
          if (pcb->refused_data != NULL) {
 801445a:	69fb      	ldr	r3, [r7, #28]
 801445c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801445e:	2b00      	cmp	r3, #0
 8014460:	d009      	beq.n	8014476 <tcp_input+0x6ce>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8014462:	69fb      	ldr	r3, [r7, #28]
 8014464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014466:	7b5a      	ldrb	r2, [r3, #13]
 8014468:	69fb      	ldr	r3, [r7, #28]
 801446a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801446c:	f042 0220 	orr.w	r2, r2, #32
 8014470:	b2d2      	uxtb	r2, r2
 8014472:	735a      	strb	r2, [r3, #13]
 8014474:	e022      	b.n	80144bc <tcp_input+0x714>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014476:	69fb      	ldr	r3, [r7, #28]
 8014478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801447a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801447e:	d005      	beq.n	801448c <tcp_input+0x6e4>
              pcb->rcv_wnd++;
 8014480:	69fb      	ldr	r3, [r7, #28]
 8014482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014484:	3301      	adds	r3, #1
 8014486:	b29a      	uxth	r2, r3
 8014488:	69fb      	ldr	r3, [r7, #28]
 801448a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801448c:	69fb      	ldr	r3, [r7, #28]
 801448e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014492:	2b00      	cmp	r3, #0
 8014494:	d00b      	beq.n	80144ae <tcp_input+0x706>
 8014496:	69fb      	ldr	r3, [r7, #28]
 8014498:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801449c:	69fb      	ldr	r3, [r7, #28]
 801449e:	6918      	ldr	r0, [r3, #16]
 80144a0:	2300      	movs	r3, #0
 80144a2:	2200      	movs	r2, #0
 80144a4:	69f9      	ldr	r1, [r7, #28]
 80144a6:	47a0      	blx	r4
 80144a8:	4603      	mov	r3, r0
 80144aa:	74fb      	strb	r3, [r7, #19]
 80144ac:	e001      	b.n	80144b2 <tcp_input+0x70a>
 80144ae:	2300      	movs	r3, #0
 80144b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80144b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80144b6:	f113 0f0d 	cmn.w	r3, #13
 80144ba:	d016      	beq.n	80144ea <tcp_input+0x742>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80144bc:	4b13      	ldr	r3, [pc, #76]	; (801450c <tcp_input+0x764>)
 80144be:	2200      	movs	r2, #0
 80144c0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80144c2:	69f8      	ldr	r0, [r7, #28]
 80144c4:	f000 f890 	bl	80145e8 <tcp_input_delayed_close>
 80144c8:	4603      	mov	r3, r0
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d128      	bne.n	8014520 <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80144ce:	69f8      	ldr	r0, [r7, #28]
 80144d0:	f002 ff22 	bl	8017318 <tcp_output>
 80144d4:	e025      	b.n	8014522 <tcp_input+0x77a>
        goto aborted;
 80144d6:	bf00      	nop
 80144d8:	e023      	b.n	8014522 <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80144da:	bf00      	nop
 80144dc:	e021      	b.n	8014522 <tcp_input+0x77a>
              goto aborted;
 80144de:	bf00      	nop
 80144e0:	e01f      	b.n	8014522 <tcp_input+0x77a>
          goto aborted;
 80144e2:	bf00      	nop
 80144e4:	e01d      	b.n	8014522 <tcp_input+0x77a>
            goto aborted;
 80144e6:	bf00      	nop
 80144e8:	e01b      	b.n	8014522 <tcp_input+0x77a>
              goto aborted;
 80144ea:	bf00      	nop
 80144ec:	e019      	b.n	8014522 <tcp_input+0x77a>
 80144ee:	bf00      	nop
 80144f0:	2405e8a0 	.word	0x2405e8a0
 80144f4:	2405e8b0 	.word	0x2405e8b0
 80144f8:	2405e8d0 	.word	0x2405e8d0
 80144fc:	2405e8cd 	.word	0x2405e8cd
 8014500:	2405e8c8 	.word	0x2405e8c8
 8014504:	2405e8cc 	.word	0x2405e8cc
 8014508:	2405e8ca 	.word	0x2405e8ca
 801450c:	2405e8d4 	.word	0x2405e8d4
 8014510:	2405e894 	.word	0x2405e894
 8014514:	0801e90c 	.word	0x0801e90c
 8014518:	0801eac0 	.word	0x0801eac0
 801451c:	0801e958 	.word	0x0801e958
          goto aborted;
 8014520:	bf00      	nop
    tcp_input_pcb = NULL;
 8014522:	4b28      	ldr	r3, [pc, #160]	; (80145c4 <tcp_input+0x81c>)
 8014524:	2200      	movs	r2, #0
 8014526:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014528:	4b27      	ldr	r3, [pc, #156]	; (80145c8 <tcp_input+0x820>)
 801452a:	2200      	movs	r2, #0
 801452c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801452e:	4b27      	ldr	r3, [pc, #156]	; (80145cc <tcp_input+0x824>)
 8014530:	685b      	ldr	r3, [r3, #4]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d041      	beq.n	80145ba <tcp_input+0x812>
      pbuf_free(inseg.p);
 8014536:	4b25      	ldr	r3, [pc, #148]	; (80145cc <tcp_input+0x824>)
 8014538:	685b      	ldr	r3, [r3, #4]
 801453a:	4618      	mov	r0, r3
 801453c:	f7fd fb2e 	bl	8011b9c <pbuf_free>
      inseg.p = NULL;
 8014540:	4b22      	ldr	r3, [pc, #136]	; (80145cc <tcp_input+0x824>)
 8014542:	2200      	movs	r2, #0
 8014544:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014546:	e038      	b.n	80145ba <tcp_input+0x812>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014548:	4b21      	ldr	r3, [pc, #132]	; (80145d0 <tcp_input+0x828>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	899b      	ldrh	r3, [r3, #12]
 801454e:	b29b      	uxth	r3, r3
 8014550:	4618      	mov	r0, r3
 8014552:	f7fb fda9 	bl	80100a8 <lwip_htons>
 8014556:	4603      	mov	r3, r0
 8014558:	b2db      	uxtb	r3, r3
 801455a:	f003 0304 	and.w	r3, r3, #4
 801455e:	2b00      	cmp	r3, #0
 8014560:	d118      	bne.n	8014594 <tcp_input+0x7ec>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014562:	4b1c      	ldr	r3, [pc, #112]	; (80145d4 <tcp_input+0x82c>)
 8014564:	6819      	ldr	r1, [r3, #0]
 8014566:	4b1c      	ldr	r3, [pc, #112]	; (80145d8 <tcp_input+0x830>)
 8014568:	881b      	ldrh	r3, [r3, #0]
 801456a:	461a      	mov	r2, r3
 801456c:	4b1b      	ldr	r3, [pc, #108]	; (80145dc <tcp_input+0x834>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014572:	4b17      	ldr	r3, [pc, #92]	; (80145d0 <tcp_input+0x828>)
 8014574:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014576:	885b      	ldrh	r3, [r3, #2]
 8014578:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801457a:	4a15      	ldr	r2, [pc, #84]	; (80145d0 <tcp_input+0x828>)
 801457c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801457e:	8812      	ldrh	r2, [r2, #0]
 8014580:	b292      	uxth	r2, r2
 8014582:	9202      	str	r2, [sp, #8]
 8014584:	9301      	str	r3, [sp, #4]
 8014586:	4b16      	ldr	r3, [pc, #88]	; (80145e0 <tcp_input+0x838>)
 8014588:	9300      	str	r3, [sp, #0]
 801458a:	4b16      	ldr	r3, [pc, #88]	; (80145e4 <tcp_input+0x83c>)
 801458c:	4602      	mov	r2, r0
 801458e:	2000      	movs	r0, #0
 8014590:	f003 fc98 	bl	8017ec4 <tcp_rst>
    pbuf_free(p);
 8014594:	6878      	ldr	r0, [r7, #4]
 8014596:	f7fd fb01 	bl	8011b9c <pbuf_free>
  return;
 801459a:	e00e      	b.n	80145ba <tcp_input+0x812>
    goto dropped;
 801459c:	bf00      	nop
 801459e:	e008      	b.n	80145b2 <tcp_input+0x80a>
    goto dropped;
 80145a0:	bf00      	nop
 80145a2:	e006      	b.n	80145b2 <tcp_input+0x80a>
      goto dropped;
 80145a4:	bf00      	nop
 80145a6:	e004      	b.n	80145b2 <tcp_input+0x80a>
    goto dropped;
 80145a8:	bf00      	nop
 80145aa:	e002      	b.n	80145b2 <tcp_input+0x80a>
      goto dropped;
 80145ac:	bf00      	nop
 80145ae:	e000      	b.n	80145b2 <tcp_input+0x80a>
      goto dropped;
 80145b0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80145b2:	6878      	ldr	r0, [r7, #4]
 80145b4:	f7fd faf2 	bl	8011b9c <pbuf_free>
 80145b8:	e000      	b.n	80145bc <tcp_input+0x814>
  return;
 80145ba:	bf00      	nop
}
 80145bc:	3724      	adds	r7, #36	; 0x24
 80145be:	46bd      	mov	sp, r7
 80145c0:	bd90      	pop	{r4, r7, pc}
 80145c2:	bf00      	nop
 80145c4:	2405e8d4 	.word	0x2405e8d4
 80145c8:	2405e8d0 	.word	0x2405e8d0
 80145cc:	2405e8a0 	.word	0x2405e8a0
 80145d0:	2405e8b0 	.word	0x2405e8b0
 80145d4:	2405e8c4 	.word	0x2405e8c4
 80145d8:	2405e8ca 	.word	0x2405e8ca
 80145dc:	2405e8c0 	.word	0x2405e8c0
 80145e0:	24015e28 	.word	0x24015e28
 80145e4:	24015e2c 	.word	0x24015e2c

080145e8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b082      	sub	sp, #8
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d106      	bne.n	8014604 <tcp_input_delayed_close+0x1c>
 80145f6:	4b17      	ldr	r3, [pc, #92]	; (8014654 <tcp_input_delayed_close+0x6c>)
 80145f8:	f240 225a 	movw	r2, #602	; 0x25a
 80145fc:	4916      	ldr	r1, [pc, #88]	; (8014658 <tcp_input_delayed_close+0x70>)
 80145fe:	4817      	ldr	r0, [pc, #92]	; (801465c <tcp_input_delayed_close+0x74>)
 8014600:	f007 f930 	bl	801b864 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014604:	4b16      	ldr	r3, [pc, #88]	; (8014660 <tcp_input_delayed_close+0x78>)
 8014606:	781b      	ldrb	r3, [r3, #0]
 8014608:	f003 0310 	and.w	r3, r3, #16
 801460c:	2b00      	cmp	r3, #0
 801460e:	d01c      	beq.n	801464a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	8b5b      	ldrh	r3, [r3, #26]
 8014614:	f003 0310 	and.w	r3, r3, #16
 8014618:	2b00      	cmp	r3, #0
 801461a:	d10d      	bne.n	8014638 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014622:	2b00      	cmp	r3, #0
 8014624:	d008      	beq.n	8014638 <tcp_input_delayed_close+0x50>
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801462c:	687a      	ldr	r2, [r7, #4]
 801462e:	6912      	ldr	r2, [r2, #16]
 8014630:	f06f 010e 	mvn.w	r1, #14
 8014634:	4610      	mov	r0, r2
 8014636:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014638:	6879      	ldr	r1, [r7, #4]
 801463a:	480a      	ldr	r0, [pc, #40]	; (8014664 <tcp_input_delayed_close+0x7c>)
 801463c:	f7ff fa3c 	bl	8013ab8 <tcp_pcb_remove>
    tcp_free(pcb);
 8014640:	6878      	ldr	r0, [r7, #4]
 8014642:	f7fd fd57 	bl	80120f4 <tcp_free>
    return 1;
 8014646:	2301      	movs	r3, #1
 8014648:	e000      	b.n	801464c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801464a:	2300      	movs	r3, #0
}
 801464c:	4618      	mov	r0, r3
 801464e:	3708      	adds	r7, #8
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}
 8014654:	0801e90c 	.word	0x0801e90c
 8014658:	0801eadc 	.word	0x0801eadc
 801465c:	0801e958 	.word	0x0801e958
 8014660:	2405e8cd 	.word	0x2405e8cd
 8014664:	2405e894 	.word	0x2405e894

08014668 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014668:	b590      	push	{r4, r7, lr}
 801466a:	b08b      	sub	sp, #44	; 0x2c
 801466c:	af04      	add	r7, sp, #16
 801466e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014670:	4b6f      	ldr	r3, [pc, #444]	; (8014830 <tcp_listen_input+0x1c8>)
 8014672:	781b      	ldrb	r3, [r3, #0]
 8014674:	f003 0304 	and.w	r3, r3, #4
 8014678:	2b00      	cmp	r3, #0
 801467a:	f040 80d2 	bne.w	8014822 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d106      	bne.n	8014692 <tcp_listen_input+0x2a>
 8014684:	4b6b      	ldr	r3, [pc, #428]	; (8014834 <tcp_listen_input+0x1cc>)
 8014686:	f240 2281 	movw	r2, #641	; 0x281
 801468a:	496b      	ldr	r1, [pc, #428]	; (8014838 <tcp_listen_input+0x1d0>)
 801468c:	486b      	ldr	r0, [pc, #428]	; (801483c <tcp_listen_input+0x1d4>)
 801468e:	f007 f8e9 	bl	801b864 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014692:	4b67      	ldr	r3, [pc, #412]	; (8014830 <tcp_listen_input+0x1c8>)
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	f003 0310 	and.w	r3, r3, #16
 801469a:	2b00      	cmp	r3, #0
 801469c:	d019      	beq.n	80146d2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801469e:	4b68      	ldr	r3, [pc, #416]	; (8014840 <tcp_listen_input+0x1d8>)
 80146a0:	6819      	ldr	r1, [r3, #0]
 80146a2:	4b68      	ldr	r3, [pc, #416]	; (8014844 <tcp_listen_input+0x1dc>)
 80146a4:	881b      	ldrh	r3, [r3, #0]
 80146a6:	461a      	mov	r2, r3
 80146a8:	4b67      	ldr	r3, [pc, #412]	; (8014848 <tcp_listen_input+0x1e0>)
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80146ae:	4b67      	ldr	r3, [pc, #412]	; (801484c <tcp_listen_input+0x1e4>)
 80146b0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146b2:	885b      	ldrh	r3, [r3, #2]
 80146b4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80146b6:	4a65      	ldr	r2, [pc, #404]	; (801484c <tcp_listen_input+0x1e4>)
 80146b8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146ba:	8812      	ldrh	r2, [r2, #0]
 80146bc:	b292      	uxth	r2, r2
 80146be:	9202      	str	r2, [sp, #8]
 80146c0:	9301      	str	r3, [sp, #4]
 80146c2:	4b63      	ldr	r3, [pc, #396]	; (8014850 <tcp_listen_input+0x1e8>)
 80146c4:	9300      	str	r3, [sp, #0]
 80146c6:	4b63      	ldr	r3, [pc, #396]	; (8014854 <tcp_listen_input+0x1ec>)
 80146c8:	4602      	mov	r2, r0
 80146ca:	6878      	ldr	r0, [r7, #4]
 80146cc:	f003 fbfa 	bl	8017ec4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80146d0:	e0a9      	b.n	8014826 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80146d2:	4b57      	ldr	r3, [pc, #348]	; (8014830 <tcp_listen_input+0x1c8>)
 80146d4:	781b      	ldrb	r3, [r3, #0]
 80146d6:	f003 0302 	and.w	r3, r3, #2
 80146da:	2b00      	cmp	r3, #0
 80146dc:	f000 80a3 	beq.w	8014826 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	7d5b      	ldrb	r3, [r3, #21]
 80146e4:	4618      	mov	r0, r3
 80146e6:	f7ff f845 	bl	8013774 <tcp_alloc>
 80146ea:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d111      	bne.n	8014716 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	699b      	ldr	r3, [r3, #24]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d00a      	beq.n	8014710 <tcp_listen_input+0xa8>
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	699b      	ldr	r3, [r3, #24]
 80146fe:	687a      	ldr	r2, [r7, #4]
 8014700:	6910      	ldr	r0, [r2, #16]
 8014702:	f04f 32ff 	mov.w	r2, #4294967295
 8014706:	2100      	movs	r1, #0
 8014708:	4798      	blx	r3
 801470a:	4603      	mov	r3, r0
 801470c:	73bb      	strb	r3, [r7, #14]
      return;
 801470e:	e08b      	b.n	8014828 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014710:	23f0      	movs	r3, #240	; 0xf0
 8014712:	73bb      	strb	r3, [r7, #14]
      return;
 8014714:	e088      	b.n	8014828 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014716:	4b50      	ldr	r3, [pc, #320]	; (8014858 <tcp_listen_input+0x1f0>)
 8014718:	695a      	ldr	r2, [r3, #20]
 801471a:	697b      	ldr	r3, [r7, #20]
 801471c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801471e:	4b4e      	ldr	r3, [pc, #312]	; (8014858 <tcp_listen_input+0x1f0>)
 8014720:	691a      	ldr	r2, [r3, #16]
 8014722:	697b      	ldr	r3, [r7, #20]
 8014724:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	8ada      	ldrh	r2, [r3, #22]
 801472a:	697b      	ldr	r3, [r7, #20]
 801472c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801472e:	4b47      	ldr	r3, [pc, #284]	; (801484c <tcp_listen_input+0x1e4>)
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	881b      	ldrh	r3, [r3, #0]
 8014734:	b29a      	uxth	r2, r3
 8014736:	697b      	ldr	r3, [r7, #20]
 8014738:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801473a:	697b      	ldr	r3, [r7, #20]
 801473c:	2203      	movs	r2, #3
 801473e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014740:	4b41      	ldr	r3, [pc, #260]	; (8014848 <tcp_listen_input+0x1e0>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	1c5a      	adds	r2, r3, #1
 8014746:	697b      	ldr	r3, [r7, #20]
 8014748:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801474a:	697b      	ldr	r3, [r7, #20]
 801474c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8014752:	6978      	ldr	r0, [r7, #20]
 8014754:	f7ff fa44 	bl	8013be0 <tcp_next_iss>
 8014758:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	693a      	ldr	r2, [r7, #16]
 801475e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8014760:	697b      	ldr	r3, [r7, #20]
 8014762:	693a      	ldr	r2, [r7, #16]
 8014764:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8014766:	697b      	ldr	r3, [r7, #20]
 8014768:	693a      	ldr	r2, [r7, #16]
 801476a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801476c:	697b      	ldr	r3, [r7, #20]
 801476e:	693a      	ldr	r2, [r7, #16]
 8014770:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014772:	4b35      	ldr	r3, [pc, #212]	; (8014848 <tcp_listen_input+0x1e0>)
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	1e5a      	subs	r2, r3, #1
 8014778:	697b      	ldr	r3, [r7, #20]
 801477a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	691a      	ldr	r2, [r3, #16]
 8014780:	697b      	ldr	r3, [r7, #20]
 8014782:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014784:	697b      	ldr	r3, [r7, #20]
 8014786:	687a      	ldr	r2, [r7, #4]
 8014788:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	7a5b      	ldrb	r3, [r3, #9]
 801478e:	f003 030c 	and.w	r3, r3, #12
 8014792:	b2da      	uxtb	r2, r3
 8014794:	697b      	ldr	r3, [r7, #20]
 8014796:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	7a1a      	ldrb	r2, [r3, #8]
 801479c:	697b      	ldr	r3, [r7, #20]
 801479e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80147a0:	4b2e      	ldr	r3, [pc, #184]	; (801485c <tcp_listen_input+0x1f4>)
 80147a2:	681a      	ldr	r2, [r3, #0]
 80147a4:	697b      	ldr	r3, [r7, #20]
 80147a6:	60da      	str	r2, [r3, #12]
 80147a8:	4a2c      	ldr	r2, [pc, #176]	; (801485c <tcp_listen_input+0x1f4>)
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	6013      	str	r3, [r2, #0]
 80147ae:	f003 fd4b 	bl	8018248 <tcp_timer_needed>
 80147b2:	4b2b      	ldr	r3, [pc, #172]	; (8014860 <tcp_listen_input+0x1f8>)
 80147b4:	2201      	movs	r2, #1
 80147b6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80147b8:	6978      	ldr	r0, [r7, #20]
 80147ba:	f001 fd8f 	bl	80162dc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80147be:	4b23      	ldr	r3, [pc, #140]	; (801484c <tcp_listen_input+0x1e4>)
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	89db      	ldrh	r3, [r3, #14]
 80147c4:	b29a      	uxth	r2, r3
 80147c6:	697b      	ldr	r3, [r7, #20]
 80147c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80147cc:	697b      	ldr	r3, [r7, #20]
 80147ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80147d2:	697b      	ldr	r3, [r7, #20]
 80147d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80147d8:	697b      	ldr	r3, [r7, #20]
 80147da:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80147dc:	697b      	ldr	r3, [r7, #20]
 80147de:	3304      	adds	r3, #4
 80147e0:	4618      	mov	r0, r3
 80147e2:	f005 faab 	bl	8019d3c <ip4_route>
 80147e6:	4601      	mov	r1, r0
 80147e8:	697b      	ldr	r3, [r7, #20]
 80147ea:	3304      	adds	r3, #4
 80147ec:	461a      	mov	r2, r3
 80147ee:	4620      	mov	r0, r4
 80147f0:	f7ff fa1c 	bl	8013c2c <tcp_eff_send_mss_netif>
 80147f4:	4603      	mov	r3, r0
 80147f6:	461a      	mov	r2, r3
 80147f8:	697b      	ldr	r3, [r7, #20]
 80147fa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80147fc:	2112      	movs	r1, #18
 80147fe:	6978      	ldr	r0, [r7, #20]
 8014800:	f002 fc9c 	bl	801713c <tcp_enqueue_flags>
 8014804:	4603      	mov	r3, r0
 8014806:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d004      	beq.n	801481a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014810:	2100      	movs	r1, #0
 8014812:	6978      	ldr	r0, [r7, #20]
 8014814:	f7fd fef4 	bl	8012600 <tcp_abandon>
      return;
 8014818:	e006      	b.n	8014828 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801481a:	6978      	ldr	r0, [r7, #20]
 801481c:	f002 fd7c 	bl	8017318 <tcp_output>
  return;
 8014820:	e001      	b.n	8014826 <tcp_listen_input+0x1be>
    return;
 8014822:	bf00      	nop
 8014824:	e000      	b.n	8014828 <tcp_listen_input+0x1c0>
  return;
 8014826:	bf00      	nop
}
 8014828:	371c      	adds	r7, #28
 801482a:	46bd      	mov	sp, r7
 801482c:	bd90      	pop	{r4, r7, pc}
 801482e:	bf00      	nop
 8014830:	2405e8cc 	.word	0x2405e8cc
 8014834:	0801e90c 	.word	0x0801e90c
 8014838:	0801eb04 	.word	0x0801eb04
 801483c:	0801e958 	.word	0x0801e958
 8014840:	2405e8c4 	.word	0x2405e8c4
 8014844:	2405e8ca 	.word	0x2405e8ca
 8014848:	2405e8c0 	.word	0x2405e8c0
 801484c:	2405e8b0 	.word	0x2405e8b0
 8014850:	24015e28 	.word	0x24015e28
 8014854:	24015e2c 	.word	0x24015e2c
 8014858:	24015e18 	.word	0x24015e18
 801485c:	2405e894 	.word	0x2405e894
 8014860:	2405e89c 	.word	0x2405e89c

08014864 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b086      	sub	sp, #24
 8014868:	af04      	add	r7, sp, #16
 801486a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801486c:	4b2f      	ldr	r3, [pc, #188]	; (801492c <tcp_timewait_input+0xc8>)
 801486e:	781b      	ldrb	r3, [r3, #0]
 8014870:	f003 0304 	and.w	r3, r3, #4
 8014874:	2b00      	cmp	r3, #0
 8014876:	d153      	bne.n	8014920 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d106      	bne.n	801488c <tcp_timewait_input+0x28>
 801487e:	4b2c      	ldr	r3, [pc, #176]	; (8014930 <tcp_timewait_input+0xcc>)
 8014880:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014884:	492b      	ldr	r1, [pc, #172]	; (8014934 <tcp_timewait_input+0xd0>)
 8014886:	482c      	ldr	r0, [pc, #176]	; (8014938 <tcp_timewait_input+0xd4>)
 8014888:	f006 ffec 	bl	801b864 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801488c:	4b27      	ldr	r3, [pc, #156]	; (801492c <tcp_timewait_input+0xc8>)
 801488e:	781b      	ldrb	r3, [r3, #0]
 8014890:	f003 0302 	and.w	r3, r3, #2
 8014894:	2b00      	cmp	r3, #0
 8014896:	d02a      	beq.n	80148ee <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014898:	4b28      	ldr	r3, [pc, #160]	; (801493c <tcp_timewait_input+0xd8>)
 801489a:	681a      	ldr	r2, [r3, #0]
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148a0:	1ad3      	subs	r3, r2, r3
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	db2d      	blt.n	8014902 <tcp_timewait_input+0x9e>
 80148a6:	4b25      	ldr	r3, [pc, #148]	; (801493c <tcp_timewait_input+0xd8>)
 80148a8:	681a      	ldr	r2, [r3, #0]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148ae:	6879      	ldr	r1, [r7, #4]
 80148b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80148b2:	440b      	add	r3, r1
 80148b4:	1ad3      	subs	r3, r2, r3
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	dc23      	bgt.n	8014902 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80148ba:	4b21      	ldr	r3, [pc, #132]	; (8014940 <tcp_timewait_input+0xdc>)
 80148bc:	6819      	ldr	r1, [r3, #0]
 80148be:	4b21      	ldr	r3, [pc, #132]	; (8014944 <tcp_timewait_input+0xe0>)
 80148c0:	881b      	ldrh	r3, [r3, #0]
 80148c2:	461a      	mov	r2, r3
 80148c4:	4b1d      	ldr	r3, [pc, #116]	; (801493c <tcp_timewait_input+0xd8>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80148ca:	4b1f      	ldr	r3, [pc, #124]	; (8014948 <tcp_timewait_input+0xe4>)
 80148cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80148ce:	885b      	ldrh	r3, [r3, #2]
 80148d0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80148d2:	4a1d      	ldr	r2, [pc, #116]	; (8014948 <tcp_timewait_input+0xe4>)
 80148d4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80148d6:	8812      	ldrh	r2, [r2, #0]
 80148d8:	b292      	uxth	r2, r2
 80148da:	9202      	str	r2, [sp, #8]
 80148dc:	9301      	str	r3, [sp, #4]
 80148de:	4b1b      	ldr	r3, [pc, #108]	; (801494c <tcp_timewait_input+0xe8>)
 80148e0:	9300      	str	r3, [sp, #0]
 80148e2:	4b1b      	ldr	r3, [pc, #108]	; (8014950 <tcp_timewait_input+0xec>)
 80148e4:	4602      	mov	r2, r0
 80148e6:	6878      	ldr	r0, [r7, #4]
 80148e8:	f003 faec 	bl	8017ec4 <tcp_rst>
      return;
 80148ec:	e01b      	b.n	8014926 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80148ee:	4b0f      	ldr	r3, [pc, #60]	; (801492c <tcp_timewait_input+0xc8>)
 80148f0:	781b      	ldrb	r3, [r3, #0]
 80148f2:	f003 0301 	and.w	r3, r3, #1
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d003      	beq.n	8014902 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80148fa:	4b16      	ldr	r3, [pc, #88]	; (8014954 <tcp_timewait_input+0xf0>)
 80148fc:	681a      	ldr	r2, [r3, #0]
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014902:	4b10      	ldr	r3, [pc, #64]	; (8014944 <tcp_timewait_input+0xe0>)
 8014904:	881b      	ldrh	r3, [r3, #0]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d00c      	beq.n	8014924 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	8b5b      	ldrh	r3, [r3, #26]
 801490e:	f043 0302 	orr.w	r3, r3, #2
 8014912:	b29a      	uxth	r2, r3
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f002 fcfd 	bl	8017318 <tcp_output>
  }
  return;
 801491e:	e001      	b.n	8014924 <tcp_timewait_input+0xc0>
    return;
 8014920:	bf00      	nop
 8014922:	e000      	b.n	8014926 <tcp_timewait_input+0xc2>
  return;
 8014924:	bf00      	nop
}
 8014926:	3708      	adds	r7, #8
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}
 801492c:	2405e8cc 	.word	0x2405e8cc
 8014930:	0801e90c 	.word	0x0801e90c
 8014934:	0801eb24 	.word	0x0801eb24
 8014938:	0801e958 	.word	0x0801e958
 801493c:	2405e8c0 	.word	0x2405e8c0
 8014940:	2405e8c4 	.word	0x2405e8c4
 8014944:	2405e8ca 	.word	0x2405e8ca
 8014948:	2405e8b0 	.word	0x2405e8b0
 801494c:	24015e28 	.word	0x24015e28
 8014950:	24015e2c 	.word	0x24015e2c
 8014954:	2405e888 	.word	0x2405e888

08014958 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014958:	b590      	push	{r4, r7, lr}
 801495a:	b08d      	sub	sp, #52	; 0x34
 801495c:	af04      	add	r7, sp, #16
 801495e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014960:	2300      	movs	r3, #0
 8014962:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014964:	2300      	movs	r3, #0
 8014966:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d106      	bne.n	801497c <tcp_process+0x24>
 801496e:	4b9d      	ldr	r3, [pc, #628]	; (8014be4 <tcp_process+0x28c>)
 8014970:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014974:	499c      	ldr	r1, [pc, #624]	; (8014be8 <tcp_process+0x290>)
 8014976:	489d      	ldr	r0, [pc, #628]	; (8014bec <tcp_process+0x294>)
 8014978:	f006 ff74 	bl	801b864 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801497c:	4b9c      	ldr	r3, [pc, #624]	; (8014bf0 <tcp_process+0x298>)
 801497e:	781b      	ldrb	r3, [r3, #0]
 8014980:	f003 0304 	and.w	r3, r3, #4
 8014984:	2b00      	cmp	r3, #0
 8014986:	d04e      	beq.n	8014a26 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	7d1b      	ldrb	r3, [r3, #20]
 801498c:	2b02      	cmp	r3, #2
 801498e:	d108      	bne.n	80149a2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014994:	4b97      	ldr	r3, [pc, #604]	; (8014bf4 <tcp_process+0x29c>)
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	429a      	cmp	r2, r3
 801499a:	d123      	bne.n	80149e4 <tcp_process+0x8c>
        acceptable = 1;
 801499c:	2301      	movs	r3, #1
 801499e:	76fb      	strb	r3, [r7, #27]
 80149a0:	e020      	b.n	80149e4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80149a6:	4b94      	ldr	r3, [pc, #592]	; (8014bf8 <tcp_process+0x2a0>)
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	429a      	cmp	r2, r3
 80149ac:	d102      	bne.n	80149b4 <tcp_process+0x5c>
        acceptable = 1;
 80149ae:	2301      	movs	r3, #1
 80149b0:	76fb      	strb	r3, [r7, #27]
 80149b2:	e017      	b.n	80149e4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80149b4:	4b90      	ldr	r3, [pc, #576]	; (8014bf8 <tcp_process+0x2a0>)
 80149b6:	681a      	ldr	r2, [r3, #0]
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149bc:	1ad3      	subs	r3, r2, r3
 80149be:	2b00      	cmp	r3, #0
 80149c0:	db10      	blt.n	80149e4 <tcp_process+0x8c>
 80149c2:	4b8d      	ldr	r3, [pc, #564]	; (8014bf8 <tcp_process+0x2a0>)
 80149c4:	681a      	ldr	r2, [r3, #0]
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149ca:	6879      	ldr	r1, [r7, #4]
 80149cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80149ce:	440b      	add	r3, r1
 80149d0:	1ad3      	subs	r3, r2, r3
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	dc06      	bgt.n	80149e4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	8b5b      	ldrh	r3, [r3, #26]
 80149da:	f043 0302 	orr.w	r3, r3, #2
 80149de:	b29a      	uxth	r2, r3
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80149e4:	7efb      	ldrb	r3, [r7, #27]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d01b      	beq.n	8014a22 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	7d1b      	ldrb	r3, [r3, #20]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d106      	bne.n	8014a00 <tcp_process+0xa8>
 80149f2:	4b7c      	ldr	r3, [pc, #496]	; (8014be4 <tcp_process+0x28c>)
 80149f4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80149f8:	4980      	ldr	r1, [pc, #512]	; (8014bfc <tcp_process+0x2a4>)
 80149fa:	487c      	ldr	r0, [pc, #496]	; (8014bec <tcp_process+0x294>)
 80149fc:	f006 ff32 	bl	801b864 <iprintf>
      recv_flags |= TF_RESET;
 8014a00:	4b7f      	ldr	r3, [pc, #508]	; (8014c00 <tcp_process+0x2a8>)
 8014a02:	781b      	ldrb	r3, [r3, #0]
 8014a04:	f043 0308 	orr.w	r3, r3, #8
 8014a08:	b2da      	uxtb	r2, r3
 8014a0a:	4b7d      	ldr	r3, [pc, #500]	; (8014c00 <tcp_process+0x2a8>)
 8014a0c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	8b5b      	ldrh	r3, [r3, #26]
 8014a12:	f023 0301 	bic.w	r3, r3, #1
 8014a16:	b29a      	uxth	r2, r3
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014a1c:	f06f 030d 	mvn.w	r3, #13
 8014a20:	e37a      	b.n	8015118 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014a22:	2300      	movs	r3, #0
 8014a24:	e378      	b.n	8015118 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014a26:	4b72      	ldr	r3, [pc, #456]	; (8014bf0 <tcp_process+0x298>)
 8014a28:	781b      	ldrb	r3, [r3, #0]
 8014a2a:	f003 0302 	and.w	r3, r3, #2
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d010      	beq.n	8014a54 <tcp_process+0xfc>
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	7d1b      	ldrb	r3, [r3, #20]
 8014a36:	2b02      	cmp	r3, #2
 8014a38:	d00c      	beq.n	8014a54 <tcp_process+0xfc>
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	7d1b      	ldrb	r3, [r3, #20]
 8014a3e:	2b03      	cmp	r3, #3
 8014a40:	d008      	beq.n	8014a54 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	8b5b      	ldrh	r3, [r3, #26]
 8014a46:	f043 0302 	orr.w	r3, r3, #2
 8014a4a:	b29a      	uxth	r2, r3
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014a50:	2300      	movs	r3, #0
 8014a52:	e361      	b.n	8015118 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	8b5b      	ldrh	r3, [r3, #26]
 8014a58:	f003 0310 	and.w	r3, r3, #16
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d103      	bne.n	8014a68 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014a60:	4b68      	ldr	r3, [pc, #416]	; (8014c04 <tcp_process+0x2ac>)
 8014a62:	681a      	ldr	r2, [r3, #0]
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	2200      	movs	r2, #0
 8014a74:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	f001 fc2f 	bl	80162dc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	7d1b      	ldrb	r3, [r3, #20]
 8014a82:	3b02      	subs	r3, #2
 8014a84:	2b07      	cmp	r3, #7
 8014a86:	f200 8337 	bhi.w	80150f8 <tcp_process+0x7a0>
 8014a8a:	a201      	add	r2, pc, #4	; (adr r2, 8014a90 <tcp_process+0x138>)
 8014a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a90:	08014ab1 	.word	0x08014ab1
 8014a94:	08014ce1 	.word	0x08014ce1
 8014a98:	08014e59 	.word	0x08014e59
 8014a9c:	08014e83 	.word	0x08014e83
 8014aa0:	08014fa7 	.word	0x08014fa7
 8014aa4:	08014e59 	.word	0x08014e59
 8014aa8:	08015033 	.word	0x08015033
 8014aac:	080150c3 	.word	0x080150c3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014ab0:	4b4f      	ldr	r3, [pc, #316]	; (8014bf0 <tcp_process+0x298>)
 8014ab2:	781b      	ldrb	r3, [r3, #0]
 8014ab4:	f003 0310 	and.w	r3, r3, #16
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	f000 80e4 	beq.w	8014c86 <tcp_process+0x32e>
 8014abe:	4b4c      	ldr	r3, [pc, #304]	; (8014bf0 <tcp_process+0x298>)
 8014ac0:	781b      	ldrb	r3, [r3, #0]
 8014ac2:	f003 0302 	and.w	r3, r3, #2
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	f000 80dd 	beq.w	8014c86 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ad0:	1c5a      	adds	r2, r3, #1
 8014ad2:	4b48      	ldr	r3, [pc, #288]	; (8014bf4 <tcp_process+0x29c>)
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	429a      	cmp	r2, r3
 8014ad8:	f040 80d5 	bne.w	8014c86 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014adc:	4b46      	ldr	r3, [pc, #280]	; (8014bf8 <tcp_process+0x2a0>)
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	1c5a      	adds	r2, r3, #1
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8014aee:	4b41      	ldr	r3, [pc, #260]	; (8014bf4 <tcp_process+0x29c>)
 8014af0:	681a      	ldr	r2, [r3, #0]
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014af6:	4b44      	ldr	r3, [pc, #272]	; (8014c08 <tcp_process+0x2b0>)
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	89db      	ldrh	r3, [r3, #14]
 8014afc:	b29a      	uxth	r2, r3
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014b10:	4b39      	ldr	r3, [pc, #228]	; (8014bf8 <tcp_process+0x2a0>)
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	1e5a      	subs	r2, r3, #1
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	2204      	movs	r2, #4
 8014b1e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	3304      	adds	r3, #4
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f005 f907 	bl	8019d3c <ip4_route>
 8014b2e:	4601      	mov	r1, r0
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	3304      	adds	r3, #4
 8014b34:	461a      	mov	r2, r3
 8014b36:	4620      	mov	r0, r4
 8014b38:	f7ff f878 	bl	8013c2c <tcp_eff_send_mss_netif>
 8014b3c:	4603      	mov	r3, r0
 8014b3e:	461a      	mov	r2, r3
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b48:	009a      	lsls	r2, r3, #2
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b4e:	005b      	lsls	r3, r3, #1
 8014b50:	f241 111c 	movw	r1, #4380	; 0x111c
 8014b54:	428b      	cmp	r3, r1
 8014b56:	bf38      	it	cc
 8014b58:	460b      	movcc	r3, r1
 8014b5a:	429a      	cmp	r2, r3
 8014b5c:	d204      	bcs.n	8014b68 <tcp_process+0x210>
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b62:	009b      	lsls	r3, r3, #2
 8014b64:	b29b      	uxth	r3, r3
 8014b66:	e00d      	b.n	8014b84 <tcp_process+0x22c>
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b6c:	005b      	lsls	r3, r3, #1
 8014b6e:	f241 121c 	movw	r2, #4380	; 0x111c
 8014b72:	4293      	cmp	r3, r2
 8014b74:	d904      	bls.n	8014b80 <tcp_process+0x228>
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b7a:	005b      	lsls	r3, r3, #1
 8014b7c:	b29b      	uxth	r3, r3
 8014b7e:	e001      	b.n	8014b84 <tcp_process+0x22c>
 8014b80:	f241 131c 	movw	r3, #4380	; 0x111c
 8014b84:	687a      	ldr	r2, [r7, #4]
 8014b86:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d106      	bne.n	8014ba2 <tcp_process+0x24a>
 8014b94:	4b13      	ldr	r3, [pc, #76]	; (8014be4 <tcp_process+0x28c>)
 8014b96:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014b9a:	491c      	ldr	r1, [pc, #112]	; (8014c0c <tcp_process+0x2b4>)
 8014b9c:	4813      	ldr	r0, [pc, #76]	; (8014bec <tcp_process+0x294>)
 8014b9e:	f006 fe61 	bl	801b864 <iprintf>
        --pcb->snd_queuelen;
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014ba8:	3b01      	subs	r3, #1
 8014baa:	b29a      	uxth	r2, r3
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bb6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014bb8:	69fb      	ldr	r3, [r7, #28]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d12a      	bne.n	8014c14 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bc2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014bc4:	69fb      	ldr	r3, [r7, #28]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d106      	bne.n	8014bd8 <tcp_process+0x280>
 8014bca:	4b06      	ldr	r3, [pc, #24]	; (8014be4 <tcp_process+0x28c>)
 8014bcc:	f44f 725d 	mov.w	r2, #884	; 0x374
 8014bd0:	490f      	ldr	r1, [pc, #60]	; (8014c10 <tcp_process+0x2b8>)
 8014bd2:	4806      	ldr	r0, [pc, #24]	; (8014bec <tcp_process+0x294>)
 8014bd4:	f006 fe46 	bl	801b864 <iprintf>
          pcb->unsent = rseg->next;
 8014bd8:	69fb      	ldr	r3, [r7, #28]
 8014bda:	681a      	ldr	r2, [r3, #0]
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	66da      	str	r2, [r3, #108]	; 0x6c
 8014be0:	e01c      	b.n	8014c1c <tcp_process+0x2c4>
 8014be2:	bf00      	nop
 8014be4:	0801e90c 	.word	0x0801e90c
 8014be8:	0801eb44 	.word	0x0801eb44
 8014bec:	0801e958 	.word	0x0801e958
 8014bf0:	2405e8cc 	.word	0x2405e8cc
 8014bf4:	2405e8c4 	.word	0x2405e8c4
 8014bf8:	2405e8c0 	.word	0x2405e8c0
 8014bfc:	0801eb60 	.word	0x0801eb60
 8014c00:	2405e8cd 	.word	0x2405e8cd
 8014c04:	2405e888 	.word	0x2405e888
 8014c08:	2405e8b0 	.word	0x2405e8b0
 8014c0c:	0801eb80 	.word	0x0801eb80
 8014c10:	0801eb98 	.word	0x0801eb98
        } else {
          pcb->unacked = rseg->next;
 8014c14:	69fb      	ldr	r3, [r7, #28]
 8014c16:	681a      	ldr	r2, [r3, #0]
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014c1c:	69f8      	ldr	r0, [r7, #28]
 8014c1e:	f7fe fc40 	bl	80134a2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d104      	bne.n	8014c34 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c30:	861a      	strh	r2, [r3, #48]	; 0x30
 8014c32:	e006      	b.n	8014c42 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	2200      	movs	r2, #0
 8014c38:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d00a      	beq.n	8014c62 <tcp_process+0x30a>
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014c52:	687a      	ldr	r2, [r7, #4]
 8014c54:	6910      	ldr	r0, [r2, #16]
 8014c56:	2200      	movs	r2, #0
 8014c58:	6879      	ldr	r1, [r7, #4]
 8014c5a:	4798      	blx	r3
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	76bb      	strb	r3, [r7, #26]
 8014c60:	e001      	b.n	8014c66 <tcp_process+0x30e>
 8014c62:	2300      	movs	r3, #0
 8014c64:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014c66:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014c6a:	f113 0f0d 	cmn.w	r3, #13
 8014c6e:	d102      	bne.n	8014c76 <tcp_process+0x31e>
          return ERR_ABRT;
 8014c70:	f06f 030c 	mvn.w	r3, #12
 8014c74:	e250      	b.n	8015118 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	8b5b      	ldrh	r3, [r3, #26]
 8014c7a:	f043 0302 	orr.w	r3, r3, #2
 8014c7e:	b29a      	uxth	r2, r3
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014c84:	e23a      	b.n	80150fc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014c86:	4b98      	ldr	r3, [pc, #608]	; (8014ee8 <tcp_process+0x590>)
 8014c88:	781b      	ldrb	r3, [r3, #0]
 8014c8a:	f003 0310 	and.w	r3, r3, #16
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	f000 8234 	beq.w	80150fc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014c94:	4b95      	ldr	r3, [pc, #596]	; (8014eec <tcp_process+0x594>)
 8014c96:	6819      	ldr	r1, [r3, #0]
 8014c98:	4b95      	ldr	r3, [pc, #596]	; (8014ef0 <tcp_process+0x598>)
 8014c9a:	881b      	ldrh	r3, [r3, #0]
 8014c9c:	461a      	mov	r2, r3
 8014c9e:	4b95      	ldr	r3, [pc, #596]	; (8014ef4 <tcp_process+0x59c>)
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014ca4:	4b94      	ldr	r3, [pc, #592]	; (8014ef8 <tcp_process+0x5a0>)
 8014ca6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ca8:	885b      	ldrh	r3, [r3, #2]
 8014caa:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014cac:	4a92      	ldr	r2, [pc, #584]	; (8014ef8 <tcp_process+0x5a0>)
 8014cae:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014cb0:	8812      	ldrh	r2, [r2, #0]
 8014cb2:	b292      	uxth	r2, r2
 8014cb4:	9202      	str	r2, [sp, #8]
 8014cb6:	9301      	str	r3, [sp, #4]
 8014cb8:	4b90      	ldr	r3, [pc, #576]	; (8014efc <tcp_process+0x5a4>)
 8014cba:	9300      	str	r3, [sp, #0]
 8014cbc:	4b90      	ldr	r3, [pc, #576]	; (8014f00 <tcp_process+0x5a8>)
 8014cbe:	4602      	mov	r2, r0
 8014cc0:	6878      	ldr	r0, [r7, #4]
 8014cc2:	f003 f8ff 	bl	8017ec4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014ccc:	2b05      	cmp	r3, #5
 8014cce:	f200 8215 	bhi.w	80150fc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8014cd8:	6878      	ldr	r0, [r7, #4]
 8014cda:	f002 feb9 	bl	8017a50 <tcp_rexmit_rto>
      break;
 8014cde:	e20d      	b.n	80150fc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014ce0:	4b81      	ldr	r3, [pc, #516]	; (8014ee8 <tcp_process+0x590>)
 8014ce2:	781b      	ldrb	r3, [r3, #0]
 8014ce4:	f003 0310 	and.w	r3, r3, #16
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	f000 80a1 	beq.w	8014e30 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014cee:	4b7f      	ldr	r3, [pc, #508]	; (8014eec <tcp_process+0x594>)
 8014cf0:	681a      	ldr	r2, [r3, #0]
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014cf6:	1ad3      	subs	r3, r2, r3
 8014cf8:	3b01      	subs	r3, #1
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	db7e      	blt.n	8014dfc <tcp_process+0x4a4>
 8014cfe:	4b7b      	ldr	r3, [pc, #492]	; (8014eec <tcp_process+0x594>)
 8014d00:	681a      	ldr	r2, [r3, #0]
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d06:	1ad3      	subs	r3, r2, r3
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	dc77      	bgt.n	8014dfc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	2204      	movs	r2, #4
 8014d10:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d102      	bne.n	8014d20 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014d1a:	23fa      	movs	r3, #250	; 0xfa
 8014d1c:	76bb      	strb	r3, [r7, #26]
 8014d1e:	e01d      	b.n	8014d5c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014d24:	699b      	ldr	r3, [r3, #24]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d106      	bne.n	8014d38 <tcp_process+0x3e0>
 8014d2a:	4b76      	ldr	r3, [pc, #472]	; (8014f04 <tcp_process+0x5ac>)
 8014d2c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8014d30:	4975      	ldr	r1, [pc, #468]	; (8014f08 <tcp_process+0x5b0>)
 8014d32:	4876      	ldr	r0, [pc, #472]	; (8014f0c <tcp_process+0x5b4>)
 8014d34:	f006 fd96 	bl	801b864 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014d3c:	699b      	ldr	r3, [r3, #24]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d00a      	beq.n	8014d58 <tcp_process+0x400>
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014d46:	699b      	ldr	r3, [r3, #24]
 8014d48:	687a      	ldr	r2, [r7, #4]
 8014d4a:	6910      	ldr	r0, [r2, #16]
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	6879      	ldr	r1, [r7, #4]
 8014d50:	4798      	blx	r3
 8014d52:	4603      	mov	r3, r0
 8014d54:	76bb      	strb	r3, [r7, #26]
 8014d56:	e001      	b.n	8014d5c <tcp_process+0x404>
 8014d58:	23f0      	movs	r3, #240	; 0xf0
 8014d5a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014d5c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d00a      	beq.n	8014d7a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014d64:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014d68:	f113 0f0d 	cmn.w	r3, #13
 8014d6c:	d002      	beq.n	8014d74 <tcp_process+0x41c>
              tcp_abort(pcb);
 8014d6e:	6878      	ldr	r0, [r7, #4]
 8014d70:	f7fd fd04 	bl	801277c <tcp_abort>
            }
            return ERR_ABRT;
 8014d74:	f06f 030c 	mvn.w	r3, #12
 8014d78:	e1ce      	b.n	8015118 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014d7a:	6878      	ldr	r0, [r7, #4]
 8014d7c:	f000 fae0 	bl	8015340 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014d80:	4b63      	ldr	r3, [pc, #396]	; (8014f10 <tcp_process+0x5b8>)
 8014d82:	881b      	ldrh	r3, [r3, #0]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d005      	beq.n	8014d94 <tcp_process+0x43c>
            recv_acked--;
 8014d88:	4b61      	ldr	r3, [pc, #388]	; (8014f10 <tcp_process+0x5b8>)
 8014d8a:	881b      	ldrh	r3, [r3, #0]
 8014d8c:	3b01      	subs	r3, #1
 8014d8e:	b29a      	uxth	r2, r3
 8014d90:	4b5f      	ldr	r3, [pc, #380]	; (8014f10 <tcp_process+0x5b8>)
 8014d92:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d98:	009a      	lsls	r2, r3, #2
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d9e:	005b      	lsls	r3, r3, #1
 8014da0:	f241 111c 	movw	r1, #4380	; 0x111c
 8014da4:	428b      	cmp	r3, r1
 8014da6:	bf38      	it	cc
 8014da8:	460b      	movcc	r3, r1
 8014daa:	429a      	cmp	r2, r3
 8014dac:	d204      	bcs.n	8014db8 <tcp_process+0x460>
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014db2:	009b      	lsls	r3, r3, #2
 8014db4:	b29b      	uxth	r3, r3
 8014db6:	e00d      	b.n	8014dd4 <tcp_process+0x47c>
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014dbc:	005b      	lsls	r3, r3, #1
 8014dbe:	f241 121c 	movw	r2, #4380	; 0x111c
 8014dc2:	4293      	cmp	r3, r2
 8014dc4:	d904      	bls.n	8014dd0 <tcp_process+0x478>
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014dca:	005b      	lsls	r3, r3, #1
 8014dcc:	b29b      	uxth	r3, r3
 8014dce:	e001      	b.n	8014dd4 <tcp_process+0x47c>
 8014dd0:	f241 131c 	movw	r3, #4380	; 0x111c
 8014dd4:	687a      	ldr	r2, [r7, #4]
 8014dd6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014dda:	4b4e      	ldr	r3, [pc, #312]	; (8014f14 <tcp_process+0x5bc>)
 8014ddc:	781b      	ldrb	r3, [r3, #0]
 8014dde:	f003 0320 	and.w	r3, r3, #32
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d037      	beq.n	8014e56 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	8b5b      	ldrh	r3, [r3, #26]
 8014dea:	f043 0302 	orr.w	r3, r3, #2
 8014dee:	b29a      	uxth	r2, r3
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2207      	movs	r2, #7
 8014df8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014dfa:	e02c      	b.n	8014e56 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014dfc:	4b3b      	ldr	r3, [pc, #236]	; (8014eec <tcp_process+0x594>)
 8014dfe:	6819      	ldr	r1, [r3, #0]
 8014e00:	4b3b      	ldr	r3, [pc, #236]	; (8014ef0 <tcp_process+0x598>)
 8014e02:	881b      	ldrh	r3, [r3, #0]
 8014e04:	461a      	mov	r2, r3
 8014e06:	4b3b      	ldr	r3, [pc, #236]	; (8014ef4 <tcp_process+0x59c>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014e0c:	4b3a      	ldr	r3, [pc, #232]	; (8014ef8 <tcp_process+0x5a0>)
 8014e0e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014e10:	885b      	ldrh	r3, [r3, #2]
 8014e12:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014e14:	4a38      	ldr	r2, [pc, #224]	; (8014ef8 <tcp_process+0x5a0>)
 8014e16:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014e18:	8812      	ldrh	r2, [r2, #0]
 8014e1a:	b292      	uxth	r2, r2
 8014e1c:	9202      	str	r2, [sp, #8]
 8014e1e:	9301      	str	r3, [sp, #4]
 8014e20:	4b36      	ldr	r3, [pc, #216]	; (8014efc <tcp_process+0x5a4>)
 8014e22:	9300      	str	r3, [sp, #0]
 8014e24:	4b36      	ldr	r3, [pc, #216]	; (8014f00 <tcp_process+0x5a8>)
 8014e26:	4602      	mov	r2, r0
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f003 f84b 	bl	8017ec4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014e2e:	e167      	b.n	8015100 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014e30:	4b2d      	ldr	r3, [pc, #180]	; (8014ee8 <tcp_process+0x590>)
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	f003 0302 	and.w	r3, r3, #2
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	f000 8161 	beq.w	8015100 <tcp_process+0x7a8>
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e42:	1e5a      	subs	r2, r3, #1
 8014e44:	4b2b      	ldr	r3, [pc, #172]	; (8014ef4 <tcp_process+0x59c>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	429a      	cmp	r2, r3
 8014e4a:	f040 8159 	bne.w	8015100 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	f002 fe20 	bl	8017a94 <tcp_rexmit>
      break;
 8014e54:	e154      	b.n	8015100 <tcp_process+0x7a8>
 8014e56:	e153      	b.n	8015100 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014e58:	6878      	ldr	r0, [r7, #4]
 8014e5a:	f000 fa71 	bl	8015340 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014e5e:	4b2d      	ldr	r3, [pc, #180]	; (8014f14 <tcp_process+0x5bc>)
 8014e60:	781b      	ldrb	r3, [r3, #0]
 8014e62:	f003 0320 	and.w	r3, r3, #32
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	f000 814c 	beq.w	8015104 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	8b5b      	ldrh	r3, [r3, #26]
 8014e70:	f043 0302 	orr.w	r3, r3, #2
 8014e74:	b29a      	uxth	r2, r3
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	2207      	movs	r2, #7
 8014e7e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014e80:	e140      	b.n	8015104 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8014e82:	6878      	ldr	r0, [r7, #4]
 8014e84:	f000 fa5c 	bl	8015340 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014e88:	4b22      	ldr	r3, [pc, #136]	; (8014f14 <tcp_process+0x5bc>)
 8014e8a:	781b      	ldrb	r3, [r3, #0]
 8014e8c:	f003 0320 	and.w	r3, r3, #32
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d071      	beq.n	8014f78 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014e94:	4b14      	ldr	r3, [pc, #80]	; (8014ee8 <tcp_process+0x590>)
 8014e96:	781b      	ldrb	r3, [r3, #0]
 8014e98:	f003 0310 	and.w	r3, r3, #16
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d060      	beq.n	8014f62 <tcp_process+0x60a>
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014ea4:	4b11      	ldr	r3, [pc, #68]	; (8014eec <tcp_process+0x594>)
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	429a      	cmp	r2, r3
 8014eaa:	d15a      	bne.n	8014f62 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d156      	bne.n	8014f62 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	8b5b      	ldrh	r3, [r3, #26]
 8014eb8:	f043 0302 	orr.w	r3, r3, #2
 8014ebc:	b29a      	uxth	r2, r3
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8014ec2:	6878      	ldr	r0, [r7, #4]
 8014ec4:	f7fe fda8 	bl	8013a18 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014ec8:	4b13      	ldr	r3, [pc, #76]	; (8014f18 <tcp_process+0x5c0>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	687a      	ldr	r2, [r7, #4]
 8014ece:	429a      	cmp	r2, r3
 8014ed0:	d105      	bne.n	8014ede <tcp_process+0x586>
 8014ed2:	4b11      	ldr	r3, [pc, #68]	; (8014f18 <tcp_process+0x5c0>)
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	68db      	ldr	r3, [r3, #12]
 8014ed8:	4a0f      	ldr	r2, [pc, #60]	; (8014f18 <tcp_process+0x5c0>)
 8014eda:	6013      	str	r3, [r2, #0]
 8014edc:	e02e      	b.n	8014f3c <tcp_process+0x5e4>
 8014ede:	4b0e      	ldr	r3, [pc, #56]	; (8014f18 <tcp_process+0x5c0>)
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	617b      	str	r3, [r7, #20]
 8014ee4:	e027      	b.n	8014f36 <tcp_process+0x5de>
 8014ee6:	bf00      	nop
 8014ee8:	2405e8cc 	.word	0x2405e8cc
 8014eec:	2405e8c4 	.word	0x2405e8c4
 8014ef0:	2405e8ca 	.word	0x2405e8ca
 8014ef4:	2405e8c0 	.word	0x2405e8c0
 8014ef8:	2405e8b0 	.word	0x2405e8b0
 8014efc:	24015e28 	.word	0x24015e28
 8014f00:	24015e2c 	.word	0x24015e2c
 8014f04:	0801e90c 	.word	0x0801e90c
 8014f08:	0801ebac 	.word	0x0801ebac
 8014f0c:	0801e958 	.word	0x0801e958
 8014f10:	2405e8c8 	.word	0x2405e8c8
 8014f14:	2405e8cd 	.word	0x2405e8cd
 8014f18:	2405e894 	.word	0x2405e894
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	68db      	ldr	r3, [r3, #12]
 8014f20:	687a      	ldr	r2, [r7, #4]
 8014f22:	429a      	cmp	r2, r3
 8014f24:	d104      	bne.n	8014f30 <tcp_process+0x5d8>
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	68da      	ldr	r2, [r3, #12]
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	60da      	str	r2, [r3, #12]
 8014f2e:	e005      	b.n	8014f3c <tcp_process+0x5e4>
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	68db      	ldr	r3, [r3, #12]
 8014f34:	617b      	str	r3, [r7, #20]
 8014f36:	697b      	ldr	r3, [r7, #20]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d1ef      	bne.n	8014f1c <tcp_process+0x5c4>
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	2200      	movs	r2, #0
 8014f40:	60da      	str	r2, [r3, #12]
 8014f42:	4b77      	ldr	r3, [pc, #476]	; (8015120 <tcp_process+0x7c8>)
 8014f44:	2201      	movs	r2, #1
 8014f46:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	220a      	movs	r2, #10
 8014f4c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014f4e:	4b75      	ldr	r3, [pc, #468]	; (8015124 <tcp_process+0x7cc>)
 8014f50:	681a      	ldr	r2, [r3, #0]
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	60da      	str	r2, [r3, #12]
 8014f56:	4a73      	ldr	r2, [pc, #460]	; (8015124 <tcp_process+0x7cc>)
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	6013      	str	r3, [r2, #0]
 8014f5c:	f003 f974 	bl	8018248 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014f60:	e0d2      	b.n	8015108 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	8b5b      	ldrh	r3, [r3, #26]
 8014f66:	f043 0302 	orr.w	r3, r3, #2
 8014f6a:	b29a      	uxth	r2, r3
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2208      	movs	r2, #8
 8014f74:	751a      	strb	r2, [r3, #20]
      break;
 8014f76:	e0c7      	b.n	8015108 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014f78:	4b6b      	ldr	r3, [pc, #428]	; (8015128 <tcp_process+0x7d0>)
 8014f7a:	781b      	ldrb	r3, [r3, #0]
 8014f7c:	f003 0310 	and.w	r3, r3, #16
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	f000 80c1 	beq.w	8015108 <tcp_process+0x7b0>
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014f8a:	4b68      	ldr	r3, [pc, #416]	; (801512c <tcp_process+0x7d4>)
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	429a      	cmp	r2, r3
 8014f90:	f040 80ba 	bne.w	8015108 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	f040 80b5 	bne.w	8015108 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	2206      	movs	r2, #6
 8014fa2:	751a      	strb	r2, [r3, #20]
      break;
 8014fa4:	e0b0      	b.n	8015108 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014fa6:	6878      	ldr	r0, [r7, #4]
 8014fa8:	f000 f9ca 	bl	8015340 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014fac:	4b60      	ldr	r3, [pc, #384]	; (8015130 <tcp_process+0x7d8>)
 8014fae:	781b      	ldrb	r3, [r3, #0]
 8014fb0:	f003 0320 	and.w	r3, r3, #32
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	f000 80a9 	beq.w	801510c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	8b5b      	ldrh	r3, [r3, #26]
 8014fbe:	f043 0302 	orr.w	r3, r3, #2
 8014fc2:	b29a      	uxth	r2, r3
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014fc8:	6878      	ldr	r0, [r7, #4]
 8014fca:	f7fe fd25 	bl	8013a18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014fce:	4b59      	ldr	r3, [pc, #356]	; (8015134 <tcp_process+0x7dc>)
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	687a      	ldr	r2, [r7, #4]
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d105      	bne.n	8014fe4 <tcp_process+0x68c>
 8014fd8:	4b56      	ldr	r3, [pc, #344]	; (8015134 <tcp_process+0x7dc>)
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	68db      	ldr	r3, [r3, #12]
 8014fde:	4a55      	ldr	r2, [pc, #340]	; (8015134 <tcp_process+0x7dc>)
 8014fe0:	6013      	str	r3, [r2, #0]
 8014fe2:	e013      	b.n	801500c <tcp_process+0x6b4>
 8014fe4:	4b53      	ldr	r3, [pc, #332]	; (8015134 <tcp_process+0x7dc>)
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	613b      	str	r3, [r7, #16]
 8014fea:	e00c      	b.n	8015006 <tcp_process+0x6ae>
 8014fec:	693b      	ldr	r3, [r7, #16]
 8014fee:	68db      	ldr	r3, [r3, #12]
 8014ff0:	687a      	ldr	r2, [r7, #4]
 8014ff2:	429a      	cmp	r2, r3
 8014ff4:	d104      	bne.n	8015000 <tcp_process+0x6a8>
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	68da      	ldr	r2, [r3, #12]
 8014ffa:	693b      	ldr	r3, [r7, #16]
 8014ffc:	60da      	str	r2, [r3, #12]
 8014ffe:	e005      	b.n	801500c <tcp_process+0x6b4>
 8015000:	693b      	ldr	r3, [r7, #16]
 8015002:	68db      	ldr	r3, [r3, #12]
 8015004:	613b      	str	r3, [r7, #16]
 8015006:	693b      	ldr	r3, [r7, #16]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d1ef      	bne.n	8014fec <tcp_process+0x694>
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	2200      	movs	r2, #0
 8015010:	60da      	str	r2, [r3, #12]
 8015012:	4b43      	ldr	r3, [pc, #268]	; (8015120 <tcp_process+0x7c8>)
 8015014:	2201      	movs	r2, #1
 8015016:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	220a      	movs	r2, #10
 801501c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801501e:	4b41      	ldr	r3, [pc, #260]	; (8015124 <tcp_process+0x7cc>)
 8015020:	681a      	ldr	r2, [r3, #0]
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	60da      	str	r2, [r3, #12]
 8015026:	4a3f      	ldr	r2, [pc, #252]	; (8015124 <tcp_process+0x7cc>)
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	6013      	str	r3, [r2, #0]
 801502c:	f003 f90c 	bl	8018248 <tcp_timer_needed>
      }
      break;
 8015030:	e06c      	b.n	801510c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8015032:	6878      	ldr	r0, [r7, #4]
 8015034:	f000 f984 	bl	8015340 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015038:	4b3b      	ldr	r3, [pc, #236]	; (8015128 <tcp_process+0x7d0>)
 801503a:	781b      	ldrb	r3, [r3, #0]
 801503c:	f003 0310 	and.w	r3, r3, #16
 8015040:	2b00      	cmp	r3, #0
 8015042:	d065      	beq.n	8015110 <tcp_process+0x7b8>
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015048:	4b38      	ldr	r3, [pc, #224]	; (801512c <tcp_process+0x7d4>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	429a      	cmp	r2, r3
 801504e:	d15f      	bne.n	8015110 <tcp_process+0x7b8>
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015054:	2b00      	cmp	r3, #0
 8015056:	d15b      	bne.n	8015110 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f7fe fcdd 	bl	8013a18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801505e:	4b35      	ldr	r3, [pc, #212]	; (8015134 <tcp_process+0x7dc>)
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	687a      	ldr	r2, [r7, #4]
 8015064:	429a      	cmp	r2, r3
 8015066:	d105      	bne.n	8015074 <tcp_process+0x71c>
 8015068:	4b32      	ldr	r3, [pc, #200]	; (8015134 <tcp_process+0x7dc>)
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	68db      	ldr	r3, [r3, #12]
 801506e:	4a31      	ldr	r2, [pc, #196]	; (8015134 <tcp_process+0x7dc>)
 8015070:	6013      	str	r3, [r2, #0]
 8015072:	e013      	b.n	801509c <tcp_process+0x744>
 8015074:	4b2f      	ldr	r3, [pc, #188]	; (8015134 <tcp_process+0x7dc>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	60fb      	str	r3, [r7, #12]
 801507a:	e00c      	b.n	8015096 <tcp_process+0x73e>
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	68db      	ldr	r3, [r3, #12]
 8015080:	687a      	ldr	r2, [r7, #4]
 8015082:	429a      	cmp	r2, r3
 8015084:	d104      	bne.n	8015090 <tcp_process+0x738>
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	68da      	ldr	r2, [r3, #12]
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	60da      	str	r2, [r3, #12]
 801508e:	e005      	b.n	801509c <tcp_process+0x744>
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	68db      	ldr	r3, [r3, #12]
 8015094:	60fb      	str	r3, [r7, #12]
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d1ef      	bne.n	801507c <tcp_process+0x724>
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	2200      	movs	r2, #0
 80150a0:	60da      	str	r2, [r3, #12]
 80150a2:	4b1f      	ldr	r3, [pc, #124]	; (8015120 <tcp_process+0x7c8>)
 80150a4:	2201      	movs	r2, #1
 80150a6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	220a      	movs	r2, #10
 80150ac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80150ae:	4b1d      	ldr	r3, [pc, #116]	; (8015124 <tcp_process+0x7cc>)
 80150b0:	681a      	ldr	r2, [r3, #0]
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	60da      	str	r2, [r3, #12]
 80150b6:	4a1b      	ldr	r2, [pc, #108]	; (8015124 <tcp_process+0x7cc>)
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	6013      	str	r3, [r2, #0]
 80150bc:	f003 f8c4 	bl	8018248 <tcp_timer_needed>
      }
      break;
 80150c0:	e026      	b.n	8015110 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80150c2:	6878      	ldr	r0, [r7, #4]
 80150c4:	f000 f93c 	bl	8015340 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80150c8:	4b17      	ldr	r3, [pc, #92]	; (8015128 <tcp_process+0x7d0>)
 80150ca:	781b      	ldrb	r3, [r3, #0]
 80150cc:	f003 0310 	and.w	r3, r3, #16
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d01f      	beq.n	8015114 <tcp_process+0x7bc>
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80150d8:	4b14      	ldr	r3, [pc, #80]	; (801512c <tcp_process+0x7d4>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	429a      	cmp	r2, r3
 80150de:	d119      	bne.n	8015114 <tcp_process+0x7bc>
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d115      	bne.n	8015114 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80150e8:	4b11      	ldr	r3, [pc, #68]	; (8015130 <tcp_process+0x7d8>)
 80150ea:	781b      	ldrb	r3, [r3, #0]
 80150ec:	f043 0310 	orr.w	r3, r3, #16
 80150f0:	b2da      	uxtb	r2, r3
 80150f2:	4b0f      	ldr	r3, [pc, #60]	; (8015130 <tcp_process+0x7d8>)
 80150f4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80150f6:	e00d      	b.n	8015114 <tcp_process+0x7bc>
    default:
      break;
 80150f8:	bf00      	nop
 80150fa:	e00c      	b.n	8015116 <tcp_process+0x7be>
      break;
 80150fc:	bf00      	nop
 80150fe:	e00a      	b.n	8015116 <tcp_process+0x7be>
      break;
 8015100:	bf00      	nop
 8015102:	e008      	b.n	8015116 <tcp_process+0x7be>
      break;
 8015104:	bf00      	nop
 8015106:	e006      	b.n	8015116 <tcp_process+0x7be>
      break;
 8015108:	bf00      	nop
 801510a:	e004      	b.n	8015116 <tcp_process+0x7be>
      break;
 801510c:	bf00      	nop
 801510e:	e002      	b.n	8015116 <tcp_process+0x7be>
      break;
 8015110:	bf00      	nop
 8015112:	e000      	b.n	8015116 <tcp_process+0x7be>
      break;
 8015114:	bf00      	nop
  }
  return ERR_OK;
 8015116:	2300      	movs	r3, #0
}
 8015118:	4618      	mov	r0, r3
 801511a:	3724      	adds	r7, #36	; 0x24
 801511c:	46bd      	mov	sp, r7
 801511e:	bd90      	pop	{r4, r7, pc}
 8015120:	2405e89c 	.word	0x2405e89c
 8015124:	2405e898 	.word	0x2405e898
 8015128:	2405e8cc 	.word	0x2405e8cc
 801512c:	2405e8c4 	.word	0x2405e8c4
 8015130:	2405e8cd 	.word	0x2405e8cd
 8015134:	2405e894 	.word	0x2405e894

08015138 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8015138:	b590      	push	{r4, r7, lr}
 801513a:	b085      	sub	sp, #20
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
 8015140:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d106      	bne.n	8015156 <tcp_oos_insert_segment+0x1e>
 8015148:	4b3b      	ldr	r3, [pc, #236]	; (8015238 <tcp_oos_insert_segment+0x100>)
 801514a:	f240 421f 	movw	r2, #1055	; 0x41f
 801514e:	493b      	ldr	r1, [pc, #236]	; (801523c <tcp_oos_insert_segment+0x104>)
 8015150:	483b      	ldr	r0, [pc, #236]	; (8015240 <tcp_oos_insert_segment+0x108>)
 8015152:	f006 fb87 	bl	801b864 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	68db      	ldr	r3, [r3, #12]
 801515a:	899b      	ldrh	r3, [r3, #12]
 801515c:	b29b      	uxth	r3, r3
 801515e:	4618      	mov	r0, r3
 8015160:	f7fa ffa2 	bl	80100a8 <lwip_htons>
 8015164:	4603      	mov	r3, r0
 8015166:	b2db      	uxtb	r3, r3
 8015168:	f003 0301 	and.w	r3, r3, #1
 801516c:	2b00      	cmp	r3, #0
 801516e:	d028      	beq.n	80151c2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8015170:	6838      	ldr	r0, [r7, #0]
 8015172:	f7fe f981 	bl	8013478 <tcp_segs_free>
    next = NULL;
 8015176:	2300      	movs	r3, #0
 8015178:	603b      	str	r3, [r7, #0]
 801517a:	e056      	b.n	801522a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801517c:	683b      	ldr	r3, [r7, #0]
 801517e:	68db      	ldr	r3, [r3, #12]
 8015180:	899b      	ldrh	r3, [r3, #12]
 8015182:	b29b      	uxth	r3, r3
 8015184:	4618      	mov	r0, r3
 8015186:	f7fa ff8f 	bl	80100a8 <lwip_htons>
 801518a:	4603      	mov	r3, r0
 801518c:	b2db      	uxtb	r3, r3
 801518e:	f003 0301 	and.w	r3, r3, #1
 8015192:	2b00      	cmp	r3, #0
 8015194:	d00d      	beq.n	80151b2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	68db      	ldr	r3, [r3, #12]
 801519a:	899b      	ldrh	r3, [r3, #12]
 801519c:	b29c      	uxth	r4, r3
 801519e:	2001      	movs	r0, #1
 80151a0:	f7fa ff82 	bl	80100a8 <lwip_htons>
 80151a4:	4603      	mov	r3, r0
 80151a6:	461a      	mov	r2, r3
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	68db      	ldr	r3, [r3, #12]
 80151ac:	4322      	orrs	r2, r4
 80151ae:	b292      	uxth	r2, r2
 80151b0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80151b2:	683b      	ldr	r3, [r7, #0]
 80151b4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80151bc:	68f8      	ldr	r0, [r7, #12]
 80151be:	f7fe f970 	bl	80134a2 <tcp_seg_free>
    while (next &&
 80151c2:	683b      	ldr	r3, [r7, #0]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d00e      	beq.n	80151e6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	891b      	ldrh	r3, [r3, #8]
 80151cc:	461a      	mov	r2, r3
 80151ce:	4b1d      	ldr	r3, [pc, #116]	; (8015244 <tcp_oos_insert_segment+0x10c>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	441a      	add	r2, r3
 80151d4:	683b      	ldr	r3, [r7, #0]
 80151d6:	68db      	ldr	r3, [r3, #12]
 80151d8:	685b      	ldr	r3, [r3, #4]
 80151da:	6839      	ldr	r1, [r7, #0]
 80151dc:	8909      	ldrh	r1, [r1, #8]
 80151de:	440b      	add	r3, r1
 80151e0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	daca      	bge.n	801517c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80151e6:	683b      	ldr	r3, [r7, #0]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d01e      	beq.n	801522a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	891b      	ldrh	r3, [r3, #8]
 80151f0:	461a      	mov	r2, r3
 80151f2:	4b14      	ldr	r3, [pc, #80]	; (8015244 <tcp_oos_insert_segment+0x10c>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	441a      	add	r2, r3
 80151f8:	683b      	ldr	r3, [r7, #0]
 80151fa:	68db      	ldr	r3, [r3, #12]
 80151fc:	685b      	ldr	r3, [r3, #4]
 80151fe:	1ad3      	subs	r3, r2, r3
    if (next &&
 8015200:	2b00      	cmp	r3, #0
 8015202:	dd12      	ble.n	801522a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	68db      	ldr	r3, [r3, #12]
 8015208:	685b      	ldr	r3, [r3, #4]
 801520a:	b29a      	uxth	r2, r3
 801520c:	4b0d      	ldr	r3, [pc, #52]	; (8015244 <tcp_oos_insert_segment+0x10c>)
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	b29b      	uxth	r3, r3
 8015212:	1ad3      	subs	r3, r2, r3
 8015214:	b29a      	uxth	r2, r3
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	685a      	ldr	r2, [r3, #4]
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	891b      	ldrh	r3, [r3, #8]
 8015222:	4619      	mov	r1, r3
 8015224:	4610      	mov	r0, r2
 8015226:	f7fc fb33 	bl	8011890 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	683a      	ldr	r2, [r7, #0]
 801522e:	601a      	str	r2, [r3, #0]
}
 8015230:	bf00      	nop
 8015232:	3714      	adds	r7, #20
 8015234:	46bd      	mov	sp, r7
 8015236:	bd90      	pop	{r4, r7, pc}
 8015238:	0801e90c 	.word	0x0801e90c
 801523c:	0801ebcc 	.word	0x0801ebcc
 8015240:	0801e958 	.word	0x0801e958
 8015244:	2405e8c0 	.word	0x2405e8c0

08015248 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8015248:	b5b0      	push	{r4, r5, r7, lr}
 801524a:	b086      	sub	sp, #24
 801524c:	af00      	add	r7, sp, #0
 801524e:	60f8      	str	r0, [r7, #12]
 8015250:	60b9      	str	r1, [r7, #8]
 8015252:	607a      	str	r2, [r7, #4]
 8015254:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8015256:	e03e      	b.n	80152d6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8015258:	68bb      	ldr	r3, [r7, #8]
 801525a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801525c:	68bb      	ldr	r3, [r7, #8]
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8015262:	697b      	ldr	r3, [r7, #20]
 8015264:	685b      	ldr	r3, [r3, #4]
 8015266:	4618      	mov	r0, r3
 8015268:	f7fc fd26 	bl	8011cb8 <pbuf_clen>
 801526c:	4603      	mov	r3, r0
 801526e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015276:	8a7a      	ldrh	r2, [r7, #18]
 8015278:	429a      	cmp	r2, r3
 801527a:	d906      	bls.n	801528a <tcp_free_acked_segments+0x42>
 801527c:	4b2a      	ldr	r3, [pc, #168]	; (8015328 <tcp_free_acked_segments+0xe0>)
 801527e:	f240 4257 	movw	r2, #1111	; 0x457
 8015282:	492a      	ldr	r1, [pc, #168]	; (801532c <tcp_free_acked_segments+0xe4>)
 8015284:	482a      	ldr	r0, [pc, #168]	; (8015330 <tcp_free_acked_segments+0xe8>)
 8015286:	f006 faed 	bl	801b864 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8015290:	8a7b      	ldrh	r3, [r7, #18]
 8015292:	1ad3      	subs	r3, r2, r3
 8015294:	b29a      	uxth	r2, r3
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801529c:	697b      	ldr	r3, [r7, #20]
 801529e:	891a      	ldrh	r2, [r3, #8]
 80152a0:	4b24      	ldr	r3, [pc, #144]	; (8015334 <tcp_free_acked_segments+0xec>)
 80152a2:	881b      	ldrh	r3, [r3, #0]
 80152a4:	4413      	add	r3, r2
 80152a6:	b29a      	uxth	r2, r3
 80152a8:	4b22      	ldr	r3, [pc, #136]	; (8015334 <tcp_free_acked_segments+0xec>)
 80152aa:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80152ac:	6978      	ldr	r0, [r7, #20]
 80152ae:	f7fe f8f8 	bl	80134a2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d00c      	beq.n	80152d6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80152bc:	68bb      	ldr	r3, [r7, #8]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d109      	bne.n	80152d6 <tcp_free_acked_segments+0x8e>
 80152c2:	683b      	ldr	r3, [r7, #0]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d106      	bne.n	80152d6 <tcp_free_acked_segments+0x8e>
 80152c8:	4b17      	ldr	r3, [pc, #92]	; (8015328 <tcp_free_acked_segments+0xe0>)
 80152ca:	f240 4261 	movw	r2, #1121	; 0x461
 80152ce:	491a      	ldr	r1, [pc, #104]	; (8015338 <tcp_free_acked_segments+0xf0>)
 80152d0:	4817      	ldr	r0, [pc, #92]	; (8015330 <tcp_free_acked_segments+0xe8>)
 80152d2:	f006 fac7 	bl	801b864 <iprintf>
  while (seg_list != NULL &&
 80152d6:	68bb      	ldr	r3, [r7, #8]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d020      	beq.n	801531e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80152dc:	68bb      	ldr	r3, [r7, #8]
 80152de:	68db      	ldr	r3, [r3, #12]
 80152e0:	685b      	ldr	r3, [r3, #4]
 80152e2:	4618      	mov	r0, r3
 80152e4:	f7fa fef5 	bl	80100d2 <lwip_htonl>
 80152e8:	4604      	mov	r4, r0
 80152ea:	68bb      	ldr	r3, [r7, #8]
 80152ec:	891b      	ldrh	r3, [r3, #8]
 80152ee:	461d      	mov	r5, r3
 80152f0:	68bb      	ldr	r3, [r7, #8]
 80152f2:	68db      	ldr	r3, [r3, #12]
 80152f4:	899b      	ldrh	r3, [r3, #12]
 80152f6:	b29b      	uxth	r3, r3
 80152f8:	4618      	mov	r0, r3
 80152fa:	f7fa fed5 	bl	80100a8 <lwip_htons>
 80152fe:	4603      	mov	r3, r0
 8015300:	b2db      	uxtb	r3, r3
 8015302:	f003 0303 	and.w	r3, r3, #3
 8015306:	2b00      	cmp	r3, #0
 8015308:	d001      	beq.n	801530e <tcp_free_acked_segments+0xc6>
 801530a:	2301      	movs	r3, #1
 801530c:	e000      	b.n	8015310 <tcp_free_acked_segments+0xc8>
 801530e:	2300      	movs	r3, #0
 8015310:	442b      	add	r3, r5
 8015312:	18e2      	adds	r2, r4, r3
 8015314:	4b09      	ldr	r3, [pc, #36]	; (801533c <tcp_free_acked_segments+0xf4>)
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801531a:	2b00      	cmp	r3, #0
 801531c:	dd9c      	ble.n	8015258 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801531e:	68bb      	ldr	r3, [r7, #8]
}
 8015320:	4618      	mov	r0, r3
 8015322:	3718      	adds	r7, #24
 8015324:	46bd      	mov	sp, r7
 8015326:	bdb0      	pop	{r4, r5, r7, pc}
 8015328:	0801e90c 	.word	0x0801e90c
 801532c:	0801ebf4 	.word	0x0801ebf4
 8015330:	0801e958 	.word	0x0801e958
 8015334:	2405e8c8 	.word	0x2405e8c8
 8015338:	0801ec1c 	.word	0x0801ec1c
 801533c:	2405e8c4 	.word	0x2405e8c4

08015340 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015340:	b5b0      	push	{r4, r5, r7, lr}
 8015342:	b094      	sub	sp, #80	; 0x50
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8015348:	2300      	movs	r3, #0
 801534a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d106      	bne.n	8015360 <tcp_receive+0x20>
 8015352:	4b91      	ldr	r3, [pc, #580]	; (8015598 <tcp_receive+0x258>)
 8015354:	f240 427b 	movw	r2, #1147	; 0x47b
 8015358:	4990      	ldr	r1, [pc, #576]	; (801559c <tcp_receive+0x25c>)
 801535a:	4891      	ldr	r0, [pc, #580]	; (80155a0 <tcp_receive+0x260>)
 801535c:	f006 fa82 	bl	801b864 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	7d1b      	ldrb	r3, [r3, #20]
 8015364:	2b03      	cmp	r3, #3
 8015366:	d806      	bhi.n	8015376 <tcp_receive+0x36>
 8015368:	4b8b      	ldr	r3, [pc, #556]	; (8015598 <tcp_receive+0x258>)
 801536a:	f240 427c 	movw	r2, #1148	; 0x47c
 801536e:	498d      	ldr	r1, [pc, #564]	; (80155a4 <tcp_receive+0x264>)
 8015370:	488b      	ldr	r0, [pc, #556]	; (80155a0 <tcp_receive+0x260>)
 8015372:	f006 fa77 	bl	801b864 <iprintf>

  if (flags & TCP_ACK) {
 8015376:	4b8c      	ldr	r3, [pc, #560]	; (80155a8 <tcp_receive+0x268>)
 8015378:	781b      	ldrb	r3, [r3, #0]
 801537a:	f003 0310 	and.w	r3, r3, #16
 801537e:	2b00      	cmp	r3, #0
 8015380:	f000 8264 	beq.w	801584c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801538a:	461a      	mov	r2, r3
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015390:	4413      	add	r3, r2
 8015392:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015398:	4b84      	ldr	r3, [pc, #528]	; (80155ac <tcp_receive+0x26c>)
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	1ad3      	subs	r3, r2, r3
 801539e:	2b00      	cmp	r3, #0
 80153a0:	db1b      	blt.n	80153da <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80153a6:	4b81      	ldr	r3, [pc, #516]	; (80155ac <tcp_receive+0x26c>)
 80153a8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80153aa:	429a      	cmp	r2, r3
 80153ac:	d106      	bne.n	80153bc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80153b2:	4b7f      	ldr	r3, [pc, #508]	; (80155b0 <tcp_receive+0x270>)
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	1ad3      	subs	r3, r2, r3
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	db0e      	blt.n	80153da <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80153c0:	4b7b      	ldr	r3, [pc, #492]	; (80155b0 <tcp_receive+0x270>)
 80153c2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80153c4:	429a      	cmp	r2, r3
 80153c6:	d125      	bne.n	8015414 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80153c8:	4b7a      	ldr	r3, [pc, #488]	; (80155b4 <tcp_receive+0x274>)
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	89db      	ldrh	r3, [r3, #14]
 80153ce:	b29a      	uxth	r2, r3
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80153d6:	429a      	cmp	r2, r3
 80153d8:	d91c      	bls.n	8015414 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80153da:	4b76      	ldr	r3, [pc, #472]	; (80155b4 <tcp_receive+0x274>)
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	89db      	ldrh	r3, [r3, #14]
 80153e0:	b29a      	uxth	r2, r3
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80153f4:	429a      	cmp	r2, r3
 80153f6:	d205      	bcs.n	8015404 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8015404:	4b69      	ldr	r3, [pc, #420]	; (80155ac <tcp_receive+0x26c>)
 8015406:	681a      	ldr	r2, [r3, #0]
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801540c:	4b68      	ldr	r3, [pc, #416]	; (80155b0 <tcp_receive+0x270>)
 801540e:	681a      	ldr	r2, [r3, #0]
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015414:	4b66      	ldr	r3, [pc, #408]	; (80155b0 <tcp_receive+0x270>)
 8015416:	681a      	ldr	r2, [r3, #0]
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801541c:	1ad3      	subs	r3, r2, r3
 801541e:	2b00      	cmp	r3, #0
 8015420:	dc58      	bgt.n	80154d4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8015422:	4b65      	ldr	r3, [pc, #404]	; (80155b8 <tcp_receive+0x278>)
 8015424:	881b      	ldrh	r3, [r3, #0]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d14b      	bne.n	80154c2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801542e:	687a      	ldr	r2, [r7, #4]
 8015430:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8015434:	4413      	add	r3, r2
 8015436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015438:	429a      	cmp	r2, r3
 801543a:	d142      	bne.n	80154c2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015442:	2b00      	cmp	r3, #0
 8015444:	db3d      	blt.n	80154c2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801544a:	4b59      	ldr	r3, [pc, #356]	; (80155b0 <tcp_receive+0x270>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	429a      	cmp	r2, r3
 8015450:	d137      	bne.n	80154c2 <tcp_receive+0x182>
              found_dupack = 1;
 8015452:	2301      	movs	r3, #1
 8015454:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801545c:	2bff      	cmp	r3, #255	; 0xff
 801545e:	d007      	beq.n	8015470 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015466:	3301      	adds	r3, #1
 8015468:	b2da      	uxtb	r2, r3
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015476:	2b03      	cmp	r3, #3
 8015478:	d91b      	bls.n	80154b2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015484:	4413      	add	r3, r2
 8015486:	b29a      	uxth	r2, r3
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801548e:	429a      	cmp	r2, r3
 8015490:	d30a      	bcc.n	80154a8 <tcp_receive+0x168>
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801549c:	4413      	add	r3, r2
 801549e:	b29a      	uxth	r2, r3
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80154a6:	e004      	b.n	80154b2 <tcp_receive+0x172>
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80154ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80154b8:	2b02      	cmp	r3, #2
 80154ba:	d902      	bls.n	80154c2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f002 fb55 	bl	8017b6c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80154c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	f040 8161 	bne.w	801578c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	2200      	movs	r2, #0
 80154ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80154d2:	e15b      	b.n	801578c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80154d4:	4b36      	ldr	r3, [pc, #216]	; (80155b0 <tcp_receive+0x270>)
 80154d6:	681a      	ldr	r2, [r3, #0]
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154dc:	1ad3      	subs	r3, r2, r3
 80154de:	3b01      	subs	r3, #1
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	f2c0 814e 	blt.w	8015782 <tcp_receive+0x442>
 80154e6:	4b32      	ldr	r3, [pc, #200]	; (80155b0 <tcp_receive+0x270>)
 80154e8:	681a      	ldr	r2, [r3, #0]
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80154ee:	1ad3      	subs	r3, r2, r3
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	f300 8146 	bgt.w	8015782 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	8b5b      	ldrh	r3, [r3, #26]
 80154fa:	f003 0304 	and.w	r3, r3, #4
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d010      	beq.n	8015524 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	8b5b      	ldrh	r3, [r3, #26]
 8015506:	f023 0304 	bic.w	r3, r3, #4
 801550a:	b29a      	uxth	r2, r3
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	2200      	movs	r2, #0
 8015520:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	2200      	movs	r2, #0
 8015528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015532:	10db      	asrs	r3, r3, #3
 8015534:	b21b      	sxth	r3, r3
 8015536:	b29a      	uxth	r2, r3
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801553e:	b29b      	uxth	r3, r3
 8015540:	4413      	add	r3, r2
 8015542:	b29b      	uxth	r3, r3
 8015544:	b21a      	sxth	r2, r3
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801554c:	4b18      	ldr	r3, [pc, #96]	; (80155b0 <tcp_receive+0x270>)
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	b29a      	uxth	r2, r3
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015556:	b29b      	uxth	r3, r3
 8015558:	1ad3      	subs	r3, r2, r3
 801555a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	2200      	movs	r2, #0
 8015560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8015564:	4b12      	ldr	r3, [pc, #72]	; (80155b0 <tcp_receive+0x270>)
 8015566:	681a      	ldr	r2, [r3, #0]
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	7d1b      	ldrb	r3, [r3, #20]
 8015570:	2b03      	cmp	r3, #3
 8015572:	f240 8097 	bls.w	80156a4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015582:	429a      	cmp	r2, r3
 8015584:	d245      	bcs.n	8015612 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	8b5b      	ldrh	r3, [r3, #26]
 801558a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801558e:	2b00      	cmp	r3, #0
 8015590:	d014      	beq.n	80155bc <tcp_receive+0x27c>
 8015592:	2301      	movs	r3, #1
 8015594:	e013      	b.n	80155be <tcp_receive+0x27e>
 8015596:	bf00      	nop
 8015598:	0801e90c 	.word	0x0801e90c
 801559c:	0801ec3c 	.word	0x0801ec3c
 80155a0:	0801e958 	.word	0x0801e958
 80155a4:	0801ec58 	.word	0x0801ec58
 80155a8:	2405e8cc 	.word	0x2405e8cc
 80155ac:	2405e8c0 	.word	0x2405e8c0
 80155b0:	2405e8c4 	.word	0x2405e8c4
 80155b4:	2405e8b0 	.word	0x2405e8b0
 80155b8:	2405e8ca 	.word	0x2405e8ca
 80155bc:	2302      	movs	r3, #2
 80155be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80155c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80155c6:	b29a      	uxth	r2, r3
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80155cc:	fb12 f303 	smulbb	r3, r2, r3
 80155d0:	b29b      	uxth	r3, r3
 80155d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80155d4:	4293      	cmp	r3, r2
 80155d6:	bf28      	it	cs
 80155d8:	4613      	movcs	r3, r2
 80155da:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80155e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80155e4:	4413      	add	r3, r2
 80155e6:	b29a      	uxth	r2, r3
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80155ee:	429a      	cmp	r2, r3
 80155f0:	d309      	bcc.n	8015606 <tcp_receive+0x2c6>
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80155f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80155fa:	4413      	add	r3, r2
 80155fc:	b29a      	uxth	r2, r3
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015604:	e04e      	b.n	80156a4 <tcp_receive+0x364>
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801560c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015610:	e048      	b.n	80156a4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015618:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801561a:	4413      	add	r3, r2
 801561c:	b29a      	uxth	r2, r3
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015624:	429a      	cmp	r2, r3
 8015626:	d309      	bcc.n	801563c <tcp_receive+0x2fc>
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801562e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015630:	4413      	add	r3, r2
 8015632:	b29a      	uxth	r2, r3
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801563a:	e004      	b.n	8015646 <tcp_receive+0x306>
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015642:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015652:	429a      	cmp	r2, r3
 8015654:	d326      	bcc.n	80156a4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015662:	1ad3      	subs	r3, r2, r3
 8015664:	b29a      	uxth	r2, r3
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015676:	4413      	add	r3, r2
 8015678:	b29a      	uxth	r2, r3
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015680:	429a      	cmp	r2, r3
 8015682:	d30a      	bcc.n	801569a <tcp_receive+0x35a>
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801568e:	4413      	add	r3, r2
 8015690:	b29a      	uxth	r2, r3
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015698:	e004      	b.n	80156a4 <tcp_receive+0x364>
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80156a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156ac:	4a98      	ldr	r2, [pc, #608]	; (8015910 <tcp_receive+0x5d0>)
 80156ae:	6878      	ldr	r0, [r7, #4]
 80156b0:	f7ff fdca 	bl	8015248 <tcp_free_acked_segments>
 80156b4:	4602      	mov	r2, r0
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156c2:	4a94      	ldr	r2, [pc, #592]	; (8015914 <tcp_receive+0x5d4>)
 80156c4:	6878      	ldr	r0, [r7, #4]
 80156c6:	f7ff fdbf 	bl	8015248 <tcp_free_acked_segments>
 80156ca:	4602      	mov	r2, r0
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d104      	bne.n	80156e2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80156de:	861a      	strh	r2, [r3, #48]	; 0x30
 80156e0:	e002      	b.n	80156e8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	2200      	movs	r2, #0
 80156e6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	2200      	movs	r2, #0
 80156ec:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d103      	bne.n	80156fe <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	2200      	movs	r2, #0
 80156fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015704:	4b84      	ldr	r3, [pc, #528]	; (8015918 <tcp_receive+0x5d8>)
 8015706:	881b      	ldrh	r3, [r3, #0]
 8015708:	4413      	add	r3, r2
 801570a:	b29a      	uxth	r2, r3
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	8b5b      	ldrh	r3, [r3, #26]
 8015716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801571a:	2b00      	cmp	r3, #0
 801571c:	d035      	beq.n	801578a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015722:	2b00      	cmp	r3, #0
 8015724:	d118      	bne.n	8015758 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801572a:	2b00      	cmp	r3, #0
 801572c:	d00c      	beq.n	8015748 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015736:	68db      	ldr	r3, [r3, #12]
 8015738:	685b      	ldr	r3, [r3, #4]
 801573a:	4618      	mov	r0, r3
 801573c:	f7fa fcc9 	bl	80100d2 <lwip_htonl>
 8015740:	4603      	mov	r3, r0
 8015742:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015744:	2b00      	cmp	r3, #0
 8015746:	dc20      	bgt.n	801578a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	8b5b      	ldrh	r3, [r3, #26]
 801574c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015750:	b29a      	uxth	r2, r3
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015756:	e018      	b.n	801578a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015760:	68db      	ldr	r3, [r3, #12]
 8015762:	685b      	ldr	r3, [r3, #4]
 8015764:	4618      	mov	r0, r3
 8015766:	f7fa fcb4 	bl	80100d2 <lwip_htonl>
 801576a:	4603      	mov	r3, r0
 801576c:	1ae3      	subs	r3, r4, r3
 801576e:	2b00      	cmp	r3, #0
 8015770:	dc0b      	bgt.n	801578a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	8b5b      	ldrh	r3, [r3, #26]
 8015776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801577a:	b29a      	uxth	r2, r3
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015780:	e003      	b.n	801578a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015782:	6878      	ldr	r0, [r7, #4]
 8015784:	f002 fbf0 	bl	8017f68 <tcp_send_empty_ack>
 8015788:	e000      	b.n	801578c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801578a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015790:	2b00      	cmp	r3, #0
 8015792:	d05b      	beq.n	801584c <tcp_receive+0x50c>
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015798:	4b60      	ldr	r3, [pc, #384]	; (801591c <tcp_receive+0x5dc>)
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	1ad3      	subs	r3, r2, r3
 801579e:	2b00      	cmp	r3, #0
 80157a0:	da54      	bge.n	801584c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80157a2:	4b5f      	ldr	r3, [pc, #380]	; (8015920 <tcp_receive+0x5e0>)
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	b29a      	uxth	r2, r3
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157ac:	b29b      	uxth	r3, r3
 80157ae:	1ad3      	subs	r3, r2, r3
 80157b0:	b29b      	uxth	r3, r3
 80157b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80157b6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80157c0:	10db      	asrs	r3, r3, #3
 80157c2:	b21b      	sxth	r3, r3
 80157c4:	b29b      	uxth	r3, r3
 80157c6:	1ad3      	subs	r3, r2, r3
 80157c8:	b29b      	uxth	r3, r3
 80157ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80157d4:	b29a      	uxth	r2, r3
 80157d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80157da:	4413      	add	r3, r2
 80157dc:	b29b      	uxth	r3, r3
 80157de:	b21a      	sxth	r2, r3
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80157e4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	da05      	bge.n	80157f8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80157ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80157f0:	425b      	negs	r3, r3
 80157f2:	b29b      	uxth	r3, r3
 80157f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80157f8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015802:	109b      	asrs	r3, r3, #2
 8015804:	b21b      	sxth	r3, r3
 8015806:	b29b      	uxth	r3, r3
 8015808:	1ad3      	subs	r3, r2, r3
 801580a:	b29b      	uxth	r3, r3
 801580c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015816:	b29a      	uxth	r2, r3
 8015818:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801581c:	4413      	add	r3, r2
 801581e:	b29b      	uxth	r3, r3
 8015820:	b21a      	sxth	r2, r3
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801582c:	10db      	asrs	r3, r3, #3
 801582e:	b21b      	sxth	r3, r3
 8015830:	b29a      	uxth	r2, r3
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015838:	b29b      	uxth	r3, r3
 801583a:	4413      	add	r3, r2
 801583c:	b29b      	uxth	r3, r3
 801583e:	b21a      	sxth	r2, r3
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	2200      	movs	r2, #0
 801584a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801584c:	4b35      	ldr	r3, [pc, #212]	; (8015924 <tcp_receive+0x5e4>)
 801584e:	881b      	ldrh	r3, [r3, #0]
 8015850:	2b00      	cmp	r3, #0
 8015852:	f000 84e2 	beq.w	801621a <tcp_receive+0xeda>
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	7d1b      	ldrb	r3, [r3, #20]
 801585a:	2b06      	cmp	r3, #6
 801585c:	f200 84dd 	bhi.w	801621a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015864:	4b30      	ldr	r3, [pc, #192]	; (8015928 <tcp_receive+0x5e8>)
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	1ad3      	subs	r3, r2, r3
 801586a:	3b01      	subs	r3, #1
 801586c:	2b00      	cmp	r3, #0
 801586e:	f2c0 808f 	blt.w	8015990 <tcp_receive+0x650>
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015876:	4b2b      	ldr	r3, [pc, #172]	; (8015924 <tcp_receive+0x5e4>)
 8015878:	881b      	ldrh	r3, [r3, #0]
 801587a:	4619      	mov	r1, r3
 801587c:	4b2a      	ldr	r3, [pc, #168]	; (8015928 <tcp_receive+0x5e8>)
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	440b      	add	r3, r1
 8015882:	1ad3      	subs	r3, r2, r3
 8015884:	3301      	adds	r3, #1
 8015886:	2b00      	cmp	r3, #0
 8015888:	f300 8082 	bgt.w	8015990 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801588c:	4b27      	ldr	r3, [pc, #156]	; (801592c <tcp_receive+0x5ec>)
 801588e:	685b      	ldr	r3, [r3, #4]
 8015890:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015896:	4b24      	ldr	r3, [pc, #144]	; (8015928 <tcp_receive+0x5e8>)
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	1ad3      	subs	r3, r2, r3
 801589c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801589e:	4b23      	ldr	r3, [pc, #140]	; (801592c <tcp_receive+0x5ec>)
 80158a0:	685b      	ldr	r3, [r3, #4]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d106      	bne.n	80158b4 <tcp_receive+0x574>
 80158a6:	4b22      	ldr	r3, [pc, #136]	; (8015930 <tcp_receive+0x5f0>)
 80158a8:	f240 5294 	movw	r2, #1428	; 0x594
 80158ac:	4921      	ldr	r1, [pc, #132]	; (8015934 <tcp_receive+0x5f4>)
 80158ae:	4822      	ldr	r0, [pc, #136]	; (8015938 <tcp_receive+0x5f8>)
 80158b0:	f005 ffd8 	bl	801b864 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80158b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80158ba:	4293      	cmp	r3, r2
 80158bc:	d906      	bls.n	80158cc <tcp_receive+0x58c>
 80158be:	4b1c      	ldr	r3, [pc, #112]	; (8015930 <tcp_receive+0x5f0>)
 80158c0:	f240 5295 	movw	r2, #1429	; 0x595
 80158c4:	491d      	ldr	r1, [pc, #116]	; (801593c <tcp_receive+0x5fc>)
 80158c6:	481c      	ldr	r0, [pc, #112]	; (8015938 <tcp_receive+0x5f8>)
 80158c8:	f005 ffcc 	bl	801b864 <iprintf>
      off = (u16_t)off32;
 80158cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80158d2:	4b16      	ldr	r3, [pc, #88]	; (801592c <tcp_receive+0x5ec>)
 80158d4:	685b      	ldr	r3, [r3, #4]
 80158d6:	891b      	ldrh	r3, [r3, #8]
 80158d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80158dc:	429a      	cmp	r2, r3
 80158de:	d906      	bls.n	80158ee <tcp_receive+0x5ae>
 80158e0:	4b13      	ldr	r3, [pc, #76]	; (8015930 <tcp_receive+0x5f0>)
 80158e2:	f240 5297 	movw	r2, #1431	; 0x597
 80158e6:	4916      	ldr	r1, [pc, #88]	; (8015940 <tcp_receive+0x600>)
 80158e8:	4813      	ldr	r0, [pc, #76]	; (8015938 <tcp_receive+0x5f8>)
 80158ea:	f005 ffbb 	bl	801b864 <iprintf>
      inseg.len -= off;
 80158ee:	4b0f      	ldr	r3, [pc, #60]	; (801592c <tcp_receive+0x5ec>)
 80158f0:	891a      	ldrh	r2, [r3, #8]
 80158f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80158f6:	1ad3      	subs	r3, r2, r3
 80158f8:	b29a      	uxth	r2, r3
 80158fa:	4b0c      	ldr	r3, [pc, #48]	; (801592c <tcp_receive+0x5ec>)
 80158fc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80158fe:	4b0b      	ldr	r3, [pc, #44]	; (801592c <tcp_receive+0x5ec>)
 8015900:	685b      	ldr	r3, [r3, #4]
 8015902:	891a      	ldrh	r2, [r3, #8]
 8015904:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015908:	1ad3      	subs	r3, r2, r3
 801590a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801590c:	e02a      	b.n	8015964 <tcp_receive+0x624>
 801590e:	bf00      	nop
 8015910:	0801ec74 	.word	0x0801ec74
 8015914:	0801ec7c 	.word	0x0801ec7c
 8015918:	2405e8c8 	.word	0x2405e8c8
 801591c:	2405e8c4 	.word	0x2405e8c4
 8015920:	2405e888 	.word	0x2405e888
 8015924:	2405e8ca 	.word	0x2405e8ca
 8015928:	2405e8c0 	.word	0x2405e8c0
 801592c:	2405e8a0 	.word	0x2405e8a0
 8015930:	0801e90c 	.word	0x0801e90c
 8015934:	0801ec84 	.word	0x0801ec84
 8015938:	0801e958 	.word	0x0801e958
 801593c:	0801ec94 	.word	0x0801ec94
 8015940:	0801eca4 	.word	0x0801eca4
        off -= p->len;
 8015944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015946:	895b      	ldrh	r3, [r3, #10]
 8015948:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801594c:	1ad3      	subs	r3, r2, r3
 801594e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015954:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015956:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801595a:	2200      	movs	r2, #0
 801595c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801595e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015966:	895b      	ldrh	r3, [r3, #10]
 8015968:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801596c:	429a      	cmp	r2, r3
 801596e:	d8e9      	bhi.n	8015944 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015970:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015974:	4619      	mov	r1, r3
 8015976:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015978:	f7fc f88a 	bl	8011a90 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015980:	4a91      	ldr	r2, [pc, #580]	; (8015bc8 <tcp_receive+0x888>)
 8015982:	6013      	str	r3, [r2, #0]
 8015984:	4b91      	ldr	r3, [pc, #580]	; (8015bcc <tcp_receive+0x88c>)
 8015986:	68db      	ldr	r3, [r3, #12]
 8015988:	4a8f      	ldr	r2, [pc, #572]	; (8015bc8 <tcp_receive+0x888>)
 801598a:	6812      	ldr	r2, [r2, #0]
 801598c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801598e:	e00d      	b.n	80159ac <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015990:	4b8d      	ldr	r3, [pc, #564]	; (8015bc8 <tcp_receive+0x888>)
 8015992:	681a      	ldr	r2, [r3, #0]
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015998:	1ad3      	subs	r3, r2, r3
 801599a:	2b00      	cmp	r3, #0
 801599c:	da06      	bge.n	80159ac <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	8b5b      	ldrh	r3, [r3, #26]
 80159a2:	f043 0302 	orr.w	r3, r3, #2
 80159a6:	b29a      	uxth	r2, r3
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80159ac:	4b86      	ldr	r3, [pc, #536]	; (8015bc8 <tcp_receive+0x888>)
 80159ae:	681a      	ldr	r2, [r3, #0]
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159b4:	1ad3      	subs	r3, r2, r3
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	f2c0 842a 	blt.w	8016210 <tcp_receive+0xed0>
 80159bc:	4b82      	ldr	r3, [pc, #520]	; (8015bc8 <tcp_receive+0x888>)
 80159be:	681a      	ldr	r2, [r3, #0]
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159c4:	6879      	ldr	r1, [r7, #4]
 80159c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80159c8:	440b      	add	r3, r1
 80159ca:	1ad3      	subs	r3, r2, r3
 80159cc:	3301      	adds	r3, #1
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	f300 841e 	bgt.w	8016210 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80159d8:	4b7b      	ldr	r3, [pc, #492]	; (8015bc8 <tcp_receive+0x888>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	429a      	cmp	r2, r3
 80159de:	f040 829a 	bne.w	8015f16 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80159e2:	4b7a      	ldr	r3, [pc, #488]	; (8015bcc <tcp_receive+0x88c>)
 80159e4:	891c      	ldrh	r4, [r3, #8]
 80159e6:	4b79      	ldr	r3, [pc, #484]	; (8015bcc <tcp_receive+0x88c>)
 80159e8:	68db      	ldr	r3, [r3, #12]
 80159ea:	899b      	ldrh	r3, [r3, #12]
 80159ec:	b29b      	uxth	r3, r3
 80159ee:	4618      	mov	r0, r3
 80159f0:	f7fa fb5a 	bl	80100a8 <lwip_htons>
 80159f4:	4603      	mov	r3, r0
 80159f6:	b2db      	uxtb	r3, r3
 80159f8:	f003 0303 	and.w	r3, r3, #3
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d001      	beq.n	8015a04 <tcp_receive+0x6c4>
 8015a00:	2301      	movs	r3, #1
 8015a02:	e000      	b.n	8015a06 <tcp_receive+0x6c6>
 8015a04:	2300      	movs	r3, #0
 8015a06:	4423      	add	r3, r4
 8015a08:	b29a      	uxth	r2, r3
 8015a0a:	4b71      	ldr	r3, [pc, #452]	; (8015bd0 <tcp_receive+0x890>)
 8015a0c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015a12:	4b6f      	ldr	r3, [pc, #444]	; (8015bd0 <tcp_receive+0x890>)
 8015a14:	881b      	ldrh	r3, [r3, #0]
 8015a16:	429a      	cmp	r2, r3
 8015a18:	d275      	bcs.n	8015b06 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015a1a:	4b6c      	ldr	r3, [pc, #432]	; (8015bcc <tcp_receive+0x88c>)
 8015a1c:	68db      	ldr	r3, [r3, #12]
 8015a1e:	899b      	ldrh	r3, [r3, #12]
 8015a20:	b29b      	uxth	r3, r3
 8015a22:	4618      	mov	r0, r3
 8015a24:	f7fa fb40 	bl	80100a8 <lwip_htons>
 8015a28:	4603      	mov	r3, r0
 8015a2a:	b2db      	uxtb	r3, r3
 8015a2c:	f003 0301 	and.w	r3, r3, #1
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d01f      	beq.n	8015a74 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015a34:	4b65      	ldr	r3, [pc, #404]	; (8015bcc <tcp_receive+0x88c>)
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	899b      	ldrh	r3, [r3, #12]
 8015a3a:	b29b      	uxth	r3, r3
 8015a3c:	b21b      	sxth	r3, r3
 8015a3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015a42:	b21c      	sxth	r4, r3
 8015a44:	4b61      	ldr	r3, [pc, #388]	; (8015bcc <tcp_receive+0x88c>)
 8015a46:	68db      	ldr	r3, [r3, #12]
 8015a48:	899b      	ldrh	r3, [r3, #12]
 8015a4a:	b29b      	uxth	r3, r3
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f7fa fb2b 	bl	80100a8 <lwip_htons>
 8015a52:	4603      	mov	r3, r0
 8015a54:	b2db      	uxtb	r3, r3
 8015a56:	b29b      	uxth	r3, r3
 8015a58:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015a5c:	b29b      	uxth	r3, r3
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f7fa fb22 	bl	80100a8 <lwip_htons>
 8015a64:	4603      	mov	r3, r0
 8015a66:	b21b      	sxth	r3, r3
 8015a68:	4323      	orrs	r3, r4
 8015a6a:	b21a      	sxth	r2, r3
 8015a6c:	4b57      	ldr	r3, [pc, #348]	; (8015bcc <tcp_receive+0x88c>)
 8015a6e:	68db      	ldr	r3, [r3, #12]
 8015a70:	b292      	uxth	r2, r2
 8015a72:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015a78:	4b54      	ldr	r3, [pc, #336]	; (8015bcc <tcp_receive+0x88c>)
 8015a7a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015a7c:	4b53      	ldr	r3, [pc, #332]	; (8015bcc <tcp_receive+0x88c>)
 8015a7e:	68db      	ldr	r3, [r3, #12]
 8015a80:	899b      	ldrh	r3, [r3, #12]
 8015a82:	b29b      	uxth	r3, r3
 8015a84:	4618      	mov	r0, r3
 8015a86:	f7fa fb0f 	bl	80100a8 <lwip_htons>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	b2db      	uxtb	r3, r3
 8015a8e:	f003 0302 	and.w	r3, r3, #2
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d005      	beq.n	8015aa2 <tcp_receive+0x762>
            inseg.len -= 1;
 8015a96:	4b4d      	ldr	r3, [pc, #308]	; (8015bcc <tcp_receive+0x88c>)
 8015a98:	891b      	ldrh	r3, [r3, #8]
 8015a9a:	3b01      	subs	r3, #1
 8015a9c:	b29a      	uxth	r2, r3
 8015a9e:	4b4b      	ldr	r3, [pc, #300]	; (8015bcc <tcp_receive+0x88c>)
 8015aa0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015aa2:	4b4a      	ldr	r3, [pc, #296]	; (8015bcc <tcp_receive+0x88c>)
 8015aa4:	685b      	ldr	r3, [r3, #4]
 8015aa6:	4a49      	ldr	r2, [pc, #292]	; (8015bcc <tcp_receive+0x88c>)
 8015aa8:	8912      	ldrh	r2, [r2, #8]
 8015aaa:	4611      	mov	r1, r2
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7fb feef 	bl	8011890 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015ab2:	4b46      	ldr	r3, [pc, #280]	; (8015bcc <tcp_receive+0x88c>)
 8015ab4:	891c      	ldrh	r4, [r3, #8]
 8015ab6:	4b45      	ldr	r3, [pc, #276]	; (8015bcc <tcp_receive+0x88c>)
 8015ab8:	68db      	ldr	r3, [r3, #12]
 8015aba:	899b      	ldrh	r3, [r3, #12]
 8015abc:	b29b      	uxth	r3, r3
 8015abe:	4618      	mov	r0, r3
 8015ac0:	f7fa faf2 	bl	80100a8 <lwip_htons>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	b2db      	uxtb	r3, r3
 8015ac8:	f003 0303 	and.w	r3, r3, #3
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d001      	beq.n	8015ad4 <tcp_receive+0x794>
 8015ad0:	2301      	movs	r3, #1
 8015ad2:	e000      	b.n	8015ad6 <tcp_receive+0x796>
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	4423      	add	r3, r4
 8015ad8:	b29a      	uxth	r2, r3
 8015ada:	4b3d      	ldr	r3, [pc, #244]	; (8015bd0 <tcp_receive+0x890>)
 8015adc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015ade:	4b3c      	ldr	r3, [pc, #240]	; (8015bd0 <tcp_receive+0x890>)
 8015ae0:	881b      	ldrh	r3, [r3, #0]
 8015ae2:	461a      	mov	r2, r3
 8015ae4:	4b38      	ldr	r3, [pc, #224]	; (8015bc8 <tcp_receive+0x888>)
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	441a      	add	r2, r3
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aee:	6879      	ldr	r1, [r7, #4]
 8015af0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015af2:	440b      	add	r3, r1
 8015af4:	429a      	cmp	r2, r3
 8015af6:	d006      	beq.n	8015b06 <tcp_receive+0x7c6>
 8015af8:	4b36      	ldr	r3, [pc, #216]	; (8015bd4 <tcp_receive+0x894>)
 8015afa:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8015afe:	4936      	ldr	r1, [pc, #216]	; (8015bd8 <tcp_receive+0x898>)
 8015b00:	4836      	ldr	r0, [pc, #216]	; (8015bdc <tcp_receive+0x89c>)
 8015b02:	f005 feaf 	bl	801b864 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	f000 80e7 	beq.w	8015cde <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015b10:	4b2e      	ldr	r3, [pc, #184]	; (8015bcc <tcp_receive+0x88c>)
 8015b12:	68db      	ldr	r3, [r3, #12]
 8015b14:	899b      	ldrh	r3, [r3, #12]
 8015b16:	b29b      	uxth	r3, r3
 8015b18:	4618      	mov	r0, r3
 8015b1a:	f7fa fac5 	bl	80100a8 <lwip_htons>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	b2db      	uxtb	r3, r3
 8015b22:	f003 0301 	and.w	r3, r3, #1
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d010      	beq.n	8015b4c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015b2a:	e00a      	b.n	8015b42 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015b30:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015b36:	681a      	ldr	r2, [r3, #0]
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015b3c:	68f8      	ldr	r0, [r7, #12]
 8015b3e:	f7fd fcb0 	bl	80134a2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d1f0      	bne.n	8015b2c <tcp_receive+0x7ec>
 8015b4a:	e0c8      	b.n	8015cde <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015b50:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015b52:	e052      	b.n	8015bfa <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b56:	68db      	ldr	r3, [r3, #12]
 8015b58:	899b      	ldrh	r3, [r3, #12]
 8015b5a:	b29b      	uxth	r3, r3
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	f7fa faa3 	bl	80100a8 <lwip_htons>
 8015b62:	4603      	mov	r3, r0
 8015b64:	b2db      	uxtb	r3, r3
 8015b66:	f003 0301 	and.w	r3, r3, #1
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d03d      	beq.n	8015bea <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015b6e:	4b17      	ldr	r3, [pc, #92]	; (8015bcc <tcp_receive+0x88c>)
 8015b70:	68db      	ldr	r3, [r3, #12]
 8015b72:	899b      	ldrh	r3, [r3, #12]
 8015b74:	b29b      	uxth	r3, r3
 8015b76:	4618      	mov	r0, r3
 8015b78:	f7fa fa96 	bl	80100a8 <lwip_htons>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	b2db      	uxtb	r3, r3
 8015b80:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d130      	bne.n	8015bea <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015b88:	4b10      	ldr	r3, [pc, #64]	; (8015bcc <tcp_receive+0x88c>)
 8015b8a:	68db      	ldr	r3, [r3, #12]
 8015b8c:	899b      	ldrh	r3, [r3, #12]
 8015b8e:	b29c      	uxth	r4, r3
 8015b90:	2001      	movs	r0, #1
 8015b92:	f7fa fa89 	bl	80100a8 <lwip_htons>
 8015b96:	4603      	mov	r3, r0
 8015b98:	461a      	mov	r2, r3
 8015b9a:	4b0c      	ldr	r3, [pc, #48]	; (8015bcc <tcp_receive+0x88c>)
 8015b9c:	68db      	ldr	r3, [r3, #12]
 8015b9e:	4322      	orrs	r2, r4
 8015ba0:	b292      	uxth	r2, r2
 8015ba2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015ba4:	4b09      	ldr	r3, [pc, #36]	; (8015bcc <tcp_receive+0x88c>)
 8015ba6:	891c      	ldrh	r4, [r3, #8]
 8015ba8:	4b08      	ldr	r3, [pc, #32]	; (8015bcc <tcp_receive+0x88c>)
 8015baa:	68db      	ldr	r3, [r3, #12]
 8015bac:	899b      	ldrh	r3, [r3, #12]
 8015bae:	b29b      	uxth	r3, r3
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f7fa fa79 	bl	80100a8 <lwip_htons>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	b2db      	uxtb	r3, r3
 8015bba:	f003 0303 	and.w	r3, r3, #3
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d00e      	beq.n	8015be0 <tcp_receive+0x8a0>
 8015bc2:	2301      	movs	r3, #1
 8015bc4:	e00d      	b.n	8015be2 <tcp_receive+0x8a2>
 8015bc6:	bf00      	nop
 8015bc8:	2405e8c0 	.word	0x2405e8c0
 8015bcc:	2405e8a0 	.word	0x2405e8a0
 8015bd0:	2405e8ca 	.word	0x2405e8ca
 8015bd4:	0801e90c 	.word	0x0801e90c
 8015bd8:	0801ecb4 	.word	0x0801ecb4
 8015bdc:	0801e958 	.word	0x0801e958
 8015be0:	2300      	movs	r3, #0
 8015be2:	4423      	add	r3, r4
 8015be4:	b29a      	uxth	r2, r3
 8015be6:	4b98      	ldr	r3, [pc, #608]	; (8015e48 <tcp_receive+0xb08>)
 8015be8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bec:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8015bf4:	6938      	ldr	r0, [r7, #16]
 8015bf6:	f7fd fc54 	bl	80134a2 <tcp_seg_free>
            while (next &&
 8015bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d00e      	beq.n	8015c1e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015c00:	4b91      	ldr	r3, [pc, #580]	; (8015e48 <tcp_receive+0xb08>)
 8015c02:	881b      	ldrh	r3, [r3, #0]
 8015c04:	461a      	mov	r2, r3
 8015c06:	4b91      	ldr	r3, [pc, #580]	; (8015e4c <tcp_receive+0xb0c>)
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	441a      	add	r2, r3
 8015c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c0e:	68db      	ldr	r3, [r3, #12]
 8015c10:	685b      	ldr	r3, [r3, #4]
 8015c12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015c14:	8909      	ldrh	r1, [r1, #8]
 8015c16:	440b      	add	r3, r1
 8015c18:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	da9a      	bge.n	8015b54 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d059      	beq.n	8015cd8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8015c24:	4b88      	ldr	r3, [pc, #544]	; (8015e48 <tcp_receive+0xb08>)
 8015c26:	881b      	ldrh	r3, [r3, #0]
 8015c28:	461a      	mov	r2, r3
 8015c2a:	4b88      	ldr	r3, [pc, #544]	; (8015e4c <tcp_receive+0xb0c>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	441a      	add	r2, r3
 8015c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c32:	68db      	ldr	r3, [r3, #12]
 8015c34:	685b      	ldr	r3, [r3, #4]
 8015c36:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	dd4d      	ble.n	8015cd8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c3e:	68db      	ldr	r3, [r3, #12]
 8015c40:	685b      	ldr	r3, [r3, #4]
 8015c42:	b29a      	uxth	r2, r3
 8015c44:	4b81      	ldr	r3, [pc, #516]	; (8015e4c <tcp_receive+0xb0c>)
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	b29b      	uxth	r3, r3
 8015c4a:	1ad3      	subs	r3, r2, r3
 8015c4c:	b29a      	uxth	r2, r3
 8015c4e:	4b80      	ldr	r3, [pc, #512]	; (8015e50 <tcp_receive+0xb10>)
 8015c50:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015c52:	4b7f      	ldr	r3, [pc, #508]	; (8015e50 <tcp_receive+0xb10>)
 8015c54:	68db      	ldr	r3, [r3, #12]
 8015c56:	899b      	ldrh	r3, [r3, #12]
 8015c58:	b29b      	uxth	r3, r3
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	f7fa fa24 	bl	80100a8 <lwip_htons>
 8015c60:	4603      	mov	r3, r0
 8015c62:	b2db      	uxtb	r3, r3
 8015c64:	f003 0302 	and.w	r3, r3, #2
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d005      	beq.n	8015c78 <tcp_receive+0x938>
                inseg.len -= 1;
 8015c6c:	4b78      	ldr	r3, [pc, #480]	; (8015e50 <tcp_receive+0xb10>)
 8015c6e:	891b      	ldrh	r3, [r3, #8]
 8015c70:	3b01      	subs	r3, #1
 8015c72:	b29a      	uxth	r2, r3
 8015c74:	4b76      	ldr	r3, [pc, #472]	; (8015e50 <tcp_receive+0xb10>)
 8015c76:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015c78:	4b75      	ldr	r3, [pc, #468]	; (8015e50 <tcp_receive+0xb10>)
 8015c7a:	685b      	ldr	r3, [r3, #4]
 8015c7c:	4a74      	ldr	r2, [pc, #464]	; (8015e50 <tcp_receive+0xb10>)
 8015c7e:	8912      	ldrh	r2, [r2, #8]
 8015c80:	4611      	mov	r1, r2
 8015c82:	4618      	mov	r0, r3
 8015c84:	f7fb fe04 	bl	8011890 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015c88:	4b71      	ldr	r3, [pc, #452]	; (8015e50 <tcp_receive+0xb10>)
 8015c8a:	891c      	ldrh	r4, [r3, #8]
 8015c8c:	4b70      	ldr	r3, [pc, #448]	; (8015e50 <tcp_receive+0xb10>)
 8015c8e:	68db      	ldr	r3, [r3, #12]
 8015c90:	899b      	ldrh	r3, [r3, #12]
 8015c92:	b29b      	uxth	r3, r3
 8015c94:	4618      	mov	r0, r3
 8015c96:	f7fa fa07 	bl	80100a8 <lwip_htons>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	b2db      	uxtb	r3, r3
 8015c9e:	f003 0303 	and.w	r3, r3, #3
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d001      	beq.n	8015caa <tcp_receive+0x96a>
 8015ca6:	2301      	movs	r3, #1
 8015ca8:	e000      	b.n	8015cac <tcp_receive+0x96c>
 8015caa:	2300      	movs	r3, #0
 8015cac:	4423      	add	r3, r4
 8015cae:	b29a      	uxth	r2, r3
 8015cb0:	4b65      	ldr	r3, [pc, #404]	; (8015e48 <tcp_receive+0xb08>)
 8015cb2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015cb4:	4b64      	ldr	r3, [pc, #400]	; (8015e48 <tcp_receive+0xb08>)
 8015cb6:	881b      	ldrh	r3, [r3, #0]
 8015cb8:	461a      	mov	r2, r3
 8015cba:	4b64      	ldr	r3, [pc, #400]	; (8015e4c <tcp_receive+0xb0c>)
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	441a      	add	r2, r3
 8015cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015cc2:	68db      	ldr	r3, [r3, #12]
 8015cc4:	685b      	ldr	r3, [r3, #4]
 8015cc6:	429a      	cmp	r2, r3
 8015cc8:	d006      	beq.n	8015cd8 <tcp_receive+0x998>
 8015cca:	4b62      	ldr	r3, [pc, #392]	; (8015e54 <tcp_receive+0xb14>)
 8015ccc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8015cd0:	4961      	ldr	r1, [pc, #388]	; (8015e58 <tcp_receive+0xb18>)
 8015cd2:	4862      	ldr	r0, [pc, #392]	; (8015e5c <tcp_receive+0xb1c>)
 8015cd4:	f005 fdc6 	bl	801b864 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015cdc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015cde:	4b5a      	ldr	r3, [pc, #360]	; (8015e48 <tcp_receive+0xb08>)
 8015ce0:	881b      	ldrh	r3, [r3, #0]
 8015ce2:	461a      	mov	r2, r3
 8015ce4:	4b59      	ldr	r3, [pc, #356]	; (8015e4c <tcp_receive+0xb0c>)
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	441a      	add	r2, r3
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015cf2:	4b55      	ldr	r3, [pc, #340]	; (8015e48 <tcp_receive+0xb08>)
 8015cf4:	881b      	ldrh	r3, [r3, #0]
 8015cf6:	429a      	cmp	r2, r3
 8015cf8:	d206      	bcs.n	8015d08 <tcp_receive+0x9c8>
 8015cfa:	4b56      	ldr	r3, [pc, #344]	; (8015e54 <tcp_receive+0xb14>)
 8015cfc:	f240 6207 	movw	r2, #1543	; 0x607
 8015d00:	4957      	ldr	r1, [pc, #348]	; (8015e60 <tcp_receive+0xb20>)
 8015d02:	4856      	ldr	r0, [pc, #344]	; (8015e5c <tcp_receive+0xb1c>)
 8015d04:	f005 fdae 	bl	801b864 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015d0c:	4b4e      	ldr	r3, [pc, #312]	; (8015e48 <tcp_receive+0xb08>)
 8015d0e:	881b      	ldrh	r3, [r3, #0]
 8015d10:	1ad3      	subs	r3, r2, r3
 8015d12:	b29a      	uxth	r2, r3
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015d18:	6878      	ldr	r0, [r7, #4]
 8015d1a:	f7fc fe9d 	bl	8012a58 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015d1e:	4b4c      	ldr	r3, [pc, #304]	; (8015e50 <tcp_receive+0xb10>)
 8015d20:	685b      	ldr	r3, [r3, #4]
 8015d22:	891b      	ldrh	r3, [r3, #8]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d006      	beq.n	8015d36 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8015d28:	4b49      	ldr	r3, [pc, #292]	; (8015e50 <tcp_receive+0xb10>)
 8015d2a:	685b      	ldr	r3, [r3, #4]
 8015d2c:	4a4d      	ldr	r2, [pc, #308]	; (8015e64 <tcp_receive+0xb24>)
 8015d2e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015d30:	4b47      	ldr	r3, [pc, #284]	; (8015e50 <tcp_receive+0xb10>)
 8015d32:	2200      	movs	r2, #0
 8015d34:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015d36:	4b46      	ldr	r3, [pc, #280]	; (8015e50 <tcp_receive+0xb10>)
 8015d38:	68db      	ldr	r3, [r3, #12]
 8015d3a:	899b      	ldrh	r3, [r3, #12]
 8015d3c:	b29b      	uxth	r3, r3
 8015d3e:	4618      	mov	r0, r3
 8015d40:	f7fa f9b2 	bl	80100a8 <lwip_htons>
 8015d44:	4603      	mov	r3, r0
 8015d46:	b2db      	uxtb	r3, r3
 8015d48:	f003 0301 	and.w	r3, r3, #1
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	f000 80b8 	beq.w	8015ec2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015d52:	4b45      	ldr	r3, [pc, #276]	; (8015e68 <tcp_receive+0xb28>)
 8015d54:	781b      	ldrb	r3, [r3, #0]
 8015d56:	f043 0320 	orr.w	r3, r3, #32
 8015d5a:	b2da      	uxtb	r2, r3
 8015d5c:	4b42      	ldr	r3, [pc, #264]	; (8015e68 <tcp_receive+0xb28>)
 8015d5e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015d60:	e0af      	b.n	8015ec2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d66:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d6c:	68db      	ldr	r3, [r3, #12]
 8015d6e:	685b      	ldr	r3, [r3, #4]
 8015d70:	4a36      	ldr	r2, [pc, #216]	; (8015e4c <tcp_receive+0xb0c>)
 8015d72:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015d74:	68bb      	ldr	r3, [r7, #8]
 8015d76:	891b      	ldrh	r3, [r3, #8]
 8015d78:	461c      	mov	r4, r3
 8015d7a:	68bb      	ldr	r3, [r7, #8]
 8015d7c:	68db      	ldr	r3, [r3, #12]
 8015d7e:	899b      	ldrh	r3, [r3, #12]
 8015d80:	b29b      	uxth	r3, r3
 8015d82:	4618      	mov	r0, r3
 8015d84:	f7fa f990 	bl	80100a8 <lwip_htons>
 8015d88:	4603      	mov	r3, r0
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	f003 0303 	and.w	r3, r3, #3
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d001      	beq.n	8015d98 <tcp_receive+0xa58>
 8015d94:	2301      	movs	r3, #1
 8015d96:	e000      	b.n	8015d9a <tcp_receive+0xa5a>
 8015d98:	2300      	movs	r3, #0
 8015d9a:	191a      	adds	r2, r3, r4
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015da0:	441a      	add	r2, r3
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015daa:	461c      	mov	r4, r3
 8015dac:	68bb      	ldr	r3, [r7, #8]
 8015dae:	891b      	ldrh	r3, [r3, #8]
 8015db0:	461d      	mov	r5, r3
 8015db2:	68bb      	ldr	r3, [r7, #8]
 8015db4:	68db      	ldr	r3, [r3, #12]
 8015db6:	899b      	ldrh	r3, [r3, #12]
 8015db8:	b29b      	uxth	r3, r3
 8015dba:	4618      	mov	r0, r3
 8015dbc:	f7fa f974 	bl	80100a8 <lwip_htons>
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	b2db      	uxtb	r3, r3
 8015dc4:	f003 0303 	and.w	r3, r3, #3
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d001      	beq.n	8015dd0 <tcp_receive+0xa90>
 8015dcc:	2301      	movs	r3, #1
 8015dce:	e000      	b.n	8015dd2 <tcp_receive+0xa92>
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	442b      	add	r3, r5
 8015dd4:	429c      	cmp	r4, r3
 8015dd6:	d206      	bcs.n	8015de6 <tcp_receive+0xaa6>
 8015dd8:	4b1e      	ldr	r3, [pc, #120]	; (8015e54 <tcp_receive+0xb14>)
 8015dda:	f240 622b 	movw	r2, #1579	; 0x62b
 8015dde:	4923      	ldr	r1, [pc, #140]	; (8015e6c <tcp_receive+0xb2c>)
 8015de0:	481e      	ldr	r0, [pc, #120]	; (8015e5c <tcp_receive+0xb1c>)
 8015de2:	f005 fd3f 	bl	801b864 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015de6:	68bb      	ldr	r3, [r7, #8]
 8015de8:	891b      	ldrh	r3, [r3, #8]
 8015dea:	461c      	mov	r4, r3
 8015dec:	68bb      	ldr	r3, [r7, #8]
 8015dee:	68db      	ldr	r3, [r3, #12]
 8015df0:	899b      	ldrh	r3, [r3, #12]
 8015df2:	b29b      	uxth	r3, r3
 8015df4:	4618      	mov	r0, r3
 8015df6:	f7fa f957 	bl	80100a8 <lwip_htons>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	f003 0303 	and.w	r3, r3, #3
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d001      	beq.n	8015e0a <tcp_receive+0xaca>
 8015e06:	2301      	movs	r3, #1
 8015e08:	e000      	b.n	8015e0c <tcp_receive+0xacc>
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	1919      	adds	r1, r3, r4
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015e12:	b28b      	uxth	r3, r1
 8015e14:	1ad3      	subs	r3, r2, r3
 8015e16:	b29a      	uxth	r2, r3
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f7fc fe1b 	bl	8012a58 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8015e22:	68bb      	ldr	r3, [r7, #8]
 8015e24:	685b      	ldr	r3, [r3, #4]
 8015e26:	891b      	ldrh	r3, [r3, #8]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d028      	beq.n	8015e7e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015e2c:	4b0d      	ldr	r3, [pc, #52]	; (8015e64 <tcp_receive+0xb24>)
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d01d      	beq.n	8015e70 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8015e34:	4b0b      	ldr	r3, [pc, #44]	; (8015e64 <tcp_receive+0xb24>)
 8015e36:	681a      	ldr	r2, [r3, #0]
 8015e38:	68bb      	ldr	r3, [r7, #8]
 8015e3a:	685b      	ldr	r3, [r3, #4]
 8015e3c:	4619      	mov	r1, r3
 8015e3e:	4610      	mov	r0, r2
 8015e40:	f7fb ff7a 	bl	8011d38 <pbuf_cat>
 8015e44:	e018      	b.n	8015e78 <tcp_receive+0xb38>
 8015e46:	bf00      	nop
 8015e48:	2405e8ca 	.word	0x2405e8ca
 8015e4c:	2405e8c0 	.word	0x2405e8c0
 8015e50:	2405e8a0 	.word	0x2405e8a0
 8015e54:	0801e90c 	.word	0x0801e90c
 8015e58:	0801ecec 	.word	0x0801ecec
 8015e5c:	0801e958 	.word	0x0801e958
 8015e60:	0801ed28 	.word	0x0801ed28
 8015e64:	2405e8d0 	.word	0x2405e8d0
 8015e68:	2405e8cd 	.word	0x2405e8cd
 8015e6c:	0801ed48 	.word	0x0801ed48
            } else {
              recv_data = cseg->p;
 8015e70:	68bb      	ldr	r3, [r7, #8]
 8015e72:	685b      	ldr	r3, [r3, #4]
 8015e74:	4a70      	ldr	r2, [pc, #448]	; (8016038 <tcp_receive+0xcf8>)
 8015e76:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015e78:	68bb      	ldr	r3, [r7, #8]
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015e7e:	68bb      	ldr	r3, [r7, #8]
 8015e80:	68db      	ldr	r3, [r3, #12]
 8015e82:	899b      	ldrh	r3, [r3, #12]
 8015e84:	b29b      	uxth	r3, r3
 8015e86:	4618      	mov	r0, r3
 8015e88:	f7fa f90e 	bl	80100a8 <lwip_htons>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	b2db      	uxtb	r3, r3
 8015e90:	f003 0301 	and.w	r3, r3, #1
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d00d      	beq.n	8015eb4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015e98:	4b68      	ldr	r3, [pc, #416]	; (801603c <tcp_receive+0xcfc>)
 8015e9a:	781b      	ldrb	r3, [r3, #0]
 8015e9c:	f043 0320 	orr.w	r3, r3, #32
 8015ea0:	b2da      	uxtb	r2, r3
 8015ea2:	4b66      	ldr	r3, [pc, #408]	; (801603c <tcp_receive+0xcfc>)
 8015ea4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	7d1b      	ldrb	r3, [r3, #20]
 8015eaa:	2b04      	cmp	r3, #4
 8015eac:	d102      	bne.n	8015eb4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	2207      	movs	r2, #7
 8015eb2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015eb4:	68bb      	ldr	r3, [r7, #8]
 8015eb6:	681a      	ldr	r2, [r3, #0]
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8015ebc:	68b8      	ldr	r0, [r7, #8]
 8015ebe:	f7fd faf0 	bl	80134a2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d008      	beq.n	8015edc <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015ece:	68db      	ldr	r3, [r3, #12]
 8015ed0:	685a      	ldr	r2, [r3, #4]
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8015ed6:	429a      	cmp	r2, r3
 8015ed8:	f43f af43 	beq.w	8015d62 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	8b5b      	ldrh	r3, [r3, #26]
 8015ee0:	f003 0301 	and.w	r3, r3, #1
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d00e      	beq.n	8015f06 <tcp_receive+0xbc6>
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	8b5b      	ldrh	r3, [r3, #26]
 8015eec:	f023 0301 	bic.w	r3, r3, #1
 8015ef0:	b29a      	uxth	r2, r3
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	835a      	strh	r2, [r3, #26]
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	8b5b      	ldrh	r3, [r3, #26]
 8015efa:	f043 0302 	orr.w	r3, r3, #2
 8015efe:	b29a      	uxth	r2, r3
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015f04:	e188      	b.n	8016218 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	8b5b      	ldrh	r3, [r3, #26]
 8015f0a:	f043 0301 	orr.w	r3, r3, #1
 8015f0e:	b29a      	uxth	r2, r3
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015f14:	e180      	b.n	8016218 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d106      	bne.n	8015f2c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015f1e:	4848      	ldr	r0, [pc, #288]	; (8016040 <tcp_receive+0xd00>)
 8015f20:	f7fd fad8 	bl	80134d4 <tcp_seg_copy>
 8015f24:	4602      	mov	r2, r0
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	675a      	str	r2, [r3, #116]	; 0x74
 8015f2a:	e16d      	b.n	8016208 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8015f36:	e157      	b.n	80161e8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8015f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f3a:	68db      	ldr	r3, [r3, #12]
 8015f3c:	685a      	ldr	r2, [r3, #4]
 8015f3e:	4b41      	ldr	r3, [pc, #260]	; (8016044 <tcp_receive+0xd04>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	429a      	cmp	r2, r3
 8015f44:	d11d      	bne.n	8015f82 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015f46:	4b3e      	ldr	r3, [pc, #248]	; (8016040 <tcp_receive+0xd00>)
 8015f48:	891a      	ldrh	r2, [r3, #8]
 8015f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f4c:	891b      	ldrh	r3, [r3, #8]
 8015f4e:	429a      	cmp	r2, r3
 8015f50:	f240 814f 	bls.w	80161f2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015f54:	483a      	ldr	r0, [pc, #232]	; (8016040 <tcp_receive+0xd00>)
 8015f56:	f7fd fabd 	bl	80134d4 <tcp_seg_copy>
 8015f5a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015f5c:	697b      	ldr	r3, [r7, #20]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	f000 8149 	beq.w	80161f6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8015f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d003      	beq.n	8015f72 <tcp_receive+0xc32>
                    prev->next = cseg;
 8015f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f6c:	697a      	ldr	r2, [r7, #20]
 8015f6e:	601a      	str	r2, [r3, #0]
 8015f70:	e002      	b.n	8015f78 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	697a      	ldr	r2, [r7, #20]
 8015f76:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015f78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015f7a:	6978      	ldr	r0, [r7, #20]
 8015f7c:	f7ff f8dc 	bl	8015138 <tcp_oos_insert_segment>
                }
                break;
 8015f80:	e139      	b.n	80161f6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8015f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d117      	bne.n	8015fb8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015f88:	4b2e      	ldr	r3, [pc, #184]	; (8016044 <tcp_receive+0xd04>)
 8015f8a:	681a      	ldr	r2, [r3, #0]
 8015f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f8e:	68db      	ldr	r3, [r3, #12]
 8015f90:	685b      	ldr	r3, [r3, #4]
 8015f92:	1ad3      	subs	r3, r2, r3
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	da57      	bge.n	8016048 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015f98:	4829      	ldr	r0, [pc, #164]	; (8016040 <tcp_receive+0xd00>)
 8015f9a:	f7fd fa9b 	bl	80134d4 <tcp_seg_copy>
 8015f9e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015fa0:	69bb      	ldr	r3, [r7, #24]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	f000 8129 	beq.w	80161fa <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	69ba      	ldr	r2, [r7, #24]
 8015fac:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015fae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015fb0:	69b8      	ldr	r0, [r7, #24]
 8015fb2:	f7ff f8c1 	bl	8015138 <tcp_oos_insert_segment>
                  }
                  break;
 8015fb6:	e120      	b.n	80161fa <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015fb8:	4b22      	ldr	r3, [pc, #136]	; (8016044 <tcp_receive+0xd04>)
 8015fba:	681a      	ldr	r2, [r3, #0]
 8015fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fbe:	68db      	ldr	r3, [r3, #12]
 8015fc0:	685b      	ldr	r3, [r3, #4]
 8015fc2:	1ad3      	subs	r3, r2, r3
 8015fc4:	3b01      	subs	r3, #1
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	db3e      	blt.n	8016048 <tcp_receive+0xd08>
 8015fca:	4b1e      	ldr	r3, [pc, #120]	; (8016044 <tcp_receive+0xd04>)
 8015fcc:	681a      	ldr	r2, [r3, #0]
 8015fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fd0:	68db      	ldr	r3, [r3, #12]
 8015fd2:	685b      	ldr	r3, [r3, #4]
 8015fd4:	1ad3      	subs	r3, r2, r3
 8015fd6:	3301      	adds	r3, #1
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	dc35      	bgt.n	8016048 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015fdc:	4818      	ldr	r0, [pc, #96]	; (8016040 <tcp_receive+0xd00>)
 8015fde:	f7fd fa79 	bl	80134d4 <tcp_seg_copy>
 8015fe2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015fe4:	69fb      	ldr	r3, [r7, #28]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	f000 8109 	beq.w	80161fe <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fee:	68db      	ldr	r3, [r3, #12]
 8015ff0:	685b      	ldr	r3, [r3, #4]
 8015ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015ff4:	8912      	ldrh	r2, [r2, #8]
 8015ff6:	441a      	add	r2, r3
 8015ff8:	4b12      	ldr	r3, [pc, #72]	; (8016044 <tcp_receive+0xd04>)
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	1ad3      	subs	r3, r2, r3
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	dd12      	ble.n	8016028 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8016002:	4b10      	ldr	r3, [pc, #64]	; (8016044 <tcp_receive+0xd04>)
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	b29a      	uxth	r2, r3
 8016008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801600a:	68db      	ldr	r3, [r3, #12]
 801600c:	685b      	ldr	r3, [r3, #4]
 801600e:	b29b      	uxth	r3, r3
 8016010:	1ad3      	subs	r3, r2, r3
 8016012:	b29a      	uxth	r2, r3
 8016014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016016:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8016018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801601a:	685a      	ldr	r2, [r3, #4]
 801601c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801601e:	891b      	ldrh	r3, [r3, #8]
 8016020:	4619      	mov	r1, r3
 8016022:	4610      	mov	r0, r2
 8016024:	f7fb fc34 	bl	8011890 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8016028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801602a:	69fa      	ldr	r2, [r7, #28]
 801602c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801602e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016030:	69f8      	ldr	r0, [r7, #28]
 8016032:	f7ff f881 	bl	8015138 <tcp_oos_insert_segment>
                  }
                  break;
 8016036:	e0e2      	b.n	80161fe <tcp_receive+0xebe>
 8016038:	2405e8d0 	.word	0x2405e8d0
 801603c:	2405e8cd 	.word	0x2405e8cd
 8016040:	2405e8a0 	.word	0x2405e8a0
 8016044:	2405e8c0 	.word	0x2405e8c0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8016048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801604a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801604c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	2b00      	cmp	r3, #0
 8016052:	f040 80c6 	bne.w	80161e2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016056:	4b80      	ldr	r3, [pc, #512]	; (8016258 <tcp_receive+0xf18>)
 8016058:	681a      	ldr	r2, [r3, #0]
 801605a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801605c:	68db      	ldr	r3, [r3, #12]
 801605e:	685b      	ldr	r3, [r3, #4]
 8016060:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8016062:	2b00      	cmp	r3, #0
 8016064:	f340 80bd 	ble.w	80161e2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801606a:	68db      	ldr	r3, [r3, #12]
 801606c:	899b      	ldrh	r3, [r3, #12]
 801606e:	b29b      	uxth	r3, r3
 8016070:	4618      	mov	r0, r3
 8016072:	f7fa f819 	bl	80100a8 <lwip_htons>
 8016076:	4603      	mov	r3, r0
 8016078:	b2db      	uxtb	r3, r3
 801607a:	f003 0301 	and.w	r3, r3, #1
 801607e:	2b00      	cmp	r3, #0
 8016080:	f040 80bf 	bne.w	8016202 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8016084:	4875      	ldr	r0, [pc, #468]	; (801625c <tcp_receive+0xf1c>)
 8016086:	f7fd fa25 	bl	80134d4 <tcp_seg_copy>
 801608a:	4602      	mov	r2, r0
 801608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801608e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8016090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	2b00      	cmp	r3, #0
 8016096:	f000 80b6 	beq.w	8016206 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801609c:	68db      	ldr	r3, [r3, #12]
 801609e:	685b      	ldr	r3, [r3, #4]
 80160a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80160a2:	8912      	ldrh	r2, [r2, #8]
 80160a4:	441a      	add	r2, r3
 80160a6:	4b6c      	ldr	r3, [pc, #432]	; (8016258 <tcp_receive+0xf18>)
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	1ad3      	subs	r3, r2, r3
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	dd12      	ble.n	80160d6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80160b0:	4b69      	ldr	r3, [pc, #420]	; (8016258 <tcp_receive+0xf18>)
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	b29a      	uxth	r2, r3
 80160b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160b8:	68db      	ldr	r3, [r3, #12]
 80160ba:	685b      	ldr	r3, [r3, #4]
 80160bc:	b29b      	uxth	r3, r3
 80160be:	1ad3      	subs	r3, r2, r3
 80160c0:	b29a      	uxth	r2, r3
 80160c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160c4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80160c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160c8:	685a      	ldr	r2, [r3, #4]
 80160ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160cc:	891b      	ldrh	r3, [r3, #8]
 80160ce:	4619      	mov	r1, r3
 80160d0:	4610      	mov	r0, r2
 80160d2:	f7fb fbdd 	bl	8011890 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80160d6:	4b62      	ldr	r3, [pc, #392]	; (8016260 <tcp_receive+0xf20>)
 80160d8:	881b      	ldrh	r3, [r3, #0]
 80160da:	461a      	mov	r2, r3
 80160dc:	4b5e      	ldr	r3, [pc, #376]	; (8016258 <tcp_receive+0xf18>)
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	441a      	add	r2, r3
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160e6:	6879      	ldr	r1, [r7, #4]
 80160e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80160ea:	440b      	add	r3, r1
 80160ec:	1ad3      	subs	r3, r2, r3
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	f340 8089 	ble.w	8016206 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80160f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	68db      	ldr	r3, [r3, #12]
 80160fa:	899b      	ldrh	r3, [r3, #12]
 80160fc:	b29b      	uxth	r3, r3
 80160fe:	4618      	mov	r0, r3
 8016100:	f7f9 ffd2 	bl	80100a8 <lwip_htons>
 8016104:	4603      	mov	r3, r0
 8016106:	b2db      	uxtb	r3, r3
 8016108:	f003 0301 	and.w	r3, r3, #1
 801610c:	2b00      	cmp	r3, #0
 801610e:	d022      	beq.n	8016156 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	68db      	ldr	r3, [r3, #12]
 8016116:	899b      	ldrh	r3, [r3, #12]
 8016118:	b29b      	uxth	r3, r3
 801611a:	b21b      	sxth	r3, r3
 801611c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016120:	b21c      	sxth	r4, r3
 8016122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	68db      	ldr	r3, [r3, #12]
 8016128:	899b      	ldrh	r3, [r3, #12]
 801612a:	b29b      	uxth	r3, r3
 801612c:	4618      	mov	r0, r3
 801612e:	f7f9 ffbb 	bl	80100a8 <lwip_htons>
 8016132:	4603      	mov	r3, r0
 8016134:	b2db      	uxtb	r3, r3
 8016136:	b29b      	uxth	r3, r3
 8016138:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801613c:	b29b      	uxth	r3, r3
 801613e:	4618      	mov	r0, r3
 8016140:	f7f9 ffb2 	bl	80100a8 <lwip_htons>
 8016144:	4603      	mov	r3, r0
 8016146:	b21b      	sxth	r3, r3
 8016148:	4323      	orrs	r3, r4
 801614a:	b21a      	sxth	r2, r3
 801614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	68db      	ldr	r3, [r3, #12]
 8016152:	b292      	uxth	r2, r2
 8016154:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801615a:	b29a      	uxth	r2, r3
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016160:	4413      	add	r3, r2
 8016162:	b299      	uxth	r1, r3
 8016164:	4b3c      	ldr	r3, [pc, #240]	; (8016258 <tcp_receive+0xf18>)
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	b29a      	uxth	r2, r3
 801616a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	1a8a      	subs	r2, r1, r2
 8016170:	b292      	uxth	r2, r2
 8016172:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	685a      	ldr	r2, [r3, #4]
 801617a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	891b      	ldrh	r3, [r3, #8]
 8016180:	4619      	mov	r1, r3
 8016182:	4610      	mov	r0, r2
 8016184:	f7fb fb84 	bl	8011890 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	891c      	ldrh	r4, [r3, #8]
 801618e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	68db      	ldr	r3, [r3, #12]
 8016194:	899b      	ldrh	r3, [r3, #12]
 8016196:	b29b      	uxth	r3, r3
 8016198:	4618      	mov	r0, r3
 801619a:	f7f9 ff85 	bl	80100a8 <lwip_htons>
 801619e:	4603      	mov	r3, r0
 80161a0:	b2db      	uxtb	r3, r3
 80161a2:	f003 0303 	and.w	r3, r3, #3
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d001      	beq.n	80161ae <tcp_receive+0xe6e>
 80161aa:	2301      	movs	r3, #1
 80161ac:	e000      	b.n	80161b0 <tcp_receive+0xe70>
 80161ae:	2300      	movs	r3, #0
 80161b0:	4423      	add	r3, r4
 80161b2:	b29a      	uxth	r2, r3
 80161b4:	4b2a      	ldr	r3, [pc, #168]	; (8016260 <tcp_receive+0xf20>)
 80161b6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80161b8:	4b29      	ldr	r3, [pc, #164]	; (8016260 <tcp_receive+0xf20>)
 80161ba:	881b      	ldrh	r3, [r3, #0]
 80161bc:	461a      	mov	r2, r3
 80161be:	4b26      	ldr	r3, [pc, #152]	; (8016258 <tcp_receive+0xf18>)
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	441a      	add	r2, r3
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161c8:	6879      	ldr	r1, [r7, #4]
 80161ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80161cc:	440b      	add	r3, r1
 80161ce:	429a      	cmp	r2, r3
 80161d0:	d019      	beq.n	8016206 <tcp_receive+0xec6>
 80161d2:	4b24      	ldr	r3, [pc, #144]	; (8016264 <tcp_receive+0xf24>)
 80161d4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80161d8:	4923      	ldr	r1, [pc, #140]	; (8016268 <tcp_receive+0xf28>)
 80161da:	4824      	ldr	r0, [pc, #144]	; (801626c <tcp_receive+0xf2c>)
 80161dc:	f005 fb42 	bl	801b864 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80161e0:	e011      	b.n	8016206 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80161e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80161e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	f47f aea4 	bne.w	8015f38 <tcp_receive+0xbf8>
 80161f0:	e00a      	b.n	8016208 <tcp_receive+0xec8>
                break;
 80161f2:	bf00      	nop
 80161f4:	e008      	b.n	8016208 <tcp_receive+0xec8>
                break;
 80161f6:	bf00      	nop
 80161f8:	e006      	b.n	8016208 <tcp_receive+0xec8>
                  break;
 80161fa:	bf00      	nop
 80161fc:	e004      	b.n	8016208 <tcp_receive+0xec8>
                  break;
 80161fe:	bf00      	nop
 8016200:	e002      	b.n	8016208 <tcp_receive+0xec8>
                  break;
 8016202:	bf00      	nop
 8016204:	e000      	b.n	8016208 <tcp_receive+0xec8>
                break;
 8016206:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8016208:	6878      	ldr	r0, [r7, #4]
 801620a:	f001 fead 	bl	8017f68 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801620e:	e003      	b.n	8016218 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8016210:	6878      	ldr	r0, [r7, #4]
 8016212:	f001 fea9 	bl	8017f68 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016216:	e01a      	b.n	801624e <tcp_receive+0xf0e>
 8016218:	e019      	b.n	801624e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801621a:	4b0f      	ldr	r3, [pc, #60]	; (8016258 <tcp_receive+0xf18>)
 801621c:	681a      	ldr	r2, [r3, #0]
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016222:	1ad3      	subs	r3, r2, r3
 8016224:	2b00      	cmp	r3, #0
 8016226:	db0a      	blt.n	801623e <tcp_receive+0xefe>
 8016228:	4b0b      	ldr	r3, [pc, #44]	; (8016258 <tcp_receive+0xf18>)
 801622a:	681a      	ldr	r2, [r3, #0]
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016230:	6879      	ldr	r1, [r7, #4]
 8016232:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016234:	440b      	add	r3, r1
 8016236:	1ad3      	subs	r3, r2, r3
 8016238:	3301      	adds	r3, #1
 801623a:	2b00      	cmp	r3, #0
 801623c:	dd07      	ble.n	801624e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	8b5b      	ldrh	r3, [r3, #26]
 8016242:	f043 0302 	orr.w	r3, r3, #2
 8016246:	b29a      	uxth	r2, r3
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801624c:	e7ff      	b.n	801624e <tcp_receive+0xf0e>
 801624e:	bf00      	nop
 8016250:	3750      	adds	r7, #80	; 0x50
 8016252:	46bd      	mov	sp, r7
 8016254:	bdb0      	pop	{r4, r5, r7, pc}
 8016256:	bf00      	nop
 8016258:	2405e8c0 	.word	0x2405e8c0
 801625c:	2405e8a0 	.word	0x2405e8a0
 8016260:	2405e8ca 	.word	0x2405e8ca
 8016264:	0801e90c 	.word	0x0801e90c
 8016268:	0801ecb4 	.word	0x0801ecb4
 801626c:	0801e958 	.word	0x0801e958

08016270 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8016270:	b480      	push	{r7}
 8016272:	b083      	sub	sp, #12
 8016274:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8016276:	4b15      	ldr	r3, [pc, #84]	; (80162cc <tcp_get_next_optbyte+0x5c>)
 8016278:	881b      	ldrh	r3, [r3, #0]
 801627a:	1c5a      	adds	r2, r3, #1
 801627c:	b291      	uxth	r1, r2
 801627e:	4a13      	ldr	r2, [pc, #76]	; (80162cc <tcp_get_next_optbyte+0x5c>)
 8016280:	8011      	strh	r1, [r2, #0]
 8016282:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016284:	4b12      	ldr	r3, [pc, #72]	; (80162d0 <tcp_get_next_optbyte+0x60>)
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d004      	beq.n	8016296 <tcp_get_next_optbyte+0x26>
 801628c:	4b11      	ldr	r3, [pc, #68]	; (80162d4 <tcp_get_next_optbyte+0x64>)
 801628e:	881b      	ldrh	r3, [r3, #0]
 8016290:	88fa      	ldrh	r2, [r7, #6]
 8016292:	429a      	cmp	r2, r3
 8016294:	d208      	bcs.n	80162a8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8016296:	4b10      	ldr	r3, [pc, #64]	; (80162d8 <tcp_get_next_optbyte+0x68>)
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	3314      	adds	r3, #20
 801629c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801629e:	88fb      	ldrh	r3, [r7, #6]
 80162a0:	683a      	ldr	r2, [r7, #0]
 80162a2:	4413      	add	r3, r2
 80162a4:	781b      	ldrb	r3, [r3, #0]
 80162a6:	e00b      	b.n	80162c0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80162a8:	88fb      	ldrh	r3, [r7, #6]
 80162aa:	b2da      	uxtb	r2, r3
 80162ac:	4b09      	ldr	r3, [pc, #36]	; (80162d4 <tcp_get_next_optbyte+0x64>)
 80162ae:	881b      	ldrh	r3, [r3, #0]
 80162b0:	b2db      	uxtb	r3, r3
 80162b2:	1ad3      	subs	r3, r2, r3
 80162b4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80162b6:	4b06      	ldr	r3, [pc, #24]	; (80162d0 <tcp_get_next_optbyte+0x60>)
 80162b8:	681a      	ldr	r2, [r3, #0]
 80162ba:	797b      	ldrb	r3, [r7, #5]
 80162bc:	4413      	add	r3, r2
 80162be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80162c0:	4618      	mov	r0, r3
 80162c2:	370c      	adds	r7, #12
 80162c4:	46bd      	mov	sp, r7
 80162c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ca:	4770      	bx	lr
 80162cc:	2405e8bc 	.word	0x2405e8bc
 80162d0:	2405e8b8 	.word	0x2405e8b8
 80162d4:	2405e8b6 	.word	0x2405e8b6
 80162d8:	2405e8b0 	.word	0x2405e8b0

080162dc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b084      	sub	sp, #16
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d106      	bne.n	80162f8 <tcp_parseopt+0x1c>
 80162ea:	4b32      	ldr	r3, [pc, #200]	; (80163b4 <tcp_parseopt+0xd8>)
 80162ec:	f240 727d 	movw	r2, #1917	; 0x77d
 80162f0:	4931      	ldr	r1, [pc, #196]	; (80163b8 <tcp_parseopt+0xdc>)
 80162f2:	4832      	ldr	r0, [pc, #200]	; (80163bc <tcp_parseopt+0xe0>)
 80162f4:	f005 fab6 	bl	801b864 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80162f8:	4b31      	ldr	r3, [pc, #196]	; (80163c0 <tcp_parseopt+0xe4>)
 80162fa:	881b      	ldrh	r3, [r3, #0]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d055      	beq.n	80163ac <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016300:	4b30      	ldr	r3, [pc, #192]	; (80163c4 <tcp_parseopt+0xe8>)
 8016302:	2200      	movs	r2, #0
 8016304:	801a      	strh	r2, [r3, #0]
 8016306:	e045      	b.n	8016394 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8016308:	f7ff ffb2 	bl	8016270 <tcp_get_next_optbyte>
 801630c:	4603      	mov	r3, r0
 801630e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8016310:	7bfb      	ldrb	r3, [r7, #15]
 8016312:	2b02      	cmp	r3, #2
 8016314:	d006      	beq.n	8016324 <tcp_parseopt+0x48>
 8016316:	2b02      	cmp	r3, #2
 8016318:	dc2b      	bgt.n	8016372 <tcp_parseopt+0x96>
 801631a:	2b00      	cmp	r3, #0
 801631c:	d041      	beq.n	80163a2 <tcp_parseopt+0xc6>
 801631e:	2b01      	cmp	r3, #1
 8016320:	d127      	bne.n	8016372 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8016322:	e037      	b.n	8016394 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016324:	f7ff ffa4 	bl	8016270 <tcp_get_next_optbyte>
 8016328:	4603      	mov	r3, r0
 801632a:	2b04      	cmp	r3, #4
 801632c:	d13b      	bne.n	80163a6 <tcp_parseopt+0xca>
 801632e:	4b25      	ldr	r3, [pc, #148]	; (80163c4 <tcp_parseopt+0xe8>)
 8016330:	881b      	ldrh	r3, [r3, #0]
 8016332:	3301      	adds	r3, #1
 8016334:	4a22      	ldr	r2, [pc, #136]	; (80163c0 <tcp_parseopt+0xe4>)
 8016336:	8812      	ldrh	r2, [r2, #0]
 8016338:	4293      	cmp	r3, r2
 801633a:	da34      	bge.n	80163a6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801633c:	f7ff ff98 	bl	8016270 <tcp_get_next_optbyte>
 8016340:	4603      	mov	r3, r0
 8016342:	b29b      	uxth	r3, r3
 8016344:	021b      	lsls	r3, r3, #8
 8016346:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016348:	f7ff ff92 	bl	8016270 <tcp_get_next_optbyte>
 801634c:	4603      	mov	r3, r0
 801634e:	b29a      	uxth	r2, r3
 8016350:	89bb      	ldrh	r3, [r7, #12]
 8016352:	4313      	orrs	r3, r2
 8016354:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016356:	89bb      	ldrh	r3, [r7, #12]
 8016358:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801635c:	d804      	bhi.n	8016368 <tcp_parseopt+0x8c>
 801635e:	89bb      	ldrh	r3, [r7, #12]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d001      	beq.n	8016368 <tcp_parseopt+0x8c>
 8016364:	89ba      	ldrh	r2, [r7, #12]
 8016366:	e001      	b.n	801636c <tcp_parseopt+0x90>
 8016368:	f44f 7206 	mov.w	r2, #536	; 0x218
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8016370:	e010      	b.n	8016394 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8016372:	f7ff ff7d 	bl	8016270 <tcp_get_next_optbyte>
 8016376:	4603      	mov	r3, r0
 8016378:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801637a:	7afb      	ldrb	r3, [r7, #11]
 801637c:	2b01      	cmp	r3, #1
 801637e:	d914      	bls.n	80163aa <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8016380:	7afb      	ldrb	r3, [r7, #11]
 8016382:	b29a      	uxth	r2, r3
 8016384:	4b0f      	ldr	r3, [pc, #60]	; (80163c4 <tcp_parseopt+0xe8>)
 8016386:	881b      	ldrh	r3, [r3, #0]
 8016388:	4413      	add	r3, r2
 801638a:	b29b      	uxth	r3, r3
 801638c:	3b02      	subs	r3, #2
 801638e:	b29a      	uxth	r2, r3
 8016390:	4b0c      	ldr	r3, [pc, #48]	; (80163c4 <tcp_parseopt+0xe8>)
 8016392:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016394:	4b0b      	ldr	r3, [pc, #44]	; (80163c4 <tcp_parseopt+0xe8>)
 8016396:	881a      	ldrh	r2, [r3, #0]
 8016398:	4b09      	ldr	r3, [pc, #36]	; (80163c0 <tcp_parseopt+0xe4>)
 801639a:	881b      	ldrh	r3, [r3, #0]
 801639c:	429a      	cmp	r2, r3
 801639e:	d3b3      	bcc.n	8016308 <tcp_parseopt+0x2c>
 80163a0:	e004      	b.n	80163ac <tcp_parseopt+0xd0>
          return;
 80163a2:	bf00      	nop
 80163a4:	e002      	b.n	80163ac <tcp_parseopt+0xd0>
            return;
 80163a6:	bf00      	nop
 80163a8:	e000      	b.n	80163ac <tcp_parseopt+0xd0>
            return;
 80163aa:	bf00      	nop
      }
    }
  }
}
 80163ac:	3710      	adds	r7, #16
 80163ae:	46bd      	mov	sp, r7
 80163b0:	bd80      	pop	{r7, pc}
 80163b2:	bf00      	nop
 80163b4:	0801e90c 	.word	0x0801e90c
 80163b8:	0801ed70 	.word	0x0801ed70
 80163bc:	0801e958 	.word	0x0801e958
 80163c0:	2405e8b4 	.word	0x2405e8b4
 80163c4:	2405e8bc 	.word	0x2405e8bc

080163c8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80163c8:	b480      	push	{r7}
 80163ca:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80163cc:	4b05      	ldr	r3, [pc, #20]	; (80163e4 <tcp_trigger_input_pcb_close+0x1c>)
 80163ce:	781b      	ldrb	r3, [r3, #0]
 80163d0:	f043 0310 	orr.w	r3, r3, #16
 80163d4:	b2da      	uxtb	r2, r3
 80163d6:	4b03      	ldr	r3, [pc, #12]	; (80163e4 <tcp_trigger_input_pcb_close+0x1c>)
 80163d8:	701a      	strb	r2, [r3, #0]
}
 80163da:	bf00      	nop
 80163dc:	46bd      	mov	sp, r7
 80163de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e2:	4770      	bx	lr
 80163e4:	2405e8cd 	.word	0x2405e8cd

080163e8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80163e8:	b580      	push	{r7, lr}
 80163ea:	b084      	sub	sp, #16
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	60f8      	str	r0, [r7, #12]
 80163f0:	60b9      	str	r1, [r7, #8]
 80163f2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d00a      	beq.n	8016410 <tcp_route+0x28>
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	7a1b      	ldrb	r3, [r3, #8]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d006      	beq.n	8016410 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	7a1b      	ldrb	r3, [r3, #8]
 8016406:	4618      	mov	r0, r3
 8016408:	f7fb f836 	bl	8011478 <netif_get_by_index>
 801640c:	4603      	mov	r3, r0
 801640e:	e003      	b.n	8016418 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016410:	6878      	ldr	r0, [r7, #4]
 8016412:	f003 fc93 	bl	8019d3c <ip4_route>
 8016416:	4603      	mov	r3, r0
  }
}
 8016418:	4618      	mov	r0, r3
 801641a:	3710      	adds	r7, #16
 801641c:	46bd      	mov	sp, r7
 801641e:	bd80      	pop	{r7, pc}

08016420 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8016420:	b590      	push	{r4, r7, lr}
 8016422:	b087      	sub	sp, #28
 8016424:	af00      	add	r7, sp, #0
 8016426:	60f8      	str	r0, [r7, #12]
 8016428:	60b9      	str	r1, [r7, #8]
 801642a:	603b      	str	r3, [r7, #0]
 801642c:	4613      	mov	r3, r2
 801642e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d105      	bne.n	8016442 <tcp_create_segment+0x22>
 8016436:	4b44      	ldr	r3, [pc, #272]	; (8016548 <tcp_create_segment+0x128>)
 8016438:	22a3      	movs	r2, #163	; 0xa3
 801643a:	4944      	ldr	r1, [pc, #272]	; (801654c <tcp_create_segment+0x12c>)
 801643c:	4844      	ldr	r0, [pc, #272]	; (8016550 <tcp_create_segment+0x130>)
 801643e:	f005 fa11 	bl	801b864 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8016442:	68bb      	ldr	r3, [r7, #8]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d105      	bne.n	8016454 <tcp_create_segment+0x34>
 8016448:	4b3f      	ldr	r3, [pc, #252]	; (8016548 <tcp_create_segment+0x128>)
 801644a:	22a4      	movs	r2, #164	; 0xa4
 801644c:	4941      	ldr	r1, [pc, #260]	; (8016554 <tcp_create_segment+0x134>)
 801644e:	4840      	ldr	r0, [pc, #256]	; (8016550 <tcp_create_segment+0x130>)
 8016450:	f005 fa08 	bl	801b864 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016454:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016458:	009b      	lsls	r3, r3, #2
 801645a:	b2db      	uxtb	r3, r3
 801645c:	f003 0304 	and.w	r3, r3, #4
 8016460:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8016462:	2003      	movs	r0, #3
 8016464:	f7fa fc7c 	bl	8010d60 <memp_malloc>
 8016468:	6138      	str	r0, [r7, #16]
 801646a:	693b      	ldr	r3, [r7, #16]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d104      	bne.n	801647a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016470:	68b8      	ldr	r0, [r7, #8]
 8016472:	f7fb fb93 	bl	8011b9c <pbuf_free>
    return NULL;
 8016476:	2300      	movs	r3, #0
 8016478:	e061      	b.n	801653e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801647a:	693b      	ldr	r3, [r7, #16]
 801647c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016480:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8016482:	693b      	ldr	r3, [r7, #16]
 8016484:	2200      	movs	r2, #0
 8016486:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016488:	693b      	ldr	r3, [r7, #16]
 801648a:	68ba      	ldr	r2, [r7, #8]
 801648c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801648e:	68bb      	ldr	r3, [r7, #8]
 8016490:	891a      	ldrh	r2, [r3, #8]
 8016492:	7dfb      	ldrb	r3, [r7, #23]
 8016494:	b29b      	uxth	r3, r3
 8016496:	429a      	cmp	r2, r3
 8016498:	d205      	bcs.n	80164a6 <tcp_create_segment+0x86>
 801649a:	4b2b      	ldr	r3, [pc, #172]	; (8016548 <tcp_create_segment+0x128>)
 801649c:	22b0      	movs	r2, #176	; 0xb0
 801649e:	492e      	ldr	r1, [pc, #184]	; (8016558 <tcp_create_segment+0x138>)
 80164a0:	482b      	ldr	r0, [pc, #172]	; (8016550 <tcp_create_segment+0x130>)
 80164a2:	f005 f9df 	bl	801b864 <iprintf>
  seg->len = p->tot_len - optlen;
 80164a6:	68bb      	ldr	r3, [r7, #8]
 80164a8:	891a      	ldrh	r2, [r3, #8]
 80164aa:	7dfb      	ldrb	r3, [r7, #23]
 80164ac:	b29b      	uxth	r3, r3
 80164ae:	1ad3      	subs	r3, r2, r3
 80164b0:	b29a      	uxth	r2, r3
 80164b2:	693b      	ldr	r3, [r7, #16]
 80164b4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80164b6:	2114      	movs	r1, #20
 80164b8:	68b8      	ldr	r0, [r7, #8]
 80164ba:	f7fb fad9 	bl	8011a70 <pbuf_add_header>
 80164be:	4603      	mov	r3, r0
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d004      	beq.n	80164ce <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80164c4:	6938      	ldr	r0, [r7, #16]
 80164c6:	f7fc ffec 	bl	80134a2 <tcp_seg_free>
    return NULL;
 80164ca:	2300      	movs	r3, #0
 80164cc:	e037      	b.n	801653e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80164ce:	693b      	ldr	r3, [r7, #16]
 80164d0:	685b      	ldr	r3, [r3, #4]
 80164d2:	685a      	ldr	r2, [r3, #4]
 80164d4:	693b      	ldr	r3, [r7, #16]
 80164d6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	8ada      	ldrh	r2, [r3, #22]
 80164dc:	693b      	ldr	r3, [r7, #16]
 80164de:	68dc      	ldr	r4, [r3, #12]
 80164e0:	4610      	mov	r0, r2
 80164e2:	f7f9 fde1 	bl	80100a8 <lwip_htons>
 80164e6:	4603      	mov	r3, r0
 80164e8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	8b1a      	ldrh	r2, [r3, #24]
 80164ee:	693b      	ldr	r3, [r7, #16]
 80164f0:	68dc      	ldr	r4, [r3, #12]
 80164f2:	4610      	mov	r0, r2
 80164f4:	f7f9 fdd8 	bl	80100a8 <lwip_htons>
 80164f8:	4603      	mov	r3, r0
 80164fa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80164fc:	693b      	ldr	r3, [r7, #16]
 80164fe:	68dc      	ldr	r4, [r3, #12]
 8016500:	6838      	ldr	r0, [r7, #0]
 8016502:	f7f9 fde6 	bl	80100d2 <lwip_htonl>
 8016506:	4603      	mov	r3, r0
 8016508:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801650a:	7dfb      	ldrb	r3, [r7, #23]
 801650c:	089b      	lsrs	r3, r3, #2
 801650e:	b2db      	uxtb	r3, r3
 8016510:	b29b      	uxth	r3, r3
 8016512:	3305      	adds	r3, #5
 8016514:	b29b      	uxth	r3, r3
 8016516:	031b      	lsls	r3, r3, #12
 8016518:	b29a      	uxth	r2, r3
 801651a:	79fb      	ldrb	r3, [r7, #7]
 801651c:	b29b      	uxth	r3, r3
 801651e:	4313      	orrs	r3, r2
 8016520:	b29a      	uxth	r2, r3
 8016522:	693b      	ldr	r3, [r7, #16]
 8016524:	68dc      	ldr	r4, [r3, #12]
 8016526:	4610      	mov	r0, r2
 8016528:	f7f9 fdbe 	bl	80100a8 <lwip_htons>
 801652c:	4603      	mov	r3, r0
 801652e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8016530:	693b      	ldr	r3, [r7, #16]
 8016532:	68db      	ldr	r3, [r3, #12]
 8016534:	2200      	movs	r2, #0
 8016536:	749a      	strb	r2, [r3, #18]
 8016538:	2200      	movs	r2, #0
 801653a:	74da      	strb	r2, [r3, #19]
  return seg;
 801653c:	693b      	ldr	r3, [r7, #16]
}
 801653e:	4618      	mov	r0, r3
 8016540:	371c      	adds	r7, #28
 8016542:	46bd      	mov	sp, r7
 8016544:	bd90      	pop	{r4, r7, pc}
 8016546:	bf00      	nop
 8016548:	0801ed8c 	.word	0x0801ed8c
 801654c:	0801edc0 	.word	0x0801edc0
 8016550:	0801ede0 	.word	0x0801ede0
 8016554:	0801ee08 	.word	0x0801ee08
 8016558:	0801ee2c 	.word	0x0801ee2c

0801655c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b086      	sub	sp, #24
 8016560:	af00      	add	r7, sp, #0
 8016562:	607b      	str	r3, [r7, #4]
 8016564:	4603      	mov	r3, r0
 8016566:	73fb      	strb	r3, [r7, #15]
 8016568:	460b      	mov	r3, r1
 801656a:	81bb      	strh	r3, [r7, #12]
 801656c:	4613      	mov	r3, r2
 801656e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8016570:	89bb      	ldrh	r3, [r7, #12]
 8016572:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d105      	bne.n	8016586 <tcp_pbuf_prealloc+0x2a>
 801657a:	4b30      	ldr	r3, [pc, #192]	; (801663c <tcp_pbuf_prealloc+0xe0>)
 801657c:	22e8      	movs	r2, #232	; 0xe8
 801657e:	4930      	ldr	r1, [pc, #192]	; (8016640 <tcp_pbuf_prealloc+0xe4>)
 8016580:	4830      	ldr	r0, [pc, #192]	; (8016644 <tcp_pbuf_prealloc+0xe8>)
 8016582:	f005 f96f 	bl	801b864 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8016586:	6a3b      	ldr	r3, [r7, #32]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d105      	bne.n	8016598 <tcp_pbuf_prealloc+0x3c>
 801658c:	4b2b      	ldr	r3, [pc, #172]	; (801663c <tcp_pbuf_prealloc+0xe0>)
 801658e:	22e9      	movs	r2, #233	; 0xe9
 8016590:	492d      	ldr	r1, [pc, #180]	; (8016648 <tcp_pbuf_prealloc+0xec>)
 8016592:	482c      	ldr	r0, [pc, #176]	; (8016644 <tcp_pbuf_prealloc+0xe8>)
 8016594:	f005 f966 	bl	801b864 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8016598:	89ba      	ldrh	r2, [r7, #12]
 801659a:	897b      	ldrh	r3, [r7, #10]
 801659c:	429a      	cmp	r2, r3
 801659e:	d221      	bcs.n	80165e4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80165a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80165a4:	f003 0302 	and.w	r3, r3, #2
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d111      	bne.n	80165d0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80165ac:	6a3b      	ldr	r3, [r7, #32]
 80165ae:	8b5b      	ldrh	r3, [r3, #26]
 80165b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d115      	bne.n	80165e4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80165b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d007      	beq.n	80165d0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80165c0:	6a3b      	ldr	r3, [r7, #32]
 80165c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d103      	bne.n	80165d0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80165c8:	6a3b      	ldr	r3, [r7, #32]
 80165ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d009      	beq.n	80165e4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80165d0:	89bb      	ldrh	r3, [r7, #12]
 80165d2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80165d6:	f023 0203 	bic.w	r2, r3, #3
 80165da:	897b      	ldrh	r3, [r7, #10]
 80165dc:	4293      	cmp	r3, r2
 80165de:	bf28      	it	cs
 80165e0:	4613      	movcs	r3, r2
 80165e2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80165e4:	8af9      	ldrh	r1, [r7, #22]
 80165e6:	7bfb      	ldrb	r3, [r7, #15]
 80165e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80165ec:	4618      	mov	r0, r3
 80165ee:	f7fa ffed 	bl	80115cc <pbuf_alloc>
 80165f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80165f4:	693b      	ldr	r3, [r7, #16]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d101      	bne.n	80165fe <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80165fa:	2300      	movs	r3, #0
 80165fc:	e019      	b.n	8016632 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80165fe:	693b      	ldr	r3, [r7, #16]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d006      	beq.n	8016614 <tcp_pbuf_prealloc+0xb8>
 8016606:	4b0d      	ldr	r3, [pc, #52]	; (801663c <tcp_pbuf_prealloc+0xe0>)
 8016608:	f240 120b 	movw	r2, #267	; 0x10b
 801660c:	490f      	ldr	r1, [pc, #60]	; (801664c <tcp_pbuf_prealloc+0xf0>)
 801660e:	480d      	ldr	r0, [pc, #52]	; (8016644 <tcp_pbuf_prealloc+0xe8>)
 8016610:	f005 f928 	bl	801b864 <iprintf>
  *oversize = p->len - length;
 8016614:	693b      	ldr	r3, [r7, #16]
 8016616:	895a      	ldrh	r2, [r3, #10]
 8016618:	89bb      	ldrh	r3, [r7, #12]
 801661a:	1ad3      	subs	r3, r2, r3
 801661c:	b29a      	uxth	r2, r3
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8016622:	693b      	ldr	r3, [r7, #16]
 8016624:	89ba      	ldrh	r2, [r7, #12]
 8016626:	811a      	strh	r2, [r3, #8]
 8016628:	693b      	ldr	r3, [r7, #16]
 801662a:	891a      	ldrh	r2, [r3, #8]
 801662c:	693b      	ldr	r3, [r7, #16]
 801662e:	815a      	strh	r2, [r3, #10]
  return p;
 8016630:	693b      	ldr	r3, [r7, #16]
}
 8016632:	4618      	mov	r0, r3
 8016634:	3718      	adds	r7, #24
 8016636:	46bd      	mov	sp, r7
 8016638:	bd80      	pop	{r7, pc}
 801663a:	bf00      	nop
 801663c:	0801ed8c 	.word	0x0801ed8c
 8016640:	0801ee44 	.word	0x0801ee44
 8016644:	0801ede0 	.word	0x0801ede0
 8016648:	0801ee68 	.word	0x0801ee68
 801664c:	0801ee88 	.word	0x0801ee88

08016650 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b082      	sub	sp, #8
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
 8016658:	460b      	mov	r3, r1
 801665a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d106      	bne.n	8016670 <tcp_write_checks+0x20>
 8016662:	4b33      	ldr	r3, [pc, #204]	; (8016730 <tcp_write_checks+0xe0>)
 8016664:	f240 1233 	movw	r2, #307	; 0x133
 8016668:	4932      	ldr	r1, [pc, #200]	; (8016734 <tcp_write_checks+0xe4>)
 801666a:	4833      	ldr	r0, [pc, #204]	; (8016738 <tcp_write_checks+0xe8>)
 801666c:	f005 f8fa 	bl	801b864 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	7d1b      	ldrb	r3, [r3, #20]
 8016674:	2b04      	cmp	r3, #4
 8016676:	d00e      	beq.n	8016696 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801667c:	2b07      	cmp	r3, #7
 801667e:	d00a      	beq.n	8016696 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8016684:	2b02      	cmp	r3, #2
 8016686:	d006      	beq.n	8016696 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801668c:	2b03      	cmp	r3, #3
 801668e:	d002      	beq.n	8016696 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8016690:	f06f 030a 	mvn.w	r3, #10
 8016694:	e048      	b.n	8016728 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8016696:	887b      	ldrh	r3, [r7, #2]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d101      	bne.n	80166a0 <tcp_write_checks+0x50>
    return ERR_OK;
 801669c:	2300      	movs	r3, #0
 801669e:	e043      	b.n	8016728 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80166a6:	887a      	ldrh	r2, [r7, #2]
 80166a8:	429a      	cmp	r2, r3
 80166aa:	d909      	bls.n	80166c0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	8b5b      	ldrh	r3, [r3, #26]
 80166b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80166b4:	b29a      	uxth	r2, r3
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80166ba:	f04f 33ff 	mov.w	r3, #4294967295
 80166be:	e033      	b.n	8016728 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80166c6:	2b08      	cmp	r3, #8
 80166c8:	d909      	bls.n	80166de <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	8b5b      	ldrh	r3, [r3, #26]
 80166ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80166d2:	b29a      	uxth	r2, r3
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80166d8:	f04f 33ff 	mov.w	r3, #4294967295
 80166dc:	e024      	b.n	8016728 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d00f      	beq.n	8016708 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d11a      	bne.n	8016726 <tcp_write_checks+0xd6>
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d116      	bne.n	8016726 <tcp_write_checks+0xd6>
 80166f8:	4b0d      	ldr	r3, [pc, #52]	; (8016730 <tcp_write_checks+0xe0>)
 80166fa:	f240 1255 	movw	r2, #341	; 0x155
 80166fe:	490f      	ldr	r1, [pc, #60]	; (801673c <tcp_write_checks+0xec>)
 8016700:	480d      	ldr	r0, [pc, #52]	; (8016738 <tcp_write_checks+0xe8>)
 8016702:	f005 f8af 	bl	801b864 <iprintf>
 8016706:	e00e      	b.n	8016726 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801670c:	2b00      	cmp	r3, #0
 801670e:	d103      	bne.n	8016718 <tcp_write_checks+0xc8>
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016714:	2b00      	cmp	r3, #0
 8016716:	d006      	beq.n	8016726 <tcp_write_checks+0xd6>
 8016718:	4b05      	ldr	r3, [pc, #20]	; (8016730 <tcp_write_checks+0xe0>)
 801671a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801671e:	4908      	ldr	r1, [pc, #32]	; (8016740 <tcp_write_checks+0xf0>)
 8016720:	4805      	ldr	r0, [pc, #20]	; (8016738 <tcp_write_checks+0xe8>)
 8016722:	f005 f89f 	bl	801b864 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8016726:	2300      	movs	r3, #0
}
 8016728:	4618      	mov	r0, r3
 801672a:	3708      	adds	r7, #8
 801672c:	46bd      	mov	sp, r7
 801672e:	bd80      	pop	{r7, pc}
 8016730:	0801ed8c 	.word	0x0801ed8c
 8016734:	0801ee9c 	.word	0x0801ee9c
 8016738:	0801ede0 	.word	0x0801ede0
 801673c:	0801eebc 	.word	0x0801eebc
 8016740:	0801eef8 	.word	0x0801eef8

08016744 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8016744:	b590      	push	{r4, r7, lr}
 8016746:	b09b      	sub	sp, #108	; 0x6c
 8016748:	af04      	add	r7, sp, #16
 801674a:	60f8      	str	r0, [r7, #12]
 801674c:	60b9      	str	r1, [r7, #8]
 801674e:	4611      	mov	r1, r2
 8016750:	461a      	mov	r2, r3
 8016752:	460b      	mov	r3, r1
 8016754:	80fb      	strh	r3, [r7, #6]
 8016756:	4613      	mov	r3, r2
 8016758:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801675a:	2300      	movs	r3, #0
 801675c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801675e:	2300      	movs	r3, #0
 8016760:	653b      	str	r3, [r7, #80]	; 0x50
 8016762:	2300      	movs	r3, #0
 8016764:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016766:	2300      	movs	r3, #0
 8016768:	64bb      	str	r3, [r7, #72]	; 0x48
 801676a:	2300      	movs	r3, #0
 801676c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801676e:	2300      	movs	r3, #0
 8016770:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8016774:	2300      	movs	r3, #0
 8016776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801677a:	2300      	movs	r3, #0
 801677c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801677e:	2300      	movs	r3, #0
 8016780:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8016782:	2300      	movs	r3, #0
 8016784:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d109      	bne.n	80167a0 <tcp_write+0x5c>
 801678c:	4ba4      	ldr	r3, [pc, #656]	; (8016a20 <tcp_write+0x2dc>)
 801678e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8016792:	49a4      	ldr	r1, [pc, #656]	; (8016a24 <tcp_write+0x2e0>)
 8016794:	48a4      	ldr	r0, [pc, #656]	; (8016a28 <tcp_write+0x2e4>)
 8016796:	f005 f865 	bl	801b864 <iprintf>
 801679a:	f06f 030f 	mvn.w	r3, #15
 801679e:	e32a      	b.n	8016df6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80167a6:	085b      	lsrs	r3, r3, #1
 80167a8:	b29a      	uxth	r2, r3
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80167ae:	4293      	cmp	r3, r2
 80167b0:	bf28      	it	cs
 80167b2:	4613      	movcs	r3, r2
 80167b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80167b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d102      	bne.n	80167c2 <tcp_write+0x7e>
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80167c0:	e000      	b.n	80167c4 <tcp_write+0x80>
 80167c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167c4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80167c6:	68bb      	ldr	r3, [r7, #8]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d109      	bne.n	80167e0 <tcp_write+0x9c>
 80167cc:	4b94      	ldr	r3, [pc, #592]	; (8016a20 <tcp_write+0x2dc>)
 80167ce:	f240 12ad 	movw	r2, #429	; 0x1ad
 80167d2:	4996      	ldr	r1, [pc, #600]	; (8016a2c <tcp_write+0x2e8>)
 80167d4:	4894      	ldr	r0, [pc, #592]	; (8016a28 <tcp_write+0x2e4>)
 80167d6:	f005 f845 	bl	801b864 <iprintf>
 80167da:	f06f 030f 	mvn.w	r3, #15
 80167de:	e30a      	b.n	8016df6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80167e0:	88fb      	ldrh	r3, [r7, #6]
 80167e2:	4619      	mov	r1, r3
 80167e4:	68f8      	ldr	r0, [r7, #12]
 80167e6:	f7ff ff33 	bl	8016650 <tcp_write_checks>
 80167ea:	4603      	mov	r3, r0
 80167ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80167f0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d002      	beq.n	80167fe <tcp_write+0xba>
    return err;
 80167f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80167fc:	e2fb      	b.n	8016df6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016804:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016808:	2300      	movs	r3, #0
 801680a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016812:	2b00      	cmp	r3, #0
 8016814:	f000 80f6 	beq.w	8016a04 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801681c:	653b      	str	r3, [r7, #80]	; 0x50
 801681e:	e002      	b.n	8016826 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8016820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d1f8      	bne.n	8016820 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801682e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016830:	7a9b      	ldrb	r3, [r3, #10]
 8016832:	009b      	lsls	r3, r3, #2
 8016834:	b29b      	uxth	r3, r3
 8016836:	f003 0304 	and.w	r3, r3, #4
 801683a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801683c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801683e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016840:	891b      	ldrh	r3, [r3, #8]
 8016842:	4619      	mov	r1, r3
 8016844:	8c3b      	ldrh	r3, [r7, #32]
 8016846:	440b      	add	r3, r1
 8016848:	429a      	cmp	r2, r3
 801684a:	da06      	bge.n	801685a <tcp_write+0x116>
 801684c:	4b74      	ldr	r3, [pc, #464]	; (8016a20 <tcp_write+0x2dc>)
 801684e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016852:	4977      	ldr	r1, [pc, #476]	; (8016a30 <tcp_write+0x2ec>)
 8016854:	4874      	ldr	r0, [pc, #464]	; (8016a28 <tcp_write+0x2e4>)
 8016856:	f005 f805 	bl	801b864 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801685a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801685c:	891a      	ldrh	r2, [r3, #8]
 801685e:	8c3b      	ldrh	r3, [r7, #32]
 8016860:	4413      	add	r3, r2
 8016862:	b29b      	uxth	r3, r3
 8016864:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016866:	1ad3      	subs	r3, r2, r3
 8016868:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016870:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8016872:	8a7b      	ldrh	r3, [r7, #18]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d026      	beq.n	80168c6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016878:	8a7b      	ldrh	r3, [r7, #18]
 801687a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801687c:	429a      	cmp	r2, r3
 801687e:	d206      	bcs.n	801688e <tcp_write+0x14a>
 8016880:	4b67      	ldr	r3, [pc, #412]	; (8016a20 <tcp_write+0x2dc>)
 8016882:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8016886:	496b      	ldr	r1, [pc, #428]	; (8016a34 <tcp_write+0x2f0>)
 8016888:	4867      	ldr	r0, [pc, #412]	; (8016a28 <tcp_write+0x2e4>)
 801688a:	f004 ffeb 	bl	801b864 <iprintf>
      seg = last_unsent;
 801688e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016890:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8016892:	8a7b      	ldrh	r3, [r7, #18]
 8016894:	88fa      	ldrh	r2, [r7, #6]
 8016896:	4293      	cmp	r3, r2
 8016898:	bf28      	it	cs
 801689a:	4613      	movcs	r3, r2
 801689c:	b29b      	uxth	r3, r3
 801689e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80168a0:	4293      	cmp	r3, r2
 80168a2:	bf28      	it	cs
 80168a4:	4613      	movcs	r3, r2
 80168a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80168a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80168ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80168ae:	4413      	add	r3, r2
 80168b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80168b4:	8a7a      	ldrh	r2, [r7, #18]
 80168b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80168b8:	1ad3      	subs	r3, r2, r3
 80168ba:	b29b      	uxth	r3, r3
 80168bc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80168be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80168c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80168c2:	1ad3      	subs	r3, r2, r3
 80168c4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80168c6:	8a7b      	ldrh	r3, [r7, #18]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d00b      	beq.n	80168e4 <tcp_write+0x1a0>
 80168cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80168d0:	88fb      	ldrh	r3, [r7, #6]
 80168d2:	429a      	cmp	r2, r3
 80168d4:	d006      	beq.n	80168e4 <tcp_write+0x1a0>
 80168d6:	4b52      	ldr	r3, [pc, #328]	; (8016a20 <tcp_write+0x2dc>)
 80168d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80168dc:	4956      	ldr	r1, [pc, #344]	; (8016a38 <tcp_write+0x2f4>)
 80168de:	4852      	ldr	r0, [pc, #328]	; (8016a28 <tcp_write+0x2e4>)
 80168e0:	f004 ffc0 	bl	801b864 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80168e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80168e8:	88fb      	ldrh	r3, [r7, #6]
 80168ea:	429a      	cmp	r2, r3
 80168ec:	f080 8167 	bcs.w	8016bbe <tcp_write+0x47a>
 80168f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	f000 8163 	beq.w	8016bbe <tcp_write+0x47a>
 80168f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80168fa:	891b      	ldrh	r3, [r3, #8]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	f000 815e 	beq.w	8016bbe <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8016902:	88fa      	ldrh	r2, [r7, #6]
 8016904:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016908:	1ad2      	subs	r2, r2, r3
 801690a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801690c:	4293      	cmp	r3, r2
 801690e:	bfa8      	it	ge
 8016910:	4613      	movge	r3, r2
 8016912:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016916:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016918:	797b      	ldrb	r3, [r7, #5]
 801691a:	f003 0301 	and.w	r3, r3, #1
 801691e:	2b00      	cmp	r3, #0
 8016920:	d027      	beq.n	8016972 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8016922:	f107 0012 	add.w	r0, r7, #18
 8016926:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016928:	8bf9      	ldrh	r1, [r7, #30]
 801692a:	2301      	movs	r3, #1
 801692c:	9302      	str	r3, [sp, #8]
 801692e:	797b      	ldrb	r3, [r7, #5]
 8016930:	9301      	str	r3, [sp, #4]
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	9300      	str	r3, [sp, #0]
 8016936:	4603      	mov	r3, r0
 8016938:	2000      	movs	r0, #0
 801693a:	f7ff fe0f 	bl	801655c <tcp_pbuf_prealloc>
 801693e:	6578      	str	r0, [r7, #84]	; 0x54
 8016940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016942:	2b00      	cmp	r3, #0
 8016944:	f000 8225 	beq.w	8016d92 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801694a:	6858      	ldr	r0, [r3, #4]
 801694c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016950:	68ba      	ldr	r2, [r7, #8]
 8016952:	4413      	add	r3, r2
 8016954:	8bfa      	ldrh	r2, [r7, #30]
 8016956:	4619      	mov	r1, r3
 8016958:	f004 febf 	bl	801b6da <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801695c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801695e:	f7fb f9ab 	bl	8011cb8 <pbuf_clen>
 8016962:	4603      	mov	r3, r0
 8016964:	461a      	mov	r2, r3
 8016966:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801696a:	4413      	add	r3, r2
 801696c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8016970:	e041      	b.n	80169f6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8016972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016974:	685b      	ldr	r3, [r3, #4]
 8016976:	637b      	str	r3, [r7, #52]	; 0x34
 8016978:	e002      	b.n	8016980 <tcp_write+0x23c>
 801697a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	637b      	str	r3, [r7, #52]	; 0x34
 8016980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d1f8      	bne.n	801697a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801698a:	7b1b      	ldrb	r3, [r3, #12]
 801698c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8016990:	2b00      	cmp	r3, #0
 8016992:	d115      	bne.n	80169c0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016996:	685b      	ldr	r3, [r3, #4]
 8016998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801699a:	8952      	ldrh	r2, [r2, #10]
 801699c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801699e:	68ba      	ldr	r2, [r7, #8]
 80169a0:	429a      	cmp	r2, r3
 80169a2:	d10d      	bne.n	80169c0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80169a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d006      	beq.n	80169ba <tcp_write+0x276>
 80169ac:	4b1c      	ldr	r3, [pc, #112]	; (8016a20 <tcp_write+0x2dc>)
 80169ae:	f240 2231 	movw	r2, #561	; 0x231
 80169b2:	4922      	ldr	r1, [pc, #136]	; (8016a3c <tcp_write+0x2f8>)
 80169b4:	481c      	ldr	r0, [pc, #112]	; (8016a28 <tcp_write+0x2e4>)
 80169b6:	f004 ff55 	bl	801b864 <iprintf>
          extendlen = seglen;
 80169ba:	8bfb      	ldrh	r3, [r7, #30]
 80169bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80169be:	e01a      	b.n	80169f6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80169c0:	8bfb      	ldrh	r3, [r7, #30]
 80169c2:	2201      	movs	r2, #1
 80169c4:	4619      	mov	r1, r3
 80169c6:	2000      	movs	r0, #0
 80169c8:	f7fa fe00 	bl	80115cc <pbuf_alloc>
 80169cc:	6578      	str	r0, [r7, #84]	; 0x54
 80169ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	f000 81e0 	beq.w	8016d96 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80169d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80169da:	68ba      	ldr	r2, [r7, #8]
 80169dc:	441a      	add	r2, r3
 80169de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80169e0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80169e2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80169e4:	f7fb f968 	bl	8011cb8 <pbuf_clen>
 80169e8:	4603      	mov	r3, r0
 80169ea:	461a      	mov	r2, r3
 80169ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80169f0:	4413      	add	r3, r2
 80169f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80169f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80169fa:	8bfb      	ldrh	r3, [r7, #30]
 80169fc:	4413      	add	r3, r2
 80169fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8016a02:	e0dc      	b.n	8016bbe <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	f000 80d7 	beq.w	8016bbe <tcp_write+0x47a>
 8016a10:	4b03      	ldr	r3, [pc, #12]	; (8016a20 <tcp_write+0x2dc>)
 8016a12:	f240 224a 	movw	r2, #586	; 0x24a
 8016a16:	490a      	ldr	r1, [pc, #40]	; (8016a40 <tcp_write+0x2fc>)
 8016a18:	4803      	ldr	r0, [pc, #12]	; (8016a28 <tcp_write+0x2e4>)
 8016a1a:	f004 ff23 	bl	801b864 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8016a1e:	e0ce      	b.n	8016bbe <tcp_write+0x47a>
 8016a20:	0801ed8c 	.word	0x0801ed8c
 8016a24:	0801ef2c 	.word	0x0801ef2c
 8016a28:	0801ede0 	.word	0x0801ede0
 8016a2c:	0801ef44 	.word	0x0801ef44
 8016a30:	0801ef78 	.word	0x0801ef78
 8016a34:	0801ef90 	.word	0x0801ef90
 8016a38:	0801efb0 	.word	0x0801efb0
 8016a3c:	0801efd0 	.word	0x0801efd0
 8016a40:	0801effc 	.word	0x0801effc
    struct pbuf *p;
    u16_t left = len - pos;
 8016a44:	88fa      	ldrh	r2, [r7, #6]
 8016a46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016a4a:	1ad3      	subs	r3, r2, r3
 8016a4c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8016a4e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016a52:	b29b      	uxth	r3, r3
 8016a54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016a56:	1ad3      	subs	r3, r2, r3
 8016a58:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016a5a:	8b7a      	ldrh	r2, [r7, #26]
 8016a5c:	8bbb      	ldrh	r3, [r7, #28]
 8016a5e:	4293      	cmp	r3, r2
 8016a60:	bf28      	it	cs
 8016a62:	4613      	movcs	r3, r2
 8016a64:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016a66:	797b      	ldrb	r3, [r7, #5]
 8016a68:	f003 0301 	and.w	r3, r3, #1
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d036      	beq.n	8016ade <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8016a70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016a74:	b29a      	uxth	r2, r3
 8016a76:	8b3b      	ldrh	r3, [r7, #24]
 8016a78:	4413      	add	r3, r2
 8016a7a:	b299      	uxth	r1, r3
 8016a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	bf0c      	ite	eq
 8016a82:	2301      	moveq	r3, #1
 8016a84:	2300      	movne	r3, #0
 8016a86:	b2db      	uxtb	r3, r3
 8016a88:	f107 0012 	add.w	r0, r7, #18
 8016a8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016a8e:	9302      	str	r3, [sp, #8]
 8016a90:	797b      	ldrb	r3, [r7, #5]
 8016a92:	9301      	str	r3, [sp, #4]
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	9300      	str	r3, [sp, #0]
 8016a98:	4603      	mov	r3, r0
 8016a9a:	2036      	movs	r0, #54	; 0x36
 8016a9c:	f7ff fd5e 	bl	801655c <tcp_pbuf_prealloc>
 8016aa0:	6338      	str	r0, [r7, #48]	; 0x30
 8016aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	f000 8178 	beq.w	8016d9a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aac:	895b      	ldrh	r3, [r3, #10]
 8016aae:	8b3a      	ldrh	r2, [r7, #24]
 8016ab0:	429a      	cmp	r2, r3
 8016ab2:	d906      	bls.n	8016ac2 <tcp_write+0x37e>
 8016ab4:	4b8c      	ldr	r3, [pc, #560]	; (8016ce8 <tcp_write+0x5a4>)
 8016ab6:	f240 2266 	movw	r2, #614	; 0x266
 8016aba:	498c      	ldr	r1, [pc, #560]	; (8016cec <tcp_write+0x5a8>)
 8016abc:	488c      	ldr	r0, [pc, #560]	; (8016cf0 <tcp_write+0x5ac>)
 8016abe:	f004 fed1 	bl	801b864 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8016ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ac4:	685a      	ldr	r2, [r3, #4]
 8016ac6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016aca:	18d0      	adds	r0, r2, r3
 8016acc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016ad0:	68ba      	ldr	r2, [r7, #8]
 8016ad2:	4413      	add	r3, r2
 8016ad4:	8b3a      	ldrh	r2, [r7, #24]
 8016ad6:	4619      	mov	r1, r3
 8016ad8:	f004 fdff 	bl	801b6da <memcpy>
 8016adc:	e02f      	b.n	8016b3e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8016ade:	8a7b      	ldrh	r3, [r7, #18]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d006      	beq.n	8016af2 <tcp_write+0x3ae>
 8016ae4:	4b80      	ldr	r3, [pc, #512]	; (8016ce8 <tcp_write+0x5a4>)
 8016ae6:	f240 2271 	movw	r2, #625	; 0x271
 8016aea:	4982      	ldr	r1, [pc, #520]	; (8016cf4 <tcp_write+0x5b0>)
 8016aec:	4880      	ldr	r0, [pc, #512]	; (8016cf0 <tcp_write+0x5ac>)
 8016aee:	f004 feb9 	bl	801b864 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8016af2:	8b3b      	ldrh	r3, [r7, #24]
 8016af4:	2201      	movs	r2, #1
 8016af6:	4619      	mov	r1, r3
 8016af8:	2036      	movs	r0, #54	; 0x36
 8016afa:	f7fa fd67 	bl	80115cc <pbuf_alloc>
 8016afe:	6178      	str	r0, [r7, #20]
 8016b00:	697b      	ldr	r3, [r7, #20]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	f000 814b 	beq.w	8016d9e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8016b08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b0c:	68ba      	ldr	r2, [r7, #8]
 8016b0e:	441a      	add	r2, r3
 8016b10:	697b      	ldr	r3, [r7, #20]
 8016b12:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016b14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016b18:	b29b      	uxth	r3, r3
 8016b1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016b1e:	4619      	mov	r1, r3
 8016b20:	2036      	movs	r0, #54	; 0x36
 8016b22:	f7fa fd53 	bl	80115cc <pbuf_alloc>
 8016b26:	6338      	str	r0, [r7, #48]	; 0x30
 8016b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d103      	bne.n	8016b36 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8016b2e:	6978      	ldr	r0, [r7, #20]
 8016b30:	f7fb f834 	bl	8011b9c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016b34:	e136      	b.n	8016da4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8016b36:	6979      	ldr	r1, [r7, #20]
 8016b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b3a:	f7fb f8fd 	bl	8011d38 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8016b3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b40:	f7fb f8ba 	bl	8011cb8 <pbuf_clen>
 8016b44:	4603      	mov	r3, r0
 8016b46:	461a      	mov	r2, r3
 8016b48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016b4c:	4413      	add	r3, r2
 8016b4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8016b52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016b56:	2b09      	cmp	r3, #9
 8016b58:	d903      	bls.n	8016b62 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016b5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b5c:	f7fb f81e 	bl	8011b9c <pbuf_free>
      goto memerr;
 8016b60:	e120      	b.n	8016da4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016b66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b6a:	441a      	add	r2, r3
 8016b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b70:	9300      	str	r3, [sp, #0]
 8016b72:	4613      	mov	r3, r2
 8016b74:	2200      	movs	r2, #0
 8016b76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016b78:	68f8      	ldr	r0, [r7, #12]
 8016b7a:	f7ff fc51 	bl	8016420 <tcp_create_segment>
 8016b7e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	f000 810d 	beq.w	8016da2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d102      	bne.n	8016b94 <tcp_write+0x450>
      queue = seg;
 8016b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b90:	647b      	str	r3, [r7, #68]	; 0x44
 8016b92:	e00c      	b.n	8016bae <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d106      	bne.n	8016ba8 <tcp_write+0x464>
 8016b9a:	4b53      	ldr	r3, [pc, #332]	; (8016ce8 <tcp_write+0x5a4>)
 8016b9c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016ba0:	4955      	ldr	r1, [pc, #340]	; (8016cf8 <tcp_write+0x5b4>)
 8016ba2:	4853      	ldr	r0, [pc, #332]	; (8016cf0 <tcp_write+0x5ac>)
 8016ba4:	f004 fe5e 	bl	801b864 <iprintf>
      prev_seg->next = seg;
 8016ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016baa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016bac:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8016bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016bb0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8016bb2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016bb6:	8b3b      	ldrh	r3, [r7, #24]
 8016bb8:	4413      	add	r3, r2
 8016bba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8016bbe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016bc2:	88fb      	ldrh	r3, [r7, #6]
 8016bc4:	429a      	cmp	r2, r3
 8016bc6:	f4ff af3d 	bcc.w	8016a44 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016bca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d02c      	beq.n	8016c2a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8016bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016bd2:	685b      	ldr	r3, [r3, #4]
 8016bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016bd6:	e01e      	b.n	8016c16 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8016bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bda:	891a      	ldrh	r2, [r3, #8]
 8016bdc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016bde:	4413      	add	r3, r2
 8016be0:	b29a      	uxth	r2, r3
 8016be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016be4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d110      	bne.n	8016c10 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8016bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bf0:	685b      	ldr	r3, [r3, #4]
 8016bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016bf4:	8952      	ldrh	r2, [r2, #10]
 8016bf6:	4413      	add	r3, r2
 8016bf8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016bfa:	68b9      	ldr	r1, [r7, #8]
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	f004 fd6c 	bl	801b6da <memcpy>
        p->len += oversize_used;
 8016c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c04:	895a      	ldrh	r2, [r3, #10]
 8016c06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016c08:	4413      	add	r3, r2
 8016c0a:	b29a      	uxth	r2, r3
 8016c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c0e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8016c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d1dd      	bne.n	8016bd8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c1e:	891a      	ldrh	r2, [r3, #8]
 8016c20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016c22:	4413      	add	r3, r2
 8016c24:	b29a      	uxth	r2, r3
 8016c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c28:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8016c2a:	8a7a      	ldrh	r2, [r7, #18]
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8016c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d018      	beq.n	8016c6a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8016c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d106      	bne.n	8016c4c <tcp_write+0x508>
 8016c3e:	4b2a      	ldr	r3, [pc, #168]	; (8016ce8 <tcp_write+0x5a4>)
 8016c40:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8016c44:	492d      	ldr	r1, [pc, #180]	; (8016cfc <tcp_write+0x5b8>)
 8016c46:	482a      	ldr	r0, [pc, #168]	; (8016cf0 <tcp_write+0x5ac>)
 8016c48:	f004 fe0c 	bl	801b864 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c4e:	685b      	ldr	r3, [r3, #4]
 8016c50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016c52:	4618      	mov	r0, r3
 8016c54:	f7fb f870 	bl	8011d38 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c5a:	891a      	ldrh	r2, [r3, #8]
 8016c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c5e:	891b      	ldrh	r3, [r3, #8]
 8016c60:	4413      	add	r3, r2
 8016c62:	b29a      	uxth	r2, r3
 8016c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c66:	811a      	strh	r2, [r3, #8]
 8016c68:	e037      	b.n	8016cda <tcp_write+0x596>
  } else if (extendlen > 0) {
 8016c6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d034      	beq.n	8016cda <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8016c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d003      	beq.n	8016c7e <tcp_write+0x53a>
 8016c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c78:	685b      	ldr	r3, [r3, #4]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d106      	bne.n	8016c8c <tcp_write+0x548>
 8016c7e:	4b1a      	ldr	r3, [pc, #104]	; (8016ce8 <tcp_write+0x5a4>)
 8016c80:	f240 22e6 	movw	r2, #742	; 0x2e6
 8016c84:	491e      	ldr	r1, [pc, #120]	; (8016d00 <tcp_write+0x5bc>)
 8016c86:	481a      	ldr	r0, [pc, #104]	; (8016cf0 <tcp_write+0x5ac>)
 8016c88:	f004 fdec 	bl	801b864 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c8e:	685b      	ldr	r3, [r3, #4]
 8016c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8016c92:	e009      	b.n	8016ca8 <tcp_write+0x564>
      p->tot_len += extendlen;
 8016c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c96:	891a      	ldrh	r2, [r3, #8]
 8016c98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016c9a:	4413      	add	r3, r2
 8016c9c:	b29a      	uxth	r2, r3
 8016c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ca0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8016ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d1f1      	bne.n	8016c94 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8016cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cb2:	891a      	ldrh	r2, [r3, #8]
 8016cb4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016cb6:	4413      	add	r3, r2
 8016cb8:	b29a      	uxth	r2, r3
 8016cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cbc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8016cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cc0:	895a      	ldrh	r2, [r3, #10]
 8016cc2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016cc4:	4413      	add	r3, r2
 8016cc6:	b29a      	uxth	r2, r3
 8016cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cca:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016cce:	891a      	ldrh	r2, [r3, #8]
 8016cd0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016cd2:	4413      	add	r3, r2
 8016cd4:	b29a      	uxth	r2, r3
 8016cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016cd8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8016cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d111      	bne.n	8016d04 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016ce4:	66da      	str	r2, [r3, #108]	; 0x6c
 8016ce6:	e010      	b.n	8016d0a <tcp_write+0x5c6>
 8016ce8:	0801ed8c 	.word	0x0801ed8c
 8016cec:	0801f02c 	.word	0x0801f02c
 8016cf0:	0801ede0 	.word	0x0801ede0
 8016cf4:	0801f06c 	.word	0x0801f06c
 8016cf8:	0801f07c 	.word	0x0801f07c
 8016cfc:	0801f090 	.word	0x0801f090
 8016d00:	0801f0c8 	.word	0x0801f0c8
  } else {
    last_unsent->next = queue;
 8016d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016d06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016d08:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016d0e:	88fb      	ldrh	r3, [r7, #6]
 8016d10:	441a      	add	r2, r3
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016d1c:	88fb      	ldrh	r3, [r7, #6]
 8016d1e:	1ad3      	subs	r3, r2, r3
 8016d20:	b29a      	uxth	r2, r3
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016d2e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d00e      	beq.n	8016d5a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d10a      	bne.n	8016d5a <tcp_write+0x616>
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d106      	bne.n	8016d5a <tcp_write+0x616>
 8016d4c:	4b2c      	ldr	r3, [pc, #176]	; (8016e00 <tcp_write+0x6bc>)
 8016d4e:	f240 3212 	movw	r2, #786	; 0x312
 8016d52:	492c      	ldr	r1, [pc, #176]	; (8016e04 <tcp_write+0x6c0>)
 8016d54:	482c      	ldr	r0, [pc, #176]	; (8016e08 <tcp_write+0x6c4>)
 8016d56:	f004 fd85 	bl	801b864 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8016d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d016      	beq.n	8016d8e <tcp_write+0x64a>
 8016d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d62:	68db      	ldr	r3, [r3, #12]
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d012      	beq.n	8016d8e <tcp_write+0x64a>
 8016d68:	797b      	ldrb	r3, [r7, #5]
 8016d6a:	f003 0302 	and.w	r3, r3, #2
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d10d      	bne.n	8016d8e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8016d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d74:	68db      	ldr	r3, [r3, #12]
 8016d76:	899b      	ldrh	r3, [r3, #12]
 8016d78:	b29c      	uxth	r4, r3
 8016d7a:	2008      	movs	r0, #8
 8016d7c:	f7f9 f994 	bl	80100a8 <lwip_htons>
 8016d80:	4603      	mov	r3, r0
 8016d82:	461a      	mov	r2, r3
 8016d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d86:	68db      	ldr	r3, [r3, #12]
 8016d88:	4322      	orrs	r2, r4
 8016d8a:	b292      	uxth	r2, r2
 8016d8c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8016d8e:	2300      	movs	r3, #0
 8016d90:	e031      	b.n	8016df6 <tcp_write+0x6b2>
          goto memerr;
 8016d92:	bf00      	nop
 8016d94:	e006      	b.n	8016da4 <tcp_write+0x660>
            goto memerr;
 8016d96:	bf00      	nop
 8016d98:	e004      	b.n	8016da4 <tcp_write+0x660>
        goto memerr;
 8016d9a:	bf00      	nop
 8016d9c:	e002      	b.n	8016da4 <tcp_write+0x660>
        goto memerr;
 8016d9e:	bf00      	nop
 8016da0:	e000      	b.n	8016da4 <tcp_write+0x660>
      goto memerr;
 8016da2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	8b5b      	ldrh	r3, [r3, #26]
 8016da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016dac:	b29a      	uxth	r2, r3
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8016db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d002      	beq.n	8016dbe <tcp_write+0x67a>
    pbuf_free(concat_p);
 8016db8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016dba:	f7fa feef 	bl	8011b9c <pbuf_free>
  }
  if (queue != NULL) {
 8016dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d002      	beq.n	8016dca <tcp_write+0x686>
    tcp_segs_free(queue);
 8016dc4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016dc6:	f7fc fb57 	bl	8013478 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d00e      	beq.n	8016df2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d10a      	bne.n	8016df2 <tcp_write+0x6ae>
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d106      	bne.n	8016df2 <tcp_write+0x6ae>
 8016de4:	4b06      	ldr	r3, [pc, #24]	; (8016e00 <tcp_write+0x6bc>)
 8016de6:	f240 3227 	movw	r2, #807	; 0x327
 8016dea:	4906      	ldr	r1, [pc, #24]	; (8016e04 <tcp_write+0x6c0>)
 8016dec:	4806      	ldr	r0, [pc, #24]	; (8016e08 <tcp_write+0x6c4>)
 8016dee:	f004 fd39 	bl	801b864 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8016df2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016df6:	4618      	mov	r0, r3
 8016df8:	375c      	adds	r7, #92	; 0x5c
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	bd90      	pop	{r4, r7, pc}
 8016dfe:	bf00      	nop
 8016e00:	0801ed8c 	.word	0x0801ed8c
 8016e04:	0801f100 	.word	0x0801f100
 8016e08:	0801ede0 	.word	0x0801ede0

08016e0c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016e0c:	b590      	push	{r4, r7, lr}
 8016e0e:	b08b      	sub	sp, #44	; 0x2c
 8016e10:	af02      	add	r7, sp, #8
 8016e12:	6078      	str	r0, [r7, #4]
 8016e14:	460b      	mov	r3, r1
 8016e16:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016e18:	2300      	movs	r3, #0
 8016e1a:	61fb      	str	r3, [r7, #28]
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016e20:	2300      	movs	r3, #0
 8016e22:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d106      	bne.n	8016e38 <tcp_split_unsent_seg+0x2c>
 8016e2a:	4b95      	ldr	r3, [pc, #596]	; (8017080 <tcp_split_unsent_seg+0x274>)
 8016e2c:	f240 324b 	movw	r2, #843	; 0x34b
 8016e30:	4994      	ldr	r1, [pc, #592]	; (8017084 <tcp_split_unsent_seg+0x278>)
 8016e32:	4895      	ldr	r0, [pc, #596]	; (8017088 <tcp_split_unsent_seg+0x27c>)
 8016e34:	f004 fd16 	bl	801b864 <iprintf>

  useg = pcb->unsent;
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016e3c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016e3e:	697b      	ldr	r3, [r7, #20]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d102      	bne.n	8016e4a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016e44:	f04f 33ff 	mov.w	r3, #4294967295
 8016e48:	e116      	b.n	8017078 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016e4a:	887b      	ldrh	r3, [r7, #2]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d109      	bne.n	8016e64 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016e50:	4b8b      	ldr	r3, [pc, #556]	; (8017080 <tcp_split_unsent_seg+0x274>)
 8016e52:	f240 3253 	movw	r2, #851	; 0x353
 8016e56:	498d      	ldr	r1, [pc, #564]	; (801708c <tcp_split_unsent_seg+0x280>)
 8016e58:	488b      	ldr	r0, [pc, #556]	; (8017088 <tcp_split_unsent_seg+0x27c>)
 8016e5a:	f004 fd03 	bl	801b864 <iprintf>
    return ERR_VAL;
 8016e5e:	f06f 0305 	mvn.w	r3, #5
 8016e62:	e109      	b.n	8017078 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016e64:	697b      	ldr	r3, [r7, #20]
 8016e66:	891b      	ldrh	r3, [r3, #8]
 8016e68:	887a      	ldrh	r2, [r7, #2]
 8016e6a:	429a      	cmp	r2, r3
 8016e6c:	d301      	bcc.n	8016e72 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016e6e:	2300      	movs	r3, #0
 8016e70:	e102      	b.n	8017078 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016e76:	887a      	ldrh	r2, [r7, #2]
 8016e78:	429a      	cmp	r2, r3
 8016e7a:	d906      	bls.n	8016e8a <tcp_split_unsent_seg+0x7e>
 8016e7c:	4b80      	ldr	r3, [pc, #512]	; (8017080 <tcp_split_unsent_seg+0x274>)
 8016e7e:	f240 325b 	movw	r2, #859	; 0x35b
 8016e82:	4983      	ldr	r1, [pc, #524]	; (8017090 <tcp_split_unsent_seg+0x284>)
 8016e84:	4880      	ldr	r0, [pc, #512]	; (8017088 <tcp_split_unsent_seg+0x27c>)
 8016e86:	f004 fced 	bl	801b864 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016e8a:	697b      	ldr	r3, [r7, #20]
 8016e8c:	891b      	ldrh	r3, [r3, #8]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d106      	bne.n	8016ea0 <tcp_split_unsent_seg+0x94>
 8016e92:	4b7b      	ldr	r3, [pc, #492]	; (8017080 <tcp_split_unsent_seg+0x274>)
 8016e94:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8016e98:	497e      	ldr	r1, [pc, #504]	; (8017094 <tcp_split_unsent_seg+0x288>)
 8016e9a:	487b      	ldr	r0, [pc, #492]	; (8017088 <tcp_split_unsent_seg+0x27c>)
 8016e9c:	f004 fce2 	bl	801b864 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016ea0:	697b      	ldr	r3, [r7, #20]
 8016ea2:	7a9b      	ldrb	r3, [r3, #10]
 8016ea4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016ea6:	7bfb      	ldrb	r3, [r7, #15]
 8016ea8:	009b      	lsls	r3, r3, #2
 8016eaa:	b2db      	uxtb	r3, r3
 8016eac:	f003 0304 	and.w	r3, r3, #4
 8016eb0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8016eb2:	697b      	ldr	r3, [r7, #20]
 8016eb4:	891a      	ldrh	r2, [r3, #8]
 8016eb6:	887b      	ldrh	r3, [r7, #2]
 8016eb8:	1ad3      	subs	r3, r2, r3
 8016eba:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016ebc:	7bbb      	ldrb	r3, [r7, #14]
 8016ebe:	b29a      	uxth	r2, r3
 8016ec0:	89bb      	ldrh	r3, [r7, #12]
 8016ec2:	4413      	add	r3, r2
 8016ec4:	b29b      	uxth	r3, r3
 8016ec6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016eca:	4619      	mov	r1, r3
 8016ecc:	2036      	movs	r0, #54	; 0x36
 8016ece:	f7fa fb7d 	bl	80115cc <pbuf_alloc>
 8016ed2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016ed4:	693b      	ldr	r3, [r7, #16]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	f000 80b7 	beq.w	801704a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016edc:	697b      	ldr	r3, [r7, #20]
 8016ede:	685b      	ldr	r3, [r3, #4]
 8016ee0:	891a      	ldrh	r2, [r3, #8]
 8016ee2:	697b      	ldr	r3, [r7, #20]
 8016ee4:	891b      	ldrh	r3, [r3, #8]
 8016ee6:	1ad3      	subs	r3, r2, r3
 8016ee8:	b29a      	uxth	r2, r3
 8016eea:	887b      	ldrh	r3, [r7, #2]
 8016eec:	4413      	add	r3, r2
 8016eee:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016ef0:	697b      	ldr	r3, [r7, #20]
 8016ef2:	6858      	ldr	r0, [r3, #4]
 8016ef4:	693b      	ldr	r3, [r7, #16]
 8016ef6:	685a      	ldr	r2, [r3, #4]
 8016ef8:	7bbb      	ldrb	r3, [r7, #14]
 8016efa:	18d1      	adds	r1, r2, r3
 8016efc:	897b      	ldrh	r3, [r7, #10]
 8016efe:	89ba      	ldrh	r2, [r7, #12]
 8016f00:	f7fb f842 	bl	8011f88 <pbuf_copy_partial>
 8016f04:	4603      	mov	r3, r0
 8016f06:	461a      	mov	r2, r3
 8016f08:	89bb      	ldrh	r3, [r7, #12]
 8016f0a:	4293      	cmp	r3, r2
 8016f0c:	f040 809f 	bne.w	801704e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016f10:	697b      	ldr	r3, [r7, #20]
 8016f12:	68db      	ldr	r3, [r3, #12]
 8016f14:	899b      	ldrh	r3, [r3, #12]
 8016f16:	b29b      	uxth	r3, r3
 8016f18:	4618      	mov	r0, r3
 8016f1a:	f7f9 f8c5 	bl	80100a8 <lwip_htons>
 8016f1e:	4603      	mov	r3, r0
 8016f20:	b2db      	uxtb	r3, r3
 8016f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016f26:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016f28:	2300      	movs	r3, #0
 8016f2a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016f2c:	7efb      	ldrb	r3, [r7, #27]
 8016f2e:	f003 0308 	and.w	r3, r3, #8
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d007      	beq.n	8016f46 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016f36:	7efb      	ldrb	r3, [r7, #27]
 8016f38:	f023 0308 	bic.w	r3, r3, #8
 8016f3c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016f3e:	7ebb      	ldrb	r3, [r7, #26]
 8016f40:	f043 0308 	orr.w	r3, r3, #8
 8016f44:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016f46:	7efb      	ldrb	r3, [r7, #27]
 8016f48:	f003 0301 	and.w	r3, r3, #1
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d007      	beq.n	8016f60 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016f50:	7efb      	ldrb	r3, [r7, #27]
 8016f52:	f023 0301 	bic.w	r3, r3, #1
 8016f56:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016f58:	7ebb      	ldrb	r3, [r7, #26]
 8016f5a:	f043 0301 	orr.w	r3, r3, #1
 8016f5e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016f60:	697b      	ldr	r3, [r7, #20]
 8016f62:	68db      	ldr	r3, [r3, #12]
 8016f64:	685b      	ldr	r3, [r3, #4]
 8016f66:	4618      	mov	r0, r3
 8016f68:	f7f9 f8b3 	bl	80100d2 <lwip_htonl>
 8016f6c:	4602      	mov	r2, r0
 8016f6e:	887b      	ldrh	r3, [r7, #2]
 8016f70:	18d1      	adds	r1, r2, r3
 8016f72:	7eba      	ldrb	r2, [r7, #26]
 8016f74:	7bfb      	ldrb	r3, [r7, #15]
 8016f76:	9300      	str	r3, [sp, #0]
 8016f78:	460b      	mov	r3, r1
 8016f7a:	6939      	ldr	r1, [r7, #16]
 8016f7c:	6878      	ldr	r0, [r7, #4]
 8016f7e:	f7ff fa4f 	bl	8016420 <tcp_create_segment>
 8016f82:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016f84:	69fb      	ldr	r3, [r7, #28]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d063      	beq.n	8017052 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016f8a:	697b      	ldr	r3, [r7, #20]
 8016f8c:	685b      	ldr	r3, [r3, #4]
 8016f8e:	4618      	mov	r0, r3
 8016f90:	f7fa fe92 	bl	8011cb8 <pbuf_clen>
 8016f94:	4603      	mov	r3, r0
 8016f96:	461a      	mov	r2, r3
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016f9e:	1a9b      	subs	r3, r3, r2
 8016fa0:	b29a      	uxth	r2, r3
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016fa8:	697b      	ldr	r3, [r7, #20]
 8016faa:	6858      	ldr	r0, [r3, #4]
 8016fac:	697b      	ldr	r3, [r7, #20]
 8016fae:	685b      	ldr	r3, [r3, #4]
 8016fb0:	891a      	ldrh	r2, [r3, #8]
 8016fb2:	89bb      	ldrh	r3, [r7, #12]
 8016fb4:	1ad3      	subs	r3, r2, r3
 8016fb6:	b29b      	uxth	r3, r3
 8016fb8:	4619      	mov	r1, r3
 8016fba:	f7fa fc69 	bl	8011890 <pbuf_realloc>
  useg->len -= remainder;
 8016fbe:	697b      	ldr	r3, [r7, #20]
 8016fc0:	891a      	ldrh	r2, [r3, #8]
 8016fc2:	89bb      	ldrh	r3, [r7, #12]
 8016fc4:	1ad3      	subs	r3, r2, r3
 8016fc6:	b29a      	uxth	r2, r3
 8016fc8:	697b      	ldr	r3, [r7, #20]
 8016fca:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016fcc:	697b      	ldr	r3, [r7, #20]
 8016fce:	68db      	ldr	r3, [r3, #12]
 8016fd0:	899b      	ldrh	r3, [r3, #12]
 8016fd2:	b29c      	uxth	r4, r3
 8016fd4:	7efb      	ldrb	r3, [r7, #27]
 8016fd6:	b29b      	uxth	r3, r3
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7f9 f865 	bl	80100a8 <lwip_htons>
 8016fde:	4603      	mov	r3, r0
 8016fe0:	461a      	mov	r2, r3
 8016fe2:	697b      	ldr	r3, [r7, #20]
 8016fe4:	68db      	ldr	r3, [r3, #12]
 8016fe6:	4322      	orrs	r2, r4
 8016fe8:	b292      	uxth	r2, r2
 8016fea:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016fec:	697b      	ldr	r3, [r7, #20]
 8016fee:	685b      	ldr	r3, [r3, #4]
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	f7fa fe61 	bl	8011cb8 <pbuf_clen>
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	461a      	mov	r2, r3
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017000:	4413      	add	r3, r2
 8017002:	b29a      	uxth	r2, r3
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801700a:	69fb      	ldr	r3, [r7, #28]
 801700c:	685b      	ldr	r3, [r3, #4]
 801700e:	4618      	mov	r0, r3
 8017010:	f7fa fe52 	bl	8011cb8 <pbuf_clen>
 8017014:	4603      	mov	r3, r0
 8017016:	461a      	mov	r2, r3
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801701e:	4413      	add	r3, r2
 8017020:	b29a      	uxth	r2, r3
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8017028:	697b      	ldr	r3, [r7, #20]
 801702a:	681a      	ldr	r2, [r3, #0]
 801702c:	69fb      	ldr	r3, [r7, #28]
 801702e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8017030:	697b      	ldr	r3, [r7, #20]
 8017032:	69fa      	ldr	r2, [r7, #28]
 8017034:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8017036:	69fb      	ldr	r3, [r7, #28]
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d103      	bne.n	8017046 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	2200      	movs	r2, #0
 8017042:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8017046:	2300      	movs	r3, #0
 8017048:	e016      	b.n	8017078 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801704a:	bf00      	nop
 801704c:	e002      	b.n	8017054 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801704e:	bf00      	nop
 8017050:	e000      	b.n	8017054 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017052:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8017054:	69fb      	ldr	r3, [r7, #28]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d006      	beq.n	8017068 <tcp_split_unsent_seg+0x25c>
 801705a:	4b09      	ldr	r3, [pc, #36]	; (8017080 <tcp_split_unsent_seg+0x274>)
 801705c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8017060:	490d      	ldr	r1, [pc, #52]	; (8017098 <tcp_split_unsent_seg+0x28c>)
 8017062:	4809      	ldr	r0, [pc, #36]	; (8017088 <tcp_split_unsent_seg+0x27c>)
 8017064:	f004 fbfe 	bl	801b864 <iprintf>
  if (p != NULL) {
 8017068:	693b      	ldr	r3, [r7, #16]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d002      	beq.n	8017074 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801706e:	6938      	ldr	r0, [r7, #16]
 8017070:	f7fa fd94 	bl	8011b9c <pbuf_free>
  }

  return ERR_MEM;
 8017074:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017078:	4618      	mov	r0, r3
 801707a:	3724      	adds	r7, #36	; 0x24
 801707c:	46bd      	mov	sp, r7
 801707e:	bd90      	pop	{r4, r7, pc}
 8017080:	0801ed8c 	.word	0x0801ed8c
 8017084:	0801f120 	.word	0x0801f120
 8017088:	0801ede0 	.word	0x0801ede0
 801708c:	0801f144 	.word	0x0801f144
 8017090:	0801f168 	.word	0x0801f168
 8017094:	0801f178 	.word	0x0801f178
 8017098:	0801f188 	.word	0x0801f188

0801709c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801709c:	b590      	push	{r4, r7, lr}
 801709e:	b085      	sub	sp, #20
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d106      	bne.n	80170b8 <tcp_send_fin+0x1c>
 80170aa:	4b21      	ldr	r3, [pc, #132]	; (8017130 <tcp_send_fin+0x94>)
 80170ac:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80170b0:	4920      	ldr	r1, [pc, #128]	; (8017134 <tcp_send_fin+0x98>)
 80170b2:	4821      	ldr	r0, [pc, #132]	; (8017138 <tcp_send_fin+0x9c>)
 80170b4:	f004 fbd6 	bl	801b864 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d02e      	beq.n	801711e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170c4:	60fb      	str	r3, [r7, #12]
 80170c6:	e002      	b.n	80170ce <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d1f8      	bne.n	80170c8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	68db      	ldr	r3, [r3, #12]
 80170da:	899b      	ldrh	r3, [r3, #12]
 80170dc:	b29b      	uxth	r3, r3
 80170de:	4618      	mov	r0, r3
 80170e0:	f7f8 ffe2 	bl	80100a8 <lwip_htons>
 80170e4:	4603      	mov	r3, r0
 80170e6:	b2db      	uxtb	r3, r3
 80170e8:	f003 0307 	and.w	r3, r3, #7
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d116      	bne.n	801711e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	68db      	ldr	r3, [r3, #12]
 80170f4:	899b      	ldrh	r3, [r3, #12]
 80170f6:	b29c      	uxth	r4, r3
 80170f8:	2001      	movs	r0, #1
 80170fa:	f7f8 ffd5 	bl	80100a8 <lwip_htons>
 80170fe:	4603      	mov	r3, r0
 8017100:	461a      	mov	r2, r3
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	68db      	ldr	r3, [r3, #12]
 8017106:	4322      	orrs	r2, r4
 8017108:	b292      	uxth	r2, r2
 801710a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	8b5b      	ldrh	r3, [r3, #26]
 8017110:	f043 0320 	orr.w	r3, r3, #32
 8017114:	b29a      	uxth	r2, r3
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801711a:	2300      	movs	r3, #0
 801711c:	e004      	b.n	8017128 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801711e:	2101      	movs	r1, #1
 8017120:	6878      	ldr	r0, [r7, #4]
 8017122:	f000 f80b 	bl	801713c <tcp_enqueue_flags>
 8017126:	4603      	mov	r3, r0
}
 8017128:	4618      	mov	r0, r3
 801712a:	3714      	adds	r7, #20
 801712c:	46bd      	mov	sp, r7
 801712e:	bd90      	pop	{r4, r7, pc}
 8017130:	0801ed8c 	.word	0x0801ed8c
 8017134:	0801f194 	.word	0x0801f194
 8017138:	0801ede0 	.word	0x0801ede0

0801713c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b08a      	sub	sp, #40	; 0x28
 8017140:	af02      	add	r7, sp, #8
 8017142:	6078      	str	r0, [r7, #4]
 8017144:	460b      	mov	r3, r1
 8017146:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8017148:	2300      	movs	r3, #0
 801714a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801714c:	2300      	movs	r3, #0
 801714e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017150:	78fb      	ldrb	r3, [r7, #3]
 8017152:	f003 0303 	and.w	r3, r3, #3
 8017156:	2b00      	cmp	r3, #0
 8017158:	d106      	bne.n	8017168 <tcp_enqueue_flags+0x2c>
 801715a:	4b67      	ldr	r3, [pc, #412]	; (80172f8 <tcp_enqueue_flags+0x1bc>)
 801715c:	f240 4211 	movw	r2, #1041	; 0x411
 8017160:	4966      	ldr	r1, [pc, #408]	; (80172fc <tcp_enqueue_flags+0x1c0>)
 8017162:	4867      	ldr	r0, [pc, #412]	; (8017300 <tcp_enqueue_flags+0x1c4>)
 8017164:	f004 fb7e 	bl	801b864 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	2b00      	cmp	r3, #0
 801716c:	d106      	bne.n	801717c <tcp_enqueue_flags+0x40>
 801716e:	4b62      	ldr	r3, [pc, #392]	; (80172f8 <tcp_enqueue_flags+0x1bc>)
 8017170:	f240 4213 	movw	r2, #1043	; 0x413
 8017174:	4963      	ldr	r1, [pc, #396]	; (8017304 <tcp_enqueue_flags+0x1c8>)
 8017176:	4862      	ldr	r0, [pc, #392]	; (8017300 <tcp_enqueue_flags+0x1c4>)
 8017178:	f004 fb74 	bl	801b864 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801717c:	78fb      	ldrb	r3, [r7, #3]
 801717e:	f003 0302 	and.w	r3, r3, #2
 8017182:	2b00      	cmp	r3, #0
 8017184:	d001      	beq.n	801718a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8017186:	2301      	movs	r3, #1
 8017188:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801718a:	7ffb      	ldrb	r3, [r7, #31]
 801718c:	009b      	lsls	r3, r3, #2
 801718e:	b2db      	uxtb	r3, r3
 8017190:	f003 0304 	and.w	r3, r3, #4
 8017194:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017196:	7dfb      	ldrb	r3, [r7, #23]
 8017198:	b29b      	uxth	r3, r3
 801719a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801719e:	4619      	mov	r1, r3
 80171a0:	2036      	movs	r0, #54	; 0x36
 80171a2:	f7fa fa13 	bl	80115cc <pbuf_alloc>
 80171a6:	6138      	str	r0, [r7, #16]
 80171a8:	693b      	ldr	r3, [r7, #16]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d109      	bne.n	80171c2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	8b5b      	ldrh	r3, [r3, #26]
 80171b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80171b6:	b29a      	uxth	r2, r3
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80171bc:	f04f 33ff 	mov.w	r3, #4294967295
 80171c0:	e095      	b.n	80172ee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80171c2:	693b      	ldr	r3, [r7, #16]
 80171c4:	895a      	ldrh	r2, [r3, #10]
 80171c6:	7dfb      	ldrb	r3, [r7, #23]
 80171c8:	b29b      	uxth	r3, r3
 80171ca:	429a      	cmp	r2, r3
 80171cc:	d206      	bcs.n	80171dc <tcp_enqueue_flags+0xa0>
 80171ce:	4b4a      	ldr	r3, [pc, #296]	; (80172f8 <tcp_enqueue_flags+0x1bc>)
 80171d0:	f240 4239 	movw	r2, #1081	; 0x439
 80171d4:	494c      	ldr	r1, [pc, #304]	; (8017308 <tcp_enqueue_flags+0x1cc>)
 80171d6:	484a      	ldr	r0, [pc, #296]	; (8017300 <tcp_enqueue_flags+0x1c4>)
 80171d8:	f004 fb44 	bl	801b864 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80171e0:	78fa      	ldrb	r2, [r7, #3]
 80171e2:	7ffb      	ldrb	r3, [r7, #31]
 80171e4:	9300      	str	r3, [sp, #0]
 80171e6:	460b      	mov	r3, r1
 80171e8:	6939      	ldr	r1, [r7, #16]
 80171ea:	6878      	ldr	r0, [r7, #4]
 80171ec:	f7ff f918 	bl	8016420 <tcp_create_segment>
 80171f0:	60f8      	str	r0, [r7, #12]
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d109      	bne.n	801720c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	8b5b      	ldrh	r3, [r3, #26]
 80171fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017200:	b29a      	uxth	r2, r3
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017206:	f04f 33ff 	mov.w	r3, #4294967295
 801720a:	e070      	b.n	80172ee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	68db      	ldr	r3, [r3, #12]
 8017210:	f003 0303 	and.w	r3, r3, #3
 8017214:	2b00      	cmp	r3, #0
 8017216:	d006      	beq.n	8017226 <tcp_enqueue_flags+0xea>
 8017218:	4b37      	ldr	r3, [pc, #220]	; (80172f8 <tcp_enqueue_flags+0x1bc>)
 801721a:	f240 4242 	movw	r2, #1090	; 0x442
 801721e:	493b      	ldr	r1, [pc, #236]	; (801730c <tcp_enqueue_flags+0x1d0>)
 8017220:	4837      	ldr	r0, [pc, #220]	; (8017300 <tcp_enqueue_flags+0x1c4>)
 8017222:	f004 fb1f 	bl	801b864 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	891b      	ldrh	r3, [r3, #8]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d006      	beq.n	801723c <tcp_enqueue_flags+0x100>
 801722e:	4b32      	ldr	r3, [pc, #200]	; (80172f8 <tcp_enqueue_flags+0x1bc>)
 8017230:	f240 4243 	movw	r2, #1091	; 0x443
 8017234:	4936      	ldr	r1, [pc, #216]	; (8017310 <tcp_enqueue_flags+0x1d4>)
 8017236:	4832      	ldr	r0, [pc, #200]	; (8017300 <tcp_enqueue_flags+0x1c4>)
 8017238:	f004 fb14 	bl	801b864 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017240:	2b00      	cmp	r3, #0
 8017242:	d103      	bne.n	801724c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	68fa      	ldr	r2, [r7, #12]
 8017248:	66da      	str	r2, [r3, #108]	; 0x6c
 801724a:	e00d      	b.n	8017268 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017250:	61bb      	str	r3, [r7, #24]
 8017252:	e002      	b.n	801725a <tcp_enqueue_flags+0x11e>
 8017254:	69bb      	ldr	r3, [r7, #24]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	61bb      	str	r3, [r7, #24]
 801725a:	69bb      	ldr	r3, [r7, #24]
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d1f8      	bne.n	8017254 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8017262:	69bb      	ldr	r3, [r7, #24]
 8017264:	68fa      	ldr	r2, [r7, #12]
 8017266:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	2200      	movs	r2, #0
 801726c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8017270:	78fb      	ldrb	r3, [r7, #3]
 8017272:	f003 0302 	and.w	r3, r3, #2
 8017276:	2b00      	cmp	r3, #0
 8017278:	d104      	bne.n	8017284 <tcp_enqueue_flags+0x148>
 801727a:	78fb      	ldrb	r3, [r7, #3]
 801727c:	f003 0301 	and.w	r3, r3, #1
 8017280:	2b00      	cmp	r3, #0
 8017282:	d004      	beq.n	801728e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017288:	1c5a      	adds	r2, r3, #1
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801728e:	78fb      	ldrb	r3, [r7, #3]
 8017290:	f003 0301 	and.w	r3, r3, #1
 8017294:	2b00      	cmp	r3, #0
 8017296:	d006      	beq.n	80172a6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	8b5b      	ldrh	r3, [r3, #26]
 801729c:	f043 0320 	orr.w	r3, r3, #32
 80172a0:	b29a      	uxth	r2, r3
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	685b      	ldr	r3, [r3, #4]
 80172aa:	4618      	mov	r0, r3
 80172ac:	f7fa fd04 	bl	8011cb8 <pbuf_clen>
 80172b0:	4603      	mov	r3, r0
 80172b2:	461a      	mov	r2, r3
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80172ba:	4413      	add	r3, r2
 80172bc:	b29a      	uxth	r2, r3
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d00e      	beq.n	80172ec <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d10a      	bne.n	80172ec <tcp_enqueue_flags+0x1b0>
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d106      	bne.n	80172ec <tcp_enqueue_flags+0x1b0>
 80172de:	4b06      	ldr	r3, [pc, #24]	; (80172f8 <tcp_enqueue_flags+0x1bc>)
 80172e0:	f240 4265 	movw	r2, #1125	; 0x465
 80172e4:	490b      	ldr	r1, [pc, #44]	; (8017314 <tcp_enqueue_flags+0x1d8>)
 80172e6:	4806      	ldr	r0, [pc, #24]	; (8017300 <tcp_enqueue_flags+0x1c4>)
 80172e8:	f004 fabc 	bl	801b864 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80172ec:	2300      	movs	r3, #0
}
 80172ee:	4618      	mov	r0, r3
 80172f0:	3720      	adds	r7, #32
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}
 80172f6:	bf00      	nop
 80172f8:	0801ed8c 	.word	0x0801ed8c
 80172fc:	0801f1b0 	.word	0x0801f1b0
 8017300:	0801ede0 	.word	0x0801ede0
 8017304:	0801f208 	.word	0x0801f208
 8017308:	0801f228 	.word	0x0801f228
 801730c:	0801f264 	.word	0x0801f264
 8017310:	0801f27c 	.word	0x0801f27c
 8017314:	0801f2a8 	.word	0x0801f2a8

08017318 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017318:	b5b0      	push	{r4, r5, r7, lr}
 801731a:	b08a      	sub	sp, #40	; 0x28
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d106      	bne.n	8017334 <tcp_output+0x1c>
 8017326:	4b8a      	ldr	r3, [pc, #552]	; (8017550 <tcp_output+0x238>)
 8017328:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801732c:	4989      	ldr	r1, [pc, #548]	; (8017554 <tcp_output+0x23c>)
 801732e:	488a      	ldr	r0, [pc, #552]	; (8017558 <tcp_output+0x240>)
 8017330:	f004 fa98 	bl	801b864 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	7d1b      	ldrb	r3, [r3, #20]
 8017338:	2b01      	cmp	r3, #1
 801733a:	d106      	bne.n	801734a <tcp_output+0x32>
 801733c:	4b84      	ldr	r3, [pc, #528]	; (8017550 <tcp_output+0x238>)
 801733e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8017342:	4986      	ldr	r1, [pc, #536]	; (801755c <tcp_output+0x244>)
 8017344:	4884      	ldr	r0, [pc, #528]	; (8017558 <tcp_output+0x240>)
 8017346:	f004 fa8d 	bl	801b864 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801734a:	4b85      	ldr	r3, [pc, #532]	; (8017560 <tcp_output+0x248>)
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	687a      	ldr	r2, [r7, #4]
 8017350:	429a      	cmp	r2, r3
 8017352:	d101      	bne.n	8017358 <tcp_output+0x40>
    return ERR_OK;
 8017354:	2300      	movs	r3, #0
 8017356:	e1ce      	b.n	80176f6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017364:	4293      	cmp	r3, r2
 8017366:	bf28      	it	cs
 8017368:	4613      	movcs	r3, r2
 801736a:	b29b      	uxth	r3, r3
 801736c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017372:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8017374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017376:	2b00      	cmp	r3, #0
 8017378:	d10b      	bne.n	8017392 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	8b5b      	ldrh	r3, [r3, #26]
 801737e:	f003 0302 	and.w	r3, r3, #2
 8017382:	2b00      	cmp	r3, #0
 8017384:	f000 81aa 	beq.w	80176dc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8017388:	6878      	ldr	r0, [r7, #4]
 801738a:	f000 fded 	bl	8017f68 <tcp_send_empty_ack>
 801738e:	4603      	mov	r3, r0
 8017390:	e1b1      	b.n	80176f6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8017392:	6879      	ldr	r1, [r7, #4]
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	3304      	adds	r3, #4
 8017398:	461a      	mov	r2, r3
 801739a:	6878      	ldr	r0, [r7, #4]
 801739c:	f7ff f824 	bl	80163e8 <tcp_route>
 80173a0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80173a2:	697b      	ldr	r3, [r7, #20]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d102      	bne.n	80173ae <tcp_output+0x96>
    return ERR_RTE;
 80173a8:	f06f 0303 	mvn.w	r3, #3
 80173ac:	e1a3      	b.n	80176f6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d003      	beq.n	80173bc <tcp_output+0xa4>
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d111      	bne.n	80173e0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80173bc:	697b      	ldr	r3, [r7, #20]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d002      	beq.n	80173c8 <tcp_output+0xb0>
 80173c2:	697b      	ldr	r3, [r7, #20]
 80173c4:	3304      	adds	r3, #4
 80173c6:	e000      	b.n	80173ca <tcp_output+0xb2>
 80173c8:	2300      	movs	r3, #0
 80173ca:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80173cc:	693b      	ldr	r3, [r7, #16]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d102      	bne.n	80173d8 <tcp_output+0xc0>
      return ERR_RTE;
 80173d2:	f06f 0303 	mvn.w	r3, #3
 80173d6:	e18e      	b.n	80176f6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80173d8:	693b      	ldr	r3, [r7, #16]
 80173da:	681a      	ldr	r2, [r3, #0]
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80173e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e2:	68db      	ldr	r3, [r3, #12]
 80173e4:	685b      	ldr	r3, [r3, #4]
 80173e6:	4618      	mov	r0, r3
 80173e8:	f7f8 fe73 	bl	80100d2 <lwip_htonl>
 80173ec:	4602      	mov	r2, r0
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173f2:	1ad3      	subs	r3, r2, r3
 80173f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80173f6:	8912      	ldrh	r2, [r2, #8]
 80173f8:	4413      	add	r3, r2
 80173fa:	69ba      	ldr	r2, [r7, #24]
 80173fc:	429a      	cmp	r2, r3
 80173fe:	d227      	bcs.n	8017450 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017406:	461a      	mov	r2, r3
 8017408:	69bb      	ldr	r3, [r7, #24]
 801740a:	4293      	cmp	r3, r2
 801740c:	d114      	bne.n	8017438 <tcp_output+0x120>
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017412:	2b00      	cmp	r3, #0
 8017414:	d110      	bne.n	8017438 <tcp_output+0x120>
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801741c:	2b00      	cmp	r3, #0
 801741e:	d10b      	bne.n	8017438 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	2200      	movs	r2, #0
 8017424:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	2201      	movs	r2, #1
 801742c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	2200      	movs	r2, #0
 8017434:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	8b5b      	ldrh	r3, [r3, #26]
 801743c:	f003 0302 	and.w	r3, r3, #2
 8017440:	2b00      	cmp	r3, #0
 8017442:	f000 814d 	beq.w	80176e0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8017446:	6878      	ldr	r0, [r7, #4]
 8017448:	f000 fd8e 	bl	8017f68 <tcp_send_empty_ack>
 801744c:	4603      	mov	r3, r0
 801744e:	e152      	b.n	80176f6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	2200      	movs	r2, #0
 8017454:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801745c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801745e:	6a3b      	ldr	r3, [r7, #32]
 8017460:	2b00      	cmp	r3, #0
 8017462:	f000 811c 	beq.w	801769e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8017466:	e002      	b.n	801746e <tcp_output+0x156>
 8017468:	6a3b      	ldr	r3, [r7, #32]
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	623b      	str	r3, [r7, #32]
 801746e:	6a3b      	ldr	r3, [r7, #32]
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d1f8      	bne.n	8017468 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8017476:	e112      	b.n	801769e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8017478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801747a:	68db      	ldr	r3, [r3, #12]
 801747c:	899b      	ldrh	r3, [r3, #12]
 801747e:	b29b      	uxth	r3, r3
 8017480:	4618      	mov	r0, r3
 8017482:	f7f8 fe11 	bl	80100a8 <lwip_htons>
 8017486:	4603      	mov	r3, r0
 8017488:	b2db      	uxtb	r3, r3
 801748a:	f003 0304 	and.w	r3, r3, #4
 801748e:	2b00      	cmp	r3, #0
 8017490:	d006      	beq.n	80174a0 <tcp_output+0x188>
 8017492:	4b2f      	ldr	r3, [pc, #188]	; (8017550 <tcp_output+0x238>)
 8017494:	f240 5236 	movw	r2, #1334	; 0x536
 8017498:	4932      	ldr	r1, [pc, #200]	; (8017564 <tcp_output+0x24c>)
 801749a:	482f      	ldr	r0, [pc, #188]	; (8017558 <tcp_output+0x240>)
 801749c:	f004 f9e2 	bl	801b864 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d01f      	beq.n	80174e8 <tcp_output+0x1d0>
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	8b5b      	ldrh	r3, [r3, #26]
 80174ac:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d119      	bne.n	80174e8 <tcp_output+0x1d0>
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d00b      	beq.n	80174d4 <tcp_output+0x1bc>
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d110      	bne.n	80174e8 <tcp_output+0x1d0>
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80174ca:	891a      	ldrh	r2, [r3, #8]
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174d0:	429a      	cmp	r2, r3
 80174d2:	d209      	bcs.n	80174e8 <tcp_output+0x1d0>
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d004      	beq.n	80174e8 <tcp_output+0x1d0>
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80174e4:	2b08      	cmp	r3, #8
 80174e6:	d901      	bls.n	80174ec <tcp_output+0x1d4>
 80174e8:	2301      	movs	r3, #1
 80174ea:	e000      	b.n	80174ee <tcp_output+0x1d6>
 80174ec:	2300      	movs	r3, #0
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d106      	bne.n	8017500 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	8b5b      	ldrh	r3, [r3, #26]
 80174f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	f000 80e4 	beq.w	80176c8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	7d1b      	ldrb	r3, [r3, #20]
 8017504:	2b02      	cmp	r3, #2
 8017506:	d00d      	beq.n	8017524 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801750a:	68db      	ldr	r3, [r3, #12]
 801750c:	899b      	ldrh	r3, [r3, #12]
 801750e:	b29c      	uxth	r4, r3
 8017510:	2010      	movs	r0, #16
 8017512:	f7f8 fdc9 	bl	80100a8 <lwip_htons>
 8017516:	4603      	mov	r3, r0
 8017518:	461a      	mov	r2, r3
 801751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801751c:	68db      	ldr	r3, [r3, #12]
 801751e:	4322      	orrs	r2, r4
 8017520:	b292      	uxth	r2, r2
 8017522:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8017524:	697a      	ldr	r2, [r7, #20]
 8017526:	6879      	ldr	r1, [r7, #4]
 8017528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801752a:	f000 f909 	bl	8017740 <tcp_output_segment>
 801752e:	4603      	mov	r3, r0
 8017530:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8017532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017536:	2b00      	cmp	r3, #0
 8017538:	d016      	beq.n	8017568 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	8b5b      	ldrh	r3, [r3, #26]
 801753e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017542:	b29a      	uxth	r2, r3
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	835a      	strh	r2, [r3, #26]
      return err;
 8017548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801754c:	e0d3      	b.n	80176f6 <tcp_output+0x3de>
 801754e:	bf00      	nop
 8017550:	0801ed8c 	.word	0x0801ed8c
 8017554:	0801f2d0 	.word	0x0801f2d0
 8017558:	0801ede0 	.word	0x0801ede0
 801755c:	0801f2e8 	.word	0x0801f2e8
 8017560:	2405e8d4 	.word	0x2405e8d4
 8017564:	0801f310 	.word	0x0801f310
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8017568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801756a:	681a      	ldr	r2, [r3, #0]
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	7d1b      	ldrb	r3, [r3, #20]
 8017574:	2b02      	cmp	r3, #2
 8017576:	d006      	beq.n	8017586 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	8b5b      	ldrh	r3, [r3, #26]
 801757c:	f023 0303 	bic.w	r3, r3, #3
 8017580:	b29a      	uxth	r2, r3
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017588:	68db      	ldr	r3, [r3, #12]
 801758a:	685b      	ldr	r3, [r3, #4]
 801758c:	4618      	mov	r0, r3
 801758e:	f7f8 fda0 	bl	80100d2 <lwip_htonl>
 8017592:	4604      	mov	r4, r0
 8017594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017596:	891b      	ldrh	r3, [r3, #8]
 8017598:	461d      	mov	r5, r3
 801759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801759c:	68db      	ldr	r3, [r3, #12]
 801759e:	899b      	ldrh	r3, [r3, #12]
 80175a0:	b29b      	uxth	r3, r3
 80175a2:	4618      	mov	r0, r3
 80175a4:	f7f8 fd80 	bl	80100a8 <lwip_htons>
 80175a8:	4603      	mov	r3, r0
 80175aa:	b2db      	uxtb	r3, r3
 80175ac:	f003 0303 	and.w	r3, r3, #3
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d001      	beq.n	80175b8 <tcp_output+0x2a0>
 80175b4:	2301      	movs	r3, #1
 80175b6:	e000      	b.n	80175ba <tcp_output+0x2a2>
 80175b8:	2300      	movs	r3, #0
 80175ba:	442b      	add	r3, r5
 80175bc:	4423      	add	r3, r4
 80175be:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80175c4:	68bb      	ldr	r3, [r7, #8]
 80175c6:	1ad3      	subs	r3, r2, r3
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	da02      	bge.n	80175d2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	68ba      	ldr	r2, [r7, #8]
 80175d0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80175d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175d4:	891b      	ldrh	r3, [r3, #8]
 80175d6:	461c      	mov	r4, r3
 80175d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175da:	68db      	ldr	r3, [r3, #12]
 80175dc:	899b      	ldrh	r3, [r3, #12]
 80175de:	b29b      	uxth	r3, r3
 80175e0:	4618      	mov	r0, r3
 80175e2:	f7f8 fd61 	bl	80100a8 <lwip_htons>
 80175e6:	4603      	mov	r3, r0
 80175e8:	b2db      	uxtb	r3, r3
 80175ea:	f003 0303 	and.w	r3, r3, #3
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d001      	beq.n	80175f6 <tcp_output+0x2de>
 80175f2:	2301      	movs	r3, #1
 80175f4:	e000      	b.n	80175f8 <tcp_output+0x2e0>
 80175f6:	2300      	movs	r3, #0
 80175f8:	4423      	add	r3, r4
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d049      	beq.n	8017692 <tcp_output+0x37a>
      seg->next = NULL;
 80175fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017600:	2200      	movs	r2, #0
 8017602:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017608:	2b00      	cmp	r3, #0
 801760a:	d105      	bne.n	8017618 <tcp_output+0x300>
        pcb->unacked = seg;
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017610:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8017612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017614:	623b      	str	r3, [r7, #32]
 8017616:	e03f      	b.n	8017698 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801761a:	68db      	ldr	r3, [r3, #12]
 801761c:	685b      	ldr	r3, [r3, #4]
 801761e:	4618      	mov	r0, r3
 8017620:	f7f8 fd57 	bl	80100d2 <lwip_htonl>
 8017624:	4604      	mov	r4, r0
 8017626:	6a3b      	ldr	r3, [r7, #32]
 8017628:	68db      	ldr	r3, [r3, #12]
 801762a:	685b      	ldr	r3, [r3, #4]
 801762c:	4618      	mov	r0, r3
 801762e:	f7f8 fd50 	bl	80100d2 <lwip_htonl>
 8017632:	4603      	mov	r3, r0
 8017634:	1ae3      	subs	r3, r4, r3
 8017636:	2b00      	cmp	r3, #0
 8017638:	da24      	bge.n	8017684 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	3370      	adds	r3, #112	; 0x70
 801763e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017640:	e002      	b.n	8017648 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8017642:	69fb      	ldr	r3, [r7, #28]
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017648:	69fb      	ldr	r3, [r7, #28]
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	2b00      	cmp	r3, #0
 801764e:	d011      	beq.n	8017674 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017650:	69fb      	ldr	r3, [r7, #28]
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	68db      	ldr	r3, [r3, #12]
 8017656:	685b      	ldr	r3, [r3, #4]
 8017658:	4618      	mov	r0, r3
 801765a:	f7f8 fd3a 	bl	80100d2 <lwip_htonl>
 801765e:	4604      	mov	r4, r0
 8017660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017662:	68db      	ldr	r3, [r3, #12]
 8017664:	685b      	ldr	r3, [r3, #4]
 8017666:	4618      	mov	r0, r3
 8017668:	f7f8 fd33 	bl	80100d2 <lwip_htonl>
 801766c:	4603      	mov	r3, r0
 801766e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8017670:	2b00      	cmp	r3, #0
 8017672:	dbe6      	blt.n	8017642 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8017674:	69fb      	ldr	r3, [r7, #28]
 8017676:	681a      	ldr	r2, [r3, #0]
 8017678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801767a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801767c:	69fb      	ldr	r3, [r7, #28]
 801767e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017680:	601a      	str	r2, [r3, #0]
 8017682:	e009      	b.n	8017698 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8017684:	6a3b      	ldr	r3, [r7, #32]
 8017686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017688:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801768a:	6a3b      	ldr	r3, [r7, #32]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	623b      	str	r3, [r7, #32]
 8017690:	e002      	b.n	8017698 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8017692:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017694:	f7fb ff05 	bl	80134a2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801769c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d012      	beq.n	80176ca <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80176a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176a6:	68db      	ldr	r3, [r3, #12]
 80176a8:	685b      	ldr	r3, [r3, #4]
 80176aa:	4618      	mov	r0, r3
 80176ac:	f7f8 fd11 	bl	80100d2 <lwip_htonl>
 80176b0:	4602      	mov	r2, r0
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80176b6:	1ad3      	subs	r3, r2, r3
 80176b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80176ba:	8912      	ldrh	r2, [r2, #8]
 80176bc:	4413      	add	r3, r2
  while (seg != NULL &&
 80176be:	69ba      	ldr	r2, [r7, #24]
 80176c0:	429a      	cmp	r2, r3
 80176c2:	f4bf aed9 	bcs.w	8017478 <tcp_output+0x160>
 80176c6:	e000      	b.n	80176ca <tcp_output+0x3b2>
      break;
 80176c8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d108      	bne.n	80176e4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	2200      	movs	r2, #0
 80176d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80176da:	e004      	b.n	80176e6 <tcp_output+0x3ce>
    goto output_done;
 80176dc:	bf00      	nop
 80176de:	e002      	b.n	80176e6 <tcp_output+0x3ce>
    goto output_done;
 80176e0:	bf00      	nop
 80176e2:	e000      	b.n	80176e6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80176e4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	8b5b      	ldrh	r3, [r3, #26]
 80176ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80176ee:	b29a      	uxth	r2, r3
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80176f4:	2300      	movs	r3, #0
}
 80176f6:	4618      	mov	r0, r3
 80176f8:	3728      	adds	r7, #40	; 0x28
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bdb0      	pop	{r4, r5, r7, pc}
 80176fe:	bf00      	nop

08017700 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b082      	sub	sp, #8
 8017704:	af00      	add	r7, sp, #0
 8017706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d106      	bne.n	801771c <tcp_output_segment_busy+0x1c>
 801770e:	4b09      	ldr	r3, [pc, #36]	; (8017734 <tcp_output_segment_busy+0x34>)
 8017710:	f240 529a 	movw	r2, #1434	; 0x59a
 8017714:	4908      	ldr	r1, [pc, #32]	; (8017738 <tcp_output_segment_busy+0x38>)
 8017716:	4809      	ldr	r0, [pc, #36]	; (801773c <tcp_output_segment_busy+0x3c>)
 8017718:	f004 f8a4 	bl	801b864 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	685b      	ldr	r3, [r3, #4]
 8017720:	7b9b      	ldrb	r3, [r3, #14]
 8017722:	2b01      	cmp	r3, #1
 8017724:	d001      	beq.n	801772a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017726:	2301      	movs	r3, #1
 8017728:	e000      	b.n	801772c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801772a:	2300      	movs	r3, #0
}
 801772c:	4618      	mov	r0, r3
 801772e:	3708      	adds	r7, #8
 8017730:	46bd      	mov	sp, r7
 8017732:	bd80      	pop	{r7, pc}
 8017734:	0801ed8c 	.word	0x0801ed8c
 8017738:	0801f328 	.word	0x0801f328
 801773c:	0801ede0 	.word	0x0801ede0

08017740 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017740:	b5b0      	push	{r4, r5, r7, lr}
 8017742:	b08c      	sub	sp, #48	; 0x30
 8017744:	af04      	add	r7, sp, #16
 8017746:	60f8      	str	r0, [r7, #12]
 8017748:	60b9      	str	r1, [r7, #8]
 801774a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d106      	bne.n	8017760 <tcp_output_segment+0x20>
 8017752:	4b6c      	ldr	r3, [pc, #432]	; (8017904 <tcp_output_segment+0x1c4>)
 8017754:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8017758:	496b      	ldr	r1, [pc, #428]	; (8017908 <tcp_output_segment+0x1c8>)
 801775a:	486c      	ldr	r0, [pc, #432]	; (801790c <tcp_output_segment+0x1cc>)
 801775c:	f004 f882 	bl	801b864 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8017760:	68bb      	ldr	r3, [r7, #8]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d106      	bne.n	8017774 <tcp_output_segment+0x34>
 8017766:	4b67      	ldr	r3, [pc, #412]	; (8017904 <tcp_output_segment+0x1c4>)
 8017768:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801776c:	4968      	ldr	r1, [pc, #416]	; (8017910 <tcp_output_segment+0x1d0>)
 801776e:	4867      	ldr	r0, [pc, #412]	; (801790c <tcp_output_segment+0x1cc>)
 8017770:	f004 f878 	bl	801b864 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d106      	bne.n	8017788 <tcp_output_segment+0x48>
 801777a:	4b62      	ldr	r3, [pc, #392]	; (8017904 <tcp_output_segment+0x1c4>)
 801777c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8017780:	4964      	ldr	r1, [pc, #400]	; (8017914 <tcp_output_segment+0x1d4>)
 8017782:	4862      	ldr	r0, [pc, #392]	; (801790c <tcp_output_segment+0x1cc>)
 8017784:	f004 f86e 	bl	801b864 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017788:	68f8      	ldr	r0, [r7, #12]
 801778a:	f7ff ffb9 	bl	8017700 <tcp_output_segment_busy>
 801778e:	4603      	mov	r3, r0
 8017790:	2b00      	cmp	r3, #0
 8017792:	d001      	beq.n	8017798 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017794:	2300      	movs	r3, #0
 8017796:	e0b1      	b.n	80178fc <tcp_output_segment+0x1bc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017798:	68bb      	ldr	r3, [r7, #8]
 801779a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	68dc      	ldr	r4, [r3, #12]
 80177a0:	4610      	mov	r0, r2
 80177a2:	f7f8 fc96 	bl	80100d2 <lwip_htonl>
 80177a6:	4603      	mov	r3, r0
 80177a8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80177aa:	68bb      	ldr	r3, [r7, #8]
 80177ac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	68dc      	ldr	r4, [r3, #12]
 80177b2:	4610      	mov	r0, r2
 80177b4:	f7f8 fc78 	bl	80100a8 <lwip_htons>
 80177b8:	4603      	mov	r3, r0
 80177ba:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80177bc:	68bb      	ldr	r3, [r7, #8]
 80177be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177c0:	68ba      	ldr	r2, [r7, #8]
 80177c2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80177c4:	441a      	add	r2, r3
 80177c6:	68bb      	ldr	r3, [r7, #8]
 80177c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	68db      	ldr	r3, [r3, #12]
 80177ce:	3314      	adds	r3, #20
 80177d0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	7a9b      	ldrb	r3, [r3, #10]
 80177d6:	f003 0301 	and.w	r3, r3, #1
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d015      	beq.n	801780a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80177de:	68bb      	ldr	r3, [r7, #8]
 80177e0:	3304      	adds	r3, #4
 80177e2:	461a      	mov	r2, r3
 80177e4:	6879      	ldr	r1, [r7, #4]
 80177e6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80177ea:	f7fc fa1f 	bl	8013c2c <tcp_eff_send_mss_netif>
 80177ee:	4603      	mov	r3, r0
 80177f0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80177f2:	8b7b      	ldrh	r3, [r7, #26]
 80177f4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80177f8:	4618      	mov	r0, r3
 80177fa:	f7f8 fc6a 	bl	80100d2 <lwip_htonl>
 80177fe:	4602      	mov	r2, r0
 8017800:	69fb      	ldr	r3, [r7, #28]
 8017802:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017804:	69fb      	ldr	r3, [r7, #28]
 8017806:	3304      	adds	r3, #4
 8017808:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801780a:	68bb      	ldr	r3, [r7, #8]
 801780c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017810:	2b00      	cmp	r3, #0
 8017812:	da02      	bge.n	801781a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017814:	68bb      	ldr	r3, [r7, #8]
 8017816:	2200      	movs	r2, #0
 8017818:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801781a:	68bb      	ldr	r3, [r7, #8]
 801781c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801781e:	2b00      	cmp	r3, #0
 8017820:	d10c      	bne.n	801783c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8017822:	4b3d      	ldr	r3, [pc, #244]	; (8017918 <tcp_output_segment+0x1d8>)
 8017824:	681a      	ldr	r2, [r3, #0]
 8017826:	68bb      	ldr	r3, [r7, #8]
 8017828:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	68db      	ldr	r3, [r3, #12]
 801782e:	685b      	ldr	r3, [r3, #4]
 8017830:	4618      	mov	r0, r3
 8017832:	f7f8 fc4e 	bl	80100d2 <lwip_htonl>
 8017836:	4602      	mov	r2, r0
 8017838:	68bb      	ldr	r3, [r7, #8]
 801783a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	68da      	ldr	r2, [r3, #12]
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	685b      	ldr	r3, [r3, #4]
 8017844:	685b      	ldr	r3, [r3, #4]
 8017846:	1ad3      	subs	r3, r2, r3
 8017848:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	685b      	ldr	r3, [r3, #4]
 801784e:	8959      	ldrh	r1, [r3, #10]
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	685b      	ldr	r3, [r3, #4]
 8017854:	8b3a      	ldrh	r2, [r7, #24]
 8017856:	1a8a      	subs	r2, r1, r2
 8017858:	b292      	uxth	r2, r2
 801785a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	685b      	ldr	r3, [r3, #4]
 8017860:	8919      	ldrh	r1, [r3, #8]
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	685b      	ldr	r3, [r3, #4]
 8017866:	8b3a      	ldrh	r2, [r7, #24]
 8017868:	1a8a      	subs	r2, r1, r2
 801786a:	b292      	uxth	r2, r2
 801786c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	685b      	ldr	r3, [r3, #4]
 8017872:	68fa      	ldr	r2, [r7, #12]
 8017874:	68d2      	ldr	r2, [r2, #12]
 8017876:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	68db      	ldr	r3, [r3, #12]
 801787c:	2200      	movs	r2, #0
 801787e:	741a      	strb	r2, [r3, #16]
 8017880:	2200      	movs	r2, #0
 8017882:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	68db      	ldr	r3, [r3, #12]
 8017888:	f103 0214 	add.w	r2, r3, #20
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	7a9b      	ldrb	r3, [r3, #10]
 8017890:	009b      	lsls	r3, r3, #2
 8017892:	f003 0304 	and.w	r3, r3, #4
 8017896:	4413      	add	r3, r2
 8017898:	69fa      	ldr	r2, [r7, #28]
 801789a:	429a      	cmp	r2, r3
 801789c:	d006      	beq.n	80178ac <tcp_output_segment+0x16c>
 801789e:	4b19      	ldr	r3, [pc, #100]	; (8017904 <tcp_output_segment+0x1c4>)
 80178a0:	f240 621c 	movw	r2, #1564	; 0x61c
 80178a4:	491d      	ldr	r1, [pc, #116]	; (801791c <tcp_output_segment+0x1dc>)
 80178a6:	4819      	ldr	r0, [pc, #100]	; (801790c <tcp_output_segment+0x1cc>)
 80178a8:	f003 ffdc 	bl	801b864 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80178b4:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 80178b6:	68bd      	ldr	r5, [r7, #8]
 80178b8:	68bb      	ldr	r3, [r7, #8]
 80178ba:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80178bc:	68fa      	ldr	r2, [r7, #12]
 80178be:	68d4      	ldr	r4, [r2, #12]
 80178c0:	9300      	str	r3, [sp, #0]
 80178c2:	462b      	mov	r3, r5
 80178c4:	460a      	mov	r2, r1
 80178c6:	2106      	movs	r1, #6
 80178c8:	f7f8 fd20 	bl	801030c <ip_chksum_pseudo>
 80178cc:	4603      	mov	r3, r0
 80178ce:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	6858      	ldr	r0, [r3, #4]
 80178d4:	68b9      	ldr	r1, [r7, #8]
 80178d6:	68bb      	ldr	r3, [r7, #8]
 80178d8:	1d1c      	adds	r4, r3, #4
 80178da:	68bb      	ldr	r3, [r7, #8]
 80178dc:	7add      	ldrb	r5, [r3, #11]
 80178de:	68bb      	ldr	r3, [r7, #8]
 80178e0:	7a9b      	ldrb	r3, [r3, #10]
 80178e2:	687a      	ldr	r2, [r7, #4]
 80178e4:	9202      	str	r2, [sp, #8]
 80178e6:	2206      	movs	r2, #6
 80178e8:	9201      	str	r2, [sp, #4]
 80178ea:	9300      	str	r3, [sp, #0]
 80178ec:	462b      	mov	r3, r5
 80178ee:	4622      	mov	r2, r4
 80178f0:	f002 fbe2 	bl	801a0b8 <ip4_output_if>
 80178f4:	4603      	mov	r3, r0
 80178f6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80178f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80178fc:	4618      	mov	r0, r3
 80178fe:	3720      	adds	r7, #32
 8017900:	46bd      	mov	sp, r7
 8017902:	bdb0      	pop	{r4, r5, r7, pc}
 8017904:	0801ed8c 	.word	0x0801ed8c
 8017908:	0801f350 	.word	0x0801f350
 801790c:	0801ede0 	.word	0x0801ede0
 8017910:	0801f370 	.word	0x0801f370
 8017914:	0801f390 	.word	0x0801f390
 8017918:	2405e888 	.word	0x2405e888
 801791c:	0801f3b4 	.word	0x0801f3b4

08017920 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017920:	b5b0      	push	{r4, r5, r7, lr}
 8017922:	b084      	sub	sp, #16
 8017924:	af00      	add	r7, sp, #0
 8017926:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d106      	bne.n	801793c <tcp_rexmit_rto_prepare+0x1c>
 801792e:	4b31      	ldr	r3, [pc, #196]	; (80179f4 <tcp_rexmit_rto_prepare+0xd4>)
 8017930:	f240 6263 	movw	r2, #1635	; 0x663
 8017934:	4930      	ldr	r1, [pc, #192]	; (80179f8 <tcp_rexmit_rto_prepare+0xd8>)
 8017936:	4831      	ldr	r0, [pc, #196]	; (80179fc <tcp_rexmit_rto_prepare+0xdc>)
 8017938:	f003 ff94 	bl	801b864 <iprintf>

  if (pcb->unacked == NULL) {
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017940:	2b00      	cmp	r3, #0
 8017942:	d102      	bne.n	801794a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017944:	f06f 0305 	mvn.w	r3, #5
 8017948:	e050      	b.n	80179ec <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801794e:	60fb      	str	r3, [r7, #12]
 8017950:	e00b      	b.n	801796a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8017952:	68f8      	ldr	r0, [r7, #12]
 8017954:	f7ff fed4 	bl	8017700 <tcp_output_segment_busy>
 8017958:	4603      	mov	r3, r0
 801795a:	2b00      	cmp	r3, #0
 801795c:	d002      	beq.n	8017964 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801795e:	f06f 0305 	mvn.w	r3, #5
 8017962:	e043      	b.n	80179ec <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	60fb      	str	r3, [r7, #12]
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d1ef      	bne.n	8017952 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8017972:	68f8      	ldr	r0, [r7, #12]
 8017974:	f7ff fec4 	bl	8017700 <tcp_output_segment_busy>
 8017978:	4603      	mov	r3, r0
 801797a:	2b00      	cmp	r3, #0
 801797c:	d002      	beq.n	8017984 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801797e:	f06f 0305 	mvn.w	r3, #5
 8017982:	e033      	b.n	80179ec <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	2200      	movs	r2, #0
 8017998:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	8b5b      	ldrh	r3, [r3, #26]
 801799e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80179a2:	b29a      	uxth	r2, r3
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	68db      	ldr	r3, [r3, #12]
 80179ac:	685b      	ldr	r3, [r3, #4]
 80179ae:	4618      	mov	r0, r3
 80179b0:	f7f8 fb8f 	bl	80100d2 <lwip_htonl>
 80179b4:	4604      	mov	r4, r0
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	891b      	ldrh	r3, [r3, #8]
 80179ba:	461d      	mov	r5, r3
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	68db      	ldr	r3, [r3, #12]
 80179c0:	899b      	ldrh	r3, [r3, #12]
 80179c2:	b29b      	uxth	r3, r3
 80179c4:	4618      	mov	r0, r3
 80179c6:	f7f8 fb6f 	bl	80100a8 <lwip_htons>
 80179ca:	4603      	mov	r3, r0
 80179cc:	b2db      	uxtb	r3, r3
 80179ce:	f003 0303 	and.w	r3, r3, #3
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d001      	beq.n	80179da <tcp_rexmit_rto_prepare+0xba>
 80179d6:	2301      	movs	r3, #1
 80179d8:	e000      	b.n	80179dc <tcp_rexmit_rto_prepare+0xbc>
 80179da:	2300      	movs	r3, #0
 80179dc:	442b      	add	r3, r5
 80179de:	18e2      	adds	r2, r4, r3
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	2200      	movs	r2, #0
 80179e8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80179ea:	2300      	movs	r3, #0
}
 80179ec:	4618      	mov	r0, r3
 80179ee:	3710      	adds	r7, #16
 80179f0:	46bd      	mov	sp, r7
 80179f2:	bdb0      	pop	{r4, r5, r7, pc}
 80179f4:	0801ed8c 	.word	0x0801ed8c
 80179f8:	0801f3c8 	.word	0x0801f3c8
 80179fc:	0801ede0 	.word	0x0801ede0

08017a00 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8017a00:	b580      	push	{r7, lr}
 8017a02:	b082      	sub	sp, #8
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d106      	bne.n	8017a1c <tcp_rexmit_rto_commit+0x1c>
 8017a0e:	4b0d      	ldr	r3, [pc, #52]	; (8017a44 <tcp_rexmit_rto_commit+0x44>)
 8017a10:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017a14:	490c      	ldr	r1, [pc, #48]	; (8017a48 <tcp_rexmit_rto_commit+0x48>)
 8017a16:	480d      	ldr	r0, [pc, #52]	; (8017a4c <tcp_rexmit_rto_commit+0x4c>)
 8017a18:	f003 ff24 	bl	801b864 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017a22:	2bff      	cmp	r3, #255	; 0xff
 8017a24:	d007      	beq.n	8017a36 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017a2c:	3301      	adds	r3, #1
 8017a2e:	b2da      	uxtb	r2, r3
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017a36:	6878      	ldr	r0, [r7, #4]
 8017a38:	f7ff fc6e 	bl	8017318 <tcp_output>
}
 8017a3c:	bf00      	nop
 8017a3e:	3708      	adds	r7, #8
 8017a40:	46bd      	mov	sp, r7
 8017a42:	bd80      	pop	{r7, pc}
 8017a44:	0801ed8c 	.word	0x0801ed8c
 8017a48:	0801f3ec 	.word	0x0801f3ec
 8017a4c:	0801ede0 	.word	0x0801ede0

08017a50 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b082      	sub	sp, #8
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d106      	bne.n	8017a6c <tcp_rexmit_rto+0x1c>
 8017a5e:	4b0a      	ldr	r3, [pc, #40]	; (8017a88 <tcp_rexmit_rto+0x38>)
 8017a60:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8017a64:	4909      	ldr	r1, [pc, #36]	; (8017a8c <tcp_rexmit_rto+0x3c>)
 8017a66:	480a      	ldr	r0, [pc, #40]	; (8017a90 <tcp_rexmit_rto+0x40>)
 8017a68:	f003 fefc 	bl	801b864 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017a6c:	6878      	ldr	r0, [r7, #4]
 8017a6e:	f7ff ff57 	bl	8017920 <tcp_rexmit_rto_prepare>
 8017a72:	4603      	mov	r3, r0
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d102      	bne.n	8017a7e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017a78:	6878      	ldr	r0, [r7, #4]
 8017a7a:	f7ff ffc1 	bl	8017a00 <tcp_rexmit_rto_commit>
  }
}
 8017a7e:	bf00      	nop
 8017a80:	3708      	adds	r7, #8
 8017a82:	46bd      	mov	sp, r7
 8017a84:	bd80      	pop	{r7, pc}
 8017a86:	bf00      	nop
 8017a88:	0801ed8c 	.word	0x0801ed8c
 8017a8c:	0801f410 	.word	0x0801f410
 8017a90:	0801ede0 	.word	0x0801ede0

08017a94 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017a94:	b590      	push	{r4, r7, lr}
 8017a96:	b085      	sub	sp, #20
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d106      	bne.n	8017ab0 <tcp_rexmit+0x1c>
 8017aa2:	4b2f      	ldr	r3, [pc, #188]	; (8017b60 <tcp_rexmit+0xcc>)
 8017aa4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017aa8:	492e      	ldr	r1, [pc, #184]	; (8017b64 <tcp_rexmit+0xd0>)
 8017aaa:	482f      	ldr	r0, [pc, #188]	; (8017b68 <tcp_rexmit+0xd4>)
 8017aac:	f003 feda 	bl	801b864 <iprintf>

  if (pcb->unacked == NULL) {
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d102      	bne.n	8017abe <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017ab8:	f06f 0305 	mvn.w	r3, #5
 8017abc:	e04c      	b.n	8017b58 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ac2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017ac4:	68b8      	ldr	r0, [r7, #8]
 8017ac6:	f7ff fe1b 	bl	8017700 <tcp_output_segment_busy>
 8017aca:	4603      	mov	r3, r0
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d002      	beq.n	8017ad6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017ad0:	f06f 0305 	mvn.w	r3, #5
 8017ad4:	e040      	b.n	8017b58 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017ad6:	68bb      	ldr	r3, [r7, #8]
 8017ad8:	681a      	ldr	r2, [r3, #0]
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	336c      	adds	r3, #108	; 0x6c
 8017ae2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017ae4:	e002      	b.n	8017aec <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d011      	beq.n	8017b18 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	68db      	ldr	r3, [r3, #12]
 8017afa:	685b      	ldr	r3, [r3, #4]
 8017afc:	4618      	mov	r0, r3
 8017afe:	f7f8 fae8 	bl	80100d2 <lwip_htonl>
 8017b02:	4604      	mov	r4, r0
 8017b04:	68bb      	ldr	r3, [r7, #8]
 8017b06:	68db      	ldr	r3, [r3, #12]
 8017b08:	685b      	ldr	r3, [r3, #4]
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f7f8 fae1 	bl	80100d2 <lwip_htonl>
 8017b10:	4603      	mov	r3, r0
 8017b12:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	dbe6      	blt.n	8017ae6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	681a      	ldr	r2, [r3, #0]
 8017b1c:	68bb      	ldr	r3, [r7, #8]
 8017b1e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	68ba      	ldr	r2, [r7, #8]
 8017b24:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017b26:	68bb      	ldr	r3, [r7, #8]
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d103      	bne.n	8017b36 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	2200      	movs	r2, #0
 8017b32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017b3c:	2bff      	cmp	r3, #255	; 0xff
 8017b3e:	d007      	beq.n	8017b50 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017b46:	3301      	adds	r3, #1
 8017b48:	b2da      	uxtb	r2, r3
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	2200      	movs	r2, #0
 8017b54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017b56:	2300      	movs	r3, #0
}
 8017b58:	4618      	mov	r0, r3
 8017b5a:	3714      	adds	r7, #20
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	bd90      	pop	{r4, r7, pc}
 8017b60:	0801ed8c 	.word	0x0801ed8c
 8017b64:	0801f42c 	.word	0x0801f42c
 8017b68:	0801ede0 	.word	0x0801ede0

08017b6c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017b6c:	b580      	push	{r7, lr}
 8017b6e:	b082      	sub	sp, #8
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d106      	bne.n	8017b88 <tcp_rexmit_fast+0x1c>
 8017b7a:	4b2a      	ldr	r3, [pc, #168]	; (8017c24 <tcp_rexmit_fast+0xb8>)
 8017b7c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8017b80:	4929      	ldr	r1, [pc, #164]	; (8017c28 <tcp_rexmit_fast+0xbc>)
 8017b82:	482a      	ldr	r0, [pc, #168]	; (8017c2c <tcp_rexmit_fast+0xc0>)
 8017b84:	f003 fe6e 	bl	801b864 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d045      	beq.n	8017c1c <tcp_rexmit_fast+0xb0>
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	8b5b      	ldrh	r3, [r3, #26]
 8017b94:	f003 0304 	and.w	r3, r3, #4
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d13f      	bne.n	8017c1c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017b9c:	6878      	ldr	r0, [r7, #4]
 8017b9e:	f7ff ff79 	bl	8017a94 <tcp_rexmit>
 8017ba2:	4603      	mov	r3, r0
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d139      	bne.n	8017c1c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017bb4:	4293      	cmp	r3, r2
 8017bb6:	bf28      	it	cs
 8017bb8:	4613      	movcs	r3, r2
 8017bba:	b29b      	uxth	r3, r3
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	da00      	bge.n	8017bc2 <tcp_rexmit_fast+0x56>
 8017bc0:	3301      	adds	r3, #1
 8017bc2:	105b      	asrs	r3, r3, #1
 8017bc4:	b29a      	uxth	r2, r3
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017bd2:	461a      	mov	r2, r3
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017bd8:	005b      	lsls	r3, r3, #1
 8017bda:	429a      	cmp	r2, r3
 8017bdc:	d206      	bcs.n	8017bec <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017be2:	005b      	lsls	r3, r3, #1
 8017be4:	b29a      	uxth	r2, r3
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017bf6:	4619      	mov	r1, r3
 8017bf8:	0049      	lsls	r1, r1, #1
 8017bfa:	440b      	add	r3, r1
 8017bfc:	b29b      	uxth	r3, r3
 8017bfe:	4413      	add	r3, r2
 8017c00:	b29a      	uxth	r2, r3
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	8b5b      	ldrh	r3, [r3, #26]
 8017c0c:	f043 0304 	orr.w	r3, r3, #4
 8017c10:	b29a      	uxth	r2, r3
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	2200      	movs	r2, #0
 8017c1a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8017c1c:	bf00      	nop
 8017c1e:	3708      	adds	r7, #8
 8017c20:	46bd      	mov	sp, r7
 8017c22:	bd80      	pop	{r7, pc}
 8017c24:	0801ed8c 	.word	0x0801ed8c
 8017c28:	0801f444 	.word	0x0801f444
 8017c2c:	0801ede0 	.word	0x0801ede0

08017c30 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b086      	sub	sp, #24
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	60f8      	str	r0, [r7, #12]
 8017c38:	607b      	str	r3, [r7, #4]
 8017c3a:	460b      	mov	r3, r1
 8017c3c:	817b      	strh	r3, [r7, #10]
 8017c3e:	4613      	mov	r3, r2
 8017c40:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017c42:	897a      	ldrh	r2, [r7, #10]
 8017c44:	893b      	ldrh	r3, [r7, #8]
 8017c46:	4413      	add	r3, r2
 8017c48:	b29b      	uxth	r3, r3
 8017c4a:	3314      	adds	r3, #20
 8017c4c:	b29b      	uxth	r3, r3
 8017c4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017c52:	4619      	mov	r1, r3
 8017c54:	2022      	movs	r0, #34	; 0x22
 8017c56:	f7f9 fcb9 	bl	80115cc <pbuf_alloc>
 8017c5a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017c5c:	697b      	ldr	r3, [r7, #20]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d04d      	beq.n	8017cfe <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017c62:	897b      	ldrh	r3, [r7, #10]
 8017c64:	3313      	adds	r3, #19
 8017c66:	697a      	ldr	r2, [r7, #20]
 8017c68:	8952      	ldrh	r2, [r2, #10]
 8017c6a:	4293      	cmp	r3, r2
 8017c6c:	db06      	blt.n	8017c7c <tcp_output_alloc_header_common+0x4c>
 8017c6e:	4b26      	ldr	r3, [pc, #152]	; (8017d08 <tcp_output_alloc_header_common+0xd8>)
 8017c70:	f240 7223 	movw	r2, #1827	; 0x723
 8017c74:	4925      	ldr	r1, [pc, #148]	; (8017d0c <tcp_output_alloc_header_common+0xdc>)
 8017c76:	4826      	ldr	r0, [pc, #152]	; (8017d10 <tcp_output_alloc_header_common+0xe0>)
 8017c78:	f003 fdf4 	bl	801b864 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017c7c:	697b      	ldr	r3, [r7, #20]
 8017c7e:	685b      	ldr	r3, [r3, #4]
 8017c80:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8017c82:	8c3b      	ldrh	r3, [r7, #32]
 8017c84:	4618      	mov	r0, r3
 8017c86:	f7f8 fa0f 	bl	80100a8 <lwip_htons>
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	461a      	mov	r2, r3
 8017c8e:	693b      	ldr	r3, [r7, #16]
 8017c90:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8017c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017c94:	4618      	mov	r0, r3
 8017c96:	f7f8 fa07 	bl	80100a8 <lwip_htons>
 8017c9a:	4603      	mov	r3, r0
 8017c9c:	461a      	mov	r2, r3
 8017c9e:	693b      	ldr	r3, [r7, #16]
 8017ca0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8017ca2:	693b      	ldr	r3, [r7, #16]
 8017ca4:	687a      	ldr	r2, [r7, #4]
 8017ca6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017ca8:	68f8      	ldr	r0, [r7, #12]
 8017caa:	f7f8 fa12 	bl	80100d2 <lwip_htonl>
 8017cae:	4602      	mov	r2, r0
 8017cb0:	693b      	ldr	r3, [r7, #16]
 8017cb2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017cb4:	897b      	ldrh	r3, [r7, #10]
 8017cb6:	089b      	lsrs	r3, r3, #2
 8017cb8:	b29b      	uxth	r3, r3
 8017cba:	3305      	adds	r3, #5
 8017cbc:	b29b      	uxth	r3, r3
 8017cbe:	031b      	lsls	r3, r3, #12
 8017cc0:	b29a      	uxth	r2, r3
 8017cc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017cc6:	b29b      	uxth	r3, r3
 8017cc8:	4313      	orrs	r3, r2
 8017cca:	b29b      	uxth	r3, r3
 8017ccc:	4618      	mov	r0, r3
 8017cce:	f7f8 f9eb 	bl	80100a8 <lwip_htons>
 8017cd2:	4603      	mov	r3, r0
 8017cd4:	461a      	mov	r2, r3
 8017cd6:	693b      	ldr	r3, [r7, #16]
 8017cd8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017cda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017cdc:	4618      	mov	r0, r3
 8017cde:	f7f8 f9e3 	bl	80100a8 <lwip_htons>
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	461a      	mov	r2, r3
 8017ce6:	693b      	ldr	r3, [r7, #16]
 8017ce8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017cea:	693b      	ldr	r3, [r7, #16]
 8017cec:	2200      	movs	r2, #0
 8017cee:	741a      	strb	r2, [r3, #16]
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017cf4:	693b      	ldr	r3, [r7, #16]
 8017cf6:	2200      	movs	r2, #0
 8017cf8:	749a      	strb	r2, [r3, #18]
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8017cfe:	697b      	ldr	r3, [r7, #20]
}
 8017d00:	4618      	mov	r0, r3
 8017d02:	3718      	adds	r7, #24
 8017d04:	46bd      	mov	sp, r7
 8017d06:	bd80      	pop	{r7, pc}
 8017d08:	0801ed8c 	.word	0x0801ed8c
 8017d0c:	0801f464 	.word	0x0801f464
 8017d10:	0801ede0 	.word	0x0801ede0

08017d14 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017d14:	b5b0      	push	{r4, r5, r7, lr}
 8017d16:	b08a      	sub	sp, #40	; 0x28
 8017d18:	af04      	add	r7, sp, #16
 8017d1a:	60f8      	str	r0, [r7, #12]
 8017d1c:	607b      	str	r3, [r7, #4]
 8017d1e:	460b      	mov	r3, r1
 8017d20:	817b      	strh	r3, [r7, #10]
 8017d22:	4613      	mov	r3, r2
 8017d24:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d106      	bne.n	8017d3a <tcp_output_alloc_header+0x26>
 8017d2c:	4b15      	ldr	r3, [pc, #84]	; (8017d84 <tcp_output_alloc_header+0x70>)
 8017d2e:	f240 7242 	movw	r2, #1858	; 0x742
 8017d32:	4915      	ldr	r1, [pc, #84]	; (8017d88 <tcp_output_alloc_header+0x74>)
 8017d34:	4815      	ldr	r0, [pc, #84]	; (8017d8c <tcp_output_alloc_header+0x78>)
 8017d36:	f003 fd95 	bl	801b864 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	8adb      	ldrh	r3, [r3, #22]
 8017d42:	68fa      	ldr	r2, [r7, #12]
 8017d44:	8b12      	ldrh	r2, [r2, #24]
 8017d46:	68f9      	ldr	r1, [r7, #12]
 8017d48:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8017d4a:	893d      	ldrh	r5, [r7, #8]
 8017d4c:	897c      	ldrh	r4, [r7, #10]
 8017d4e:	9103      	str	r1, [sp, #12]
 8017d50:	2110      	movs	r1, #16
 8017d52:	9102      	str	r1, [sp, #8]
 8017d54:	9201      	str	r2, [sp, #4]
 8017d56:	9300      	str	r3, [sp, #0]
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	462a      	mov	r2, r5
 8017d5c:	4621      	mov	r1, r4
 8017d5e:	f7ff ff67 	bl	8017c30 <tcp_output_alloc_header_common>
 8017d62:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017d64:	697b      	ldr	r3, [r7, #20]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d006      	beq.n	8017d78 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d6e:	68fa      	ldr	r2, [r7, #12]
 8017d70:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017d72:	441a      	add	r2, r3
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017d78:	697b      	ldr	r3, [r7, #20]
}
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	3718      	adds	r7, #24
 8017d7e:	46bd      	mov	sp, r7
 8017d80:	bdb0      	pop	{r4, r5, r7, pc}
 8017d82:	bf00      	nop
 8017d84:	0801ed8c 	.word	0x0801ed8c
 8017d88:	0801f494 	.word	0x0801f494
 8017d8c:	0801ede0 	.word	0x0801ede0

08017d90 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b088      	sub	sp, #32
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	60f8      	str	r0, [r7, #12]
 8017d98:	60b9      	str	r1, [r7, #8]
 8017d9a:	4611      	mov	r1, r2
 8017d9c:	461a      	mov	r2, r3
 8017d9e:	460b      	mov	r3, r1
 8017da0:	71fb      	strb	r3, [r7, #7]
 8017da2:	4613      	mov	r3, r2
 8017da4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017da6:	2300      	movs	r3, #0
 8017da8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017daa:	68bb      	ldr	r3, [r7, #8]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d106      	bne.n	8017dbe <tcp_output_fill_options+0x2e>
 8017db0:	4b13      	ldr	r3, [pc, #76]	; (8017e00 <tcp_output_fill_options+0x70>)
 8017db2:	f240 7256 	movw	r2, #1878	; 0x756
 8017db6:	4913      	ldr	r1, [pc, #76]	; (8017e04 <tcp_output_fill_options+0x74>)
 8017db8:	4813      	ldr	r0, [pc, #76]	; (8017e08 <tcp_output_fill_options+0x78>)
 8017dba:	f003 fd53 	bl	801b864 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017dbe:	68bb      	ldr	r3, [r7, #8]
 8017dc0:	685b      	ldr	r3, [r3, #4]
 8017dc2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017dc4:	69bb      	ldr	r3, [r7, #24]
 8017dc6:	3314      	adds	r3, #20
 8017dc8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017dca:	69bb      	ldr	r3, [r7, #24]
 8017dcc:	f103 0214 	add.w	r2, r3, #20
 8017dd0:	8bfb      	ldrh	r3, [r7, #30]
 8017dd2:	009b      	lsls	r3, r3, #2
 8017dd4:	4619      	mov	r1, r3
 8017dd6:	79fb      	ldrb	r3, [r7, #7]
 8017dd8:	009b      	lsls	r3, r3, #2
 8017dda:	f003 0304 	and.w	r3, r3, #4
 8017dde:	440b      	add	r3, r1
 8017de0:	4413      	add	r3, r2
 8017de2:	697a      	ldr	r2, [r7, #20]
 8017de4:	429a      	cmp	r2, r3
 8017de6:	d006      	beq.n	8017df6 <tcp_output_fill_options+0x66>
 8017de8:	4b05      	ldr	r3, [pc, #20]	; (8017e00 <tcp_output_fill_options+0x70>)
 8017dea:	f240 7275 	movw	r2, #1909	; 0x775
 8017dee:	4907      	ldr	r1, [pc, #28]	; (8017e0c <tcp_output_fill_options+0x7c>)
 8017df0:	4805      	ldr	r0, [pc, #20]	; (8017e08 <tcp_output_fill_options+0x78>)
 8017df2:	f003 fd37 	bl	801b864 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017df6:	bf00      	nop
 8017df8:	3720      	adds	r7, #32
 8017dfa:	46bd      	mov	sp, r7
 8017dfc:	bd80      	pop	{r7, pc}
 8017dfe:	bf00      	nop
 8017e00:	0801ed8c 	.word	0x0801ed8c
 8017e04:	0801f4bc 	.word	0x0801f4bc
 8017e08:	0801ede0 	.word	0x0801ede0
 8017e0c:	0801f3b4 	.word	0x0801f3b4

08017e10 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b08c      	sub	sp, #48	; 0x30
 8017e14:	af04      	add	r7, sp, #16
 8017e16:	60f8      	str	r0, [r7, #12]
 8017e18:	60b9      	str	r1, [r7, #8]
 8017e1a:	607a      	str	r2, [r7, #4]
 8017e1c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017e1e:	68bb      	ldr	r3, [r7, #8]
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d106      	bne.n	8017e32 <tcp_output_control_segment+0x22>
 8017e24:	4b24      	ldr	r3, [pc, #144]	; (8017eb8 <tcp_output_control_segment+0xa8>)
 8017e26:	f240 7287 	movw	r2, #1927	; 0x787
 8017e2a:	4924      	ldr	r1, [pc, #144]	; (8017ebc <tcp_output_control_segment+0xac>)
 8017e2c:	4824      	ldr	r0, [pc, #144]	; (8017ec0 <tcp_output_control_segment+0xb0>)
 8017e2e:	f003 fd19 	bl	801b864 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8017e32:	683a      	ldr	r2, [r7, #0]
 8017e34:	6879      	ldr	r1, [r7, #4]
 8017e36:	68f8      	ldr	r0, [r7, #12]
 8017e38:	f7fe fad6 	bl	80163e8 <tcp_route>
 8017e3c:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8017e3e:	69bb      	ldr	r3, [r7, #24]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d102      	bne.n	8017e4a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017e44:	23fc      	movs	r3, #252	; 0xfc
 8017e46:	77fb      	strb	r3, [r7, #31]
 8017e48:	e02c      	b.n	8017ea4 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 8017e4a:	68bb      	ldr	r3, [r7, #8]
 8017e4c:	685b      	ldr	r3, [r3, #4]
 8017e4e:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8017e50:	68bb      	ldr	r3, [r7, #8]
 8017e52:	891a      	ldrh	r2, [r3, #8]
 8017e54:	683b      	ldr	r3, [r7, #0]
 8017e56:	9300      	str	r3, [sp, #0]
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	2106      	movs	r1, #6
 8017e5c:	68b8      	ldr	r0, [r7, #8]
 8017e5e:	f7f8 fa55 	bl	801030c <ip_chksum_pseudo>
 8017e62:	4603      	mov	r3, r0
 8017e64:	461a      	mov	r2, r3
 8017e66:	697b      	ldr	r3, [r7, #20]
 8017e68:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d006      	beq.n	8017e7e <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	7adb      	ldrb	r3, [r3, #11]
 8017e74:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	7a9b      	ldrb	r3, [r3, #10]
 8017e7a:	777b      	strb	r3, [r7, #29]
 8017e7c:	e003      	b.n	8017e86 <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017e7e:	23ff      	movs	r3, #255	; 0xff
 8017e80:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 8017e82:	2300      	movs	r3, #0
 8017e84:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017e86:	7fba      	ldrb	r2, [r7, #30]
 8017e88:	69bb      	ldr	r3, [r7, #24]
 8017e8a:	9302      	str	r3, [sp, #8]
 8017e8c:	2306      	movs	r3, #6
 8017e8e:	9301      	str	r3, [sp, #4]
 8017e90:	7f7b      	ldrb	r3, [r7, #29]
 8017e92:	9300      	str	r3, [sp, #0]
 8017e94:	4613      	mov	r3, r2
 8017e96:	683a      	ldr	r2, [r7, #0]
 8017e98:	6879      	ldr	r1, [r7, #4]
 8017e9a:	68b8      	ldr	r0, [r7, #8]
 8017e9c:	f002 f90c 	bl	801a0b8 <ip4_output_if>
 8017ea0:	4603      	mov	r3, r0
 8017ea2:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017ea4:	68b8      	ldr	r0, [r7, #8]
 8017ea6:	f7f9 fe79 	bl	8011b9c <pbuf_free>
  return err;
 8017eaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017eae:	4618      	mov	r0, r3
 8017eb0:	3720      	adds	r7, #32
 8017eb2:	46bd      	mov	sp, r7
 8017eb4:	bd80      	pop	{r7, pc}
 8017eb6:	bf00      	nop
 8017eb8:	0801ed8c 	.word	0x0801ed8c
 8017ebc:	0801f4e4 	.word	0x0801f4e4
 8017ec0:	0801ede0 	.word	0x0801ede0

08017ec4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017ec4:	b590      	push	{r4, r7, lr}
 8017ec6:	b08b      	sub	sp, #44	; 0x2c
 8017ec8:	af04      	add	r7, sp, #16
 8017eca:	60f8      	str	r0, [r7, #12]
 8017ecc:	60b9      	str	r1, [r7, #8]
 8017ece:	607a      	str	r2, [r7, #4]
 8017ed0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017ed2:	683b      	ldr	r3, [r7, #0]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d106      	bne.n	8017ee6 <tcp_rst+0x22>
 8017ed8:	4b1f      	ldr	r3, [pc, #124]	; (8017f58 <tcp_rst+0x94>)
 8017eda:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8017ede:	491f      	ldr	r1, [pc, #124]	; (8017f5c <tcp_rst+0x98>)
 8017ee0:	481f      	ldr	r0, [pc, #124]	; (8017f60 <tcp_rst+0x9c>)
 8017ee2:	f003 fcbf 	bl	801b864 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d106      	bne.n	8017efa <tcp_rst+0x36>
 8017eec:	4b1a      	ldr	r3, [pc, #104]	; (8017f58 <tcp_rst+0x94>)
 8017eee:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8017ef2:	491c      	ldr	r1, [pc, #112]	; (8017f64 <tcp_rst+0xa0>)
 8017ef4:	481a      	ldr	r0, [pc, #104]	; (8017f60 <tcp_rst+0x9c>)
 8017ef6:	f003 fcb5 	bl	801b864 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017efa:	2300      	movs	r3, #0
 8017efc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017efe:	f246 0308 	movw	r3, #24584	; 0x6008
 8017f02:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017f04:	7dfb      	ldrb	r3, [r7, #23]
 8017f06:	b29c      	uxth	r4, r3
 8017f08:	68b8      	ldr	r0, [r7, #8]
 8017f0a:	f7f8 f8e2 	bl	80100d2 <lwip_htonl>
 8017f0e:	4602      	mov	r2, r0
 8017f10:	8abb      	ldrh	r3, [r7, #20]
 8017f12:	9303      	str	r3, [sp, #12]
 8017f14:	2314      	movs	r3, #20
 8017f16:	9302      	str	r3, [sp, #8]
 8017f18:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017f1a:	9301      	str	r3, [sp, #4]
 8017f1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017f1e:	9300      	str	r3, [sp, #0]
 8017f20:	4613      	mov	r3, r2
 8017f22:	2200      	movs	r2, #0
 8017f24:	4621      	mov	r1, r4
 8017f26:	6878      	ldr	r0, [r7, #4]
 8017f28:	f7ff fe82 	bl	8017c30 <tcp_output_alloc_header_common>
 8017f2c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017f2e:	693b      	ldr	r3, [r7, #16]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d00c      	beq.n	8017f4e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017f34:	7dfb      	ldrb	r3, [r7, #23]
 8017f36:	2200      	movs	r2, #0
 8017f38:	6939      	ldr	r1, [r7, #16]
 8017f3a:	68f8      	ldr	r0, [r7, #12]
 8017f3c:	f7ff ff28 	bl	8017d90 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f42:	683a      	ldr	r2, [r7, #0]
 8017f44:	6939      	ldr	r1, [r7, #16]
 8017f46:	68f8      	ldr	r0, [r7, #12]
 8017f48:	f7ff ff62 	bl	8017e10 <tcp_output_control_segment>
 8017f4c:	e000      	b.n	8017f50 <tcp_rst+0x8c>
    return;
 8017f4e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017f50:	371c      	adds	r7, #28
 8017f52:	46bd      	mov	sp, r7
 8017f54:	bd90      	pop	{r4, r7, pc}
 8017f56:	bf00      	nop
 8017f58:	0801ed8c 	.word	0x0801ed8c
 8017f5c:	0801f510 	.word	0x0801f510
 8017f60:	0801ede0 	.word	0x0801ede0
 8017f64:	0801f52c 	.word	0x0801f52c

08017f68 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017f68:	b590      	push	{r4, r7, lr}
 8017f6a:	b087      	sub	sp, #28
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017f70:	2300      	movs	r3, #0
 8017f72:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017f74:	2300      	movs	r3, #0
 8017f76:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d106      	bne.n	8017f8c <tcp_send_empty_ack+0x24>
 8017f7e:	4b28      	ldr	r3, [pc, #160]	; (8018020 <tcp_send_empty_ack+0xb8>)
 8017f80:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8017f84:	4927      	ldr	r1, [pc, #156]	; (8018024 <tcp_send_empty_ack+0xbc>)
 8017f86:	4828      	ldr	r0, [pc, #160]	; (8018028 <tcp_send_empty_ack+0xc0>)
 8017f88:	f003 fc6c 	bl	801b864 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017f8c:	7dfb      	ldrb	r3, [r7, #23]
 8017f8e:	009b      	lsls	r3, r3, #2
 8017f90:	b2db      	uxtb	r3, r3
 8017f92:	f003 0304 	and.w	r3, r3, #4
 8017f96:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017f98:	7d7b      	ldrb	r3, [r7, #21]
 8017f9a:	b29c      	uxth	r4, r3
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	f7f8 f896 	bl	80100d2 <lwip_htonl>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	2200      	movs	r2, #0
 8017faa:	4621      	mov	r1, r4
 8017fac:	6878      	ldr	r0, [r7, #4]
 8017fae:	f7ff feb1 	bl	8017d14 <tcp_output_alloc_header>
 8017fb2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017fb4:	693b      	ldr	r3, [r7, #16]
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d109      	bne.n	8017fce <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	8b5b      	ldrh	r3, [r3, #26]
 8017fbe:	f043 0303 	orr.w	r3, r3, #3
 8017fc2:	b29a      	uxth	r2, r3
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017fc8:	f06f 0301 	mvn.w	r3, #1
 8017fcc:	e023      	b.n	8018016 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017fce:	7dbb      	ldrb	r3, [r7, #22]
 8017fd0:	7dfa      	ldrb	r2, [r7, #23]
 8017fd2:	6939      	ldr	r1, [r7, #16]
 8017fd4:	6878      	ldr	r0, [r7, #4]
 8017fd6:	f7ff fedb 	bl	8017d90 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017fda:	687a      	ldr	r2, [r7, #4]
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	3304      	adds	r3, #4
 8017fe0:	6939      	ldr	r1, [r7, #16]
 8017fe2:	6878      	ldr	r0, [r7, #4]
 8017fe4:	f7ff ff14 	bl	8017e10 <tcp_output_control_segment>
 8017fe8:	4603      	mov	r3, r0
 8017fea:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d007      	beq.n	8018004 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	8b5b      	ldrh	r3, [r3, #26]
 8017ff8:	f043 0303 	orr.w	r3, r3, #3
 8017ffc:	b29a      	uxth	r2, r3
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	835a      	strh	r2, [r3, #26]
 8018002:	e006      	b.n	8018012 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	8b5b      	ldrh	r3, [r3, #26]
 8018008:	f023 0303 	bic.w	r3, r3, #3
 801800c:	b29a      	uxth	r2, r3
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8018012:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018016:	4618      	mov	r0, r3
 8018018:	371c      	adds	r7, #28
 801801a:	46bd      	mov	sp, r7
 801801c:	bd90      	pop	{r4, r7, pc}
 801801e:	bf00      	nop
 8018020:	0801ed8c 	.word	0x0801ed8c
 8018024:	0801f548 	.word	0x0801f548
 8018028:	0801ede0 	.word	0x0801ede0

0801802c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801802c:	b590      	push	{r4, r7, lr}
 801802e:	b087      	sub	sp, #28
 8018030:	af00      	add	r7, sp, #0
 8018032:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018034:	2300      	movs	r3, #0
 8018036:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d106      	bne.n	801804c <tcp_keepalive+0x20>
 801803e:	4b18      	ldr	r3, [pc, #96]	; (80180a0 <tcp_keepalive+0x74>)
 8018040:	f640 0224 	movw	r2, #2084	; 0x824
 8018044:	4917      	ldr	r1, [pc, #92]	; (80180a4 <tcp_keepalive+0x78>)
 8018046:	4818      	ldr	r0, [pc, #96]	; (80180a8 <tcp_keepalive+0x7c>)
 8018048:	f003 fc0c 	bl	801b864 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801804c:	7dfb      	ldrb	r3, [r7, #23]
 801804e:	b29c      	uxth	r4, r3
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018054:	3b01      	subs	r3, #1
 8018056:	4618      	mov	r0, r3
 8018058:	f7f8 f83b 	bl	80100d2 <lwip_htonl>
 801805c:	4603      	mov	r3, r0
 801805e:	2200      	movs	r2, #0
 8018060:	4621      	mov	r1, r4
 8018062:	6878      	ldr	r0, [r7, #4]
 8018064:	f7ff fe56 	bl	8017d14 <tcp_output_alloc_header>
 8018068:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801806a:	693b      	ldr	r3, [r7, #16]
 801806c:	2b00      	cmp	r3, #0
 801806e:	d102      	bne.n	8018076 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8018070:	f04f 33ff 	mov.w	r3, #4294967295
 8018074:	e010      	b.n	8018098 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018076:	7dfb      	ldrb	r3, [r7, #23]
 8018078:	2200      	movs	r2, #0
 801807a:	6939      	ldr	r1, [r7, #16]
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f7ff fe87 	bl	8017d90 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018082:	687a      	ldr	r2, [r7, #4]
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	3304      	adds	r3, #4
 8018088:	6939      	ldr	r1, [r7, #16]
 801808a:	6878      	ldr	r0, [r7, #4]
 801808c:	f7ff fec0 	bl	8017e10 <tcp_output_control_segment>
 8018090:	4603      	mov	r3, r0
 8018092:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018094:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018098:	4618      	mov	r0, r3
 801809a:	371c      	adds	r7, #28
 801809c:	46bd      	mov	sp, r7
 801809e:	bd90      	pop	{r4, r7, pc}
 80180a0:	0801ed8c 	.word	0x0801ed8c
 80180a4:	0801f568 	.word	0x0801f568
 80180a8:	0801ede0 	.word	0x0801ede0

080180ac <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80180ac:	b590      	push	{r4, r7, lr}
 80180ae:	b08b      	sub	sp, #44	; 0x2c
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80180b4:	2300      	movs	r3, #0
 80180b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d106      	bne.n	80180ce <tcp_zero_window_probe+0x22>
 80180c0:	4b4c      	ldr	r3, [pc, #304]	; (80181f4 <tcp_zero_window_probe+0x148>)
 80180c2:	f640 024f 	movw	r2, #2127	; 0x84f
 80180c6:	494c      	ldr	r1, [pc, #304]	; (80181f8 <tcp_zero_window_probe+0x14c>)
 80180c8:	484c      	ldr	r0, [pc, #304]	; (80181fc <tcp_zero_window_probe+0x150>)
 80180ca:	f003 fbcb 	bl	801b864 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180d2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80180d4:	6a3b      	ldr	r3, [r7, #32]
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d101      	bne.n	80180de <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80180da:	2300      	movs	r3, #0
 80180dc:	e086      	b.n	80181ec <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80180e4:	2bff      	cmp	r3, #255	; 0xff
 80180e6:	d007      	beq.n	80180f8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80180ee:	3301      	adds	r3, #1
 80180f0:	b2da      	uxtb	r2, r3
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80180f8:	6a3b      	ldr	r3, [r7, #32]
 80180fa:	68db      	ldr	r3, [r3, #12]
 80180fc:	899b      	ldrh	r3, [r3, #12]
 80180fe:	b29b      	uxth	r3, r3
 8018100:	4618      	mov	r0, r3
 8018102:	f7f7 ffd1 	bl	80100a8 <lwip_htons>
 8018106:	4603      	mov	r3, r0
 8018108:	b2db      	uxtb	r3, r3
 801810a:	f003 0301 	and.w	r3, r3, #1
 801810e:	2b00      	cmp	r3, #0
 8018110:	d005      	beq.n	801811e <tcp_zero_window_probe+0x72>
 8018112:	6a3b      	ldr	r3, [r7, #32]
 8018114:	891b      	ldrh	r3, [r3, #8]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d101      	bne.n	801811e <tcp_zero_window_probe+0x72>
 801811a:	2301      	movs	r3, #1
 801811c:	e000      	b.n	8018120 <tcp_zero_window_probe+0x74>
 801811e:	2300      	movs	r3, #0
 8018120:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8018122:	7ffb      	ldrb	r3, [r7, #31]
 8018124:	2b00      	cmp	r3, #0
 8018126:	bf0c      	ite	eq
 8018128:	2301      	moveq	r3, #1
 801812a:	2300      	movne	r3, #0
 801812c:	b2db      	uxtb	r3, r3
 801812e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8018130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018134:	b299      	uxth	r1, r3
 8018136:	6a3b      	ldr	r3, [r7, #32]
 8018138:	68db      	ldr	r3, [r3, #12]
 801813a:	685b      	ldr	r3, [r3, #4]
 801813c:	8bba      	ldrh	r2, [r7, #28]
 801813e:	6878      	ldr	r0, [r7, #4]
 8018140:	f7ff fde8 	bl	8017d14 <tcp_output_alloc_header>
 8018144:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8018146:	69bb      	ldr	r3, [r7, #24]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d102      	bne.n	8018152 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801814c:	f04f 33ff 	mov.w	r3, #4294967295
 8018150:	e04c      	b.n	80181ec <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8018152:	69bb      	ldr	r3, [r7, #24]
 8018154:	685b      	ldr	r3, [r3, #4]
 8018156:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8018158:	7ffb      	ldrb	r3, [r7, #31]
 801815a:	2b00      	cmp	r3, #0
 801815c:	d011      	beq.n	8018182 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801815e:	697b      	ldr	r3, [r7, #20]
 8018160:	899b      	ldrh	r3, [r3, #12]
 8018162:	b29b      	uxth	r3, r3
 8018164:	b21b      	sxth	r3, r3
 8018166:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801816a:	b21c      	sxth	r4, r3
 801816c:	2011      	movs	r0, #17
 801816e:	f7f7 ff9b 	bl	80100a8 <lwip_htons>
 8018172:	4603      	mov	r3, r0
 8018174:	b21b      	sxth	r3, r3
 8018176:	4323      	orrs	r3, r4
 8018178:	b21b      	sxth	r3, r3
 801817a:	b29a      	uxth	r2, r3
 801817c:	697b      	ldr	r3, [r7, #20]
 801817e:	819a      	strh	r2, [r3, #12]
 8018180:	e010      	b.n	80181a4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8018182:	69bb      	ldr	r3, [r7, #24]
 8018184:	685b      	ldr	r3, [r3, #4]
 8018186:	3314      	adds	r3, #20
 8018188:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801818a:	6a3b      	ldr	r3, [r7, #32]
 801818c:	6858      	ldr	r0, [r3, #4]
 801818e:	6a3b      	ldr	r3, [r7, #32]
 8018190:	685b      	ldr	r3, [r3, #4]
 8018192:	891a      	ldrh	r2, [r3, #8]
 8018194:	6a3b      	ldr	r3, [r7, #32]
 8018196:	891b      	ldrh	r3, [r3, #8]
 8018198:	1ad3      	subs	r3, r2, r3
 801819a:	b29b      	uxth	r3, r3
 801819c:	2201      	movs	r2, #1
 801819e:	6939      	ldr	r1, [r7, #16]
 80181a0:	f7f9 fef2 	bl	8011f88 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80181a4:	6a3b      	ldr	r3, [r7, #32]
 80181a6:	68db      	ldr	r3, [r3, #12]
 80181a8:	685b      	ldr	r3, [r3, #4]
 80181aa:	4618      	mov	r0, r3
 80181ac:	f7f7 ff91 	bl	80100d2 <lwip_htonl>
 80181b0:	4603      	mov	r3, r0
 80181b2:	3301      	adds	r3, #1
 80181b4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	1ad3      	subs	r3, r2, r3
 80181be:	2b00      	cmp	r3, #0
 80181c0:	da02      	bge.n	80181c8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	68fa      	ldr	r2, [r7, #12]
 80181c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80181c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80181cc:	2200      	movs	r2, #0
 80181ce:	69b9      	ldr	r1, [r7, #24]
 80181d0:	6878      	ldr	r0, [r7, #4]
 80181d2:	f7ff fddd 	bl	8017d90 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80181d6:	687a      	ldr	r2, [r7, #4]
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	3304      	adds	r3, #4
 80181dc:	69b9      	ldr	r1, [r7, #24]
 80181de:	6878      	ldr	r0, [r7, #4]
 80181e0:	f7ff fe16 	bl	8017e10 <tcp_output_control_segment>
 80181e4:	4603      	mov	r3, r0
 80181e6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80181e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80181ec:	4618      	mov	r0, r3
 80181ee:	372c      	adds	r7, #44	; 0x2c
 80181f0:	46bd      	mov	sp, r7
 80181f2:	bd90      	pop	{r4, r7, pc}
 80181f4:	0801ed8c 	.word	0x0801ed8c
 80181f8:	0801f584 	.word	0x0801f584
 80181fc:	0801ede0 	.word	0x0801ede0

08018200 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8018200:	b580      	push	{r7, lr}
 8018202:	b082      	sub	sp, #8
 8018204:	af00      	add	r7, sp, #0
 8018206:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8018208:	f7f9 ffac 	bl	8012164 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801820c:	4b0a      	ldr	r3, [pc, #40]	; (8018238 <tcpip_tcp_timer+0x38>)
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d103      	bne.n	801821c <tcpip_tcp_timer+0x1c>
 8018214:	4b09      	ldr	r3, [pc, #36]	; (801823c <tcpip_tcp_timer+0x3c>)
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d005      	beq.n	8018228 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801821c:	2200      	movs	r2, #0
 801821e:	4908      	ldr	r1, [pc, #32]	; (8018240 <tcpip_tcp_timer+0x40>)
 8018220:	20fa      	movs	r0, #250	; 0xfa
 8018222:	f000 f8f3 	bl	801840c <sys_timeout>
 8018226:	e003      	b.n	8018230 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8018228:	4b06      	ldr	r3, [pc, #24]	; (8018244 <tcpip_tcp_timer+0x44>)
 801822a:	2200      	movs	r2, #0
 801822c:	601a      	str	r2, [r3, #0]
  }
}
 801822e:	bf00      	nop
 8018230:	bf00      	nop
 8018232:	3708      	adds	r7, #8
 8018234:	46bd      	mov	sp, r7
 8018236:	bd80      	pop	{r7, pc}
 8018238:	2405e894 	.word	0x2405e894
 801823c:	2405e898 	.word	0x2405e898
 8018240:	08018201 	.word	0x08018201
 8018244:	2405e8e0 	.word	0x2405e8e0

08018248 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8018248:	b580      	push	{r7, lr}
 801824a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801824c:	4b0a      	ldr	r3, [pc, #40]	; (8018278 <tcp_timer_needed+0x30>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	2b00      	cmp	r3, #0
 8018252:	d10f      	bne.n	8018274 <tcp_timer_needed+0x2c>
 8018254:	4b09      	ldr	r3, [pc, #36]	; (801827c <tcp_timer_needed+0x34>)
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d103      	bne.n	8018264 <tcp_timer_needed+0x1c>
 801825c:	4b08      	ldr	r3, [pc, #32]	; (8018280 <tcp_timer_needed+0x38>)
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d007      	beq.n	8018274 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8018264:	4b04      	ldr	r3, [pc, #16]	; (8018278 <tcp_timer_needed+0x30>)
 8018266:	2201      	movs	r2, #1
 8018268:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801826a:	2200      	movs	r2, #0
 801826c:	4905      	ldr	r1, [pc, #20]	; (8018284 <tcp_timer_needed+0x3c>)
 801826e:	20fa      	movs	r0, #250	; 0xfa
 8018270:	f000 f8cc 	bl	801840c <sys_timeout>
  }
}
 8018274:	bf00      	nop
 8018276:	bd80      	pop	{r7, pc}
 8018278:	2405e8e0 	.word	0x2405e8e0
 801827c:	2405e894 	.word	0x2405e894
 8018280:	2405e898 	.word	0x2405e898
 8018284:	08018201 	.word	0x08018201

08018288 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8018288:	b580      	push	{r7, lr}
 801828a:	b086      	sub	sp, #24
 801828c:	af00      	add	r7, sp, #0
 801828e:	60f8      	str	r0, [r7, #12]
 8018290:	60b9      	str	r1, [r7, #8]
 8018292:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8018294:	200a      	movs	r0, #10
 8018296:	f7f8 fd63 	bl	8010d60 <memp_malloc>
 801829a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801829c:	693b      	ldr	r3, [r7, #16]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d109      	bne.n	80182b6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80182a2:	693b      	ldr	r3, [r7, #16]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d151      	bne.n	801834c <sys_timeout_abs+0xc4>
 80182a8:	4b2a      	ldr	r3, [pc, #168]	; (8018354 <sys_timeout_abs+0xcc>)
 80182aa:	22be      	movs	r2, #190	; 0xbe
 80182ac:	492a      	ldr	r1, [pc, #168]	; (8018358 <sys_timeout_abs+0xd0>)
 80182ae:	482b      	ldr	r0, [pc, #172]	; (801835c <sys_timeout_abs+0xd4>)
 80182b0:	f003 fad8 	bl	801b864 <iprintf>
    return;
 80182b4:	e04a      	b.n	801834c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80182b6:	693b      	ldr	r3, [r7, #16]
 80182b8:	2200      	movs	r2, #0
 80182ba:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80182bc:	693b      	ldr	r3, [r7, #16]
 80182be:	68ba      	ldr	r2, [r7, #8]
 80182c0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80182c2:	693b      	ldr	r3, [r7, #16]
 80182c4:	687a      	ldr	r2, [r7, #4]
 80182c6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80182c8:	693b      	ldr	r3, [r7, #16]
 80182ca:	68fa      	ldr	r2, [r7, #12]
 80182cc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80182ce:	4b24      	ldr	r3, [pc, #144]	; (8018360 <sys_timeout_abs+0xd8>)
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d103      	bne.n	80182de <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80182d6:	4a22      	ldr	r2, [pc, #136]	; (8018360 <sys_timeout_abs+0xd8>)
 80182d8:	693b      	ldr	r3, [r7, #16]
 80182da:	6013      	str	r3, [r2, #0]
    return;
 80182dc:	e037      	b.n	801834e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80182de:	693b      	ldr	r3, [r7, #16]
 80182e0:	685a      	ldr	r2, [r3, #4]
 80182e2:	4b1f      	ldr	r3, [pc, #124]	; (8018360 <sys_timeout_abs+0xd8>)
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	685b      	ldr	r3, [r3, #4]
 80182e8:	1ad3      	subs	r3, r2, r3
 80182ea:	0fdb      	lsrs	r3, r3, #31
 80182ec:	f003 0301 	and.w	r3, r3, #1
 80182f0:	b2db      	uxtb	r3, r3
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d007      	beq.n	8018306 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80182f6:	4b1a      	ldr	r3, [pc, #104]	; (8018360 <sys_timeout_abs+0xd8>)
 80182f8:	681a      	ldr	r2, [r3, #0]
 80182fa:	693b      	ldr	r3, [r7, #16]
 80182fc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80182fe:	4a18      	ldr	r2, [pc, #96]	; (8018360 <sys_timeout_abs+0xd8>)
 8018300:	693b      	ldr	r3, [r7, #16]
 8018302:	6013      	str	r3, [r2, #0]
 8018304:	e023      	b.n	801834e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8018306:	4b16      	ldr	r3, [pc, #88]	; (8018360 <sys_timeout_abs+0xd8>)
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	617b      	str	r3, [r7, #20]
 801830c:	e01a      	b.n	8018344 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801830e:	697b      	ldr	r3, [r7, #20]
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	2b00      	cmp	r3, #0
 8018314:	d00b      	beq.n	801832e <sys_timeout_abs+0xa6>
 8018316:	693b      	ldr	r3, [r7, #16]
 8018318:	685a      	ldr	r2, [r3, #4]
 801831a:	697b      	ldr	r3, [r7, #20]
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	685b      	ldr	r3, [r3, #4]
 8018320:	1ad3      	subs	r3, r2, r3
 8018322:	0fdb      	lsrs	r3, r3, #31
 8018324:	f003 0301 	and.w	r3, r3, #1
 8018328:	b2db      	uxtb	r3, r3
 801832a:	2b00      	cmp	r3, #0
 801832c:	d007      	beq.n	801833e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801832e:	697b      	ldr	r3, [r7, #20]
 8018330:	681a      	ldr	r2, [r3, #0]
 8018332:	693b      	ldr	r3, [r7, #16]
 8018334:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8018336:	697b      	ldr	r3, [r7, #20]
 8018338:	693a      	ldr	r2, [r7, #16]
 801833a:	601a      	str	r2, [r3, #0]
        break;
 801833c:	e007      	b.n	801834e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801833e:	697b      	ldr	r3, [r7, #20]
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	617b      	str	r3, [r7, #20]
 8018344:	697b      	ldr	r3, [r7, #20]
 8018346:	2b00      	cmp	r3, #0
 8018348:	d1e1      	bne.n	801830e <sys_timeout_abs+0x86>
 801834a:	e000      	b.n	801834e <sys_timeout_abs+0xc6>
    return;
 801834c:	bf00      	nop
      }
    }
  }
}
 801834e:	3718      	adds	r7, #24
 8018350:	46bd      	mov	sp, r7
 8018352:	bd80      	pop	{r7, pc}
 8018354:	0801f5a8 	.word	0x0801f5a8
 8018358:	0801f5dc 	.word	0x0801f5dc
 801835c:	0801f61c 	.word	0x0801f61c
 8018360:	2405e8d8 	.word	0x2405e8d8

08018364 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b086      	sub	sp, #24
 8018368:	af00      	add	r7, sp, #0
 801836a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8018370:	697b      	ldr	r3, [r7, #20]
 8018372:	685b      	ldr	r3, [r3, #4]
 8018374:	4798      	blx	r3

  now = sys_now();
 8018376:	f7f1 fa6d 	bl	8009854 <sys_now>
 801837a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801837c:	697b      	ldr	r3, [r7, #20]
 801837e:	681a      	ldr	r2, [r3, #0]
 8018380:	4b0f      	ldr	r3, [pc, #60]	; (80183c0 <lwip_cyclic_timer+0x5c>)
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	4413      	add	r3, r2
 8018386:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8018388:	68fa      	ldr	r2, [r7, #12]
 801838a:	693b      	ldr	r3, [r7, #16]
 801838c:	1ad3      	subs	r3, r2, r3
 801838e:	0fdb      	lsrs	r3, r3, #31
 8018390:	f003 0301 	and.w	r3, r3, #1
 8018394:	b2db      	uxtb	r3, r3
 8018396:	2b00      	cmp	r3, #0
 8018398:	d009      	beq.n	80183ae <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801839a:	697b      	ldr	r3, [r7, #20]
 801839c:	681a      	ldr	r2, [r3, #0]
 801839e:	693b      	ldr	r3, [r7, #16]
 80183a0:	4413      	add	r3, r2
 80183a2:	687a      	ldr	r2, [r7, #4]
 80183a4:	4907      	ldr	r1, [pc, #28]	; (80183c4 <lwip_cyclic_timer+0x60>)
 80183a6:	4618      	mov	r0, r3
 80183a8:	f7ff ff6e 	bl	8018288 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80183ac:	e004      	b.n	80183b8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80183ae:	687a      	ldr	r2, [r7, #4]
 80183b0:	4904      	ldr	r1, [pc, #16]	; (80183c4 <lwip_cyclic_timer+0x60>)
 80183b2:	68f8      	ldr	r0, [r7, #12]
 80183b4:	f7ff ff68 	bl	8018288 <sys_timeout_abs>
}
 80183b8:	bf00      	nop
 80183ba:	3718      	adds	r7, #24
 80183bc:	46bd      	mov	sp, r7
 80183be:	bd80      	pop	{r7, pc}
 80183c0:	2405e8dc 	.word	0x2405e8dc
 80183c4:	08018365 	.word	0x08018365

080183c8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b082      	sub	sp, #8
 80183cc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80183ce:	2301      	movs	r3, #1
 80183d0:	607b      	str	r3, [r7, #4]
 80183d2:	e00e      	b.n	80183f2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80183d4:	4a0b      	ldr	r2, [pc, #44]	; (8018404 <sys_timeouts_init+0x3c>)
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	00db      	lsls	r3, r3, #3
 80183e0:	4a08      	ldr	r2, [pc, #32]	; (8018404 <sys_timeouts_init+0x3c>)
 80183e2:	4413      	add	r3, r2
 80183e4:	461a      	mov	r2, r3
 80183e6:	4908      	ldr	r1, [pc, #32]	; (8018408 <sys_timeouts_init+0x40>)
 80183e8:	f000 f810 	bl	801840c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	3301      	adds	r3, #1
 80183f0:	607b      	str	r3, [r7, #4]
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	2b02      	cmp	r3, #2
 80183f6:	d9ed      	bls.n	80183d4 <sys_timeouts_init+0xc>
  }
}
 80183f8:	bf00      	nop
 80183fa:	bf00      	nop
 80183fc:	3708      	adds	r7, #8
 80183fe:	46bd      	mov	sp, r7
 8018400:	bd80      	pop	{r7, pc}
 8018402:	bf00      	nop
 8018404:	08020264 	.word	0x08020264
 8018408:	08018365 	.word	0x08018365

0801840c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b086      	sub	sp, #24
 8018410:	af00      	add	r7, sp, #0
 8018412:	60f8      	str	r0, [r7, #12]
 8018414:	60b9      	str	r1, [r7, #8]
 8018416:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801841e:	d306      	bcc.n	801842e <sys_timeout+0x22>
 8018420:	4b0a      	ldr	r3, [pc, #40]	; (801844c <sys_timeout+0x40>)
 8018422:	f240 1229 	movw	r2, #297	; 0x129
 8018426:	490a      	ldr	r1, [pc, #40]	; (8018450 <sys_timeout+0x44>)
 8018428:	480a      	ldr	r0, [pc, #40]	; (8018454 <sys_timeout+0x48>)
 801842a:	f003 fa1b 	bl	801b864 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801842e:	f7f1 fa11 	bl	8009854 <sys_now>
 8018432:	4602      	mov	r2, r0
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	4413      	add	r3, r2
 8018438:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801843a:	687a      	ldr	r2, [r7, #4]
 801843c:	68b9      	ldr	r1, [r7, #8]
 801843e:	6978      	ldr	r0, [r7, #20]
 8018440:	f7ff ff22 	bl	8018288 <sys_timeout_abs>
#endif
}
 8018444:	bf00      	nop
 8018446:	3718      	adds	r7, #24
 8018448:	46bd      	mov	sp, r7
 801844a:	bd80      	pop	{r7, pc}
 801844c:	0801f5a8 	.word	0x0801f5a8
 8018450:	0801f644 	.word	0x0801f644
 8018454:	0801f61c 	.word	0x0801f61c

08018458 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018458:	b580      	push	{r7, lr}
 801845a:	b084      	sub	sp, #16
 801845c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801845e:	f7f1 f9f9 	bl	8009854 <sys_now>
 8018462:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8018464:	4b17      	ldr	r3, [pc, #92]	; (80184c4 <sys_check_timeouts+0x6c>)
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801846a:	68bb      	ldr	r3, [r7, #8]
 801846c:	2b00      	cmp	r3, #0
 801846e:	d022      	beq.n	80184b6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8018470:	68bb      	ldr	r3, [r7, #8]
 8018472:	685b      	ldr	r3, [r3, #4]
 8018474:	68fa      	ldr	r2, [r7, #12]
 8018476:	1ad3      	subs	r3, r2, r3
 8018478:	0fdb      	lsrs	r3, r3, #31
 801847a:	f003 0301 	and.w	r3, r3, #1
 801847e:	b2db      	uxtb	r3, r3
 8018480:	2b00      	cmp	r3, #0
 8018482:	d11a      	bne.n	80184ba <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8018484:	68bb      	ldr	r3, [r7, #8]
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	4a0e      	ldr	r2, [pc, #56]	; (80184c4 <sys_check_timeouts+0x6c>)
 801848a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801848c:	68bb      	ldr	r3, [r7, #8]
 801848e:	689b      	ldr	r3, [r3, #8]
 8018490:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8018492:	68bb      	ldr	r3, [r7, #8]
 8018494:	68db      	ldr	r3, [r3, #12]
 8018496:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8018498:	68bb      	ldr	r3, [r7, #8]
 801849a:	685b      	ldr	r3, [r3, #4]
 801849c:	4a0a      	ldr	r2, [pc, #40]	; (80184c8 <sys_check_timeouts+0x70>)
 801849e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80184a0:	68b9      	ldr	r1, [r7, #8]
 80184a2:	200a      	movs	r0, #10
 80184a4:	f7f8 fcd2 	bl	8010e4c <memp_free>
    if (handler != NULL) {
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d0da      	beq.n	8018464 <sys_check_timeouts+0xc>
      handler(arg);
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	6838      	ldr	r0, [r7, #0]
 80184b2:	4798      	blx	r3
  do {
 80184b4:	e7d6      	b.n	8018464 <sys_check_timeouts+0xc>
      return;
 80184b6:	bf00      	nop
 80184b8:	e000      	b.n	80184bc <sys_check_timeouts+0x64>
      return;
 80184ba:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80184bc:	3710      	adds	r7, #16
 80184be:	46bd      	mov	sp, r7
 80184c0:	bd80      	pop	{r7, pc}
 80184c2:	bf00      	nop
 80184c4:	2405e8d8 	.word	0x2405e8d8
 80184c8:	2405e8dc 	.word	0x2405e8dc

080184cc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80184cc:	b580      	push	{r7, lr}
 80184ce:	b082      	sub	sp, #8
 80184d0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80184d2:	4b16      	ldr	r3, [pc, #88]	; (801852c <sys_timeouts_sleeptime+0x60>)
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d102      	bne.n	80184e0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80184da:	f04f 33ff 	mov.w	r3, #4294967295
 80184de:	e020      	b.n	8018522 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80184e0:	f7f1 f9b8 	bl	8009854 <sys_now>
 80184e4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80184e6:	4b11      	ldr	r3, [pc, #68]	; (801852c <sys_timeouts_sleeptime+0x60>)
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	685a      	ldr	r2, [r3, #4]
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	1ad3      	subs	r3, r2, r3
 80184f0:	0fdb      	lsrs	r3, r3, #31
 80184f2:	f003 0301 	and.w	r3, r3, #1
 80184f6:	b2db      	uxtb	r3, r3
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d001      	beq.n	8018500 <sys_timeouts_sleeptime+0x34>
    return 0;
 80184fc:	2300      	movs	r3, #0
 80184fe:	e010      	b.n	8018522 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8018500:	4b0a      	ldr	r3, [pc, #40]	; (801852c <sys_timeouts_sleeptime+0x60>)
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	685a      	ldr	r2, [r3, #4]
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	1ad3      	subs	r3, r2, r3
 801850a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801850c:	683b      	ldr	r3, [r7, #0]
 801850e:	2b00      	cmp	r3, #0
 8018510:	da06      	bge.n	8018520 <sys_timeouts_sleeptime+0x54>
 8018512:	4b07      	ldr	r3, [pc, #28]	; (8018530 <sys_timeouts_sleeptime+0x64>)
 8018514:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8018518:	4906      	ldr	r1, [pc, #24]	; (8018534 <sys_timeouts_sleeptime+0x68>)
 801851a:	4807      	ldr	r0, [pc, #28]	; (8018538 <sys_timeouts_sleeptime+0x6c>)
 801851c:	f003 f9a2 	bl	801b864 <iprintf>
    return ret;
 8018520:	683b      	ldr	r3, [r7, #0]
  }
}
 8018522:	4618      	mov	r0, r3
 8018524:	3708      	adds	r7, #8
 8018526:	46bd      	mov	sp, r7
 8018528:	bd80      	pop	{r7, pc}
 801852a:	bf00      	nop
 801852c:	2405e8d8 	.word	0x2405e8d8
 8018530:	0801f5a8 	.word	0x0801f5a8
 8018534:	0801f67c 	.word	0x0801f67c
 8018538:	0801f61c 	.word	0x0801f61c

0801853c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801853c:	b580      	push	{r7, lr}
 801853e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018540:	f003 f9a8 	bl	801b894 <rand>
 8018544:	4603      	mov	r3, r0
 8018546:	b29b      	uxth	r3, r3
 8018548:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801854c:	b29b      	uxth	r3, r3
 801854e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8018552:	b29a      	uxth	r2, r3
 8018554:	4b01      	ldr	r3, [pc, #4]	; (801855c <udp_init+0x20>)
 8018556:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018558:	bf00      	nop
 801855a:	bd80      	pop	{r7, pc}
 801855c:	24000030 	.word	0x24000030

08018560 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8018560:	b480      	push	{r7}
 8018562:	b083      	sub	sp, #12
 8018564:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8018566:	2300      	movs	r3, #0
 8018568:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801856a:	4b17      	ldr	r3, [pc, #92]	; (80185c8 <udp_new_port+0x68>)
 801856c:	881b      	ldrh	r3, [r3, #0]
 801856e:	1c5a      	adds	r2, r3, #1
 8018570:	b291      	uxth	r1, r2
 8018572:	4a15      	ldr	r2, [pc, #84]	; (80185c8 <udp_new_port+0x68>)
 8018574:	8011      	strh	r1, [r2, #0]
 8018576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801857a:	4293      	cmp	r3, r2
 801857c:	d103      	bne.n	8018586 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801857e:	4b12      	ldr	r3, [pc, #72]	; (80185c8 <udp_new_port+0x68>)
 8018580:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8018584:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018586:	4b11      	ldr	r3, [pc, #68]	; (80185cc <udp_new_port+0x6c>)
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	603b      	str	r3, [r7, #0]
 801858c:	e011      	b.n	80185b2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801858e:	683b      	ldr	r3, [r7, #0]
 8018590:	8a5a      	ldrh	r2, [r3, #18]
 8018592:	4b0d      	ldr	r3, [pc, #52]	; (80185c8 <udp_new_port+0x68>)
 8018594:	881b      	ldrh	r3, [r3, #0]
 8018596:	429a      	cmp	r2, r3
 8018598:	d108      	bne.n	80185ac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801859a:	88fb      	ldrh	r3, [r7, #6]
 801859c:	3301      	adds	r3, #1
 801859e:	80fb      	strh	r3, [r7, #6]
 80185a0:	88fb      	ldrh	r3, [r7, #6]
 80185a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80185a6:	d3e0      	bcc.n	801856a <udp_new_port+0xa>
        return 0;
 80185a8:	2300      	movs	r3, #0
 80185aa:	e007      	b.n	80185bc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80185ac:	683b      	ldr	r3, [r7, #0]
 80185ae:	68db      	ldr	r3, [r3, #12]
 80185b0:	603b      	str	r3, [r7, #0]
 80185b2:	683b      	ldr	r3, [r7, #0]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d1ea      	bne.n	801858e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80185b8:	4b03      	ldr	r3, [pc, #12]	; (80185c8 <udp_new_port+0x68>)
 80185ba:	881b      	ldrh	r3, [r3, #0]
}
 80185bc:	4618      	mov	r0, r3
 80185be:	370c      	adds	r7, #12
 80185c0:	46bd      	mov	sp, r7
 80185c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185c6:	4770      	bx	lr
 80185c8:	24000030 	.word	0x24000030
 80185cc:	2405e8e4 	.word	0x2405e8e4

080185d0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80185d0:	b580      	push	{r7, lr}
 80185d2:	b084      	sub	sp, #16
 80185d4:	af00      	add	r7, sp, #0
 80185d6:	60f8      	str	r0, [r7, #12]
 80185d8:	60b9      	str	r1, [r7, #8]
 80185da:	4613      	mov	r3, r2
 80185dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d105      	bne.n	80185f0 <udp_input_local_match+0x20>
 80185e4:	4b27      	ldr	r3, [pc, #156]	; (8018684 <udp_input_local_match+0xb4>)
 80185e6:	2287      	movs	r2, #135	; 0x87
 80185e8:	4927      	ldr	r1, [pc, #156]	; (8018688 <udp_input_local_match+0xb8>)
 80185ea:	4828      	ldr	r0, [pc, #160]	; (801868c <udp_input_local_match+0xbc>)
 80185ec:	f003 f93a 	bl	801b864 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80185f0:	68bb      	ldr	r3, [r7, #8]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d105      	bne.n	8018602 <udp_input_local_match+0x32>
 80185f6:	4b23      	ldr	r3, [pc, #140]	; (8018684 <udp_input_local_match+0xb4>)
 80185f8:	2288      	movs	r2, #136	; 0x88
 80185fa:	4925      	ldr	r1, [pc, #148]	; (8018690 <udp_input_local_match+0xc0>)
 80185fc:	4823      	ldr	r0, [pc, #140]	; (801868c <udp_input_local_match+0xbc>)
 80185fe:	f003 f931 	bl	801b864 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	7a1b      	ldrb	r3, [r3, #8]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d00b      	beq.n	8018622 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	7a1a      	ldrb	r2, [r3, #8]
 801860e:	4b21      	ldr	r3, [pc, #132]	; (8018694 <udp_input_local_match+0xc4>)
 8018610:	685b      	ldr	r3, [r3, #4]
 8018612:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018616:	3301      	adds	r3, #1
 8018618:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801861a:	429a      	cmp	r2, r3
 801861c:	d001      	beq.n	8018622 <udp_input_local_match+0x52>
    return 0;
 801861e:	2300      	movs	r3, #0
 8018620:	e02b      	b.n	801867a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8018622:	79fb      	ldrb	r3, [r7, #7]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d018      	beq.n	801865a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d013      	beq.n	8018656 <udp_input_local_match+0x86>
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d00f      	beq.n	8018656 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018636:	4b17      	ldr	r3, [pc, #92]	; (8018694 <udp_input_local_match+0xc4>)
 8018638:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801863a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801863e:	d00a      	beq.n	8018656 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	681a      	ldr	r2, [r3, #0]
 8018644:	4b13      	ldr	r3, [pc, #76]	; (8018694 <udp_input_local_match+0xc4>)
 8018646:	695b      	ldr	r3, [r3, #20]
 8018648:	405a      	eors	r2, r3
 801864a:	68bb      	ldr	r3, [r7, #8]
 801864c:	3308      	adds	r3, #8
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018652:	2b00      	cmp	r3, #0
 8018654:	d110      	bne.n	8018678 <udp_input_local_match+0xa8>
          return 1;
 8018656:	2301      	movs	r3, #1
 8018658:	e00f      	b.n	801867a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d009      	beq.n	8018674 <udp_input_local_match+0xa4>
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d005      	beq.n	8018674 <udp_input_local_match+0xa4>
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	681a      	ldr	r2, [r3, #0]
 801866c:	4b09      	ldr	r3, [pc, #36]	; (8018694 <udp_input_local_match+0xc4>)
 801866e:	695b      	ldr	r3, [r3, #20]
 8018670:	429a      	cmp	r2, r3
 8018672:	d101      	bne.n	8018678 <udp_input_local_match+0xa8>
        return 1;
 8018674:	2301      	movs	r3, #1
 8018676:	e000      	b.n	801867a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8018678:	2300      	movs	r3, #0
}
 801867a:	4618      	mov	r0, r3
 801867c:	3710      	adds	r7, #16
 801867e:	46bd      	mov	sp, r7
 8018680:	bd80      	pop	{r7, pc}
 8018682:	bf00      	nop
 8018684:	0801f690 	.word	0x0801f690
 8018688:	0801f6c0 	.word	0x0801f6c0
 801868c:	0801f6e4 	.word	0x0801f6e4
 8018690:	0801f70c 	.word	0x0801f70c
 8018694:	24015e18 	.word	0x24015e18

08018698 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8018698:	b590      	push	{r4, r7, lr}
 801869a:	b08d      	sub	sp, #52	; 0x34
 801869c:	af02      	add	r7, sp, #8
 801869e:	6078      	str	r0, [r7, #4]
 80186a0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80186a2:	2300      	movs	r3, #0
 80186a4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d105      	bne.n	80186b8 <udp_input+0x20>
 80186ac:	4b7c      	ldr	r3, [pc, #496]	; (80188a0 <udp_input+0x208>)
 80186ae:	22cf      	movs	r2, #207	; 0xcf
 80186b0:	497c      	ldr	r1, [pc, #496]	; (80188a4 <udp_input+0x20c>)
 80186b2:	487d      	ldr	r0, [pc, #500]	; (80188a8 <udp_input+0x210>)
 80186b4:	f003 f8d6 	bl	801b864 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80186b8:	683b      	ldr	r3, [r7, #0]
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d105      	bne.n	80186ca <udp_input+0x32>
 80186be:	4b78      	ldr	r3, [pc, #480]	; (80188a0 <udp_input+0x208>)
 80186c0:	22d0      	movs	r2, #208	; 0xd0
 80186c2:	497a      	ldr	r1, [pc, #488]	; (80188ac <udp_input+0x214>)
 80186c4:	4878      	ldr	r0, [pc, #480]	; (80188a8 <udp_input+0x210>)
 80186c6:	f003 f8cd 	bl	801b864 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	895b      	ldrh	r3, [r3, #10]
 80186ce:	2b07      	cmp	r3, #7
 80186d0:	d803      	bhi.n	80186da <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80186d2:	6878      	ldr	r0, [r7, #4]
 80186d4:	f7f9 fa62 	bl	8011b9c <pbuf_free>
    goto end;
 80186d8:	e0de      	b.n	8018898 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	685b      	ldr	r3, [r3, #4]
 80186de:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80186e0:	4b73      	ldr	r3, [pc, #460]	; (80188b0 <udp_input+0x218>)
 80186e2:	695b      	ldr	r3, [r3, #20]
 80186e4:	4a72      	ldr	r2, [pc, #456]	; (80188b0 <udp_input+0x218>)
 80186e6:	6812      	ldr	r2, [r2, #0]
 80186e8:	4611      	mov	r1, r2
 80186ea:	4618      	mov	r0, r3
 80186ec:	f001 fdbc 	bl	801a268 <ip4_addr_isbroadcast_u32>
 80186f0:	4603      	mov	r3, r0
 80186f2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80186f4:	697b      	ldr	r3, [r7, #20]
 80186f6:	881b      	ldrh	r3, [r3, #0]
 80186f8:	b29b      	uxth	r3, r3
 80186fa:	4618      	mov	r0, r3
 80186fc:	f7f7 fcd4 	bl	80100a8 <lwip_htons>
 8018700:	4603      	mov	r3, r0
 8018702:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018704:	697b      	ldr	r3, [r7, #20]
 8018706:	885b      	ldrh	r3, [r3, #2]
 8018708:	b29b      	uxth	r3, r3
 801870a:	4618      	mov	r0, r3
 801870c:	f7f7 fccc 	bl	80100a8 <lwip_htons>
 8018710:	4603      	mov	r3, r0
 8018712:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8018714:	2300      	movs	r3, #0
 8018716:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8018718:	2300      	movs	r3, #0
 801871a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801871c:	2300      	movs	r3, #0
 801871e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018720:	4b64      	ldr	r3, [pc, #400]	; (80188b4 <udp_input+0x21c>)
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	627b      	str	r3, [r7, #36]	; 0x24
 8018726:	e054      	b.n	80187d2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801872a:	8a5b      	ldrh	r3, [r3, #18]
 801872c:	89fa      	ldrh	r2, [r7, #14]
 801872e:	429a      	cmp	r2, r3
 8018730:	d14a      	bne.n	80187c8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8018732:	7cfb      	ldrb	r3, [r7, #19]
 8018734:	461a      	mov	r2, r3
 8018736:	6839      	ldr	r1, [r7, #0]
 8018738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801873a:	f7ff ff49 	bl	80185d0 <udp_input_local_match>
 801873e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018740:	2b00      	cmp	r3, #0
 8018742:	d041      	beq.n	80187c8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018746:	7c1b      	ldrb	r3, [r3, #16]
 8018748:	f003 0304 	and.w	r3, r3, #4
 801874c:	2b00      	cmp	r3, #0
 801874e:	d11d      	bne.n	801878c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018750:	69fb      	ldr	r3, [r7, #28]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d102      	bne.n	801875c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8018756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018758:	61fb      	str	r3, [r7, #28]
 801875a:	e017      	b.n	801878c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801875c:	7cfb      	ldrb	r3, [r7, #19]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d014      	beq.n	801878c <udp_input+0xf4>
 8018762:	4b53      	ldr	r3, [pc, #332]	; (80188b0 <udp_input+0x218>)
 8018764:	695b      	ldr	r3, [r3, #20]
 8018766:	f1b3 3fff 	cmp.w	r3, #4294967295
 801876a:	d10f      	bne.n	801878c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801876c:	69fb      	ldr	r3, [r7, #28]
 801876e:	681a      	ldr	r2, [r3, #0]
 8018770:	683b      	ldr	r3, [r7, #0]
 8018772:	3304      	adds	r3, #4
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	429a      	cmp	r2, r3
 8018778:	d008      	beq.n	801878c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801877c:	681a      	ldr	r2, [r3, #0]
 801877e:	683b      	ldr	r3, [r7, #0]
 8018780:	3304      	adds	r3, #4
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	429a      	cmp	r2, r3
 8018786:	d101      	bne.n	801878c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8018788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801878a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801878e:	8a9b      	ldrh	r3, [r3, #20]
 8018790:	8a3a      	ldrh	r2, [r7, #16]
 8018792:	429a      	cmp	r2, r3
 8018794:	d118      	bne.n	80187c8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018798:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801879a:	2b00      	cmp	r3, #0
 801879c:	d005      	beq.n	80187aa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187a0:	685a      	ldr	r2, [r3, #4]
 80187a2:	4b43      	ldr	r3, [pc, #268]	; (80188b0 <udp_input+0x218>)
 80187a4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80187a6:	429a      	cmp	r2, r3
 80187a8:	d10e      	bne.n	80187c8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80187aa:	6a3b      	ldr	r3, [r7, #32]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d014      	beq.n	80187da <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80187b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187b2:	68da      	ldr	r2, [r3, #12]
 80187b4:	6a3b      	ldr	r3, [r7, #32]
 80187b6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80187b8:	4b3e      	ldr	r3, [pc, #248]	; (80188b4 <udp_input+0x21c>)
 80187ba:	681a      	ldr	r2, [r3, #0]
 80187bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187be:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80187c0:	4a3c      	ldr	r2, [pc, #240]	; (80188b4 <udp_input+0x21c>)
 80187c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187c4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80187c6:	e008      	b.n	80187da <udp_input+0x142>
      }
    }

    prev = pcb;
 80187c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80187cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ce:	68db      	ldr	r3, [r3, #12]
 80187d0:	627b      	str	r3, [r7, #36]	; 0x24
 80187d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d1a7      	bne.n	8018728 <udp_input+0x90>
 80187d8:	e000      	b.n	80187dc <udp_input+0x144>
        break;
 80187da:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80187dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d101      	bne.n	80187e6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80187e2:	69fb      	ldr	r3, [r7, #28]
 80187e4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80187e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d002      	beq.n	80187f2 <udp_input+0x15a>
    for_us = 1;
 80187ec:	2301      	movs	r3, #1
 80187ee:	76fb      	strb	r3, [r7, #27]
 80187f0:	e00a      	b.n	8018808 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80187f2:	683b      	ldr	r3, [r7, #0]
 80187f4:	3304      	adds	r3, #4
 80187f6:	681a      	ldr	r2, [r3, #0]
 80187f8:	4b2d      	ldr	r3, [pc, #180]	; (80188b0 <udp_input+0x218>)
 80187fa:	695b      	ldr	r3, [r3, #20]
 80187fc:	429a      	cmp	r2, r3
 80187fe:	bf0c      	ite	eq
 8018800:	2301      	moveq	r3, #1
 8018802:	2300      	movne	r3, #0
 8018804:	b2db      	uxtb	r3, r3
 8018806:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018808:	7efb      	ldrb	r3, [r7, #27]
 801880a:	2b00      	cmp	r3, #0
 801880c:	d041      	beq.n	8018892 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801880e:	2108      	movs	r1, #8
 8018810:	6878      	ldr	r0, [r7, #4]
 8018812:	f7f9 f93d 	bl	8011a90 <pbuf_remove_header>
 8018816:	4603      	mov	r3, r0
 8018818:	2b00      	cmp	r3, #0
 801881a:	d00a      	beq.n	8018832 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801881c:	4b20      	ldr	r3, [pc, #128]	; (80188a0 <udp_input+0x208>)
 801881e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8018822:	4925      	ldr	r1, [pc, #148]	; (80188b8 <udp_input+0x220>)
 8018824:	4820      	ldr	r0, [pc, #128]	; (80188a8 <udp_input+0x210>)
 8018826:	f003 f81d 	bl	801b864 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801882a:	6878      	ldr	r0, [r7, #4]
 801882c:	f7f9 f9b6 	bl	8011b9c <pbuf_free>
      goto end;
 8018830:	e032      	b.n	8018898 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8018832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018834:	2b00      	cmp	r3, #0
 8018836:	d012      	beq.n	801885e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801883a:	699b      	ldr	r3, [r3, #24]
 801883c:	2b00      	cmp	r3, #0
 801883e:	d00a      	beq.n	8018856 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018842:	699c      	ldr	r4, [r3, #24]
 8018844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018846:	69d8      	ldr	r0, [r3, #28]
 8018848:	8a3b      	ldrh	r3, [r7, #16]
 801884a:	9300      	str	r3, [sp, #0]
 801884c:	4b1b      	ldr	r3, [pc, #108]	; (80188bc <udp_input+0x224>)
 801884e:	687a      	ldr	r2, [r7, #4]
 8018850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018852:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018854:	e021      	b.n	801889a <udp_input+0x202>
        pbuf_free(p);
 8018856:	6878      	ldr	r0, [r7, #4]
 8018858:	f7f9 f9a0 	bl	8011b9c <pbuf_free>
        goto end;
 801885c:	e01c      	b.n	8018898 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801885e:	7cfb      	ldrb	r3, [r7, #19]
 8018860:	2b00      	cmp	r3, #0
 8018862:	d112      	bne.n	801888a <udp_input+0x1f2>
 8018864:	4b12      	ldr	r3, [pc, #72]	; (80188b0 <udp_input+0x218>)
 8018866:	695b      	ldr	r3, [r3, #20]
 8018868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801886c:	2be0      	cmp	r3, #224	; 0xe0
 801886e:	d00c      	beq.n	801888a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018870:	4b0f      	ldr	r3, [pc, #60]	; (80188b0 <udp_input+0x218>)
 8018872:	899b      	ldrh	r3, [r3, #12]
 8018874:	3308      	adds	r3, #8
 8018876:	b29b      	uxth	r3, r3
 8018878:	b21b      	sxth	r3, r3
 801887a:	4619      	mov	r1, r3
 801887c:	6878      	ldr	r0, [r7, #4]
 801887e:	f7f9 f97a 	bl	8011b76 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8018882:	2103      	movs	r1, #3
 8018884:	6878      	ldr	r0, [r7, #4]
 8018886:	f001 f9c5 	bl	8019c14 <icmp_dest_unreach>
      pbuf_free(p);
 801888a:	6878      	ldr	r0, [r7, #4]
 801888c:	f7f9 f986 	bl	8011b9c <pbuf_free>
  return;
 8018890:	e003      	b.n	801889a <udp_input+0x202>
    pbuf_free(p);
 8018892:	6878      	ldr	r0, [r7, #4]
 8018894:	f7f9 f982 	bl	8011b9c <pbuf_free>
  return;
 8018898:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801889a:	372c      	adds	r7, #44	; 0x2c
 801889c:	46bd      	mov	sp, r7
 801889e:	bd90      	pop	{r4, r7, pc}
 80188a0:	0801f690 	.word	0x0801f690
 80188a4:	0801f734 	.word	0x0801f734
 80188a8:	0801f6e4 	.word	0x0801f6e4
 80188ac:	0801f74c 	.word	0x0801f74c
 80188b0:	24015e18 	.word	0x24015e18
 80188b4:	2405e8e4 	.word	0x2405e8e4
 80188b8:	0801f768 	.word	0x0801f768
 80188bc:	24015e28 	.word	0x24015e28

080188c0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b086      	sub	sp, #24
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	60f8      	str	r0, [r7, #12]
 80188c8:	60b9      	str	r1, [r7, #8]
 80188ca:	4613      	mov	r3, r2
 80188cc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80188ce:	68bb      	ldr	r3, [r7, #8]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d101      	bne.n	80188d8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80188d4:	4b39      	ldr	r3, [pc, #228]	; (80189bc <udp_bind+0xfc>)
 80188d6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d109      	bne.n	80188f2 <udp_bind+0x32>
 80188de:	4b38      	ldr	r3, [pc, #224]	; (80189c0 <udp_bind+0x100>)
 80188e0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80188e4:	4937      	ldr	r1, [pc, #220]	; (80189c4 <udp_bind+0x104>)
 80188e6:	4838      	ldr	r0, [pc, #224]	; (80189c8 <udp_bind+0x108>)
 80188e8:	f002 ffbc 	bl	801b864 <iprintf>
 80188ec:	f06f 030f 	mvn.w	r3, #15
 80188f0:	e060      	b.n	80189b4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80188f2:	2300      	movs	r3, #0
 80188f4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80188f6:	4b35      	ldr	r3, [pc, #212]	; (80189cc <udp_bind+0x10c>)
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	617b      	str	r3, [r7, #20]
 80188fc:	e009      	b.n	8018912 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80188fe:	68fa      	ldr	r2, [r7, #12]
 8018900:	697b      	ldr	r3, [r7, #20]
 8018902:	429a      	cmp	r2, r3
 8018904:	d102      	bne.n	801890c <udp_bind+0x4c>
      rebind = 1;
 8018906:	2301      	movs	r3, #1
 8018908:	74fb      	strb	r3, [r7, #19]
      break;
 801890a:	e005      	b.n	8018918 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801890c:	697b      	ldr	r3, [r7, #20]
 801890e:	68db      	ldr	r3, [r3, #12]
 8018910:	617b      	str	r3, [r7, #20]
 8018912:	697b      	ldr	r3, [r7, #20]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d1f2      	bne.n	80188fe <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018918:	88fb      	ldrh	r3, [r7, #6]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d109      	bne.n	8018932 <udp_bind+0x72>
    port = udp_new_port();
 801891e:	f7ff fe1f 	bl	8018560 <udp_new_port>
 8018922:	4603      	mov	r3, r0
 8018924:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8018926:	88fb      	ldrh	r3, [r7, #6]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d12c      	bne.n	8018986 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801892c:	f06f 0307 	mvn.w	r3, #7
 8018930:	e040      	b.n	80189b4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018932:	4b26      	ldr	r3, [pc, #152]	; (80189cc <udp_bind+0x10c>)
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	617b      	str	r3, [r7, #20]
 8018938:	e022      	b.n	8018980 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801893a:	68fa      	ldr	r2, [r7, #12]
 801893c:	697b      	ldr	r3, [r7, #20]
 801893e:	429a      	cmp	r2, r3
 8018940:	d01b      	beq.n	801897a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8018942:	697b      	ldr	r3, [r7, #20]
 8018944:	8a5b      	ldrh	r3, [r3, #18]
 8018946:	88fa      	ldrh	r2, [r7, #6]
 8018948:	429a      	cmp	r2, r3
 801894a:	d116      	bne.n	801897a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801894c:	697b      	ldr	r3, [r7, #20]
 801894e:	681a      	ldr	r2, [r3, #0]
 8018950:	68bb      	ldr	r3, [r7, #8]
 8018952:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8018954:	429a      	cmp	r2, r3
 8018956:	d00d      	beq.n	8018974 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018958:	68bb      	ldr	r3, [r7, #8]
 801895a:	2b00      	cmp	r3, #0
 801895c:	d00a      	beq.n	8018974 <udp_bind+0xb4>
 801895e:	68bb      	ldr	r3, [r7, #8]
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d006      	beq.n	8018974 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018966:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018968:	2b00      	cmp	r3, #0
 801896a:	d003      	beq.n	8018974 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801896c:	697b      	ldr	r3, [r7, #20]
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	2b00      	cmp	r3, #0
 8018972:	d102      	bne.n	801897a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8018974:	f06f 0307 	mvn.w	r3, #7
 8018978:	e01c      	b.n	80189b4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801897a:	697b      	ldr	r3, [r7, #20]
 801897c:	68db      	ldr	r3, [r3, #12]
 801897e:	617b      	str	r3, [r7, #20]
 8018980:	697b      	ldr	r3, [r7, #20]
 8018982:	2b00      	cmp	r3, #0
 8018984:	d1d9      	bne.n	801893a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8018986:	68bb      	ldr	r3, [r7, #8]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d002      	beq.n	8018992 <udp_bind+0xd2>
 801898c:	68bb      	ldr	r3, [r7, #8]
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	e000      	b.n	8018994 <udp_bind+0xd4>
 8018992:	2300      	movs	r3, #0
 8018994:	68fa      	ldr	r2, [r7, #12]
 8018996:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	88fa      	ldrh	r2, [r7, #6]
 801899c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801899e:	7cfb      	ldrb	r3, [r7, #19]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d106      	bne.n	80189b2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80189a4:	4b09      	ldr	r3, [pc, #36]	; (80189cc <udp_bind+0x10c>)
 80189a6:	681a      	ldr	r2, [r3, #0]
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80189ac:	4a07      	ldr	r2, [pc, #28]	; (80189cc <udp_bind+0x10c>)
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80189b2:	2300      	movs	r3, #0
}
 80189b4:	4618      	mov	r0, r3
 80189b6:	3718      	adds	r7, #24
 80189b8:	46bd      	mov	sp, r7
 80189ba:	bd80      	pop	{r7, pc}
 80189bc:	0802027c 	.word	0x0802027c
 80189c0:	0801f690 	.word	0x0801f690
 80189c4:	0801f958 	.word	0x0801f958
 80189c8:	0801f6e4 	.word	0x0801f6e4
 80189cc:	2405e8e4 	.word	0x2405e8e4

080189d0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80189d0:	b580      	push	{r7, lr}
 80189d2:	b084      	sub	sp, #16
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	60f8      	str	r0, [r7, #12]
 80189d8:	60b9      	str	r1, [r7, #8]
 80189da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d107      	bne.n	80189f2 <udp_recv+0x22>
 80189e2:	4b08      	ldr	r3, [pc, #32]	; (8018a04 <udp_recv+0x34>)
 80189e4:	f240 428a 	movw	r2, #1162	; 0x48a
 80189e8:	4907      	ldr	r1, [pc, #28]	; (8018a08 <udp_recv+0x38>)
 80189ea:	4808      	ldr	r0, [pc, #32]	; (8018a0c <udp_recv+0x3c>)
 80189ec:	f002 ff3a 	bl	801b864 <iprintf>
 80189f0:	e005      	b.n	80189fe <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	68ba      	ldr	r2, [r7, #8]
 80189f6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	687a      	ldr	r2, [r7, #4]
 80189fc:	61da      	str	r2, [r3, #28]
}
 80189fe:	3710      	adds	r7, #16
 8018a00:	46bd      	mov	sp, r7
 8018a02:	bd80      	pop	{r7, pc}
 8018a04:	0801f690 	.word	0x0801f690
 8018a08:	0801f9c4 	.word	0x0801f9c4
 8018a0c:	0801f6e4 	.word	0x0801f6e4

08018a10 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b084      	sub	sp, #16
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d107      	bne.n	8018a2e <udp_remove+0x1e>
 8018a1e:	4b19      	ldr	r3, [pc, #100]	; (8018a84 <udp_remove+0x74>)
 8018a20:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8018a24:	4918      	ldr	r1, [pc, #96]	; (8018a88 <udp_remove+0x78>)
 8018a26:	4819      	ldr	r0, [pc, #100]	; (8018a8c <udp_remove+0x7c>)
 8018a28:	f002 ff1c 	bl	801b864 <iprintf>
 8018a2c:	e026      	b.n	8018a7c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8018a2e:	4b18      	ldr	r3, [pc, #96]	; (8018a90 <udp_remove+0x80>)
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	687a      	ldr	r2, [r7, #4]
 8018a34:	429a      	cmp	r2, r3
 8018a36:	d105      	bne.n	8018a44 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018a38:	4b15      	ldr	r3, [pc, #84]	; (8018a90 <udp_remove+0x80>)
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	68db      	ldr	r3, [r3, #12]
 8018a3e:	4a14      	ldr	r2, [pc, #80]	; (8018a90 <udp_remove+0x80>)
 8018a40:	6013      	str	r3, [r2, #0]
 8018a42:	e017      	b.n	8018a74 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018a44:	4b12      	ldr	r3, [pc, #72]	; (8018a90 <udp_remove+0x80>)
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	60fb      	str	r3, [r7, #12]
 8018a4a:	e010      	b.n	8018a6e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	68db      	ldr	r3, [r3, #12]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d009      	beq.n	8018a68 <udp_remove+0x58>
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	68db      	ldr	r3, [r3, #12]
 8018a58:	687a      	ldr	r2, [r7, #4]
 8018a5a:	429a      	cmp	r2, r3
 8018a5c:	d104      	bne.n	8018a68 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	68da      	ldr	r2, [r3, #12]
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	60da      	str	r2, [r3, #12]
        break;
 8018a66:	e005      	b.n	8018a74 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	68db      	ldr	r3, [r3, #12]
 8018a6c:	60fb      	str	r3, [r7, #12]
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d1eb      	bne.n	8018a4c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8018a74:	6879      	ldr	r1, [r7, #4]
 8018a76:	2000      	movs	r0, #0
 8018a78:	f7f8 f9e8 	bl	8010e4c <memp_free>
}
 8018a7c:	3710      	adds	r7, #16
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	bd80      	pop	{r7, pc}
 8018a82:	bf00      	nop
 8018a84:	0801f690 	.word	0x0801f690
 8018a88:	0801f9dc 	.word	0x0801f9dc
 8018a8c:	0801f6e4 	.word	0x0801f6e4
 8018a90:	2405e8e4 	.word	0x2405e8e4

08018a94 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b082      	sub	sp, #8
 8018a98:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8018a9a:	2000      	movs	r0, #0
 8018a9c:	f7f8 f960 	bl	8010d60 <memp_malloc>
 8018aa0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d007      	beq.n	8018ab8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018aa8:	2220      	movs	r2, #32
 8018aaa:	2100      	movs	r1, #0
 8018aac:	6878      	ldr	r0, [r7, #4]
 8018aae:	f002 fe3c 	bl	801b72a <memset>
    pcb->ttl = UDP_TTL;
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	22ff      	movs	r2, #255	; 0xff
 8018ab6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8018ab8:	687b      	ldr	r3, [r7, #4]
}
 8018aba:	4618      	mov	r0, r3
 8018abc:	3708      	adds	r7, #8
 8018abe:	46bd      	mov	sp, r7
 8018ac0:	bd80      	pop	{r7, pc}

08018ac2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8018ac2:	b580      	push	{r7, lr}
 8018ac4:	b084      	sub	sp, #16
 8018ac6:	af00      	add	r7, sp, #0
 8018ac8:	4603      	mov	r3, r0
 8018aca:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8018acc:	f7ff ffe2 	bl	8018a94 <udp_new>
 8018ad0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8018ad2:	68fb      	ldr	r3, [r7, #12]
}
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	3710      	adds	r7, #16
 8018ad8:	46bd      	mov	sp, r7
 8018ada:	bd80      	pop	{r7, pc}

08018adc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018adc:	b480      	push	{r7}
 8018ade:	b085      	sub	sp, #20
 8018ae0:	af00      	add	r7, sp, #0
 8018ae2:	6078      	str	r0, [r7, #4]
 8018ae4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d01e      	beq.n	8018b2a <udp_netif_ip_addr_changed+0x4e>
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	681b      	ldr	r3, [r3, #0]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d01a      	beq.n	8018b2a <udp_netif_ip_addr_changed+0x4e>
 8018af4:	683b      	ldr	r3, [r7, #0]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d017      	beq.n	8018b2a <udp_netif_ip_addr_changed+0x4e>
 8018afa:	683b      	ldr	r3, [r7, #0]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d013      	beq.n	8018b2a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018b02:	4b0d      	ldr	r3, [pc, #52]	; (8018b38 <udp_netif_ip_addr_changed+0x5c>)
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	60fb      	str	r3, [r7, #12]
 8018b08:	e00c      	b.n	8018b24 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	681a      	ldr	r2, [r3, #0]
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	429a      	cmp	r2, r3
 8018b14:	d103      	bne.n	8018b1e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018b16:	683b      	ldr	r3, [r7, #0]
 8018b18:	681a      	ldr	r2, [r3, #0]
 8018b1a:	68fb      	ldr	r3, [r7, #12]
 8018b1c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	68db      	ldr	r3, [r3, #12]
 8018b22:	60fb      	str	r3, [r7, #12]
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d1ef      	bne.n	8018b0a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018b2a:	bf00      	nop
 8018b2c:	3714      	adds	r7, #20
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b34:	4770      	bx	lr
 8018b36:	bf00      	nop
 8018b38:	2405e8e4 	.word	0x2405e8e4

08018b3c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	b082      	sub	sp, #8
 8018b40:	af00      	add	r7, sp, #0
 8018b42:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018b44:	4915      	ldr	r1, [pc, #84]	; (8018b9c <etharp_free_entry+0x60>)
 8018b46:	687a      	ldr	r2, [r7, #4]
 8018b48:	4613      	mov	r3, r2
 8018b4a:	005b      	lsls	r3, r3, #1
 8018b4c:	4413      	add	r3, r2
 8018b4e:	00db      	lsls	r3, r3, #3
 8018b50:	440b      	add	r3, r1
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d013      	beq.n	8018b80 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018b58:	4910      	ldr	r1, [pc, #64]	; (8018b9c <etharp_free_entry+0x60>)
 8018b5a:	687a      	ldr	r2, [r7, #4]
 8018b5c:	4613      	mov	r3, r2
 8018b5e:	005b      	lsls	r3, r3, #1
 8018b60:	4413      	add	r3, r2
 8018b62:	00db      	lsls	r3, r3, #3
 8018b64:	440b      	add	r3, r1
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	4618      	mov	r0, r3
 8018b6a:	f7f9 f817 	bl	8011b9c <pbuf_free>
    arp_table[i].q = NULL;
 8018b6e:	490b      	ldr	r1, [pc, #44]	; (8018b9c <etharp_free_entry+0x60>)
 8018b70:	687a      	ldr	r2, [r7, #4]
 8018b72:	4613      	mov	r3, r2
 8018b74:	005b      	lsls	r3, r3, #1
 8018b76:	4413      	add	r3, r2
 8018b78:	00db      	lsls	r3, r3, #3
 8018b7a:	440b      	add	r3, r1
 8018b7c:	2200      	movs	r2, #0
 8018b7e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018b80:	4906      	ldr	r1, [pc, #24]	; (8018b9c <etharp_free_entry+0x60>)
 8018b82:	687a      	ldr	r2, [r7, #4]
 8018b84:	4613      	mov	r3, r2
 8018b86:	005b      	lsls	r3, r3, #1
 8018b88:	4413      	add	r3, r2
 8018b8a:	00db      	lsls	r3, r3, #3
 8018b8c:	440b      	add	r3, r1
 8018b8e:	3314      	adds	r3, #20
 8018b90:	2200      	movs	r2, #0
 8018b92:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018b94:	bf00      	nop
 8018b96:	3708      	adds	r7, #8
 8018b98:	46bd      	mov	sp, r7
 8018b9a:	bd80      	pop	{r7, pc}
 8018b9c:	2405e8e8 	.word	0x2405e8e8

08018ba0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018ba0:	b580      	push	{r7, lr}
 8018ba2:	b082      	sub	sp, #8
 8018ba4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018ba6:	2300      	movs	r3, #0
 8018ba8:	607b      	str	r3, [r7, #4]
 8018baa:	e096      	b.n	8018cda <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018bac:	494f      	ldr	r1, [pc, #316]	; (8018cec <etharp_tmr+0x14c>)
 8018bae:	687a      	ldr	r2, [r7, #4]
 8018bb0:	4613      	mov	r3, r2
 8018bb2:	005b      	lsls	r3, r3, #1
 8018bb4:	4413      	add	r3, r2
 8018bb6:	00db      	lsls	r3, r3, #3
 8018bb8:	440b      	add	r3, r1
 8018bba:	3314      	adds	r3, #20
 8018bbc:	781b      	ldrb	r3, [r3, #0]
 8018bbe:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018bc0:	78fb      	ldrb	r3, [r7, #3]
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	f000 8086 	beq.w	8018cd4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018bc8:	4948      	ldr	r1, [pc, #288]	; (8018cec <etharp_tmr+0x14c>)
 8018bca:	687a      	ldr	r2, [r7, #4]
 8018bcc:	4613      	mov	r3, r2
 8018bce:	005b      	lsls	r3, r3, #1
 8018bd0:	4413      	add	r3, r2
 8018bd2:	00db      	lsls	r3, r3, #3
 8018bd4:	440b      	add	r3, r1
 8018bd6:	3312      	adds	r3, #18
 8018bd8:	881b      	ldrh	r3, [r3, #0]
 8018bda:	3301      	adds	r3, #1
 8018bdc:	b298      	uxth	r0, r3
 8018bde:	4943      	ldr	r1, [pc, #268]	; (8018cec <etharp_tmr+0x14c>)
 8018be0:	687a      	ldr	r2, [r7, #4]
 8018be2:	4613      	mov	r3, r2
 8018be4:	005b      	lsls	r3, r3, #1
 8018be6:	4413      	add	r3, r2
 8018be8:	00db      	lsls	r3, r3, #3
 8018bea:	440b      	add	r3, r1
 8018bec:	3312      	adds	r3, #18
 8018bee:	4602      	mov	r2, r0
 8018bf0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018bf2:	493e      	ldr	r1, [pc, #248]	; (8018cec <etharp_tmr+0x14c>)
 8018bf4:	687a      	ldr	r2, [r7, #4]
 8018bf6:	4613      	mov	r3, r2
 8018bf8:	005b      	lsls	r3, r3, #1
 8018bfa:	4413      	add	r3, r2
 8018bfc:	00db      	lsls	r3, r3, #3
 8018bfe:	440b      	add	r3, r1
 8018c00:	3312      	adds	r3, #18
 8018c02:	881b      	ldrh	r3, [r3, #0]
 8018c04:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018c08:	d215      	bcs.n	8018c36 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018c0a:	4938      	ldr	r1, [pc, #224]	; (8018cec <etharp_tmr+0x14c>)
 8018c0c:	687a      	ldr	r2, [r7, #4]
 8018c0e:	4613      	mov	r3, r2
 8018c10:	005b      	lsls	r3, r3, #1
 8018c12:	4413      	add	r3, r2
 8018c14:	00db      	lsls	r3, r3, #3
 8018c16:	440b      	add	r3, r1
 8018c18:	3314      	adds	r3, #20
 8018c1a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018c1c:	2b01      	cmp	r3, #1
 8018c1e:	d10e      	bne.n	8018c3e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018c20:	4932      	ldr	r1, [pc, #200]	; (8018cec <etharp_tmr+0x14c>)
 8018c22:	687a      	ldr	r2, [r7, #4]
 8018c24:	4613      	mov	r3, r2
 8018c26:	005b      	lsls	r3, r3, #1
 8018c28:	4413      	add	r3, r2
 8018c2a:	00db      	lsls	r3, r3, #3
 8018c2c:	440b      	add	r3, r1
 8018c2e:	3312      	adds	r3, #18
 8018c30:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018c32:	2b04      	cmp	r3, #4
 8018c34:	d903      	bls.n	8018c3e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018c36:	6878      	ldr	r0, [r7, #4]
 8018c38:	f7ff ff80 	bl	8018b3c <etharp_free_entry>
 8018c3c:	e04a      	b.n	8018cd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018c3e:	492b      	ldr	r1, [pc, #172]	; (8018cec <etharp_tmr+0x14c>)
 8018c40:	687a      	ldr	r2, [r7, #4]
 8018c42:	4613      	mov	r3, r2
 8018c44:	005b      	lsls	r3, r3, #1
 8018c46:	4413      	add	r3, r2
 8018c48:	00db      	lsls	r3, r3, #3
 8018c4a:	440b      	add	r3, r1
 8018c4c:	3314      	adds	r3, #20
 8018c4e:	781b      	ldrb	r3, [r3, #0]
 8018c50:	2b03      	cmp	r3, #3
 8018c52:	d10a      	bne.n	8018c6a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018c54:	4925      	ldr	r1, [pc, #148]	; (8018cec <etharp_tmr+0x14c>)
 8018c56:	687a      	ldr	r2, [r7, #4]
 8018c58:	4613      	mov	r3, r2
 8018c5a:	005b      	lsls	r3, r3, #1
 8018c5c:	4413      	add	r3, r2
 8018c5e:	00db      	lsls	r3, r3, #3
 8018c60:	440b      	add	r3, r1
 8018c62:	3314      	adds	r3, #20
 8018c64:	2204      	movs	r2, #4
 8018c66:	701a      	strb	r2, [r3, #0]
 8018c68:	e034      	b.n	8018cd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018c6a:	4920      	ldr	r1, [pc, #128]	; (8018cec <etharp_tmr+0x14c>)
 8018c6c:	687a      	ldr	r2, [r7, #4]
 8018c6e:	4613      	mov	r3, r2
 8018c70:	005b      	lsls	r3, r3, #1
 8018c72:	4413      	add	r3, r2
 8018c74:	00db      	lsls	r3, r3, #3
 8018c76:	440b      	add	r3, r1
 8018c78:	3314      	adds	r3, #20
 8018c7a:	781b      	ldrb	r3, [r3, #0]
 8018c7c:	2b04      	cmp	r3, #4
 8018c7e:	d10a      	bne.n	8018c96 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018c80:	491a      	ldr	r1, [pc, #104]	; (8018cec <etharp_tmr+0x14c>)
 8018c82:	687a      	ldr	r2, [r7, #4]
 8018c84:	4613      	mov	r3, r2
 8018c86:	005b      	lsls	r3, r3, #1
 8018c88:	4413      	add	r3, r2
 8018c8a:	00db      	lsls	r3, r3, #3
 8018c8c:	440b      	add	r3, r1
 8018c8e:	3314      	adds	r3, #20
 8018c90:	2202      	movs	r2, #2
 8018c92:	701a      	strb	r2, [r3, #0]
 8018c94:	e01e      	b.n	8018cd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018c96:	4915      	ldr	r1, [pc, #84]	; (8018cec <etharp_tmr+0x14c>)
 8018c98:	687a      	ldr	r2, [r7, #4]
 8018c9a:	4613      	mov	r3, r2
 8018c9c:	005b      	lsls	r3, r3, #1
 8018c9e:	4413      	add	r3, r2
 8018ca0:	00db      	lsls	r3, r3, #3
 8018ca2:	440b      	add	r3, r1
 8018ca4:	3314      	adds	r3, #20
 8018ca6:	781b      	ldrb	r3, [r3, #0]
 8018ca8:	2b01      	cmp	r3, #1
 8018caa:	d113      	bne.n	8018cd4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018cac:	490f      	ldr	r1, [pc, #60]	; (8018cec <etharp_tmr+0x14c>)
 8018cae:	687a      	ldr	r2, [r7, #4]
 8018cb0:	4613      	mov	r3, r2
 8018cb2:	005b      	lsls	r3, r3, #1
 8018cb4:	4413      	add	r3, r2
 8018cb6:	00db      	lsls	r3, r3, #3
 8018cb8:	440b      	add	r3, r1
 8018cba:	3308      	adds	r3, #8
 8018cbc:	6818      	ldr	r0, [r3, #0]
 8018cbe:	687a      	ldr	r2, [r7, #4]
 8018cc0:	4613      	mov	r3, r2
 8018cc2:	005b      	lsls	r3, r3, #1
 8018cc4:	4413      	add	r3, r2
 8018cc6:	00db      	lsls	r3, r3, #3
 8018cc8:	4a08      	ldr	r2, [pc, #32]	; (8018cec <etharp_tmr+0x14c>)
 8018cca:	4413      	add	r3, r2
 8018ccc:	3304      	adds	r3, #4
 8018cce:	4619      	mov	r1, r3
 8018cd0:	f000 fe6e 	bl	80199b0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	3301      	adds	r3, #1
 8018cd8:	607b      	str	r3, [r7, #4]
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	2b09      	cmp	r3, #9
 8018cde:	f77f af65 	ble.w	8018bac <etharp_tmr+0xc>
      }
    }
  }
}
 8018ce2:	bf00      	nop
 8018ce4:	bf00      	nop
 8018ce6:	3708      	adds	r7, #8
 8018ce8:	46bd      	mov	sp, r7
 8018cea:	bd80      	pop	{r7, pc}
 8018cec:	2405e8e8 	.word	0x2405e8e8

08018cf0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018cf0:	b580      	push	{r7, lr}
 8018cf2:	b08a      	sub	sp, #40	; 0x28
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	60f8      	str	r0, [r7, #12]
 8018cf8:	460b      	mov	r3, r1
 8018cfa:	607a      	str	r2, [r7, #4]
 8018cfc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018cfe:	230a      	movs	r3, #10
 8018d00:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018d02:	230a      	movs	r3, #10
 8018d04:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8018d06:	230a      	movs	r3, #10
 8018d08:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8018d0a:	2300      	movs	r3, #0
 8018d0c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018d0e:	230a      	movs	r3, #10
 8018d10:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018d12:	2300      	movs	r3, #0
 8018d14:	83bb      	strh	r3, [r7, #28]
 8018d16:	2300      	movs	r3, #0
 8018d18:	837b      	strh	r3, [r7, #26]
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018d1e:	2300      	movs	r3, #0
 8018d20:	843b      	strh	r3, [r7, #32]
 8018d22:	e0ae      	b.n	8018e82 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018d24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d28:	49a6      	ldr	r1, [pc, #664]	; (8018fc4 <etharp_find_entry+0x2d4>)
 8018d2a:	4613      	mov	r3, r2
 8018d2c:	005b      	lsls	r3, r3, #1
 8018d2e:	4413      	add	r3, r2
 8018d30:	00db      	lsls	r3, r3, #3
 8018d32:	440b      	add	r3, r1
 8018d34:	3314      	adds	r3, #20
 8018d36:	781b      	ldrb	r3, [r3, #0]
 8018d38:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018d3a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018d3e:	2b0a      	cmp	r3, #10
 8018d40:	d105      	bne.n	8018d4e <etharp_find_entry+0x5e>
 8018d42:	7dfb      	ldrb	r3, [r7, #23]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d102      	bne.n	8018d4e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018d48:	8c3b      	ldrh	r3, [r7, #32]
 8018d4a:	847b      	strh	r3, [r7, #34]	; 0x22
 8018d4c:	e095      	b.n	8018e7a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018d4e:	7dfb      	ldrb	r3, [r7, #23]
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	f000 8092 	beq.w	8018e7a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018d56:	7dfb      	ldrb	r3, [r7, #23]
 8018d58:	2b01      	cmp	r3, #1
 8018d5a:	d009      	beq.n	8018d70 <etharp_find_entry+0x80>
 8018d5c:	7dfb      	ldrb	r3, [r7, #23]
 8018d5e:	2b01      	cmp	r3, #1
 8018d60:	d806      	bhi.n	8018d70 <etharp_find_entry+0x80>
 8018d62:	4b99      	ldr	r3, [pc, #612]	; (8018fc8 <etharp_find_entry+0x2d8>)
 8018d64:	f240 1223 	movw	r2, #291	; 0x123
 8018d68:	4998      	ldr	r1, [pc, #608]	; (8018fcc <etharp_find_entry+0x2dc>)
 8018d6a:	4899      	ldr	r0, [pc, #612]	; (8018fd0 <etharp_find_entry+0x2e0>)
 8018d6c:	f002 fd7a 	bl	801b864 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d020      	beq.n	8018db8 <etharp_find_entry+0xc8>
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	6819      	ldr	r1, [r3, #0]
 8018d7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d7e:	4891      	ldr	r0, [pc, #580]	; (8018fc4 <etharp_find_entry+0x2d4>)
 8018d80:	4613      	mov	r3, r2
 8018d82:	005b      	lsls	r3, r3, #1
 8018d84:	4413      	add	r3, r2
 8018d86:	00db      	lsls	r3, r3, #3
 8018d88:	4403      	add	r3, r0
 8018d8a:	3304      	adds	r3, #4
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	4299      	cmp	r1, r3
 8018d90:	d112      	bne.n	8018db8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d00c      	beq.n	8018db2 <etharp_find_entry+0xc2>
 8018d98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d9c:	4989      	ldr	r1, [pc, #548]	; (8018fc4 <etharp_find_entry+0x2d4>)
 8018d9e:	4613      	mov	r3, r2
 8018da0:	005b      	lsls	r3, r3, #1
 8018da2:	4413      	add	r3, r2
 8018da4:	00db      	lsls	r3, r3, #3
 8018da6:	440b      	add	r3, r1
 8018da8:	3308      	adds	r3, #8
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	687a      	ldr	r2, [r7, #4]
 8018dae:	429a      	cmp	r2, r3
 8018db0:	d102      	bne.n	8018db8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018db2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018db6:	e100      	b.n	8018fba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018db8:	7dfb      	ldrb	r3, [r7, #23]
 8018dba:	2b01      	cmp	r3, #1
 8018dbc:	d140      	bne.n	8018e40 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018dbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018dc2:	4980      	ldr	r1, [pc, #512]	; (8018fc4 <etharp_find_entry+0x2d4>)
 8018dc4:	4613      	mov	r3, r2
 8018dc6:	005b      	lsls	r3, r3, #1
 8018dc8:	4413      	add	r3, r2
 8018dca:	00db      	lsls	r3, r3, #3
 8018dcc:	440b      	add	r3, r1
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d01a      	beq.n	8018e0a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018dd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018dd8:	497a      	ldr	r1, [pc, #488]	; (8018fc4 <etharp_find_entry+0x2d4>)
 8018dda:	4613      	mov	r3, r2
 8018ddc:	005b      	lsls	r3, r3, #1
 8018dde:	4413      	add	r3, r2
 8018de0:	00db      	lsls	r3, r3, #3
 8018de2:	440b      	add	r3, r1
 8018de4:	3312      	adds	r3, #18
 8018de6:	881b      	ldrh	r3, [r3, #0]
 8018de8:	8bba      	ldrh	r2, [r7, #28]
 8018dea:	429a      	cmp	r2, r3
 8018dec:	d845      	bhi.n	8018e7a <etharp_find_entry+0x18a>
            old_queue = i;
 8018dee:	8c3b      	ldrh	r3, [r7, #32]
 8018df0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018df2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018df6:	4973      	ldr	r1, [pc, #460]	; (8018fc4 <etharp_find_entry+0x2d4>)
 8018df8:	4613      	mov	r3, r2
 8018dfa:	005b      	lsls	r3, r3, #1
 8018dfc:	4413      	add	r3, r2
 8018dfe:	00db      	lsls	r3, r3, #3
 8018e00:	440b      	add	r3, r1
 8018e02:	3312      	adds	r3, #18
 8018e04:	881b      	ldrh	r3, [r3, #0]
 8018e06:	83bb      	strh	r3, [r7, #28]
 8018e08:	e037      	b.n	8018e7a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018e0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018e0e:	496d      	ldr	r1, [pc, #436]	; (8018fc4 <etharp_find_entry+0x2d4>)
 8018e10:	4613      	mov	r3, r2
 8018e12:	005b      	lsls	r3, r3, #1
 8018e14:	4413      	add	r3, r2
 8018e16:	00db      	lsls	r3, r3, #3
 8018e18:	440b      	add	r3, r1
 8018e1a:	3312      	adds	r3, #18
 8018e1c:	881b      	ldrh	r3, [r3, #0]
 8018e1e:	8b7a      	ldrh	r2, [r7, #26]
 8018e20:	429a      	cmp	r2, r3
 8018e22:	d82a      	bhi.n	8018e7a <etharp_find_entry+0x18a>
            old_pending = i;
 8018e24:	8c3b      	ldrh	r3, [r7, #32]
 8018e26:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8018e28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018e2c:	4965      	ldr	r1, [pc, #404]	; (8018fc4 <etharp_find_entry+0x2d4>)
 8018e2e:	4613      	mov	r3, r2
 8018e30:	005b      	lsls	r3, r3, #1
 8018e32:	4413      	add	r3, r2
 8018e34:	00db      	lsls	r3, r3, #3
 8018e36:	440b      	add	r3, r1
 8018e38:	3312      	adds	r3, #18
 8018e3a:	881b      	ldrh	r3, [r3, #0]
 8018e3c:	837b      	strh	r3, [r7, #26]
 8018e3e:	e01c      	b.n	8018e7a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018e40:	7dfb      	ldrb	r3, [r7, #23]
 8018e42:	2b01      	cmp	r3, #1
 8018e44:	d919      	bls.n	8018e7a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018e46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018e4a:	495e      	ldr	r1, [pc, #376]	; (8018fc4 <etharp_find_entry+0x2d4>)
 8018e4c:	4613      	mov	r3, r2
 8018e4e:	005b      	lsls	r3, r3, #1
 8018e50:	4413      	add	r3, r2
 8018e52:	00db      	lsls	r3, r3, #3
 8018e54:	440b      	add	r3, r1
 8018e56:	3312      	adds	r3, #18
 8018e58:	881b      	ldrh	r3, [r3, #0]
 8018e5a:	8b3a      	ldrh	r2, [r7, #24]
 8018e5c:	429a      	cmp	r2, r3
 8018e5e:	d80c      	bhi.n	8018e7a <etharp_find_entry+0x18a>
            old_stable = i;
 8018e60:	8c3b      	ldrh	r3, [r7, #32]
 8018e62:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018e64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018e68:	4956      	ldr	r1, [pc, #344]	; (8018fc4 <etharp_find_entry+0x2d4>)
 8018e6a:	4613      	mov	r3, r2
 8018e6c:	005b      	lsls	r3, r3, #1
 8018e6e:	4413      	add	r3, r2
 8018e70:	00db      	lsls	r3, r3, #3
 8018e72:	440b      	add	r3, r1
 8018e74:	3312      	adds	r3, #18
 8018e76:	881b      	ldrh	r3, [r3, #0]
 8018e78:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018e7a:	8c3b      	ldrh	r3, [r7, #32]
 8018e7c:	3301      	adds	r3, #1
 8018e7e:	b29b      	uxth	r3, r3
 8018e80:	843b      	strh	r3, [r7, #32]
 8018e82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018e86:	2b09      	cmp	r3, #9
 8018e88:	f77f af4c 	ble.w	8018d24 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018e8c:	7afb      	ldrb	r3, [r7, #11]
 8018e8e:	f003 0302 	and.w	r3, r3, #2
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d108      	bne.n	8018ea8 <etharp_find_entry+0x1b8>
 8018e96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018e9a:	2b0a      	cmp	r3, #10
 8018e9c:	d107      	bne.n	8018eae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018e9e:	7afb      	ldrb	r3, [r7, #11]
 8018ea0:	f003 0301 	and.w	r3, r3, #1
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d102      	bne.n	8018eae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8018eac:	e085      	b.n	8018fba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018eae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018eb2:	2b09      	cmp	r3, #9
 8018eb4:	dc02      	bgt.n	8018ebc <etharp_find_entry+0x1cc>
    i = empty;
 8018eb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018eb8:	843b      	strh	r3, [r7, #32]
 8018eba:	e039      	b.n	8018f30 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018ebc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018ec0:	2b09      	cmp	r3, #9
 8018ec2:	dc14      	bgt.n	8018eee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018ec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ec6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018ec8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018ecc:	493d      	ldr	r1, [pc, #244]	; (8018fc4 <etharp_find_entry+0x2d4>)
 8018ece:	4613      	mov	r3, r2
 8018ed0:	005b      	lsls	r3, r3, #1
 8018ed2:	4413      	add	r3, r2
 8018ed4:	00db      	lsls	r3, r3, #3
 8018ed6:	440b      	add	r3, r1
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d018      	beq.n	8018f10 <etharp_find_entry+0x220>
 8018ede:	4b3a      	ldr	r3, [pc, #232]	; (8018fc8 <etharp_find_entry+0x2d8>)
 8018ee0:	f240 126d 	movw	r2, #365	; 0x16d
 8018ee4:	493b      	ldr	r1, [pc, #236]	; (8018fd4 <etharp_find_entry+0x2e4>)
 8018ee6:	483a      	ldr	r0, [pc, #232]	; (8018fd0 <etharp_find_entry+0x2e0>)
 8018ee8:	f002 fcbc 	bl	801b864 <iprintf>
 8018eec:	e010      	b.n	8018f10 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018eee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018ef2:	2b09      	cmp	r3, #9
 8018ef4:	dc02      	bgt.n	8018efc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018ef6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018ef8:	843b      	strh	r3, [r7, #32]
 8018efa:	e009      	b.n	8018f10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018efc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018f00:	2b09      	cmp	r3, #9
 8018f02:	dc02      	bgt.n	8018f0a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018f04:	8bfb      	ldrh	r3, [r7, #30]
 8018f06:	843b      	strh	r3, [r7, #32]
 8018f08:	e002      	b.n	8018f10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8018f0e:	e054      	b.n	8018fba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018f10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018f14:	2b09      	cmp	r3, #9
 8018f16:	dd06      	ble.n	8018f26 <etharp_find_entry+0x236>
 8018f18:	4b2b      	ldr	r3, [pc, #172]	; (8018fc8 <etharp_find_entry+0x2d8>)
 8018f1a:	f240 127f 	movw	r2, #383	; 0x17f
 8018f1e:	492e      	ldr	r1, [pc, #184]	; (8018fd8 <etharp_find_entry+0x2e8>)
 8018f20:	482b      	ldr	r0, [pc, #172]	; (8018fd0 <etharp_find_entry+0x2e0>)
 8018f22:	f002 fc9f 	bl	801b864 <iprintf>
    etharp_free_entry(i);
 8018f26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018f2a:	4618      	mov	r0, r3
 8018f2c:	f7ff fe06 	bl	8018b3c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018f30:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018f34:	2b09      	cmp	r3, #9
 8018f36:	dd06      	ble.n	8018f46 <etharp_find_entry+0x256>
 8018f38:	4b23      	ldr	r3, [pc, #140]	; (8018fc8 <etharp_find_entry+0x2d8>)
 8018f3a:	f240 1283 	movw	r2, #387	; 0x183
 8018f3e:	4926      	ldr	r1, [pc, #152]	; (8018fd8 <etharp_find_entry+0x2e8>)
 8018f40:	4823      	ldr	r0, [pc, #140]	; (8018fd0 <etharp_find_entry+0x2e0>)
 8018f42:	f002 fc8f 	bl	801b864 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018f46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018f4a:	491e      	ldr	r1, [pc, #120]	; (8018fc4 <etharp_find_entry+0x2d4>)
 8018f4c:	4613      	mov	r3, r2
 8018f4e:	005b      	lsls	r3, r3, #1
 8018f50:	4413      	add	r3, r2
 8018f52:	00db      	lsls	r3, r3, #3
 8018f54:	440b      	add	r3, r1
 8018f56:	3314      	adds	r3, #20
 8018f58:	781b      	ldrb	r3, [r3, #0]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d006      	beq.n	8018f6c <etharp_find_entry+0x27c>
 8018f5e:	4b1a      	ldr	r3, [pc, #104]	; (8018fc8 <etharp_find_entry+0x2d8>)
 8018f60:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018f64:	491d      	ldr	r1, [pc, #116]	; (8018fdc <etharp_find_entry+0x2ec>)
 8018f66:	481a      	ldr	r0, [pc, #104]	; (8018fd0 <etharp_find_entry+0x2e0>)
 8018f68:	f002 fc7c 	bl	801b864 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d00b      	beq.n	8018f8a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018f72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	6819      	ldr	r1, [r3, #0]
 8018f7a:	4812      	ldr	r0, [pc, #72]	; (8018fc4 <etharp_find_entry+0x2d4>)
 8018f7c:	4613      	mov	r3, r2
 8018f7e:	005b      	lsls	r3, r3, #1
 8018f80:	4413      	add	r3, r2
 8018f82:	00db      	lsls	r3, r3, #3
 8018f84:	4403      	add	r3, r0
 8018f86:	3304      	adds	r3, #4
 8018f88:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018f8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018f8e:	490d      	ldr	r1, [pc, #52]	; (8018fc4 <etharp_find_entry+0x2d4>)
 8018f90:	4613      	mov	r3, r2
 8018f92:	005b      	lsls	r3, r3, #1
 8018f94:	4413      	add	r3, r2
 8018f96:	00db      	lsls	r3, r3, #3
 8018f98:	440b      	add	r3, r1
 8018f9a:	3312      	adds	r3, #18
 8018f9c:	2200      	movs	r2, #0
 8018f9e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018fa0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018fa4:	4907      	ldr	r1, [pc, #28]	; (8018fc4 <etharp_find_entry+0x2d4>)
 8018fa6:	4613      	mov	r3, r2
 8018fa8:	005b      	lsls	r3, r3, #1
 8018faa:	4413      	add	r3, r2
 8018fac:	00db      	lsls	r3, r3, #3
 8018fae:	440b      	add	r3, r1
 8018fb0:	3308      	adds	r3, #8
 8018fb2:	687a      	ldr	r2, [r7, #4]
 8018fb4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018fb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018fba:	4618      	mov	r0, r3
 8018fbc:	3728      	adds	r7, #40	; 0x28
 8018fbe:	46bd      	mov	sp, r7
 8018fc0:	bd80      	pop	{r7, pc}
 8018fc2:	bf00      	nop
 8018fc4:	2405e8e8 	.word	0x2405e8e8
 8018fc8:	0801f9f4 	.word	0x0801f9f4
 8018fcc:	0801fa2c 	.word	0x0801fa2c
 8018fd0:	0801fa6c 	.word	0x0801fa6c
 8018fd4:	0801fa94 	.word	0x0801fa94
 8018fd8:	0801faac 	.word	0x0801faac
 8018fdc:	0801fac0 	.word	0x0801fac0

08018fe0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b088      	sub	sp, #32
 8018fe4:	af02      	add	r7, sp, #8
 8018fe6:	60f8      	str	r0, [r7, #12]
 8018fe8:	60b9      	str	r1, [r7, #8]
 8018fea:	607a      	str	r2, [r7, #4]
 8018fec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018ff4:	2b06      	cmp	r3, #6
 8018ff6:	d006      	beq.n	8019006 <etharp_update_arp_entry+0x26>
 8018ff8:	4b48      	ldr	r3, [pc, #288]	; (801911c <etharp_update_arp_entry+0x13c>)
 8018ffa:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018ffe:	4948      	ldr	r1, [pc, #288]	; (8019120 <etharp_update_arp_entry+0x140>)
 8019000:	4848      	ldr	r0, [pc, #288]	; (8019124 <etharp_update_arp_entry+0x144>)
 8019002:	f002 fc2f 	bl	801b864 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8019006:	68bb      	ldr	r3, [r7, #8]
 8019008:	2b00      	cmp	r3, #0
 801900a:	d012      	beq.n	8019032 <etharp_update_arp_entry+0x52>
 801900c:	68bb      	ldr	r3, [r7, #8]
 801900e:	681b      	ldr	r3, [r3, #0]
 8019010:	2b00      	cmp	r3, #0
 8019012:	d00e      	beq.n	8019032 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019014:	68bb      	ldr	r3, [r7, #8]
 8019016:	681b      	ldr	r3, [r3, #0]
 8019018:	68f9      	ldr	r1, [r7, #12]
 801901a:	4618      	mov	r0, r3
 801901c:	f001 f924 	bl	801a268 <ip4_addr_isbroadcast_u32>
 8019020:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8019022:	2b00      	cmp	r3, #0
 8019024:	d105      	bne.n	8019032 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8019026:	68bb      	ldr	r3, [r7, #8]
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801902e:	2be0      	cmp	r3, #224	; 0xe0
 8019030:	d102      	bne.n	8019038 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019032:	f06f 030f 	mvn.w	r3, #15
 8019036:	e06c      	b.n	8019112 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8019038:	78fb      	ldrb	r3, [r7, #3]
 801903a:	68fa      	ldr	r2, [r7, #12]
 801903c:	4619      	mov	r1, r3
 801903e:	68b8      	ldr	r0, [r7, #8]
 8019040:	f7ff fe56 	bl	8018cf0 <etharp_find_entry>
 8019044:	4603      	mov	r3, r0
 8019046:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8019048:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801904c:	2b00      	cmp	r3, #0
 801904e:	da02      	bge.n	8019056 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8019050:	8afb      	ldrh	r3, [r7, #22]
 8019052:	b25b      	sxtb	r3, r3
 8019054:	e05d      	b.n	8019112 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8019056:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801905a:	4933      	ldr	r1, [pc, #204]	; (8019128 <etharp_update_arp_entry+0x148>)
 801905c:	4613      	mov	r3, r2
 801905e:	005b      	lsls	r3, r3, #1
 8019060:	4413      	add	r3, r2
 8019062:	00db      	lsls	r3, r3, #3
 8019064:	440b      	add	r3, r1
 8019066:	3314      	adds	r3, #20
 8019068:	2202      	movs	r2, #2
 801906a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801906c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019070:	492d      	ldr	r1, [pc, #180]	; (8019128 <etharp_update_arp_entry+0x148>)
 8019072:	4613      	mov	r3, r2
 8019074:	005b      	lsls	r3, r3, #1
 8019076:	4413      	add	r3, r2
 8019078:	00db      	lsls	r3, r3, #3
 801907a:	440b      	add	r3, r1
 801907c:	3308      	adds	r3, #8
 801907e:	68fa      	ldr	r2, [r7, #12]
 8019080:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8019082:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019086:	4613      	mov	r3, r2
 8019088:	005b      	lsls	r3, r3, #1
 801908a:	4413      	add	r3, r2
 801908c:	00db      	lsls	r3, r3, #3
 801908e:	3308      	adds	r3, #8
 8019090:	4a25      	ldr	r2, [pc, #148]	; (8019128 <etharp_update_arp_entry+0x148>)
 8019092:	4413      	add	r3, r2
 8019094:	3304      	adds	r3, #4
 8019096:	2206      	movs	r2, #6
 8019098:	6879      	ldr	r1, [r7, #4]
 801909a:	4618      	mov	r0, r3
 801909c:	f002 fb1d 	bl	801b6da <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80190a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80190a4:	4920      	ldr	r1, [pc, #128]	; (8019128 <etharp_update_arp_entry+0x148>)
 80190a6:	4613      	mov	r3, r2
 80190a8:	005b      	lsls	r3, r3, #1
 80190aa:	4413      	add	r3, r2
 80190ac:	00db      	lsls	r3, r3, #3
 80190ae:	440b      	add	r3, r1
 80190b0:	3312      	adds	r3, #18
 80190b2:	2200      	movs	r2, #0
 80190b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80190b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80190ba:	491b      	ldr	r1, [pc, #108]	; (8019128 <etharp_update_arp_entry+0x148>)
 80190bc:	4613      	mov	r3, r2
 80190be:	005b      	lsls	r3, r3, #1
 80190c0:	4413      	add	r3, r2
 80190c2:	00db      	lsls	r3, r3, #3
 80190c4:	440b      	add	r3, r1
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d021      	beq.n	8019110 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80190cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80190d0:	4915      	ldr	r1, [pc, #84]	; (8019128 <etharp_update_arp_entry+0x148>)
 80190d2:	4613      	mov	r3, r2
 80190d4:	005b      	lsls	r3, r3, #1
 80190d6:	4413      	add	r3, r2
 80190d8:	00db      	lsls	r3, r3, #3
 80190da:	440b      	add	r3, r1
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80190e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80190e4:	4910      	ldr	r1, [pc, #64]	; (8019128 <etharp_update_arp_entry+0x148>)
 80190e6:	4613      	mov	r3, r2
 80190e8:	005b      	lsls	r3, r3, #1
 80190ea:	4413      	add	r3, r2
 80190ec:	00db      	lsls	r3, r3, #3
 80190ee:	440b      	add	r3, r1
 80190f0:	2200      	movs	r2, #0
 80190f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80190fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80190fe:	9300      	str	r3, [sp, #0]
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	6939      	ldr	r1, [r7, #16]
 8019104:	68f8      	ldr	r0, [r7, #12]
 8019106:	f001 ffbd 	bl	801b084 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801910a:	6938      	ldr	r0, [r7, #16]
 801910c:	f7f8 fd46 	bl	8011b9c <pbuf_free>
  }
  return ERR_OK;
 8019110:	2300      	movs	r3, #0
}
 8019112:	4618      	mov	r0, r3
 8019114:	3718      	adds	r7, #24
 8019116:	46bd      	mov	sp, r7
 8019118:	bd80      	pop	{r7, pc}
 801911a:	bf00      	nop
 801911c:	0801f9f4 	.word	0x0801f9f4
 8019120:	0801faec 	.word	0x0801faec
 8019124:	0801fa6c 	.word	0x0801fa6c
 8019128:	2405e8e8 	.word	0x2405e8e8

0801912c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801912c:	b580      	push	{r7, lr}
 801912e:	b084      	sub	sp, #16
 8019130:	af00      	add	r7, sp, #0
 8019132:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019134:	2300      	movs	r3, #0
 8019136:	60fb      	str	r3, [r7, #12]
 8019138:	e01e      	b.n	8019178 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801913a:	4913      	ldr	r1, [pc, #76]	; (8019188 <etharp_cleanup_netif+0x5c>)
 801913c:	68fa      	ldr	r2, [r7, #12]
 801913e:	4613      	mov	r3, r2
 8019140:	005b      	lsls	r3, r3, #1
 8019142:	4413      	add	r3, r2
 8019144:	00db      	lsls	r3, r3, #3
 8019146:	440b      	add	r3, r1
 8019148:	3314      	adds	r3, #20
 801914a:	781b      	ldrb	r3, [r3, #0]
 801914c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801914e:	7afb      	ldrb	r3, [r7, #11]
 8019150:	2b00      	cmp	r3, #0
 8019152:	d00e      	beq.n	8019172 <etharp_cleanup_netif+0x46>
 8019154:	490c      	ldr	r1, [pc, #48]	; (8019188 <etharp_cleanup_netif+0x5c>)
 8019156:	68fa      	ldr	r2, [r7, #12]
 8019158:	4613      	mov	r3, r2
 801915a:	005b      	lsls	r3, r3, #1
 801915c:	4413      	add	r3, r2
 801915e:	00db      	lsls	r3, r3, #3
 8019160:	440b      	add	r3, r1
 8019162:	3308      	adds	r3, #8
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	687a      	ldr	r2, [r7, #4]
 8019168:	429a      	cmp	r2, r3
 801916a:	d102      	bne.n	8019172 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801916c:	68f8      	ldr	r0, [r7, #12]
 801916e:	f7ff fce5 	bl	8018b3c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	3301      	adds	r3, #1
 8019176:	60fb      	str	r3, [r7, #12]
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	2b09      	cmp	r3, #9
 801917c:	dddd      	ble.n	801913a <etharp_cleanup_netif+0xe>
    }
  }
}
 801917e:	bf00      	nop
 8019180:	bf00      	nop
 8019182:	3710      	adds	r7, #16
 8019184:	46bd      	mov	sp, r7
 8019186:	bd80      	pop	{r7, pc}
 8019188:	2405e8e8 	.word	0x2405e8e8

0801918c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801918c:	b5b0      	push	{r4, r5, r7, lr}
 801918e:	b08a      	sub	sp, #40	; 0x28
 8019190:	af04      	add	r7, sp, #16
 8019192:	6078      	str	r0, [r7, #4]
 8019194:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019196:	683b      	ldr	r3, [r7, #0]
 8019198:	2b00      	cmp	r3, #0
 801919a:	d107      	bne.n	80191ac <etharp_input+0x20>
 801919c:	4b3d      	ldr	r3, [pc, #244]	; (8019294 <etharp_input+0x108>)
 801919e:	f240 228a 	movw	r2, #650	; 0x28a
 80191a2:	493d      	ldr	r1, [pc, #244]	; (8019298 <etharp_input+0x10c>)
 80191a4:	483d      	ldr	r0, [pc, #244]	; (801929c <etharp_input+0x110>)
 80191a6:	f002 fb5d 	bl	801b864 <iprintf>
 80191aa:	e06f      	b.n	801928c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	685b      	ldr	r3, [r3, #4]
 80191b0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80191b2:	693b      	ldr	r3, [r7, #16]
 80191b4:	881b      	ldrh	r3, [r3, #0]
 80191b6:	b29b      	uxth	r3, r3
 80191b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80191bc:	d10c      	bne.n	80191d8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80191be:	693b      	ldr	r3, [r7, #16]
 80191c0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80191c2:	2b06      	cmp	r3, #6
 80191c4:	d108      	bne.n	80191d8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80191c6:	693b      	ldr	r3, [r7, #16]
 80191c8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80191ca:	2b04      	cmp	r3, #4
 80191cc:	d104      	bne.n	80191d8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80191ce:	693b      	ldr	r3, [r7, #16]
 80191d0:	885b      	ldrh	r3, [r3, #2]
 80191d2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80191d4:	2b08      	cmp	r3, #8
 80191d6:	d003      	beq.n	80191e0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80191d8:	6878      	ldr	r0, [r7, #4]
 80191da:	f7f8 fcdf 	bl	8011b9c <pbuf_free>
    return;
 80191de:	e055      	b.n	801928c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80191e0:	693b      	ldr	r3, [r7, #16]
 80191e2:	330e      	adds	r3, #14
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80191e8:	693b      	ldr	r3, [r7, #16]
 80191ea:	3318      	adds	r3, #24
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80191f0:	683b      	ldr	r3, [r7, #0]
 80191f2:	3304      	adds	r3, #4
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d102      	bne.n	8019200 <etharp_input+0x74>
    for_us = 0;
 80191fa:	2300      	movs	r3, #0
 80191fc:	75fb      	strb	r3, [r7, #23]
 80191fe:	e009      	b.n	8019214 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8019200:	68ba      	ldr	r2, [r7, #8]
 8019202:	683b      	ldr	r3, [r7, #0]
 8019204:	3304      	adds	r3, #4
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	429a      	cmp	r2, r3
 801920a:	bf0c      	ite	eq
 801920c:	2301      	moveq	r3, #1
 801920e:	2300      	movne	r3, #0
 8019210:	b2db      	uxtb	r3, r3
 8019212:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8019214:	693b      	ldr	r3, [r7, #16]
 8019216:	f103 0208 	add.w	r2, r3, #8
 801921a:	7dfb      	ldrb	r3, [r7, #23]
 801921c:	2b00      	cmp	r3, #0
 801921e:	d001      	beq.n	8019224 <etharp_input+0x98>
 8019220:	2301      	movs	r3, #1
 8019222:	e000      	b.n	8019226 <etharp_input+0x9a>
 8019224:	2302      	movs	r3, #2
 8019226:	f107 010c 	add.w	r1, r7, #12
 801922a:	6838      	ldr	r0, [r7, #0]
 801922c:	f7ff fed8 	bl	8018fe0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8019230:	693b      	ldr	r3, [r7, #16]
 8019232:	88db      	ldrh	r3, [r3, #6]
 8019234:	b29b      	uxth	r3, r3
 8019236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801923a:	d003      	beq.n	8019244 <etharp_input+0xb8>
 801923c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019240:	d01e      	beq.n	8019280 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8019242:	e020      	b.n	8019286 <etharp_input+0xfa>
      if (for_us) {
 8019244:	7dfb      	ldrb	r3, [r7, #23]
 8019246:	2b00      	cmp	r3, #0
 8019248:	d01c      	beq.n	8019284 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801924a:	683b      	ldr	r3, [r7, #0]
 801924c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8019250:	693b      	ldr	r3, [r7, #16]
 8019252:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8019256:	683b      	ldr	r3, [r7, #0]
 8019258:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801925c:	683b      	ldr	r3, [r7, #0]
 801925e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8019260:	693a      	ldr	r2, [r7, #16]
 8019262:	3208      	adds	r2, #8
        etharp_raw(netif,
 8019264:	2102      	movs	r1, #2
 8019266:	9103      	str	r1, [sp, #12]
 8019268:	f107 010c 	add.w	r1, r7, #12
 801926c:	9102      	str	r1, [sp, #8]
 801926e:	9201      	str	r2, [sp, #4]
 8019270:	9300      	str	r3, [sp, #0]
 8019272:	462b      	mov	r3, r5
 8019274:	4622      	mov	r2, r4
 8019276:	4601      	mov	r1, r0
 8019278:	6838      	ldr	r0, [r7, #0]
 801927a:	f000 faeb 	bl	8019854 <etharp_raw>
      break;
 801927e:	e001      	b.n	8019284 <etharp_input+0xf8>
      break;
 8019280:	bf00      	nop
 8019282:	e000      	b.n	8019286 <etharp_input+0xfa>
      break;
 8019284:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8019286:	6878      	ldr	r0, [r7, #4]
 8019288:	f7f8 fc88 	bl	8011b9c <pbuf_free>
}
 801928c:	3718      	adds	r7, #24
 801928e:	46bd      	mov	sp, r7
 8019290:	bdb0      	pop	{r4, r5, r7, pc}
 8019292:	bf00      	nop
 8019294:	0801f9f4 	.word	0x0801f9f4
 8019298:	0801fb44 	.word	0x0801fb44
 801929c:	0801fa6c 	.word	0x0801fa6c

080192a0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b086      	sub	sp, #24
 80192a4:	af02      	add	r7, sp, #8
 80192a6:	60f8      	str	r0, [r7, #12]
 80192a8:	60b9      	str	r1, [r7, #8]
 80192aa:	4613      	mov	r3, r2
 80192ac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80192ae:	79fa      	ldrb	r2, [r7, #7]
 80192b0:	4944      	ldr	r1, [pc, #272]	; (80193c4 <etharp_output_to_arp_index+0x124>)
 80192b2:	4613      	mov	r3, r2
 80192b4:	005b      	lsls	r3, r3, #1
 80192b6:	4413      	add	r3, r2
 80192b8:	00db      	lsls	r3, r3, #3
 80192ba:	440b      	add	r3, r1
 80192bc:	3314      	adds	r3, #20
 80192be:	781b      	ldrb	r3, [r3, #0]
 80192c0:	2b01      	cmp	r3, #1
 80192c2:	d806      	bhi.n	80192d2 <etharp_output_to_arp_index+0x32>
 80192c4:	4b40      	ldr	r3, [pc, #256]	; (80193c8 <etharp_output_to_arp_index+0x128>)
 80192c6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80192ca:	4940      	ldr	r1, [pc, #256]	; (80193cc <etharp_output_to_arp_index+0x12c>)
 80192cc:	4840      	ldr	r0, [pc, #256]	; (80193d0 <etharp_output_to_arp_index+0x130>)
 80192ce:	f002 fac9 	bl	801b864 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80192d2:	79fa      	ldrb	r2, [r7, #7]
 80192d4:	493b      	ldr	r1, [pc, #236]	; (80193c4 <etharp_output_to_arp_index+0x124>)
 80192d6:	4613      	mov	r3, r2
 80192d8:	005b      	lsls	r3, r3, #1
 80192da:	4413      	add	r3, r2
 80192dc:	00db      	lsls	r3, r3, #3
 80192de:	440b      	add	r3, r1
 80192e0:	3314      	adds	r3, #20
 80192e2:	781b      	ldrb	r3, [r3, #0]
 80192e4:	2b02      	cmp	r3, #2
 80192e6:	d153      	bne.n	8019390 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80192e8:	79fa      	ldrb	r2, [r7, #7]
 80192ea:	4936      	ldr	r1, [pc, #216]	; (80193c4 <etharp_output_to_arp_index+0x124>)
 80192ec:	4613      	mov	r3, r2
 80192ee:	005b      	lsls	r3, r3, #1
 80192f0:	4413      	add	r3, r2
 80192f2:	00db      	lsls	r3, r3, #3
 80192f4:	440b      	add	r3, r1
 80192f6:	3312      	adds	r3, #18
 80192f8:	881b      	ldrh	r3, [r3, #0]
 80192fa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80192fe:	d919      	bls.n	8019334 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8019300:	79fa      	ldrb	r2, [r7, #7]
 8019302:	4613      	mov	r3, r2
 8019304:	005b      	lsls	r3, r3, #1
 8019306:	4413      	add	r3, r2
 8019308:	00db      	lsls	r3, r3, #3
 801930a:	4a2e      	ldr	r2, [pc, #184]	; (80193c4 <etharp_output_to_arp_index+0x124>)
 801930c:	4413      	add	r3, r2
 801930e:	3304      	adds	r3, #4
 8019310:	4619      	mov	r1, r3
 8019312:	68f8      	ldr	r0, [r7, #12]
 8019314:	f000 fb4c 	bl	80199b0 <etharp_request>
 8019318:	4603      	mov	r3, r0
 801931a:	2b00      	cmp	r3, #0
 801931c:	d138      	bne.n	8019390 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801931e:	79fa      	ldrb	r2, [r7, #7]
 8019320:	4928      	ldr	r1, [pc, #160]	; (80193c4 <etharp_output_to_arp_index+0x124>)
 8019322:	4613      	mov	r3, r2
 8019324:	005b      	lsls	r3, r3, #1
 8019326:	4413      	add	r3, r2
 8019328:	00db      	lsls	r3, r3, #3
 801932a:	440b      	add	r3, r1
 801932c:	3314      	adds	r3, #20
 801932e:	2203      	movs	r2, #3
 8019330:	701a      	strb	r2, [r3, #0]
 8019332:	e02d      	b.n	8019390 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019334:	79fa      	ldrb	r2, [r7, #7]
 8019336:	4923      	ldr	r1, [pc, #140]	; (80193c4 <etharp_output_to_arp_index+0x124>)
 8019338:	4613      	mov	r3, r2
 801933a:	005b      	lsls	r3, r3, #1
 801933c:	4413      	add	r3, r2
 801933e:	00db      	lsls	r3, r3, #3
 8019340:	440b      	add	r3, r1
 8019342:	3312      	adds	r3, #18
 8019344:	881b      	ldrh	r3, [r3, #0]
 8019346:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801934a:	d321      	bcc.n	8019390 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801934c:	79fa      	ldrb	r2, [r7, #7]
 801934e:	4613      	mov	r3, r2
 8019350:	005b      	lsls	r3, r3, #1
 8019352:	4413      	add	r3, r2
 8019354:	00db      	lsls	r3, r3, #3
 8019356:	4a1b      	ldr	r2, [pc, #108]	; (80193c4 <etharp_output_to_arp_index+0x124>)
 8019358:	4413      	add	r3, r2
 801935a:	1d19      	adds	r1, r3, #4
 801935c:	79fa      	ldrb	r2, [r7, #7]
 801935e:	4613      	mov	r3, r2
 8019360:	005b      	lsls	r3, r3, #1
 8019362:	4413      	add	r3, r2
 8019364:	00db      	lsls	r3, r3, #3
 8019366:	3308      	adds	r3, #8
 8019368:	4a16      	ldr	r2, [pc, #88]	; (80193c4 <etharp_output_to_arp_index+0x124>)
 801936a:	4413      	add	r3, r2
 801936c:	3304      	adds	r3, #4
 801936e:	461a      	mov	r2, r3
 8019370:	68f8      	ldr	r0, [r7, #12]
 8019372:	f000 fafb 	bl	801996c <etharp_request_dst>
 8019376:	4603      	mov	r3, r0
 8019378:	2b00      	cmp	r3, #0
 801937a:	d109      	bne.n	8019390 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801937c:	79fa      	ldrb	r2, [r7, #7]
 801937e:	4911      	ldr	r1, [pc, #68]	; (80193c4 <etharp_output_to_arp_index+0x124>)
 8019380:	4613      	mov	r3, r2
 8019382:	005b      	lsls	r3, r3, #1
 8019384:	4413      	add	r3, r2
 8019386:	00db      	lsls	r3, r3, #3
 8019388:	440b      	add	r3, r1
 801938a:	3314      	adds	r3, #20
 801938c:	2203      	movs	r2, #3
 801938e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8019390:	68fb      	ldr	r3, [r7, #12]
 8019392:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8019396:	79fa      	ldrb	r2, [r7, #7]
 8019398:	4613      	mov	r3, r2
 801939a:	005b      	lsls	r3, r3, #1
 801939c:	4413      	add	r3, r2
 801939e:	00db      	lsls	r3, r3, #3
 80193a0:	3308      	adds	r3, #8
 80193a2:	4a08      	ldr	r2, [pc, #32]	; (80193c4 <etharp_output_to_arp_index+0x124>)
 80193a4:	4413      	add	r3, r2
 80193a6:	3304      	adds	r3, #4
 80193a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80193ac:	9200      	str	r2, [sp, #0]
 80193ae:	460a      	mov	r2, r1
 80193b0:	68b9      	ldr	r1, [r7, #8]
 80193b2:	68f8      	ldr	r0, [r7, #12]
 80193b4:	f001 fe66 	bl	801b084 <ethernet_output>
 80193b8:	4603      	mov	r3, r0
}
 80193ba:	4618      	mov	r0, r3
 80193bc:	3710      	adds	r7, #16
 80193be:	46bd      	mov	sp, r7
 80193c0:	bd80      	pop	{r7, pc}
 80193c2:	bf00      	nop
 80193c4:	2405e8e8 	.word	0x2405e8e8
 80193c8:	0801f9f4 	.word	0x0801f9f4
 80193cc:	0801fb64 	.word	0x0801fb64
 80193d0:	0801fa6c 	.word	0x0801fa6c

080193d4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80193d4:	b580      	push	{r7, lr}
 80193d6:	b08a      	sub	sp, #40	; 0x28
 80193d8:	af02      	add	r7, sp, #8
 80193da:	60f8      	str	r0, [r7, #12]
 80193dc:	60b9      	str	r1, [r7, #8]
 80193de:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d106      	bne.n	80193f8 <etharp_output+0x24>
 80193ea:	4b73      	ldr	r3, [pc, #460]	; (80195b8 <etharp_output+0x1e4>)
 80193ec:	f240 321e 	movw	r2, #798	; 0x31e
 80193f0:	4972      	ldr	r1, [pc, #456]	; (80195bc <etharp_output+0x1e8>)
 80193f2:	4873      	ldr	r0, [pc, #460]	; (80195c0 <etharp_output+0x1ec>)
 80193f4:	f002 fa36 	bl	801b864 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80193f8:	68bb      	ldr	r3, [r7, #8]
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d106      	bne.n	801940c <etharp_output+0x38>
 80193fe:	4b6e      	ldr	r3, [pc, #440]	; (80195b8 <etharp_output+0x1e4>)
 8019400:	f240 321f 	movw	r2, #799	; 0x31f
 8019404:	496f      	ldr	r1, [pc, #444]	; (80195c4 <etharp_output+0x1f0>)
 8019406:	486e      	ldr	r0, [pc, #440]	; (80195c0 <etharp_output+0x1ec>)
 8019408:	f002 fa2c 	bl	801b864 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	2b00      	cmp	r3, #0
 8019410:	d106      	bne.n	8019420 <etharp_output+0x4c>
 8019412:	4b69      	ldr	r3, [pc, #420]	; (80195b8 <etharp_output+0x1e4>)
 8019414:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019418:	496b      	ldr	r1, [pc, #428]	; (80195c8 <etharp_output+0x1f4>)
 801941a:	4869      	ldr	r0, [pc, #420]	; (80195c0 <etharp_output+0x1ec>)
 801941c:	f002 fa22 	bl	801b864 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	68f9      	ldr	r1, [r7, #12]
 8019426:	4618      	mov	r0, r3
 8019428:	f000 ff1e 	bl	801a268 <ip4_addr_isbroadcast_u32>
 801942c:	4603      	mov	r3, r0
 801942e:	2b00      	cmp	r3, #0
 8019430:	d002      	beq.n	8019438 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8019432:	4b66      	ldr	r3, [pc, #408]	; (80195cc <etharp_output+0x1f8>)
 8019434:	61fb      	str	r3, [r7, #28]
 8019436:	e0af      	b.n	8019598 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	681b      	ldr	r3, [r3, #0]
 801943c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019440:	2be0      	cmp	r3, #224	; 0xe0
 8019442:	d118      	bne.n	8019476 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019444:	2301      	movs	r3, #1
 8019446:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019448:	2300      	movs	r3, #0
 801944a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801944c:	235e      	movs	r3, #94	; 0x5e
 801944e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	3301      	adds	r3, #1
 8019454:	781b      	ldrb	r3, [r3, #0]
 8019456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801945a:	b2db      	uxtb	r3, r3
 801945c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	3302      	adds	r3, #2
 8019462:	781b      	ldrb	r3, [r3, #0]
 8019464:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	3303      	adds	r3, #3
 801946a:	781b      	ldrb	r3, [r3, #0]
 801946c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801946e:	f107 0310 	add.w	r3, r7, #16
 8019472:	61fb      	str	r3, [r7, #28]
 8019474:	e090      	b.n	8019598 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	681a      	ldr	r2, [r3, #0]
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	3304      	adds	r3, #4
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	405a      	eors	r2, r3
 8019482:	68fb      	ldr	r3, [r7, #12]
 8019484:	3308      	adds	r3, #8
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	4013      	ands	r3, r2
 801948a:	2b00      	cmp	r3, #0
 801948c:	d012      	beq.n	80194b4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019494:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8019498:	4293      	cmp	r3, r2
 801949a:	d00b      	beq.n	80194b4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	330c      	adds	r3, #12
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d003      	beq.n	80194ae <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	330c      	adds	r3, #12
 80194aa:	61bb      	str	r3, [r7, #24]
 80194ac:	e002      	b.n	80194b4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80194ae:	f06f 0303 	mvn.w	r3, #3
 80194b2:	e07d      	b.n	80195b0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80194b4:	4b46      	ldr	r3, [pc, #280]	; (80195d0 <etharp_output+0x1fc>)
 80194b6:	781b      	ldrb	r3, [r3, #0]
 80194b8:	4619      	mov	r1, r3
 80194ba:	4a46      	ldr	r2, [pc, #280]	; (80195d4 <etharp_output+0x200>)
 80194bc:	460b      	mov	r3, r1
 80194be:	005b      	lsls	r3, r3, #1
 80194c0:	440b      	add	r3, r1
 80194c2:	00db      	lsls	r3, r3, #3
 80194c4:	4413      	add	r3, r2
 80194c6:	3314      	adds	r3, #20
 80194c8:	781b      	ldrb	r3, [r3, #0]
 80194ca:	2b01      	cmp	r3, #1
 80194cc:	d925      	bls.n	801951a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80194ce:	4b40      	ldr	r3, [pc, #256]	; (80195d0 <etharp_output+0x1fc>)
 80194d0:	781b      	ldrb	r3, [r3, #0]
 80194d2:	4619      	mov	r1, r3
 80194d4:	4a3f      	ldr	r2, [pc, #252]	; (80195d4 <etharp_output+0x200>)
 80194d6:	460b      	mov	r3, r1
 80194d8:	005b      	lsls	r3, r3, #1
 80194da:	440b      	add	r3, r1
 80194dc:	00db      	lsls	r3, r3, #3
 80194de:	4413      	add	r3, r2
 80194e0:	3308      	adds	r3, #8
 80194e2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80194e4:	68fa      	ldr	r2, [r7, #12]
 80194e6:	429a      	cmp	r2, r3
 80194e8:	d117      	bne.n	801951a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80194ea:	69bb      	ldr	r3, [r7, #24]
 80194ec:	681a      	ldr	r2, [r3, #0]
 80194ee:	4b38      	ldr	r3, [pc, #224]	; (80195d0 <etharp_output+0x1fc>)
 80194f0:	781b      	ldrb	r3, [r3, #0]
 80194f2:	4618      	mov	r0, r3
 80194f4:	4937      	ldr	r1, [pc, #220]	; (80195d4 <etharp_output+0x200>)
 80194f6:	4603      	mov	r3, r0
 80194f8:	005b      	lsls	r3, r3, #1
 80194fa:	4403      	add	r3, r0
 80194fc:	00db      	lsls	r3, r3, #3
 80194fe:	440b      	add	r3, r1
 8019500:	3304      	adds	r3, #4
 8019502:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019504:	429a      	cmp	r2, r3
 8019506:	d108      	bne.n	801951a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019508:	4b31      	ldr	r3, [pc, #196]	; (80195d0 <etharp_output+0x1fc>)
 801950a:	781b      	ldrb	r3, [r3, #0]
 801950c:	461a      	mov	r2, r3
 801950e:	68b9      	ldr	r1, [r7, #8]
 8019510:	68f8      	ldr	r0, [r7, #12]
 8019512:	f7ff fec5 	bl	80192a0 <etharp_output_to_arp_index>
 8019516:	4603      	mov	r3, r0
 8019518:	e04a      	b.n	80195b0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801951a:	2300      	movs	r3, #0
 801951c:	75fb      	strb	r3, [r7, #23]
 801951e:	e031      	b.n	8019584 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019520:	7dfa      	ldrb	r2, [r7, #23]
 8019522:	492c      	ldr	r1, [pc, #176]	; (80195d4 <etharp_output+0x200>)
 8019524:	4613      	mov	r3, r2
 8019526:	005b      	lsls	r3, r3, #1
 8019528:	4413      	add	r3, r2
 801952a:	00db      	lsls	r3, r3, #3
 801952c:	440b      	add	r3, r1
 801952e:	3314      	adds	r3, #20
 8019530:	781b      	ldrb	r3, [r3, #0]
 8019532:	2b01      	cmp	r3, #1
 8019534:	d923      	bls.n	801957e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8019536:	7dfa      	ldrb	r2, [r7, #23]
 8019538:	4926      	ldr	r1, [pc, #152]	; (80195d4 <etharp_output+0x200>)
 801953a:	4613      	mov	r3, r2
 801953c:	005b      	lsls	r3, r3, #1
 801953e:	4413      	add	r3, r2
 8019540:	00db      	lsls	r3, r3, #3
 8019542:	440b      	add	r3, r1
 8019544:	3308      	adds	r3, #8
 8019546:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019548:	68fa      	ldr	r2, [r7, #12]
 801954a:	429a      	cmp	r2, r3
 801954c:	d117      	bne.n	801957e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801954e:	69bb      	ldr	r3, [r7, #24]
 8019550:	6819      	ldr	r1, [r3, #0]
 8019552:	7dfa      	ldrb	r2, [r7, #23]
 8019554:	481f      	ldr	r0, [pc, #124]	; (80195d4 <etharp_output+0x200>)
 8019556:	4613      	mov	r3, r2
 8019558:	005b      	lsls	r3, r3, #1
 801955a:	4413      	add	r3, r2
 801955c:	00db      	lsls	r3, r3, #3
 801955e:	4403      	add	r3, r0
 8019560:	3304      	adds	r3, #4
 8019562:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8019564:	4299      	cmp	r1, r3
 8019566:	d10a      	bne.n	801957e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8019568:	4a19      	ldr	r2, [pc, #100]	; (80195d0 <etharp_output+0x1fc>)
 801956a:	7dfb      	ldrb	r3, [r7, #23]
 801956c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801956e:	7dfb      	ldrb	r3, [r7, #23]
 8019570:	461a      	mov	r2, r3
 8019572:	68b9      	ldr	r1, [r7, #8]
 8019574:	68f8      	ldr	r0, [r7, #12]
 8019576:	f7ff fe93 	bl	80192a0 <etharp_output_to_arp_index>
 801957a:	4603      	mov	r3, r0
 801957c:	e018      	b.n	80195b0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801957e:	7dfb      	ldrb	r3, [r7, #23]
 8019580:	3301      	adds	r3, #1
 8019582:	75fb      	strb	r3, [r7, #23]
 8019584:	7dfb      	ldrb	r3, [r7, #23]
 8019586:	2b09      	cmp	r3, #9
 8019588:	d9ca      	bls.n	8019520 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801958a:	68ba      	ldr	r2, [r7, #8]
 801958c:	69b9      	ldr	r1, [r7, #24]
 801958e:	68f8      	ldr	r0, [r7, #12]
 8019590:	f000 f822 	bl	80195d8 <etharp_query>
 8019594:	4603      	mov	r3, r0
 8019596:	e00b      	b.n	80195b0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801959e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80195a2:	9300      	str	r3, [sp, #0]
 80195a4:	69fb      	ldr	r3, [r7, #28]
 80195a6:	68b9      	ldr	r1, [r7, #8]
 80195a8:	68f8      	ldr	r0, [r7, #12]
 80195aa:	f001 fd6b 	bl	801b084 <ethernet_output>
 80195ae:	4603      	mov	r3, r0
}
 80195b0:	4618      	mov	r0, r3
 80195b2:	3720      	adds	r7, #32
 80195b4:	46bd      	mov	sp, r7
 80195b6:	bd80      	pop	{r7, pc}
 80195b8:	0801f9f4 	.word	0x0801f9f4
 80195bc:	0801fb44 	.word	0x0801fb44
 80195c0:	0801fa6c 	.word	0x0801fa6c
 80195c4:	0801fb94 	.word	0x0801fb94
 80195c8:	0801fb34 	.word	0x0801fb34
 80195cc:	08020280 	.word	0x08020280
 80195d0:	2405e9d8 	.word	0x2405e9d8
 80195d4:	2405e8e8 	.word	0x2405e8e8

080195d8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80195d8:	b580      	push	{r7, lr}
 80195da:	b08c      	sub	sp, #48	; 0x30
 80195dc:	af02      	add	r7, sp, #8
 80195de:	60f8      	str	r0, [r7, #12]
 80195e0:	60b9      	str	r1, [r7, #8]
 80195e2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80195e4:	68fb      	ldr	r3, [r7, #12]
 80195e6:	3326      	adds	r3, #38	; 0x26
 80195e8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80195ea:	23ff      	movs	r3, #255	; 0xff
 80195ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80195f0:	2300      	movs	r3, #0
 80195f2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80195f4:	68bb      	ldr	r3, [r7, #8]
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	68f9      	ldr	r1, [r7, #12]
 80195fa:	4618      	mov	r0, r3
 80195fc:	f000 fe34 	bl	801a268 <ip4_addr_isbroadcast_u32>
 8019600:	4603      	mov	r3, r0
 8019602:	2b00      	cmp	r3, #0
 8019604:	d10c      	bne.n	8019620 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019606:	68bb      	ldr	r3, [r7, #8]
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801960e:	2be0      	cmp	r3, #224	; 0xe0
 8019610:	d006      	beq.n	8019620 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019612:	68bb      	ldr	r3, [r7, #8]
 8019614:	2b00      	cmp	r3, #0
 8019616:	d003      	beq.n	8019620 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019618:	68bb      	ldr	r3, [r7, #8]
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	2b00      	cmp	r3, #0
 801961e:	d102      	bne.n	8019626 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019620:	f06f 030f 	mvn.w	r3, #15
 8019624:	e101      	b.n	801982a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019626:	68fa      	ldr	r2, [r7, #12]
 8019628:	2101      	movs	r1, #1
 801962a:	68b8      	ldr	r0, [r7, #8]
 801962c:	f7ff fb60 	bl	8018cf0 <etharp_find_entry>
 8019630:	4603      	mov	r3, r0
 8019632:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019634:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019638:	2b00      	cmp	r3, #0
 801963a:	da02      	bge.n	8019642 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801963c:	8a7b      	ldrh	r3, [r7, #18]
 801963e:	b25b      	sxtb	r3, r3
 8019640:	e0f3      	b.n	801982a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8019642:	8a7b      	ldrh	r3, [r7, #18]
 8019644:	2b7e      	cmp	r3, #126	; 0x7e
 8019646:	d906      	bls.n	8019656 <etharp_query+0x7e>
 8019648:	4b7a      	ldr	r3, [pc, #488]	; (8019834 <etharp_query+0x25c>)
 801964a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801964e:	497a      	ldr	r1, [pc, #488]	; (8019838 <etharp_query+0x260>)
 8019650:	487a      	ldr	r0, [pc, #488]	; (801983c <etharp_query+0x264>)
 8019652:	f002 f907 	bl	801b864 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019656:	8a7b      	ldrh	r3, [r7, #18]
 8019658:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801965a:	7c7a      	ldrb	r2, [r7, #17]
 801965c:	4978      	ldr	r1, [pc, #480]	; (8019840 <etharp_query+0x268>)
 801965e:	4613      	mov	r3, r2
 8019660:	005b      	lsls	r3, r3, #1
 8019662:	4413      	add	r3, r2
 8019664:	00db      	lsls	r3, r3, #3
 8019666:	440b      	add	r3, r1
 8019668:	3314      	adds	r3, #20
 801966a:	781b      	ldrb	r3, [r3, #0]
 801966c:	2b00      	cmp	r3, #0
 801966e:	d115      	bne.n	801969c <etharp_query+0xc4>
    is_new_entry = 1;
 8019670:	2301      	movs	r3, #1
 8019672:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019674:	7c7a      	ldrb	r2, [r7, #17]
 8019676:	4972      	ldr	r1, [pc, #456]	; (8019840 <etharp_query+0x268>)
 8019678:	4613      	mov	r3, r2
 801967a:	005b      	lsls	r3, r3, #1
 801967c:	4413      	add	r3, r2
 801967e:	00db      	lsls	r3, r3, #3
 8019680:	440b      	add	r3, r1
 8019682:	3314      	adds	r3, #20
 8019684:	2201      	movs	r2, #1
 8019686:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019688:	7c7a      	ldrb	r2, [r7, #17]
 801968a:	496d      	ldr	r1, [pc, #436]	; (8019840 <etharp_query+0x268>)
 801968c:	4613      	mov	r3, r2
 801968e:	005b      	lsls	r3, r3, #1
 8019690:	4413      	add	r3, r2
 8019692:	00db      	lsls	r3, r3, #3
 8019694:	440b      	add	r3, r1
 8019696:	3308      	adds	r3, #8
 8019698:	68fa      	ldr	r2, [r7, #12]
 801969a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801969c:	7c7a      	ldrb	r2, [r7, #17]
 801969e:	4968      	ldr	r1, [pc, #416]	; (8019840 <etharp_query+0x268>)
 80196a0:	4613      	mov	r3, r2
 80196a2:	005b      	lsls	r3, r3, #1
 80196a4:	4413      	add	r3, r2
 80196a6:	00db      	lsls	r3, r3, #3
 80196a8:	440b      	add	r3, r1
 80196aa:	3314      	adds	r3, #20
 80196ac:	781b      	ldrb	r3, [r3, #0]
 80196ae:	2b01      	cmp	r3, #1
 80196b0:	d011      	beq.n	80196d6 <etharp_query+0xfe>
 80196b2:	7c7a      	ldrb	r2, [r7, #17]
 80196b4:	4962      	ldr	r1, [pc, #392]	; (8019840 <etharp_query+0x268>)
 80196b6:	4613      	mov	r3, r2
 80196b8:	005b      	lsls	r3, r3, #1
 80196ba:	4413      	add	r3, r2
 80196bc:	00db      	lsls	r3, r3, #3
 80196be:	440b      	add	r3, r1
 80196c0:	3314      	adds	r3, #20
 80196c2:	781b      	ldrb	r3, [r3, #0]
 80196c4:	2b01      	cmp	r3, #1
 80196c6:	d806      	bhi.n	80196d6 <etharp_query+0xfe>
 80196c8:	4b5a      	ldr	r3, [pc, #360]	; (8019834 <etharp_query+0x25c>)
 80196ca:	f240 32cd 	movw	r2, #973	; 0x3cd
 80196ce:	495d      	ldr	r1, [pc, #372]	; (8019844 <etharp_query+0x26c>)
 80196d0:	485a      	ldr	r0, [pc, #360]	; (801983c <etharp_query+0x264>)
 80196d2:	f002 f8c7 	bl	801b864 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80196d6:	6a3b      	ldr	r3, [r7, #32]
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d102      	bne.n	80196e2 <etharp_query+0x10a>
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d10c      	bne.n	80196fc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80196e2:	68b9      	ldr	r1, [r7, #8]
 80196e4:	68f8      	ldr	r0, [r7, #12]
 80196e6:	f000 f963 	bl	80199b0 <etharp_request>
 80196ea:	4603      	mov	r3, r0
 80196ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d102      	bne.n	80196fc <etharp_query+0x124>
      return result;
 80196f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80196fa:	e096      	b.n	801982a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d106      	bne.n	8019710 <etharp_query+0x138>
 8019702:	4b4c      	ldr	r3, [pc, #304]	; (8019834 <etharp_query+0x25c>)
 8019704:	f240 32e1 	movw	r2, #993	; 0x3e1
 8019708:	494f      	ldr	r1, [pc, #316]	; (8019848 <etharp_query+0x270>)
 801970a:	484c      	ldr	r0, [pc, #304]	; (801983c <etharp_query+0x264>)
 801970c:	f002 f8aa 	bl	801b864 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019710:	7c7a      	ldrb	r2, [r7, #17]
 8019712:	494b      	ldr	r1, [pc, #300]	; (8019840 <etharp_query+0x268>)
 8019714:	4613      	mov	r3, r2
 8019716:	005b      	lsls	r3, r3, #1
 8019718:	4413      	add	r3, r2
 801971a:	00db      	lsls	r3, r3, #3
 801971c:	440b      	add	r3, r1
 801971e:	3314      	adds	r3, #20
 8019720:	781b      	ldrb	r3, [r3, #0]
 8019722:	2b01      	cmp	r3, #1
 8019724:	d917      	bls.n	8019756 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8019726:	4a49      	ldr	r2, [pc, #292]	; (801984c <etharp_query+0x274>)
 8019728:	7c7b      	ldrb	r3, [r7, #17]
 801972a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801972c:	7c7a      	ldrb	r2, [r7, #17]
 801972e:	4613      	mov	r3, r2
 8019730:	005b      	lsls	r3, r3, #1
 8019732:	4413      	add	r3, r2
 8019734:	00db      	lsls	r3, r3, #3
 8019736:	3308      	adds	r3, #8
 8019738:	4a41      	ldr	r2, [pc, #260]	; (8019840 <etharp_query+0x268>)
 801973a:	4413      	add	r3, r2
 801973c:	3304      	adds	r3, #4
 801973e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019742:	9200      	str	r2, [sp, #0]
 8019744:	697a      	ldr	r2, [r7, #20]
 8019746:	6879      	ldr	r1, [r7, #4]
 8019748:	68f8      	ldr	r0, [r7, #12]
 801974a:	f001 fc9b 	bl	801b084 <ethernet_output>
 801974e:	4603      	mov	r3, r0
 8019750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019754:	e067      	b.n	8019826 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019756:	7c7a      	ldrb	r2, [r7, #17]
 8019758:	4939      	ldr	r1, [pc, #228]	; (8019840 <etharp_query+0x268>)
 801975a:	4613      	mov	r3, r2
 801975c:	005b      	lsls	r3, r3, #1
 801975e:	4413      	add	r3, r2
 8019760:	00db      	lsls	r3, r3, #3
 8019762:	440b      	add	r3, r1
 8019764:	3314      	adds	r3, #20
 8019766:	781b      	ldrb	r3, [r3, #0]
 8019768:	2b01      	cmp	r3, #1
 801976a:	d15c      	bne.n	8019826 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801976c:	2300      	movs	r3, #0
 801976e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019774:	e01c      	b.n	80197b0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019776:	69fb      	ldr	r3, [r7, #28]
 8019778:	895a      	ldrh	r2, [r3, #10]
 801977a:	69fb      	ldr	r3, [r7, #28]
 801977c:	891b      	ldrh	r3, [r3, #8]
 801977e:	429a      	cmp	r2, r3
 8019780:	d10a      	bne.n	8019798 <etharp_query+0x1c0>
 8019782:	69fb      	ldr	r3, [r7, #28]
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	2b00      	cmp	r3, #0
 8019788:	d006      	beq.n	8019798 <etharp_query+0x1c0>
 801978a:	4b2a      	ldr	r3, [pc, #168]	; (8019834 <etharp_query+0x25c>)
 801978c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8019790:	492f      	ldr	r1, [pc, #188]	; (8019850 <etharp_query+0x278>)
 8019792:	482a      	ldr	r0, [pc, #168]	; (801983c <etharp_query+0x264>)
 8019794:	f002 f866 	bl	801b864 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019798:	69fb      	ldr	r3, [r7, #28]
 801979a:	7b1b      	ldrb	r3, [r3, #12]
 801979c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d002      	beq.n	80197aa <etharp_query+0x1d2>
        copy_needed = 1;
 80197a4:	2301      	movs	r3, #1
 80197a6:	61bb      	str	r3, [r7, #24]
        break;
 80197a8:	e005      	b.n	80197b6 <etharp_query+0x1de>
      }
      p = p->next;
 80197aa:	69fb      	ldr	r3, [r7, #28]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	61fb      	str	r3, [r7, #28]
    while (p) {
 80197b0:	69fb      	ldr	r3, [r7, #28]
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d1df      	bne.n	8019776 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80197b6:	69bb      	ldr	r3, [r7, #24]
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d007      	beq.n	80197cc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80197bc:	687a      	ldr	r2, [r7, #4]
 80197be:	f44f 7120 	mov.w	r1, #640	; 0x280
 80197c2:	200e      	movs	r0, #14
 80197c4:	f7f8 fc52 	bl	801206c <pbuf_clone>
 80197c8:	61f8      	str	r0, [r7, #28]
 80197ca:	e004      	b.n	80197d6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80197d0:	69f8      	ldr	r0, [r7, #28]
 80197d2:	f7f8 fa89 	bl	8011ce8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80197d6:	69fb      	ldr	r3, [r7, #28]
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d021      	beq.n	8019820 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80197dc:	7c7a      	ldrb	r2, [r7, #17]
 80197de:	4918      	ldr	r1, [pc, #96]	; (8019840 <etharp_query+0x268>)
 80197e0:	4613      	mov	r3, r2
 80197e2:	005b      	lsls	r3, r3, #1
 80197e4:	4413      	add	r3, r2
 80197e6:	00db      	lsls	r3, r3, #3
 80197e8:	440b      	add	r3, r1
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d00a      	beq.n	8019806 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80197f0:	7c7a      	ldrb	r2, [r7, #17]
 80197f2:	4913      	ldr	r1, [pc, #76]	; (8019840 <etharp_query+0x268>)
 80197f4:	4613      	mov	r3, r2
 80197f6:	005b      	lsls	r3, r3, #1
 80197f8:	4413      	add	r3, r2
 80197fa:	00db      	lsls	r3, r3, #3
 80197fc:	440b      	add	r3, r1
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	4618      	mov	r0, r3
 8019802:	f7f8 f9cb 	bl	8011b9c <pbuf_free>
      }
      arp_table[i].q = p;
 8019806:	7c7a      	ldrb	r2, [r7, #17]
 8019808:	490d      	ldr	r1, [pc, #52]	; (8019840 <etharp_query+0x268>)
 801980a:	4613      	mov	r3, r2
 801980c:	005b      	lsls	r3, r3, #1
 801980e:	4413      	add	r3, r2
 8019810:	00db      	lsls	r3, r3, #3
 8019812:	440b      	add	r3, r1
 8019814:	69fa      	ldr	r2, [r7, #28]
 8019816:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019818:	2300      	movs	r3, #0
 801981a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801981e:	e002      	b.n	8019826 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019820:	23ff      	movs	r3, #255	; 0xff
 8019822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8019826:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801982a:	4618      	mov	r0, r3
 801982c:	3728      	adds	r7, #40	; 0x28
 801982e:	46bd      	mov	sp, r7
 8019830:	bd80      	pop	{r7, pc}
 8019832:	bf00      	nop
 8019834:	0801f9f4 	.word	0x0801f9f4
 8019838:	0801fba0 	.word	0x0801fba0
 801983c:	0801fa6c 	.word	0x0801fa6c
 8019840:	2405e8e8 	.word	0x2405e8e8
 8019844:	0801fbb0 	.word	0x0801fbb0
 8019848:	0801fb94 	.word	0x0801fb94
 801984c:	2405e9d8 	.word	0x2405e9d8
 8019850:	0801fbd8 	.word	0x0801fbd8

08019854 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019854:	b580      	push	{r7, lr}
 8019856:	b08a      	sub	sp, #40	; 0x28
 8019858:	af02      	add	r7, sp, #8
 801985a:	60f8      	str	r0, [r7, #12]
 801985c:	60b9      	str	r1, [r7, #8]
 801985e:	607a      	str	r2, [r7, #4]
 8019860:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019862:	2300      	movs	r3, #0
 8019864:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	2b00      	cmp	r3, #0
 801986a:	d106      	bne.n	801987a <etharp_raw+0x26>
 801986c:	4b3a      	ldr	r3, [pc, #232]	; (8019958 <etharp_raw+0x104>)
 801986e:	f240 4257 	movw	r2, #1111	; 0x457
 8019872:	493a      	ldr	r1, [pc, #232]	; (801995c <etharp_raw+0x108>)
 8019874:	483a      	ldr	r0, [pc, #232]	; (8019960 <etharp_raw+0x10c>)
 8019876:	f001 fff5 	bl	801b864 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801987a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801987e:	211c      	movs	r1, #28
 8019880:	200e      	movs	r0, #14
 8019882:	f7f7 fea3 	bl	80115cc <pbuf_alloc>
 8019886:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019888:	69bb      	ldr	r3, [r7, #24]
 801988a:	2b00      	cmp	r3, #0
 801988c:	d102      	bne.n	8019894 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801988e:	f04f 33ff 	mov.w	r3, #4294967295
 8019892:	e05d      	b.n	8019950 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019894:	69bb      	ldr	r3, [r7, #24]
 8019896:	895b      	ldrh	r3, [r3, #10]
 8019898:	2b1b      	cmp	r3, #27
 801989a:	d806      	bhi.n	80198aa <etharp_raw+0x56>
 801989c:	4b2e      	ldr	r3, [pc, #184]	; (8019958 <etharp_raw+0x104>)
 801989e:	f240 4262 	movw	r2, #1122	; 0x462
 80198a2:	4930      	ldr	r1, [pc, #192]	; (8019964 <etharp_raw+0x110>)
 80198a4:	482e      	ldr	r0, [pc, #184]	; (8019960 <etharp_raw+0x10c>)
 80198a6:	f001 ffdd 	bl	801b864 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80198aa:	69bb      	ldr	r3, [r7, #24]
 80198ac:	685b      	ldr	r3, [r3, #4]
 80198ae:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80198b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80198b2:	4618      	mov	r0, r3
 80198b4:	f7f6 fbf8 	bl	80100a8 <lwip_htons>
 80198b8:	4603      	mov	r3, r0
 80198ba:	461a      	mov	r2, r3
 80198bc:	697b      	ldr	r3, [r7, #20]
 80198be:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80198c6:	2b06      	cmp	r3, #6
 80198c8:	d006      	beq.n	80198d8 <etharp_raw+0x84>
 80198ca:	4b23      	ldr	r3, [pc, #140]	; (8019958 <etharp_raw+0x104>)
 80198cc:	f240 4269 	movw	r2, #1129	; 0x469
 80198d0:	4925      	ldr	r1, [pc, #148]	; (8019968 <etharp_raw+0x114>)
 80198d2:	4823      	ldr	r0, [pc, #140]	; (8019960 <etharp_raw+0x10c>)
 80198d4:	f001 ffc6 	bl	801b864 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80198d8:	697b      	ldr	r3, [r7, #20]
 80198da:	3308      	adds	r3, #8
 80198dc:	2206      	movs	r2, #6
 80198de:	6839      	ldr	r1, [r7, #0]
 80198e0:	4618      	mov	r0, r3
 80198e2:	f001 fefa 	bl	801b6da <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80198e6:	697b      	ldr	r3, [r7, #20]
 80198e8:	3312      	adds	r3, #18
 80198ea:	2206      	movs	r2, #6
 80198ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80198ee:	4618      	mov	r0, r3
 80198f0:	f001 fef3 	bl	801b6da <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80198f4:	697b      	ldr	r3, [r7, #20]
 80198f6:	330e      	adds	r3, #14
 80198f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80198fa:	6812      	ldr	r2, [r2, #0]
 80198fc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80198fe:	697b      	ldr	r3, [r7, #20]
 8019900:	3318      	adds	r3, #24
 8019902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019904:	6812      	ldr	r2, [r2, #0]
 8019906:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019908:	697b      	ldr	r3, [r7, #20]
 801990a:	2200      	movs	r2, #0
 801990c:	701a      	strb	r2, [r3, #0]
 801990e:	2200      	movs	r2, #0
 8019910:	f042 0201 	orr.w	r2, r2, #1
 8019914:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019916:	697b      	ldr	r3, [r7, #20]
 8019918:	2200      	movs	r2, #0
 801991a:	f042 0208 	orr.w	r2, r2, #8
 801991e:	709a      	strb	r2, [r3, #2]
 8019920:	2200      	movs	r2, #0
 8019922:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019924:	697b      	ldr	r3, [r7, #20]
 8019926:	2206      	movs	r2, #6
 8019928:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801992a:	697b      	ldr	r3, [r7, #20]
 801992c:	2204      	movs	r2, #4
 801992e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019930:	f640 0306 	movw	r3, #2054	; 0x806
 8019934:	9300      	str	r3, [sp, #0]
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	68ba      	ldr	r2, [r7, #8]
 801993a:	69b9      	ldr	r1, [r7, #24]
 801993c:	68f8      	ldr	r0, [r7, #12]
 801993e:	f001 fba1 	bl	801b084 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019942:	69b8      	ldr	r0, [r7, #24]
 8019944:	f7f8 f92a 	bl	8011b9c <pbuf_free>
  p = NULL;
 8019948:	2300      	movs	r3, #0
 801994a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801994c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019950:	4618      	mov	r0, r3
 8019952:	3720      	adds	r7, #32
 8019954:	46bd      	mov	sp, r7
 8019956:	bd80      	pop	{r7, pc}
 8019958:	0801f9f4 	.word	0x0801f9f4
 801995c:	0801fb44 	.word	0x0801fb44
 8019960:	0801fa6c 	.word	0x0801fa6c
 8019964:	0801fbf4 	.word	0x0801fbf4
 8019968:	0801fc28 	.word	0x0801fc28

0801996c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801996c:	b580      	push	{r7, lr}
 801996e:	b088      	sub	sp, #32
 8019970:	af04      	add	r7, sp, #16
 8019972:	60f8      	str	r0, [r7, #12]
 8019974:	60b9      	str	r1, [r7, #8]
 8019976:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019978:	68fb      	ldr	r3, [r7, #12]
 801997a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801997e:	68fb      	ldr	r3, [r7, #12]
 8019980:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019988:	2201      	movs	r2, #1
 801998a:	9203      	str	r2, [sp, #12]
 801998c:	68ba      	ldr	r2, [r7, #8]
 801998e:	9202      	str	r2, [sp, #8]
 8019990:	4a06      	ldr	r2, [pc, #24]	; (80199ac <etharp_request_dst+0x40>)
 8019992:	9201      	str	r2, [sp, #4]
 8019994:	9300      	str	r3, [sp, #0]
 8019996:	4603      	mov	r3, r0
 8019998:	687a      	ldr	r2, [r7, #4]
 801999a:	68f8      	ldr	r0, [r7, #12]
 801999c:	f7ff ff5a 	bl	8019854 <etharp_raw>
 80199a0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80199a2:	4618      	mov	r0, r3
 80199a4:	3710      	adds	r7, #16
 80199a6:	46bd      	mov	sp, r7
 80199a8:	bd80      	pop	{r7, pc}
 80199aa:	bf00      	nop
 80199ac:	08020288 	.word	0x08020288

080199b0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80199b0:	b580      	push	{r7, lr}
 80199b2:	b082      	sub	sp, #8
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	6078      	str	r0, [r7, #4]
 80199b8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80199ba:	4a05      	ldr	r2, [pc, #20]	; (80199d0 <etharp_request+0x20>)
 80199bc:	6839      	ldr	r1, [r7, #0]
 80199be:	6878      	ldr	r0, [r7, #4]
 80199c0:	f7ff ffd4 	bl	801996c <etharp_request_dst>
 80199c4:	4603      	mov	r3, r0
}
 80199c6:	4618      	mov	r0, r3
 80199c8:	3708      	adds	r7, #8
 80199ca:	46bd      	mov	sp, r7
 80199cc:	bd80      	pop	{r7, pc}
 80199ce:	bf00      	nop
 80199d0:	08020280 	.word	0x08020280

080199d4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80199d4:	b580      	push	{r7, lr}
 80199d6:	b08e      	sub	sp, #56	; 0x38
 80199d8:	af04      	add	r7, sp, #16
 80199da:	6078      	str	r0, [r7, #4]
 80199dc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80199de:	4b87      	ldr	r3, [pc, #540]	; (8019bfc <icmp_input+0x228>)
 80199e0:	689b      	ldr	r3, [r3, #8]
 80199e2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80199e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199e6:	781b      	ldrb	r3, [r3, #0]
 80199e8:	f003 030f 	and.w	r3, r3, #15
 80199ec:	b2db      	uxtb	r3, r3
 80199ee:	009b      	lsls	r3, r3, #2
 80199f0:	b2db      	uxtb	r3, r3
 80199f2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80199f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80199f6:	2b13      	cmp	r3, #19
 80199f8:	f240 80e8 	bls.w	8019bcc <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	895b      	ldrh	r3, [r3, #10]
 8019a00:	2b03      	cmp	r3, #3
 8019a02:	f240 80e5 	bls.w	8019bd0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	685b      	ldr	r3, [r3, #4]
 8019a0a:	781b      	ldrb	r3, [r3, #0]
 8019a0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019a10:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	f000 80d2 	beq.w	8019bbe <icmp_input+0x1ea>
 8019a1a:	2b08      	cmp	r3, #8
 8019a1c:	f040 80d2 	bne.w	8019bc4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019a20:	4b77      	ldr	r3, [pc, #476]	; (8019c00 <icmp_input+0x22c>)
 8019a22:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019a24:	4b75      	ldr	r3, [pc, #468]	; (8019bfc <icmp_input+0x228>)
 8019a26:	695b      	ldr	r3, [r3, #20]
 8019a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019a2c:	2be0      	cmp	r3, #224	; 0xe0
 8019a2e:	f000 80d6 	beq.w	8019bde <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019a32:	4b72      	ldr	r3, [pc, #456]	; (8019bfc <icmp_input+0x228>)
 8019a34:	695b      	ldr	r3, [r3, #20]
 8019a36:	4a71      	ldr	r2, [pc, #452]	; (8019bfc <icmp_input+0x228>)
 8019a38:	6812      	ldr	r2, [r2, #0]
 8019a3a:	4611      	mov	r1, r2
 8019a3c:	4618      	mov	r0, r3
 8019a3e:	f000 fc13 	bl	801a268 <ip4_addr_isbroadcast_u32>
 8019a42:	4603      	mov	r3, r0
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	f040 80cc 	bne.w	8019be2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	891b      	ldrh	r3, [r3, #8]
 8019a4e:	2b07      	cmp	r3, #7
 8019a50:	f240 80c0 	bls.w	8019bd4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8019a54:	6878      	ldr	r0, [r7, #4]
 8019a56:	f7f6 fc81 	bl	801035c <inet_chksum_pbuf>
 8019a5a:	4603      	mov	r3, r0
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d003      	beq.n	8019a68 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8019a60:	6878      	ldr	r0, [r7, #4]
 8019a62:	f7f8 f89b 	bl	8011b9c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8019a66:	e0c5      	b.n	8019bf4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019a68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019a6a:	330e      	adds	r3, #14
 8019a6c:	4619      	mov	r1, r3
 8019a6e:	6878      	ldr	r0, [r7, #4]
 8019a70:	f7f7 fffe 	bl	8011a70 <pbuf_add_header>
 8019a74:	4603      	mov	r3, r0
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d04b      	beq.n	8019b12 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	891a      	ldrh	r2, [r3, #8]
 8019a7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019a80:	4413      	add	r3, r2
 8019a82:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	891b      	ldrh	r3, [r3, #8]
 8019a88:	8b7a      	ldrh	r2, [r7, #26]
 8019a8a:	429a      	cmp	r2, r3
 8019a8c:	f0c0 80ab 	bcc.w	8019be6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019a90:	8b7b      	ldrh	r3, [r7, #26]
 8019a92:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019a96:	4619      	mov	r1, r3
 8019a98:	200e      	movs	r0, #14
 8019a9a:	f7f7 fd97 	bl	80115cc <pbuf_alloc>
 8019a9e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019aa0:	697b      	ldr	r3, [r7, #20]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	f000 80a1 	beq.w	8019bea <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019aa8:	697b      	ldr	r3, [r7, #20]
 8019aaa:	895b      	ldrh	r3, [r3, #10]
 8019aac:	461a      	mov	r2, r3
 8019aae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ab0:	3308      	adds	r3, #8
 8019ab2:	429a      	cmp	r2, r3
 8019ab4:	d203      	bcs.n	8019abe <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019ab6:	6978      	ldr	r0, [r7, #20]
 8019ab8:	f7f8 f870 	bl	8011b9c <pbuf_free>
          goto icmperr;
 8019abc:	e096      	b.n	8019bec <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019abe:	697b      	ldr	r3, [r7, #20]
 8019ac0:	685b      	ldr	r3, [r3, #4]
 8019ac2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019ac6:	4618      	mov	r0, r3
 8019ac8:	f001 fe07 	bl	801b6da <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019acc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ace:	4619      	mov	r1, r3
 8019ad0:	6978      	ldr	r0, [r7, #20]
 8019ad2:	f7f7 ffdd 	bl	8011a90 <pbuf_remove_header>
 8019ad6:	4603      	mov	r3, r0
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d009      	beq.n	8019af0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019adc:	4b49      	ldr	r3, [pc, #292]	; (8019c04 <icmp_input+0x230>)
 8019ade:	22b6      	movs	r2, #182	; 0xb6
 8019ae0:	4949      	ldr	r1, [pc, #292]	; (8019c08 <icmp_input+0x234>)
 8019ae2:	484a      	ldr	r0, [pc, #296]	; (8019c0c <icmp_input+0x238>)
 8019ae4:	f001 febe 	bl	801b864 <iprintf>
          pbuf_free(r);
 8019ae8:	6978      	ldr	r0, [r7, #20]
 8019aea:	f7f8 f857 	bl	8011b9c <pbuf_free>
          goto icmperr;
 8019aee:	e07d      	b.n	8019bec <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019af0:	6879      	ldr	r1, [r7, #4]
 8019af2:	6978      	ldr	r0, [r7, #20]
 8019af4:	f7f8 f976 	bl	8011de4 <pbuf_copy>
 8019af8:	4603      	mov	r3, r0
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d003      	beq.n	8019b06 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019afe:	6978      	ldr	r0, [r7, #20]
 8019b00:	f7f8 f84c 	bl	8011b9c <pbuf_free>
          goto icmperr;
 8019b04:	e072      	b.n	8019bec <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8019b06:	6878      	ldr	r0, [r7, #4]
 8019b08:	f7f8 f848 	bl	8011b9c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019b0c:	697b      	ldr	r3, [r7, #20]
 8019b0e:	607b      	str	r3, [r7, #4]
 8019b10:	e00f      	b.n	8019b32 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019b12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019b14:	330e      	adds	r3, #14
 8019b16:	4619      	mov	r1, r3
 8019b18:	6878      	ldr	r0, [r7, #4]
 8019b1a:	f7f7 ffb9 	bl	8011a90 <pbuf_remove_header>
 8019b1e:	4603      	mov	r3, r0
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d006      	beq.n	8019b32 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019b24:	4b37      	ldr	r3, [pc, #220]	; (8019c04 <icmp_input+0x230>)
 8019b26:	22c7      	movs	r2, #199	; 0xc7
 8019b28:	4939      	ldr	r1, [pc, #228]	; (8019c10 <icmp_input+0x23c>)
 8019b2a:	4838      	ldr	r0, [pc, #224]	; (8019c0c <icmp_input+0x238>)
 8019b2c:	f001 fe9a 	bl	801b864 <iprintf>
          goto icmperr;
 8019b30:	e05c      	b.n	8019bec <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	685b      	ldr	r3, [r3, #4]
 8019b36:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019b38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019b3a:	4619      	mov	r1, r3
 8019b3c:	6878      	ldr	r0, [r7, #4]
 8019b3e:	f7f7 ff97 	bl	8011a70 <pbuf_add_header>
 8019b42:	4603      	mov	r3, r0
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d13c      	bne.n	8019bc2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	685b      	ldr	r3, [r3, #4]
 8019b4c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019b4e:	69fb      	ldr	r3, [r7, #28]
 8019b50:	681a      	ldr	r2, [r3, #0]
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019b56:	4b29      	ldr	r3, [pc, #164]	; (8019bfc <icmp_input+0x228>)
 8019b58:	691a      	ldr	r2, [r3, #16]
 8019b5a:	68fb      	ldr	r3, [r7, #12]
 8019b5c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019b5e:	693b      	ldr	r3, [r7, #16]
 8019b60:	2200      	movs	r2, #0
 8019b62:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8019b64:	693b      	ldr	r3, [r7, #16]
 8019b66:	885b      	ldrh	r3, [r3, #2]
 8019b68:	b29b      	uxth	r3, r3
 8019b6a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8019b6e:	4293      	cmp	r3, r2
 8019b70:	d907      	bls.n	8019b82 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8019b72:	693b      	ldr	r3, [r7, #16]
 8019b74:	885b      	ldrh	r3, [r3, #2]
 8019b76:	b29b      	uxth	r3, r3
 8019b78:	3309      	adds	r3, #9
 8019b7a:	b29a      	uxth	r2, r3
 8019b7c:	693b      	ldr	r3, [r7, #16]
 8019b7e:	805a      	strh	r2, [r3, #2]
 8019b80:	e006      	b.n	8019b90 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8019b82:	693b      	ldr	r3, [r7, #16]
 8019b84:	885b      	ldrh	r3, [r3, #2]
 8019b86:	b29b      	uxth	r3, r3
 8019b88:	3308      	adds	r3, #8
 8019b8a:	b29a      	uxth	r2, r3
 8019b8c:	693b      	ldr	r3, [r7, #16]
 8019b8e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019b90:	68fb      	ldr	r3, [r7, #12]
 8019b92:	22ff      	movs	r2, #255	; 0xff
 8019b94:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019b96:	68fb      	ldr	r3, [r7, #12]
 8019b98:	2200      	movs	r2, #0
 8019b9a:	729a      	strb	r2, [r3, #10]
 8019b9c:	2200      	movs	r2, #0
 8019b9e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019ba0:	683b      	ldr	r3, [r7, #0]
 8019ba2:	9302      	str	r3, [sp, #8]
 8019ba4:	2301      	movs	r3, #1
 8019ba6:	9301      	str	r3, [sp, #4]
 8019ba8:	2300      	movs	r3, #0
 8019baa:	9300      	str	r3, [sp, #0]
 8019bac:	23ff      	movs	r3, #255	; 0xff
 8019bae:	2200      	movs	r2, #0
 8019bb0:	69f9      	ldr	r1, [r7, #28]
 8019bb2:	6878      	ldr	r0, [r7, #4]
 8019bb4:	f000 fa80 	bl	801a0b8 <ip4_output_if>
 8019bb8:	4603      	mov	r3, r0
 8019bba:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019bbc:	e001      	b.n	8019bc2 <icmp_input+0x1ee>
      break;
 8019bbe:	bf00      	nop
 8019bc0:	e000      	b.n	8019bc4 <icmp_input+0x1f0>
      break;
 8019bc2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019bc4:	6878      	ldr	r0, [r7, #4]
 8019bc6:	f7f7 ffe9 	bl	8011b9c <pbuf_free>
  return;
 8019bca:	e013      	b.n	8019bf4 <icmp_input+0x220>
    goto lenerr;
 8019bcc:	bf00      	nop
 8019bce:	e002      	b.n	8019bd6 <icmp_input+0x202>
    goto lenerr;
 8019bd0:	bf00      	nop
 8019bd2:	e000      	b.n	8019bd6 <icmp_input+0x202>
        goto lenerr;
 8019bd4:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019bd6:	6878      	ldr	r0, [r7, #4]
 8019bd8:	f7f7 ffe0 	bl	8011b9c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019bdc:	e00a      	b.n	8019bf4 <icmp_input+0x220>
        goto icmperr;
 8019bde:	bf00      	nop
 8019be0:	e004      	b.n	8019bec <icmp_input+0x218>
        goto icmperr;
 8019be2:	bf00      	nop
 8019be4:	e002      	b.n	8019bec <icmp_input+0x218>
          goto icmperr;
 8019be6:	bf00      	nop
 8019be8:	e000      	b.n	8019bec <icmp_input+0x218>
          goto icmperr;
 8019bea:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019bec:	6878      	ldr	r0, [r7, #4]
 8019bee:	f7f7 ffd5 	bl	8011b9c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019bf2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019bf4:	3728      	adds	r7, #40	; 0x28
 8019bf6:	46bd      	mov	sp, r7
 8019bf8:	bd80      	pop	{r7, pc}
 8019bfa:	bf00      	nop
 8019bfc:	24015e18 	.word	0x24015e18
 8019c00:	24015e2c 	.word	0x24015e2c
 8019c04:	0801fc6c 	.word	0x0801fc6c
 8019c08:	0801fca4 	.word	0x0801fca4
 8019c0c:	0801fcdc 	.word	0x0801fcdc
 8019c10:	0801fd04 	.word	0x0801fd04

08019c14 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b082      	sub	sp, #8
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
 8019c1c:	460b      	mov	r3, r1
 8019c1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019c20:	78fb      	ldrb	r3, [r7, #3]
 8019c22:	461a      	mov	r2, r3
 8019c24:	2103      	movs	r1, #3
 8019c26:	6878      	ldr	r0, [r7, #4]
 8019c28:	f000 f814 	bl	8019c54 <icmp_send_response>
}
 8019c2c:	bf00      	nop
 8019c2e:	3708      	adds	r7, #8
 8019c30:	46bd      	mov	sp, r7
 8019c32:	bd80      	pop	{r7, pc}

08019c34 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019c34:	b580      	push	{r7, lr}
 8019c36:	b082      	sub	sp, #8
 8019c38:	af00      	add	r7, sp, #0
 8019c3a:	6078      	str	r0, [r7, #4]
 8019c3c:	460b      	mov	r3, r1
 8019c3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019c40:	78fb      	ldrb	r3, [r7, #3]
 8019c42:	461a      	mov	r2, r3
 8019c44:	210b      	movs	r1, #11
 8019c46:	6878      	ldr	r0, [r7, #4]
 8019c48:	f000 f804 	bl	8019c54 <icmp_send_response>
}
 8019c4c:	bf00      	nop
 8019c4e:	3708      	adds	r7, #8
 8019c50:	46bd      	mov	sp, r7
 8019c52:	bd80      	pop	{r7, pc}

08019c54 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019c54:	b580      	push	{r7, lr}
 8019c56:	b08c      	sub	sp, #48	; 0x30
 8019c58:	af04      	add	r7, sp, #16
 8019c5a:	6078      	str	r0, [r7, #4]
 8019c5c:	460b      	mov	r3, r1
 8019c5e:	70fb      	strb	r3, [r7, #3]
 8019c60:	4613      	mov	r3, r2
 8019c62:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019c64:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019c68:	2124      	movs	r1, #36	; 0x24
 8019c6a:	2022      	movs	r0, #34	; 0x22
 8019c6c:	f7f7 fcae 	bl	80115cc <pbuf_alloc>
 8019c70:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019c72:	69fb      	ldr	r3, [r7, #28]
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d056      	beq.n	8019d26 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019c78:	69fb      	ldr	r3, [r7, #28]
 8019c7a:	895b      	ldrh	r3, [r3, #10]
 8019c7c:	2b23      	cmp	r3, #35	; 0x23
 8019c7e:	d806      	bhi.n	8019c8e <icmp_send_response+0x3a>
 8019c80:	4b2b      	ldr	r3, [pc, #172]	; (8019d30 <icmp_send_response+0xdc>)
 8019c82:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019c86:	492b      	ldr	r1, [pc, #172]	; (8019d34 <icmp_send_response+0xe0>)
 8019c88:	482b      	ldr	r0, [pc, #172]	; (8019d38 <icmp_send_response+0xe4>)
 8019c8a:	f001 fdeb 	bl	801b864 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	685b      	ldr	r3, [r3, #4]
 8019c92:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019c94:	69fb      	ldr	r3, [r7, #28]
 8019c96:	685b      	ldr	r3, [r3, #4]
 8019c98:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019c9a:	697b      	ldr	r3, [r7, #20]
 8019c9c:	78fa      	ldrb	r2, [r7, #3]
 8019c9e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019ca0:	697b      	ldr	r3, [r7, #20]
 8019ca2:	78ba      	ldrb	r2, [r7, #2]
 8019ca4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019ca6:	697b      	ldr	r3, [r7, #20]
 8019ca8:	2200      	movs	r2, #0
 8019caa:	711a      	strb	r2, [r3, #4]
 8019cac:	2200      	movs	r2, #0
 8019cae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019cb0:	697b      	ldr	r3, [r7, #20]
 8019cb2:	2200      	movs	r2, #0
 8019cb4:	719a      	strb	r2, [r3, #6]
 8019cb6:	2200      	movs	r2, #0
 8019cb8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019cba:	69fb      	ldr	r3, [r7, #28]
 8019cbc:	685b      	ldr	r3, [r3, #4]
 8019cbe:	f103 0008 	add.w	r0, r3, #8
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	685b      	ldr	r3, [r3, #4]
 8019cc6:	221c      	movs	r2, #28
 8019cc8:	4619      	mov	r1, r3
 8019cca:	f001 fd06 	bl	801b6da <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019cce:	69bb      	ldr	r3, [r7, #24]
 8019cd0:	68db      	ldr	r3, [r3, #12]
 8019cd2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019cd4:	f107 030c 	add.w	r3, r7, #12
 8019cd8:	4618      	mov	r0, r3
 8019cda:	f000 f82f 	bl	8019d3c <ip4_route>
 8019cde:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019ce0:	693b      	ldr	r3, [r7, #16]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d01b      	beq.n	8019d1e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019ce6:	697b      	ldr	r3, [r7, #20]
 8019ce8:	2200      	movs	r2, #0
 8019cea:	709a      	strb	r2, [r3, #2]
 8019cec:	2200      	movs	r2, #0
 8019cee:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8019cf0:	69fb      	ldr	r3, [r7, #28]
 8019cf2:	895b      	ldrh	r3, [r3, #10]
 8019cf4:	4619      	mov	r1, r3
 8019cf6:	6978      	ldr	r0, [r7, #20]
 8019cf8:	f7f6 fb1e 	bl	8010338 <inet_chksum>
 8019cfc:	4603      	mov	r3, r0
 8019cfe:	461a      	mov	r2, r3
 8019d00:	697b      	ldr	r3, [r7, #20]
 8019d02:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019d04:	f107 020c 	add.w	r2, r7, #12
 8019d08:	693b      	ldr	r3, [r7, #16]
 8019d0a:	9302      	str	r3, [sp, #8]
 8019d0c:	2301      	movs	r3, #1
 8019d0e:	9301      	str	r3, [sp, #4]
 8019d10:	2300      	movs	r3, #0
 8019d12:	9300      	str	r3, [sp, #0]
 8019d14:	23ff      	movs	r3, #255	; 0xff
 8019d16:	2100      	movs	r1, #0
 8019d18:	69f8      	ldr	r0, [r7, #28]
 8019d1a:	f000 f9cd 	bl	801a0b8 <ip4_output_if>
  }
  pbuf_free(q);
 8019d1e:	69f8      	ldr	r0, [r7, #28]
 8019d20:	f7f7 ff3c 	bl	8011b9c <pbuf_free>
 8019d24:	e000      	b.n	8019d28 <icmp_send_response+0xd4>
    return;
 8019d26:	bf00      	nop
}
 8019d28:	3720      	adds	r7, #32
 8019d2a:	46bd      	mov	sp, r7
 8019d2c:	bd80      	pop	{r7, pc}
 8019d2e:	bf00      	nop
 8019d30:	0801fc6c 	.word	0x0801fc6c
 8019d34:	0801fd38 	.word	0x0801fd38
 8019d38:	0801fcdc 	.word	0x0801fcdc

08019d3c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019d3c:	b480      	push	{r7}
 8019d3e:	b085      	sub	sp, #20
 8019d40:	af00      	add	r7, sp, #0
 8019d42:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019d44:	4b33      	ldr	r3, [pc, #204]	; (8019e14 <ip4_route+0xd8>)
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	60fb      	str	r3, [r7, #12]
 8019d4a:	e036      	b.n	8019dba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019d52:	f003 0301 	and.w	r3, r3, #1
 8019d56:	b2db      	uxtb	r3, r3
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d02b      	beq.n	8019db4 <ip4_route+0x78>
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019d62:	089b      	lsrs	r3, r3, #2
 8019d64:	f003 0301 	and.w	r3, r3, #1
 8019d68:	b2db      	uxtb	r3, r3
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d022      	beq.n	8019db4 <ip4_route+0x78>
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	3304      	adds	r3, #4
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d01d      	beq.n	8019db4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	681a      	ldr	r2, [r3, #0]
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	3304      	adds	r3, #4
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	405a      	eors	r2, r3
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	3308      	adds	r3, #8
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	4013      	ands	r3, r2
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d101      	bne.n	8019d94 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019d90:	68fb      	ldr	r3, [r7, #12]
 8019d92:	e038      	b.n	8019e06 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019d9a:	f003 0302 	and.w	r3, r3, #2
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d108      	bne.n	8019db4 <ip4_route+0x78>
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	681a      	ldr	r2, [r3, #0]
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	330c      	adds	r3, #12
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	429a      	cmp	r2, r3
 8019dae:	d101      	bne.n	8019db4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	e028      	b.n	8019e06 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019db4:	68fb      	ldr	r3, [r7, #12]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	60fb      	str	r3, [r7, #12]
 8019dba:	68fb      	ldr	r3, [r7, #12]
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d1c5      	bne.n	8019d4c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019dc0:	4b15      	ldr	r3, [pc, #84]	; (8019e18 <ip4_route+0xdc>)
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d01a      	beq.n	8019dfe <ip4_route+0xc2>
 8019dc8:	4b13      	ldr	r3, [pc, #76]	; (8019e18 <ip4_route+0xdc>)
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019dd0:	f003 0301 	and.w	r3, r3, #1
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d012      	beq.n	8019dfe <ip4_route+0xc2>
 8019dd8:	4b0f      	ldr	r3, [pc, #60]	; (8019e18 <ip4_route+0xdc>)
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019de0:	f003 0304 	and.w	r3, r3, #4
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d00a      	beq.n	8019dfe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019de8:	4b0b      	ldr	r3, [pc, #44]	; (8019e18 <ip4_route+0xdc>)
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	3304      	adds	r3, #4
 8019dee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d004      	beq.n	8019dfe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	b2db      	uxtb	r3, r3
 8019dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8019dfc:	d101      	bne.n	8019e02 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019dfe:	2300      	movs	r3, #0
 8019e00:	e001      	b.n	8019e06 <ip4_route+0xca>
  }

  return netif_default;
 8019e02:	4b05      	ldr	r3, [pc, #20]	; (8019e18 <ip4_route+0xdc>)
 8019e04:	681b      	ldr	r3, [r3, #0]
}
 8019e06:	4618      	mov	r0, r3
 8019e08:	3714      	adds	r7, #20
 8019e0a:	46bd      	mov	sp, r7
 8019e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e10:	4770      	bx	lr
 8019e12:	bf00      	nop
 8019e14:	2405e87c 	.word	0x2405e87c
 8019e18:	2405e880 	.word	0x2405e880

08019e1c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019e1c:	b580      	push	{r7, lr}
 8019e1e:	b082      	sub	sp, #8
 8019e20:	af00      	add	r7, sp, #0
 8019e22:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019e2a:	f003 0301 	and.w	r3, r3, #1
 8019e2e:	b2db      	uxtb	r3, r3
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d016      	beq.n	8019e62 <ip4_input_accept+0x46>
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	3304      	adds	r3, #4
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d011      	beq.n	8019e62 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019e3e:	4b0b      	ldr	r3, [pc, #44]	; (8019e6c <ip4_input_accept+0x50>)
 8019e40:	695a      	ldr	r2, [r3, #20]
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	3304      	adds	r3, #4
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	429a      	cmp	r2, r3
 8019e4a:	d008      	beq.n	8019e5e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019e4c:	4b07      	ldr	r3, [pc, #28]	; (8019e6c <ip4_input_accept+0x50>)
 8019e4e:	695b      	ldr	r3, [r3, #20]
 8019e50:	6879      	ldr	r1, [r7, #4]
 8019e52:	4618      	mov	r0, r3
 8019e54:	f000 fa08 	bl	801a268 <ip4_addr_isbroadcast_u32>
 8019e58:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d001      	beq.n	8019e62 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019e5e:	2301      	movs	r3, #1
 8019e60:	e000      	b.n	8019e64 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019e62:	2300      	movs	r3, #0
}
 8019e64:	4618      	mov	r0, r3
 8019e66:	3708      	adds	r7, #8
 8019e68:	46bd      	mov	sp, r7
 8019e6a:	bd80      	pop	{r7, pc}
 8019e6c:	24015e18 	.word	0x24015e18

08019e70 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019e70:	b580      	push	{r7, lr}
 8019e72:	b086      	sub	sp, #24
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	6078      	str	r0, [r7, #4]
 8019e78:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	685b      	ldr	r3, [r3, #4]
 8019e7e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019e80:	697b      	ldr	r3, [r7, #20]
 8019e82:	781b      	ldrb	r3, [r3, #0]
 8019e84:	091b      	lsrs	r3, r3, #4
 8019e86:	b2db      	uxtb	r3, r3
 8019e88:	2b04      	cmp	r3, #4
 8019e8a:	d004      	beq.n	8019e96 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019e8c:	6878      	ldr	r0, [r7, #4]
 8019e8e:	f7f7 fe85 	bl	8011b9c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019e92:	2300      	movs	r3, #0
 8019e94:	e107      	b.n	801a0a6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019e96:	697b      	ldr	r3, [r7, #20]
 8019e98:	781b      	ldrb	r3, [r3, #0]
 8019e9a:	f003 030f 	and.w	r3, r3, #15
 8019e9e:	b2db      	uxtb	r3, r3
 8019ea0:	009b      	lsls	r3, r3, #2
 8019ea2:	b2db      	uxtb	r3, r3
 8019ea4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019ea6:	697b      	ldr	r3, [r7, #20]
 8019ea8:	885b      	ldrh	r3, [r3, #2]
 8019eaa:	b29b      	uxth	r3, r3
 8019eac:	4618      	mov	r0, r3
 8019eae:	f7f6 f8fb 	bl	80100a8 <lwip_htons>
 8019eb2:	4603      	mov	r3, r0
 8019eb4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	891b      	ldrh	r3, [r3, #8]
 8019eba:	89ba      	ldrh	r2, [r7, #12]
 8019ebc:	429a      	cmp	r2, r3
 8019ebe:	d204      	bcs.n	8019eca <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019ec0:	89bb      	ldrh	r3, [r7, #12]
 8019ec2:	4619      	mov	r1, r3
 8019ec4:	6878      	ldr	r0, [r7, #4]
 8019ec6:	f7f7 fce3 	bl	8011890 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	895b      	ldrh	r3, [r3, #10]
 8019ece:	89fa      	ldrh	r2, [r7, #14]
 8019ed0:	429a      	cmp	r2, r3
 8019ed2:	d807      	bhi.n	8019ee4 <ip4_input+0x74>
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	891b      	ldrh	r3, [r3, #8]
 8019ed8:	89ba      	ldrh	r2, [r7, #12]
 8019eda:	429a      	cmp	r2, r3
 8019edc:	d802      	bhi.n	8019ee4 <ip4_input+0x74>
 8019ede:	89fb      	ldrh	r3, [r7, #14]
 8019ee0:	2b13      	cmp	r3, #19
 8019ee2:	d804      	bhi.n	8019eee <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019ee4:	6878      	ldr	r0, [r7, #4]
 8019ee6:	f7f7 fe59 	bl	8011b9c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019eea:	2300      	movs	r3, #0
 8019eec:	e0db      	b.n	801a0a6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019eee:	697b      	ldr	r3, [r7, #20]
 8019ef0:	691b      	ldr	r3, [r3, #16]
 8019ef2:	4a6f      	ldr	r2, [pc, #444]	; (801a0b0 <ip4_input+0x240>)
 8019ef4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019ef6:	697b      	ldr	r3, [r7, #20]
 8019ef8:	68db      	ldr	r3, [r3, #12]
 8019efa:	4a6d      	ldr	r2, [pc, #436]	; (801a0b0 <ip4_input+0x240>)
 8019efc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019efe:	4b6c      	ldr	r3, [pc, #432]	; (801a0b0 <ip4_input+0x240>)
 8019f00:	695b      	ldr	r3, [r3, #20]
 8019f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019f06:	2be0      	cmp	r3, #224	; 0xe0
 8019f08:	d112      	bne.n	8019f30 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019f0a:	683b      	ldr	r3, [r7, #0]
 8019f0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019f10:	f003 0301 	and.w	r3, r3, #1
 8019f14:	b2db      	uxtb	r3, r3
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d007      	beq.n	8019f2a <ip4_input+0xba>
 8019f1a:	683b      	ldr	r3, [r7, #0]
 8019f1c:	3304      	adds	r3, #4
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d002      	beq.n	8019f2a <ip4_input+0xba>
      netif = inp;
 8019f24:	683b      	ldr	r3, [r7, #0]
 8019f26:	613b      	str	r3, [r7, #16]
 8019f28:	e02a      	b.n	8019f80 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019f2a:	2300      	movs	r3, #0
 8019f2c:	613b      	str	r3, [r7, #16]
 8019f2e:	e027      	b.n	8019f80 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019f30:	6838      	ldr	r0, [r7, #0]
 8019f32:	f7ff ff73 	bl	8019e1c <ip4_input_accept>
 8019f36:	4603      	mov	r3, r0
 8019f38:	2b00      	cmp	r3, #0
 8019f3a:	d002      	beq.n	8019f42 <ip4_input+0xd2>
      netif = inp;
 8019f3c:	683b      	ldr	r3, [r7, #0]
 8019f3e:	613b      	str	r3, [r7, #16]
 8019f40:	e01e      	b.n	8019f80 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019f42:	2300      	movs	r3, #0
 8019f44:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019f46:	4b5a      	ldr	r3, [pc, #360]	; (801a0b0 <ip4_input+0x240>)
 8019f48:	695b      	ldr	r3, [r3, #20]
 8019f4a:	b2db      	uxtb	r3, r3
 8019f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8019f4e:	d017      	beq.n	8019f80 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019f50:	4b58      	ldr	r3, [pc, #352]	; (801a0b4 <ip4_input+0x244>)
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	613b      	str	r3, [r7, #16]
 8019f56:	e00e      	b.n	8019f76 <ip4_input+0x106>
          if (netif == inp) {
 8019f58:	693a      	ldr	r2, [r7, #16]
 8019f5a:	683b      	ldr	r3, [r7, #0]
 8019f5c:	429a      	cmp	r2, r3
 8019f5e:	d006      	beq.n	8019f6e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019f60:	6938      	ldr	r0, [r7, #16]
 8019f62:	f7ff ff5b 	bl	8019e1c <ip4_input_accept>
 8019f66:	4603      	mov	r3, r0
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d108      	bne.n	8019f7e <ip4_input+0x10e>
 8019f6c:	e000      	b.n	8019f70 <ip4_input+0x100>
            continue;
 8019f6e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019f70:	693b      	ldr	r3, [r7, #16]
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	613b      	str	r3, [r7, #16]
 8019f76:	693b      	ldr	r3, [r7, #16]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d1ed      	bne.n	8019f58 <ip4_input+0xe8>
 8019f7c:	e000      	b.n	8019f80 <ip4_input+0x110>
            break;
 8019f7e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019f80:	4b4b      	ldr	r3, [pc, #300]	; (801a0b0 <ip4_input+0x240>)
 8019f82:	691b      	ldr	r3, [r3, #16]
 8019f84:	6839      	ldr	r1, [r7, #0]
 8019f86:	4618      	mov	r0, r3
 8019f88:	f000 f96e 	bl	801a268 <ip4_addr_isbroadcast_u32>
 8019f8c:	4603      	mov	r3, r0
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d105      	bne.n	8019f9e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019f92:	4b47      	ldr	r3, [pc, #284]	; (801a0b0 <ip4_input+0x240>)
 8019f94:	691b      	ldr	r3, [r3, #16]
 8019f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019f9a:	2be0      	cmp	r3, #224	; 0xe0
 8019f9c:	d104      	bne.n	8019fa8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019f9e:	6878      	ldr	r0, [r7, #4]
 8019fa0:	f7f7 fdfc 	bl	8011b9c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019fa4:	2300      	movs	r3, #0
 8019fa6:	e07e      	b.n	801a0a6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019fa8:	693b      	ldr	r3, [r7, #16]
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d104      	bne.n	8019fb8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019fae:	6878      	ldr	r0, [r7, #4]
 8019fb0:	f7f7 fdf4 	bl	8011b9c <pbuf_free>
    return ERR_OK;
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	e076      	b.n	801a0a6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019fb8:	697b      	ldr	r3, [r7, #20]
 8019fba:	88db      	ldrh	r3, [r3, #6]
 8019fbc:	b29b      	uxth	r3, r3
 8019fbe:	461a      	mov	r2, r3
 8019fc0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019fc4:	4013      	ands	r3, r2
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d00b      	beq.n	8019fe2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019fca:	6878      	ldr	r0, [r7, #4]
 8019fcc:	f000 fc92 	bl	801a8f4 <ip4_reass>
 8019fd0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d101      	bne.n	8019fdc <ip4_input+0x16c>
      return ERR_OK;
 8019fd8:	2300      	movs	r3, #0
 8019fda:	e064      	b.n	801a0a6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	685b      	ldr	r3, [r3, #4]
 8019fe0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019fe2:	4a33      	ldr	r2, [pc, #204]	; (801a0b0 <ip4_input+0x240>)
 8019fe4:	693b      	ldr	r3, [r7, #16]
 8019fe6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019fe8:	4a31      	ldr	r2, [pc, #196]	; (801a0b0 <ip4_input+0x240>)
 8019fea:	683b      	ldr	r3, [r7, #0]
 8019fec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019fee:	4a30      	ldr	r2, [pc, #192]	; (801a0b0 <ip4_input+0x240>)
 8019ff0:	697b      	ldr	r3, [r7, #20]
 8019ff2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019ff4:	697b      	ldr	r3, [r7, #20]
 8019ff6:	781b      	ldrb	r3, [r3, #0]
 8019ff8:	f003 030f 	and.w	r3, r3, #15
 8019ffc:	b2db      	uxtb	r3, r3
 8019ffe:	009b      	lsls	r3, r3, #2
 801a000:	b2db      	uxtb	r3, r3
 801a002:	b29a      	uxth	r2, r3
 801a004:	4b2a      	ldr	r3, [pc, #168]	; (801a0b0 <ip4_input+0x240>)
 801a006:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801a008:	89fb      	ldrh	r3, [r7, #14]
 801a00a:	4619      	mov	r1, r3
 801a00c:	6878      	ldr	r0, [r7, #4]
 801a00e:	f7f7 fd3f 	bl	8011a90 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801a012:	697b      	ldr	r3, [r7, #20]
 801a014:	7a5b      	ldrb	r3, [r3, #9]
 801a016:	2b11      	cmp	r3, #17
 801a018:	d006      	beq.n	801a028 <ip4_input+0x1b8>
 801a01a:	2b11      	cmp	r3, #17
 801a01c:	dc13      	bgt.n	801a046 <ip4_input+0x1d6>
 801a01e:	2b01      	cmp	r3, #1
 801a020:	d00c      	beq.n	801a03c <ip4_input+0x1cc>
 801a022:	2b06      	cmp	r3, #6
 801a024:	d005      	beq.n	801a032 <ip4_input+0x1c2>
 801a026:	e00e      	b.n	801a046 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801a028:	6839      	ldr	r1, [r7, #0]
 801a02a:	6878      	ldr	r0, [r7, #4]
 801a02c:	f7fe fb34 	bl	8018698 <udp_input>
        break;
 801a030:	e026      	b.n	801a080 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801a032:	6839      	ldr	r1, [r7, #0]
 801a034:	6878      	ldr	r0, [r7, #4]
 801a036:	f7f9 feb7 	bl	8013da8 <tcp_input>
        break;
 801a03a:	e021      	b.n	801a080 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801a03c:	6839      	ldr	r1, [r7, #0]
 801a03e:	6878      	ldr	r0, [r7, #4]
 801a040:	f7ff fcc8 	bl	80199d4 <icmp_input>
        break;
 801a044:	e01c      	b.n	801a080 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a046:	4b1a      	ldr	r3, [pc, #104]	; (801a0b0 <ip4_input+0x240>)
 801a048:	695b      	ldr	r3, [r3, #20]
 801a04a:	6939      	ldr	r1, [r7, #16]
 801a04c:	4618      	mov	r0, r3
 801a04e:	f000 f90b 	bl	801a268 <ip4_addr_isbroadcast_u32>
 801a052:	4603      	mov	r3, r0
 801a054:	2b00      	cmp	r3, #0
 801a056:	d10f      	bne.n	801a078 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a058:	4b15      	ldr	r3, [pc, #84]	; (801a0b0 <ip4_input+0x240>)
 801a05a:	695b      	ldr	r3, [r3, #20]
 801a05c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a060:	2be0      	cmp	r3, #224	; 0xe0
 801a062:	d009      	beq.n	801a078 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801a064:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a068:	4619      	mov	r1, r3
 801a06a:	6878      	ldr	r0, [r7, #4]
 801a06c:	f7f7 fd83 	bl	8011b76 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a070:	2102      	movs	r1, #2
 801a072:	6878      	ldr	r0, [r7, #4]
 801a074:	f7ff fdce 	bl	8019c14 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801a078:	6878      	ldr	r0, [r7, #4]
 801a07a:	f7f7 fd8f 	bl	8011b9c <pbuf_free>
        break;
 801a07e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a080:	4b0b      	ldr	r3, [pc, #44]	; (801a0b0 <ip4_input+0x240>)
 801a082:	2200      	movs	r2, #0
 801a084:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a086:	4b0a      	ldr	r3, [pc, #40]	; (801a0b0 <ip4_input+0x240>)
 801a088:	2200      	movs	r2, #0
 801a08a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a08c:	4b08      	ldr	r3, [pc, #32]	; (801a0b0 <ip4_input+0x240>)
 801a08e:	2200      	movs	r2, #0
 801a090:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a092:	4b07      	ldr	r3, [pc, #28]	; (801a0b0 <ip4_input+0x240>)
 801a094:	2200      	movs	r2, #0
 801a096:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a098:	4b05      	ldr	r3, [pc, #20]	; (801a0b0 <ip4_input+0x240>)
 801a09a:	2200      	movs	r2, #0
 801a09c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a09e:	4b04      	ldr	r3, [pc, #16]	; (801a0b0 <ip4_input+0x240>)
 801a0a0:	2200      	movs	r2, #0
 801a0a2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a0a4:	2300      	movs	r3, #0
}
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	3718      	adds	r7, #24
 801a0aa:	46bd      	mov	sp, r7
 801a0ac:	bd80      	pop	{r7, pc}
 801a0ae:	bf00      	nop
 801a0b0:	24015e18 	.word	0x24015e18
 801a0b4:	2405e87c 	.word	0x2405e87c

0801a0b8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a0b8:	b580      	push	{r7, lr}
 801a0ba:	b08a      	sub	sp, #40	; 0x28
 801a0bc:	af04      	add	r7, sp, #16
 801a0be:	60f8      	str	r0, [r7, #12]
 801a0c0:	60b9      	str	r1, [r7, #8]
 801a0c2:	607a      	str	r2, [r7, #4]
 801a0c4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a0c6:	68bb      	ldr	r3, [r7, #8]
 801a0c8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d009      	beq.n	801a0e4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a0d0:	68bb      	ldr	r3, [r7, #8]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d003      	beq.n	801a0de <ip4_output_if+0x26>
 801a0d6:	68bb      	ldr	r3, [r7, #8]
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d102      	bne.n	801a0e4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0e0:	3304      	adds	r3, #4
 801a0e2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a0e4:	78fa      	ldrb	r2, [r7, #3]
 801a0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0e8:	9302      	str	r3, [sp, #8]
 801a0ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a0ee:	9301      	str	r3, [sp, #4]
 801a0f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a0f4:	9300      	str	r3, [sp, #0]
 801a0f6:	4613      	mov	r3, r2
 801a0f8:	687a      	ldr	r2, [r7, #4]
 801a0fa:	6979      	ldr	r1, [r7, #20]
 801a0fc:	68f8      	ldr	r0, [r7, #12]
 801a0fe:	f000 f805 	bl	801a10c <ip4_output_if_src>
 801a102:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a104:	4618      	mov	r0, r3
 801a106:	3718      	adds	r7, #24
 801a108:	46bd      	mov	sp, r7
 801a10a:	bd80      	pop	{r7, pc}

0801a10c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a10c:	b580      	push	{r7, lr}
 801a10e:	b088      	sub	sp, #32
 801a110:	af00      	add	r7, sp, #0
 801a112:	60f8      	str	r0, [r7, #12]
 801a114:	60b9      	str	r1, [r7, #8]
 801a116:	607a      	str	r2, [r7, #4]
 801a118:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a11a:	68fb      	ldr	r3, [r7, #12]
 801a11c:	7b9b      	ldrb	r3, [r3, #14]
 801a11e:	2b01      	cmp	r3, #1
 801a120:	d006      	beq.n	801a130 <ip4_output_if_src+0x24>
 801a122:	4b4b      	ldr	r3, [pc, #300]	; (801a250 <ip4_output_if_src+0x144>)
 801a124:	f44f 7255 	mov.w	r2, #852	; 0x354
 801a128:	494a      	ldr	r1, [pc, #296]	; (801a254 <ip4_output_if_src+0x148>)
 801a12a:	484b      	ldr	r0, [pc, #300]	; (801a258 <ip4_output_if_src+0x14c>)
 801a12c:	f001 fb9a 	bl	801b864 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	2b00      	cmp	r3, #0
 801a134:	d060      	beq.n	801a1f8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801a136:	2314      	movs	r3, #20
 801a138:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a13a:	2114      	movs	r1, #20
 801a13c:	68f8      	ldr	r0, [r7, #12]
 801a13e:	f7f7 fc97 	bl	8011a70 <pbuf_add_header>
 801a142:	4603      	mov	r3, r0
 801a144:	2b00      	cmp	r3, #0
 801a146:	d002      	beq.n	801a14e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a148:	f06f 0301 	mvn.w	r3, #1
 801a14c:	e07c      	b.n	801a248 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	685b      	ldr	r3, [r3, #4]
 801a152:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a154:	68fb      	ldr	r3, [r7, #12]
 801a156:	895b      	ldrh	r3, [r3, #10]
 801a158:	2b13      	cmp	r3, #19
 801a15a:	d806      	bhi.n	801a16a <ip4_output_if_src+0x5e>
 801a15c:	4b3c      	ldr	r3, [pc, #240]	; (801a250 <ip4_output_if_src+0x144>)
 801a15e:	f44f 7262 	mov.w	r2, #904	; 0x388
 801a162:	493e      	ldr	r1, [pc, #248]	; (801a25c <ip4_output_if_src+0x150>)
 801a164:	483c      	ldr	r0, [pc, #240]	; (801a258 <ip4_output_if_src+0x14c>)
 801a166:	f001 fb7d 	bl	801b864 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a16a:	69fb      	ldr	r3, [r7, #28]
 801a16c:	78fa      	ldrb	r2, [r7, #3]
 801a16e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a170:	69fb      	ldr	r3, [r7, #28]
 801a172:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a176:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	681a      	ldr	r2, [r3, #0]
 801a17c:	69fb      	ldr	r3, [r7, #28]
 801a17e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a180:	8b7b      	ldrh	r3, [r7, #26]
 801a182:	089b      	lsrs	r3, r3, #2
 801a184:	b29b      	uxth	r3, r3
 801a186:	b2db      	uxtb	r3, r3
 801a188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a18c:	b2da      	uxtb	r2, r3
 801a18e:	69fb      	ldr	r3, [r7, #28]
 801a190:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a192:	69fb      	ldr	r3, [r7, #28]
 801a194:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a198:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	891b      	ldrh	r3, [r3, #8]
 801a19e:	4618      	mov	r0, r3
 801a1a0:	f7f5 ff82 	bl	80100a8 <lwip_htons>
 801a1a4:	4603      	mov	r3, r0
 801a1a6:	461a      	mov	r2, r3
 801a1a8:	69fb      	ldr	r3, [r7, #28]
 801a1aa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a1ac:	69fb      	ldr	r3, [r7, #28]
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	719a      	strb	r2, [r3, #6]
 801a1b2:	2200      	movs	r2, #0
 801a1b4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a1b6:	4b2a      	ldr	r3, [pc, #168]	; (801a260 <ip4_output_if_src+0x154>)
 801a1b8:	881b      	ldrh	r3, [r3, #0]
 801a1ba:	4618      	mov	r0, r3
 801a1bc:	f7f5 ff74 	bl	80100a8 <lwip_htons>
 801a1c0:	4603      	mov	r3, r0
 801a1c2:	461a      	mov	r2, r3
 801a1c4:	69fb      	ldr	r3, [r7, #28]
 801a1c6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a1c8:	4b25      	ldr	r3, [pc, #148]	; (801a260 <ip4_output_if_src+0x154>)
 801a1ca:	881b      	ldrh	r3, [r3, #0]
 801a1cc:	3301      	adds	r3, #1
 801a1ce:	b29a      	uxth	r2, r3
 801a1d0:	4b23      	ldr	r3, [pc, #140]	; (801a260 <ip4_output_if_src+0x154>)
 801a1d2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a1d4:	68bb      	ldr	r3, [r7, #8]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d104      	bne.n	801a1e4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a1da:	4b22      	ldr	r3, [pc, #136]	; (801a264 <ip4_output_if_src+0x158>)
 801a1dc:	681a      	ldr	r2, [r3, #0]
 801a1de:	69fb      	ldr	r3, [r7, #28]
 801a1e0:	60da      	str	r2, [r3, #12]
 801a1e2:	e003      	b.n	801a1ec <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a1e4:	68bb      	ldr	r3, [r7, #8]
 801a1e6:	681a      	ldr	r2, [r3, #0]
 801a1e8:	69fb      	ldr	r3, [r7, #28]
 801a1ea:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a1ec:	69fb      	ldr	r3, [r7, #28]
 801a1ee:	2200      	movs	r2, #0
 801a1f0:	729a      	strb	r2, [r3, #10]
 801a1f2:	2200      	movs	r2, #0
 801a1f4:	72da      	strb	r2, [r3, #11]
 801a1f6:	e00f      	b.n	801a218 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	895b      	ldrh	r3, [r3, #10]
 801a1fc:	2b13      	cmp	r3, #19
 801a1fe:	d802      	bhi.n	801a206 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a200:	f06f 0301 	mvn.w	r3, #1
 801a204:	e020      	b.n	801a248 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a206:	68fb      	ldr	r3, [r7, #12]
 801a208:	685b      	ldr	r3, [r3, #4]
 801a20a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a20c:	69fb      	ldr	r3, [r7, #28]
 801a20e:	691b      	ldr	r3, [r3, #16]
 801a210:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801a212:	f107 0314 	add.w	r3, r7, #20
 801a216:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a21a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	d00c      	beq.n	801a23a <ip4_output_if_src+0x12e>
 801a220:	68fb      	ldr	r3, [r7, #12]
 801a222:	891a      	ldrh	r2, [r3, #8]
 801a224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a226:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a228:	429a      	cmp	r2, r3
 801a22a:	d906      	bls.n	801a23a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801a22c:	687a      	ldr	r2, [r7, #4]
 801a22e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a230:	68f8      	ldr	r0, [r7, #12]
 801a232:	f000 fd53 	bl	801acdc <ip4_frag>
 801a236:	4603      	mov	r3, r0
 801a238:	e006      	b.n	801a248 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a23c:	695b      	ldr	r3, [r3, #20]
 801a23e:	687a      	ldr	r2, [r7, #4]
 801a240:	68f9      	ldr	r1, [r7, #12]
 801a242:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a244:	4798      	blx	r3
 801a246:	4603      	mov	r3, r0
}
 801a248:	4618      	mov	r0, r3
 801a24a:	3720      	adds	r7, #32
 801a24c:	46bd      	mov	sp, r7
 801a24e:	bd80      	pop	{r7, pc}
 801a250:	0801fd64 	.word	0x0801fd64
 801a254:	0801fd98 	.word	0x0801fd98
 801a258:	0801fda4 	.word	0x0801fda4
 801a25c:	0801fdcc 	.word	0x0801fdcc
 801a260:	2405e9da 	.word	0x2405e9da
 801a264:	0802027c 	.word	0x0802027c

0801a268 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a268:	b480      	push	{r7}
 801a26a:	b085      	sub	sp, #20
 801a26c:	af00      	add	r7, sp, #0
 801a26e:	6078      	str	r0, [r7, #4]
 801a270:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a27c:	d002      	beq.n	801a284 <ip4_addr_isbroadcast_u32+0x1c>
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	2b00      	cmp	r3, #0
 801a282:	d101      	bne.n	801a288 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a284:	2301      	movs	r3, #1
 801a286:	e02a      	b.n	801a2de <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a288:	683b      	ldr	r3, [r7, #0]
 801a28a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a28e:	f003 0302 	and.w	r3, r3, #2
 801a292:	2b00      	cmp	r3, #0
 801a294:	d101      	bne.n	801a29a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a296:	2300      	movs	r3, #0
 801a298:	e021      	b.n	801a2de <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a29a:	683b      	ldr	r3, [r7, #0]
 801a29c:	3304      	adds	r3, #4
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	687a      	ldr	r2, [r7, #4]
 801a2a2:	429a      	cmp	r2, r3
 801a2a4:	d101      	bne.n	801a2aa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	e019      	b.n	801a2de <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a2aa:	68fa      	ldr	r2, [r7, #12]
 801a2ac:	683b      	ldr	r3, [r7, #0]
 801a2ae:	3304      	adds	r3, #4
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	405a      	eors	r2, r3
 801a2b4:	683b      	ldr	r3, [r7, #0]
 801a2b6:	3308      	adds	r3, #8
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	4013      	ands	r3, r2
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d10d      	bne.n	801a2dc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a2c0:	683b      	ldr	r3, [r7, #0]
 801a2c2:	3308      	adds	r3, #8
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	43da      	mvns	r2, r3
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a2cc:	683b      	ldr	r3, [r7, #0]
 801a2ce:	3308      	adds	r3, #8
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a2d4:	429a      	cmp	r2, r3
 801a2d6:	d101      	bne.n	801a2dc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a2d8:	2301      	movs	r3, #1
 801a2da:	e000      	b.n	801a2de <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a2dc:	2300      	movs	r3, #0
  }
}
 801a2de:	4618      	mov	r0, r3
 801a2e0:	3714      	adds	r7, #20
 801a2e2:	46bd      	mov	sp, r7
 801a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2e8:	4770      	bx	lr
	...

0801a2ec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a2ec:	b580      	push	{r7, lr}
 801a2ee:	b084      	sub	sp, #16
 801a2f0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a2f2:	2300      	movs	r3, #0
 801a2f4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a2f6:	4b12      	ldr	r3, [pc, #72]	; (801a340 <ip_reass_tmr+0x54>)
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a2fc:	e018      	b.n	801a330 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	7fdb      	ldrb	r3, [r3, #31]
 801a302:	2b00      	cmp	r3, #0
 801a304:	d00b      	beq.n	801a31e <ip_reass_tmr+0x32>
      r->timer--;
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	7fdb      	ldrb	r3, [r3, #31]
 801a30a:	3b01      	subs	r3, #1
 801a30c:	b2da      	uxtb	r2, r3
 801a30e:	68fb      	ldr	r3, [r7, #12]
 801a310:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a312:	68fb      	ldr	r3, [r7, #12]
 801a314:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a316:	68fb      	ldr	r3, [r7, #12]
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	60fb      	str	r3, [r7, #12]
 801a31c:	e008      	b.n	801a330 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a322:	68fb      	ldr	r3, [r7, #12]
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a328:	68b9      	ldr	r1, [r7, #8]
 801a32a:	6878      	ldr	r0, [r7, #4]
 801a32c:	f000 f80a 	bl	801a344 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	2b00      	cmp	r3, #0
 801a334:	d1e3      	bne.n	801a2fe <ip_reass_tmr+0x12>
    }
  }
}
 801a336:	bf00      	nop
 801a338:	bf00      	nop
 801a33a:	3710      	adds	r7, #16
 801a33c:	46bd      	mov	sp, r7
 801a33e:	bd80      	pop	{r7, pc}
 801a340:	2405e9dc 	.word	0x2405e9dc

0801a344 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a344:	b580      	push	{r7, lr}
 801a346:	b088      	sub	sp, #32
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]
 801a34c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a34e:	2300      	movs	r3, #0
 801a350:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a352:	683a      	ldr	r2, [r7, #0]
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	429a      	cmp	r2, r3
 801a358:	d105      	bne.n	801a366 <ip_reass_free_complete_datagram+0x22>
 801a35a:	4b45      	ldr	r3, [pc, #276]	; (801a470 <ip_reass_free_complete_datagram+0x12c>)
 801a35c:	22ab      	movs	r2, #171	; 0xab
 801a35e:	4945      	ldr	r1, [pc, #276]	; (801a474 <ip_reass_free_complete_datagram+0x130>)
 801a360:	4845      	ldr	r0, [pc, #276]	; (801a478 <ip_reass_free_complete_datagram+0x134>)
 801a362:	f001 fa7f 	bl	801b864 <iprintf>
  if (prev != NULL) {
 801a366:	683b      	ldr	r3, [r7, #0]
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d00a      	beq.n	801a382 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a36c:	683b      	ldr	r3, [r7, #0]
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	687a      	ldr	r2, [r7, #4]
 801a372:	429a      	cmp	r2, r3
 801a374:	d005      	beq.n	801a382 <ip_reass_free_complete_datagram+0x3e>
 801a376:	4b3e      	ldr	r3, [pc, #248]	; (801a470 <ip_reass_free_complete_datagram+0x12c>)
 801a378:	22ad      	movs	r2, #173	; 0xad
 801a37a:	4940      	ldr	r1, [pc, #256]	; (801a47c <ip_reass_free_complete_datagram+0x138>)
 801a37c:	483e      	ldr	r0, [pc, #248]	; (801a478 <ip_reass_free_complete_datagram+0x134>)
 801a37e:	f001 fa71 	bl	801b864 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	685b      	ldr	r3, [r3, #4]
 801a386:	685b      	ldr	r3, [r3, #4]
 801a388:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a38a:	697b      	ldr	r3, [r7, #20]
 801a38c:	889b      	ldrh	r3, [r3, #4]
 801a38e:	b29b      	uxth	r3, r3
 801a390:	2b00      	cmp	r3, #0
 801a392:	d12a      	bne.n	801a3ea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	685b      	ldr	r3, [r3, #4]
 801a398:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a39a:	697b      	ldr	r3, [r7, #20]
 801a39c:	681a      	ldr	r2, [r3, #0]
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a3a2:	69bb      	ldr	r3, [r7, #24]
 801a3a4:	6858      	ldr	r0, [r3, #4]
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	3308      	adds	r3, #8
 801a3aa:	2214      	movs	r2, #20
 801a3ac:	4619      	mov	r1, r3
 801a3ae:	f001 f994 	bl	801b6da <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a3b2:	2101      	movs	r1, #1
 801a3b4:	69b8      	ldr	r0, [r7, #24]
 801a3b6:	f7ff fc3d 	bl	8019c34 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a3ba:	69b8      	ldr	r0, [r7, #24]
 801a3bc:	f7f7 fc7c 	bl	8011cb8 <pbuf_clen>
 801a3c0:	4603      	mov	r3, r0
 801a3c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a3c4:	8bfa      	ldrh	r2, [r7, #30]
 801a3c6:	8a7b      	ldrh	r3, [r7, #18]
 801a3c8:	4413      	add	r3, r2
 801a3ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a3ce:	db05      	blt.n	801a3dc <ip_reass_free_complete_datagram+0x98>
 801a3d0:	4b27      	ldr	r3, [pc, #156]	; (801a470 <ip_reass_free_complete_datagram+0x12c>)
 801a3d2:	22bc      	movs	r2, #188	; 0xbc
 801a3d4:	492a      	ldr	r1, [pc, #168]	; (801a480 <ip_reass_free_complete_datagram+0x13c>)
 801a3d6:	4828      	ldr	r0, [pc, #160]	; (801a478 <ip_reass_free_complete_datagram+0x134>)
 801a3d8:	f001 fa44 	bl	801b864 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a3dc:	8bfa      	ldrh	r2, [r7, #30]
 801a3de:	8a7b      	ldrh	r3, [r7, #18]
 801a3e0:	4413      	add	r3, r2
 801a3e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a3e4:	69b8      	ldr	r0, [r7, #24]
 801a3e6:	f7f7 fbd9 	bl	8011b9c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	685b      	ldr	r3, [r3, #4]
 801a3ee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a3f0:	e01f      	b.n	801a432 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a3f2:	69bb      	ldr	r3, [r7, #24]
 801a3f4:	685b      	ldr	r3, [r3, #4]
 801a3f6:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a3f8:	69bb      	ldr	r3, [r7, #24]
 801a3fa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a3fc:	697b      	ldr	r3, [r7, #20]
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a402:	68f8      	ldr	r0, [r7, #12]
 801a404:	f7f7 fc58 	bl	8011cb8 <pbuf_clen>
 801a408:	4603      	mov	r3, r0
 801a40a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a40c:	8bfa      	ldrh	r2, [r7, #30]
 801a40e:	8a7b      	ldrh	r3, [r7, #18]
 801a410:	4413      	add	r3, r2
 801a412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a416:	db05      	blt.n	801a424 <ip_reass_free_complete_datagram+0xe0>
 801a418:	4b15      	ldr	r3, [pc, #84]	; (801a470 <ip_reass_free_complete_datagram+0x12c>)
 801a41a:	22cc      	movs	r2, #204	; 0xcc
 801a41c:	4918      	ldr	r1, [pc, #96]	; (801a480 <ip_reass_free_complete_datagram+0x13c>)
 801a41e:	4816      	ldr	r0, [pc, #88]	; (801a478 <ip_reass_free_complete_datagram+0x134>)
 801a420:	f001 fa20 	bl	801b864 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a424:	8bfa      	ldrh	r2, [r7, #30]
 801a426:	8a7b      	ldrh	r3, [r7, #18]
 801a428:	4413      	add	r3, r2
 801a42a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a42c:	68f8      	ldr	r0, [r7, #12]
 801a42e:	f7f7 fbb5 	bl	8011b9c <pbuf_free>
  while (p != NULL) {
 801a432:	69bb      	ldr	r3, [r7, #24]
 801a434:	2b00      	cmp	r3, #0
 801a436:	d1dc      	bne.n	801a3f2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a438:	6839      	ldr	r1, [r7, #0]
 801a43a:	6878      	ldr	r0, [r7, #4]
 801a43c:	f000 f8c2 	bl	801a5c4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a440:	4b10      	ldr	r3, [pc, #64]	; (801a484 <ip_reass_free_complete_datagram+0x140>)
 801a442:	881b      	ldrh	r3, [r3, #0]
 801a444:	8bfa      	ldrh	r2, [r7, #30]
 801a446:	429a      	cmp	r2, r3
 801a448:	d905      	bls.n	801a456 <ip_reass_free_complete_datagram+0x112>
 801a44a:	4b09      	ldr	r3, [pc, #36]	; (801a470 <ip_reass_free_complete_datagram+0x12c>)
 801a44c:	22d2      	movs	r2, #210	; 0xd2
 801a44e:	490e      	ldr	r1, [pc, #56]	; (801a488 <ip_reass_free_complete_datagram+0x144>)
 801a450:	4809      	ldr	r0, [pc, #36]	; (801a478 <ip_reass_free_complete_datagram+0x134>)
 801a452:	f001 fa07 	bl	801b864 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a456:	4b0b      	ldr	r3, [pc, #44]	; (801a484 <ip_reass_free_complete_datagram+0x140>)
 801a458:	881a      	ldrh	r2, [r3, #0]
 801a45a:	8bfb      	ldrh	r3, [r7, #30]
 801a45c:	1ad3      	subs	r3, r2, r3
 801a45e:	b29a      	uxth	r2, r3
 801a460:	4b08      	ldr	r3, [pc, #32]	; (801a484 <ip_reass_free_complete_datagram+0x140>)
 801a462:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a464:	8bfb      	ldrh	r3, [r7, #30]
}
 801a466:	4618      	mov	r0, r3
 801a468:	3720      	adds	r7, #32
 801a46a:	46bd      	mov	sp, r7
 801a46c:	bd80      	pop	{r7, pc}
 801a46e:	bf00      	nop
 801a470:	0801fdfc 	.word	0x0801fdfc
 801a474:	0801fe38 	.word	0x0801fe38
 801a478:	0801fe44 	.word	0x0801fe44
 801a47c:	0801fe6c 	.word	0x0801fe6c
 801a480:	0801fe80 	.word	0x0801fe80
 801a484:	2405e9e0 	.word	0x2405e9e0
 801a488:	0801fea0 	.word	0x0801fea0

0801a48c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a48c:	b580      	push	{r7, lr}
 801a48e:	b08a      	sub	sp, #40	; 0x28
 801a490:	af00      	add	r7, sp, #0
 801a492:	6078      	str	r0, [r7, #4]
 801a494:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a496:	2300      	movs	r3, #0
 801a498:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a49a:	2300      	movs	r3, #0
 801a49c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a49e:	2300      	movs	r3, #0
 801a4a0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a4a2:	2300      	movs	r3, #0
 801a4a4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a4a6:	2300      	movs	r3, #0
 801a4a8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a4aa:	4b28      	ldr	r3, [pc, #160]	; (801a54c <ip_reass_remove_oldest_datagram+0xc0>)
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a4b0:	e030      	b.n	801a514 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4b4:	695a      	ldr	r2, [r3, #20]
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	68db      	ldr	r3, [r3, #12]
 801a4ba:	429a      	cmp	r2, r3
 801a4bc:	d10c      	bne.n	801a4d8 <ip_reass_remove_oldest_datagram+0x4c>
 801a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4c0:	699a      	ldr	r2, [r3, #24]
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	691b      	ldr	r3, [r3, #16]
 801a4c6:	429a      	cmp	r2, r3
 801a4c8:	d106      	bne.n	801a4d8 <ip_reass_remove_oldest_datagram+0x4c>
 801a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4cc:	899a      	ldrh	r2, [r3, #12]
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	889b      	ldrh	r3, [r3, #4]
 801a4d2:	b29b      	uxth	r3, r3
 801a4d4:	429a      	cmp	r2, r3
 801a4d6:	d014      	beq.n	801a502 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a4d8:	693b      	ldr	r3, [r7, #16]
 801a4da:	3301      	adds	r3, #1
 801a4dc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a4de:	6a3b      	ldr	r3, [r7, #32]
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d104      	bne.n	801a4ee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4e6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a4e8:	69fb      	ldr	r3, [r7, #28]
 801a4ea:	61bb      	str	r3, [r7, #24]
 801a4ec:	e009      	b.n	801a502 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4f0:	7fda      	ldrb	r2, [r3, #31]
 801a4f2:	6a3b      	ldr	r3, [r7, #32]
 801a4f4:	7fdb      	ldrb	r3, [r3, #31]
 801a4f6:	429a      	cmp	r2, r3
 801a4f8:	d803      	bhi.n	801a502 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4fc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a4fe:	69fb      	ldr	r3, [r7, #28]
 801a500:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	2b00      	cmp	r3, #0
 801a508:	d001      	beq.n	801a50e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a50c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a516:	2b00      	cmp	r3, #0
 801a518:	d1cb      	bne.n	801a4b2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a51a:	6a3b      	ldr	r3, [r7, #32]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d008      	beq.n	801a532 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a520:	69b9      	ldr	r1, [r7, #24]
 801a522:	6a38      	ldr	r0, [r7, #32]
 801a524:	f7ff ff0e 	bl	801a344 <ip_reass_free_complete_datagram>
 801a528:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a52a:	697a      	ldr	r2, [r7, #20]
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	4413      	add	r3, r2
 801a530:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a532:	697a      	ldr	r2, [r7, #20]
 801a534:	683b      	ldr	r3, [r7, #0]
 801a536:	429a      	cmp	r2, r3
 801a538:	da02      	bge.n	801a540 <ip_reass_remove_oldest_datagram+0xb4>
 801a53a:	693b      	ldr	r3, [r7, #16]
 801a53c:	2b01      	cmp	r3, #1
 801a53e:	dcac      	bgt.n	801a49a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a540:	697b      	ldr	r3, [r7, #20]
}
 801a542:	4618      	mov	r0, r3
 801a544:	3728      	adds	r7, #40	; 0x28
 801a546:	46bd      	mov	sp, r7
 801a548:	bd80      	pop	{r7, pc}
 801a54a:	bf00      	nop
 801a54c:	2405e9dc 	.word	0x2405e9dc

0801a550 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a550:	b580      	push	{r7, lr}
 801a552:	b084      	sub	sp, #16
 801a554:	af00      	add	r7, sp, #0
 801a556:	6078      	str	r0, [r7, #4]
 801a558:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a55a:	2004      	movs	r0, #4
 801a55c:	f7f6 fc00 	bl	8010d60 <memp_malloc>
 801a560:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a562:	68fb      	ldr	r3, [r7, #12]
 801a564:	2b00      	cmp	r3, #0
 801a566:	d110      	bne.n	801a58a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a568:	6839      	ldr	r1, [r7, #0]
 801a56a:	6878      	ldr	r0, [r7, #4]
 801a56c:	f7ff ff8e 	bl	801a48c <ip_reass_remove_oldest_datagram>
 801a570:	4602      	mov	r2, r0
 801a572:	683b      	ldr	r3, [r7, #0]
 801a574:	4293      	cmp	r3, r2
 801a576:	dc03      	bgt.n	801a580 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a578:	2004      	movs	r0, #4
 801a57a:	f7f6 fbf1 	bl	8010d60 <memp_malloc>
 801a57e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	2b00      	cmp	r3, #0
 801a584:	d101      	bne.n	801a58a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a586:	2300      	movs	r3, #0
 801a588:	e016      	b.n	801a5b8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a58a:	2220      	movs	r2, #32
 801a58c:	2100      	movs	r1, #0
 801a58e:	68f8      	ldr	r0, [r7, #12]
 801a590:	f001 f8cb 	bl	801b72a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a594:	68fb      	ldr	r3, [r7, #12]
 801a596:	220f      	movs	r2, #15
 801a598:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a59a:	4b09      	ldr	r3, [pc, #36]	; (801a5c0 <ip_reass_enqueue_new_datagram+0x70>)
 801a59c:	681a      	ldr	r2, [r3, #0]
 801a59e:	68fb      	ldr	r3, [r7, #12]
 801a5a0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a5a2:	4a07      	ldr	r2, [pc, #28]	; (801a5c0 <ip_reass_enqueue_new_datagram+0x70>)
 801a5a4:	68fb      	ldr	r3, [r7, #12]
 801a5a6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	3308      	adds	r3, #8
 801a5ac:	2214      	movs	r2, #20
 801a5ae:	6879      	ldr	r1, [r7, #4]
 801a5b0:	4618      	mov	r0, r3
 801a5b2:	f001 f892 	bl	801b6da <memcpy>
  return ipr;
 801a5b6:	68fb      	ldr	r3, [r7, #12]
}
 801a5b8:	4618      	mov	r0, r3
 801a5ba:	3710      	adds	r7, #16
 801a5bc:	46bd      	mov	sp, r7
 801a5be:	bd80      	pop	{r7, pc}
 801a5c0:	2405e9dc 	.word	0x2405e9dc

0801a5c4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a5c4:	b580      	push	{r7, lr}
 801a5c6:	b082      	sub	sp, #8
 801a5c8:	af00      	add	r7, sp, #0
 801a5ca:	6078      	str	r0, [r7, #4]
 801a5cc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a5ce:	4b10      	ldr	r3, [pc, #64]	; (801a610 <ip_reass_dequeue_datagram+0x4c>)
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	687a      	ldr	r2, [r7, #4]
 801a5d4:	429a      	cmp	r2, r3
 801a5d6:	d104      	bne.n	801a5e2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	4a0c      	ldr	r2, [pc, #48]	; (801a610 <ip_reass_dequeue_datagram+0x4c>)
 801a5de:	6013      	str	r3, [r2, #0]
 801a5e0:	e00d      	b.n	801a5fe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a5e2:	683b      	ldr	r3, [r7, #0]
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d106      	bne.n	801a5f6 <ip_reass_dequeue_datagram+0x32>
 801a5e8:	4b0a      	ldr	r3, [pc, #40]	; (801a614 <ip_reass_dequeue_datagram+0x50>)
 801a5ea:	f240 1245 	movw	r2, #325	; 0x145
 801a5ee:	490a      	ldr	r1, [pc, #40]	; (801a618 <ip_reass_dequeue_datagram+0x54>)
 801a5f0:	480a      	ldr	r0, [pc, #40]	; (801a61c <ip_reass_dequeue_datagram+0x58>)
 801a5f2:	f001 f937 	bl	801b864 <iprintf>
    prev->next = ipr->next;
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	681a      	ldr	r2, [r3, #0]
 801a5fa:	683b      	ldr	r3, [r7, #0]
 801a5fc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a5fe:	6879      	ldr	r1, [r7, #4]
 801a600:	2004      	movs	r0, #4
 801a602:	f7f6 fc23 	bl	8010e4c <memp_free>
}
 801a606:	bf00      	nop
 801a608:	3708      	adds	r7, #8
 801a60a:	46bd      	mov	sp, r7
 801a60c:	bd80      	pop	{r7, pc}
 801a60e:	bf00      	nop
 801a610:	2405e9dc 	.word	0x2405e9dc
 801a614:	0801fdfc 	.word	0x0801fdfc
 801a618:	0801fec4 	.word	0x0801fec4
 801a61c:	0801fe44 	.word	0x0801fe44

0801a620 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a620:	b580      	push	{r7, lr}
 801a622:	b08c      	sub	sp, #48	; 0x30
 801a624:	af00      	add	r7, sp, #0
 801a626:	60f8      	str	r0, [r7, #12]
 801a628:	60b9      	str	r1, [r7, #8]
 801a62a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a62c:	2300      	movs	r3, #0
 801a62e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a630:	2301      	movs	r3, #1
 801a632:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a634:	68bb      	ldr	r3, [r7, #8]
 801a636:	685b      	ldr	r3, [r3, #4]
 801a638:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a63a:	69fb      	ldr	r3, [r7, #28]
 801a63c:	885b      	ldrh	r3, [r3, #2]
 801a63e:	b29b      	uxth	r3, r3
 801a640:	4618      	mov	r0, r3
 801a642:	f7f5 fd31 	bl	80100a8 <lwip_htons>
 801a646:	4603      	mov	r3, r0
 801a648:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a64a:	69fb      	ldr	r3, [r7, #28]
 801a64c:	781b      	ldrb	r3, [r3, #0]
 801a64e:	f003 030f 	and.w	r3, r3, #15
 801a652:	b2db      	uxtb	r3, r3
 801a654:	009b      	lsls	r3, r3, #2
 801a656:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a658:	7e7b      	ldrb	r3, [r7, #25]
 801a65a:	b29b      	uxth	r3, r3
 801a65c:	8b7a      	ldrh	r2, [r7, #26]
 801a65e:	429a      	cmp	r2, r3
 801a660:	d202      	bcs.n	801a668 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a662:	f04f 33ff 	mov.w	r3, #4294967295
 801a666:	e135      	b.n	801a8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a668:	7e7b      	ldrb	r3, [r7, #25]
 801a66a:	b29b      	uxth	r3, r3
 801a66c:	8b7a      	ldrh	r2, [r7, #26]
 801a66e:	1ad3      	subs	r3, r2, r3
 801a670:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a672:	69fb      	ldr	r3, [r7, #28]
 801a674:	88db      	ldrh	r3, [r3, #6]
 801a676:	b29b      	uxth	r3, r3
 801a678:	4618      	mov	r0, r3
 801a67a:	f7f5 fd15 	bl	80100a8 <lwip_htons>
 801a67e:	4603      	mov	r3, r0
 801a680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a684:	b29b      	uxth	r3, r3
 801a686:	00db      	lsls	r3, r3, #3
 801a688:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a68a:	68bb      	ldr	r3, [r7, #8]
 801a68c:	685b      	ldr	r3, [r3, #4]
 801a68e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801a690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a692:	2200      	movs	r2, #0
 801a694:	701a      	strb	r2, [r3, #0]
 801a696:	2200      	movs	r2, #0
 801a698:	705a      	strb	r2, [r3, #1]
 801a69a:	2200      	movs	r2, #0
 801a69c:	709a      	strb	r2, [r3, #2]
 801a69e:	2200      	movs	r2, #0
 801a6a0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6a4:	8afa      	ldrh	r2, [r7, #22]
 801a6a6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a6a8:	8afa      	ldrh	r2, [r7, #22]
 801a6aa:	8b7b      	ldrh	r3, [r7, #26]
 801a6ac:	4413      	add	r3, r2
 801a6ae:	b29a      	uxth	r2, r3
 801a6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6b2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6b6:	88db      	ldrh	r3, [r3, #6]
 801a6b8:	b29b      	uxth	r3, r3
 801a6ba:	8afa      	ldrh	r2, [r7, #22]
 801a6bc:	429a      	cmp	r2, r3
 801a6be:	d902      	bls.n	801a6c6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a6c0:	f04f 33ff 	mov.w	r3, #4294967295
 801a6c4:	e106      	b.n	801a8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	685b      	ldr	r3, [r3, #4]
 801a6ca:	627b      	str	r3, [r7, #36]	; 0x24
 801a6cc:	e068      	b.n	801a7a0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6d0:	685b      	ldr	r3, [r3, #4]
 801a6d2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6d6:	889b      	ldrh	r3, [r3, #4]
 801a6d8:	b29a      	uxth	r2, r3
 801a6da:	693b      	ldr	r3, [r7, #16]
 801a6dc:	889b      	ldrh	r3, [r3, #4]
 801a6de:	b29b      	uxth	r3, r3
 801a6e0:	429a      	cmp	r2, r3
 801a6e2:	d235      	bcs.n	801a750 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a6e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d020      	beq.n	801a732 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6f2:	889b      	ldrh	r3, [r3, #4]
 801a6f4:	b29a      	uxth	r2, r3
 801a6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6f8:	88db      	ldrh	r3, [r3, #6]
 801a6fa:	b29b      	uxth	r3, r3
 801a6fc:	429a      	cmp	r2, r3
 801a6fe:	d307      	bcc.n	801a710 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a702:	88db      	ldrh	r3, [r3, #6]
 801a704:	b29a      	uxth	r2, r3
 801a706:	693b      	ldr	r3, [r7, #16]
 801a708:	889b      	ldrh	r3, [r3, #4]
 801a70a:	b29b      	uxth	r3, r3
 801a70c:	429a      	cmp	r2, r3
 801a70e:	d902      	bls.n	801a716 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a710:	f04f 33ff 	mov.w	r3, #4294967295
 801a714:	e0de      	b.n	801a8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a718:	68ba      	ldr	r2, [r7, #8]
 801a71a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a71e:	88db      	ldrh	r3, [r3, #6]
 801a720:	b29a      	uxth	r2, r3
 801a722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a724:	889b      	ldrh	r3, [r3, #4]
 801a726:	b29b      	uxth	r3, r3
 801a728:	429a      	cmp	r2, r3
 801a72a:	d03d      	beq.n	801a7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a72c:	2300      	movs	r3, #0
 801a72e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a730:	e03a      	b.n	801a7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a734:	88db      	ldrh	r3, [r3, #6]
 801a736:	b29a      	uxth	r2, r3
 801a738:	693b      	ldr	r3, [r7, #16]
 801a73a:	889b      	ldrh	r3, [r3, #4]
 801a73c:	b29b      	uxth	r3, r3
 801a73e:	429a      	cmp	r2, r3
 801a740:	d902      	bls.n	801a748 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a742:	f04f 33ff 	mov.w	r3, #4294967295
 801a746:	e0c5      	b.n	801a8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	68ba      	ldr	r2, [r7, #8]
 801a74c:	605a      	str	r2, [r3, #4]
      break;
 801a74e:	e02b      	b.n	801a7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a752:	889b      	ldrh	r3, [r3, #4]
 801a754:	b29a      	uxth	r2, r3
 801a756:	693b      	ldr	r3, [r7, #16]
 801a758:	889b      	ldrh	r3, [r3, #4]
 801a75a:	b29b      	uxth	r3, r3
 801a75c:	429a      	cmp	r2, r3
 801a75e:	d102      	bne.n	801a766 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a760:	f04f 33ff 	mov.w	r3, #4294967295
 801a764:	e0b6      	b.n	801a8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a768:	889b      	ldrh	r3, [r3, #4]
 801a76a:	b29a      	uxth	r2, r3
 801a76c:	693b      	ldr	r3, [r7, #16]
 801a76e:	88db      	ldrh	r3, [r3, #6]
 801a770:	b29b      	uxth	r3, r3
 801a772:	429a      	cmp	r2, r3
 801a774:	d202      	bcs.n	801a77c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a776:	f04f 33ff 	mov.w	r3, #4294967295
 801a77a:	e0ab      	b.n	801a8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d009      	beq.n	801a796 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a784:	88db      	ldrh	r3, [r3, #6]
 801a786:	b29a      	uxth	r2, r3
 801a788:	693b      	ldr	r3, [r7, #16]
 801a78a:	889b      	ldrh	r3, [r3, #4]
 801a78c:	b29b      	uxth	r3, r3
 801a78e:	429a      	cmp	r2, r3
 801a790:	d001      	beq.n	801a796 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a792:	2300      	movs	r3, #0
 801a794:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a796:	693b      	ldr	r3, [r7, #16]
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801a79c:	693b      	ldr	r3, [r7, #16]
 801a79e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801a7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d193      	bne.n	801a6ce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a7a6:	e000      	b.n	801a7aa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a7a8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d12d      	bne.n	801a80c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d01c      	beq.n	801a7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7b8:	88db      	ldrh	r3, [r3, #6]
 801a7ba:	b29a      	uxth	r2, r3
 801a7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7be:	889b      	ldrh	r3, [r3, #4]
 801a7c0:	b29b      	uxth	r3, r3
 801a7c2:	429a      	cmp	r2, r3
 801a7c4:	d906      	bls.n	801a7d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a7c6:	4b45      	ldr	r3, [pc, #276]	; (801a8dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a7c8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801a7cc:	4944      	ldr	r1, [pc, #272]	; (801a8e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a7ce:	4845      	ldr	r0, [pc, #276]	; (801a8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a7d0:	f001 f848 	bl	801b864 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7d6:	68ba      	ldr	r2, [r7, #8]
 801a7d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7dc:	88db      	ldrh	r3, [r3, #6]
 801a7de:	b29a      	uxth	r2, r3
 801a7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7e2:	889b      	ldrh	r3, [r3, #4]
 801a7e4:	b29b      	uxth	r3, r3
 801a7e6:	429a      	cmp	r2, r3
 801a7e8:	d010      	beq.n	801a80c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a7ea:	2300      	movs	r3, #0
 801a7ec:	623b      	str	r3, [r7, #32]
 801a7ee:	e00d      	b.n	801a80c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a7f0:	68fb      	ldr	r3, [r7, #12]
 801a7f2:	685b      	ldr	r3, [r3, #4]
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d006      	beq.n	801a806 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a7f8:	4b38      	ldr	r3, [pc, #224]	; (801a8dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a7fa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801a7fe:	493a      	ldr	r1, [pc, #232]	; (801a8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a800:	4838      	ldr	r0, [pc, #224]	; (801a8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a802:	f001 f82f 	bl	801b864 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a806:	68fb      	ldr	r3, [r7, #12]
 801a808:	68ba      	ldr	r2, [r7, #8]
 801a80a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d105      	bne.n	801a81e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a812:	68fb      	ldr	r3, [r7, #12]
 801a814:	7f9b      	ldrb	r3, [r3, #30]
 801a816:	f003 0301 	and.w	r3, r3, #1
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d059      	beq.n	801a8d2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a81e:	6a3b      	ldr	r3, [r7, #32]
 801a820:	2b00      	cmp	r3, #0
 801a822:	d04f      	beq.n	801a8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	685b      	ldr	r3, [r3, #4]
 801a828:	2b00      	cmp	r3, #0
 801a82a:	d006      	beq.n	801a83a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a82c:	68fb      	ldr	r3, [r7, #12]
 801a82e:	685b      	ldr	r3, [r3, #4]
 801a830:	685b      	ldr	r3, [r3, #4]
 801a832:	889b      	ldrh	r3, [r3, #4]
 801a834:	b29b      	uxth	r3, r3
 801a836:	2b00      	cmp	r3, #0
 801a838:	d002      	beq.n	801a840 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a83a:	2300      	movs	r3, #0
 801a83c:	623b      	str	r3, [r7, #32]
 801a83e:	e041      	b.n	801a8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a842:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801a844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a84a:	e012      	b.n	801a872 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a84e:	685b      	ldr	r3, [r3, #4]
 801a850:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801a852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a854:	88db      	ldrh	r3, [r3, #6]
 801a856:	b29a      	uxth	r2, r3
 801a858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a85a:	889b      	ldrh	r3, [r3, #4]
 801a85c:	b29b      	uxth	r3, r3
 801a85e:	429a      	cmp	r2, r3
 801a860:	d002      	beq.n	801a868 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a862:	2300      	movs	r3, #0
 801a864:	623b      	str	r3, [r7, #32]
            break;
 801a866:	e007      	b.n	801a878 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a86a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801a86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a874:	2b00      	cmp	r3, #0
 801a876:	d1e9      	bne.n	801a84c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a878:	6a3b      	ldr	r3, [r7, #32]
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d022      	beq.n	801a8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a87e:	68fb      	ldr	r3, [r7, #12]
 801a880:	685b      	ldr	r3, [r3, #4]
 801a882:	2b00      	cmp	r3, #0
 801a884:	d106      	bne.n	801a894 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a886:	4b15      	ldr	r3, [pc, #84]	; (801a8dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a888:	f240 12df 	movw	r2, #479	; 0x1df
 801a88c:	4917      	ldr	r1, [pc, #92]	; (801a8ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a88e:	4815      	ldr	r0, [pc, #84]	; (801a8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a890:	f000 ffe8 	bl	801b864 <iprintf>
          LWIP_ASSERT("sanity check",
 801a894:	68fb      	ldr	r3, [r7, #12]
 801a896:	685b      	ldr	r3, [r3, #4]
 801a898:	685b      	ldr	r3, [r3, #4]
 801a89a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a89c:	429a      	cmp	r2, r3
 801a89e:	d106      	bne.n	801a8ae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a8a0:	4b0e      	ldr	r3, [pc, #56]	; (801a8dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a8a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a8a6:	4911      	ldr	r1, [pc, #68]	; (801a8ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a8a8:	480e      	ldr	r0, [pc, #56]	; (801a8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a8aa:	f000 ffdb 	bl	801b864 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d006      	beq.n	801a8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a8b6:	4b09      	ldr	r3, [pc, #36]	; (801a8dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a8b8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801a8bc:	490c      	ldr	r1, [pc, #48]	; (801a8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a8be:	4809      	ldr	r0, [pc, #36]	; (801a8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a8c0:	f000 ffd0 	bl	801b864 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a8c4:	6a3b      	ldr	r3, [r7, #32]
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	bf14      	ite	ne
 801a8ca:	2301      	movne	r3, #1
 801a8cc:	2300      	moveq	r3, #0
 801a8ce:	b2db      	uxtb	r3, r3
 801a8d0:	e000      	b.n	801a8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a8d2:	2300      	movs	r3, #0
}
 801a8d4:	4618      	mov	r0, r3
 801a8d6:	3730      	adds	r7, #48	; 0x30
 801a8d8:	46bd      	mov	sp, r7
 801a8da:	bd80      	pop	{r7, pc}
 801a8dc:	0801fdfc 	.word	0x0801fdfc
 801a8e0:	0801fee0 	.word	0x0801fee0
 801a8e4:	0801fe44 	.word	0x0801fe44
 801a8e8:	0801ff00 	.word	0x0801ff00
 801a8ec:	0801ff38 	.word	0x0801ff38
 801a8f0:	0801ff48 	.word	0x0801ff48

0801a8f4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a8f4:	b580      	push	{r7, lr}
 801a8f6:	b08e      	sub	sp, #56	; 0x38
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	685b      	ldr	r3, [r3, #4]
 801a900:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a904:	781b      	ldrb	r3, [r3, #0]
 801a906:	f003 030f 	and.w	r3, r3, #15
 801a90a:	b2db      	uxtb	r3, r3
 801a90c:	009b      	lsls	r3, r3, #2
 801a90e:	b2db      	uxtb	r3, r3
 801a910:	2b14      	cmp	r3, #20
 801a912:	f040 8171 	bne.w	801abf8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a918:	88db      	ldrh	r3, [r3, #6]
 801a91a:	b29b      	uxth	r3, r3
 801a91c:	4618      	mov	r0, r3
 801a91e:	f7f5 fbc3 	bl	80100a8 <lwip_htons>
 801a922:	4603      	mov	r3, r0
 801a924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a928:	b29b      	uxth	r3, r3
 801a92a:	00db      	lsls	r3, r3, #3
 801a92c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a930:	885b      	ldrh	r3, [r3, #2]
 801a932:	b29b      	uxth	r3, r3
 801a934:	4618      	mov	r0, r3
 801a936:	f7f5 fbb7 	bl	80100a8 <lwip_htons>
 801a93a:	4603      	mov	r3, r0
 801a93c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a940:	781b      	ldrb	r3, [r3, #0]
 801a942:	f003 030f 	and.w	r3, r3, #15
 801a946:	b2db      	uxtb	r3, r3
 801a948:	009b      	lsls	r3, r3, #2
 801a94a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a94e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a952:	b29b      	uxth	r3, r3
 801a954:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a956:	429a      	cmp	r2, r3
 801a958:	f0c0 8150 	bcc.w	801abfc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a95c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a960:	b29b      	uxth	r3, r3
 801a962:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a964:	1ad3      	subs	r3, r2, r3
 801a966:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a968:	6878      	ldr	r0, [r7, #4]
 801a96a:	f7f7 f9a5 	bl	8011cb8 <pbuf_clen>
 801a96e:	4603      	mov	r3, r0
 801a970:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a972:	4b8c      	ldr	r3, [pc, #560]	; (801aba4 <ip4_reass+0x2b0>)
 801a974:	881b      	ldrh	r3, [r3, #0]
 801a976:	461a      	mov	r2, r3
 801a978:	8c3b      	ldrh	r3, [r7, #32]
 801a97a:	4413      	add	r3, r2
 801a97c:	2b0a      	cmp	r3, #10
 801a97e:	dd10      	ble.n	801a9a2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a980:	8c3b      	ldrh	r3, [r7, #32]
 801a982:	4619      	mov	r1, r3
 801a984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a986:	f7ff fd81 	bl	801a48c <ip_reass_remove_oldest_datagram>
 801a98a:	4603      	mov	r3, r0
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	f000 8137 	beq.w	801ac00 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a992:	4b84      	ldr	r3, [pc, #528]	; (801aba4 <ip4_reass+0x2b0>)
 801a994:	881b      	ldrh	r3, [r3, #0]
 801a996:	461a      	mov	r2, r3
 801a998:	8c3b      	ldrh	r3, [r7, #32]
 801a99a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a99c:	2b0a      	cmp	r3, #10
 801a99e:	f300 812f 	bgt.w	801ac00 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a9a2:	4b81      	ldr	r3, [pc, #516]	; (801aba8 <ip4_reass+0x2b4>)
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	633b      	str	r3, [r7, #48]	; 0x30
 801a9a8:	e015      	b.n	801a9d6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9ac:	695a      	ldr	r2, [r3, #20]
 801a9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9b0:	68db      	ldr	r3, [r3, #12]
 801a9b2:	429a      	cmp	r2, r3
 801a9b4:	d10c      	bne.n	801a9d0 <ip4_reass+0xdc>
 801a9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9b8:	699a      	ldr	r2, [r3, #24]
 801a9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9bc:	691b      	ldr	r3, [r3, #16]
 801a9be:	429a      	cmp	r2, r3
 801a9c0:	d106      	bne.n	801a9d0 <ip4_reass+0xdc>
 801a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9c4:	899a      	ldrh	r2, [r3, #12]
 801a9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9c8:	889b      	ldrh	r3, [r3, #4]
 801a9ca:	b29b      	uxth	r3, r3
 801a9cc:	429a      	cmp	r2, r3
 801a9ce:	d006      	beq.n	801a9de <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9d2:	681b      	ldr	r3, [r3, #0]
 801a9d4:	633b      	str	r3, [r7, #48]	; 0x30
 801a9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d1e6      	bne.n	801a9aa <ip4_reass+0xb6>
 801a9dc:	e000      	b.n	801a9e0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a9de:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d109      	bne.n	801a9fa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a9e6:	8c3b      	ldrh	r3, [r7, #32]
 801a9e8:	4619      	mov	r1, r3
 801a9ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a9ec:	f7ff fdb0 	bl	801a550 <ip_reass_enqueue_new_datagram>
 801a9f0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d11c      	bne.n	801aa32 <ip4_reass+0x13e>
      goto nullreturn;
 801a9f8:	e105      	b.n	801ac06 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9fc:	88db      	ldrh	r3, [r3, #6]
 801a9fe:	b29b      	uxth	r3, r3
 801aa00:	4618      	mov	r0, r3
 801aa02:	f7f5 fb51 	bl	80100a8 <lwip_htons>
 801aa06:	4603      	mov	r3, r0
 801aa08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d110      	bne.n	801aa32 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801aa10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa12:	89db      	ldrh	r3, [r3, #14]
 801aa14:	4618      	mov	r0, r3
 801aa16:	f7f5 fb47 	bl	80100a8 <lwip_htons>
 801aa1a:	4603      	mov	r3, r0
 801aa1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d006      	beq.n	801aa32 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801aa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa26:	3308      	adds	r3, #8
 801aa28:	2214      	movs	r2, #20
 801aa2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801aa2c:	4618      	mov	r0, r3
 801aa2e:	f000 fe54 	bl	801b6da <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801aa32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa34:	88db      	ldrh	r3, [r3, #6]
 801aa36:	b29b      	uxth	r3, r3
 801aa38:	f003 0320 	and.w	r3, r3, #32
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	bf0c      	ite	eq
 801aa40:	2301      	moveq	r3, #1
 801aa42:	2300      	movne	r3, #0
 801aa44:	b2db      	uxtb	r3, r3
 801aa46:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801aa48:	69fb      	ldr	r3, [r7, #28]
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	d00e      	beq.n	801aa6c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801aa4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801aa50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aa52:	4413      	add	r3, r2
 801aa54:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801aa56:	8b7a      	ldrh	r2, [r7, #26]
 801aa58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801aa5a:	429a      	cmp	r2, r3
 801aa5c:	f0c0 80a0 	bcc.w	801aba0 <ip4_reass+0x2ac>
 801aa60:	8b7b      	ldrh	r3, [r7, #26]
 801aa62:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801aa66:	4293      	cmp	r3, r2
 801aa68:	f200 809a 	bhi.w	801aba0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801aa6c:	69fa      	ldr	r2, [r7, #28]
 801aa6e:	6879      	ldr	r1, [r7, #4]
 801aa70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aa72:	f7ff fdd5 	bl	801a620 <ip_reass_chain_frag_into_datagram_and_validate>
 801aa76:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801aa78:	697b      	ldr	r3, [r7, #20]
 801aa7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa7e:	f000 809b 	beq.w	801abb8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801aa82:	4b48      	ldr	r3, [pc, #288]	; (801aba4 <ip4_reass+0x2b0>)
 801aa84:	881a      	ldrh	r2, [r3, #0]
 801aa86:	8c3b      	ldrh	r3, [r7, #32]
 801aa88:	4413      	add	r3, r2
 801aa8a:	b29a      	uxth	r2, r3
 801aa8c:	4b45      	ldr	r3, [pc, #276]	; (801aba4 <ip4_reass+0x2b0>)
 801aa8e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801aa90:	69fb      	ldr	r3, [r7, #28]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d00d      	beq.n	801aab2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801aa96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801aa98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aa9a:	4413      	add	r3, r2
 801aa9c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801aa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aaa0:	8a7a      	ldrh	r2, [r7, #18]
 801aaa2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801aaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aaa6:	7f9b      	ldrb	r3, [r3, #30]
 801aaa8:	f043 0301 	orr.w	r3, r3, #1
 801aaac:	b2da      	uxtb	r2, r3
 801aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aab0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801aab2:	697b      	ldr	r3, [r7, #20]
 801aab4:	2b01      	cmp	r3, #1
 801aab6:	d171      	bne.n	801ab9c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801aab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aaba:	8b9b      	ldrh	r3, [r3, #28]
 801aabc:	3314      	adds	r3, #20
 801aabe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801aac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aac2:	685b      	ldr	r3, [r3, #4]
 801aac4:	685b      	ldr	r3, [r3, #4]
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aacc:	685b      	ldr	r3, [r3, #4]
 801aace:	685b      	ldr	r3, [r3, #4]
 801aad0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aad4:	3308      	adds	r3, #8
 801aad6:	2214      	movs	r2, #20
 801aad8:	4619      	mov	r1, r3
 801aada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aadc:	f000 fdfd 	bl	801b6da <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801aae0:	8a3b      	ldrh	r3, [r7, #16]
 801aae2:	4618      	mov	r0, r3
 801aae4:	f7f5 fae0 	bl	80100a8 <lwip_htons>
 801aae8:	4603      	mov	r3, r0
 801aaea:	461a      	mov	r2, r3
 801aaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aaee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801aaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aaf2:	2200      	movs	r2, #0
 801aaf4:	719a      	strb	r2, [r3, #6]
 801aaf6:	2200      	movs	r2, #0
 801aaf8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801aafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aafc:	2200      	movs	r2, #0
 801aafe:	729a      	strb	r2, [r3, #10]
 801ab00:	2200      	movs	r2, #0
 801ab02:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801ab04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab06:	685b      	ldr	r3, [r3, #4]
 801ab08:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801ab0a:	e00d      	b.n	801ab28 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801ab0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab0e:	685b      	ldr	r3, [r3, #4]
 801ab10:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801ab12:	2114      	movs	r1, #20
 801ab14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801ab16:	f7f6 ffbb 	bl	8011a90 <pbuf_remove_header>
      pbuf_cat(p, r);
 801ab1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ab1c:	6878      	ldr	r0, [r7, #4]
 801ab1e:	f7f7 f90b 	bl	8011d38 <pbuf_cat>
      r = iprh->next_pbuf;
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801ab28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d1ee      	bne.n	801ab0c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801ab2e:	4b1e      	ldr	r3, [pc, #120]	; (801aba8 <ip4_reass+0x2b4>)
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ab34:	429a      	cmp	r2, r3
 801ab36:	d102      	bne.n	801ab3e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801ab38:	2300      	movs	r3, #0
 801ab3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ab3c:	e010      	b.n	801ab60 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ab3e:	4b1a      	ldr	r3, [pc, #104]	; (801aba8 <ip4_reass+0x2b4>)
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ab44:	e007      	b.n	801ab56 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801ab46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ab4c:	429a      	cmp	r2, r3
 801ab4e:	d006      	beq.n	801ab5e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ab50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ab56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	d1f4      	bne.n	801ab46 <ip4_reass+0x252>
 801ab5c:	e000      	b.n	801ab60 <ip4_reass+0x26c>
          break;
 801ab5e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801ab60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ab62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ab64:	f7ff fd2e 	bl	801a5c4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801ab68:	6878      	ldr	r0, [r7, #4]
 801ab6a:	f7f7 f8a5 	bl	8011cb8 <pbuf_clen>
 801ab6e:	4603      	mov	r3, r0
 801ab70:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801ab72:	4b0c      	ldr	r3, [pc, #48]	; (801aba4 <ip4_reass+0x2b0>)
 801ab74:	881b      	ldrh	r3, [r3, #0]
 801ab76:	8c3a      	ldrh	r2, [r7, #32]
 801ab78:	429a      	cmp	r2, r3
 801ab7a:	d906      	bls.n	801ab8a <ip4_reass+0x296>
 801ab7c:	4b0b      	ldr	r3, [pc, #44]	; (801abac <ip4_reass+0x2b8>)
 801ab7e:	f240 229b 	movw	r2, #667	; 0x29b
 801ab82:	490b      	ldr	r1, [pc, #44]	; (801abb0 <ip4_reass+0x2bc>)
 801ab84:	480b      	ldr	r0, [pc, #44]	; (801abb4 <ip4_reass+0x2c0>)
 801ab86:	f000 fe6d 	bl	801b864 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801ab8a:	4b06      	ldr	r3, [pc, #24]	; (801aba4 <ip4_reass+0x2b0>)
 801ab8c:	881a      	ldrh	r2, [r3, #0]
 801ab8e:	8c3b      	ldrh	r3, [r7, #32]
 801ab90:	1ad3      	subs	r3, r2, r3
 801ab92:	b29a      	uxth	r2, r3
 801ab94:	4b03      	ldr	r3, [pc, #12]	; (801aba4 <ip4_reass+0x2b0>)
 801ab96:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	e038      	b.n	801ac0e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801ab9c:	2300      	movs	r3, #0
 801ab9e:	e036      	b.n	801ac0e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801aba0:	bf00      	nop
 801aba2:	e00a      	b.n	801abba <ip4_reass+0x2c6>
 801aba4:	2405e9e0 	.word	0x2405e9e0
 801aba8:	2405e9dc 	.word	0x2405e9dc
 801abac:	0801fdfc 	.word	0x0801fdfc
 801abb0:	0801ff6c 	.word	0x0801ff6c
 801abb4:	0801fe44 	.word	0x0801fe44
    goto nullreturn_ipr;
 801abb8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801abba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d106      	bne.n	801abce <ip4_reass+0x2da>
 801abc0:	4b15      	ldr	r3, [pc, #84]	; (801ac18 <ip4_reass+0x324>)
 801abc2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801abc6:	4915      	ldr	r1, [pc, #84]	; (801ac1c <ip4_reass+0x328>)
 801abc8:	4815      	ldr	r0, [pc, #84]	; (801ac20 <ip4_reass+0x32c>)
 801abca:	f000 fe4b 	bl	801b864 <iprintf>
  if (ipr->p == NULL) {
 801abce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801abd0:	685b      	ldr	r3, [r3, #4]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d116      	bne.n	801ac04 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801abd6:	4b13      	ldr	r3, [pc, #76]	; (801ac24 <ip4_reass+0x330>)
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801abdc:	429a      	cmp	r2, r3
 801abde:	d006      	beq.n	801abee <ip4_reass+0x2fa>
 801abe0:	4b0d      	ldr	r3, [pc, #52]	; (801ac18 <ip4_reass+0x324>)
 801abe2:	f240 22ab 	movw	r2, #683	; 0x2ab
 801abe6:	4910      	ldr	r1, [pc, #64]	; (801ac28 <ip4_reass+0x334>)
 801abe8:	480d      	ldr	r0, [pc, #52]	; (801ac20 <ip4_reass+0x32c>)
 801abea:	f000 fe3b 	bl	801b864 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801abee:	2100      	movs	r1, #0
 801abf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801abf2:	f7ff fce7 	bl	801a5c4 <ip_reass_dequeue_datagram>
 801abf6:	e006      	b.n	801ac06 <ip4_reass+0x312>
    goto nullreturn;
 801abf8:	bf00      	nop
 801abfa:	e004      	b.n	801ac06 <ip4_reass+0x312>
    goto nullreturn;
 801abfc:	bf00      	nop
 801abfe:	e002      	b.n	801ac06 <ip4_reass+0x312>
      goto nullreturn;
 801ac00:	bf00      	nop
 801ac02:	e000      	b.n	801ac06 <ip4_reass+0x312>
  }

nullreturn:
 801ac04:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801ac06:	6878      	ldr	r0, [r7, #4]
 801ac08:	f7f6 ffc8 	bl	8011b9c <pbuf_free>
  return NULL;
 801ac0c:	2300      	movs	r3, #0
}
 801ac0e:	4618      	mov	r0, r3
 801ac10:	3738      	adds	r7, #56	; 0x38
 801ac12:	46bd      	mov	sp, r7
 801ac14:	bd80      	pop	{r7, pc}
 801ac16:	bf00      	nop
 801ac18:	0801fdfc 	.word	0x0801fdfc
 801ac1c:	0801ff88 	.word	0x0801ff88
 801ac20:	0801fe44 	.word	0x0801fe44
 801ac24:	2405e9dc 	.word	0x2405e9dc
 801ac28:	0801ff94 	.word	0x0801ff94

0801ac2c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801ac2c:	b580      	push	{r7, lr}
 801ac2e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801ac30:	2005      	movs	r0, #5
 801ac32:	f7f6 f895 	bl	8010d60 <memp_malloc>
 801ac36:	4603      	mov	r3, r0
}
 801ac38:	4618      	mov	r0, r3
 801ac3a:	bd80      	pop	{r7, pc}

0801ac3c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801ac3c:	b580      	push	{r7, lr}
 801ac3e:	b082      	sub	sp, #8
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d106      	bne.n	801ac58 <ip_frag_free_pbuf_custom_ref+0x1c>
 801ac4a:	4b07      	ldr	r3, [pc, #28]	; (801ac68 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801ac4c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801ac50:	4906      	ldr	r1, [pc, #24]	; (801ac6c <ip_frag_free_pbuf_custom_ref+0x30>)
 801ac52:	4807      	ldr	r0, [pc, #28]	; (801ac70 <ip_frag_free_pbuf_custom_ref+0x34>)
 801ac54:	f000 fe06 	bl	801b864 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801ac58:	6879      	ldr	r1, [r7, #4]
 801ac5a:	2005      	movs	r0, #5
 801ac5c:	f7f6 f8f6 	bl	8010e4c <memp_free>
}
 801ac60:	bf00      	nop
 801ac62:	3708      	adds	r7, #8
 801ac64:	46bd      	mov	sp, r7
 801ac66:	bd80      	pop	{r7, pc}
 801ac68:	0801fdfc 	.word	0x0801fdfc
 801ac6c:	0801ffb4 	.word	0x0801ffb4
 801ac70:	0801fe44 	.word	0x0801fe44

0801ac74 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ac74:	b580      	push	{r7, lr}
 801ac76:	b084      	sub	sp, #16
 801ac78:	af00      	add	r7, sp, #0
 801ac7a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801ac80:	68fb      	ldr	r3, [r7, #12]
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d106      	bne.n	801ac94 <ipfrag_free_pbuf_custom+0x20>
 801ac86:	4b11      	ldr	r3, [pc, #68]	; (801accc <ipfrag_free_pbuf_custom+0x58>)
 801ac88:	f240 22ce 	movw	r2, #718	; 0x2ce
 801ac8c:	4910      	ldr	r1, [pc, #64]	; (801acd0 <ipfrag_free_pbuf_custom+0x5c>)
 801ac8e:	4811      	ldr	r0, [pc, #68]	; (801acd4 <ipfrag_free_pbuf_custom+0x60>)
 801ac90:	f000 fde8 	bl	801b864 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801ac94:	68fa      	ldr	r2, [r7, #12]
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	429a      	cmp	r2, r3
 801ac9a:	d006      	beq.n	801acaa <ipfrag_free_pbuf_custom+0x36>
 801ac9c:	4b0b      	ldr	r3, [pc, #44]	; (801accc <ipfrag_free_pbuf_custom+0x58>)
 801ac9e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801aca2:	490d      	ldr	r1, [pc, #52]	; (801acd8 <ipfrag_free_pbuf_custom+0x64>)
 801aca4:	480b      	ldr	r0, [pc, #44]	; (801acd4 <ipfrag_free_pbuf_custom+0x60>)
 801aca6:	f000 fddd 	bl	801b864 <iprintf>
  if (pcr->original != NULL) {
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	695b      	ldr	r3, [r3, #20]
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d004      	beq.n	801acbc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801acb2:	68fb      	ldr	r3, [r7, #12]
 801acb4:	695b      	ldr	r3, [r3, #20]
 801acb6:	4618      	mov	r0, r3
 801acb8:	f7f6 ff70 	bl	8011b9c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801acbc:	68f8      	ldr	r0, [r7, #12]
 801acbe:	f7ff ffbd 	bl	801ac3c <ip_frag_free_pbuf_custom_ref>
}
 801acc2:	bf00      	nop
 801acc4:	3710      	adds	r7, #16
 801acc6:	46bd      	mov	sp, r7
 801acc8:	bd80      	pop	{r7, pc}
 801acca:	bf00      	nop
 801accc:	0801fdfc 	.word	0x0801fdfc
 801acd0:	0801ffc0 	.word	0x0801ffc0
 801acd4:	0801fe44 	.word	0x0801fe44
 801acd8:	0801ffcc 	.word	0x0801ffcc

0801acdc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801acdc:	b580      	push	{r7, lr}
 801acde:	b094      	sub	sp, #80	; 0x50
 801ace0:	af02      	add	r7, sp, #8
 801ace2:	60f8      	str	r0, [r7, #12]
 801ace4:	60b9      	str	r1, [r7, #8]
 801ace6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801ace8:	2300      	movs	r3, #0
 801acea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801acee:	68bb      	ldr	r3, [r7, #8]
 801acf0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801acf2:	3b14      	subs	r3, #20
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	da00      	bge.n	801acfa <ip4_frag+0x1e>
 801acf8:	3307      	adds	r3, #7
 801acfa:	10db      	asrs	r3, r3, #3
 801acfc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801acfe:	2314      	movs	r3, #20
 801ad00:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ad02:	68fb      	ldr	r3, [r7, #12]
 801ad04:	685b      	ldr	r3, [r3, #4]
 801ad06:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801ad08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ad0a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ad0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad0e:	781b      	ldrb	r3, [r3, #0]
 801ad10:	f003 030f 	and.w	r3, r3, #15
 801ad14:	b2db      	uxtb	r3, r3
 801ad16:	009b      	lsls	r3, r3, #2
 801ad18:	b2db      	uxtb	r3, r3
 801ad1a:	2b14      	cmp	r3, #20
 801ad1c:	d002      	beq.n	801ad24 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801ad1e:	f06f 0305 	mvn.w	r3, #5
 801ad22:	e110      	b.n	801af46 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801ad24:	68fb      	ldr	r3, [r7, #12]
 801ad26:	895b      	ldrh	r3, [r3, #10]
 801ad28:	2b13      	cmp	r3, #19
 801ad2a:	d809      	bhi.n	801ad40 <ip4_frag+0x64>
 801ad2c:	4b88      	ldr	r3, [pc, #544]	; (801af50 <ip4_frag+0x274>)
 801ad2e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801ad32:	4988      	ldr	r1, [pc, #544]	; (801af54 <ip4_frag+0x278>)
 801ad34:	4888      	ldr	r0, [pc, #544]	; (801af58 <ip4_frag+0x27c>)
 801ad36:	f000 fd95 	bl	801b864 <iprintf>
 801ad3a:	f06f 0305 	mvn.w	r3, #5
 801ad3e:	e102      	b.n	801af46 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ad40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad42:	88db      	ldrh	r3, [r3, #6]
 801ad44:	b29b      	uxth	r3, r3
 801ad46:	4618      	mov	r0, r3
 801ad48:	f7f5 f9ae 	bl	80100a8 <lwip_htons>
 801ad4c:	4603      	mov	r3, r0
 801ad4e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801ad50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ad52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ad56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ad5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ad5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ad60:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ad62:	68fb      	ldr	r3, [r7, #12]
 801ad64:	891b      	ldrh	r3, [r3, #8]
 801ad66:	3b14      	subs	r3, #20
 801ad68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801ad6c:	e0e1      	b.n	801af32 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ad6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ad70:	00db      	lsls	r3, r3, #3
 801ad72:	b29b      	uxth	r3, r3
 801ad74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ad78:	4293      	cmp	r3, r2
 801ad7a:	bf28      	it	cs
 801ad7c:	4613      	movcs	r3, r2
 801ad7e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ad80:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ad84:	2114      	movs	r1, #20
 801ad86:	200e      	movs	r0, #14
 801ad88:	f7f6 fc20 	bl	80115cc <pbuf_alloc>
 801ad8c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801ad8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	f000 80d5 	beq.w	801af40 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ad96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad98:	895b      	ldrh	r3, [r3, #10]
 801ad9a:	2b13      	cmp	r3, #19
 801ad9c:	d806      	bhi.n	801adac <ip4_frag+0xd0>
 801ad9e:	4b6c      	ldr	r3, [pc, #432]	; (801af50 <ip4_frag+0x274>)
 801ada0:	f44f 7249 	mov.w	r2, #804	; 0x324
 801ada4:	496d      	ldr	r1, [pc, #436]	; (801af5c <ip4_frag+0x280>)
 801ada6:	486c      	ldr	r0, [pc, #432]	; (801af58 <ip4_frag+0x27c>)
 801ada8:	f000 fd5c 	bl	801b864 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801adac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adae:	685b      	ldr	r3, [r3, #4]
 801adb0:	2214      	movs	r2, #20
 801adb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801adb4:	4618      	mov	r0, r3
 801adb6:	f000 fc90 	bl	801b6da <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801adba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adbc:	685b      	ldr	r3, [r3, #4]
 801adbe:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801adc0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801adc2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801adc6:	e064      	b.n	801ae92 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801adc8:	68fb      	ldr	r3, [r7, #12]
 801adca:	895a      	ldrh	r2, [r3, #10]
 801adcc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801adce:	1ad3      	subs	r3, r2, r3
 801add0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801add2:	68fb      	ldr	r3, [r7, #12]
 801add4:	895b      	ldrh	r3, [r3, #10]
 801add6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801add8:	429a      	cmp	r2, r3
 801adda:	d906      	bls.n	801adea <ip4_frag+0x10e>
 801addc:	4b5c      	ldr	r3, [pc, #368]	; (801af50 <ip4_frag+0x274>)
 801adde:	f240 322d 	movw	r2, #813	; 0x32d
 801ade2:	495f      	ldr	r1, [pc, #380]	; (801af60 <ip4_frag+0x284>)
 801ade4:	485c      	ldr	r0, [pc, #368]	; (801af58 <ip4_frag+0x27c>)
 801ade6:	f000 fd3d 	bl	801b864 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801adea:	8bfa      	ldrh	r2, [r7, #30]
 801adec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801adf0:	4293      	cmp	r3, r2
 801adf2:	bf28      	it	cs
 801adf4:	4613      	movcs	r3, r2
 801adf6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801adfa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d105      	bne.n	801ae0e <ip4_frag+0x132>
        poff = 0;
 801ae02:	2300      	movs	r3, #0
 801ae04:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ae06:	68fb      	ldr	r3, [r7, #12]
 801ae08:	681b      	ldr	r3, [r3, #0]
 801ae0a:	60fb      	str	r3, [r7, #12]
        continue;
 801ae0c:	e041      	b.n	801ae92 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801ae0e:	f7ff ff0d 	bl	801ac2c <ip_frag_alloc_pbuf_custom_ref>
 801ae12:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801ae14:	69bb      	ldr	r3, [r7, #24]
 801ae16:	2b00      	cmp	r3, #0
 801ae18:	d103      	bne.n	801ae22 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801ae1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ae1c:	f7f6 febe 	bl	8011b9c <pbuf_free>
        goto memerr;
 801ae20:	e08f      	b.n	801af42 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ae22:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801ae24:	68fb      	ldr	r3, [r7, #12]
 801ae26:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ae28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ae2a:	4413      	add	r3, r2
 801ae2c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801ae30:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ae34:	9201      	str	r2, [sp, #4]
 801ae36:	9300      	str	r3, [sp, #0]
 801ae38:	4603      	mov	r3, r0
 801ae3a:	2241      	movs	r2, #65	; 0x41
 801ae3c:	2000      	movs	r0, #0
 801ae3e:	f7f6 fcf3 	bl	8011828 <pbuf_alloced_custom>
 801ae42:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801ae44:	697b      	ldr	r3, [r7, #20]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d106      	bne.n	801ae58 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801ae4a:	69b8      	ldr	r0, [r7, #24]
 801ae4c:	f7ff fef6 	bl	801ac3c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801ae50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ae52:	f7f6 fea3 	bl	8011b9c <pbuf_free>
        goto memerr;
 801ae56:	e074      	b.n	801af42 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801ae58:	68f8      	ldr	r0, [r7, #12]
 801ae5a:	f7f6 ff45 	bl	8011ce8 <pbuf_ref>
      pcr->original = p;
 801ae5e:	69bb      	ldr	r3, [r7, #24]
 801ae60:	68fa      	ldr	r2, [r7, #12]
 801ae62:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ae64:	69bb      	ldr	r3, [r7, #24]
 801ae66:	4a3f      	ldr	r2, [pc, #252]	; (801af64 <ip4_frag+0x288>)
 801ae68:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ae6a:	6979      	ldr	r1, [r7, #20]
 801ae6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ae6e:	f7f6 ff63 	bl	8011d38 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ae72:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801ae76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ae7a:	1ad3      	subs	r3, r2, r3
 801ae7c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801ae80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d004      	beq.n	801ae92 <ip4_frag+0x1b6>
        poff = 0;
 801ae88:	2300      	movs	r3, #0
 801ae8a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ae8c:	68fb      	ldr	r3, [r7, #12]
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ae92:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d196      	bne.n	801adc8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801ae9a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ae9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801aea0:	4413      	add	r3, r2
 801aea2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801aea4:	68bb      	ldr	r3, [r7, #8]
 801aea6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801aea8:	f1a3 0213 	sub.w	r2, r3, #19
 801aeac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801aeb0:	429a      	cmp	r2, r3
 801aeb2:	bfcc      	ite	gt
 801aeb4:	2301      	movgt	r3, #1
 801aeb6:	2300      	movle	r3, #0
 801aeb8:	b2db      	uxtb	r3, r3
 801aeba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801aebc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801aec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801aec4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801aec6:	6a3b      	ldr	r3, [r7, #32]
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d002      	beq.n	801aed2 <ip4_frag+0x1f6>
 801aecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d003      	beq.n	801aeda <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801aed2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801aed4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801aed8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801aeda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801aedc:	4618      	mov	r0, r3
 801aede:	f7f5 f8e3 	bl	80100a8 <lwip_htons>
 801aee2:	4603      	mov	r3, r0
 801aee4:	461a      	mov	r2, r3
 801aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aee8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801aeea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801aeec:	3314      	adds	r3, #20
 801aeee:	b29b      	uxth	r3, r3
 801aef0:	4618      	mov	r0, r3
 801aef2:	f7f5 f8d9 	bl	80100a8 <lwip_htons>
 801aef6:	4603      	mov	r3, r0
 801aef8:	461a      	mov	r2, r3
 801aefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aefc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801aefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af00:	2200      	movs	r2, #0
 801af02:	729a      	strb	r2, [r3, #10]
 801af04:	2200      	movs	r2, #0
 801af06:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801af08:	68bb      	ldr	r3, [r7, #8]
 801af0a:	695b      	ldr	r3, [r3, #20]
 801af0c:	687a      	ldr	r2, [r7, #4]
 801af0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801af10:	68b8      	ldr	r0, [r7, #8]
 801af12:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801af14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801af16:	f7f6 fe41 	bl	8011b9c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801af1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801af1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801af20:	1ad3      	subs	r3, r2, r3
 801af22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801af26:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801af2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801af2c:	4413      	add	r3, r2
 801af2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801af32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801af36:	2b00      	cmp	r3, #0
 801af38:	f47f af19 	bne.w	801ad6e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801af3c:	2300      	movs	r3, #0
 801af3e:	e002      	b.n	801af46 <ip4_frag+0x26a>
      goto memerr;
 801af40:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801af42:	f04f 33ff 	mov.w	r3, #4294967295
}
 801af46:	4618      	mov	r0, r3
 801af48:	3748      	adds	r7, #72	; 0x48
 801af4a:	46bd      	mov	sp, r7
 801af4c:	bd80      	pop	{r7, pc}
 801af4e:	bf00      	nop
 801af50:	0801fdfc 	.word	0x0801fdfc
 801af54:	0801ffd8 	.word	0x0801ffd8
 801af58:	0801fe44 	.word	0x0801fe44
 801af5c:	0801fff4 	.word	0x0801fff4
 801af60:	08020014 	.word	0x08020014
 801af64:	0801ac75 	.word	0x0801ac75

0801af68 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801af68:	b580      	push	{r7, lr}
 801af6a:	b086      	sub	sp, #24
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	6078      	str	r0, [r7, #4]
 801af70:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801af72:	230e      	movs	r3, #14
 801af74:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	895b      	ldrh	r3, [r3, #10]
 801af7a:	2b0e      	cmp	r3, #14
 801af7c:	d96e      	bls.n	801b05c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	7bdb      	ldrb	r3, [r3, #15]
 801af82:	2b00      	cmp	r3, #0
 801af84:	d106      	bne.n	801af94 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801af86:	683b      	ldr	r3, [r7, #0]
 801af88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801af8c:	3301      	adds	r3, #1
 801af8e:	b2da      	uxtb	r2, r3
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	685b      	ldr	r3, [r3, #4]
 801af98:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801af9a:	693b      	ldr	r3, [r7, #16]
 801af9c:	7b1a      	ldrb	r2, [r3, #12]
 801af9e:	7b5b      	ldrb	r3, [r3, #13]
 801afa0:	021b      	lsls	r3, r3, #8
 801afa2:	4313      	orrs	r3, r2
 801afa4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801afa6:	693b      	ldr	r3, [r7, #16]
 801afa8:	781b      	ldrb	r3, [r3, #0]
 801afaa:	f003 0301 	and.w	r3, r3, #1
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d023      	beq.n	801affa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801afb2:	693b      	ldr	r3, [r7, #16]
 801afb4:	781b      	ldrb	r3, [r3, #0]
 801afb6:	2b01      	cmp	r3, #1
 801afb8:	d10f      	bne.n	801afda <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801afba:	693b      	ldr	r3, [r7, #16]
 801afbc:	785b      	ldrb	r3, [r3, #1]
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	d11b      	bne.n	801affa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801afc2:	693b      	ldr	r3, [r7, #16]
 801afc4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801afc6:	2b5e      	cmp	r3, #94	; 0x5e
 801afc8:	d117      	bne.n	801affa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	7b5b      	ldrb	r3, [r3, #13]
 801afce:	f043 0310 	orr.w	r3, r3, #16
 801afd2:	b2da      	uxtb	r2, r3
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	735a      	strb	r2, [r3, #13]
 801afd8:	e00f      	b.n	801affa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801afda:	693b      	ldr	r3, [r7, #16]
 801afdc:	2206      	movs	r2, #6
 801afde:	4928      	ldr	r1, [pc, #160]	; (801b080 <ethernet_input+0x118>)
 801afe0:	4618      	mov	r0, r3
 801afe2:	f000 fb6a 	bl	801b6ba <memcmp>
 801afe6:	4603      	mov	r3, r0
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d106      	bne.n	801affa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	7b5b      	ldrb	r3, [r3, #13]
 801aff0:	f043 0308 	orr.w	r3, r3, #8
 801aff4:	b2da      	uxtb	r2, r3
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801affa:	89fb      	ldrh	r3, [r7, #14]
 801affc:	2b08      	cmp	r3, #8
 801affe:	d003      	beq.n	801b008 <ethernet_input+0xa0>
 801b000:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801b004:	d014      	beq.n	801b030 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801b006:	e032      	b.n	801b06e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b008:	683b      	ldr	r3, [r7, #0]
 801b00a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b00e:	f003 0308 	and.w	r3, r3, #8
 801b012:	2b00      	cmp	r3, #0
 801b014:	d024      	beq.n	801b060 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b016:	8afb      	ldrh	r3, [r7, #22]
 801b018:	4619      	mov	r1, r3
 801b01a:	6878      	ldr	r0, [r7, #4]
 801b01c:	f7f6 fd38 	bl	8011a90 <pbuf_remove_header>
 801b020:	4603      	mov	r3, r0
 801b022:	2b00      	cmp	r3, #0
 801b024:	d11e      	bne.n	801b064 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801b026:	6839      	ldr	r1, [r7, #0]
 801b028:	6878      	ldr	r0, [r7, #4]
 801b02a:	f7fe ff21 	bl	8019e70 <ip4_input>
      break;
 801b02e:	e013      	b.n	801b058 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b030:	683b      	ldr	r3, [r7, #0]
 801b032:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b036:	f003 0308 	and.w	r3, r3, #8
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d014      	beq.n	801b068 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b03e:	8afb      	ldrh	r3, [r7, #22]
 801b040:	4619      	mov	r1, r3
 801b042:	6878      	ldr	r0, [r7, #4]
 801b044:	f7f6 fd24 	bl	8011a90 <pbuf_remove_header>
 801b048:	4603      	mov	r3, r0
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d10e      	bne.n	801b06c <ethernet_input+0x104>
        etharp_input(p, netif);
 801b04e:	6839      	ldr	r1, [r7, #0]
 801b050:	6878      	ldr	r0, [r7, #4]
 801b052:	f7fe f89b 	bl	801918c <etharp_input>
      break;
 801b056:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b058:	2300      	movs	r3, #0
 801b05a:	e00c      	b.n	801b076 <ethernet_input+0x10e>
    goto free_and_return;
 801b05c:	bf00      	nop
 801b05e:	e006      	b.n	801b06e <ethernet_input+0x106>
        goto free_and_return;
 801b060:	bf00      	nop
 801b062:	e004      	b.n	801b06e <ethernet_input+0x106>
        goto free_and_return;
 801b064:	bf00      	nop
 801b066:	e002      	b.n	801b06e <ethernet_input+0x106>
        goto free_and_return;
 801b068:	bf00      	nop
 801b06a:	e000      	b.n	801b06e <ethernet_input+0x106>
        goto free_and_return;
 801b06c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b06e:	6878      	ldr	r0, [r7, #4]
 801b070:	f7f6 fd94 	bl	8011b9c <pbuf_free>
  return ERR_OK;
 801b074:	2300      	movs	r3, #0
}
 801b076:	4618      	mov	r0, r3
 801b078:	3718      	adds	r7, #24
 801b07a:	46bd      	mov	sp, r7
 801b07c:	bd80      	pop	{r7, pc}
 801b07e:	bf00      	nop
 801b080:	08020280 	.word	0x08020280

0801b084 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b084:	b580      	push	{r7, lr}
 801b086:	b086      	sub	sp, #24
 801b088:	af00      	add	r7, sp, #0
 801b08a:	60f8      	str	r0, [r7, #12]
 801b08c:	60b9      	str	r1, [r7, #8]
 801b08e:	607a      	str	r2, [r7, #4]
 801b090:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b092:	8c3b      	ldrh	r3, [r7, #32]
 801b094:	4618      	mov	r0, r3
 801b096:	f7f5 f807 	bl	80100a8 <lwip_htons>
 801b09a:	4603      	mov	r3, r0
 801b09c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b09e:	210e      	movs	r1, #14
 801b0a0:	68b8      	ldr	r0, [r7, #8]
 801b0a2:	f7f6 fce5 	bl	8011a70 <pbuf_add_header>
 801b0a6:	4603      	mov	r3, r0
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	d125      	bne.n	801b0f8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b0ac:	68bb      	ldr	r3, [r7, #8]
 801b0ae:	685b      	ldr	r3, [r3, #4]
 801b0b0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b0b2:	693b      	ldr	r3, [r7, #16]
 801b0b4:	8afa      	ldrh	r2, [r7, #22]
 801b0b6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b0b8:	693b      	ldr	r3, [r7, #16]
 801b0ba:	2206      	movs	r2, #6
 801b0bc:	6839      	ldr	r1, [r7, #0]
 801b0be:	4618      	mov	r0, r3
 801b0c0:	f000 fb0b 	bl	801b6da <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b0c4:	693b      	ldr	r3, [r7, #16]
 801b0c6:	3306      	adds	r3, #6
 801b0c8:	2206      	movs	r2, #6
 801b0ca:	6879      	ldr	r1, [r7, #4]
 801b0cc:	4618      	mov	r0, r3
 801b0ce:	f000 fb04 	bl	801b6da <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b0d8:	2b06      	cmp	r3, #6
 801b0da:	d006      	beq.n	801b0ea <ethernet_output+0x66>
 801b0dc:	4b0a      	ldr	r3, [pc, #40]	; (801b108 <ethernet_output+0x84>)
 801b0de:	f44f 7299 	mov.w	r2, #306	; 0x132
 801b0e2:	490a      	ldr	r1, [pc, #40]	; (801b10c <ethernet_output+0x88>)
 801b0e4:	480a      	ldr	r0, [pc, #40]	; (801b110 <ethernet_output+0x8c>)
 801b0e6:	f000 fbbd 	bl	801b864 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b0ea:	68fb      	ldr	r3, [r7, #12]
 801b0ec:	699b      	ldr	r3, [r3, #24]
 801b0ee:	68b9      	ldr	r1, [r7, #8]
 801b0f0:	68f8      	ldr	r0, [r7, #12]
 801b0f2:	4798      	blx	r3
 801b0f4:	4603      	mov	r3, r0
 801b0f6:	e002      	b.n	801b0fe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b0f8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b0fa:	f06f 0301 	mvn.w	r3, #1
}
 801b0fe:	4618      	mov	r0, r3
 801b100:	3718      	adds	r7, #24
 801b102:	46bd      	mov	sp, r7
 801b104:	bd80      	pop	{r7, pc}
 801b106:	bf00      	nop
 801b108:	08020024 	.word	0x08020024
 801b10c:	0802005c 	.word	0x0802005c
 801b110:	08020090 	.word	0x08020090

0801b114 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801b114:	b580      	push	{r7, lr}
 801b116:	b082      	sub	sp, #8
 801b118:	af00      	add	r7, sp, #0
 801b11a:	6078      	str	r0, [r7, #4]
 801b11c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801b11e:	683b      	ldr	r3, [r7, #0]
 801b120:	2200      	movs	r2, #0
 801b122:	2104      	movs	r1, #4
 801b124:	4618      	mov	r0, r3
 801b126:	f7ef f99b 	bl	800a460 <osMessageQueueNew>
 801b12a:	4602      	mov	r2, r0
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	681b      	ldr	r3, [r3, #0]
 801b134:	2b00      	cmp	r3, #0
 801b136:	d102      	bne.n	801b13e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801b138:	f04f 33ff 	mov.w	r3, #4294967295
 801b13c:	e000      	b.n	801b140 <sys_mbox_new+0x2c>

  return ERR_OK;
 801b13e:	2300      	movs	r3, #0
}
 801b140:	4618      	mov	r0, r3
 801b142:	3708      	adds	r7, #8
 801b144:	46bd      	mov	sp, r7
 801b146:	bd80      	pop	{r7, pc}

0801b148 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801b148:	b580      	push	{r7, lr}
 801b14a:	b082      	sub	sp, #8
 801b14c:	af00      	add	r7, sp, #0
 801b14e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	681b      	ldr	r3, [r3, #0]
 801b154:	4618      	mov	r0, r3
 801b156:	f7ef fab5 	bl	800a6c4 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	681b      	ldr	r3, [r3, #0]
 801b15e:	4618      	mov	r0, r3
 801b160:	f7ef fad0 	bl	800a704 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801b164:	bf00      	nop
 801b166:	3708      	adds	r7, #8
 801b168:	46bd      	mov	sp, r7
 801b16a:	bd80      	pop	{r7, pc}

0801b16c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801b16c:	b580      	push	{r7, lr}
 801b16e:	b084      	sub	sp, #16
 801b170:	af00      	add	r7, sp, #0
 801b172:	6078      	str	r0, [r7, #4]
 801b174:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	6818      	ldr	r0, [r3, #0]
 801b17a:	4639      	mov	r1, r7
 801b17c:	2300      	movs	r3, #0
 801b17e:	2200      	movs	r2, #0
 801b180:	f7ef f9e2 	bl	800a548 <osMessageQueuePut>
 801b184:	4603      	mov	r3, r0
 801b186:	2b00      	cmp	r3, #0
 801b188:	d102      	bne.n	801b190 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801b18a:	2300      	movs	r3, #0
 801b18c:	73fb      	strb	r3, [r7, #15]
 801b18e:	e001      	b.n	801b194 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801b190:	23ff      	movs	r3, #255	; 0xff
 801b192:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801b194:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b198:	4618      	mov	r0, r3
 801b19a:	3710      	adds	r7, #16
 801b19c:	46bd      	mov	sp, r7
 801b19e:	bd80      	pop	{r7, pc}

0801b1a0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801b1a0:	b580      	push	{r7, lr}
 801b1a2:	b086      	sub	sp, #24
 801b1a4:	af00      	add	r7, sp, #0
 801b1a6:	60f8      	str	r0, [r7, #12]
 801b1a8:	60b9      	str	r1, [r7, #8]
 801b1aa:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801b1ac:	f7ee fe44 	bl	8009e38 <osKernelGetTickCount>
 801b1b0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	d013      	beq.n	801b1e0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801b1b8:	68fb      	ldr	r3, [r7, #12]
 801b1ba:	6818      	ldr	r0, [r3, #0]
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	2200      	movs	r2, #0
 801b1c0:	68b9      	ldr	r1, [r7, #8]
 801b1c2:	f7ef fa21 	bl	800a608 <osMessageQueueGet>
 801b1c6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801b1c8:	693b      	ldr	r3, [r7, #16]
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	d105      	bne.n	801b1da <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801b1ce:	f7ee fe33 	bl	8009e38 <osKernelGetTickCount>
 801b1d2:	4602      	mov	r2, r0
 801b1d4:	697b      	ldr	r3, [r7, #20]
 801b1d6:	1ad3      	subs	r3, r2, r3
 801b1d8:	e00f      	b.n	801b1fa <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b1da:	f04f 33ff 	mov.w	r3, #4294967295
 801b1de:	e00c      	b.n	801b1fa <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801b1e0:	68fb      	ldr	r3, [r7, #12]
 801b1e2:	6818      	ldr	r0, [r3, #0]
 801b1e4:	f04f 33ff 	mov.w	r3, #4294967295
 801b1e8:	2200      	movs	r2, #0
 801b1ea:	68b9      	ldr	r1, [r7, #8]
 801b1ec:	f7ef fa0c 	bl	800a608 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801b1f0:	f7ee fe22 	bl	8009e38 <osKernelGetTickCount>
 801b1f4:	4602      	mov	r2, r0
 801b1f6:	697b      	ldr	r3, [r7, #20]
 801b1f8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	3718      	adds	r7, #24
 801b1fe:	46bd      	mov	sp, r7
 801b200:	bd80      	pop	{r7, pc}

0801b202 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801b202:	b580      	push	{r7, lr}
 801b204:	b082      	sub	sp, #8
 801b206:	af00      	add	r7, sp, #0
 801b208:	6078      	str	r0, [r7, #4]
 801b20a:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	6818      	ldr	r0, [r3, #0]
 801b210:	2300      	movs	r3, #0
 801b212:	2200      	movs	r2, #0
 801b214:	6839      	ldr	r1, [r7, #0]
 801b216:	f7ef f9f7 	bl	800a608 <osMessageQueueGet>
 801b21a:	4603      	mov	r3, r0
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d101      	bne.n	801b224 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801b220:	2300      	movs	r3, #0
 801b222:	e001      	b.n	801b228 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801b224:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801b228:	4618      	mov	r0, r3
 801b22a:	3708      	adds	r7, #8
 801b22c:	46bd      	mov	sp, r7
 801b22e:	bd80      	pop	{r7, pc}

0801b230 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801b230:	b480      	push	{r7}
 801b232:	b083      	sub	sp, #12
 801b234:	af00      	add	r7, sp, #0
 801b236:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d101      	bne.n	801b244 <sys_mbox_valid+0x14>
    return 0;
 801b240:	2300      	movs	r3, #0
 801b242:	e000      	b.n	801b246 <sys_mbox_valid+0x16>
  else
    return 1;
 801b244:	2301      	movs	r3, #1
}
 801b246:	4618      	mov	r0, r3
 801b248:	370c      	adds	r7, #12
 801b24a:	46bd      	mov	sp, r7
 801b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b250:	4770      	bx	lr

0801b252 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801b252:	b480      	push	{r7}
 801b254:	b083      	sub	sp, #12
 801b256:	af00      	add	r7, sp, #0
 801b258:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	2200      	movs	r2, #0
 801b25e:	601a      	str	r2, [r3, #0]
}
 801b260:	bf00      	nop
 801b262:	370c      	adds	r7, #12
 801b264:	46bd      	mov	sp, r7
 801b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b26a:	4770      	bx	lr

0801b26c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801b26c:	b580      	push	{r7, lr}
 801b26e:	b082      	sub	sp, #8
 801b270:	af00      	add	r7, sp, #0
 801b272:	6078      	str	r0, [r7, #4]
 801b274:	460b      	mov	r3, r1
 801b276:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801b278:	78fb      	ldrb	r3, [r7, #3]
 801b27a:	2200      	movs	r2, #0
 801b27c:	4619      	mov	r1, r3
 801b27e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b282:	f7ee ffa9 	bl	800a1d8 <osSemaphoreNew>
 801b286:	4602      	mov	r2, r0
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	2b00      	cmp	r3, #0
 801b292:	d102      	bne.n	801b29a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b294:	f04f 33ff 	mov.w	r3, #4294967295
 801b298:	e009      	b.n	801b2ae <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801b29a:	78fb      	ldrb	r3, [r7, #3]
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d105      	bne.n	801b2ac <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	2100      	movs	r1, #0
 801b2a6:	4618      	mov	r0, r3
 801b2a8:	f7ef f820 	bl	800a2ec <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801b2ac:	2300      	movs	r3, #0
}
 801b2ae:	4618      	mov	r0, r3
 801b2b0:	3708      	adds	r7, #8
 801b2b2:	46bd      	mov	sp, r7
 801b2b4:	bd80      	pop	{r7, pc}

0801b2b6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801b2b6:	b580      	push	{r7, lr}
 801b2b8:	b084      	sub	sp, #16
 801b2ba:	af00      	add	r7, sp, #0
 801b2bc:	6078      	str	r0, [r7, #4]
 801b2be:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801b2c0:	f7ee fdba 	bl	8009e38 <osKernelGetTickCount>
 801b2c4:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801b2c6:	683b      	ldr	r3, [r7, #0]
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d011      	beq.n	801b2f0 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	6839      	ldr	r1, [r7, #0]
 801b2d2:	4618      	mov	r0, r3
 801b2d4:	f7ef f80a 	bl	800a2ec <osSemaphoreAcquire>
 801b2d8:	4603      	mov	r3, r0
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d105      	bne.n	801b2ea <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801b2de:	f7ee fdab 	bl	8009e38 <osKernelGetTickCount>
 801b2e2:	4602      	mov	r2, r0
 801b2e4:	68fb      	ldr	r3, [r7, #12]
 801b2e6:	1ad3      	subs	r3, r2, r3
 801b2e8:	e012      	b.n	801b310 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b2ea:	f04f 33ff 	mov.w	r3, #4294967295
 801b2ee:	e00f      	b.n	801b310 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801b2f0:	bf00      	nop
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	f04f 31ff 	mov.w	r1, #4294967295
 801b2fa:	4618      	mov	r0, r3
 801b2fc:	f7ee fff6 	bl	800a2ec <osSemaphoreAcquire>
 801b300:	4603      	mov	r3, r0
 801b302:	2b00      	cmp	r3, #0
 801b304:	d1f5      	bne.n	801b2f2 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801b306:	f7ee fd97 	bl	8009e38 <osKernelGetTickCount>
 801b30a:	4602      	mov	r2, r0
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801b310:	4618      	mov	r0, r3
 801b312:	3710      	adds	r7, #16
 801b314:	46bd      	mov	sp, r7
 801b316:	bd80      	pop	{r7, pc}

0801b318 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801b318:	b580      	push	{r7, lr}
 801b31a:	b082      	sub	sp, #8
 801b31c:	af00      	add	r7, sp, #0
 801b31e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	4618      	mov	r0, r3
 801b326:	f7ef f833 	bl	800a390 <osSemaphoreRelease>
}
 801b32a:	bf00      	nop
 801b32c:	3708      	adds	r7, #8
 801b32e:	46bd      	mov	sp, r7
 801b330:	bd80      	pop	{r7, pc}

0801b332 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801b332:	b580      	push	{r7, lr}
 801b334:	b082      	sub	sp, #8
 801b336:	af00      	add	r7, sp, #0
 801b338:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	681b      	ldr	r3, [r3, #0]
 801b33e:	4618      	mov	r0, r3
 801b340:	f7ef f86a 	bl	800a418 <osSemaphoreDelete>
}
 801b344:	bf00      	nop
 801b346:	3708      	adds	r7, #8
 801b348:	46bd      	mov	sp, r7
 801b34a:	bd80      	pop	{r7, pc}

0801b34c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801b34c:	b480      	push	{r7}
 801b34e:	b083      	sub	sp, #12
 801b350:	af00      	add	r7, sp, #0
 801b352:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d101      	bne.n	801b360 <sys_sem_valid+0x14>
    return 0;
 801b35c:	2300      	movs	r3, #0
 801b35e:	e000      	b.n	801b362 <sys_sem_valid+0x16>
  else
    return 1;
 801b360:	2301      	movs	r3, #1
}
 801b362:	4618      	mov	r0, r3
 801b364:	370c      	adds	r7, #12
 801b366:	46bd      	mov	sp, r7
 801b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b36c:	4770      	bx	lr

0801b36e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801b36e:	b480      	push	{r7}
 801b370:	b083      	sub	sp, #12
 801b372:	af00      	add	r7, sp, #0
 801b374:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	2200      	movs	r2, #0
 801b37a:	601a      	str	r2, [r3, #0]
}
 801b37c:	bf00      	nop
 801b37e:	370c      	adds	r7, #12
 801b380:	46bd      	mov	sp, r7
 801b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b386:	4770      	bx	lr

0801b388 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801b388:	b580      	push	{r7, lr}
 801b38a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801b38c:	2000      	movs	r0, #0
 801b38e:	f7ee fe15 	bl	8009fbc <osMutexNew>
 801b392:	4603      	mov	r3, r0
 801b394:	4a01      	ldr	r2, [pc, #4]	; (801b39c <sys_init+0x14>)
 801b396:	6013      	str	r3, [r2, #0]
#endif
}
 801b398:	bf00      	nop
 801b39a:	bd80      	pop	{r7, pc}
 801b39c:	2405e9e4 	.word	0x2405e9e4

0801b3a0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b3a0:	b580      	push	{r7, lr}
 801b3a2:	b082      	sub	sp, #8
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801b3a8:	2000      	movs	r0, #0
 801b3aa:	f7ee fe07 	bl	8009fbc <osMutexNew>
 801b3ae:	4602      	mov	r2, r0
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d102      	bne.n	801b3c2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b3bc:	f04f 33ff 	mov.w	r3, #4294967295
 801b3c0:	e000      	b.n	801b3c4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b3c2:	2300      	movs	r3, #0
}
 801b3c4:	4618      	mov	r0, r3
 801b3c6:	3708      	adds	r7, #8
 801b3c8:	46bd      	mov	sp, r7
 801b3ca:	bd80      	pop	{r7, pc}

0801b3cc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b3cc:	b580      	push	{r7, lr}
 801b3ce:	b082      	sub	sp, #8
 801b3d0:	af00      	add	r7, sp, #0
 801b3d2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	681b      	ldr	r3, [r3, #0]
 801b3d8:	f04f 31ff 	mov.w	r1, #4294967295
 801b3dc:	4618      	mov	r0, r3
 801b3de:	f7ee fe73 	bl	800a0c8 <osMutexAcquire>
#endif
}
 801b3e2:	bf00      	nop
 801b3e4:	3708      	adds	r7, #8
 801b3e6:	46bd      	mov	sp, r7
 801b3e8:	bd80      	pop	{r7, pc}

0801b3ea <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b3ea:	b580      	push	{r7, lr}
 801b3ec:	b082      	sub	sp, #8
 801b3ee:	af00      	add	r7, sp, #0
 801b3f0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	681b      	ldr	r3, [r3, #0]
 801b3f6:	4618      	mov	r0, r3
 801b3f8:	f7ee feb1 	bl	800a15e <osMutexRelease>
}
 801b3fc:	bf00      	nop
 801b3fe:	3708      	adds	r7, #8
 801b400:	46bd      	mov	sp, r7
 801b402:	bd80      	pop	{r7, pc}

0801b404 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b404:	b580      	push	{r7, lr}
 801b406:	b08e      	sub	sp, #56	; 0x38
 801b408:	af00      	add	r7, sp, #0
 801b40a:	60f8      	str	r0, [r7, #12]
 801b40c:	60b9      	str	r1, [r7, #8]
 801b40e:	607a      	str	r2, [r7, #4]
 801b410:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801b412:	f107 0314 	add.w	r3, r7, #20
 801b416:	2224      	movs	r2, #36	; 0x24
 801b418:	2100      	movs	r1, #0
 801b41a:	4618      	mov	r0, r3
 801b41c:	f000 f985 	bl	801b72a <memset>
 801b420:	68fb      	ldr	r3, [r7, #12]
 801b422:	617b      	str	r3, [r7, #20]
 801b424:	683b      	ldr	r3, [r7, #0]
 801b426:	62bb      	str	r3, [r7, #40]	; 0x28
 801b428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b42a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801b42c:	f107 0314 	add.w	r3, r7, #20
 801b430:	461a      	mov	r2, r3
 801b432:	6879      	ldr	r1, [r7, #4]
 801b434:	68b8      	ldr	r0, [r7, #8]
 801b436:	f7ee fd14 	bl	8009e62 <osThreadNew>
 801b43a:	4603      	mov	r3, r0
#endif
}
 801b43c:	4618      	mov	r0, r3
 801b43e:	3738      	adds	r7, #56	; 0x38
 801b440:	46bd      	mov	sp, r7
 801b442:	bd80      	pop	{r7, pc}

0801b444 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b444:	b580      	push	{r7, lr}
 801b446:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801b448:	4b04      	ldr	r3, [pc, #16]	; (801b45c <sys_arch_protect+0x18>)
 801b44a:	681b      	ldr	r3, [r3, #0]
 801b44c:	f04f 31ff 	mov.w	r1, #4294967295
 801b450:	4618      	mov	r0, r3
 801b452:	f7ee fe39 	bl	800a0c8 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801b456:	2301      	movs	r3, #1
}
 801b458:	4618      	mov	r0, r3
 801b45a:	bd80      	pop	{r7, pc}
 801b45c:	2405e9e4 	.word	0x2405e9e4

0801b460 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b460:	b580      	push	{r7, lr}
 801b462:	b082      	sub	sp, #8
 801b464:	af00      	add	r7, sp, #0
 801b466:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b468:	4b04      	ldr	r3, [pc, #16]	; (801b47c <sys_arch_unprotect+0x1c>)
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	4618      	mov	r0, r3
 801b46e:	f7ee fe76 	bl	800a15e <osMutexRelease>
}
 801b472:	bf00      	nop
 801b474:	3708      	adds	r7, #8
 801b476:	46bd      	mov	sp, r7
 801b478:	bd80      	pop	{r7, pc}
 801b47a:	bf00      	nop
 801b47c:	2405e9e4 	.word	0x2405e9e4

0801b480 <std>:
 801b480:	2300      	movs	r3, #0
 801b482:	b510      	push	{r4, lr}
 801b484:	4604      	mov	r4, r0
 801b486:	e9c0 3300 	strd	r3, r3, [r0]
 801b48a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b48e:	6083      	str	r3, [r0, #8]
 801b490:	8181      	strh	r1, [r0, #12]
 801b492:	6643      	str	r3, [r0, #100]	; 0x64
 801b494:	81c2      	strh	r2, [r0, #14]
 801b496:	6183      	str	r3, [r0, #24]
 801b498:	4619      	mov	r1, r3
 801b49a:	2208      	movs	r2, #8
 801b49c:	305c      	adds	r0, #92	; 0x5c
 801b49e:	f000 f944 	bl	801b72a <memset>
 801b4a2:	4b05      	ldr	r3, [pc, #20]	; (801b4b8 <std+0x38>)
 801b4a4:	6263      	str	r3, [r4, #36]	; 0x24
 801b4a6:	4b05      	ldr	r3, [pc, #20]	; (801b4bc <std+0x3c>)
 801b4a8:	62a3      	str	r3, [r4, #40]	; 0x28
 801b4aa:	4b05      	ldr	r3, [pc, #20]	; (801b4c0 <std+0x40>)
 801b4ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b4ae:	4b05      	ldr	r3, [pc, #20]	; (801b4c4 <std+0x44>)
 801b4b0:	6224      	str	r4, [r4, #32]
 801b4b2:	6323      	str	r3, [r4, #48]	; 0x30
 801b4b4:	bd10      	pop	{r4, pc}
 801b4b6:	bf00      	nop
 801b4b8:	0801ba45 	.word	0x0801ba45
 801b4bc:	0801ba67 	.word	0x0801ba67
 801b4c0:	0801ba9f 	.word	0x0801ba9f
 801b4c4:	0801bac3 	.word	0x0801bac3

0801b4c8 <_cleanup_r>:
 801b4c8:	4901      	ldr	r1, [pc, #4]	; (801b4d0 <_cleanup_r+0x8>)
 801b4ca:	f000 b8af 	b.w	801b62c <_fwalk_reent>
 801b4ce:	bf00      	nop
 801b4d0:	0801bc7d 	.word	0x0801bc7d

0801b4d4 <__sfmoreglue>:
 801b4d4:	b570      	push	{r4, r5, r6, lr}
 801b4d6:	2268      	movs	r2, #104	; 0x68
 801b4d8:	1e4d      	subs	r5, r1, #1
 801b4da:	4355      	muls	r5, r2
 801b4dc:	460e      	mov	r6, r1
 801b4de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b4e2:	f000 f94b 	bl	801b77c <_malloc_r>
 801b4e6:	4604      	mov	r4, r0
 801b4e8:	b140      	cbz	r0, 801b4fc <__sfmoreglue+0x28>
 801b4ea:	2100      	movs	r1, #0
 801b4ec:	e9c0 1600 	strd	r1, r6, [r0]
 801b4f0:	300c      	adds	r0, #12
 801b4f2:	60a0      	str	r0, [r4, #8]
 801b4f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b4f8:	f000 f917 	bl	801b72a <memset>
 801b4fc:	4620      	mov	r0, r4
 801b4fe:	bd70      	pop	{r4, r5, r6, pc}

0801b500 <__sfp_lock_acquire>:
 801b500:	4801      	ldr	r0, [pc, #4]	; (801b508 <__sfp_lock_acquire+0x8>)
 801b502:	f000 b8d8 	b.w	801b6b6 <__retarget_lock_acquire_recursive>
 801b506:	bf00      	nop
 801b508:	2405e9e9 	.word	0x2405e9e9

0801b50c <__sfp_lock_release>:
 801b50c:	4801      	ldr	r0, [pc, #4]	; (801b514 <__sfp_lock_release+0x8>)
 801b50e:	f000 b8d3 	b.w	801b6b8 <__retarget_lock_release_recursive>
 801b512:	bf00      	nop
 801b514:	2405e9e9 	.word	0x2405e9e9

0801b518 <__sinit_lock_acquire>:
 801b518:	4801      	ldr	r0, [pc, #4]	; (801b520 <__sinit_lock_acquire+0x8>)
 801b51a:	f000 b8cc 	b.w	801b6b6 <__retarget_lock_acquire_recursive>
 801b51e:	bf00      	nop
 801b520:	2405e9ea 	.word	0x2405e9ea

0801b524 <__sinit_lock_release>:
 801b524:	4801      	ldr	r0, [pc, #4]	; (801b52c <__sinit_lock_release+0x8>)
 801b526:	f000 b8c7 	b.w	801b6b8 <__retarget_lock_release_recursive>
 801b52a:	bf00      	nop
 801b52c:	2405e9ea 	.word	0x2405e9ea

0801b530 <__sinit>:
 801b530:	b510      	push	{r4, lr}
 801b532:	4604      	mov	r4, r0
 801b534:	f7ff fff0 	bl	801b518 <__sinit_lock_acquire>
 801b538:	69a3      	ldr	r3, [r4, #24]
 801b53a:	b11b      	cbz	r3, 801b544 <__sinit+0x14>
 801b53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b540:	f7ff bff0 	b.w	801b524 <__sinit_lock_release>
 801b544:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b548:	6523      	str	r3, [r4, #80]	; 0x50
 801b54a:	4b13      	ldr	r3, [pc, #76]	; (801b598 <__sinit+0x68>)
 801b54c:	4a13      	ldr	r2, [pc, #76]	; (801b59c <__sinit+0x6c>)
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	62a2      	str	r2, [r4, #40]	; 0x28
 801b552:	42a3      	cmp	r3, r4
 801b554:	bf04      	itt	eq
 801b556:	2301      	moveq	r3, #1
 801b558:	61a3      	streq	r3, [r4, #24]
 801b55a:	4620      	mov	r0, r4
 801b55c:	f000 f820 	bl	801b5a0 <__sfp>
 801b560:	6060      	str	r0, [r4, #4]
 801b562:	4620      	mov	r0, r4
 801b564:	f000 f81c 	bl	801b5a0 <__sfp>
 801b568:	60a0      	str	r0, [r4, #8]
 801b56a:	4620      	mov	r0, r4
 801b56c:	f000 f818 	bl	801b5a0 <__sfp>
 801b570:	2200      	movs	r2, #0
 801b572:	60e0      	str	r0, [r4, #12]
 801b574:	2104      	movs	r1, #4
 801b576:	6860      	ldr	r0, [r4, #4]
 801b578:	f7ff ff82 	bl	801b480 <std>
 801b57c:	68a0      	ldr	r0, [r4, #8]
 801b57e:	2201      	movs	r2, #1
 801b580:	2109      	movs	r1, #9
 801b582:	f7ff ff7d 	bl	801b480 <std>
 801b586:	68e0      	ldr	r0, [r4, #12]
 801b588:	2202      	movs	r2, #2
 801b58a:	2112      	movs	r1, #18
 801b58c:	f7ff ff78 	bl	801b480 <std>
 801b590:	2301      	movs	r3, #1
 801b592:	61a3      	str	r3, [r4, #24]
 801b594:	e7d2      	b.n	801b53c <__sinit+0xc>
 801b596:	bf00      	nop
 801b598:	080202f0 	.word	0x080202f0
 801b59c:	0801b4c9 	.word	0x0801b4c9

0801b5a0 <__sfp>:
 801b5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5a2:	4607      	mov	r7, r0
 801b5a4:	f7ff ffac 	bl	801b500 <__sfp_lock_acquire>
 801b5a8:	4b1e      	ldr	r3, [pc, #120]	; (801b624 <__sfp+0x84>)
 801b5aa:	681e      	ldr	r6, [r3, #0]
 801b5ac:	69b3      	ldr	r3, [r6, #24]
 801b5ae:	b913      	cbnz	r3, 801b5b6 <__sfp+0x16>
 801b5b0:	4630      	mov	r0, r6
 801b5b2:	f7ff ffbd 	bl	801b530 <__sinit>
 801b5b6:	3648      	adds	r6, #72	; 0x48
 801b5b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b5bc:	3b01      	subs	r3, #1
 801b5be:	d503      	bpl.n	801b5c8 <__sfp+0x28>
 801b5c0:	6833      	ldr	r3, [r6, #0]
 801b5c2:	b30b      	cbz	r3, 801b608 <__sfp+0x68>
 801b5c4:	6836      	ldr	r6, [r6, #0]
 801b5c6:	e7f7      	b.n	801b5b8 <__sfp+0x18>
 801b5c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b5cc:	b9d5      	cbnz	r5, 801b604 <__sfp+0x64>
 801b5ce:	4b16      	ldr	r3, [pc, #88]	; (801b628 <__sfp+0x88>)
 801b5d0:	60e3      	str	r3, [r4, #12]
 801b5d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b5d6:	6665      	str	r5, [r4, #100]	; 0x64
 801b5d8:	f000 f86c 	bl	801b6b4 <__retarget_lock_init_recursive>
 801b5dc:	f7ff ff96 	bl	801b50c <__sfp_lock_release>
 801b5e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b5e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b5e8:	6025      	str	r5, [r4, #0]
 801b5ea:	61a5      	str	r5, [r4, #24]
 801b5ec:	2208      	movs	r2, #8
 801b5ee:	4629      	mov	r1, r5
 801b5f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b5f4:	f000 f899 	bl	801b72a <memset>
 801b5f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b5fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b600:	4620      	mov	r0, r4
 801b602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b604:	3468      	adds	r4, #104	; 0x68
 801b606:	e7d9      	b.n	801b5bc <__sfp+0x1c>
 801b608:	2104      	movs	r1, #4
 801b60a:	4638      	mov	r0, r7
 801b60c:	f7ff ff62 	bl	801b4d4 <__sfmoreglue>
 801b610:	4604      	mov	r4, r0
 801b612:	6030      	str	r0, [r6, #0]
 801b614:	2800      	cmp	r0, #0
 801b616:	d1d5      	bne.n	801b5c4 <__sfp+0x24>
 801b618:	f7ff ff78 	bl	801b50c <__sfp_lock_release>
 801b61c:	230c      	movs	r3, #12
 801b61e:	603b      	str	r3, [r7, #0]
 801b620:	e7ee      	b.n	801b600 <__sfp+0x60>
 801b622:	bf00      	nop
 801b624:	080202f0 	.word	0x080202f0
 801b628:	ffff0001 	.word	0xffff0001

0801b62c <_fwalk_reent>:
 801b62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b630:	4606      	mov	r6, r0
 801b632:	4688      	mov	r8, r1
 801b634:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b638:	2700      	movs	r7, #0
 801b63a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b63e:	f1b9 0901 	subs.w	r9, r9, #1
 801b642:	d505      	bpl.n	801b650 <_fwalk_reent+0x24>
 801b644:	6824      	ldr	r4, [r4, #0]
 801b646:	2c00      	cmp	r4, #0
 801b648:	d1f7      	bne.n	801b63a <_fwalk_reent+0xe>
 801b64a:	4638      	mov	r0, r7
 801b64c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b650:	89ab      	ldrh	r3, [r5, #12]
 801b652:	2b01      	cmp	r3, #1
 801b654:	d907      	bls.n	801b666 <_fwalk_reent+0x3a>
 801b656:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b65a:	3301      	adds	r3, #1
 801b65c:	d003      	beq.n	801b666 <_fwalk_reent+0x3a>
 801b65e:	4629      	mov	r1, r5
 801b660:	4630      	mov	r0, r6
 801b662:	47c0      	blx	r8
 801b664:	4307      	orrs	r7, r0
 801b666:	3568      	adds	r5, #104	; 0x68
 801b668:	e7e9      	b.n	801b63e <_fwalk_reent+0x12>
	...

0801b66c <__libc_init_array>:
 801b66c:	b570      	push	{r4, r5, r6, lr}
 801b66e:	4d0d      	ldr	r5, [pc, #52]	; (801b6a4 <__libc_init_array+0x38>)
 801b670:	4c0d      	ldr	r4, [pc, #52]	; (801b6a8 <__libc_init_array+0x3c>)
 801b672:	1b64      	subs	r4, r4, r5
 801b674:	10a4      	asrs	r4, r4, #2
 801b676:	2600      	movs	r6, #0
 801b678:	42a6      	cmp	r6, r4
 801b67a:	d109      	bne.n	801b690 <__libc_init_array+0x24>
 801b67c:	4d0b      	ldr	r5, [pc, #44]	; (801b6ac <__libc_init_array+0x40>)
 801b67e:	4c0c      	ldr	r4, [pc, #48]	; (801b6b0 <__libc_init_array+0x44>)
 801b680:	f001 f9e2 	bl	801ca48 <_init>
 801b684:	1b64      	subs	r4, r4, r5
 801b686:	10a4      	asrs	r4, r4, #2
 801b688:	2600      	movs	r6, #0
 801b68a:	42a6      	cmp	r6, r4
 801b68c:	d105      	bne.n	801b69a <__libc_init_array+0x2e>
 801b68e:	bd70      	pop	{r4, r5, r6, pc}
 801b690:	f855 3b04 	ldr.w	r3, [r5], #4
 801b694:	4798      	blx	r3
 801b696:	3601      	adds	r6, #1
 801b698:	e7ee      	b.n	801b678 <__libc_init_array+0xc>
 801b69a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b69e:	4798      	blx	r3
 801b6a0:	3601      	adds	r6, #1
 801b6a2:	e7f2      	b.n	801b68a <__libc_init_array+0x1e>
 801b6a4:	080203e0 	.word	0x080203e0
 801b6a8:	080203e0 	.word	0x080203e0
 801b6ac:	080203e0 	.word	0x080203e0
 801b6b0:	080203e4 	.word	0x080203e4

0801b6b4 <__retarget_lock_init_recursive>:
 801b6b4:	4770      	bx	lr

0801b6b6 <__retarget_lock_acquire_recursive>:
 801b6b6:	4770      	bx	lr

0801b6b8 <__retarget_lock_release_recursive>:
 801b6b8:	4770      	bx	lr

0801b6ba <memcmp>:
 801b6ba:	b510      	push	{r4, lr}
 801b6bc:	3901      	subs	r1, #1
 801b6be:	4402      	add	r2, r0
 801b6c0:	4290      	cmp	r0, r2
 801b6c2:	d101      	bne.n	801b6c8 <memcmp+0xe>
 801b6c4:	2000      	movs	r0, #0
 801b6c6:	e005      	b.n	801b6d4 <memcmp+0x1a>
 801b6c8:	7803      	ldrb	r3, [r0, #0]
 801b6ca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b6ce:	42a3      	cmp	r3, r4
 801b6d0:	d001      	beq.n	801b6d6 <memcmp+0x1c>
 801b6d2:	1b18      	subs	r0, r3, r4
 801b6d4:	bd10      	pop	{r4, pc}
 801b6d6:	3001      	adds	r0, #1
 801b6d8:	e7f2      	b.n	801b6c0 <memcmp+0x6>

0801b6da <memcpy>:
 801b6da:	440a      	add	r2, r1
 801b6dc:	4291      	cmp	r1, r2
 801b6de:	f100 33ff 	add.w	r3, r0, #4294967295
 801b6e2:	d100      	bne.n	801b6e6 <memcpy+0xc>
 801b6e4:	4770      	bx	lr
 801b6e6:	b510      	push	{r4, lr}
 801b6e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b6ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b6f0:	4291      	cmp	r1, r2
 801b6f2:	d1f9      	bne.n	801b6e8 <memcpy+0xe>
 801b6f4:	bd10      	pop	{r4, pc}

0801b6f6 <memmove>:
 801b6f6:	4288      	cmp	r0, r1
 801b6f8:	b510      	push	{r4, lr}
 801b6fa:	eb01 0402 	add.w	r4, r1, r2
 801b6fe:	d902      	bls.n	801b706 <memmove+0x10>
 801b700:	4284      	cmp	r4, r0
 801b702:	4623      	mov	r3, r4
 801b704:	d807      	bhi.n	801b716 <memmove+0x20>
 801b706:	1e43      	subs	r3, r0, #1
 801b708:	42a1      	cmp	r1, r4
 801b70a:	d008      	beq.n	801b71e <memmove+0x28>
 801b70c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b710:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b714:	e7f8      	b.n	801b708 <memmove+0x12>
 801b716:	4402      	add	r2, r0
 801b718:	4601      	mov	r1, r0
 801b71a:	428a      	cmp	r2, r1
 801b71c:	d100      	bne.n	801b720 <memmove+0x2a>
 801b71e:	bd10      	pop	{r4, pc}
 801b720:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b724:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b728:	e7f7      	b.n	801b71a <memmove+0x24>

0801b72a <memset>:
 801b72a:	4402      	add	r2, r0
 801b72c:	4603      	mov	r3, r0
 801b72e:	4293      	cmp	r3, r2
 801b730:	d100      	bne.n	801b734 <memset+0xa>
 801b732:	4770      	bx	lr
 801b734:	f803 1b01 	strb.w	r1, [r3], #1
 801b738:	e7f9      	b.n	801b72e <memset+0x4>
	...

0801b73c <sbrk_aligned>:
 801b73c:	b570      	push	{r4, r5, r6, lr}
 801b73e:	4e0e      	ldr	r6, [pc, #56]	; (801b778 <sbrk_aligned+0x3c>)
 801b740:	460c      	mov	r4, r1
 801b742:	6831      	ldr	r1, [r6, #0]
 801b744:	4605      	mov	r5, r0
 801b746:	b911      	cbnz	r1, 801b74e <sbrk_aligned+0x12>
 801b748:	f000 f94c 	bl	801b9e4 <_sbrk_r>
 801b74c:	6030      	str	r0, [r6, #0]
 801b74e:	4621      	mov	r1, r4
 801b750:	4628      	mov	r0, r5
 801b752:	f000 f947 	bl	801b9e4 <_sbrk_r>
 801b756:	1c43      	adds	r3, r0, #1
 801b758:	d00a      	beq.n	801b770 <sbrk_aligned+0x34>
 801b75a:	1cc4      	adds	r4, r0, #3
 801b75c:	f024 0403 	bic.w	r4, r4, #3
 801b760:	42a0      	cmp	r0, r4
 801b762:	d007      	beq.n	801b774 <sbrk_aligned+0x38>
 801b764:	1a21      	subs	r1, r4, r0
 801b766:	4628      	mov	r0, r5
 801b768:	f000 f93c 	bl	801b9e4 <_sbrk_r>
 801b76c:	3001      	adds	r0, #1
 801b76e:	d101      	bne.n	801b774 <sbrk_aligned+0x38>
 801b770:	f04f 34ff 	mov.w	r4, #4294967295
 801b774:	4620      	mov	r0, r4
 801b776:	bd70      	pop	{r4, r5, r6, pc}
 801b778:	2405e9f0 	.word	0x2405e9f0

0801b77c <_malloc_r>:
 801b77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b780:	1ccd      	adds	r5, r1, #3
 801b782:	f025 0503 	bic.w	r5, r5, #3
 801b786:	3508      	adds	r5, #8
 801b788:	2d0c      	cmp	r5, #12
 801b78a:	bf38      	it	cc
 801b78c:	250c      	movcc	r5, #12
 801b78e:	2d00      	cmp	r5, #0
 801b790:	4607      	mov	r7, r0
 801b792:	db01      	blt.n	801b798 <_malloc_r+0x1c>
 801b794:	42a9      	cmp	r1, r5
 801b796:	d905      	bls.n	801b7a4 <_malloc_r+0x28>
 801b798:	230c      	movs	r3, #12
 801b79a:	603b      	str	r3, [r7, #0]
 801b79c:	2600      	movs	r6, #0
 801b79e:	4630      	mov	r0, r6
 801b7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7a4:	4e2e      	ldr	r6, [pc, #184]	; (801b860 <_malloc_r+0xe4>)
 801b7a6:	f000 fad1 	bl	801bd4c <__malloc_lock>
 801b7aa:	6833      	ldr	r3, [r6, #0]
 801b7ac:	461c      	mov	r4, r3
 801b7ae:	bb34      	cbnz	r4, 801b7fe <_malloc_r+0x82>
 801b7b0:	4629      	mov	r1, r5
 801b7b2:	4638      	mov	r0, r7
 801b7b4:	f7ff ffc2 	bl	801b73c <sbrk_aligned>
 801b7b8:	1c43      	adds	r3, r0, #1
 801b7ba:	4604      	mov	r4, r0
 801b7bc:	d14d      	bne.n	801b85a <_malloc_r+0xde>
 801b7be:	6834      	ldr	r4, [r6, #0]
 801b7c0:	4626      	mov	r6, r4
 801b7c2:	2e00      	cmp	r6, #0
 801b7c4:	d140      	bne.n	801b848 <_malloc_r+0xcc>
 801b7c6:	6823      	ldr	r3, [r4, #0]
 801b7c8:	4631      	mov	r1, r6
 801b7ca:	4638      	mov	r0, r7
 801b7cc:	eb04 0803 	add.w	r8, r4, r3
 801b7d0:	f000 f908 	bl	801b9e4 <_sbrk_r>
 801b7d4:	4580      	cmp	r8, r0
 801b7d6:	d13a      	bne.n	801b84e <_malloc_r+0xd2>
 801b7d8:	6821      	ldr	r1, [r4, #0]
 801b7da:	3503      	adds	r5, #3
 801b7dc:	1a6d      	subs	r5, r5, r1
 801b7de:	f025 0503 	bic.w	r5, r5, #3
 801b7e2:	3508      	adds	r5, #8
 801b7e4:	2d0c      	cmp	r5, #12
 801b7e6:	bf38      	it	cc
 801b7e8:	250c      	movcc	r5, #12
 801b7ea:	4629      	mov	r1, r5
 801b7ec:	4638      	mov	r0, r7
 801b7ee:	f7ff ffa5 	bl	801b73c <sbrk_aligned>
 801b7f2:	3001      	adds	r0, #1
 801b7f4:	d02b      	beq.n	801b84e <_malloc_r+0xd2>
 801b7f6:	6823      	ldr	r3, [r4, #0]
 801b7f8:	442b      	add	r3, r5
 801b7fa:	6023      	str	r3, [r4, #0]
 801b7fc:	e00e      	b.n	801b81c <_malloc_r+0xa0>
 801b7fe:	6822      	ldr	r2, [r4, #0]
 801b800:	1b52      	subs	r2, r2, r5
 801b802:	d41e      	bmi.n	801b842 <_malloc_r+0xc6>
 801b804:	2a0b      	cmp	r2, #11
 801b806:	d916      	bls.n	801b836 <_malloc_r+0xba>
 801b808:	1961      	adds	r1, r4, r5
 801b80a:	42a3      	cmp	r3, r4
 801b80c:	6025      	str	r5, [r4, #0]
 801b80e:	bf18      	it	ne
 801b810:	6059      	strne	r1, [r3, #4]
 801b812:	6863      	ldr	r3, [r4, #4]
 801b814:	bf08      	it	eq
 801b816:	6031      	streq	r1, [r6, #0]
 801b818:	5162      	str	r2, [r4, r5]
 801b81a:	604b      	str	r3, [r1, #4]
 801b81c:	4638      	mov	r0, r7
 801b81e:	f104 060b 	add.w	r6, r4, #11
 801b822:	f000 fa99 	bl	801bd58 <__malloc_unlock>
 801b826:	f026 0607 	bic.w	r6, r6, #7
 801b82a:	1d23      	adds	r3, r4, #4
 801b82c:	1af2      	subs	r2, r6, r3
 801b82e:	d0b6      	beq.n	801b79e <_malloc_r+0x22>
 801b830:	1b9b      	subs	r3, r3, r6
 801b832:	50a3      	str	r3, [r4, r2]
 801b834:	e7b3      	b.n	801b79e <_malloc_r+0x22>
 801b836:	6862      	ldr	r2, [r4, #4]
 801b838:	42a3      	cmp	r3, r4
 801b83a:	bf0c      	ite	eq
 801b83c:	6032      	streq	r2, [r6, #0]
 801b83e:	605a      	strne	r2, [r3, #4]
 801b840:	e7ec      	b.n	801b81c <_malloc_r+0xa0>
 801b842:	4623      	mov	r3, r4
 801b844:	6864      	ldr	r4, [r4, #4]
 801b846:	e7b2      	b.n	801b7ae <_malloc_r+0x32>
 801b848:	4634      	mov	r4, r6
 801b84a:	6876      	ldr	r6, [r6, #4]
 801b84c:	e7b9      	b.n	801b7c2 <_malloc_r+0x46>
 801b84e:	230c      	movs	r3, #12
 801b850:	603b      	str	r3, [r7, #0]
 801b852:	4638      	mov	r0, r7
 801b854:	f000 fa80 	bl	801bd58 <__malloc_unlock>
 801b858:	e7a1      	b.n	801b79e <_malloc_r+0x22>
 801b85a:	6025      	str	r5, [r4, #0]
 801b85c:	e7de      	b.n	801b81c <_malloc_r+0xa0>
 801b85e:	bf00      	nop
 801b860:	2405e9ec 	.word	0x2405e9ec

0801b864 <iprintf>:
 801b864:	b40f      	push	{r0, r1, r2, r3}
 801b866:	4b0a      	ldr	r3, [pc, #40]	; (801b890 <iprintf+0x2c>)
 801b868:	b513      	push	{r0, r1, r4, lr}
 801b86a:	681c      	ldr	r4, [r3, #0]
 801b86c:	b124      	cbz	r4, 801b878 <iprintf+0x14>
 801b86e:	69a3      	ldr	r3, [r4, #24]
 801b870:	b913      	cbnz	r3, 801b878 <iprintf+0x14>
 801b872:	4620      	mov	r0, r4
 801b874:	f7ff fe5c 	bl	801b530 <__sinit>
 801b878:	ab05      	add	r3, sp, #20
 801b87a:	9a04      	ldr	r2, [sp, #16]
 801b87c:	68a1      	ldr	r1, [r4, #8]
 801b87e:	9301      	str	r3, [sp, #4]
 801b880:	4620      	mov	r0, r4
 801b882:	f000 fc41 	bl	801c108 <_vfiprintf_r>
 801b886:	b002      	add	sp, #8
 801b888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b88c:	b004      	add	sp, #16
 801b88e:	4770      	bx	lr
 801b890:	24000034 	.word	0x24000034

0801b894 <rand>:
 801b894:	4b16      	ldr	r3, [pc, #88]	; (801b8f0 <rand+0x5c>)
 801b896:	b510      	push	{r4, lr}
 801b898:	681c      	ldr	r4, [r3, #0]
 801b89a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b89c:	b9b3      	cbnz	r3, 801b8cc <rand+0x38>
 801b89e:	2018      	movs	r0, #24
 801b8a0:	f000 fa4c 	bl	801bd3c <malloc>
 801b8a4:	63a0      	str	r0, [r4, #56]	; 0x38
 801b8a6:	b928      	cbnz	r0, 801b8b4 <rand+0x20>
 801b8a8:	4602      	mov	r2, r0
 801b8aa:	4b12      	ldr	r3, [pc, #72]	; (801b8f4 <rand+0x60>)
 801b8ac:	4812      	ldr	r0, [pc, #72]	; (801b8f8 <rand+0x64>)
 801b8ae:	214e      	movs	r1, #78	; 0x4e
 801b8b0:	f000 f930 	bl	801bb14 <__assert_func>
 801b8b4:	4a11      	ldr	r2, [pc, #68]	; (801b8fc <rand+0x68>)
 801b8b6:	4b12      	ldr	r3, [pc, #72]	; (801b900 <rand+0x6c>)
 801b8b8:	e9c0 2300 	strd	r2, r3, [r0]
 801b8bc:	4b11      	ldr	r3, [pc, #68]	; (801b904 <rand+0x70>)
 801b8be:	6083      	str	r3, [r0, #8]
 801b8c0:	230b      	movs	r3, #11
 801b8c2:	8183      	strh	r3, [r0, #12]
 801b8c4:	2201      	movs	r2, #1
 801b8c6:	2300      	movs	r3, #0
 801b8c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b8cc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801b8ce:	4a0e      	ldr	r2, [pc, #56]	; (801b908 <rand+0x74>)
 801b8d0:	6920      	ldr	r0, [r4, #16]
 801b8d2:	6963      	ldr	r3, [r4, #20]
 801b8d4:	490d      	ldr	r1, [pc, #52]	; (801b90c <rand+0x78>)
 801b8d6:	4342      	muls	r2, r0
 801b8d8:	fb01 2203 	mla	r2, r1, r3, r2
 801b8dc:	fba0 0101 	umull	r0, r1, r0, r1
 801b8e0:	1c43      	adds	r3, r0, #1
 801b8e2:	eb42 0001 	adc.w	r0, r2, r1
 801b8e6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801b8ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b8ee:	bd10      	pop	{r4, pc}
 801b8f0:	24000034 	.word	0x24000034
 801b8f4:	080202f4 	.word	0x080202f4
 801b8f8:	0802030b 	.word	0x0802030b
 801b8fc:	abcd330e 	.word	0xabcd330e
 801b900:	e66d1234 	.word	0xe66d1234
 801b904:	0005deec 	.word	0x0005deec
 801b908:	5851f42d 	.word	0x5851f42d
 801b90c:	4c957f2d 	.word	0x4c957f2d

0801b910 <cleanup_glue>:
 801b910:	b538      	push	{r3, r4, r5, lr}
 801b912:	460c      	mov	r4, r1
 801b914:	6809      	ldr	r1, [r1, #0]
 801b916:	4605      	mov	r5, r0
 801b918:	b109      	cbz	r1, 801b91e <cleanup_glue+0xe>
 801b91a:	f7ff fff9 	bl	801b910 <cleanup_glue>
 801b91e:	4621      	mov	r1, r4
 801b920:	4628      	mov	r0, r5
 801b922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b926:	f000 ba1d 	b.w	801bd64 <_free_r>
	...

0801b92c <_reclaim_reent>:
 801b92c:	4b2c      	ldr	r3, [pc, #176]	; (801b9e0 <_reclaim_reent+0xb4>)
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	4283      	cmp	r3, r0
 801b932:	b570      	push	{r4, r5, r6, lr}
 801b934:	4604      	mov	r4, r0
 801b936:	d051      	beq.n	801b9dc <_reclaim_reent+0xb0>
 801b938:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b93a:	b143      	cbz	r3, 801b94e <_reclaim_reent+0x22>
 801b93c:	68db      	ldr	r3, [r3, #12]
 801b93e:	2b00      	cmp	r3, #0
 801b940:	d14a      	bne.n	801b9d8 <_reclaim_reent+0xac>
 801b942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b944:	6819      	ldr	r1, [r3, #0]
 801b946:	b111      	cbz	r1, 801b94e <_reclaim_reent+0x22>
 801b948:	4620      	mov	r0, r4
 801b94a:	f000 fa0b 	bl	801bd64 <_free_r>
 801b94e:	6961      	ldr	r1, [r4, #20]
 801b950:	b111      	cbz	r1, 801b958 <_reclaim_reent+0x2c>
 801b952:	4620      	mov	r0, r4
 801b954:	f000 fa06 	bl	801bd64 <_free_r>
 801b958:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b95a:	b111      	cbz	r1, 801b962 <_reclaim_reent+0x36>
 801b95c:	4620      	mov	r0, r4
 801b95e:	f000 fa01 	bl	801bd64 <_free_r>
 801b962:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b964:	b111      	cbz	r1, 801b96c <_reclaim_reent+0x40>
 801b966:	4620      	mov	r0, r4
 801b968:	f000 f9fc 	bl	801bd64 <_free_r>
 801b96c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b96e:	b111      	cbz	r1, 801b976 <_reclaim_reent+0x4a>
 801b970:	4620      	mov	r0, r4
 801b972:	f000 f9f7 	bl	801bd64 <_free_r>
 801b976:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b978:	b111      	cbz	r1, 801b980 <_reclaim_reent+0x54>
 801b97a:	4620      	mov	r0, r4
 801b97c:	f000 f9f2 	bl	801bd64 <_free_r>
 801b980:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b982:	b111      	cbz	r1, 801b98a <_reclaim_reent+0x5e>
 801b984:	4620      	mov	r0, r4
 801b986:	f000 f9ed 	bl	801bd64 <_free_r>
 801b98a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b98c:	b111      	cbz	r1, 801b994 <_reclaim_reent+0x68>
 801b98e:	4620      	mov	r0, r4
 801b990:	f000 f9e8 	bl	801bd64 <_free_r>
 801b994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b996:	b111      	cbz	r1, 801b99e <_reclaim_reent+0x72>
 801b998:	4620      	mov	r0, r4
 801b99a:	f000 f9e3 	bl	801bd64 <_free_r>
 801b99e:	69a3      	ldr	r3, [r4, #24]
 801b9a0:	b1e3      	cbz	r3, 801b9dc <_reclaim_reent+0xb0>
 801b9a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b9a4:	4620      	mov	r0, r4
 801b9a6:	4798      	blx	r3
 801b9a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b9aa:	b1b9      	cbz	r1, 801b9dc <_reclaim_reent+0xb0>
 801b9ac:	4620      	mov	r0, r4
 801b9ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b9b2:	f7ff bfad 	b.w	801b910 <cleanup_glue>
 801b9b6:	5949      	ldr	r1, [r1, r5]
 801b9b8:	b941      	cbnz	r1, 801b9cc <_reclaim_reent+0xa0>
 801b9ba:	3504      	adds	r5, #4
 801b9bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b9be:	2d80      	cmp	r5, #128	; 0x80
 801b9c0:	68d9      	ldr	r1, [r3, #12]
 801b9c2:	d1f8      	bne.n	801b9b6 <_reclaim_reent+0x8a>
 801b9c4:	4620      	mov	r0, r4
 801b9c6:	f000 f9cd 	bl	801bd64 <_free_r>
 801b9ca:	e7ba      	b.n	801b942 <_reclaim_reent+0x16>
 801b9cc:	680e      	ldr	r6, [r1, #0]
 801b9ce:	4620      	mov	r0, r4
 801b9d0:	f000 f9c8 	bl	801bd64 <_free_r>
 801b9d4:	4631      	mov	r1, r6
 801b9d6:	e7ef      	b.n	801b9b8 <_reclaim_reent+0x8c>
 801b9d8:	2500      	movs	r5, #0
 801b9da:	e7ef      	b.n	801b9bc <_reclaim_reent+0x90>
 801b9dc:	bd70      	pop	{r4, r5, r6, pc}
 801b9de:	bf00      	nop
 801b9e0:	24000034 	.word	0x24000034

0801b9e4 <_sbrk_r>:
 801b9e4:	b538      	push	{r3, r4, r5, lr}
 801b9e6:	4d06      	ldr	r5, [pc, #24]	; (801ba00 <_sbrk_r+0x1c>)
 801b9e8:	2300      	movs	r3, #0
 801b9ea:	4604      	mov	r4, r0
 801b9ec:	4608      	mov	r0, r1
 801b9ee:	602b      	str	r3, [r5, #0]
 801b9f0:	f7e5 fc2e 	bl	8001250 <_sbrk>
 801b9f4:	1c43      	adds	r3, r0, #1
 801b9f6:	d102      	bne.n	801b9fe <_sbrk_r+0x1a>
 801b9f8:	682b      	ldr	r3, [r5, #0]
 801b9fa:	b103      	cbz	r3, 801b9fe <_sbrk_r+0x1a>
 801b9fc:	6023      	str	r3, [r4, #0]
 801b9fe:	bd38      	pop	{r3, r4, r5, pc}
 801ba00:	2405e9f4 	.word	0x2405e9f4

0801ba04 <siprintf>:
 801ba04:	b40e      	push	{r1, r2, r3}
 801ba06:	b500      	push	{lr}
 801ba08:	b09c      	sub	sp, #112	; 0x70
 801ba0a:	ab1d      	add	r3, sp, #116	; 0x74
 801ba0c:	9002      	str	r0, [sp, #8]
 801ba0e:	9006      	str	r0, [sp, #24]
 801ba10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ba14:	4809      	ldr	r0, [pc, #36]	; (801ba3c <siprintf+0x38>)
 801ba16:	9107      	str	r1, [sp, #28]
 801ba18:	9104      	str	r1, [sp, #16]
 801ba1a:	4909      	ldr	r1, [pc, #36]	; (801ba40 <siprintf+0x3c>)
 801ba1c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ba20:	9105      	str	r1, [sp, #20]
 801ba22:	6800      	ldr	r0, [r0, #0]
 801ba24:	9301      	str	r3, [sp, #4]
 801ba26:	a902      	add	r1, sp, #8
 801ba28:	f000 fa44 	bl	801beb4 <_svfiprintf_r>
 801ba2c:	9b02      	ldr	r3, [sp, #8]
 801ba2e:	2200      	movs	r2, #0
 801ba30:	701a      	strb	r2, [r3, #0]
 801ba32:	b01c      	add	sp, #112	; 0x70
 801ba34:	f85d eb04 	ldr.w	lr, [sp], #4
 801ba38:	b003      	add	sp, #12
 801ba3a:	4770      	bx	lr
 801ba3c:	24000034 	.word	0x24000034
 801ba40:	ffff0208 	.word	0xffff0208

0801ba44 <__sread>:
 801ba44:	b510      	push	{r4, lr}
 801ba46:	460c      	mov	r4, r1
 801ba48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba4c:	f000 fe20 	bl	801c690 <_read_r>
 801ba50:	2800      	cmp	r0, #0
 801ba52:	bfab      	itete	ge
 801ba54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ba56:	89a3      	ldrhlt	r3, [r4, #12]
 801ba58:	181b      	addge	r3, r3, r0
 801ba5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ba5e:	bfac      	ite	ge
 801ba60:	6563      	strge	r3, [r4, #84]	; 0x54
 801ba62:	81a3      	strhlt	r3, [r4, #12]
 801ba64:	bd10      	pop	{r4, pc}

0801ba66 <__swrite>:
 801ba66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba6a:	461f      	mov	r7, r3
 801ba6c:	898b      	ldrh	r3, [r1, #12]
 801ba6e:	05db      	lsls	r3, r3, #23
 801ba70:	4605      	mov	r5, r0
 801ba72:	460c      	mov	r4, r1
 801ba74:	4616      	mov	r6, r2
 801ba76:	d505      	bpl.n	801ba84 <__swrite+0x1e>
 801ba78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba7c:	2302      	movs	r3, #2
 801ba7e:	2200      	movs	r2, #0
 801ba80:	f000 f94a 	bl	801bd18 <_lseek_r>
 801ba84:	89a3      	ldrh	r3, [r4, #12]
 801ba86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ba8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ba8e:	81a3      	strh	r3, [r4, #12]
 801ba90:	4632      	mov	r2, r6
 801ba92:	463b      	mov	r3, r7
 801ba94:	4628      	mov	r0, r5
 801ba96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ba9a:	f000 b829 	b.w	801baf0 <_write_r>

0801ba9e <__sseek>:
 801ba9e:	b510      	push	{r4, lr}
 801baa0:	460c      	mov	r4, r1
 801baa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801baa6:	f000 f937 	bl	801bd18 <_lseek_r>
 801baaa:	1c43      	adds	r3, r0, #1
 801baac:	89a3      	ldrh	r3, [r4, #12]
 801baae:	bf15      	itete	ne
 801bab0:	6560      	strne	r0, [r4, #84]	; 0x54
 801bab2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bab6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801baba:	81a3      	strheq	r3, [r4, #12]
 801babc:	bf18      	it	ne
 801babe:	81a3      	strhne	r3, [r4, #12]
 801bac0:	bd10      	pop	{r4, pc}

0801bac2 <__sclose>:
 801bac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bac6:	f000 b843 	b.w	801bb50 <_close_r>

0801baca <strncpy>:
 801baca:	b510      	push	{r4, lr}
 801bacc:	3901      	subs	r1, #1
 801bace:	4603      	mov	r3, r0
 801bad0:	b132      	cbz	r2, 801bae0 <strncpy+0x16>
 801bad2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801bad6:	f803 4b01 	strb.w	r4, [r3], #1
 801bada:	3a01      	subs	r2, #1
 801badc:	2c00      	cmp	r4, #0
 801bade:	d1f7      	bne.n	801bad0 <strncpy+0x6>
 801bae0:	441a      	add	r2, r3
 801bae2:	2100      	movs	r1, #0
 801bae4:	4293      	cmp	r3, r2
 801bae6:	d100      	bne.n	801baea <strncpy+0x20>
 801bae8:	bd10      	pop	{r4, pc}
 801baea:	f803 1b01 	strb.w	r1, [r3], #1
 801baee:	e7f9      	b.n	801bae4 <strncpy+0x1a>

0801baf0 <_write_r>:
 801baf0:	b538      	push	{r3, r4, r5, lr}
 801baf2:	4d07      	ldr	r5, [pc, #28]	; (801bb10 <_write_r+0x20>)
 801baf4:	4604      	mov	r4, r0
 801baf6:	4608      	mov	r0, r1
 801baf8:	4611      	mov	r1, r2
 801bafa:	2200      	movs	r2, #0
 801bafc:	602a      	str	r2, [r5, #0]
 801bafe:	461a      	mov	r2, r3
 801bb00:	f7e5 fb55 	bl	80011ae <_write>
 801bb04:	1c43      	adds	r3, r0, #1
 801bb06:	d102      	bne.n	801bb0e <_write_r+0x1e>
 801bb08:	682b      	ldr	r3, [r5, #0]
 801bb0a:	b103      	cbz	r3, 801bb0e <_write_r+0x1e>
 801bb0c:	6023      	str	r3, [r4, #0]
 801bb0e:	bd38      	pop	{r3, r4, r5, pc}
 801bb10:	2405e9f4 	.word	0x2405e9f4

0801bb14 <__assert_func>:
 801bb14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bb16:	4614      	mov	r4, r2
 801bb18:	461a      	mov	r2, r3
 801bb1a:	4b09      	ldr	r3, [pc, #36]	; (801bb40 <__assert_func+0x2c>)
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	4605      	mov	r5, r0
 801bb20:	68d8      	ldr	r0, [r3, #12]
 801bb22:	b14c      	cbz	r4, 801bb38 <__assert_func+0x24>
 801bb24:	4b07      	ldr	r3, [pc, #28]	; (801bb44 <__assert_func+0x30>)
 801bb26:	9100      	str	r1, [sp, #0]
 801bb28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bb2c:	4906      	ldr	r1, [pc, #24]	; (801bb48 <__assert_func+0x34>)
 801bb2e:	462b      	mov	r3, r5
 801bb30:	f000 f8e0 	bl	801bcf4 <fiprintf>
 801bb34:	f000 fe7e 	bl	801c834 <abort>
 801bb38:	4b04      	ldr	r3, [pc, #16]	; (801bb4c <__assert_func+0x38>)
 801bb3a:	461c      	mov	r4, r3
 801bb3c:	e7f3      	b.n	801bb26 <__assert_func+0x12>
 801bb3e:	bf00      	nop
 801bb40:	24000034 	.word	0x24000034
 801bb44:	08020366 	.word	0x08020366
 801bb48:	08020373 	.word	0x08020373
 801bb4c:	080203a1 	.word	0x080203a1

0801bb50 <_close_r>:
 801bb50:	b538      	push	{r3, r4, r5, lr}
 801bb52:	4d06      	ldr	r5, [pc, #24]	; (801bb6c <_close_r+0x1c>)
 801bb54:	2300      	movs	r3, #0
 801bb56:	4604      	mov	r4, r0
 801bb58:	4608      	mov	r0, r1
 801bb5a:	602b      	str	r3, [r5, #0]
 801bb5c:	f7e5 fb43 	bl	80011e6 <_close>
 801bb60:	1c43      	adds	r3, r0, #1
 801bb62:	d102      	bne.n	801bb6a <_close_r+0x1a>
 801bb64:	682b      	ldr	r3, [r5, #0]
 801bb66:	b103      	cbz	r3, 801bb6a <_close_r+0x1a>
 801bb68:	6023      	str	r3, [r4, #0]
 801bb6a:	bd38      	pop	{r3, r4, r5, pc}
 801bb6c:	2405e9f4 	.word	0x2405e9f4

0801bb70 <__sflush_r>:
 801bb70:	898a      	ldrh	r2, [r1, #12]
 801bb72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb76:	4605      	mov	r5, r0
 801bb78:	0710      	lsls	r0, r2, #28
 801bb7a:	460c      	mov	r4, r1
 801bb7c:	d458      	bmi.n	801bc30 <__sflush_r+0xc0>
 801bb7e:	684b      	ldr	r3, [r1, #4]
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	dc05      	bgt.n	801bb90 <__sflush_r+0x20>
 801bb84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	dc02      	bgt.n	801bb90 <__sflush_r+0x20>
 801bb8a:	2000      	movs	r0, #0
 801bb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bb92:	2e00      	cmp	r6, #0
 801bb94:	d0f9      	beq.n	801bb8a <__sflush_r+0x1a>
 801bb96:	2300      	movs	r3, #0
 801bb98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bb9c:	682f      	ldr	r7, [r5, #0]
 801bb9e:	602b      	str	r3, [r5, #0]
 801bba0:	d032      	beq.n	801bc08 <__sflush_r+0x98>
 801bba2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bba4:	89a3      	ldrh	r3, [r4, #12]
 801bba6:	075a      	lsls	r2, r3, #29
 801bba8:	d505      	bpl.n	801bbb6 <__sflush_r+0x46>
 801bbaa:	6863      	ldr	r3, [r4, #4]
 801bbac:	1ac0      	subs	r0, r0, r3
 801bbae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bbb0:	b10b      	cbz	r3, 801bbb6 <__sflush_r+0x46>
 801bbb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bbb4:	1ac0      	subs	r0, r0, r3
 801bbb6:	2300      	movs	r3, #0
 801bbb8:	4602      	mov	r2, r0
 801bbba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bbbc:	6a21      	ldr	r1, [r4, #32]
 801bbbe:	4628      	mov	r0, r5
 801bbc0:	47b0      	blx	r6
 801bbc2:	1c43      	adds	r3, r0, #1
 801bbc4:	89a3      	ldrh	r3, [r4, #12]
 801bbc6:	d106      	bne.n	801bbd6 <__sflush_r+0x66>
 801bbc8:	6829      	ldr	r1, [r5, #0]
 801bbca:	291d      	cmp	r1, #29
 801bbcc:	d82c      	bhi.n	801bc28 <__sflush_r+0xb8>
 801bbce:	4a2a      	ldr	r2, [pc, #168]	; (801bc78 <__sflush_r+0x108>)
 801bbd0:	40ca      	lsrs	r2, r1
 801bbd2:	07d6      	lsls	r6, r2, #31
 801bbd4:	d528      	bpl.n	801bc28 <__sflush_r+0xb8>
 801bbd6:	2200      	movs	r2, #0
 801bbd8:	6062      	str	r2, [r4, #4]
 801bbda:	04d9      	lsls	r1, r3, #19
 801bbdc:	6922      	ldr	r2, [r4, #16]
 801bbde:	6022      	str	r2, [r4, #0]
 801bbe0:	d504      	bpl.n	801bbec <__sflush_r+0x7c>
 801bbe2:	1c42      	adds	r2, r0, #1
 801bbe4:	d101      	bne.n	801bbea <__sflush_r+0x7a>
 801bbe6:	682b      	ldr	r3, [r5, #0]
 801bbe8:	b903      	cbnz	r3, 801bbec <__sflush_r+0x7c>
 801bbea:	6560      	str	r0, [r4, #84]	; 0x54
 801bbec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bbee:	602f      	str	r7, [r5, #0]
 801bbf0:	2900      	cmp	r1, #0
 801bbf2:	d0ca      	beq.n	801bb8a <__sflush_r+0x1a>
 801bbf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bbf8:	4299      	cmp	r1, r3
 801bbfa:	d002      	beq.n	801bc02 <__sflush_r+0x92>
 801bbfc:	4628      	mov	r0, r5
 801bbfe:	f000 f8b1 	bl	801bd64 <_free_r>
 801bc02:	2000      	movs	r0, #0
 801bc04:	6360      	str	r0, [r4, #52]	; 0x34
 801bc06:	e7c1      	b.n	801bb8c <__sflush_r+0x1c>
 801bc08:	6a21      	ldr	r1, [r4, #32]
 801bc0a:	2301      	movs	r3, #1
 801bc0c:	4628      	mov	r0, r5
 801bc0e:	47b0      	blx	r6
 801bc10:	1c41      	adds	r1, r0, #1
 801bc12:	d1c7      	bne.n	801bba4 <__sflush_r+0x34>
 801bc14:	682b      	ldr	r3, [r5, #0]
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	d0c4      	beq.n	801bba4 <__sflush_r+0x34>
 801bc1a:	2b1d      	cmp	r3, #29
 801bc1c:	d001      	beq.n	801bc22 <__sflush_r+0xb2>
 801bc1e:	2b16      	cmp	r3, #22
 801bc20:	d101      	bne.n	801bc26 <__sflush_r+0xb6>
 801bc22:	602f      	str	r7, [r5, #0]
 801bc24:	e7b1      	b.n	801bb8a <__sflush_r+0x1a>
 801bc26:	89a3      	ldrh	r3, [r4, #12]
 801bc28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bc2c:	81a3      	strh	r3, [r4, #12]
 801bc2e:	e7ad      	b.n	801bb8c <__sflush_r+0x1c>
 801bc30:	690f      	ldr	r7, [r1, #16]
 801bc32:	2f00      	cmp	r7, #0
 801bc34:	d0a9      	beq.n	801bb8a <__sflush_r+0x1a>
 801bc36:	0793      	lsls	r3, r2, #30
 801bc38:	680e      	ldr	r6, [r1, #0]
 801bc3a:	bf08      	it	eq
 801bc3c:	694b      	ldreq	r3, [r1, #20]
 801bc3e:	600f      	str	r7, [r1, #0]
 801bc40:	bf18      	it	ne
 801bc42:	2300      	movne	r3, #0
 801bc44:	eba6 0807 	sub.w	r8, r6, r7
 801bc48:	608b      	str	r3, [r1, #8]
 801bc4a:	f1b8 0f00 	cmp.w	r8, #0
 801bc4e:	dd9c      	ble.n	801bb8a <__sflush_r+0x1a>
 801bc50:	6a21      	ldr	r1, [r4, #32]
 801bc52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bc54:	4643      	mov	r3, r8
 801bc56:	463a      	mov	r2, r7
 801bc58:	4628      	mov	r0, r5
 801bc5a:	47b0      	blx	r6
 801bc5c:	2800      	cmp	r0, #0
 801bc5e:	dc06      	bgt.n	801bc6e <__sflush_r+0xfe>
 801bc60:	89a3      	ldrh	r3, [r4, #12]
 801bc62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bc66:	81a3      	strh	r3, [r4, #12]
 801bc68:	f04f 30ff 	mov.w	r0, #4294967295
 801bc6c:	e78e      	b.n	801bb8c <__sflush_r+0x1c>
 801bc6e:	4407      	add	r7, r0
 801bc70:	eba8 0800 	sub.w	r8, r8, r0
 801bc74:	e7e9      	b.n	801bc4a <__sflush_r+0xda>
 801bc76:	bf00      	nop
 801bc78:	20400001 	.word	0x20400001

0801bc7c <_fflush_r>:
 801bc7c:	b538      	push	{r3, r4, r5, lr}
 801bc7e:	690b      	ldr	r3, [r1, #16]
 801bc80:	4605      	mov	r5, r0
 801bc82:	460c      	mov	r4, r1
 801bc84:	b913      	cbnz	r3, 801bc8c <_fflush_r+0x10>
 801bc86:	2500      	movs	r5, #0
 801bc88:	4628      	mov	r0, r5
 801bc8a:	bd38      	pop	{r3, r4, r5, pc}
 801bc8c:	b118      	cbz	r0, 801bc96 <_fflush_r+0x1a>
 801bc8e:	6983      	ldr	r3, [r0, #24]
 801bc90:	b90b      	cbnz	r3, 801bc96 <_fflush_r+0x1a>
 801bc92:	f7ff fc4d 	bl	801b530 <__sinit>
 801bc96:	4b14      	ldr	r3, [pc, #80]	; (801bce8 <_fflush_r+0x6c>)
 801bc98:	429c      	cmp	r4, r3
 801bc9a:	d11b      	bne.n	801bcd4 <_fflush_r+0x58>
 801bc9c:	686c      	ldr	r4, [r5, #4]
 801bc9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d0ef      	beq.n	801bc86 <_fflush_r+0xa>
 801bca6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bca8:	07d0      	lsls	r0, r2, #31
 801bcaa:	d404      	bmi.n	801bcb6 <_fflush_r+0x3a>
 801bcac:	0599      	lsls	r1, r3, #22
 801bcae:	d402      	bmi.n	801bcb6 <_fflush_r+0x3a>
 801bcb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bcb2:	f7ff fd00 	bl	801b6b6 <__retarget_lock_acquire_recursive>
 801bcb6:	4628      	mov	r0, r5
 801bcb8:	4621      	mov	r1, r4
 801bcba:	f7ff ff59 	bl	801bb70 <__sflush_r>
 801bcbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bcc0:	07da      	lsls	r2, r3, #31
 801bcc2:	4605      	mov	r5, r0
 801bcc4:	d4e0      	bmi.n	801bc88 <_fflush_r+0xc>
 801bcc6:	89a3      	ldrh	r3, [r4, #12]
 801bcc8:	059b      	lsls	r3, r3, #22
 801bcca:	d4dd      	bmi.n	801bc88 <_fflush_r+0xc>
 801bccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bcce:	f7ff fcf3 	bl	801b6b8 <__retarget_lock_release_recursive>
 801bcd2:	e7d9      	b.n	801bc88 <_fflush_r+0xc>
 801bcd4:	4b05      	ldr	r3, [pc, #20]	; (801bcec <_fflush_r+0x70>)
 801bcd6:	429c      	cmp	r4, r3
 801bcd8:	d101      	bne.n	801bcde <_fflush_r+0x62>
 801bcda:	68ac      	ldr	r4, [r5, #8]
 801bcdc:	e7df      	b.n	801bc9e <_fflush_r+0x22>
 801bcde:	4b04      	ldr	r3, [pc, #16]	; (801bcf0 <_fflush_r+0x74>)
 801bce0:	429c      	cmp	r4, r3
 801bce2:	bf08      	it	eq
 801bce4:	68ec      	ldreq	r4, [r5, #12]
 801bce6:	e7da      	b.n	801bc9e <_fflush_r+0x22>
 801bce8:	080202b0 	.word	0x080202b0
 801bcec:	080202d0 	.word	0x080202d0
 801bcf0:	08020290 	.word	0x08020290

0801bcf4 <fiprintf>:
 801bcf4:	b40e      	push	{r1, r2, r3}
 801bcf6:	b503      	push	{r0, r1, lr}
 801bcf8:	4601      	mov	r1, r0
 801bcfa:	ab03      	add	r3, sp, #12
 801bcfc:	4805      	ldr	r0, [pc, #20]	; (801bd14 <fiprintf+0x20>)
 801bcfe:	f853 2b04 	ldr.w	r2, [r3], #4
 801bd02:	6800      	ldr	r0, [r0, #0]
 801bd04:	9301      	str	r3, [sp, #4]
 801bd06:	f000 f9ff 	bl	801c108 <_vfiprintf_r>
 801bd0a:	b002      	add	sp, #8
 801bd0c:	f85d eb04 	ldr.w	lr, [sp], #4
 801bd10:	b003      	add	sp, #12
 801bd12:	4770      	bx	lr
 801bd14:	24000034 	.word	0x24000034

0801bd18 <_lseek_r>:
 801bd18:	b538      	push	{r3, r4, r5, lr}
 801bd1a:	4d07      	ldr	r5, [pc, #28]	; (801bd38 <_lseek_r+0x20>)
 801bd1c:	4604      	mov	r4, r0
 801bd1e:	4608      	mov	r0, r1
 801bd20:	4611      	mov	r1, r2
 801bd22:	2200      	movs	r2, #0
 801bd24:	602a      	str	r2, [r5, #0]
 801bd26:	461a      	mov	r2, r3
 801bd28:	f7e5 fa84 	bl	8001234 <_lseek>
 801bd2c:	1c43      	adds	r3, r0, #1
 801bd2e:	d102      	bne.n	801bd36 <_lseek_r+0x1e>
 801bd30:	682b      	ldr	r3, [r5, #0]
 801bd32:	b103      	cbz	r3, 801bd36 <_lseek_r+0x1e>
 801bd34:	6023      	str	r3, [r4, #0]
 801bd36:	bd38      	pop	{r3, r4, r5, pc}
 801bd38:	2405e9f4 	.word	0x2405e9f4

0801bd3c <malloc>:
 801bd3c:	4b02      	ldr	r3, [pc, #8]	; (801bd48 <malloc+0xc>)
 801bd3e:	4601      	mov	r1, r0
 801bd40:	6818      	ldr	r0, [r3, #0]
 801bd42:	f7ff bd1b 	b.w	801b77c <_malloc_r>
 801bd46:	bf00      	nop
 801bd48:	24000034 	.word	0x24000034

0801bd4c <__malloc_lock>:
 801bd4c:	4801      	ldr	r0, [pc, #4]	; (801bd54 <__malloc_lock+0x8>)
 801bd4e:	f7ff bcb2 	b.w	801b6b6 <__retarget_lock_acquire_recursive>
 801bd52:	bf00      	nop
 801bd54:	2405e9e8 	.word	0x2405e9e8

0801bd58 <__malloc_unlock>:
 801bd58:	4801      	ldr	r0, [pc, #4]	; (801bd60 <__malloc_unlock+0x8>)
 801bd5a:	f7ff bcad 	b.w	801b6b8 <__retarget_lock_release_recursive>
 801bd5e:	bf00      	nop
 801bd60:	2405e9e8 	.word	0x2405e9e8

0801bd64 <_free_r>:
 801bd64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bd66:	2900      	cmp	r1, #0
 801bd68:	d044      	beq.n	801bdf4 <_free_r+0x90>
 801bd6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bd6e:	9001      	str	r0, [sp, #4]
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	f1a1 0404 	sub.w	r4, r1, #4
 801bd76:	bfb8      	it	lt
 801bd78:	18e4      	addlt	r4, r4, r3
 801bd7a:	f7ff ffe7 	bl	801bd4c <__malloc_lock>
 801bd7e:	4a1e      	ldr	r2, [pc, #120]	; (801bdf8 <_free_r+0x94>)
 801bd80:	9801      	ldr	r0, [sp, #4]
 801bd82:	6813      	ldr	r3, [r2, #0]
 801bd84:	b933      	cbnz	r3, 801bd94 <_free_r+0x30>
 801bd86:	6063      	str	r3, [r4, #4]
 801bd88:	6014      	str	r4, [r2, #0]
 801bd8a:	b003      	add	sp, #12
 801bd8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bd90:	f7ff bfe2 	b.w	801bd58 <__malloc_unlock>
 801bd94:	42a3      	cmp	r3, r4
 801bd96:	d908      	bls.n	801bdaa <_free_r+0x46>
 801bd98:	6825      	ldr	r5, [r4, #0]
 801bd9a:	1961      	adds	r1, r4, r5
 801bd9c:	428b      	cmp	r3, r1
 801bd9e:	bf01      	itttt	eq
 801bda0:	6819      	ldreq	r1, [r3, #0]
 801bda2:	685b      	ldreq	r3, [r3, #4]
 801bda4:	1949      	addeq	r1, r1, r5
 801bda6:	6021      	streq	r1, [r4, #0]
 801bda8:	e7ed      	b.n	801bd86 <_free_r+0x22>
 801bdaa:	461a      	mov	r2, r3
 801bdac:	685b      	ldr	r3, [r3, #4]
 801bdae:	b10b      	cbz	r3, 801bdb4 <_free_r+0x50>
 801bdb0:	42a3      	cmp	r3, r4
 801bdb2:	d9fa      	bls.n	801bdaa <_free_r+0x46>
 801bdb4:	6811      	ldr	r1, [r2, #0]
 801bdb6:	1855      	adds	r5, r2, r1
 801bdb8:	42a5      	cmp	r5, r4
 801bdba:	d10b      	bne.n	801bdd4 <_free_r+0x70>
 801bdbc:	6824      	ldr	r4, [r4, #0]
 801bdbe:	4421      	add	r1, r4
 801bdc0:	1854      	adds	r4, r2, r1
 801bdc2:	42a3      	cmp	r3, r4
 801bdc4:	6011      	str	r1, [r2, #0]
 801bdc6:	d1e0      	bne.n	801bd8a <_free_r+0x26>
 801bdc8:	681c      	ldr	r4, [r3, #0]
 801bdca:	685b      	ldr	r3, [r3, #4]
 801bdcc:	6053      	str	r3, [r2, #4]
 801bdce:	4421      	add	r1, r4
 801bdd0:	6011      	str	r1, [r2, #0]
 801bdd2:	e7da      	b.n	801bd8a <_free_r+0x26>
 801bdd4:	d902      	bls.n	801bddc <_free_r+0x78>
 801bdd6:	230c      	movs	r3, #12
 801bdd8:	6003      	str	r3, [r0, #0]
 801bdda:	e7d6      	b.n	801bd8a <_free_r+0x26>
 801bddc:	6825      	ldr	r5, [r4, #0]
 801bdde:	1961      	adds	r1, r4, r5
 801bde0:	428b      	cmp	r3, r1
 801bde2:	bf04      	itt	eq
 801bde4:	6819      	ldreq	r1, [r3, #0]
 801bde6:	685b      	ldreq	r3, [r3, #4]
 801bde8:	6063      	str	r3, [r4, #4]
 801bdea:	bf04      	itt	eq
 801bdec:	1949      	addeq	r1, r1, r5
 801bdee:	6021      	streq	r1, [r4, #0]
 801bdf0:	6054      	str	r4, [r2, #4]
 801bdf2:	e7ca      	b.n	801bd8a <_free_r+0x26>
 801bdf4:	b003      	add	sp, #12
 801bdf6:	bd30      	pop	{r4, r5, pc}
 801bdf8:	2405e9ec 	.word	0x2405e9ec

0801bdfc <__ssputs_r>:
 801bdfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be00:	688e      	ldr	r6, [r1, #8]
 801be02:	429e      	cmp	r6, r3
 801be04:	4682      	mov	sl, r0
 801be06:	460c      	mov	r4, r1
 801be08:	4690      	mov	r8, r2
 801be0a:	461f      	mov	r7, r3
 801be0c:	d838      	bhi.n	801be80 <__ssputs_r+0x84>
 801be0e:	898a      	ldrh	r2, [r1, #12]
 801be10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801be14:	d032      	beq.n	801be7c <__ssputs_r+0x80>
 801be16:	6825      	ldr	r5, [r4, #0]
 801be18:	6909      	ldr	r1, [r1, #16]
 801be1a:	eba5 0901 	sub.w	r9, r5, r1
 801be1e:	6965      	ldr	r5, [r4, #20]
 801be20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801be24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801be28:	3301      	adds	r3, #1
 801be2a:	444b      	add	r3, r9
 801be2c:	106d      	asrs	r5, r5, #1
 801be2e:	429d      	cmp	r5, r3
 801be30:	bf38      	it	cc
 801be32:	461d      	movcc	r5, r3
 801be34:	0553      	lsls	r3, r2, #21
 801be36:	d531      	bpl.n	801be9c <__ssputs_r+0xa0>
 801be38:	4629      	mov	r1, r5
 801be3a:	f7ff fc9f 	bl	801b77c <_malloc_r>
 801be3e:	4606      	mov	r6, r0
 801be40:	b950      	cbnz	r0, 801be58 <__ssputs_r+0x5c>
 801be42:	230c      	movs	r3, #12
 801be44:	f8ca 3000 	str.w	r3, [sl]
 801be48:	89a3      	ldrh	r3, [r4, #12]
 801be4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801be4e:	81a3      	strh	r3, [r4, #12]
 801be50:	f04f 30ff 	mov.w	r0, #4294967295
 801be54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be58:	6921      	ldr	r1, [r4, #16]
 801be5a:	464a      	mov	r2, r9
 801be5c:	f7ff fc3d 	bl	801b6da <memcpy>
 801be60:	89a3      	ldrh	r3, [r4, #12]
 801be62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801be66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801be6a:	81a3      	strh	r3, [r4, #12]
 801be6c:	6126      	str	r6, [r4, #16]
 801be6e:	6165      	str	r5, [r4, #20]
 801be70:	444e      	add	r6, r9
 801be72:	eba5 0509 	sub.w	r5, r5, r9
 801be76:	6026      	str	r6, [r4, #0]
 801be78:	60a5      	str	r5, [r4, #8]
 801be7a:	463e      	mov	r6, r7
 801be7c:	42be      	cmp	r6, r7
 801be7e:	d900      	bls.n	801be82 <__ssputs_r+0x86>
 801be80:	463e      	mov	r6, r7
 801be82:	6820      	ldr	r0, [r4, #0]
 801be84:	4632      	mov	r2, r6
 801be86:	4641      	mov	r1, r8
 801be88:	f7ff fc35 	bl	801b6f6 <memmove>
 801be8c:	68a3      	ldr	r3, [r4, #8]
 801be8e:	1b9b      	subs	r3, r3, r6
 801be90:	60a3      	str	r3, [r4, #8]
 801be92:	6823      	ldr	r3, [r4, #0]
 801be94:	4433      	add	r3, r6
 801be96:	6023      	str	r3, [r4, #0]
 801be98:	2000      	movs	r0, #0
 801be9a:	e7db      	b.n	801be54 <__ssputs_r+0x58>
 801be9c:	462a      	mov	r2, r5
 801be9e:	f000 fd35 	bl	801c90c <_realloc_r>
 801bea2:	4606      	mov	r6, r0
 801bea4:	2800      	cmp	r0, #0
 801bea6:	d1e1      	bne.n	801be6c <__ssputs_r+0x70>
 801bea8:	6921      	ldr	r1, [r4, #16]
 801beaa:	4650      	mov	r0, sl
 801beac:	f7ff ff5a 	bl	801bd64 <_free_r>
 801beb0:	e7c7      	b.n	801be42 <__ssputs_r+0x46>
	...

0801beb4 <_svfiprintf_r>:
 801beb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801beb8:	4698      	mov	r8, r3
 801beba:	898b      	ldrh	r3, [r1, #12]
 801bebc:	061b      	lsls	r3, r3, #24
 801bebe:	b09d      	sub	sp, #116	; 0x74
 801bec0:	4607      	mov	r7, r0
 801bec2:	460d      	mov	r5, r1
 801bec4:	4614      	mov	r4, r2
 801bec6:	d50e      	bpl.n	801bee6 <_svfiprintf_r+0x32>
 801bec8:	690b      	ldr	r3, [r1, #16]
 801beca:	b963      	cbnz	r3, 801bee6 <_svfiprintf_r+0x32>
 801becc:	2140      	movs	r1, #64	; 0x40
 801bece:	f7ff fc55 	bl	801b77c <_malloc_r>
 801bed2:	6028      	str	r0, [r5, #0]
 801bed4:	6128      	str	r0, [r5, #16]
 801bed6:	b920      	cbnz	r0, 801bee2 <_svfiprintf_r+0x2e>
 801bed8:	230c      	movs	r3, #12
 801beda:	603b      	str	r3, [r7, #0]
 801bedc:	f04f 30ff 	mov.w	r0, #4294967295
 801bee0:	e0d1      	b.n	801c086 <_svfiprintf_r+0x1d2>
 801bee2:	2340      	movs	r3, #64	; 0x40
 801bee4:	616b      	str	r3, [r5, #20]
 801bee6:	2300      	movs	r3, #0
 801bee8:	9309      	str	r3, [sp, #36]	; 0x24
 801beea:	2320      	movs	r3, #32
 801beec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bef0:	f8cd 800c 	str.w	r8, [sp, #12]
 801bef4:	2330      	movs	r3, #48	; 0x30
 801bef6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c0a0 <_svfiprintf_r+0x1ec>
 801befa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801befe:	f04f 0901 	mov.w	r9, #1
 801bf02:	4623      	mov	r3, r4
 801bf04:	469a      	mov	sl, r3
 801bf06:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bf0a:	b10a      	cbz	r2, 801bf10 <_svfiprintf_r+0x5c>
 801bf0c:	2a25      	cmp	r2, #37	; 0x25
 801bf0e:	d1f9      	bne.n	801bf04 <_svfiprintf_r+0x50>
 801bf10:	ebba 0b04 	subs.w	fp, sl, r4
 801bf14:	d00b      	beq.n	801bf2e <_svfiprintf_r+0x7a>
 801bf16:	465b      	mov	r3, fp
 801bf18:	4622      	mov	r2, r4
 801bf1a:	4629      	mov	r1, r5
 801bf1c:	4638      	mov	r0, r7
 801bf1e:	f7ff ff6d 	bl	801bdfc <__ssputs_r>
 801bf22:	3001      	adds	r0, #1
 801bf24:	f000 80aa 	beq.w	801c07c <_svfiprintf_r+0x1c8>
 801bf28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bf2a:	445a      	add	r2, fp
 801bf2c:	9209      	str	r2, [sp, #36]	; 0x24
 801bf2e:	f89a 3000 	ldrb.w	r3, [sl]
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	f000 80a2 	beq.w	801c07c <_svfiprintf_r+0x1c8>
 801bf38:	2300      	movs	r3, #0
 801bf3a:	f04f 32ff 	mov.w	r2, #4294967295
 801bf3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bf42:	f10a 0a01 	add.w	sl, sl, #1
 801bf46:	9304      	str	r3, [sp, #16]
 801bf48:	9307      	str	r3, [sp, #28]
 801bf4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bf4e:	931a      	str	r3, [sp, #104]	; 0x68
 801bf50:	4654      	mov	r4, sl
 801bf52:	2205      	movs	r2, #5
 801bf54:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf58:	4851      	ldr	r0, [pc, #324]	; (801c0a0 <_svfiprintf_r+0x1ec>)
 801bf5a:	f7e4 f9c1 	bl	80002e0 <memchr>
 801bf5e:	9a04      	ldr	r2, [sp, #16]
 801bf60:	b9d8      	cbnz	r0, 801bf9a <_svfiprintf_r+0xe6>
 801bf62:	06d0      	lsls	r0, r2, #27
 801bf64:	bf44      	itt	mi
 801bf66:	2320      	movmi	r3, #32
 801bf68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bf6c:	0711      	lsls	r1, r2, #28
 801bf6e:	bf44      	itt	mi
 801bf70:	232b      	movmi	r3, #43	; 0x2b
 801bf72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bf76:	f89a 3000 	ldrb.w	r3, [sl]
 801bf7a:	2b2a      	cmp	r3, #42	; 0x2a
 801bf7c:	d015      	beq.n	801bfaa <_svfiprintf_r+0xf6>
 801bf7e:	9a07      	ldr	r2, [sp, #28]
 801bf80:	4654      	mov	r4, sl
 801bf82:	2000      	movs	r0, #0
 801bf84:	f04f 0c0a 	mov.w	ip, #10
 801bf88:	4621      	mov	r1, r4
 801bf8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bf8e:	3b30      	subs	r3, #48	; 0x30
 801bf90:	2b09      	cmp	r3, #9
 801bf92:	d94e      	bls.n	801c032 <_svfiprintf_r+0x17e>
 801bf94:	b1b0      	cbz	r0, 801bfc4 <_svfiprintf_r+0x110>
 801bf96:	9207      	str	r2, [sp, #28]
 801bf98:	e014      	b.n	801bfc4 <_svfiprintf_r+0x110>
 801bf9a:	eba0 0308 	sub.w	r3, r0, r8
 801bf9e:	fa09 f303 	lsl.w	r3, r9, r3
 801bfa2:	4313      	orrs	r3, r2
 801bfa4:	9304      	str	r3, [sp, #16]
 801bfa6:	46a2      	mov	sl, r4
 801bfa8:	e7d2      	b.n	801bf50 <_svfiprintf_r+0x9c>
 801bfaa:	9b03      	ldr	r3, [sp, #12]
 801bfac:	1d19      	adds	r1, r3, #4
 801bfae:	681b      	ldr	r3, [r3, #0]
 801bfb0:	9103      	str	r1, [sp, #12]
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	bfbb      	ittet	lt
 801bfb6:	425b      	neglt	r3, r3
 801bfb8:	f042 0202 	orrlt.w	r2, r2, #2
 801bfbc:	9307      	strge	r3, [sp, #28]
 801bfbe:	9307      	strlt	r3, [sp, #28]
 801bfc0:	bfb8      	it	lt
 801bfc2:	9204      	strlt	r2, [sp, #16]
 801bfc4:	7823      	ldrb	r3, [r4, #0]
 801bfc6:	2b2e      	cmp	r3, #46	; 0x2e
 801bfc8:	d10c      	bne.n	801bfe4 <_svfiprintf_r+0x130>
 801bfca:	7863      	ldrb	r3, [r4, #1]
 801bfcc:	2b2a      	cmp	r3, #42	; 0x2a
 801bfce:	d135      	bne.n	801c03c <_svfiprintf_r+0x188>
 801bfd0:	9b03      	ldr	r3, [sp, #12]
 801bfd2:	1d1a      	adds	r2, r3, #4
 801bfd4:	681b      	ldr	r3, [r3, #0]
 801bfd6:	9203      	str	r2, [sp, #12]
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	bfb8      	it	lt
 801bfdc:	f04f 33ff 	movlt.w	r3, #4294967295
 801bfe0:	3402      	adds	r4, #2
 801bfe2:	9305      	str	r3, [sp, #20]
 801bfe4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801c0b0 <_svfiprintf_r+0x1fc>
 801bfe8:	7821      	ldrb	r1, [r4, #0]
 801bfea:	2203      	movs	r2, #3
 801bfec:	4650      	mov	r0, sl
 801bfee:	f7e4 f977 	bl	80002e0 <memchr>
 801bff2:	b140      	cbz	r0, 801c006 <_svfiprintf_r+0x152>
 801bff4:	2340      	movs	r3, #64	; 0x40
 801bff6:	eba0 000a 	sub.w	r0, r0, sl
 801bffa:	fa03 f000 	lsl.w	r0, r3, r0
 801bffe:	9b04      	ldr	r3, [sp, #16]
 801c000:	4303      	orrs	r3, r0
 801c002:	3401      	adds	r4, #1
 801c004:	9304      	str	r3, [sp, #16]
 801c006:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c00a:	4826      	ldr	r0, [pc, #152]	; (801c0a4 <_svfiprintf_r+0x1f0>)
 801c00c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c010:	2206      	movs	r2, #6
 801c012:	f7e4 f965 	bl	80002e0 <memchr>
 801c016:	2800      	cmp	r0, #0
 801c018:	d038      	beq.n	801c08c <_svfiprintf_r+0x1d8>
 801c01a:	4b23      	ldr	r3, [pc, #140]	; (801c0a8 <_svfiprintf_r+0x1f4>)
 801c01c:	bb1b      	cbnz	r3, 801c066 <_svfiprintf_r+0x1b2>
 801c01e:	9b03      	ldr	r3, [sp, #12]
 801c020:	3307      	adds	r3, #7
 801c022:	f023 0307 	bic.w	r3, r3, #7
 801c026:	3308      	adds	r3, #8
 801c028:	9303      	str	r3, [sp, #12]
 801c02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c02c:	4433      	add	r3, r6
 801c02e:	9309      	str	r3, [sp, #36]	; 0x24
 801c030:	e767      	b.n	801bf02 <_svfiprintf_r+0x4e>
 801c032:	fb0c 3202 	mla	r2, ip, r2, r3
 801c036:	460c      	mov	r4, r1
 801c038:	2001      	movs	r0, #1
 801c03a:	e7a5      	b.n	801bf88 <_svfiprintf_r+0xd4>
 801c03c:	2300      	movs	r3, #0
 801c03e:	3401      	adds	r4, #1
 801c040:	9305      	str	r3, [sp, #20]
 801c042:	4619      	mov	r1, r3
 801c044:	f04f 0c0a 	mov.w	ip, #10
 801c048:	4620      	mov	r0, r4
 801c04a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c04e:	3a30      	subs	r2, #48	; 0x30
 801c050:	2a09      	cmp	r2, #9
 801c052:	d903      	bls.n	801c05c <_svfiprintf_r+0x1a8>
 801c054:	2b00      	cmp	r3, #0
 801c056:	d0c5      	beq.n	801bfe4 <_svfiprintf_r+0x130>
 801c058:	9105      	str	r1, [sp, #20]
 801c05a:	e7c3      	b.n	801bfe4 <_svfiprintf_r+0x130>
 801c05c:	fb0c 2101 	mla	r1, ip, r1, r2
 801c060:	4604      	mov	r4, r0
 801c062:	2301      	movs	r3, #1
 801c064:	e7f0      	b.n	801c048 <_svfiprintf_r+0x194>
 801c066:	ab03      	add	r3, sp, #12
 801c068:	9300      	str	r3, [sp, #0]
 801c06a:	462a      	mov	r2, r5
 801c06c:	4b0f      	ldr	r3, [pc, #60]	; (801c0ac <_svfiprintf_r+0x1f8>)
 801c06e:	a904      	add	r1, sp, #16
 801c070:	4638      	mov	r0, r7
 801c072:	f3af 8000 	nop.w
 801c076:	1c42      	adds	r2, r0, #1
 801c078:	4606      	mov	r6, r0
 801c07a:	d1d6      	bne.n	801c02a <_svfiprintf_r+0x176>
 801c07c:	89ab      	ldrh	r3, [r5, #12]
 801c07e:	065b      	lsls	r3, r3, #25
 801c080:	f53f af2c 	bmi.w	801bedc <_svfiprintf_r+0x28>
 801c084:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c086:	b01d      	add	sp, #116	; 0x74
 801c088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c08c:	ab03      	add	r3, sp, #12
 801c08e:	9300      	str	r3, [sp, #0]
 801c090:	462a      	mov	r2, r5
 801c092:	4b06      	ldr	r3, [pc, #24]	; (801c0ac <_svfiprintf_r+0x1f8>)
 801c094:	a904      	add	r1, sp, #16
 801c096:	4638      	mov	r0, r7
 801c098:	f000 f9d4 	bl	801c444 <_printf_i>
 801c09c:	e7eb      	b.n	801c076 <_svfiprintf_r+0x1c2>
 801c09e:	bf00      	nop
 801c0a0:	080203a2 	.word	0x080203a2
 801c0a4:	080203ac 	.word	0x080203ac
 801c0a8:	00000000 	.word	0x00000000
 801c0ac:	0801bdfd 	.word	0x0801bdfd
 801c0b0:	080203a8 	.word	0x080203a8

0801c0b4 <__sfputc_r>:
 801c0b4:	6893      	ldr	r3, [r2, #8]
 801c0b6:	3b01      	subs	r3, #1
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	b410      	push	{r4}
 801c0bc:	6093      	str	r3, [r2, #8]
 801c0be:	da08      	bge.n	801c0d2 <__sfputc_r+0x1e>
 801c0c0:	6994      	ldr	r4, [r2, #24]
 801c0c2:	42a3      	cmp	r3, r4
 801c0c4:	db01      	blt.n	801c0ca <__sfputc_r+0x16>
 801c0c6:	290a      	cmp	r1, #10
 801c0c8:	d103      	bne.n	801c0d2 <__sfputc_r+0x1e>
 801c0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c0ce:	f000 baf1 	b.w	801c6b4 <__swbuf_r>
 801c0d2:	6813      	ldr	r3, [r2, #0]
 801c0d4:	1c58      	adds	r0, r3, #1
 801c0d6:	6010      	str	r0, [r2, #0]
 801c0d8:	7019      	strb	r1, [r3, #0]
 801c0da:	4608      	mov	r0, r1
 801c0dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c0e0:	4770      	bx	lr

0801c0e2 <__sfputs_r>:
 801c0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0e4:	4606      	mov	r6, r0
 801c0e6:	460f      	mov	r7, r1
 801c0e8:	4614      	mov	r4, r2
 801c0ea:	18d5      	adds	r5, r2, r3
 801c0ec:	42ac      	cmp	r4, r5
 801c0ee:	d101      	bne.n	801c0f4 <__sfputs_r+0x12>
 801c0f0:	2000      	movs	r0, #0
 801c0f2:	e007      	b.n	801c104 <__sfputs_r+0x22>
 801c0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c0f8:	463a      	mov	r2, r7
 801c0fa:	4630      	mov	r0, r6
 801c0fc:	f7ff ffda 	bl	801c0b4 <__sfputc_r>
 801c100:	1c43      	adds	r3, r0, #1
 801c102:	d1f3      	bne.n	801c0ec <__sfputs_r+0xa>
 801c104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c108 <_vfiprintf_r>:
 801c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c10c:	460d      	mov	r5, r1
 801c10e:	b09d      	sub	sp, #116	; 0x74
 801c110:	4614      	mov	r4, r2
 801c112:	4698      	mov	r8, r3
 801c114:	4606      	mov	r6, r0
 801c116:	b118      	cbz	r0, 801c120 <_vfiprintf_r+0x18>
 801c118:	6983      	ldr	r3, [r0, #24]
 801c11a:	b90b      	cbnz	r3, 801c120 <_vfiprintf_r+0x18>
 801c11c:	f7ff fa08 	bl	801b530 <__sinit>
 801c120:	4b89      	ldr	r3, [pc, #548]	; (801c348 <_vfiprintf_r+0x240>)
 801c122:	429d      	cmp	r5, r3
 801c124:	d11b      	bne.n	801c15e <_vfiprintf_r+0x56>
 801c126:	6875      	ldr	r5, [r6, #4]
 801c128:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c12a:	07d9      	lsls	r1, r3, #31
 801c12c:	d405      	bmi.n	801c13a <_vfiprintf_r+0x32>
 801c12e:	89ab      	ldrh	r3, [r5, #12]
 801c130:	059a      	lsls	r2, r3, #22
 801c132:	d402      	bmi.n	801c13a <_vfiprintf_r+0x32>
 801c134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c136:	f7ff fabe 	bl	801b6b6 <__retarget_lock_acquire_recursive>
 801c13a:	89ab      	ldrh	r3, [r5, #12]
 801c13c:	071b      	lsls	r3, r3, #28
 801c13e:	d501      	bpl.n	801c144 <_vfiprintf_r+0x3c>
 801c140:	692b      	ldr	r3, [r5, #16]
 801c142:	b9eb      	cbnz	r3, 801c180 <_vfiprintf_r+0x78>
 801c144:	4629      	mov	r1, r5
 801c146:	4630      	mov	r0, r6
 801c148:	f000 fb06 	bl	801c758 <__swsetup_r>
 801c14c:	b1c0      	cbz	r0, 801c180 <_vfiprintf_r+0x78>
 801c14e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c150:	07dc      	lsls	r4, r3, #31
 801c152:	d50e      	bpl.n	801c172 <_vfiprintf_r+0x6a>
 801c154:	f04f 30ff 	mov.w	r0, #4294967295
 801c158:	b01d      	add	sp, #116	; 0x74
 801c15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c15e:	4b7b      	ldr	r3, [pc, #492]	; (801c34c <_vfiprintf_r+0x244>)
 801c160:	429d      	cmp	r5, r3
 801c162:	d101      	bne.n	801c168 <_vfiprintf_r+0x60>
 801c164:	68b5      	ldr	r5, [r6, #8]
 801c166:	e7df      	b.n	801c128 <_vfiprintf_r+0x20>
 801c168:	4b79      	ldr	r3, [pc, #484]	; (801c350 <_vfiprintf_r+0x248>)
 801c16a:	429d      	cmp	r5, r3
 801c16c:	bf08      	it	eq
 801c16e:	68f5      	ldreq	r5, [r6, #12]
 801c170:	e7da      	b.n	801c128 <_vfiprintf_r+0x20>
 801c172:	89ab      	ldrh	r3, [r5, #12]
 801c174:	0598      	lsls	r0, r3, #22
 801c176:	d4ed      	bmi.n	801c154 <_vfiprintf_r+0x4c>
 801c178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c17a:	f7ff fa9d 	bl	801b6b8 <__retarget_lock_release_recursive>
 801c17e:	e7e9      	b.n	801c154 <_vfiprintf_r+0x4c>
 801c180:	2300      	movs	r3, #0
 801c182:	9309      	str	r3, [sp, #36]	; 0x24
 801c184:	2320      	movs	r3, #32
 801c186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c18a:	f8cd 800c 	str.w	r8, [sp, #12]
 801c18e:	2330      	movs	r3, #48	; 0x30
 801c190:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c354 <_vfiprintf_r+0x24c>
 801c194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c198:	f04f 0901 	mov.w	r9, #1
 801c19c:	4623      	mov	r3, r4
 801c19e:	469a      	mov	sl, r3
 801c1a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c1a4:	b10a      	cbz	r2, 801c1aa <_vfiprintf_r+0xa2>
 801c1a6:	2a25      	cmp	r2, #37	; 0x25
 801c1a8:	d1f9      	bne.n	801c19e <_vfiprintf_r+0x96>
 801c1aa:	ebba 0b04 	subs.w	fp, sl, r4
 801c1ae:	d00b      	beq.n	801c1c8 <_vfiprintf_r+0xc0>
 801c1b0:	465b      	mov	r3, fp
 801c1b2:	4622      	mov	r2, r4
 801c1b4:	4629      	mov	r1, r5
 801c1b6:	4630      	mov	r0, r6
 801c1b8:	f7ff ff93 	bl	801c0e2 <__sfputs_r>
 801c1bc:	3001      	adds	r0, #1
 801c1be:	f000 80aa 	beq.w	801c316 <_vfiprintf_r+0x20e>
 801c1c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c1c4:	445a      	add	r2, fp
 801c1c6:	9209      	str	r2, [sp, #36]	; 0x24
 801c1c8:	f89a 3000 	ldrb.w	r3, [sl]
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	f000 80a2 	beq.w	801c316 <_vfiprintf_r+0x20e>
 801c1d2:	2300      	movs	r3, #0
 801c1d4:	f04f 32ff 	mov.w	r2, #4294967295
 801c1d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c1dc:	f10a 0a01 	add.w	sl, sl, #1
 801c1e0:	9304      	str	r3, [sp, #16]
 801c1e2:	9307      	str	r3, [sp, #28]
 801c1e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c1e8:	931a      	str	r3, [sp, #104]	; 0x68
 801c1ea:	4654      	mov	r4, sl
 801c1ec:	2205      	movs	r2, #5
 801c1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c1f2:	4858      	ldr	r0, [pc, #352]	; (801c354 <_vfiprintf_r+0x24c>)
 801c1f4:	f7e4 f874 	bl	80002e0 <memchr>
 801c1f8:	9a04      	ldr	r2, [sp, #16]
 801c1fa:	b9d8      	cbnz	r0, 801c234 <_vfiprintf_r+0x12c>
 801c1fc:	06d1      	lsls	r1, r2, #27
 801c1fe:	bf44      	itt	mi
 801c200:	2320      	movmi	r3, #32
 801c202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c206:	0713      	lsls	r3, r2, #28
 801c208:	bf44      	itt	mi
 801c20a:	232b      	movmi	r3, #43	; 0x2b
 801c20c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c210:	f89a 3000 	ldrb.w	r3, [sl]
 801c214:	2b2a      	cmp	r3, #42	; 0x2a
 801c216:	d015      	beq.n	801c244 <_vfiprintf_r+0x13c>
 801c218:	9a07      	ldr	r2, [sp, #28]
 801c21a:	4654      	mov	r4, sl
 801c21c:	2000      	movs	r0, #0
 801c21e:	f04f 0c0a 	mov.w	ip, #10
 801c222:	4621      	mov	r1, r4
 801c224:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c228:	3b30      	subs	r3, #48	; 0x30
 801c22a:	2b09      	cmp	r3, #9
 801c22c:	d94e      	bls.n	801c2cc <_vfiprintf_r+0x1c4>
 801c22e:	b1b0      	cbz	r0, 801c25e <_vfiprintf_r+0x156>
 801c230:	9207      	str	r2, [sp, #28]
 801c232:	e014      	b.n	801c25e <_vfiprintf_r+0x156>
 801c234:	eba0 0308 	sub.w	r3, r0, r8
 801c238:	fa09 f303 	lsl.w	r3, r9, r3
 801c23c:	4313      	orrs	r3, r2
 801c23e:	9304      	str	r3, [sp, #16]
 801c240:	46a2      	mov	sl, r4
 801c242:	e7d2      	b.n	801c1ea <_vfiprintf_r+0xe2>
 801c244:	9b03      	ldr	r3, [sp, #12]
 801c246:	1d19      	adds	r1, r3, #4
 801c248:	681b      	ldr	r3, [r3, #0]
 801c24a:	9103      	str	r1, [sp, #12]
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	bfbb      	ittet	lt
 801c250:	425b      	neglt	r3, r3
 801c252:	f042 0202 	orrlt.w	r2, r2, #2
 801c256:	9307      	strge	r3, [sp, #28]
 801c258:	9307      	strlt	r3, [sp, #28]
 801c25a:	bfb8      	it	lt
 801c25c:	9204      	strlt	r2, [sp, #16]
 801c25e:	7823      	ldrb	r3, [r4, #0]
 801c260:	2b2e      	cmp	r3, #46	; 0x2e
 801c262:	d10c      	bne.n	801c27e <_vfiprintf_r+0x176>
 801c264:	7863      	ldrb	r3, [r4, #1]
 801c266:	2b2a      	cmp	r3, #42	; 0x2a
 801c268:	d135      	bne.n	801c2d6 <_vfiprintf_r+0x1ce>
 801c26a:	9b03      	ldr	r3, [sp, #12]
 801c26c:	1d1a      	adds	r2, r3, #4
 801c26e:	681b      	ldr	r3, [r3, #0]
 801c270:	9203      	str	r2, [sp, #12]
 801c272:	2b00      	cmp	r3, #0
 801c274:	bfb8      	it	lt
 801c276:	f04f 33ff 	movlt.w	r3, #4294967295
 801c27a:	3402      	adds	r4, #2
 801c27c:	9305      	str	r3, [sp, #20]
 801c27e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c364 <_vfiprintf_r+0x25c>
 801c282:	7821      	ldrb	r1, [r4, #0]
 801c284:	2203      	movs	r2, #3
 801c286:	4650      	mov	r0, sl
 801c288:	f7e4 f82a 	bl	80002e0 <memchr>
 801c28c:	b140      	cbz	r0, 801c2a0 <_vfiprintf_r+0x198>
 801c28e:	2340      	movs	r3, #64	; 0x40
 801c290:	eba0 000a 	sub.w	r0, r0, sl
 801c294:	fa03 f000 	lsl.w	r0, r3, r0
 801c298:	9b04      	ldr	r3, [sp, #16]
 801c29a:	4303      	orrs	r3, r0
 801c29c:	3401      	adds	r4, #1
 801c29e:	9304      	str	r3, [sp, #16]
 801c2a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c2a4:	482c      	ldr	r0, [pc, #176]	; (801c358 <_vfiprintf_r+0x250>)
 801c2a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c2aa:	2206      	movs	r2, #6
 801c2ac:	f7e4 f818 	bl	80002e0 <memchr>
 801c2b0:	2800      	cmp	r0, #0
 801c2b2:	d03f      	beq.n	801c334 <_vfiprintf_r+0x22c>
 801c2b4:	4b29      	ldr	r3, [pc, #164]	; (801c35c <_vfiprintf_r+0x254>)
 801c2b6:	bb1b      	cbnz	r3, 801c300 <_vfiprintf_r+0x1f8>
 801c2b8:	9b03      	ldr	r3, [sp, #12]
 801c2ba:	3307      	adds	r3, #7
 801c2bc:	f023 0307 	bic.w	r3, r3, #7
 801c2c0:	3308      	adds	r3, #8
 801c2c2:	9303      	str	r3, [sp, #12]
 801c2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2c6:	443b      	add	r3, r7
 801c2c8:	9309      	str	r3, [sp, #36]	; 0x24
 801c2ca:	e767      	b.n	801c19c <_vfiprintf_r+0x94>
 801c2cc:	fb0c 3202 	mla	r2, ip, r2, r3
 801c2d0:	460c      	mov	r4, r1
 801c2d2:	2001      	movs	r0, #1
 801c2d4:	e7a5      	b.n	801c222 <_vfiprintf_r+0x11a>
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	3401      	adds	r4, #1
 801c2da:	9305      	str	r3, [sp, #20]
 801c2dc:	4619      	mov	r1, r3
 801c2de:	f04f 0c0a 	mov.w	ip, #10
 801c2e2:	4620      	mov	r0, r4
 801c2e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c2e8:	3a30      	subs	r2, #48	; 0x30
 801c2ea:	2a09      	cmp	r2, #9
 801c2ec:	d903      	bls.n	801c2f6 <_vfiprintf_r+0x1ee>
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d0c5      	beq.n	801c27e <_vfiprintf_r+0x176>
 801c2f2:	9105      	str	r1, [sp, #20]
 801c2f4:	e7c3      	b.n	801c27e <_vfiprintf_r+0x176>
 801c2f6:	fb0c 2101 	mla	r1, ip, r1, r2
 801c2fa:	4604      	mov	r4, r0
 801c2fc:	2301      	movs	r3, #1
 801c2fe:	e7f0      	b.n	801c2e2 <_vfiprintf_r+0x1da>
 801c300:	ab03      	add	r3, sp, #12
 801c302:	9300      	str	r3, [sp, #0]
 801c304:	462a      	mov	r2, r5
 801c306:	4b16      	ldr	r3, [pc, #88]	; (801c360 <_vfiprintf_r+0x258>)
 801c308:	a904      	add	r1, sp, #16
 801c30a:	4630      	mov	r0, r6
 801c30c:	f3af 8000 	nop.w
 801c310:	4607      	mov	r7, r0
 801c312:	1c78      	adds	r0, r7, #1
 801c314:	d1d6      	bne.n	801c2c4 <_vfiprintf_r+0x1bc>
 801c316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c318:	07d9      	lsls	r1, r3, #31
 801c31a:	d405      	bmi.n	801c328 <_vfiprintf_r+0x220>
 801c31c:	89ab      	ldrh	r3, [r5, #12]
 801c31e:	059a      	lsls	r2, r3, #22
 801c320:	d402      	bmi.n	801c328 <_vfiprintf_r+0x220>
 801c322:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c324:	f7ff f9c8 	bl	801b6b8 <__retarget_lock_release_recursive>
 801c328:	89ab      	ldrh	r3, [r5, #12]
 801c32a:	065b      	lsls	r3, r3, #25
 801c32c:	f53f af12 	bmi.w	801c154 <_vfiprintf_r+0x4c>
 801c330:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c332:	e711      	b.n	801c158 <_vfiprintf_r+0x50>
 801c334:	ab03      	add	r3, sp, #12
 801c336:	9300      	str	r3, [sp, #0]
 801c338:	462a      	mov	r2, r5
 801c33a:	4b09      	ldr	r3, [pc, #36]	; (801c360 <_vfiprintf_r+0x258>)
 801c33c:	a904      	add	r1, sp, #16
 801c33e:	4630      	mov	r0, r6
 801c340:	f000 f880 	bl	801c444 <_printf_i>
 801c344:	e7e4      	b.n	801c310 <_vfiprintf_r+0x208>
 801c346:	bf00      	nop
 801c348:	080202b0 	.word	0x080202b0
 801c34c:	080202d0 	.word	0x080202d0
 801c350:	08020290 	.word	0x08020290
 801c354:	080203a2 	.word	0x080203a2
 801c358:	080203ac 	.word	0x080203ac
 801c35c:	00000000 	.word	0x00000000
 801c360:	0801c0e3 	.word	0x0801c0e3
 801c364:	080203a8 	.word	0x080203a8

0801c368 <_printf_common>:
 801c368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c36c:	4616      	mov	r6, r2
 801c36e:	4699      	mov	r9, r3
 801c370:	688a      	ldr	r2, [r1, #8]
 801c372:	690b      	ldr	r3, [r1, #16]
 801c374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c378:	4293      	cmp	r3, r2
 801c37a:	bfb8      	it	lt
 801c37c:	4613      	movlt	r3, r2
 801c37e:	6033      	str	r3, [r6, #0]
 801c380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c384:	4607      	mov	r7, r0
 801c386:	460c      	mov	r4, r1
 801c388:	b10a      	cbz	r2, 801c38e <_printf_common+0x26>
 801c38a:	3301      	adds	r3, #1
 801c38c:	6033      	str	r3, [r6, #0]
 801c38e:	6823      	ldr	r3, [r4, #0]
 801c390:	0699      	lsls	r1, r3, #26
 801c392:	bf42      	ittt	mi
 801c394:	6833      	ldrmi	r3, [r6, #0]
 801c396:	3302      	addmi	r3, #2
 801c398:	6033      	strmi	r3, [r6, #0]
 801c39a:	6825      	ldr	r5, [r4, #0]
 801c39c:	f015 0506 	ands.w	r5, r5, #6
 801c3a0:	d106      	bne.n	801c3b0 <_printf_common+0x48>
 801c3a2:	f104 0a19 	add.w	sl, r4, #25
 801c3a6:	68e3      	ldr	r3, [r4, #12]
 801c3a8:	6832      	ldr	r2, [r6, #0]
 801c3aa:	1a9b      	subs	r3, r3, r2
 801c3ac:	42ab      	cmp	r3, r5
 801c3ae:	dc26      	bgt.n	801c3fe <_printf_common+0x96>
 801c3b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c3b4:	1e13      	subs	r3, r2, #0
 801c3b6:	6822      	ldr	r2, [r4, #0]
 801c3b8:	bf18      	it	ne
 801c3ba:	2301      	movne	r3, #1
 801c3bc:	0692      	lsls	r2, r2, #26
 801c3be:	d42b      	bmi.n	801c418 <_printf_common+0xb0>
 801c3c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c3c4:	4649      	mov	r1, r9
 801c3c6:	4638      	mov	r0, r7
 801c3c8:	47c0      	blx	r8
 801c3ca:	3001      	adds	r0, #1
 801c3cc:	d01e      	beq.n	801c40c <_printf_common+0xa4>
 801c3ce:	6823      	ldr	r3, [r4, #0]
 801c3d0:	68e5      	ldr	r5, [r4, #12]
 801c3d2:	6832      	ldr	r2, [r6, #0]
 801c3d4:	f003 0306 	and.w	r3, r3, #6
 801c3d8:	2b04      	cmp	r3, #4
 801c3da:	bf08      	it	eq
 801c3dc:	1aad      	subeq	r5, r5, r2
 801c3de:	68a3      	ldr	r3, [r4, #8]
 801c3e0:	6922      	ldr	r2, [r4, #16]
 801c3e2:	bf0c      	ite	eq
 801c3e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c3e8:	2500      	movne	r5, #0
 801c3ea:	4293      	cmp	r3, r2
 801c3ec:	bfc4      	itt	gt
 801c3ee:	1a9b      	subgt	r3, r3, r2
 801c3f0:	18ed      	addgt	r5, r5, r3
 801c3f2:	2600      	movs	r6, #0
 801c3f4:	341a      	adds	r4, #26
 801c3f6:	42b5      	cmp	r5, r6
 801c3f8:	d11a      	bne.n	801c430 <_printf_common+0xc8>
 801c3fa:	2000      	movs	r0, #0
 801c3fc:	e008      	b.n	801c410 <_printf_common+0xa8>
 801c3fe:	2301      	movs	r3, #1
 801c400:	4652      	mov	r2, sl
 801c402:	4649      	mov	r1, r9
 801c404:	4638      	mov	r0, r7
 801c406:	47c0      	blx	r8
 801c408:	3001      	adds	r0, #1
 801c40a:	d103      	bne.n	801c414 <_printf_common+0xac>
 801c40c:	f04f 30ff 	mov.w	r0, #4294967295
 801c410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c414:	3501      	adds	r5, #1
 801c416:	e7c6      	b.n	801c3a6 <_printf_common+0x3e>
 801c418:	18e1      	adds	r1, r4, r3
 801c41a:	1c5a      	adds	r2, r3, #1
 801c41c:	2030      	movs	r0, #48	; 0x30
 801c41e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c422:	4422      	add	r2, r4
 801c424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c42c:	3302      	adds	r3, #2
 801c42e:	e7c7      	b.n	801c3c0 <_printf_common+0x58>
 801c430:	2301      	movs	r3, #1
 801c432:	4622      	mov	r2, r4
 801c434:	4649      	mov	r1, r9
 801c436:	4638      	mov	r0, r7
 801c438:	47c0      	blx	r8
 801c43a:	3001      	adds	r0, #1
 801c43c:	d0e6      	beq.n	801c40c <_printf_common+0xa4>
 801c43e:	3601      	adds	r6, #1
 801c440:	e7d9      	b.n	801c3f6 <_printf_common+0x8e>
	...

0801c444 <_printf_i>:
 801c444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c448:	7e0f      	ldrb	r7, [r1, #24]
 801c44a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c44c:	2f78      	cmp	r7, #120	; 0x78
 801c44e:	4691      	mov	r9, r2
 801c450:	4680      	mov	r8, r0
 801c452:	460c      	mov	r4, r1
 801c454:	469a      	mov	sl, r3
 801c456:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c45a:	d807      	bhi.n	801c46c <_printf_i+0x28>
 801c45c:	2f62      	cmp	r7, #98	; 0x62
 801c45e:	d80a      	bhi.n	801c476 <_printf_i+0x32>
 801c460:	2f00      	cmp	r7, #0
 801c462:	f000 80d8 	beq.w	801c616 <_printf_i+0x1d2>
 801c466:	2f58      	cmp	r7, #88	; 0x58
 801c468:	f000 80a3 	beq.w	801c5b2 <_printf_i+0x16e>
 801c46c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c474:	e03a      	b.n	801c4ec <_printf_i+0xa8>
 801c476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c47a:	2b15      	cmp	r3, #21
 801c47c:	d8f6      	bhi.n	801c46c <_printf_i+0x28>
 801c47e:	a101      	add	r1, pc, #4	; (adr r1, 801c484 <_printf_i+0x40>)
 801c480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c484:	0801c4dd 	.word	0x0801c4dd
 801c488:	0801c4f1 	.word	0x0801c4f1
 801c48c:	0801c46d 	.word	0x0801c46d
 801c490:	0801c46d 	.word	0x0801c46d
 801c494:	0801c46d 	.word	0x0801c46d
 801c498:	0801c46d 	.word	0x0801c46d
 801c49c:	0801c4f1 	.word	0x0801c4f1
 801c4a0:	0801c46d 	.word	0x0801c46d
 801c4a4:	0801c46d 	.word	0x0801c46d
 801c4a8:	0801c46d 	.word	0x0801c46d
 801c4ac:	0801c46d 	.word	0x0801c46d
 801c4b0:	0801c5fd 	.word	0x0801c5fd
 801c4b4:	0801c521 	.word	0x0801c521
 801c4b8:	0801c5df 	.word	0x0801c5df
 801c4bc:	0801c46d 	.word	0x0801c46d
 801c4c0:	0801c46d 	.word	0x0801c46d
 801c4c4:	0801c61f 	.word	0x0801c61f
 801c4c8:	0801c46d 	.word	0x0801c46d
 801c4cc:	0801c521 	.word	0x0801c521
 801c4d0:	0801c46d 	.word	0x0801c46d
 801c4d4:	0801c46d 	.word	0x0801c46d
 801c4d8:	0801c5e7 	.word	0x0801c5e7
 801c4dc:	682b      	ldr	r3, [r5, #0]
 801c4de:	1d1a      	adds	r2, r3, #4
 801c4e0:	681b      	ldr	r3, [r3, #0]
 801c4e2:	602a      	str	r2, [r5, #0]
 801c4e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c4e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c4ec:	2301      	movs	r3, #1
 801c4ee:	e0a3      	b.n	801c638 <_printf_i+0x1f4>
 801c4f0:	6820      	ldr	r0, [r4, #0]
 801c4f2:	6829      	ldr	r1, [r5, #0]
 801c4f4:	0606      	lsls	r6, r0, #24
 801c4f6:	f101 0304 	add.w	r3, r1, #4
 801c4fa:	d50a      	bpl.n	801c512 <_printf_i+0xce>
 801c4fc:	680e      	ldr	r6, [r1, #0]
 801c4fe:	602b      	str	r3, [r5, #0]
 801c500:	2e00      	cmp	r6, #0
 801c502:	da03      	bge.n	801c50c <_printf_i+0xc8>
 801c504:	232d      	movs	r3, #45	; 0x2d
 801c506:	4276      	negs	r6, r6
 801c508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c50c:	485e      	ldr	r0, [pc, #376]	; (801c688 <_printf_i+0x244>)
 801c50e:	230a      	movs	r3, #10
 801c510:	e019      	b.n	801c546 <_printf_i+0x102>
 801c512:	680e      	ldr	r6, [r1, #0]
 801c514:	602b      	str	r3, [r5, #0]
 801c516:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c51a:	bf18      	it	ne
 801c51c:	b236      	sxthne	r6, r6
 801c51e:	e7ef      	b.n	801c500 <_printf_i+0xbc>
 801c520:	682b      	ldr	r3, [r5, #0]
 801c522:	6820      	ldr	r0, [r4, #0]
 801c524:	1d19      	adds	r1, r3, #4
 801c526:	6029      	str	r1, [r5, #0]
 801c528:	0601      	lsls	r1, r0, #24
 801c52a:	d501      	bpl.n	801c530 <_printf_i+0xec>
 801c52c:	681e      	ldr	r6, [r3, #0]
 801c52e:	e002      	b.n	801c536 <_printf_i+0xf2>
 801c530:	0646      	lsls	r6, r0, #25
 801c532:	d5fb      	bpl.n	801c52c <_printf_i+0xe8>
 801c534:	881e      	ldrh	r6, [r3, #0]
 801c536:	4854      	ldr	r0, [pc, #336]	; (801c688 <_printf_i+0x244>)
 801c538:	2f6f      	cmp	r7, #111	; 0x6f
 801c53a:	bf0c      	ite	eq
 801c53c:	2308      	moveq	r3, #8
 801c53e:	230a      	movne	r3, #10
 801c540:	2100      	movs	r1, #0
 801c542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c546:	6865      	ldr	r5, [r4, #4]
 801c548:	60a5      	str	r5, [r4, #8]
 801c54a:	2d00      	cmp	r5, #0
 801c54c:	bfa2      	ittt	ge
 801c54e:	6821      	ldrge	r1, [r4, #0]
 801c550:	f021 0104 	bicge.w	r1, r1, #4
 801c554:	6021      	strge	r1, [r4, #0]
 801c556:	b90e      	cbnz	r6, 801c55c <_printf_i+0x118>
 801c558:	2d00      	cmp	r5, #0
 801c55a:	d04d      	beq.n	801c5f8 <_printf_i+0x1b4>
 801c55c:	4615      	mov	r5, r2
 801c55e:	fbb6 f1f3 	udiv	r1, r6, r3
 801c562:	fb03 6711 	mls	r7, r3, r1, r6
 801c566:	5dc7      	ldrb	r7, [r0, r7]
 801c568:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c56c:	4637      	mov	r7, r6
 801c56e:	42bb      	cmp	r3, r7
 801c570:	460e      	mov	r6, r1
 801c572:	d9f4      	bls.n	801c55e <_printf_i+0x11a>
 801c574:	2b08      	cmp	r3, #8
 801c576:	d10b      	bne.n	801c590 <_printf_i+0x14c>
 801c578:	6823      	ldr	r3, [r4, #0]
 801c57a:	07de      	lsls	r6, r3, #31
 801c57c:	d508      	bpl.n	801c590 <_printf_i+0x14c>
 801c57e:	6923      	ldr	r3, [r4, #16]
 801c580:	6861      	ldr	r1, [r4, #4]
 801c582:	4299      	cmp	r1, r3
 801c584:	bfde      	ittt	le
 801c586:	2330      	movle	r3, #48	; 0x30
 801c588:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c58c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c590:	1b52      	subs	r2, r2, r5
 801c592:	6122      	str	r2, [r4, #16]
 801c594:	f8cd a000 	str.w	sl, [sp]
 801c598:	464b      	mov	r3, r9
 801c59a:	aa03      	add	r2, sp, #12
 801c59c:	4621      	mov	r1, r4
 801c59e:	4640      	mov	r0, r8
 801c5a0:	f7ff fee2 	bl	801c368 <_printf_common>
 801c5a4:	3001      	adds	r0, #1
 801c5a6:	d14c      	bne.n	801c642 <_printf_i+0x1fe>
 801c5a8:	f04f 30ff 	mov.w	r0, #4294967295
 801c5ac:	b004      	add	sp, #16
 801c5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c5b2:	4835      	ldr	r0, [pc, #212]	; (801c688 <_printf_i+0x244>)
 801c5b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801c5b8:	6829      	ldr	r1, [r5, #0]
 801c5ba:	6823      	ldr	r3, [r4, #0]
 801c5bc:	f851 6b04 	ldr.w	r6, [r1], #4
 801c5c0:	6029      	str	r1, [r5, #0]
 801c5c2:	061d      	lsls	r5, r3, #24
 801c5c4:	d514      	bpl.n	801c5f0 <_printf_i+0x1ac>
 801c5c6:	07df      	lsls	r7, r3, #31
 801c5c8:	bf44      	itt	mi
 801c5ca:	f043 0320 	orrmi.w	r3, r3, #32
 801c5ce:	6023      	strmi	r3, [r4, #0]
 801c5d0:	b91e      	cbnz	r6, 801c5da <_printf_i+0x196>
 801c5d2:	6823      	ldr	r3, [r4, #0]
 801c5d4:	f023 0320 	bic.w	r3, r3, #32
 801c5d8:	6023      	str	r3, [r4, #0]
 801c5da:	2310      	movs	r3, #16
 801c5dc:	e7b0      	b.n	801c540 <_printf_i+0xfc>
 801c5de:	6823      	ldr	r3, [r4, #0]
 801c5e0:	f043 0320 	orr.w	r3, r3, #32
 801c5e4:	6023      	str	r3, [r4, #0]
 801c5e6:	2378      	movs	r3, #120	; 0x78
 801c5e8:	4828      	ldr	r0, [pc, #160]	; (801c68c <_printf_i+0x248>)
 801c5ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c5ee:	e7e3      	b.n	801c5b8 <_printf_i+0x174>
 801c5f0:	0659      	lsls	r1, r3, #25
 801c5f2:	bf48      	it	mi
 801c5f4:	b2b6      	uxthmi	r6, r6
 801c5f6:	e7e6      	b.n	801c5c6 <_printf_i+0x182>
 801c5f8:	4615      	mov	r5, r2
 801c5fa:	e7bb      	b.n	801c574 <_printf_i+0x130>
 801c5fc:	682b      	ldr	r3, [r5, #0]
 801c5fe:	6826      	ldr	r6, [r4, #0]
 801c600:	6961      	ldr	r1, [r4, #20]
 801c602:	1d18      	adds	r0, r3, #4
 801c604:	6028      	str	r0, [r5, #0]
 801c606:	0635      	lsls	r5, r6, #24
 801c608:	681b      	ldr	r3, [r3, #0]
 801c60a:	d501      	bpl.n	801c610 <_printf_i+0x1cc>
 801c60c:	6019      	str	r1, [r3, #0]
 801c60e:	e002      	b.n	801c616 <_printf_i+0x1d2>
 801c610:	0670      	lsls	r0, r6, #25
 801c612:	d5fb      	bpl.n	801c60c <_printf_i+0x1c8>
 801c614:	8019      	strh	r1, [r3, #0]
 801c616:	2300      	movs	r3, #0
 801c618:	6123      	str	r3, [r4, #16]
 801c61a:	4615      	mov	r5, r2
 801c61c:	e7ba      	b.n	801c594 <_printf_i+0x150>
 801c61e:	682b      	ldr	r3, [r5, #0]
 801c620:	1d1a      	adds	r2, r3, #4
 801c622:	602a      	str	r2, [r5, #0]
 801c624:	681d      	ldr	r5, [r3, #0]
 801c626:	6862      	ldr	r2, [r4, #4]
 801c628:	2100      	movs	r1, #0
 801c62a:	4628      	mov	r0, r5
 801c62c:	f7e3 fe58 	bl	80002e0 <memchr>
 801c630:	b108      	cbz	r0, 801c636 <_printf_i+0x1f2>
 801c632:	1b40      	subs	r0, r0, r5
 801c634:	6060      	str	r0, [r4, #4]
 801c636:	6863      	ldr	r3, [r4, #4]
 801c638:	6123      	str	r3, [r4, #16]
 801c63a:	2300      	movs	r3, #0
 801c63c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c640:	e7a8      	b.n	801c594 <_printf_i+0x150>
 801c642:	6923      	ldr	r3, [r4, #16]
 801c644:	462a      	mov	r2, r5
 801c646:	4649      	mov	r1, r9
 801c648:	4640      	mov	r0, r8
 801c64a:	47d0      	blx	sl
 801c64c:	3001      	adds	r0, #1
 801c64e:	d0ab      	beq.n	801c5a8 <_printf_i+0x164>
 801c650:	6823      	ldr	r3, [r4, #0]
 801c652:	079b      	lsls	r3, r3, #30
 801c654:	d413      	bmi.n	801c67e <_printf_i+0x23a>
 801c656:	68e0      	ldr	r0, [r4, #12]
 801c658:	9b03      	ldr	r3, [sp, #12]
 801c65a:	4298      	cmp	r0, r3
 801c65c:	bfb8      	it	lt
 801c65e:	4618      	movlt	r0, r3
 801c660:	e7a4      	b.n	801c5ac <_printf_i+0x168>
 801c662:	2301      	movs	r3, #1
 801c664:	4632      	mov	r2, r6
 801c666:	4649      	mov	r1, r9
 801c668:	4640      	mov	r0, r8
 801c66a:	47d0      	blx	sl
 801c66c:	3001      	adds	r0, #1
 801c66e:	d09b      	beq.n	801c5a8 <_printf_i+0x164>
 801c670:	3501      	adds	r5, #1
 801c672:	68e3      	ldr	r3, [r4, #12]
 801c674:	9903      	ldr	r1, [sp, #12]
 801c676:	1a5b      	subs	r3, r3, r1
 801c678:	42ab      	cmp	r3, r5
 801c67a:	dcf2      	bgt.n	801c662 <_printf_i+0x21e>
 801c67c:	e7eb      	b.n	801c656 <_printf_i+0x212>
 801c67e:	2500      	movs	r5, #0
 801c680:	f104 0619 	add.w	r6, r4, #25
 801c684:	e7f5      	b.n	801c672 <_printf_i+0x22e>
 801c686:	bf00      	nop
 801c688:	080203b3 	.word	0x080203b3
 801c68c:	080203c4 	.word	0x080203c4

0801c690 <_read_r>:
 801c690:	b538      	push	{r3, r4, r5, lr}
 801c692:	4d07      	ldr	r5, [pc, #28]	; (801c6b0 <_read_r+0x20>)
 801c694:	4604      	mov	r4, r0
 801c696:	4608      	mov	r0, r1
 801c698:	4611      	mov	r1, r2
 801c69a:	2200      	movs	r2, #0
 801c69c:	602a      	str	r2, [r5, #0]
 801c69e:	461a      	mov	r2, r3
 801c6a0:	f7e4 fd68 	bl	8001174 <_read>
 801c6a4:	1c43      	adds	r3, r0, #1
 801c6a6:	d102      	bne.n	801c6ae <_read_r+0x1e>
 801c6a8:	682b      	ldr	r3, [r5, #0]
 801c6aa:	b103      	cbz	r3, 801c6ae <_read_r+0x1e>
 801c6ac:	6023      	str	r3, [r4, #0]
 801c6ae:	bd38      	pop	{r3, r4, r5, pc}
 801c6b0:	2405e9f4 	.word	0x2405e9f4

0801c6b4 <__swbuf_r>:
 801c6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6b6:	460e      	mov	r6, r1
 801c6b8:	4614      	mov	r4, r2
 801c6ba:	4605      	mov	r5, r0
 801c6bc:	b118      	cbz	r0, 801c6c6 <__swbuf_r+0x12>
 801c6be:	6983      	ldr	r3, [r0, #24]
 801c6c0:	b90b      	cbnz	r3, 801c6c6 <__swbuf_r+0x12>
 801c6c2:	f7fe ff35 	bl	801b530 <__sinit>
 801c6c6:	4b21      	ldr	r3, [pc, #132]	; (801c74c <__swbuf_r+0x98>)
 801c6c8:	429c      	cmp	r4, r3
 801c6ca:	d12b      	bne.n	801c724 <__swbuf_r+0x70>
 801c6cc:	686c      	ldr	r4, [r5, #4]
 801c6ce:	69a3      	ldr	r3, [r4, #24]
 801c6d0:	60a3      	str	r3, [r4, #8]
 801c6d2:	89a3      	ldrh	r3, [r4, #12]
 801c6d4:	071a      	lsls	r2, r3, #28
 801c6d6:	d52f      	bpl.n	801c738 <__swbuf_r+0x84>
 801c6d8:	6923      	ldr	r3, [r4, #16]
 801c6da:	b36b      	cbz	r3, 801c738 <__swbuf_r+0x84>
 801c6dc:	6923      	ldr	r3, [r4, #16]
 801c6de:	6820      	ldr	r0, [r4, #0]
 801c6e0:	1ac0      	subs	r0, r0, r3
 801c6e2:	6963      	ldr	r3, [r4, #20]
 801c6e4:	b2f6      	uxtb	r6, r6
 801c6e6:	4283      	cmp	r3, r0
 801c6e8:	4637      	mov	r7, r6
 801c6ea:	dc04      	bgt.n	801c6f6 <__swbuf_r+0x42>
 801c6ec:	4621      	mov	r1, r4
 801c6ee:	4628      	mov	r0, r5
 801c6f0:	f7ff fac4 	bl	801bc7c <_fflush_r>
 801c6f4:	bb30      	cbnz	r0, 801c744 <__swbuf_r+0x90>
 801c6f6:	68a3      	ldr	r3, [r4, #8]
 801c6f8:	3b01      	subs	r3, #1
 801c6fa:	60a3      	str	r3, [r4, #8]
 801c6fc:	6823      	ldr	r3, [r4, #0]
 801c6fe:	1c5a      	adds	r2, r3, #1
 801c700:	6022      	str	r2, [r4, #0]
 801c702:	701e      	strb	r6, [r3, #0]
 801c704:	6963      	ldr	r3, [r4, #20]
 801c706:	3001      	adds	r0, #1
 801c708:	4283      	cmp	r3, r0
 801c70a:	d004      	beq.n	801c716 <__swbuf_r+0x62>
 801c70c:	89a3      	ldrh	r3, [r4, #12]
 801c70e:	07db      	lsls	r3, r3, #31
 801c710:	d506      	bpl.n	801c720 <__swbuf_r+0x6c>
 801c712:	2e0a      	cmp	r6, #10
 801c714:	d104      	bne.n	801c720 <__swbuf_r+0x6c>
 801c716:	4621      	mov	r1, r4
 801c718:	4628      	mov	r0, r5
 801c71a:	f7ff faaf 	bl	801bc7c <_fflush_r>
 801c71e:	b988      	cbnz	r0, 801c744 <__swbuf_r+0x90>
 801c720:	4638      	mov	r0, r7
 801c722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c724:	4b0a      	ldr	r3, [pc, #40]	; (801c750 <__swbuf_r+0x9c>)
 801c726:	429c      	cmp	r4, r3
 801c728:	d101      	bne.n	801c72e <__swbuf_r+0x7a>
 801c72a:	68ac      	ldr	r4, [r5, #8]
 801c72c:	e7cf      	b.n	801c6ce <__swbuf_r+0x1a>
 801c72e:	4b09      	ldr	r3, [pc, #36]	; (801c754 <__swbuf_r+0xa0>)
 801c730:	429c      	cmp	r4, r3
 801c732:	bf08      	it	eq
 801c734:	68ec      	ldreq	r4, [r5, #12]
 801c736:	e7ca      	b.n	801c6ce <__swbuf_r+0x1a>
 801c738:	4621      	mov	r1, r4
 801c73a:	4628      	mov	r0, r5
 801c73c:	f000 f80c 	bl	801c758 <__swsetup_r>
 801c740:	2800      	cmp	r0, #0
 801c742:	d0cb      	beq.n	801c6dc <__swbuf_r+0x28>
 801c744:	f04f 37ff 	mov.w	r7, #4294967295
 801c748:	e7ea      	b.n	801c720 <__swbuf_r+0x6c>
 801c74a:	bf00      	nop
 801c74c:	080202b0 	.word	0x080202b0
 801c750:	080202d0 	.word	0x080202d0
 801c754:	08020290 	.word	0x08020290

0801c758 <__swsetup_r>:
 801c758:	4b32      	ldr	r3, [pc, #200]	; (801c824 <__swsetup_r+0xcc>)
 801c75a:	b570      	push	{r4, r5, r6, lr}
 801c75c:	681d      	ldr	r5, [r3, #0]
 801c75e:	4606      	mov	r6, r0
 801c760:	460c      	mov	r4, r1
 801c762:	b125      	cbz	r5, 801c76e <__swsetup_r+0x16>
 801c764:	69ab      	ldr	r3, [r5, #24]
 801c766:	b913      	cbnz	r3, 801c76e <__swsetup_r+0x16>
 801c768:	4628      	mov	r0, r5
 801c76a:	f7fe fee1 	bl	801b530 <__sinit>
 801c76e:	4b2e      	ldr	r3, [pc, #184]	; (801c828 <__swsetup_r+0xd0>)
 801c770:	429c      	cmp	r4, r3
 801c772:	d10f      	bne.n	801c794 <__swsetup_r+0x3c>
 801c774:	686c      	ldr	r4, [r5, #4]
 801c776:	89a3      	ldrh	r3, [r4, #12]
 801c778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c77c:	0719      	lsls	r1, r3, #28
 801c77e:	d42c      	bmi.n	801c7da <__swsetup_r+0x82>
 801c780:	06dd      	lsls	r5, r3, #27
 801c782:	d411      	bmi.n	801c7a8 <__swsetup_r+0x50>
 801c784:	2309      	movs	r3, #9
 801c786:	6033      	str	r3, [r6, #0]
 801c788:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c78c:	81a3      	strh	r3, [r4, #12]
 801c78e:	f04f 30ff 	mov.w	r0, #4294967295
 801c792:	e03e      	b.n	801c812 <__swsetup_r+0xba>
 801c794:	4b25      	ldr	r3, [pc, #148]	; (801c82c <__swsetup_r+0xd4>)
 801c796:	429c      	cmp	r4, r3
 801c798:	d101      	bne.n	801c79e <__swsetup_r+0x46>
 801c79a:	68ac      	ldr	r4, [r5, #8]
 801c79c:	e7eb      	b.n	801c776 <__swsetup_r+0x1e>
 801c79e:	4b24      	ldr	r3, [pc, #144]	; (801c830 <__swsetup_r+0xd8>)
 801c7a0:	429c      	cmp	r4, r3
 801c7a2:	bf08      	it	eq
 801c7a4:	68ec      	ldreq	r4, [r5, #12]
 801c7a6:	e7e6      	b.n	801c776 <__swsetup_r+0x1e>
 801c7a8:	0758      	lsls	r0, r3, #29
 801c7aa:	d512      	bpl.n	801c7d2 <__swsetup_r+0x7a>
 801c7ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c7ae:	b141      	cbz	r1, 801c7c2 <__swsetup_r+0x6a>
 801c7b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c7b4:	4299      	cmp	r1, r3
 801c7b6:	d002      	beq.n	801c7be <__swsetup_r+0x66>
 801c7b8:	4630      	mov	r0, r6
 801c7ba:	f7ff fad3 	bl	801bd64 <_free_r>
 801c7be:	2300      	movs	r3, #0
 801c7c0:	6363      	str	r3, [r4, #52]	; 0x34
 801c7c2:	89a3      	ldrh	r3, [r4, #12]
 801c7c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c7c8:	81a3      	strh	r3, [r4, #12]
 801c7ca:	2300      	movs	r3, #0
 801c7cc:	6063      	str	r3, [r4, #4]
 801c7ce:	6923      	ldr	r3, [r4, #16]
 801c7d0:	6023      	str	r3, [r4, #0]
 801c7d2:	89a3      	ldrh	r3, [r4, #12]
 801c7d4:	f043 0308 	orr.w	r3, r3, #8
 801c7d8:	81a3      	strh	r3, [r4, #12]
 801c7da:	6923      	ldr	r3, [r4, #16]
 801c7dc:	b94b      	cbnz	r3, 801c7f2 <__swsetup_r+0x9a>
 801c7de:	89a3      	ldrh	r3, [r4, #12]
 801c7e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c7e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c7e8:	d003      	beq.n	801c7f2 <__swsetup_r+0x9a>
 801c7ea:	4621      	mov	r1, r4
 801c7ec:	4630      	mov	r0, r6
 801c7ee:	f000 f84d 	bl	801c88c <__smakebuf_r>
 801c7f2:	89a0      	ldrh	r0, [r4, #12]
 801c7f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c7f8:	f010 0301 	ands.w	r3, r0, #1
 801c7fc:	d00a      	beq.n	801c814 <__swsetup_r+0xbc>
 801c7fe:	2300      	movs	r3, #0
 801c800:	60a3      	str	r3, [r4, #8]
 801c802:	6963      	ldr	r3, [r4, #20]
 801c804:	425b      	negs	r3, r3
 801c806:	61a3      	str	r3, [r4, #24]
 801c808:	6923      	ldr	r3, [r4, #16]
 801c80a:	b943      	cbnz	r3, 801c81e <__swsetup_r+0xc6>
 801c80c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c810:	d1ba      	bne.n	801c788 <__swsetup_r+0x30>
 801c812:	bd70      	pop	{r4, r5, r6, pc}
 801c814:	0781      	lsls	r1, r0, #30
 801c816:	bf58      	it	pl
 801c818:	6963      	ldrpl	r3, [r4, #20]
 801c81a:	60a3      	str	r3, [r4, #8]
 801c81c:	e7f4      	b.n	801c808 <__swsetup_r+0xb0>
 801c81e:	2000      	movs	r0, #0
 801c820:	e7f7      	b.n	801c812 <__swsetup_r+0xba>
 801c822:	bf00      	nop
 801c824:	24000034 	.word	0x24000034
 801c828:	080202b0 	.word	0x080202b0
 801c82c:	080202d0 	.word	0x080202d0
 801c830:	08020290 	.word	0x08020290

0801c834 <abort>:
 801c834:	b508      	push	{r3, lr}
 801c836:	2006      	movs	r0, #6
 801c838:	f000 f8c0 	bl	801c9bc <raise>
 801c83c:	2001      	movs	r0, #1
 801c83e:	f7e4 fc8f 	bl	8001160 <_exit>

0801c842 <__swhatbuf_r>:
 801c842:	b570      	push	{r4, r5, r6, lr}
 801c844:	460e      	mov	r6, r1
 801c846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c84a:	2900      	cmp	r1, #0
 801c84c:	b096      	sub	sp, #88	; 0x58
 801c84e:	4614      	mov	r4, r2
 801c850:	461d      	mov	r5, r3
 801c852:	da08      	bge.n	801c866 <__swhatbuf_r+0x24>
 801c854:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c858:	2200      	movs	r2, #0
 801c85a:	602a      	str	r2, [r5, #0]
 801c85c:	061a      	lsls	r2, r3, #24
 801c85e:	d410      	bmi.n	801c882 <__swhatbuf_r+0x40>
 801c860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c864:	e00e      	b.n	801c884 <__swhatbuf_r+0x42>
 801c866:	466a      	mov	r2, sp
 801c868:	f000 f8c4 	bl	801c9f4 <_fstat_r>
 801c86c:	2800      	cmp	r0, #0
 801c86e:	dbf1      	blt.n	801c854 <__swhatbuf_r+0x12>
 801c870:	9a01      	ldr	r2, [sp, #4]
 801c872:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c876:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c87a:	425a      	negs	r2, r3
 801c87c:	415a      	adcs	r2, r3
 801c87e:	602a      	str	r2, [r5, #0]
 801c880:	e7ee      	b.n	801c860 <__swhatbuf_r+0x1e>
 801c882:	2340      	movs	r3, #64	; 0x40
 801c884:	2000      	movs	r0, #0
 801c886:	6023      	str	r3, [r4, #0]
 801c888:	b016      	add	sp, #88	; 0x58
 801c88a:	bd70      	pop	{r4, r5, r6, pc}

0801c88c <__smakebuf_r>:
 801c88c:	898b      	ldrh	r3, [r1, #12]
 801c88e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c890:	079d      	lsls	r5, r3, #30
 801c892:	4606      	mov	r6, r0
 801c894:	460c      	mov	r4, r1
 801c896:	d507      	bpl.n	801c8a8 <__smakebuf_r+0x1c>
 801c898:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c89c:	6023      	str	r3, [r4, #0]
 801c89e:	6123      	str	r3, [r4, #16]
 801c8a0:	2301      	movs	r3, #1
 801c8a2:	6163      	str	r3, [r4, #20]
 801c8a4:	b002      	add	sp, #8
 801c8a6:	bd70      	pop	{r4, r5, r6, pc}
 801c8a8:	ab01      	add	r3, sp, #4
 801c8aa:	466a      	mov	r2, sp
 801c8ac:	f7ff ffc9 	bl	801c842 <__swhatbuf_r>
 801c8b0:	9900      	ldr	r1, [sp, #0]
 801c8b2:	4605      	mov	r5, r0
 801c8b4:	4630      	mov	r0, r6
 801c8b6:	f7fe ff61 	bl	801b77c <_malloc_r>
 801c8ba:	b948      	cbnz	r0, 801c8d0 <__smakebuf_r+0x44>
 801c8bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c8c0:	059a      	lsls	r2, r3, #22
 801c8c2:	d4ef      	bmi.n	801c8a4 <__smakebuf_r+0x18>
 801c8c4:	f023 0303 	bic.w	r3, r3, #3
 801c8c8:	f043 0302 	orr.w	r3, r3, #2
 801c8cc:	81a3      	strh	r3, [r4, #12]
 801c8ce:	e7e3      	b.n	801c898 <__smakebuf_r+0xc>
 801c8d0:	4b0d      	ldr	r3, [pc, #52]	; (801c908 <__smakebuf_r+0x7c>)
 801c8d2:	62b3      	str	r3, [r6, #40]	; 0x28
 801c8d4:	89a3      	ldrh	r3, [r4, #12]
 801c8d6:	6020      	str	r0, [r4, #0]
 801c8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c8dc:	81a3      	strh	r3, [r4, #12]
 801c8de:	9b00      	ldr	r3, [sp, #0]
 801c8e0:	6163      	str	r3, [r4, #20]
 801c8e2:	9b01      	ldr	r3, [sp, #4]
 801c8e4:	6120      	str	r0, [r4, #16]
 801c8e6:	b15b      	cbz	r3, 801c900 <__smakebuf_r+0x74>
 801c8e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c8ec:	4630      	mov	r0, r6
 801c8ee:	f000 f893 	bl	801ca18 <_isatty_r>
 801c8f2:	b128      	cbz	r0, 801c900 <__smakebuf_r+0x74>
 801c8f4:	89a3      	ldrh	r3, [r4, #12]
 801c8f6:	f023 0303 	bic.w	r3, r3, #3
 801c8fa:	f043 0301 	orr.w	r3, r3, #1
 801c8fe:	81a3      	strh	r3, [r4, #12]
 801c900:	89a0      	ldrh	r0, [r4, #12]
 801c902:	4305      	orrs	r5, r0
 801c904:	81a5      	strh	r5, [r4, #12]
 801c906:	e7cd      	b.n	801c8a4 <__smakebuf_r+0x18>
 801c908:	0801b4c9 	.word	0x0801b4c9

0801c90c <_realloc_r>:
 801c90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c910:	4680      	mov	r8, r0
 801c912:	4614      	mov	r4, r2
 801c914:	460e      	mov	r6, r1
 801c916:	b921      	cbnz	r1, 801c922 <_realloc_r+0x16>
 801c918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c91c:	4611      	mov	r1, r2
 801c91e:	f7fe bf2d 	b.w	801b77c <_malloc_r>
 801c922:	b92a      	cbnz	r2, 801c930 <_realloc_r+0x24>
 801c924:	f7ff fa1e 	bl	801bd64 <_free_r>
 801c928:	4625      	mov	r5, r4
 801c92a:	4628      	mov	r0, r5
 801c92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c930:	f000 f882 	bl	801ca38 <_malloc_usable_size_r>
 801c934:	4284      	cmp	r4, r0
 801c936:	4607      	mov	r7, r0
 801c938:	d802      	bhi.n	801c940 <_realloc_r+0x34>
 801c93a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c93e:	d812      	bhi.n	801c966 <_realloc_r+0x5a>
 801c940:	4621      	mov	r1, r4
 801c942:	4640      	mov	r0, r8
 801c944:	f7fe ff1a 	bl	801b77c <_malloc_r>
 801c948:	4605      	mov	r5, r0
 801c94a:	2800      	cmp	r0, #0
 801c94c:	d0ed      	beq.n	801c92a <_realloc_r+0x1e>
 801c94e:	42bc      	cmp	r4, r7
 801c950:	4622      	mov	r2, r4
 801c952:	4631      	mov	r1, r6
 801c954:	bf28      	it	cs
 801c956:	463a      	movcs	r2, r7
 801c958:	f7fe febf 	bl	801b6da <memcpy>
 801c95c:	4631      	mov	r1, r6
 801c95e:	4640      	mov	r0, r8
 801c960:	f7ff fa00 	bl	801bd64 <_free_r>
 801c964:	e7e1      	b.n	801c92a <_realloc_r+0x1e>
 801c966:	4635      	mov	r5, r6
 801c968:	e7df      	b.n	801c92a <_realloc_r+0x1e>

0801c96a <_raise_r>:
 801c96a:	291f      	cmp	r1, #31
 801c96c:	b538      	push	{r3, r4, r5, lr}
 801c96e:	4604      	mov	r4, r0
 801c970:	460d      	mov	r5, r1
 801c972:	d904      	bls.n	801c97e <_raise_r+0x14>
 801c974:	2316      	movs	r3, #22
 801c976:	6003      	str	r3, [r0, #0]
 801c978:	f04f 30ff 	mov.w	r0, #4294967295
 801c97c:	bd38      	pop	{r3, r4, r5, pc}
 801c97e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c980:	b112      	cbz	r2, 801c988 <_raise_r+0x1e>
 801c982:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c986:	b94b      	cbnz	r3, 801c99c <_raise_r+0x32>
 801c988:	4620      	mov	r0, r4
 801c98a:	f000 f831 	bl	801c9f0 <_getpid_r>
 801c98e:	462a      	mov	r2, r5
 801c990:	4601      	mov	r1, r0
 801c992:	4620      	mov	r0, r4
 801c994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c998:	f000 b818 	b.w	801c9cc <_kill_r>
 801c99c:	2b01      	cmp	r3, #1
 801c99e:	d00a      	beq.n	801c9b6 <_raise_r+0x4c>
 801c9a0:	1c59      	adds	r1, r3, #1
 801c9a2:	d103      	bne.n	801c9ac <_raise_r+0x42>
 801c9a4:	2316      	movs	r3, #22
 801c9a6:	6003      	str	r3, [r0, #0]
 801c9a8:	2001      	movs	r0, #1
 801c9aa:	e7e7      	b.n	801c97c <_raise_r+0x12>
 801c9ac:	2400      	movs	r4, #0
 801c9ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c9b2:	4628      	mov	r0, r5
 801c9b4:	4798      	blx	r3
 801c9b6:	2000      	movs	r0, #0
 801c9b8:	e7e0      	b.n	801c97c <_raise_r+0x12>
	...

0801c9bc <raise>:
 801c9bc:	4b02      	ldr	r3, [pc, #8]	; (801c9c8 <raise+0xc>)
 801c9be:	4601      	mov	r1, r0
 801c9c0:	6818      	ldr	r0, [r3, #0]
 801c9c2:	f7ff bfd2 	b.w	801c96a <_raise_r>
 801c9c6:	bf00      	nop
 801c9c8:	24000034 	.word	0x24000034

0801c9cc <_kill_r>:
 801c9cc:	b538      	push	{r3, r4, r5, lr}
 801c9ce:	4d07      	ldr	r5, [pc, #28]	; (801c9ec <_kill_r+0x20>)
 801c9d0:	2300      	movs	r3, #0
 801c9d2:	4604      	mov	r4, r0
 801c9d4:	4608      	mov	r0, r1
 801c9d6:	4611      	mov	r1, r2
 801c9d8:	602b      	str	r3, [r5, #0]
 801c9da:	f7e4 fbaf 	bl	800113c <_kill>
 801c9de:	1c43      	adds	r3, r0, #1
 801c9e0:	d102      	bne.n	801c9e8 <_kill_r+0x1c>
 801c9e2:	682b      	ldr	r3, [r5, #0]
 801c9e4:	b103      	cbz	r3, 801c9e8 <_kill_r+0x1c>
 801c9e6:	6023      	str	r3, [r4, #0]
 801c9e8:	bd38      	pop	{r3, r4, r5, pc}
 801c9ea:	bf00      	nop
 801c9ec:	2405e9f4 	.word	0x2405e9f4

0801c9f0 <_getpid_r>:
 801c9f0:	f7e4 bb9c 	b.w	800112c <_getpid>

0801c9f4 <_fstat_r>:
 801c9f4:	b538      	push	{r3, r4, r5, lr}
 801c9f6:	4d07      	ldr	r5, [pc, #28]	; (801ca14 <_fstat_r+0x20>)
 801c9f8:	2300      	movs	r3, #0
 801c9fa:	4604      	mov	r4, r0
 801c9fc:	4608      	mov	r0, r1
 801c9fe:	4611      	mov	r1, r2
 801ca00:	602b      	str	r3, [r5, #0]
 801ca02:	f7e4 fbfc 	bl	80011fe <_fstat>
 801ca06:	1c43      	adds	r3, r0, #1
 801ca08:	d102      	bne.n	801ca10 <_fstat_r+0x1c>
 801ca0a:	682b      	ldr	r3, [r5, #0]
 801ca0c:	b103      	cbz	r3, 801ca10 <_fstat_r+0x1c>
 801ca0e:	6023      	str	r3, [r4, #0]
 801ca10:	bd38      	pop	{r3, r4, r5, pc}
 801ca12:	bf00      	nop
 801ca14:	2405e9f4 	.word	0x2405e9f4

0801ca18 <_isatty_r>:
 801ca18:	b538      	push	{r3, r4, r5, lr}
 801ca1a:	4d06      	ldr	r5, [pc, #24]	; (801ca34 <_isatty_r+0x1c>)
 801ca1c:	2300      	movs	r3, #0
 801ca1e:	4604      	mov	r4, r0
 801ca20:	4608      	mov	r0, r1
 801ca22:	602b      	str	r3, [r5, #0]
 801ca24:	f7e4 fbfb 	bl	800121e <_isatty>
 801ca28:	1c43      	adds	r3, r0, #1
 801ca2a:	d102      	bne.n	801ca32 <_isatty_r+0x1a>
 801ca2c:	682b      	ldr	r3, [r5, #0]
 801ca2e:	b103      	cbz	r3, 801ca32 <_isatty_r+0x1a>
 801ca30:	6023      	str	r3, [r4, #0]
 801ca32:	bd38      	pop	{r3, r4, r5, pc}
 801ca34:	2405e9f4 	.word	0x2405e9f4

0801ca38 <_malloc_usable_size_r>:
 801ca38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ca3c:	1f18      	subs	r0, r3, #4
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	bfbc      	itt	lt
 801ca42:	580b      	ldrlt	r3, [r1, r0]
 801ca44:	18c0      	addlt	r0, r0, r3
 801ca46:	4770      	bx	lr

0801ca48 <_init>:
 801ca48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca4a:	bf00      	nop
 801ca4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ca4e:	bc08      	pop	{r3}
 801ca50:	469e      	mov	lr, r3
 801ca52:	4770      	bx	lr

0801ca54 <_fini>:
 801ca54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca56:	bf00      	nop
 801ca58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ca5a:	bc08      	pop	{r3}
 801ca5c:	469e      	mov	lr, r3
 801ca5e:	4770      	bx	lr

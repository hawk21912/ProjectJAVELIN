
JAVELIN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f1a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003994  0801f440  0801f440  0002f440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08022dd4  08022dd4  00032dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08022ddc  08022ddc  00032ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08022de0  08022de0  00032de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  08022de4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000098  08022e7c  00040098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000f8  08022edc  000400f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0005e9c4  24000158  08022f3c  00040158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2405eb1c  08022f3c  0004eb1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b756  00000000  00000000  00040186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009b89  00000000  00000000  0008b8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003118  00000000  00000000  00095468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002ee0  00000000  00000000  00098580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004ffa6  00000000  00000000  0009b460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00050666  00000000  00000000  000eb406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a9a1b  00000000  00000000  0013ba6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002e5487  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d784  00000000  00000000  002e54d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000158 	.word	0x24000158
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801f428 	.word	0x0801f428

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400015c 	.word	0x2400015c
 80002dc:	0801f428 	.word	0x0801f428

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
 8000698:	615a      	str	r2, [r3, #20]
 800069a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <MX_ADC3_Init+0xb8>)
 800069e:	4a28      	ldr	r2, [pc, #160]	; (8000740 <MX_ADC3_Init+0xbc>)
 80006a0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_ADC3_Init+0xb8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <MX_ADC3_Init+0xb8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <MX_ADC3_Init+0xb8>)
 80006b0:	2204      	movs	r2, #4
 80006b2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_ADC3_Init+0xb8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_ADC3_Init+0xb8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_ADC3_Init+0xb8>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_ADC3_Init+0xb8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_ADC3_Init+0xb8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_ADC3_Init+0xb8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_ADC3_Init+0xb8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_ADC3_Init+0xb8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_ADC3_Init+0xb8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_ADC3_Init+0xb8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006f2:	4812      	ldr	r0, [pc, #72]	; (800073c <MX_ADC3_Init+0xb8>)
 80006f4:	f001 fcd4 	bl	80020a0 <HAL_ADC_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 80006fe:	f000 fd2b 	bl	8001158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_ADC3_Init+0xc0>)
 8000704:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000706:	2306      	movs	r3, #6
 8000708:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800070e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000712:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000714:	2304      	movs	r3, #4
 8000716:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_ADC3_Init+0xb8>)
 8000726:	f001 ff35 	bl	8002594 <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000730:	f000 fd12 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	24000174 	.word	0x24000174
 8000740:	58026000 	.word	0x58026000
 8000744:	cb840000 	.word	0xcb840000

08000748 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0b2      	sub	sp, #200	; 0xc8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	22bc      	movs	r2, #188	; 0xbc
 8000756:	2100      	movs	r1, #0
 8000758:	4618      	mov	r0, r3
 800075a:	f01d fcd6 	bl	801e10a <memset>
  if(adcHandle->Instance==ADC3)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <HAL_ADC_MspInit+0x88>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d12e      	bne.n	80007c6 <HAL_ADC_MspInit+0x7e>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000768:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800076c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 800076e:	2320      	movs	r3, #32
 8000770:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 8000772:	2364      	movs	r3, #100	; 0x64
 8000774:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800077e:	2302      	movs	r3, #2
 8000780:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000782:	2340      	movs	r3, #64	; 0x40
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000786:	2300      	movs	r3, #0
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800078e:	2300      	movs	r3, #0
 8000790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4618      	mov	r0, r3
 800079a:	f006 fd85 	bl	80072a8 <HAL_RCCEx_PeriphCLKConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 80007a4:	f000 fcd8 	bl	8001158 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <HAL_ADC_MspInit+0x8c>)
 80007aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ae:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <HAL_ADC_MspInit+0x8c>)
 80007b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_ADC_MspInit+0x8c>)
 80007ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80007c6:	bf00      	nop
 80007c8:	37c8      	adds	r7, #200	; 0xc8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	58026000 	.word	0x58026000
 80007d4:	58024400 	.word	0x58024400

080007d8 <HAL_ADC_ConvCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
    // Conversion Complete & DMA Transfer Complete As Well

    HAL_UART_Transmit(&huart3,"ADC done\n\r",30,100);
 80007e0:	2364      	movs	r3, #100	; 0x64
 80007e2:	221e      	movs	r2, #30
 80007e4:	4903      	ldr	r1, [pc, #12]	; (80007f4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80007e6:	4804      	ldr	r0, [pc, #16]	; (80007f8 <HAL_ADC_ConvCpltCallback+0x20>)
 80007e8:	f009 ff7f 	bl	800a6ea <HAL_UART_Transmit>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	0801f440 	.word	0x0801f440
 80007f8:	24000424 	.word	0x24000424

080007fc <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000800:	4b2e      	ldr	r3, [pc, #184]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 8000802:	4a2f      	ldr	r2, [pc, #188]	; (80008c0 <MX_FDCAN1_Init+0xc4>)
 8000804:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800080c:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000812:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 8000814:	2200      	movs	r2, #0
 8000816:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 800081a:	2200      	movs	r2, #0
 800081c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 8000820:	2200      	movs	r2, #0
 8000822:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000824:	4b25      	ldr	r3, [pc, #148]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 8000826:	2210      	movs	r2, #16
 8000828:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 800082c:	2201      	movs	r2, #1
 800082e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000830:	4b22      	ldr	r3, [pc, #136]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 8000832:	2202      	movs	r2, #2
 8000834:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 8000838:	2202      	movs	r2, #2
 800083a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 800083e:	2201      	movs	r2, #1
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000842:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 8000844:	2201      	movs	r2, #1
 8000846:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 800084a:	2201      	movs	r2, #1
 800084c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 8000850:	2201      	movs	r2, #1
 8000852:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 8000856:	2200      	movs	r2, #0
 8000858:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 800085c:	2200      	movs	r2, #0
 800085e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 8000862:	2200      	movs	r2, #0
 8000864:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 8000868:	2200      	movs	r2, #0
 800086a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 800086e:	2204      	movs	r2, #4
 8000870:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000878:	4b10      	ldr	r3, [pc, #64]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 800087a:	2204      	movs	r2, #4
 800087c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 8000886:	2204      	movs	r2, #4
 8000888:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 800088c:	2200      	movs	r2, #0
 800088e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 8000892:	2200      	movs	r2, #0
 8000894:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 8000898:	2200      	movs	r2, #0
 800089a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 80008a4:	2204      	movs	r2, #4
 80008a6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_FDCAN1_Init+0xc0>)
 80008aa:	f004 ff21 	bl	80056f0 <HAL_FDCAN_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80008b4:	f000 fc50 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	240001d8 	.word	0x240001d8
 80008c0:	4000a000 	.word	0x4000a000

080008c4 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80008c8:	4b2e      	ldr	r3, [pc, #184]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 80008ca:	4a2f      	ldr	r2, [pc, #188]	; (8000988 <MX_FDCAN2_Init+0xc4>)
 80008cc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008ce:	4b2d      	ldr	r3, [pc, #180]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80008d4:	4b2b      	ldr	r3, [pc, #172]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80008da:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80008e0:	4b28      	ldr	r3, [pc, #160]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80008e6:	4b27      	ldr	r3, [pc, #156]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80008ec:	4b25      	ldr	r3, [pc, #148]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 80008ee:	2210      	movs	r2, #16
 80008f0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80008f2:	4b24      	ldr	r3, [pc, #144]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80008f8:	4b22      	ldr	r3, [pc, #136]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 80008fa:	2202      	movs	r2, #2
 80008fc:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 8000900:	2202      	movs	r2, #2
 8000902:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 8000906:	2201      	movs	r2, #1
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800090a:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 800090c:	2201      	movs	r2, #1
 800090e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000910:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 8000912:	2201      	movs	r2, #1
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 8000918:	2201      	movs	r2, #1
 800091a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 800091c:	4b19      	ldr	r3, [pc, #100]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 800091e:	2200      	movs	r2, #0
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 8000924:	2200      	movs	r2, #0
 8000926:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 800092a:	2200      	movs	r2, #0
 800092c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 8000930:	2200      	movs	r2, #0
 8000932:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 8000936:	2204      	movs	r2, #4
 8000938:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 800093c:	2200      	movs	r2, #0
 800093e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 8000942:	2204      	movs	r2, #4
 8000944:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 8000948:	2200      	movs	r2, #0
 800094a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 800094e:	2204      	movs	r2, #4
 8000950:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 8000954:	2200      	movs	r2, #0
 8000956:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 800095a:	2200      	movs	r2, #0
 800095c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 8000960:	2200      	movs	r2, #0
 8000962:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 8000966:	2200      	movs	r2, #0
 8000968:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 800096c:	2204      	movs	r2, #4
 800096e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_FDCAN2_Init+0xc0>)
 8000972:	f004 febd 	bl	80056f0 <HAL_FDCAN_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 800097c:	f000 fbec 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	24000278 	.word	0x24000278
 8000988:	4000a400 	.word	0x4000a400

0800098c <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b0ba      	sub	sp, #232	; 0xe8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a4:	f107 0318 	add.w	r3, r7, #24
 80009a8:	22bc      	movs	r2, #188	; 0xbc
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f01d fbac 	bl	801e10a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a52      	ldr	r2, [pc, #328]	; (8000b00 <HAL_FDCAN_MspInit+0x174>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d14c      	bne.n	8000a56 <HAL_FDCAN_MspInit+0xca>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80009bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c8:	f107 0318 	add.w	r3, r7, #24
 80009cc:	4618      	mov	r0, r3
 80009ce:	f006 fc6b 	bl	80072a8 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80009d8:	f000 fbbe 	bl	8001158 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80009dc:	4b49      	ldr	r3, [pc, #292]	; (8000b04 <HAL_FDCAN_MspInit+0x178>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	4a48      	ldr	r2, [pc, #288]	; (8000b04 <HAL_FDCAN_MspInit+0x178>)
 80009e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80009e6:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <HAL_FDCAN_MspInit+0x178>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d10e      	bne.n	8000a0c <HAL_FDCAN_MspInit+0x80>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80009ee:	4b46      	ldr	r3, [pc, #280]	; (8000b08 <HAL_FDCAN_MspInit+0x17c>)
 80009f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80009f4:	4a44      	ldr	r2, [pc, #272]	; (8000b08 <HAL_FDCAN_MspInit+0x17c>)
 80009f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009fa:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80009fe:	4b42      	ldr	r3, [pc, #264]	; (8000b08 <HAL_FDCAN_MspInit+0x17c>)
 8000a00:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0c:	4b3e      	ldr	r3, [pc, #248]	; (8000b08 <HAL_FDCAN_MspInit+0x17c>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a12:	4a3d      	ldr	r2, [pc, #244]	; (8000b08 <HAL_FDCAN_MspInit+0x17c>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1c:	4b3a      	ldr	r3, [pc, #232]	; (8000b08 <HAL_FDCAN_MspInit+0x17c>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a42:	2309      	movs	r3, #9
 8000a44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	482f      	ldr	r0, [pc, #188]	; (8000b0c <HAL_FDCAN_MspInit+0x180>)
 8000a50:	f005 f9b2 	bl	8005db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8000a54:	e050      	b.n	8000af8 <HAL_FDCAN_MspInit+0x16c>
  else if(fdcanHandle->Instance==FDCAN2)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a2d      	ldr	r2, [pc, #180]	; (8000b10 <HAL_FDCAN_MspInit+0x184>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d14b      	bne.n	8000af8 <HAL_FDCAN_MspInit+0x16c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a64:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a6c:	f107 0318 	add.w	r3, r7, #24
 8000a70:	4618      	mov	r0, r3
 8000a72:	f006 fc19 	bl	80072a8 <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_FDCAN_MspInit+0xf4>
      Error_Handler();
 8000a7c:	f000 fb6c 	bl	8001158 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <HAL_FDCAN_MspInit+0x178>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	4a1f      	ldr	r2, [pc, #124]	; (8000b04 <HAL_FDCAN_MspInit+0x178>)
 8000a88:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <HAL_FDCAN_MspInit+0x178>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d10e      	bne.n	8000ab0 <HAL_FDCAN_MspInit+0x124>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a92:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <HAL_FDCAN_MspInit+0x17c>)
 8000a94:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000a98:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <HAL_FDCAN_MspInit+0x17c>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <HAL_FDCAN_MspInit+0x17c>)
 8000aa4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_FDCAN_MspInit+0x17c>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab6:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <HAL_FDCAN_MspInit+0x17c>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <HAL_FDCAN_MspInit+0x17c>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ace:	2360      	movs	r3, #96	; 0x60
 8000ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000ae6:	2309      	movs	r3, #9
 8000ae8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000af0:	4619      	mov	r1, r3
 8000af2:	4808      	ldr	r0, [pc, #32]	; (8000b14 <HAL_FDCAN_MspInit+0x188>)
 8000af4:	f005 f960 	bl	8005db8 <HAL_GPIO_Init>
}
 8000af8:	bf00      	nop
 8000afa:	37e8      	adds	r7, #232	; 0xe8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	4000a000 	.word	0x4000a000
 8000b04:	24000318 	.word	0x24000318
 8000b08:	58024400 	.word	0x58024400
 8000b0c:	58020c00 	.word	0x58020c00
 8000b10:	4000a400 	.word	0x4000a400
 8000b14:	58020400 	.word	0x58020400

08000b18 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <MX_FREERTOS_Init+0x38>)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	480c      	ldr	r0, [pc, #48]	; (8000b54 <MX_FREERTOS_Init+0x3c>)
 8000b22:	f00b fe88 	bl	800c836 <osThreadNew>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <MX_FREERTOS_Init+0x40>)
 8000b2a:	6013      	str	r3, [r2, #0]

  /* creation of Blink */
  BlinkHandle = osThreadNew(Blink_Init, NULL, &Blink_attributes);
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <MX_FREERTOS_Init+0x44>)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	480b      	ldr	r0, [pc, #44]	; (8000b60 <MX_FREERTOS_Init+0x48>)
 8000b32:	f00b fe80 	bl	800c836 <osThreadNew>
 8000b36:	4603      	mov	r3, r0
 8000b38:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <MX_FREERTOS_Init+0x4c>)
 8000b3a:	6013      	str	r3, [r2, #0]

  /* creation of IDWGTrigger */
  IDWGTriggerHandle = osThreadNew(IDWGTrigger_Init, NULL, &IDWGTrigger_attributes);
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <MX_FREERTOS_Init+0x50>)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	480a      	ldr	r0, [pc, #40]	; (8000b6c <MX_FREERTOS_Init+0x54>)
 8000b42:	f00b fe78 	bl	800c836 <osThreadNew>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4a09      	ldr	r2, [pc, #36]	; (8000b70 <MX_FREERTOS_Init+0x58>)
 8000b4a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	08022ab4 	.word	0x08022ab4
 8000b54:	08000b75 	.word	0x08000b75
 8000b58:	2400031c 	.word	0x2400031c
 8000b5c:	08022ad8 	.word	0x08022ad8
 8000b60:	08000b91 	.word	0x08000b91
 8000b64:	24000320 	.word	0x24000320
 8000b68:	08022afc 	.word	0x08022afc
 8000b6c:	08000bfd 	.word	0x08000bfd
 8000b70:	24000324 	.word	0x24000324

08000b74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b7c:	f00a ff66 	bl	800ba4c <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
 // osThreadDef(TCPServer, tcpserver_init, osPriorityNormal, 0, 1024);
 // TCPServerHandle = osThreadCreate(osThread(TCPServer), NULL);
  tcpserver_init();
 8000b80:	f00a ff50 	bl	800ba24 <tcpserver_init>


  for(;;)
  {

    osDelay(1000);
 8000b84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b88:	f00b fee7 	bl	800c95a <osDelay>
 8000b8c:	e7fa      	b.n	8000b84 <StartDefaultTask+0x10>
	...

08000b90 <Blink_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Blink_Init */
void Blink_Init(void *argument)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b0a0      	sub	sp, #128	; 0x80
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Blink_Init */
  /* Infinite loop */
	int cnt = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	67fb      	str	r3, [r7, #124]	; 0x7c
		  char msg[100];
		uint32_t tick;

    volatile uint16_t adc_val;
    HAL_ADC_Start_DMA(&hadc3,&adc_val,1);
 8000b9c:	f107 030e 	add.w	r3, r7, #14
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4812      	ldr	r0, [pc, #72]	; (8000bf0 <Blink_Init+0x60>)
 8000ba6:	f001 fc1d 	bl	80023e4 <HAL_ADC_Start_DMA>
  for(;;)
  {
      HAL_ADC_Start_DMA(&hadc3,&adc_val,3);
 8000baa:	f107 030e 	add.w	r3, r7, #14
 8000bae:	2203      	movs	r2, #3
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480f      	ldr	r0, [pc, #60]	; (8000bf0 <Blink_Init+0x60>)
 8000bb4:	f001 fc16 	bl	80023e4 <HAL_ADC_Start_DMA>

	  tick=  osKernelGetTickCount();
 8000bb8:	f00b fe28 	bl	800c80c <osKernelGetTickCount>
 8000bbc:	67b8      	str	r0, [r7, #120]	; 0x78
	  int len = sprintf(msg,"TICKS Since last issue :%d adc val: %d\n\r",tick,adc_val);
 8000bbe:	89fb      	ldrh	r3, [r7, #14]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	f107 0010 	add.w	r0, r7, #16
 8000bc6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000bc8:	490a      	ldr	r1, [pc, #40]	; (8000bf4 <Blink_Init+0x64>)
 8000bca:	f01d fc0b 	bl	801e3e4 <siprintf>
 8000bce:	6778      	str	r0, [r7, #116]	; 0x74
	 HAL_UART_Transmit(&huart3, msg,len , 100);
 8000bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	f107 0110 	add.w	r1, r7, #16
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <Blink_Init+0x68>)
 8000bdc:	f009 fd85 	bl	800a6ea <HAL_UART_Transmit>

	 	  cnt++;
 8000be0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000be2:	3301      	adds	r3, #1
 8000be4:	67fb      	str	r3, [r7, #124]	; 0x7c
    osDelay(1000);
 8000be6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bea:	f00b feb6 	bl	800c95a <osDelay>
  {
 8000bee:	e7dc      	b.n	8000baa <Blink_Init+0x1a>
 8000bf0:	24000174 	.word	0x24000174
 8000bf4:	0801f46c 	.word	0x0801f46c
 8000bf8:	24000424 	.word	0x24000424

08000bfc <IDWGTrigger_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IDWGTrigger_Init */
void IDWGTrigger_Init(void *argument)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IDWGTrigger_Init */
  /* Infinite loop */
  for(;;)
  {
	  HAL_IWDG_Refresh(&hiwdg1);
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <IDWGTrigger_Init+0x18>)
 8000c06:	f005 fb09 	bl	800621c <HAL_IWDG_Refresh>
    osDelay(1);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f00b fea5 	bl	800c95a <osDelay>
	  HAL_IWDG_Refresh(&hiwdg1);
 8000c10:	e7f8      	b.n	8000c04 <IDWGTrigger_Init+0x8>
 8000c12:	bf00      	nop
 8000c14:	24000328 	.word	0x24000328

08000c18 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08c      	sub	sp, #48	; 0x30
 8000c1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	4b69      	ldr	r3, [pc, #420]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a67      	ldr	r2, [pc, #412]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000c36:	f043 0304 	orr.w	r3, r3, #4
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b65      	ldr	r3, [pc, #404]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4c:	4b61      	ldr	r3, [pc, #388]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	4a60      	ldr	r2, [pc, #384]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5c:	4b5d      	ldr	r3, [pc, #372]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b5a      	ldr	r3, [pc, #360]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	4a58      	ldr	r2, [pc, #352]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7a:	4b56      	ldr	r3, [pc, #344]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c88:	4b52      	ldr	r3, [pc, #328]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	4a51      	ldr	r2, [pc, #324]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c98:	4b4e      	ldr	r3, [pc, #312]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca6:	4b4b      	ldr	r3, [pc, #300]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	4a49      	ldr	r2, [pc, #292]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000cae:	f043 0308 	orr.w	r3, r3, #8
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb6:	4b47      	ldr	r3, [pc, #284]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cc4:	4b43      	ldr	r3, [pc, #268]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cca:	4a42      	ldr	r2, [pc, #264]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd4:	4b3f      	ldr	r3, [pc, #252]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce2:	4b3c      	ldr	r3, [pc, #240]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	4a3a      	ldr	r2, [pc, #232]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000cea:	f043 0310 	orr.w	r3, r3, #16
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf2:	4b38      	ldr	r3, [pc, #224]	; (8000dd4 <MX_GPIO_Init+0x1bc>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2101      	movs	r1, #1
 8000d04:	4834      	ldr	r0, [pc, #208]	; (8000dd8 <MX_GPIO_Init+0x1c0>)
 8000d06:	f005 fa07 	bl	8006118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d10:	4832      	ldr	r0, [pc, #200]	; (8000ddc <MX_GPIO_Init+0x1c4>)
 8000d12:	f005 fa01 	bl	8006118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2102      	movs	r1, #2
 8000d1a:	4831      	ldr	r0, [pc, #196]	; (8000de0 <MX_GPIO_Init+0x1c8>)
 8000d1c:	f005 f9fc 	bl	8006118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	482b      	ldr	r0, [pc, #172]	; (8000de4 <MX_GPIO_Init+0x1cc>)
 8000d36:	f005 f83f 	bl	8005db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4821      	ldr	r0, [pc, #132]	; (8000dd8 <MX_GPIO_Init+0x1c0>)
 8000d52:	f005 f831 	bl	8005db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481b      	ldr	r0, [pc, #108]	; (8000ddc <MX_GPIO_Init+0x1c4>)
 8000d70:	f005 f822 	bl	8005db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	4817      	ldr	r0, [pc, #92]	; (8000de8 <MX_GPIO_Init+0x1d0>)
 8000d8a:	f005 f815 	bl	8005db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d8e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000da0:	230a      	movs	r3, #10
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	4810      	ldr	r0, [pc, #64]	; (8000dec <MX_GPIO_Init+0x1d4>)
 8000dac:	f005 f804 	bl	8005db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <MX_GPIO_Init+0x1c8>)
 8000dc8:	f004 fff6 	bl	8005db8 <HAL_GPIO_Init>

}
 8000dcc:	bf00      	nop
 8000dce:	3730      	adds	r7, #48	; 0x30
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	58024400 	.word	0x58024400
 8000dd8:	58020400 	.word	0x58020400
 8000ddc:	58020c00 	.word	0x58020c00
 8000de0:	58021000 	.word	0x58021000
 8000de4:	58020800 	.word	0x58020800
 8000de8:	58021800 	.word	0x58021800
 8000dec:	58020000 	.word	0x58020000

08000df0 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_IWDG1_Init+0x34>)
 8000df6:	4a0c      	ldr	r2, [pc, #48]	; (8000e28 <MX_IWDG1_Init+0x38>)
 8000df8:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_16;
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <MX_IWDG1_Init+0x34>)
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <MX_IWDG1_Init+0x34>)
 8000e02:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e06:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 4095;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_IWDG1_Init+0x34>)
 8000e0a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e0e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <MX_IWDG1_Init+0x34>)
 8000e12:	f005 f9b4 	bl	800617e <HAL_IWDG_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8000e1c:	f000 f99c 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	24000328 	.word	0x24000328
 8000e28:	58004800 	.word	0x58004800

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e32:	f000 f943 	bl	80010bc <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e36:	4b4a      	ldr	r3, [pc, #296]	; (8000f60 <main+0x134>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d11b      	bne.n	8000e7a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e42:	f3bf 8f4f 	dsb	sy
}
 8000e46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e48:	f3bf 8f6f 	isb	sy
}
 8000e4c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4e:	4b44      	ldr	r3, [pc, #272]	; (8000f60 <main+0x134>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e56:	f3bf 8f4f 	dsb	sy
}
 8000e5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e5c:	f3bf 8f6f 	isb	sy
}
 8000e60:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e62:	4b3f      	ldr	r3, [pc, #252]	; (8000f60 <main+0x134>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	4a3e      	ldr	r2, [pc, #248]	; (8000f60 <main+0x134>)
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e6e:	f3bf 8f4f 	dsb	sy
}
 8000e72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e74:	f3bf 8f6f 	isb	sy
}
 8000e78:	e000      	b.n	8000e7c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e7a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000e7c:	4b38      	ldr	r3, [pc, #224]	; (8000f60 <main+0x134>)
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d138      	bne.n	8000efa <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000e88:	4b35      	ldr	r3, [pc, #212]	; (8000f60 <main+0x134>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e90:	f3bf 8f4f 	dsb	sy
}
 8000e94:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e96:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <main+0x134>)
 8000e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e9c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	0b5b      	lsrs	r3, r3, #13
 8000ea2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ea6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	08db      	lsrs	r3, r3, #3
 8000eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000eb0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	015a      	lsls	r2, r3, #5
 8000eb6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000eba:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ec0:	4927      	ldr	r1, [pc, #156]	; (8000f60 <main+0x134>)
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	1e5a      	subs	r2, r3, #1
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1ef      	bne.n	8000eb2 <main+0x86>
    } while(sets-- != 0U);
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1e5a      	subs	r2, r3, #1
 8000ed6:	60ba      	str	r2, [r7, #8]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1e5      	bne.n	8000ea8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000edc:	f3bf 8f4f 	dsb	sy
}
 8000ee0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ee2:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <main+0x134>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4a1e      	ldr	r2, [pc, #120]	; (8000f60 <main+0x134>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eee:	f3bf 8f4f 	dsb	sy
}
 8000ef2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ef4:	f3bf 8f6f 	isb	sy
}
 8000ef8:	e000      	b.n	8000efc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000efa:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efc:	f000 fe6c 	bl	8001bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f00:	f000 f83a 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f04:	f7ff fe88 	bl	8000c18 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f08:	f000 fc2a 	bl	8001760 <MX_USART3_UART_Init>
  MX_IWDG1_Init();
 8000f0c:	f7ff ff70 	bl	8000df0 <MX_IWDG1_Init>
  MX_FDCAN1_Init();
 8000f10:	f7ff fc74 	bl	80007fc <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000f14:	f7ff fcd6 	bl	80008c4 <MX_FDCAN2_Init>
  MX_TIM12_Init();
 8000f18:	f000 fb30 	bl	800157c <MX_TIM12_Init>
  MX_TIM16_Init();
 8000f1c:	f000 fb74 	bl	8001608 <MX_TIM16_Init>
  MX_ADC3_Init();
 8000f20:	f7ff fbb0 	bl	8000684 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart3, "plz\n\r", 6, 10);
 8000f24:	230a      	movs	r3, #10
 8000f26:	2206      	movs	r2, #6
 8000f28:	490e      	ldr	r1, [pc, #56]	; (8000f64 <main+0x138>)
 8000f2a:	480f      	ldr	r0, [pc, #60]	; (8000f68 <main+0x13c>)
 8000f2c:	f009 fbdd 	bl	800a6ea <HAL_UART_Transmit>


  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000f30:	2100      	movs	r1, #0
 8000f32:	480e      	ldr	r0, [pc, #56]	; (8000f6c <main+0x140>)
 8000f34:	f008 fc6c 	bl	8009810 <HAL_TIM_PWM_Start>

  TIM12->CCR1 = TIM12->ARR *120/255;
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <main+0x144>)
 8000f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	1a9b      	subs	r3, r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	4619      	mov	r1, r3
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <main+0x144>)
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <main+0x148>)
 8000f4a:	fba3 1301 	umull	r1, r3, r3, r1
 8000f4e:	09db      	lsrs	r3, r3, #7
 8000f50:	6353      	str	r3, [r2, #52]	; 0x34
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000f52:	f00b fc11 	bl	800c778 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000f56:	f7ff fddf 	bl	8000b18 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f5a:	f00b fc31 	bl	800c7c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <main+0x132>
 8000f60:	e000ed00 	.word	0xe000ed00
 8000f64:	0801f498 	.word	0x0801f498
 8000f68:	24000424 	.word	0x24000424
 8000f6c:	2400038c 	.word	0x2400038c
 8000f70:	40001800 	.word	0x40001800
 8000f74:	80808081 	.word	0x80808081

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b09c      	sub	sp, #112	; 0x70
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	224c      	movs	r2, #76	; 0x4c
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f01d f8bf 	bl	801e10a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2220      	movs	r2, #32
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f01d f8b9 	bl	801e10a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f005 f94f 	bl	800623c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	4b36      	ldr	r3, [pc, #216]	; (800107c <SystemClock_Config+0x104>)
 8000fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa6:	4a35      	ldr	r2, [pc, #212]	; (800107c <SystemClock_Config+0x104>)
 8000fa8:	f023 0301 	bic.w	r3, r3, #1
 8000fac:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fae:	4b33      	ldr	r3, [pc, #204]	; (800107c <SystemClock_Config+0x104>)
 8000fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	4b31      	ldr	r3, [pc, #196]	; (8001080 <SystemClock_Config+0x108>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a30      	ldr	r2, [pc, #192]	; (8001080 <SystemClock_Config+0x108>)
 8000fbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <SystemClock_Config+0x108>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fd0:	bf00      	nop
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <SystemClock_Config+0x108>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fde:	d1f8      	bne.n	8000fd2 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000fe0:	4b28      	ldr	r3, [pc, #160]	; (8001084 <SystemClock_Config+0x10c>)
 8000fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe4:	4a27      	ldr	r2, [pc, #156]	; (8001084 <SystemClock_Config+0x10c>)
 8000fe6:	f023 0303 	bic.w	r3, r3, #3
 8000fea:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000fec:	230b      	movs	r3, #11
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ffa:	2340      	movs	r3, #64	; 0x40
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ffe:	2301      	movs	r3, #1
 8001000:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001002:	2302      	movs	r3, #2
 8001004:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001006:	2300      	movs	r3, #0
 8001008:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 10;
 800100a:	230a      	movs	r3, #10
 800100c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 800100e:	237d      	movs	r3, #125	; 0x7d
 8001010:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001016:	2302      	movs	r3, #2
 8001018:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800101a:	2302      	movs	r3, #2
 800101c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800101e:	2308      	movs	r3, #8
 8001020:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001022:	2300      	movs	r3, #0
 8001024:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102e:	4618      	mov	r0, r3
 8001030:	f005 f93e 	bl	80062b0 <HAL_RCC_OscConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800103a:	f000 f88d 	bl	8001158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103e:	233f      	movs	r3, #63	; 0x3f
 8001040:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001042:	2303      	movs	r3, #3
 8001044:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800104a:	2308      	movs	r3, #8
 800104c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800104e:	2340      	movs	r3, #64	; 0x40
 8001050:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001052:	2340      	movs	r3, #64	; 0x40
 8001054:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800105c:	2340      	movs	r3, #64	; 0x40
 800105e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2102      	movs	r1, #2
 8001064:	4618      	mov	r0, r3
 8001066:	f005 fd51 	bl	8006b0c <HAL_RCC_ClockConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001070:	f000 f872 	bl	8001158 <Error_Handler>
  }
}
 8001074:	bf00      	nop
 8001076:	3770      	adds	r7, #112	; 0x70
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	58000400 	.word	0x58000400
 8001080:	58024800 	.word	0x58024800
 8001084:	58024400 	.word	0x58024400

08001088 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
volatile unsigned long ulHighFrequencyTimerTicks;

void configureTimerForRunTimeStats(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  ulHighFrequencyTimerTicks = 0;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <configureTimerForRunTimeStats+0x14>)
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim16);
 8001092:	4803      	ldr	r0, [pc, #12]	; (80010a0 <configureTimerForRunTimeStats+0x18>)
 8001094:	f008 faec 	bl	8009670 <HAL_TIM_Base_Start_IT>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	24000338 	.word	0x24000338
 80010a0:	240003d8 	.word	0x240003d8

080010a4 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void) {
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ulHighFrequencyTimerTicks;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <getRunTimeCounterValue+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	24000338 	.word	0x24000338

080010bc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010ce:	f002 f8b9 	bl	8003244 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010d2:	2301      	movs	r3, #1
 80010d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MPU_Config+0x74>)
 80010dc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80010de:	230e      	movs	r3, #14
 80010e0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80010ea:	2303      	movs	r3, #3
 80010ec:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010ee:	2301      	movs	r3, #1
 80010f0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010fe:	463b      	mov	r3, r7
 8001100:	4618      	mov	r0, r3
 8001102:	f002 f8d7 	bl	80032b4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001106:	2301      	movs	r3, #1
 8001108:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800110a:	2307      	movs	r3, #7
 800110c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800110e:	2300      	movs	r3, #0
 8001110:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001112:	2301      	movs	r3, #1
 8001114:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001116:	2301      	movs	r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800111a:	463b      	mov	r3, r7
 800111c:	4618      	mov	r0, r3
 800111e:	f002 f8c9 	bl	80032b4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001122:	2004      	movs	r0, #4
 8001124:	f002 f8a6 	bl	8003274 <HAL_MPU_Enable>

}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	30040000 	.word	0x30040000

08001134 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001146:	f000 fd83 	bl	8001c50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40010000 	.word	0x40010000

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	e7fe      	b.n	8001160 <Error_Handler+0x8>
	...

08001164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_MspInit+0x38>)
 800116c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001170:	4a0a      	ldr	r2, [pc, #40]	; (800119c <HAL_MspInit+0x38>)
 8001172:	f043 0302 	orr.w	r3, r3, #2
 8001176:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_MspInit+0x38>)
 800117c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	210f      	movs	r1, #15
 800118c:	f06f 0001 	mvn.w	r0, #1
 8001190:	f002 f830 	bl	80031f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	58024400 	.word	0x58024400

080011a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	; 0x38
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	d844      	bhi.n	8001238 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80011ae:	2200      	movs	r2, #0
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	2019      	movs	r0, #25
 80011b4:	f002 f81e 	bl	80031f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011b8:	2019      	movs	r0, #25
 80011ba:	f002 f835 	bl	8003228 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80011be:	4a24      	ldr	r2, [pc, #144]	; (8001250 <HAL_InitTick+0xb0>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <HAL_InitTick+0xb4>)
 80011c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011ca:	4a22      	ldr	r2, [pc, #136]	; (8001254 <HAL_InitTick+0xb4>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <HAL_InitTick+0xb4>)
 80011d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011e2:	f107 020c 	add.w	r2, r7, #12
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f006 f819 	bl	8007224 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80011f2:	f006 f801 	bl	80071f8 <HAL_RCC_GetPCLK2Freq>
 80011f6:	4603      	mov	r3, r0
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fe:	4a16      	ldr	r2, [pc, #88]	; (8001258 <HAL_InitTick+0xb8>)
 8001200:	fba2 2303 	umull	r2, r3, r2, r3
 8001204:	0c9b      	lsrs	r3, r3, #18
 8001206:	3b01      	subs	r3, #1
 8001208:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <HAL_InitTick+0xbc>)
 800120c:	4a14      	ldr	r2, [pc, #80]	; (8001260 <HAL_InitTick+0xc0>)
 800120e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0xbc>)
 8001212:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001216:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001218:	4a10      	ldr	r2, [pc, #64]	; (800125c <HAL_InitTick+0xbc>)
 800121a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_InitTick+0xbc>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <HAL_InitTick+0xbc>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800122a:	480c      	ldr	r0, [pc, #48]	; (800125c <HAL_InitTick+0xbc>)
 800122c:	f008 f9c8 	bl	80095c0 <HAL_TIM_Base_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d107      	bne.n	8001246 <HAL_InitTick+0xa6>
 8001236:	e001      	b.n	800123c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e005      	b.n	8001248 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800123c:	4807      	ldr	r0, [pc, #28]	; (800125c <HAL_InitTick+0xbc>)
 800123e:	f008 fa17 	bl	8009670 <HAL_TIM_Base_Start_IT>
 8001242:	4603      	mov	r3, r0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3738      	adds	r7, #56	; 0x38
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	24000008 	.word	0x24000008
 8001254:	58024400 	.word	0x58024400
 8001258:	431bde83 	.word	0x431bde83
 800125c:	2400033c 	.word	0x2400033c
 8001260:	40010000 	.word	0x40010000

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <NMI_Handler+0x4>

0800126a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <MemManage_Handler+0x4>

08001276 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <UsageFault_Handler+0x4>

08001282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <TIM1_UP_IRQHandler+0x10>)
 8001296:	f008 fbc9 	bl	8009a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2400033c 	.word	0x2400033c

080012a4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <ETH_IRQHandler+0x10>)
 80012aa:	f003 f883 	bl	80043b4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	24004ffc 	.word	0x24004ffc

080012b8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	ulHighFrequencyTimerTicks++;
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <TIM16_IRQHandler+0x18>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a03      	ldr	r2, [pc, #12]	; (80012d0 <TIM16_IRQHandler+0x18>)
 80012c4:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80012c6:	4803      	ldr	r0, [pc, #12]	; (80012d4 <TIM16_IRQHandler+0x1c>)
 80012c8:	f008 fbb0 	bl	8009a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	24000338 	.word	0x24000338
 80012d4:	240003d8 	.word	0x240003d8

080012d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
	return 1;
 80012dc:	2301      	movs	r3, #1
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <_kill>:

int _kill(int pid, int sig)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <_kill+0x20>)
 80012f4:	2216      	movs	r2, #22
 80012f6:	601a      	str	r2, [r3, #0]
	return -1;
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	2405eb18 	.word	0x2405eb18

0800130c <_exit>:

void _exit (int status)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ffe5 	bl	80012e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800131e:	e7fe      	b.n	800131e <_exit+0x12>

08001320 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e00a      	b.n	8001348 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001332:	f3af 8000 	nop.w
 8001336:	4601      	mov	r1, r0
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	60ba      	str	r2, [r7, #8]
 800133e:	b2ca      	uxtb	r2, r1
 8001340:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbf0      	blt.n	8001332 <_read+0x12>
	}

return len;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e009      	b.n	8001380 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	60ba      	str	r2, [r7, #8]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf1      	blt.n	800136c <_write+0x12>
	}
	return len;
 8001388:	687b      	ldr	r3, [r7, #4]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_close>:

int _close(int file)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
	return -1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ba:	605a      	str	r2, [r3, #4]
	return 0;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_isatty>:

int _isatty(int file)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
	return 1;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
	return 0;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001404:	4a14      	ldr	r2, [pc, #80]	; (8001458 <_sbrk+0x5c>)
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <_sbrk+0x60>)
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d102      	bne.n	800141e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <_sbrk+0x64>)
 800141a:	4a12      	ldr	r2, [pc, #72]	; (8001464 <_sbrk+0x68>)
 800141c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	429a      	cmp	r2, r3
 800142a:	d205      	bcs.n	8001438 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <_sbrk+0x6c>)
 800142e:	220c      	movs	r2, #12
 8001430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	e009      	b.n	800144c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	4a06      	ldr	r2, [pc, #24]	; (8001460 <_sbrk+0x64>)
 8001448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800144a:	68fb      	ldr	r3, [r7, #12]
}
 800144c:	4618      	mov	r0, r3
 800144e:	371c      	adds	r7, #28
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	24080000 	.word	0x24080000
 800145c:	00000400 	.word	0x00000400
 8001460:	24000388 	.word	0x24000388
 8001464:	2405eb20 	.word	0x2405eb20
 8001468:	2405eb18 	.word	0x2405eb18

0800146c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001470:	4b37      	ldr	r3, [pc, #220]	; (8001550 <SystemInit+0xe4>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001476:	4a36      	ldr	r2, [pc, #216]	; (8001550 <SystemInit+0xe4>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001480:	4b34      	ldr	r3, [pc, #208]	; (8001554 <SystemInit+0xe8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	2b06      	cmp	r3, #6
 800148a:	d807      	bhi.n	800149c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800148c:	4b31      	ldr	r3, [pc, #196]	; (8001554 <SystemInit+0xe8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 030f 	bic.w	r3, r3, #15
 8001494:	4a2f      	ldr	r2, [pc, #188]	; (8001554 <SystemInit+0xe8>)
 8001496:	f043 0307 	orr.w	r3, r3, #7
 800149a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800149c:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <SystemInit+0xec>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a2d      	ldr	r2, [pc, #180]	; (8001558 <SystemInit+0xec>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <SystemInit+0xec>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014ae:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <SystemInit+0xec>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4929      	ldr	r1, [pc, #164]	; (8001558 <SystemInit+0xec>)
 80014b4:	4b29      	ldr	r3, [pc, #164]	; (800155c <SystemInit+0xf0>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014ba:	4b26      	ldr	r3, [pc, #152]	; (8001554 <SystemInit+0xe8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014c6:	4b23      	ldr	r3, [pc, #140]	; (8001554 <SystemInit+0xe8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 030f 	bic.w	r3, r3, #15
 80014ce:	4a21      	ldr	r2, [pc, #132]	; (8001554 <SystemInit+0xe8>)
 80014d0:	f043 0307 	orr.w	r3, r3, #7
 80014d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <SystemInit+0xec>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <SystemInit+0xec>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <SystemInit+0xec>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <SystemInit+0xec>)
 80014ea:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <SystemInit+0xf4>)
 80014ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <SystemInit+0xec>)
 80014f0:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <SystemInit+0xf8>)
 80014f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <SystemInit+0xec>)
 80014f6:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <SystemInit+0xfc>)
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <SystemInit+0xec>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <SystemInit+0xec>)
 8001502:	4a19      	ldr	r2, [pc, #100]	; (8001568 <SystemInit+0xfc>)
 8001504:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <SystemInit+0xec>)
 8001508:	2200      	movs	r2, #0
 800150a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <SystemInit+0xec>)
 800150e:	4a16      	ldr	r2, [pc, #88]	; (8001568 <SystemInit+0xfc>)
 8001510:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <SystemInit+0xec>)
 8001514:	2200      	movs	r2, #0
 8001516:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <SystemInit+0xec>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <SystemInit+0xec>)
 800151e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001522:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <SystemInit+0xec>)
 8001526:	2200      	movs	r2, #0
 8001528:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <SystemInit+0x100>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <SystemInit+0x104>)
 8001530:	4013      	ands	r3, r2
 8001532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001536:	d202      	bcs.n	800153e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <SystemInit+0x108>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <SystemInit+0x10c>)
 8001540:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001544:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00
 8001554:	52002000 	.word	0x52002000
 8001558:	58024400 	.word	0x58024400
 800155c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001560:	02020200 	.word	0x02020200
 8001564:	01ff0000 	.word	0x01ff0000
 8001568:	01010280 	.word	0x01010280
 800156c:	5c001000 	.word	0x5c001000
 8001570:	ffff0000 	.word	0xffff0000
 8001574:	51008108 	.word	0x51008108
 8001578:	52004000 	.word	0x52004000

0800157c <MX_TIM12_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim16;

/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
 8001590:	615a      	str	r2, [r3, #20]
 8001592:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_TIM12_Init+0x84>)
 8001596:	4a1b      	ldr	r2, [pc, #108]	; (8001604 <MX_TIM12_Init+0x88>)
 8001598:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <MX_TIM12_Init+0x84>)
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <MX_TIM12_Init+0x84>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_TIM12_Init+0x84>)
 80015a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ac:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_TIM12_Init+0x84>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <MX_TIM12_Init+0x84>)
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80015ba:	4811      	ldr	r0, [pc, #68]	; (8001600 <MX_TIM12_Init+0x84>)
 80015bc:	f008 f8d0 	bl	8009760 <HAL_TIM_PWM_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80015c6:	f7ff fdc7 	bl	8001158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ca:	2360      	movs	r3, #96	; 0x60
 80015cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2200      	movs	r2, #0
 80015de:	4619      	mov	r1, r3
 80015e0:	4807      	ldr	r0, [pc, #28]	; (8001600 <MX_TIM12_Init+0x84>)
 80015e2:	f008 fb43 	bl	8009c6c <HAL_TIM_PWM_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80015ec:	f7ff fdb4 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <MX_TIM12_Init+0x84>)
 80015f2:	f000 f879 	bl	80016e8 <HAL_TIM_MspPostInit>

}
 80015f6:	bf00      	nop
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2400038c 	.word	0x2400038c
 8001604:	40001800 	.word	0x40001800

08001608 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_TIM16_Init+0x44>)
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <MX_TIM16_Init+0x48>)
 8001610:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_TIM16_Init+0x44>)
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_TIM16_Init+0x44>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_TIM16_Init+0x44>)
 8001620:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001624:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_TIM16_Init+0x44>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <MX_TIM16_Init+0x44>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_TIM16_Init+0x44>)
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_TIM16_Init+0x44>)
 800163a:	f007 ffc1 	bl	80095c0 <HAL_TIM_Base_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001644:	f7ff fd88 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	240003d8 	.word	0x240003d8
 8001650:	40014400 	.word	0x40014400

08001654 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <HAL_TIM_PWM_MspInit+0x3c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d10e      	bne.n	8001684 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_TIM_PWM_MspInit+0x40>)
 8001668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800166c:	4a09      	ldr	r2, [pc, #36]	; (8001694 <HAL_TIM_PWM_MspInit+0x40>)
 800166e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001672:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <HAL_TIM_PWM_MspInit+0x40>)
 8001678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800167c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40001800 	.word	0x40001800
 8001694:	58024400 	.word	0x58024400

08001698 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <HAL_TIM_Base_MspInit+0x48>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d116      	bne.n	80016d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_TIM_Base_MspInit+0x4c>)
 80016ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016b0:	4a0c      	ldr	r2, [pc, #48]	; (80016e4 <HAL_TIM_Base_MspInit+0x4c>)
 80016b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_TIM_Base_MspInit+0x4c>)
 80016bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 5, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2105      	movs	r1, #5
 80016cc:	2075      	movs	r0, #117	; 0x75
 80016ce:	f001 fd91 	bl	80031f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80016d2:	2075      	movs	r0, #117	; 0x75
 80016d4:	f001 fda8 	bl	8003228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40014400 	.word	0x40014400
 80016e4:	58024400 	.word	0x58024400

080016e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a13      	ldr	r2, [pc, #76]	; (8001754 <HAL_TIM_MspPostInit+0x6c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d11f      	bne.n	800174a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <HAL_TIM_MspPostInit+0x70>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001710:	4a11      	ldr	r2, [pc, #68]	; (8001758 <HAL_TIM_MspPostInit+0x70>)
 8001712:	f043 0302 	orr.w	r3, r3, #2
 8001716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_TIM_MspPostInit+0x70>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	60bb      	str	r3, [r7, #8]
 8001726:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001728:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800172c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800173a:	2302      	movs	r3, #2
 800173c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	4619      	mov	r1, r3
 8001744:	4805      	ldr	r0, [pc, #20]	; (800175c <HAL_TIM_MspPostInit+0x74>)
 8001746:	f004 fb37 	bl	8005db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40001800 	.word	0x40001800
 8001758:	58024400 	.word	0x58024400
 800175c:	58020400 	.word	0x58020400

08001760 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001766:	4a23      	ldr	r2, [pc, #140]	; (80017f4 <MX_USART3_UART_Init+0x94>)
 8001768:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017a8:	4811      	ldr	r0, [pc, #68]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 80017aa:	f008 ff4e 	bl	800a64a <HAL_UART_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017b4:	f7ff fcd0 	bl	8001158 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b8:	2100      	movs	r1, #0
 80017ba:	480d      	ldr	r0, [pc, #52]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 80017bc:	f009 ff82 	bl	800b6c4 <HAL_UARTEx_SetTxFifoThreshold>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017c6:	f7ff fcc7 	bl	8001158 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ca:	2100      	movs	r1, #0
 80017cc:	4808      	ldr	r0, [pc, #32]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 80017ce:	f009 ffb7 	bl	800b740 <HAL_UARTEx_SetRxFifoThreshold>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017d8:	f7ff fcbe 	bl	8001158 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 80017de:	f009 ff38 	bl	800b652 <HAL_UARTEx_DisableFifoMode>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017e8:	f7ff fcb6 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	24000424 	.word	0x24000424
 80017f4:	40004800 	.word	0x40004800

080017f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b0b8      	sub	sp, #224	; 0xe0
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001810:	f107 0310 	add.w	r3, r7, #16
 8001814:	22bc      	movs	r2, #188	; 0xbc
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f01c fc76 	bl	801e10a <memset>
  if(uartHandle->Instance==USART3)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <HAL_UART_MspInit+0xc0>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d142      	bne.n	80018ae <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001828:	2302      	movs	r3, #2
 800182a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	4618      	mov	r0, r3
 8001838:	f005 fd36 	bl	80072a8 <HAL_RCCEx_PeriphCLKConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001842:	f7ff fc89 	bl	8001158 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <HAL_UART_MspInit+0xc4>)
 8001848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800184c:	4a1b      	ldr	r2, [pc, #108]	; (80018bc <HAL_UART_MspInit+0xc4>)
 800184e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001852:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_UART_MspInit+0xc4>)
 8001858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800185c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001864:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_UART_MspInit+0xc4>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186a:	4a14      	ldr	r2, [pc, #80]	; (80018bc <HAL_UART_MspInit+0xc4>)
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_UART_MspInit+0xc4>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001882:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001886:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800189c:	2307      	movs	r3, #7
 800189e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <HAL_UART_MspInit+0xc8>)
 80018aa:	f004 fa85 	bl	8005db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80018ae:	bf00      	nop
 80018b0:	37e0      	adds	r7, #224	; 0xe0
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40004800 	.word	0x40004800
 80018bc:	58024400 	.word	0x58024400
 80018c0:	58020c00 	.word	0x58020c00

080018c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018c8:	f7ff fdd0 	bl	800146c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018cc:	480c      	ldr	r0, [pc, #48]	; (8001900 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ce:	490d      	ldr	r1, [pc, #52]	; (8001904 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018e4:	4c0a      	ldr	r4, [pc, #40]	; (8001910 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f2:	f01c fbab 	bl	801e04c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018f6:	f7ff fa99 	bl	8000e2c <main>
  bx  lr
 80018fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018fc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001900:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001904:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8001908:	08022de4 	.word	0x08022de4
  ldr r2, =_sbss
 800190c:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 8001910:	2405eb1c 	.word	0x2405eb1c

08001914 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC3_IRQHandler>

08001916 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00b      	beq.n	800193e <LAN8742_RegisterBusIO+0x28>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d007      	beq.n	800193e <LAN8742_RegisterBusIO+0x28>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <LAN8742_RegisterBusIO+0x28>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	e014      	b.n	800196e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d17c      	bne.n	8001a94 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2220      	movs	r2, #32
 80019ac:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e01c      	b.n	80019ee <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	f107 0208 	add.w	r2, r7, #8
 80019bc:	2112      	movs	r1, #18
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	4798      	blx	r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	da03      	bge.n	80019d0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80019c8:	f06f 0304 	mvn.w	r3, #4
 80019cc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80019ce:	e00b      	b.n	80019e8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d105      	bne.n	80019e8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
         break;
 80019e6:	e005      	b.n	80019f4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	3301      	adds	r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2b1f      	cmp	r3, #31
 80019f2:	d9df      	bls.n	80019b4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b1f      	cmp	r3, #31
 80019fa:	d902      	bls.n	8001a02 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80019fc:	f06f 0302 	mvn.w	r3, #2
 8001a00:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d145      	bne.n	8001a94 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6810      	ldr	r0, [r2, #0]
 8001a10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a14:	2100      	movs	r1, #0
 8001a16:	4798      	blx	r3
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db37      	blt.n	8001a8e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6810      	ldr	r0, [r2, #0]
 8001a26:	f107 0208 	add.w	r2, r7, #8
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4798      	blx	r3
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db28      	blt.n	8001a86 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4798      	blx	r3
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001a3e:	e01c      	b.n	8001a7a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4798      	blx	r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a52:	d80e      	bhi.n	8001a72 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6810      	ldr	r0, [r2, #0]
 8001a5c:	f107 0208 	add.w	r2, r7, #8
 8001a60:	2100      	movs	r1, #0
 8001a62:	4798      	blx	r3
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da07      	bge.n	8001a7a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001a6a:	f06f 0304 	mvn.w	r3, #4
 8001a6e:	613b      	str	r3, [r7, #16]
                 break;
 8001a70:	e010      	b.n	8001a94 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001a72:	f06f 0301 	mvn.w	r3, #1
 8001a76:	613b      	str	r3, [r7, #16]
               break;
 8001a78:	e00c      	b.n	8001a94 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1dd      	bne.n	8001a40 <LAN8742_Init+0xc6>
 8001a84:	e006      	b.n	8001a94 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001a86:	f06f 0304 	mvn.w	r3, #4
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	e002      	b.n	8001a94 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001a8e:	f06f 0303 	mvn.w	r3, #3
 8001a92:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d112      	bne.n	8001ac0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	4798      	blx	r3
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001aa4:	bf00      	nop
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	4798      	blx	r3
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ab8:	d9f5      	bls.n	8001aa6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001ac0:	693b      	ldr	r3, [r7, #16]
 }
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6810      	ldr	r0, [r2, #0]
 8001ade:	f107 020c 	add.w	r2, r7, #12
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	4798      	blx	r3
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da02      	bge.n	8001af2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001aec:	f06f 0304 	mvn.w	r3, #4
 8001af0:	e06e      	b.n	8001bd0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6810      	ldr	r0, [r2, #0]
 8001afa:	f107 020c 	add.w	r2, r7, #12
 8001afe:	2101      	movs	r1, #1
 8001b00:	4798      	blx	r3
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	da02      	bge.n	8001b0e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b08:	f06f 0304 	mvn.w	r3, #4
 8001b0c:	e060      	b.n	8001bd0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e059      	b.n	8001bd0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6810      	ldr	r0, [r2, #0]
 8001b24:	f107 020c 	add.w	r2, r7, #12
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4798      	blx	r3
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	da02      	bge.n	8001b38 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b32:	f06f 0304 	mvn.w	r3, #4
 8001b36:	e04b      	b.n	8001bd0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d11b      	bne.n	8001b7a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <LAN8742_GetLinkState+0x90>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001b56:	2302      	movs	r3, #2
 8001b58:	e03a      	b.n	8001bd0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e033      	b.n	8001bd0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001b72:	2304      	movs	r3, #4
 8001b74:	e02c      	b.n	8001bd0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001b76:	2305      	movs	r3, #5
 8001b78:	e02a      	b.n	8001bd0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6810      	ldr	r0, [r2, #0]
 8001b82:	f107 020c 	add.w	r2, r7, #12
 8001b86:	211f      	movs	r1, #31
 8001b88:	4798      	blx	r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da02      	bge.n	8001b96 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001b90:	f06f 0304 	mvn.w	r3, #4
 8001b94:	e01c      	b.n	8001bd0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001ba0:	2306      	movs	r3, #6
 8001ba2:	e015      	b.n	8001bd0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 031c 	and.w	r3, r3, #28
 8001baa:	2b18      	cmp	r3, #24
 8001bac:	d101      	bne.n	8001bb2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e00e      	b.n	8001bd0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f003 031c 	and.w	r3, r3, #28
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d101      	bne.n	8001bc0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e007      	b.n	8001bd0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 031c 	and.w	r3, r3, #28
 8001bc6:	2b14      	cmp	r3, #20
 8001bc8:	d101      	bne.n	8001bce <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001bca:	2304      	movs	r3, #4
 8001bcc:	e000      	b.n	8001bd0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001bce:	2305      	movs	r3, #5
    }				
  }
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bde:	2003      	movs	r0, #3
 8001be0:	f001 fafd 	bl	80031de <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001be4:	f005 f948 	bl	8006e78 <HAL_RCC_GetSysClockFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_Init+0x68>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	4913      	ldr	r1, [pc, #76]	; (8001c44 <HAL_Init+0x6c>)
 8001bf6:	5ccb      	ldrb	r3, [r1, r3]
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001c00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_Init+0x68>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <HAL_Init+0x6c>)
 8001c0c:	5cd3      	ldrb	r3, [r2, r3]
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
 8001c18:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <HAL_Init+0x70>)
 8001c1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c1c:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <HAL_Init+0x74>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c22:	200f      	movs	r0, #15
 8001c24:	f7ff fabc 	bl	80011a0 <HAL_InitTick>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e002      	b.n	8001c38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c32:	f7ff fa97 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	58024400 	.word	0x58024400
 8001c44:	08022b20 	.word	0x08022b20
 8001c48:	24000004 	.word	0x24000004
 8001c4c:	24000000 	.word	0x24000000

08001c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x20>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x24>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <HAL_IncTick+0x24>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	2400000c 	.word	0x2400000c
 8001c74:	240004b4 	.word	0x240004b4

08001c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_GetTick+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	240004b4 	.word	0x240004b4

08001c90 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_GetREVID+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	0c1b      	lsrs	r3, r3, #16
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	5c001000 	.word	0x5c001000

08001ca8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001cb8:	4904      	ldr	r1, [pc, #16]	; (8001ccc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	58000400 	.word	0x58000400

08001cd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3360      	adds	r3, #96	; 0x60
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	430b      	orrs	r3, r1
 8001d66:	431a      	orrs	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	371c      	adds	r7, #28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f003 031f 	and.w	r3, r3, #31
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	611a      	str	r2, [r3, #16]
}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b087      	sub	sp, #28
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3360      	adds	r3, #96	; 0x60
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	601a      	str	r2, [r3, #0]
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	371c      	adds	r7, #28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b087      	sub	sp, #28
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	3330      	adds	r3, #48	; 0x30
 8001e16:	461a      	mov	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	0a1b      	lsrs	r3, r3, #8
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	4413      	add	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	211f      	movs	r1, #31
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	401a      	ands	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	0e9b      	lsrs	r3, r3, #26
 8001e3e:	f003 011f 	and.w	r1, r3, #31
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e52:	bf00      	nop
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	f023 0203 	bic.w	r2, r3, #3
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	60da      	str	r2, [r3, #12]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3314      	adds	r3, #20
 8001e94:	461a      	mov	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	0e5b      	lsrs	r3, r3, #25
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	4413      	add	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	0d1b      	lsrs	r3, r3, #20
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	2107      	movs	r1, #7
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	401a      	ands	r2, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	0d1b      	lsrs	r3, r3, #20
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ece:	bf00      	nop
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f003 0318 	and.w	r3, r3, #24
 8001efe:	4908      	ldr	r1, [pc, #32]	; (8001f20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f00:	40d9      	lsrs	r1, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	400b      	ands	r3, r1
 8001f06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	000fffff 	.word	0x000fffff

08001f24 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 031f 	and.w	r3, r3, #31
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6093      	str	r3, [r2, #8]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	5fffffc0 	.word	0x5fffffc0

08001f64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f78:	d101      	bne.n	8001f7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	6fffffc0 	.word	0x6fffffc0

08001fb4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fc8:	d101      	bne.n	8001fce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <LL_ADC_Enable+0x24>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	f043 0201 	orr.w	r2, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	7fffffc0 	.word	0x7fffffc0

08002004 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <LL_ADC_IsEnabled+0x18>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <LL_ADC_IsEnabled+0x1a>
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <LL_ADC_REG_StartConversion+0x24>)
 800203a:	4013      	ands	r3, r2
 800203c:	f043 0204 	orr.w	r2, r3, #4
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	7fffffc0 	.word	0x7fffffc0

08002054 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b04      	cmp	r3, #4
 8002066:	d101      	bne.n	800206c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b08      	cmp	r3, #8
 800208c:	d101      	bne.n	8002092 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e18f      	b.n	80023da <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d109      	bne.n	80020dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7fe fb3d 	bl	8000748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff3f 	bl	8001f64 <LL_ADC_IsDeepPowerDownEnabled>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d004      	beq.n	80020f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff25 	bl	8001f40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ff5a 	bl	8001fb4 <LL_ADC_IsInternalRegulatorEnabled>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d114      	bne.n	8002130 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff3e 	bl	8001f8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002110:	4b87      	ldr	r3, [pc, #540]	; (8002330 <HAL_ADC_Init+0x290>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	099b      	lsrs	r3, r3, #6
 8002116:	4a87      	ldr	r2, [pc, #540]	; (8002334 <HAL_ADC_Init+0x294>)
 8002118:	fba2 2303 	umull	r2, r3, r2, r3
 800211c:	099b      	lsrs	r3, r3, #6
 800211e:	3301      	adds	r3, #1
 8002120:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002122:	e002      	b.n	800212a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	3b01      	subs	r3, #1
 8002128:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f9      	bne.n	8002124 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff3d 	bl	8001fb4 <LL_ADC_IsInternalRegulatorEnabled>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10d      	bne.n	800215c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002144:	f043 0210 	orr.w	r2, r3, #16
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002150:	f043 0201 	orr.w	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff77 	bl	8002054 <LL_ADC_REG_IsConversionOngoing>
 8002166:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b00      	cmp	r3, #0
 8002172:	f040 8129 	bne.w	80023c8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	f040 8125 	bne.w	80023c8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002182:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002186:	f043 0202 	orr.w	r2, r3, #2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff36 	bl	8002004 <LL_ADC_IsEnabled>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d136      	bne.n	800220c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a65      	ldr	r2, [pc, #404]	; (8002338 <HAL_ADC_Init+0x298>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d004      	beq.n	80021b2 <HAL_ADC_Init+0x112>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a63      	ldr	r2, [pc, #396]	; (800233c <HAL_ADC_Init+0x29c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d10e      	bne.n	80021d0 <HAL_ADC_Init+0x130>
 80021b2:	4861      	ldr	r0, [pc, #388]	; (8002338 <HAL_ADC_Init+0x298>)
 80021b4:	f7ff ff26 	bl	8002004 <LL_ADC_IsEnabled>
 80021b8:	4604      	mov	r4, r0
 80021ba:	4860      	ldr	r0, [pc, #384]	; (800233c <HAL_ADC_Init+0x29c>)
 80021bc:	f7ff ff22 	bl	8002004 <LL_ADC_IsEnabled>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4323      	orrs	r3, r4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	e008      	b.n	80021e2 <HAL_ADC_Init+0x142>
 80021d0:	485b      	ldr	r0, [pc, #364]	; (8002340 <HAL_ADC_Init+0x2a0>)
 80021d2:	f7ff ff17 	bl	8002004 <LL_ADC_IsEnabled>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf0c      	ite	eq
 80021dc:	2301      	moveq	r3, #1
 80021de:	2300      	movne	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d012      	beq.n	800220c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a53      	ldr	r2, [pc, #332]	; (8002338 <HAL_ADC_Init+0x298>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d004      	beq.n	80021fa <HAL_ADC_Init+0x15a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a51      	ldr	r2, [pc, #324]	; (800233c <HAL_ADC_Init+0x29c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_Init+0x15e>
 80021fa:	4a52      	ldr	r2, [pc, #328]	; (8002344 <HAL_ADC_Init+0x2a4>)
 80021fc:	e000      	b.n	8002200 <HAL_ADC_Init+0x160>
 80021fe:	4a52      	ldr	r2, [pc, #328]	; (8002348 <HAL_ADC_Init+0x2a8>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f7ff fd62 	bl	8001cd0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800220c:	f7ff fd40 	bl	8001c90 <HAL_GetREVID>
 8002210:	4603      	mov	r3, r0
 8002212:	f241 0203 	movw	r2, #4099	; 0x1003
 8002216:	4293      	cmp	r3, r2
 8002218:	d914      	bls.n	8002244 <HAL_ADC_Init+0x1a4>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b10      	cmp	r3, #16
 8002220:	d110      	bne.n	8002244 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7d5b      	ldrb	r3, [r3, #21]
 8002226:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800222c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002232:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7f1b      	ldrb	r3, [r3, #28]
 8002238:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800223a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800223c:	f043 030c 	orr.w	r3, r3, #12
 8002240:	61bb      	str	r3, [r7, #24]
 8002242:	e00d      	b.n	8002260 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	7d5b      	ldrb	r3, [r3, #21]
 8002248:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800224e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002254:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7f1b      	ldrb	r3, [r3, #28]
 800225a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7f1b      	ldrb	r3, [r3, #28]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d106      	bne.n	8002276 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	3b01      	subs	r3, #1
 800226e:	045b      	lsls	r3, r3, #17
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	4b2c      	ldr	r3, [pc, #176]	; (800234c <HAL_ADC_Init+0x2ac>)
 800229a:	4013      	ands	r3, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	69b9      	ldr	r1, [r7, #24]
 80022a2:	430b      	orrs	r3, r1
 80022a4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fed2 	bl	8002054 <LL_ADC_REG_IsConversionOngoing>
 80022b0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fedf 	bl	800207a <LL_ADC_INJ_IsConversionOngoing>
 80022bc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d15f      	bne.n	8002384 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d15c      	bne.n	8002384 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7d1b      	ldrb	r3, [r3, #20]
 80022ce:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <HAL_ADC_Init+0x2b0>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	69b9      	ldr	r1, [r7, #24]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d130      	bne.n	8002358 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691a      	ldr	r2, [r3, #16]
 8002302:	4b14      	ldr	r3, [pc, #80]	; (8002354 <HAL_ADC_Init+0x2b4>)
 8002304:	4013      	ands	r3, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800230a:	3a01      	subs	r2, #1
 800230c:	0411      	lsls	r1, r2, #16
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002312:	4311      	orrs	r1, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002318:	4311      	orrs	r1, r2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800231e:	430a      	orrs	r2, r1
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	611a      	str	r2, [r3, #16]
 800232c:	e01c      	b.n	8002368 <HAL_ADC_Init+0x2c8>
 800232e:	bf00      	nop
 8002330:	24000000 	.word	0x24000000
 8002334:	053e2d63 	.word	0x053e2d63
 8002338:	40022000 	.word	0x40022000
 800233c:	40022100 	.word	0x40022100
 8002340:	58026000 	.word	0x58026000
 8002344:	40022300 	.word	0x40022300
 8002348:	58026300 	.word	0x58026300
 800234c:	fff0c003 	.word	0xfff0c003
 8002350:	ffffbffc 	.word	0xffffbffc
 8002354:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fd76 	bl	8002e70 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d10c      	bne.n	80023a6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f023 010f 	bic.w	r1, r3, #15
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	1e5a      	subs	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30
 80023a4:	e007      	b.n	80023b6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 020f 	bic.w	r2, r2, #15
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f023 0303 	bic.w	r3, r3, #3
 80023be:	f043 0201 	orr.w	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54
 80023c6:	e007      	b.n	80023d8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023cc:	f043 0210 	orr.w	r2, r3, #16
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3724      	adds	r7, #36	; 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd90      	pop	{r4, r7, pc}
 80023e2:	bf00      	nop

080023e4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a55      	ldr	r2, [pc, #340]	; (800254c <HAL_ADC_Start_DMA+0x168>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d004      	beq.n	8002404 <HAL_ADC_Start_DMA+0x20>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a54      	ldr	r2, [pc, #336]	; (8002550 <HAL_ADC_Start_DMA+0x16c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d101      	bne.n	8002408 <HAL_ADC_Start_DMA+0x24>
 8002404:	4b53      	ldr	r3, [pc, #332]	; (8002554 <HAL_ADC_Start_DMA+0x170>)
 8002406:	e000      	b.n	800240a <HAL_ADC_Start_DMA+0x26>
 8002408:	4b53      	ldr	r3, [pc, #332]	; (8002558 <HAL_ADC_Start_DMA+0x174>)
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fd8a 	bl	8001f24 <LL_ADC_GetMultimode>
 8002410:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fe1c 	bl	8002054 <LL_ADC_REG_IsConversionOngoing>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	f040 808c 	bne.w	800253c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_ADC_Start_DMA+0x4e>
 800242e:	2302      	movs	r3, #2
 8002430:	e087      	b.n	8002542 <HAL_ADC_Start_DMA+0x15e>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	2b05      	cmp	r3, #5
 8002444:	d002      	beq.n	800244c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	2b09      	cmp	r3, #9
 800244a:	d170      	bne.n	800252e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 fbf1 	bl	8002c34 <ADC_Enable>
 8002452:	4603      	mov	r3, r0
 8002454:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002456:	7dfb      	ldrb	r3, [r7, #23]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d163      	bne.n	8002524 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002460:	4b3e      	ldr	r3, [pc, #248]	; (800255c <HAL_ADC_Start_DMA+0x178>)
 8002462:	4013      	ands	r3, r2
 8002464:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a37      	ldr	r2, [pc, #220]	; (8002550 <HAL_ADC_Start_DMA+0x16c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d002      	beq.n	800247c <HAL_ADC_Start_DMA+0x98>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	e000      	b.n	800247e <HAL_ADC_Start_DMA+0x9a>
 800247c:	4b33      	ldr	r3, [pc, #204]	; (800254c <HAL_ADC_Start_DMA+0x168>)
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	4293      	cmp	r3, r2
 8002484:	d002      	beq.n	800248c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d105      	bne.n	8002498 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002490:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d006      	beq.n	80024b2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	f023 0206 	bic.w	r2, r3, #6
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	659a      	str	r2, [r3, #88]	; 0x58
 80024b0:	e002      	b.n	80024b8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024bc:	4a28      	ldr	r2, [pc, #160]	; (8002560 <HAL_ADC_Start_DMA+0x17c>)
 80024be:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c4:	4a27      	ldr	r2, [pc, #156]	; (8002564 <HAL_ADC_Start_DMA+0x180>)
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024cc:	4a26      	ldr	r2, [pc, #152]	; (8002568 <HAL_ADC_Start_DMA+0x184>)
 80024ce:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	221c      	movs	r2, #28
 80024d6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0210 	orr.w	r2, r2, #16
 80024ee:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	4619      	mov	r1, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	f7ff fcaf 	bl	8001e5e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	3340      	adds	r3, #64	; 0x40
 800250a:	4619      	mov	r1, r3
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f000 ff14 	bl	800333c <HAL_DMA_Start_IT>
 8002514:	4603      	mov	r3, r0
 8002516:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fd85 	bl	800202c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002522:	e00d      	b.n	8002540 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800252c:	e008      	b.n	8002540 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800253a:	e001      	b.n	8002540 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800253c:	2302      	movs	r3, #2
 800253e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002540:	7dfb      	ldrb	r3, [r7, #23]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40022000 	.word	0x40022000
 8002550:	40022100 	.word	0x40022100
 8002554:	40022300 	.word	0x40022300
 8002558:	58026300 	.word	0x58026300
 800255c:	fffff0fe 	.word	0xfffff0fe
 8002560:	08002d49 	.word	0x08002d49
 8002564:	08002e21 	.word	0x08002e21
 8002568:	08002e3d 	.word	0x08002e3d

0800256c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b0a1      	sub	sp, #132	; 0x84
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a9d      	ldr	r2, [pc, #628]	; (8002824 <HAL_ADC_ConfigChannel+0x290>)
 80025ae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x2a>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e321      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x66e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fd42 	bl	8002054 <LL_ADC_REG_IsConversionOngoing>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 8306 	bne.w	8002be4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d108      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x62>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	0e9b      	lsrs	r3, r3, #26
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	2201      	movs	r2, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	e016      	b.n	8002624 <HAL_ADC_ConfigChannel+0x90>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002604:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002606:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800260e:	2320      	movs	r3, #32
 8002610:	e003      	b.n	800261a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002612:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002614:	fab3 f383 	clz	r3, r3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f003 031f 	and.w	r3, r3, #31
 800261e:	2201      	movs	r2, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	69d1      	ldr	r1, [r2, #28]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	430b      	orrs	r3, r1
 8002630:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6859      	ldr	r1, [r3, #4]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	f7ff fbe1 	bl	8001e06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fd03 	bl	8002054 <LL_ADC_REG_IsConversionOngoing>
 800264e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fd10 	bl	800207a <LL_ADC_INJ_IsConversionOngoing>
 800265a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800265c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 80b3 	bne.w	80027ca <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 80af 	bne.w	80027ca <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6819      	ldr	r1, [r3, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	461a      	mov	r2, r3
 800267a:	f7ff fc03 	bl	8001e84 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800267e:	4b6a      	ldr	r3, [pc, #424]	; (8002828 <HAL_ADC_ConfigChannel+0x294>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800268a:	d10b      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x110>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	e01d      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x14c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10b      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x136>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	e00a      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x14c>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d027      	beq.n	800273a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6919      	ldr	r1, [r3, #16]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026f8:	f7ff fb1e 	bl	8001d38 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6919      	ldr	r1, [r3, #16]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	7e5b      	ldrb	r3, [r3, #25]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d102      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x17e>
 800270c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002710:	e000      	b.n	8002714 <HAL_ADC_ConfigChannel+0x180>
 8002712:	2300      	movs	r3, #0
 8002714:	461a      	mov	r2, r3
 8002716:	f7ff fb48 	bl	8001daa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6919      	ldr	r1, [r3, #16]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	7e1b      	ldrb	r3, [r3, #24]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d102      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x19c>
 800272a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800272e:	e000      	b.n	8002732 <HAL_ADC_ConfigChannel+0x19e>
 8002730:	2300      	movs	r3, #0
 8002732:	461a      	mov	r2, r3
 8002734:	f7ff fb20 	bl	8001d78 <LL_ADC_SetDataRightShift>
 8002738:	e047      	b.n	80027ca <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002740:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	069b      	lsls	r3, r3, #26
 800274a:	429a      	cmp	r2, r3
 800274c:	d107      	bne.n	800275e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800275c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002764:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	069b      	lsls	r3, r3, #26
 800276e:	429a      	cmp	r2, r3
 8002770:	d107      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002780:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002788:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	069b      	lsls	r3, r3, #26
 8002792:	429a      	cmp	r2, r3
 8002794:	d107      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027a4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	069b      	lsls	r3, r3, #26
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d107      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027c8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fc18 	bl	8002004 <LL_ADC_IsEnabled>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f040 820d 	bne.w	8002bf6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6819      	ldr	r1, [r3, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	461a      	mov	r2, r3
 80027ea:	f7ff fb77 	bl	8001edc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <HAL_ADC_ConfigChannel+0x290>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	f040 8133 	bne.w	8002a60 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002806:	2b00      	cmp	r3, #0
 8002808:	d110      	bne.n	800282c <HAL_ADC_ConfigChannel+0x298>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	0e9b      	lsrs	r3, r3, #26
 8002810:	3301      	adds	r3, #1
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	2b09      	cmp	r3, #9
 8002818:	bf94      	ite	ls
 800281a:	2301      	movls	r3, #1
 800281c:	2300      	movhi	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	e01e      	b.n	8002860 <HAL_ADC_ConfigChannel+0x2cc>
 8002822:	bf00      	nop
 8002824:	47ff0000 	.word	0x47ff0000
 8002828:	5c001000 	.word	0x5c001000
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800283a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800283e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002844:	2320      	movs	r3, #32
 8002846:	e003      	b.n	8002850 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	3301      	adds	r3, #1
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	2b09      	cmp	r3, #9
 8002858:	bf94      	ite	ls
 800285a:	2301      	movls	r3, #1
 800285c:	2300      	movhi	r3, #0
 800285e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002860:	2b00      	cmp	r3, #0
 8002862:	d079      	beq.n	8002958 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800286c:	2b00      	cmp	r3, #0
 800286e:	d107      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x2ec>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	0e9b      	lsrs	r3, r3, #26
 8002876:	3301      	adds	r3, #1
 8002878:	069b      	lsls	r3, r3, #26
 800287a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800287e:	e015      	b.n	80028ac <HAL_ADC_ConfigChannel+0x318>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800288e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002890:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002898:	2320      	movs	r3, #32
 800289a:	e003      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800289c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	3301      	adds	r3, #1
 80028a6:	069b      	lsls	r3, r3, #26
 80028a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d109      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x338>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	3301      	adds	r3, #1
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	2101      	movs	r1, #1
 80028c6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ca:	e017      	b.n	80028fc <HAL_ADC_ConfigChannel+0x368>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80028da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80028de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80028e4:	2320      	movs	r3, #32
 80028e6:	e003      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80028e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	3301      	adds	r3, #1
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f303 	lsl.w	r3, r1, r3
 80028fc:	ea42 0103 	orr.w	r1, r2, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x38e>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	0e9b      	lsrs	r3, r3, #26
 8002912:	3301      	adds	r3, #1
 8002914:	f003 021f 	and.w	r2, r3, #31
 8002918:	4613      	mov	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	4413      	add	r3, r2
 800291e:	051b      	lsls	r3, r3, #20
 8002920:	e018      	b.n	8002954 <HAL_ADC_ConfigChannel+0x3c0>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002932:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800293a:	2320      	movs	r3, #32
 800293c:	e003      	b.n	8002946 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800293e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	3301      	adds	r3, #1
 8002948:	f003 021f 	and.w	r2, r3, #31
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002954:	430b      	orrs	r3, r1
 8002956:	e07e      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002960:	2b00      	cmp	r3, #0
 8002962:	d107      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x3e0>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	3301      	adds	r3, #1
 800296c:	069b      	lsls	r3, r3, #26
 800296e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002972:	e015      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x40c>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800298c:	2320      	movs	r3, #32
 800298e:	e003      	b.n	8002998 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	3301      	adds	r3, #1
 800299a:	069b      	lsls	r3, r3, #26
 800299c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x42c>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	0e9b      	lsrs	r3, r3, #26
 80029b2:	3301      	adds	r3, #1
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	2101      	movs	r1, #1
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	e017      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x45c>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa93 f3a3 	rbit	r3, r3
 80029cc:	61bb      	str	r3, [r7, #24]
  return result;
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80029d8:	2320      	movs	r3, #32
 80029da:	e003      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	3301      	adds	r3, #1
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	ea42 0103 	orr.w	r1, r2, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10d      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x488>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0e9b      	lsrs	r3, r3, #26
 8002a06:	3301      	adds	r3, #1
 8002a08:	f003 021f 	and.w	r2, r3, #31
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	3b1e      	subs	r3, #30
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	e01b      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x4c0>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	60fb      	str	r3, [r7, #12]
  return result;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e003      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	f003 021f 	and.w	r2, r3, #31
 8002a46:	4613      	mov	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3b1e      	subs	r3, #30
 8002a4e:	051b      	lsls	r3, r3, #20
 8002a50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a54:	430b      	orrs	r3, r1
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	6892      	ldr	r2, [r2, #8]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f7ff fa12 	bl	8001e84 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f280 80c6 	bge.w	8002bf6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a67      	ldr	r2, [pc, #412]	; (8002c0c <HAL_ADC_ConfigChannel+0x678>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_ADC_ConfigChannel+0x4ea>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a65      	ldr	r2, [pc, #404]	; (8002c10 <HAL_ADC_ConfigChannel+0x67c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x4ee>
 8002a7e:	4b65      	ldr	r3, [pc, #404]	; (8002c14 <HAL_ADC_ConfigChannel+0x680>)
 8002a80:	e000      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x4f0>
 8002a82:	4b65      	ldr	r3, [pc, #404]	; (8002c18 <HAL_ADC_ConfigChannel+0x684>)
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff f949 	bl	8001d1c <LL_ADC_GetCommonPathInternalCh>
 8002a8a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a5e      	ldr	r2, [pc, #376]	; (8002c0c <HAL_ADC_ConfigChannel+0x678>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d004      	beq.n	8002aa0 <HAL_ADC_ConfigChannel+0x50c>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a5d      	ldr	r2, [pc, #372]	; (8002c10 <HAL_ADC_ConfigChannel+0x67c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d10e      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x52a>
 8002aa0:	485a      	ldr	r0, [pc, #360]	; (8002c0c <HAL_ADC_ConfigChannel+0x678>)
 8002aa2:	f7ff faaf 	bl	8002004 <LL_ADC_IsEnabled>
 8002aa6:	4604      	mov	r4, r0
 8002aa8:	4859      	ldr	r0, [pc, #356]	; (8002c10 <HAL_ADC_ConfigChannel+0x67c>)
 8002aaa:	f7ff faab 	bl	8002004 <LL_ADC_IsEnabled>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4323      	orrs	r3, r4
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	bf0c      	ite	eq
 8002ab6:	2301      	moveq	r3, #1
 8002ab8:	2300      	movne	r3, #0
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	e008      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x53c>
 8002abe:	4857      	ldr	r0, [pc, #348]	; (8002c1c <HAL_ADC_ConfigChannel+0x688>)
 8002ac0:	f7ff faa0 	bl	8002004 <LL_ADC_IsEnabled>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bf0c      	ite	eq
 8002aca:	2301      	moveq	r3, #1
 8002acc:	2300      	movne	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d07d      	beq.n	8002bd0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a51      	ldr	r2, [pc, #324]	; (8002c20 <HAL_ADC_ConfigChannel+0x68c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d130      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x5ac>
 8002ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d12b      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a4b      	ldr	r2, [pc, #300]	; (8002c1c <HAL_ADC_ConfigChannel+0x688>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	f040 8081 	bne.w	8002bf6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a44      	ldr	r2, [pc, #272]	; (8002c0c <HAL_ADC_ConfigChannel+0x678>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d004      	beq.n	8002b08 <HAL_ADC_ConfigChannel+0x574>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a43      	ldr	r2, [pc, #268]	; (8002c10 <HAL_ADC_ConfigChannel+0x67c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d101      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x578>
 8002b08:	4a42      	ldr	r2, [pc, #264]	; (8002c14 <HAL_ADC_ConfigChannel+0x680>)
 8002b0a:	e000      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x57a>
 8002b0c:	4a42      	ldr	r2, [pc, #264]	; (8002c18 <HAL_ADC_ConfigChannel+0x684>)
 8002b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b14:	4619      	mov	r1, r3
 8002b16:	4610      	mov	r0, r2
 8002b18:	f7ff f8ed 	bl	8001cf6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b1c:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_ADC_ConfigChannel+0x690>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	099b      	lsrs	r3, r3, #6
 8002b22:	4a41      	ldr	r2, [pc, #260]	; (8002c28 <HAL_ADC_ConfigChannel+0x694>)
 8002b24:	fba2 2303 	umull	r2, r3, r2, r3
 8002b28:	099b      	lsrs	r3, r3, #6
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b30:	e002      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f9      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b3e:	e05a      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a39      	ldr	r2, [pc, #228]	; (8002c2c <HAL_ADC_ConfigChannel+0x698>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d11e      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x5f4>
 8002b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d119      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a30      	ldr	r2, [pc, #192]	; (8002c1c <HAL_ADC_ConfigChannel+0x688>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d14b      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a2a      	ldr	r2, [pc, #168]	; (8002c0c <HAL_ADC_ConfigChannel+0x678>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d004      	beq.n	8002b72 <HAL_ADC_ConfigChannel+0x5de>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a28      	ldr	r2, [pc, #160]	; (8002c10 <HAL_ADC_ConfigChannel+0x67c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d101      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x5e2>
 8002b72:	4a28      	ldr	r2, [pc, #160]	; (8002c14 <HAL_ADC_ConfigChannel+0x680>)
 8002b74:	e000      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x5e4>
 8002b76:	4a28      	ldr	r2, [pc, #160]	; (8002c18 <HAL_ADC_ConfigChannel+0x684>)
 8002b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f7ff f8b8 	bl	8001cf6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b86:	e036      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a28      	ldr	r2, [pc, #160]	; (8002c30 <HAL_ADC_ConfigChannel+0x69c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d131      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x662>
 8002b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d12c      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1e      	ldr	r2, [pc, #120]	; (8002c1c <HAL_ADC_ConfigChannel+0x688>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d127      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <HAL_ADC_ConfigChannel+0x678>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d004      	beq.n	8002bba <HAL_ADC_ConfigChannel+0x626>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a16      	ldr	r2, [pc, #88]	; (8002c10 <HAL_ADC_ConfigChannel+0x67c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d101      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x62a>
 8002bba:	4a16      	ldr	r2, [pc, #88]	; (8002c14 <HAL_ADC_ConfigChannel+0x680>)
 8002bbc:	e000      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x62c>
 8002bbe:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <HAL_ADC_ConfigChannel+0x684>)
 8002bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4610      	mov	r0, r2
 8002bca:	f7ff f894 	bl	8001cf6 <LL_ADC_SetCommonPathInternalCh>
 8002bce:	e012      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd4:	f043 0220 	orr.w	r2, r3, #32
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002be2:	e008      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bfe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3784      	adds	r7, #132	; 0x84
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd90      	pop	{r4, r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40022000 	.word	0x40022000
 8002c10:	40022100 	.word	0x40022100
 8002c14:	40022300 	.word	0x40022300
 8002c18:	58026300 	.word	0x58026300
 8002c1c:	58026000 	.word	0x58026000
 8002c20:	cb840000 	.word	0xcb840000
 8002c24:	24000000 	.word	0x24000000
 8002c28:	053e2d63 	.word	0x053e2d63
 8002c2c:	c7520000 	.word	0xc7520000
 8002c30:	cfb80000 	.word	0xcfb80000

08002c34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff f9df 	bl	8002004 <LL_ADC_IsEnabled>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d16e      	bne.n	8002d2a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	4b38      	ldr	r3, [pc, #224]	; (8002d34 <ADC_Enable+0x100>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00d      	beq.n	8002c76 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5e:	f043 0210 	orr.w	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6a:	f043 0201 	orr.w	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e05a      	b.n	8002d2c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff f9ae 	bl	8001fdc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c80:	f7fe fffa 	bl	8001c78 <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a2b      	ldr	r2, [pc, #172]	; (8002d38 <ADC_Enable+0x104>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d004      	beq.n	8002c9a <ADC_Enable+0x66>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a29      	ldr	r2, [pc, #164]	; (8002d3c <ADC_Enable+0x108>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d101      	bne.n	8002c9e <ADC_Enable+0x6a>
 8002c9a:	4b29      	ldr	r3, [pc, #164]	; (8002d40 <ADC_Enable+0x10c>)
 8002c9c:	e000      	b.n	8002ca0 <ADC_Enable+0x6c>
 8002c9e:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <ADC_Enable+0x110>)
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff f93f 	bl	8001f24 <LL_ADC_GetMultimode>
 8002ca6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a23      	ldr	r2, [pc, #140]	; (8002d3c <ADC_Enable+0x108>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d002      	beq.n	8002cb8 <ADC_Enable+0x84>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	e000      	b.n	8002cba <ADC_Enable+0x86>
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	; (8002d38 <ADC_Enable+0x104>)
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6812      	ldr	r2, [r2, #0]
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d02c      	beq.n	8002d1c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d130      	bne.n	8002d2a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cc8:	e028      	b.n	8002d1c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff f998 	bl	8002004 <LL_ADC_IsEnabled>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d104      	bne.n	8002ce4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff f97c 	bl	8001fdc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ce4:	f7fe ffc8 	bl	8001c78 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d914      	bls.n	8002d1c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d00d      	beq.n	8002d1c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	f043 0210 	orr.w	r2, r3, #16
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	f043 0201 	orr.w	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e007      	b.n	8002d2c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d1cf      	bne.n	8002cca <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	8000003f 	.word	0x8000003f
 8002d38:	40022000 	.word	0x40022000
 8002d3c:	40022100 	.word	0x40022100
 8002d40:	40022300 	.word	0x40022300
 8002d44:	58026300 	.word	0x58026300

08002d48 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d14b      	bne.n	8002dfa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d021      	beq.n	8002dc0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff f82d 	bl	8001de0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d032      	beq.n	8002df2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d12b      	bne.n	8002df2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d11f      	bne.n	8002df2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	655a      	str	r2, [r3, #84]	; 0x54
 8002dbe:	e018      	b.n	8002df2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d111      	bne.n	8002df2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d105      	bne.n	8002df2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f7fd fcf0 	bl	80007d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002df8:	e00e      	b.n	8002e18 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff fbba 	bl	8002580 <HAL_ADC_ErrorCallback>
}
 8002e0c:	e004      	b.n	8002e18 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	4798      	blx	r3
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f7ff fb9c 	bl	800256c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e34:	bf00      	nop
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f7ff fb8c 	bl	8002580 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e68:	bf00      	nop
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a79      	ldr	r2, [pc, #484]	; (8003064 <ADC_ConfigureBoostMode+0x1f4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d004      	beq.n	8002e8c <ADC_ConfigureBoostMode+0x1c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a78      	ldr	r2, [pc, #480]	; (8003068 <ADC_ConfigureBoostMode+0x1f8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d109      	bne.n	8002ea0 <ADC_ConfigureBoostMode+0x30>
 8002e8c:	4b77      	ldr	r3, [pc, #476]	; (800306c <ADC_ConfigureBoostMode+0x1fc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf14      	ite	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	2300      	moveq	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e008      	b.n	8002eb2 <ADC_ConfigureBoostMode+0x42>
 8002ea0:	4b73      	ldr	r3, [pc, #460]	; (8003070 <ADC_ConfigureBoostMode+0x200>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01c      	beq.n	8002ef0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002eb6:	f004 f959 	bl	800716c <HAL_RCC_GetHCLKFreq>
 8002eba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ec4:	d010      	beq.n	8002ee8 <ADC_ConfigureBoostMode+0x78>
 8002ec6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002eca:	d871      	bhi.n	8002fb0 <ADC_ConfigureBoostMode+0x140>
 8002ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed0:	d002      	beq.n	8002ed8 <ADC_ConfigureBoostMode+0x68>
 8002ed2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ed6:	d16b      	bne.n	8002fb0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	0c1b      	lsrs	r3, r3, #16
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	60fb      	str	r3, [r7, #12]
        break;
 8002ee6:	e066      	b.n	8002fb6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	089b      	lsrs	r3, r3, #2
 8002eec:	60fb      	str	r3, [r7, #12]
        break;
 8002eee:	e062      	b.n	8002fb6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002ef0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002ef4:	f005 f91e 	bl	8008134 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ef8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002f02:	d051      	beq.n	8002fa8 <ADC_ConfigureBoostMode+0x138>
 8002f04:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002f08:	d854      	bhi.n	8002fb4 <ADC_ConfigureBoostMode+0x144>
 8002f0a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002f0e:	d047      	beq.n	8002fa0 <ADC_ConfigureBoostMode+0x130>
 8002f10:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002f14:	d84e      	bhi.n	8002fb4 <ADC_ConfigureBoostMode+0x144>
 8002f16:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002f1a:	d03d      	beq.n	8002f98 <ADC_ConfigureBoostMode+0x128>
 8002f1c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002f20:	d848      	bhi.n	8002fb4 <ADC_ConfigureBoostMode+0x144>
 8002f22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f26:	d033      	beq.n	8002f90 <ADC_ConfigureBoostMode+0x120>
 8002f28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f2c:	d842      	bhi.n	8002fb4 <ADC_ConfigureBoostMode+0x144>
 8002f2e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002f32:	d029      	beq.n	8002f88 <ADC_ConfigureBoostMode+0x118>
 8002f34:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002f38:	d83c      	bhi.n	8002fb4 <ADC_ConfigureBoostMode+0x144>
 8002f3a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002f3e:	d01a      	beq.n	8002f76 <ADC_ConfigureBoostMode+0x106>
 8002f40:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002f44:	d836      	bhi.n	8002fb4 <ADC_ConfigureBoostMode+0x144>
 8002f46:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002f4a:	d014      	beq.n	8002f76 <ADC_ConfigureBoostMode+0x106>
 8002f4c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002f50:	d830      	bhi.n	8002fb4 <ADC_ConfigureBoostMode+0x144>
 8002f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f56:	d00e      	beq.n	8002f76 <ADC_ConfigureBoostMode+0x106>
 8002f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f5c:	d82a      	bhi.n	8002fb4 <ADC_ConfigureBoostMode+0x144>
 8002f5e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f62:	d008      	beq.n	8002f76 <ADC_ConfigureBoostMode+0x106>
 8002f64:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f68:	d824      	bhi.n	8002fb4 <ADC_ConfigureBoostMode+0x144>
 8002f6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f6e:	d002      	beq.n	8002f76 <ADC_ConfigureBoostMode+0x106>
 8002f70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f74:	d11e      	bne.n	8002fb4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	0c9b      	lsrs	r3, r3, #18
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f84:	60fb      	str	r3, [r7, #12]
        break;
 8002f86:	e016      	b.n	8002fb6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	091b      	lsrs	r3, r3, #4
 8002f8c:	60fb      	str	r3, [r7, #12]
        break;
 8002f8e:	e012      	b.n	8002fb6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	60fb      	str	r3, [r7, #12]
        break;
 8002f96:	e00e      	b.n	8002fb6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	099b      	lsrs	r3, r3, #6
 8002f9c:	60fb      	str	r3, [r7, #12]
        break;
 8002f9e:	e00a      	b.n	8002fb6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	09db      	lsrs	r3, r3, #7
 8002fa4:	60fb      	str	r3, [r7, #12]
        break;
 8002fa6:	e006      	b.n	8002fb6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	0a1b      	lsrs	r3, r3, #8
 8002fac:	60fb      	str	r3, [r7, #12]
        break;
 8002fae:	e002      	b.n	8002fb6 <ADC_ConfigureBoostMode+0x146>
        break;
 8002fb0:	bf00      	nop
 8002fb2:	e000      	b.n	8002fb6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002fb4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002fb6:	f7fe fe6b 	bl	8001c90 <HAL_GetREVID>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d815      	bhi.n	8002ff0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4a2b      	ldr	r2, [pc, #172]	; (8003074 <ADC_ConfigureBoostMode+0x204>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d908      	bls.n	8002fde <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fda:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002fdc:	e03e      	b.n	800305c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fec:	609a      	str	r2, [r3, #8]
}
 8002fee:	e035      	b.n	800305c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4a1f      	ldr	r2, [pc, #124]	; (8003078 <ADC_ConfigureBoostMode+0x208>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d808      	bhi.n	8003010 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800300c:	609a      	str	r2, [r3, #8]
}
 800300e:	e025      	b.n	800305c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4a1a      	ldr	r2, [pc, #104]	; (800307c <ADC_ConfigureBoostMode+0x20c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d80a      	bhi.n	800302e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800302a:	609a      	str	r2, [r3, #8]
}
 800302c:	e016      	b.n	800305c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4a13      	ldr	r2, [pc, #76]	; (8003080 <ADC_ConfigureBoostMode+0x210>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d80a      	bhi.n	800304c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003048:	609a      	str	r2, [r3, #8]
}
 800304a:	e007      	b.n	800305c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800305a:	609a      	str	r2, [r3, #8]
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40022000 	.word	0x40022000
 8003068:	40022100 	.word	0x40022100
 800306c:	40022300 	.word	0x40022300
 8003070:	58026300 	.word	0x58026300
 8003074:	01312d00 	.word	0x01312d00
 8003078:	005f5e10 	.word	0x005f5e10
 800307c:	00bebc20 	.word	0x00bebc20
 8003080:	017d7840 	.word	0x017d7840

08003084 <__NVIC_SetPriorityGrouping>:
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <__NVIC_SetPriorityGrouping+0x40>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a0:	4013      	ands	r3, r2
 80030a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <__NVIC_SetPriorityGrouping+0x44>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030b2:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <__NVIC_SetPriorityGrouping+0x40>)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	60d3      	str	r3, [r2, #12]
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	e000ed00 	.word	0xe000ed00
 80030c8:	05fa0000 	.word	0x05fa0000

080030cc <__NVIC_GetPriorityGrouping>:
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <__NVIC_GetPriorityGrouping+0x18>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	0a1b      	lsrs	r3, r3, #8
 80030d6:	f003 0307 	and.w	r3, r3, #7
}
 80030da:	4618      	mov	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <__NVIC_EnableIRQ>:
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	db0b      	blt.n	8003112 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	f003 021f 	and.w	r2, r3, #31
 8003100:	4907      	ldr	r1, [pc, #28]	; (8003120 <__NVIC_EnableIRQ+0x38>)
 8003102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	2001      	movs	r0, #1
 800310a:	fa00 f202 	lsl.w	r2, r0, r2
 800310e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000e100 	.word	0xe000e100

08003124 <__NVIC_SetPriority>:
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	6039      	str	r1, [r7, #0]
 800312e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003134:	2b00      	cmp	r3, #0
 8003136:	db0a      	blt.n	800314e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	490c      	ldr	r1, [pc, #48]	; (8003170 <__NVIC_SetPriority+0x4c>)
 800313e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003142:	0112      	lsls	r2, r2, #4
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	440b      	add	r3, r1
 8003148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800314c:	e00a      	b.n	8003164 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4908      	ldr	r1, [pc, #32]	; (8003174 <__NVIC_SetPriority+0x50>)
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	3b04      	subs	r3, #4
 800315c:	0112      	lsls	r2, r2, #4
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	440b      	add	r3, r1
 8003162:	761a      	strb	r2, [r3, #24]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	e000e100 	.word	0xe000e100
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <NVIC_EncodePriority>:
{
 8003178:	b480      	push	{r7}
 800317a:	b089      	sub	sp, #36	; 0x24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f1c3 0307 	rsb	r3, r3, #7
 8003192:	2b04      	cmp	r3, #4
 8003194:	bf28      	it	cs
 8003196:	2304      	movcs	r3, #4
 8003198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3304      	adds	r3, #4
 800319e:	2b06      	cmp	r3, #6
 80031a0:	d902      	bls.n	80031a8 <NVIC_EncodePriority+0x30>
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3b03      	subs	r3, #3
 80031a6:	e000      	b.n	80031aa <NVIC_EncodePriority+0x32>
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43da      	mvns	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	401a      	ands	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c0:	f04f 31ff 	mov.w	r1, #4294967295
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	43d9      	mvns	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	4313      	orrs	r3, r2
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3724      	adds	r7, #36	; 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ff4c 	bl	8003084 <__NVIC_SetPriorityGrouping>
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003202:	f7ff ff63 	bl	80030cc <__NVIC_GetPriorityGrouping>
 8003206:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	6978      	ldr	r0, [r7, #20]
 800320e:	f7ff ffb3 	bl	8003178 <NVIC_EncodePriority>
 8003212:	4602      	mov	r2, r0
 8003214:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003218:	4611      	mov	r1, r2
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff ff82 	bl	8003124 <__NVIC_SetPriority>
}
 8003220:	bf00      	nop
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff ff56 	bl	80030e8 <__NVIC_EnableIRQ>
}
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003248:	f3bf 8f5f 	dmb	sy
}
 800324c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <HAL_MPU_Disable+0x28>)
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	4a06      	ldr	r2, [pc, #24]	; (800326c <HAL_MPU_Disable+0x28>)
 8003254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003258:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <HAL_MPU_Disable+0x2c>)
 800325c:	2200      	movs	r2, #0
 800325e:	605a      	str	r2, [r3, #4]
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000ed00 	.word	0xe000ed00
 8003270:	e000ed90 	.word	0xe000ed90

08003274 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800327c:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <HAL_MPU_Enable+0x38>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003286:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <HAL_MPU_Enable+0x3c>)
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <HAL_MPU_Enable+0x3c>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003290:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003292:	f3bf 8f4f 	dsb	sy
}
 8003296:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003298:	f3bf 8f6f 	isb	sy
}
 800329c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000ed90 	.word	0xe000ed90
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	785a      	ldrb	r2, [r3, #1]
 80032c0:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <HAL_MPU_ConfigRegion+0x84>)
 80032c2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d029      	beq.n	8003320 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80032cc:	4a1a      	ldr	r2, [pc, #104]	; (8003338 <HAL_MPU_ConfigRegion+0x84>)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7b1b      	ldrb	r3, [r3, #12]
 80032d8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7adb      	ldrb	r3, [r3, #11]
 80032de:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	7a9b      	ldrb	r3, [r3, #10]
 80032e6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80032e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	7b5b      	ldrb	r3, [r3, #13]
 80032ee:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80032f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	7b9b      	ldrb	r3, [r3, #14]
 80032f6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80032f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	7bdb      	ldrb	r3, [r3, #15]
 80032fe:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003300:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	7a5b      	ldrb	r3, [r3, #9]
 8003306:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003308:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	7a1b      	ldrb	r3, [r3, #8]
 800330e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003310:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003318:	4a07      	ldr	r2, [pc, #28]	; (8003338 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800331a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800331c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800331e:	e005      	b.n	800332c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_MPU_ConfigRegion+0x84>)
 8003322:	2200      	movs	r2, #0
 8003324:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8003326:	4b04      	ldr	r3, [pc, #16]	; (8003338 <HAL_MPU_ConfigRegion+0x84>)
 8003328:	2200      	movs	r2, #0
 800332a:	611a      	str	r2, [r3, #16]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000ed90 	.word	0xe000ed90

0800333c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e226      	b.n	80037a6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_DMA_Start_IT+0x2a>
 8003362:	2302      	movs	r3, #2
 8003364:	e21f      	b.n	80037a6 <HAL_DMA_Start_IT+0x46a>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	f040 820a 	bne.w	8003790 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a68      	ldr	r2, [pc, #416]	; (8003530 <HAL_DMA_Start_IT+0x1f4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d04a      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a66      	ldr	r2, [pc, #408]	; (8003534 <HAL_DMA_Start_IT+0x1f8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d045      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a65      	ldr	r2, [pc, #404]	; (8003538 <HAL_DMA_Start_IT+0x1fc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d040      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a63      	ldr	r2, [pc, #396]	; (800353c <HAL_DMA_Start_IT+0x200>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d03b      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a62      	ldr	r2, [pc, #392]	; (8003540 <HAL_DMA_Start_IT+0x204>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d036      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a60      	ldr	r2, [pc, #384]	; (8003544 <HAL_DMA_Start_IT+0x208>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d031      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a5f      	ldr	r2, [pc, #380]	; (8003548 <HAL_DMA_Start_IT+0x20c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d02c      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a5d      	ldr	r2, [pc, #372]	; (800354c <HAL_DMA_Start_IT+0x210>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d027      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a5c      	ldr	r2, [pc, #368]	; (8003550 <HAL_DMA_Start_IT+0x214>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d022      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a5a      	ldr	r2, [pc, #360]	; (8003554 <HAL_DMA_Start_IT+0x218>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d01d      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a59      	ldr	r2, [pc, #356]	; (8003558 <HAL_DMA_Start_IT+0x21c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d018      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a57      	ldr	r2, [pc, #348]	; (800355c <HAL_DMA_Start_IT+0x220>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a56      	ldr	r2, [pc, #344]	; (8003560 <HAL_DMA_Start_IT+0x224>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00e      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a54      	ldr	r2, [pc, #336]	; (8003564 <HAL_DMA_Start_IT+0x228>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d009      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a53      	ldr	r2, [pc, #332]	; (8003568 <HAL_DMA_Start_IT+0x22c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <HAL_DMA_Start_IT+0xee>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a51      	ldr	r2, [pc, #324]	; (800356c <HAL_DMA_Start_IT+0x230>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d108      	bne.n	800343c <HAL_DMA_Start_IT+0x100>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0201 	bic.w	r2, r2, #1
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	e007      	b.n	800344c <HAL_DMA_Start_IT+0x110>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f9dc 	bl	8003810 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a34      	ldr	r2, [pc, #208]	; (8003530 <HAL_DMA_Start_IT+0x1f4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d04a      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a33      	ldr	r2, [pc, #204]	; (8003534 <HAL_DMA_Start_IT+0x1f8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d045      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a31      	ldr	r2, [pc, #196]	; (8003538 <HAL_DMA_Start_IT+0x1fc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d040      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a30      	ldr	r2, [pc, #192]	; (800353c <HAL_DMA_Start_IT+0x200>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d03b      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a2e      	ldr	r2, [pc, #184]	; (8003540 <HAL_DMA_Start_IT+0x204>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d036      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a2d      	ldr	r2, [pc, #180]	; (8003544 <HAL_DMA_Start_IT+0x208>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d031      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a2b      	ldr	r2, [pc, #172]	; (8003548 <HAL_DMA_Start_IT+0x20c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d02c      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a2a      	ldr	r2, [pc, #168]	; (800354c <HAL_DMA_Start_IT+0x210>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d027      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a28      	ldr	r2, [pc, #160]	; (8003550 <HAL_DMA_Start_IT+0x214>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d022      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a27      	ldr	r2, [pc, #156]	; (8003554 <HAL_DMA_Start_IT+0x218>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d01d      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a25      	ldr	r2, [pc, #148]	; (8003558 <HAL_DMA_Start_IT+0x21c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d018      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a24      	ldr	r2, [pc, #144]	; (800355c <HAL_DMA_Start_IT+0x220>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d013      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a22      	ldr	r2, [pc, #136]	; (8003560 <HAL_DMA_Start_IT+0x224>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00e      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a21      	ldr	r2, [pc, #132]	; (8003564 <HAL_DMA_Start_IT+0x228>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d009      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1f      	ldr	r2, [pc, #124]	; (8003568 <HAL_DMA_Start_IT+0x22c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d004      	beq.n	80034f8 <HAL_DMA_Start_IT+0x1bc>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1e      	ldr	r2, [pc, #120]	; (800356c <HAL_DMA_Start_IT+0x230>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d101      	bne.n	80034fc <HAL_DMA_Start_IT+0x1c0>
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <HAL_DMA_Start_IT+0x1c2>
 80034fc:	2300      	movs	r3, #0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d036      	beq.n	8003570 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f023 021e 	bic.w	r2, r3, #30
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0216 	orr.w	r2, r2, #22
 8003514:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d03e      	beq.n	800359c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0208 	orr.w	r2, r2, #8
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e035      	b.n	800359c <HAL_DMA_Start_IT+0x260>
 8003530:	40020010 	.word	0x40020010
 8003534:	40020028 	.word	0x40020028
 8003538:	40020040 	.word	0x40020040
 800353c:	40020058 	.word	0x40020058
 8003540:	40020070 	.word	0x40020070
 8003544:	40020088 	.word	0x40020088
 8003548:	400200a0 	.word	0x400200a0
 800354c:	400200b8 	.word	0x400200b8
 8003550:	40020410 	.word	0x40020410
 8003554:	40020428 	.word	0x40020428
 8003558:	40020440 	.word	0x40020440
 800355c:	40020458 	.word	0x40020458
 8003560:	40020470 	.word	0x40020470
 8003564:	40020488 	.word	0x40020488
 8003568:	400204a0 	.word	0x400204a0
 800356c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 020e 	bic.w	r2, r3, #14
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 020a 	orr.w	r2, r2, #10
 8003582:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0204 	orr.w	r2, r2, #4
 800359a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a83      	ldr	r2, [pc, #524]	; (80037b0 <HAL_DMA_Start_IT+0x474>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d072      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a82      	ldr	r2, [pc, #520]	; (80037b4 <HAL_DMA_Start_IT+0x478>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d06d      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a80      	ldr	r2, [pc, #512]	; (80037b8 <HAL_DMA_Start_IT+0x47c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d068      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a7f      	ldr	r2, [pc, #508]	; (80037bc <HAL_DMA_Start_IT+0x480>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d063      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a7d      	ldr	r2, [pc, #500]	; (80037c0 <HAL_DMA_Start_IT+0x484>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d05e      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a7c      	ldr	r2, [pc, #496]	; (80037c4 <HAL_DMA_Start_IT+0x488>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d059      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a7a      	ldr	r2, [pc, #488]	; (80037c8 <HAL_DMA_Start_IT+0x48c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d054      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a79      	ldr	r2, [pc, #484]	; (80037cc <HAL_DMA_Start_IT+0x490>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d04f      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a77      	ldr	r2, [pc, #476]	; (80037d0 <HAL_DMA_Start_IT+0x494>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d04a      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a76      	ldr	r2, [pc, #472]	; (80037d4 <HAL_DMA_Start_IT+0x498>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d045      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a74      	ldr	r2, [pc, #464]	; (80037d8 <HAL_DMA_Start_IT+0x49c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d040      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a73      	ldr	r2, [pc, #460]	; (80037dc <HAL_DMA_Start_IT+0x4a0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d03b      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a71      	ldr	r2, [pc, #452]	; (80037e0 <HAL_DMA_Start_IT+0x4a4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d036      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a70      	ldr	r2, [pc, #448]	; (80037e4 <HAL_DMA_Start_IT+0x4a8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d031      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a6e      	ldr	r2, [pc, #440]	; (80037e8 <HAL_DMA_Start_IT+0x4ac>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d02c      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a6d      	ldr	r2, [pc, #436]	; (80037ec <HAL_DMA_Start_IT+0x4b0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d027      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a6b      	ldr	r2, [pc, #428]	; (80037f0 <HAL_DMA_Start_IT+0x4b4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d022      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a6a      	ldr	r2, [pc, #424]	; (80037f4 <HAL_DMA_Start_IT+0x4b8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d01d      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a68      	ldr	r2, [pc, #416]	; (80037f8 <HAL_DMA_Start_IT+0x4bc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d018      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a67      	ldr	r2, [pc, #412]	; (80037fc <HAL_DMA_Start_IT+0x4c0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d013      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a65      	ldr	r2, [pc, #404]	; (8003800 <HAL_DMA_Start_IT+0x4c4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00e      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a64      	ldr	r2, [pc, #400]	; (8003804 <HAL_DMA_Start_IT+0x4c8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d009      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a62      	ldr	r2, [pc, #392]	; (8003808 <HAL_DMA_Start_IT+0x4cc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_DMA_Start_IT+0x350>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a61      	ldr	r2, [pc, #388]	; (800380c <HAL_DMA_Start_IT+0x4d0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d101      	bne.n	8003690 <HAL_DMA_Start_IT+0x354>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <HAL_DMA_Start_IT+0x356>
 8003690:	2300      	movs	r3, #0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01a      	beq.n	80036cc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d007      	beq.n	80036cc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a37      	ldr	r2, [pc, #220]	; (80037b0 <HAL_DMA_Start_IT+0x474>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d04a      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a36      	ldr	r2, [pc, #216]	; (80037b4 <HAL_DMA_Start_IT+0x478>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d045      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a34      	ldr	r2, [pc, #208]	; (80037b8 <HAL_DMA_Start_IT+0x47c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d040      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a33      	ldr	r2, [pc, #204]	; (80037bc <HAL_DMA_Start_IT+0x480>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d03b      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a31      	ldr	r2, [pc, #196]	; (80037c0 <HAL_DMA_Start_IT+0x484>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d036      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a30      	ldr	r2, [pc, #192]	; (80037c4 <HAL_DMA_Start_IT+0x488>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d031      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a2e      	ldr	r2, [pc, #184]	; (80037c8 <HAL_DMA_Start_IT+0x48c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d02c      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a2d      	ldr	r2, [pc, #180]	; (80037cc <HAL_DMA_Start_IT+0x490>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d027      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a2b      	ldr	r2, [pc, #172]	; (80037d0 <HAL_DMA_Start_IT+0x494>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d022      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a2a      	ldr	r2, [pc, #168]	; (80037d4 <HAL_DMA_Start_IT+0x498>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d01d      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a28      	ldr	r2, [pc, #160]	; (80037d8 <HAL_DMA_Start_IT+0x49c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d018      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a27      	ldr	r2, [pc, #156]	; (80037dc <HAL_DMA_Start_IT+0x4a0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d013      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a25      	ldr	r2, [pc, #148]	; (80037e0 <HAL_DMA_Start_IT+0x4a4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00e      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a24      	ldr	r2, [pc, #144]	; (80037e4 <HAL_DMA_Start_IT+0x4a8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d009      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a22      	ldr	r2, [pc, #136]	; (80037e8 <HAL_DMA_Start_IT+0x4ac>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d004      	beq.n	800376c <HAL_DMA_Start_IT+0x430>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a21      	ldr	r2, [pc, #132]	; (80037ec <HAL_DMA_Start_IT+0x4b0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d108      	bne.n	800377e <HAL_DMA_Start_IT+0x442>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	e012      	b.n	80037a4 <HAL_DMA_Start_IT+0x468>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0201 	orr.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	e009      	b.n	80037a4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003796:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40020010 	.word	0x40020010
 80037b4:	40020028 	.word	0x40020028
 80037b8:	40020040 	.word	0x40020040
 80037bc:	40020058 	.word	0x40020058
 80037c0:	40020070 	.word	0x40020070
 80037c4:	40020088 	.word	0x40020088
 80037c8:	400200a0 	.word	0x400200a0
 80037cc:	400200b8 	.word	0x400200b8
 80037d0:	40020410 	.word	0x40020410
 80037d4:	40020428 	.word	0x40020428
 80037d8:	40020440 	.word	0x40020440
 80037dc:	40020458 	.word	0x40020458
 80037e0:	40020470 	.word	0x40020470
 80037e4:	40020488 	.word	0x40020488
 80037e8:	400204a0 	.word	0x400204a0
 80037ec:	400204b8 	.word	0x400204b8
 80037f0:	58025408 	.word	0x58025408
 80037f4:	5802541c 	.word	0x5802541c
 80037f8:	58025430 	.word	0x58025430
 80037fc:	58025444 	.word	0x58025444
 8003800:	58025458 	.word	0x58025458
 8003804:	5802546c 	.word	0x5802546c
 8003808:	58025480 	.word	0x58025480
 800380c:	58025494 	.word	0x58025494

08003810 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003828:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7f      	ldr	r2, [pc, #508]	; (8003a2c <DMA_SetConfig+0x21c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d072      	beq.n	800391a <DMA_SetConfig+0x10a>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a7d      	ldr	r2, [pc, #500]	; (8003a30 <DMA_SetConfig+0x220>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d06d      	beq.n	800391a <DMA_SetConfig+0x10a>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a7c      	ldr	r2, [pc, #496]	; (8003a34 <DMA_SetConfig+0x224>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d068      	beq.n	800391a <DMA_SetConfig+0x10a>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a7a      	ldr	r2, [pc, #488]	; (8003a38 <DMA_SetConfig+0x228>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d063      	beq.n	800391a <DMA_SetConfig+0x10a>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a79      	ldr	r2, [pc, #484]	; (8003a3c <DMA_SetConfig+0x22c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d05e      	beq.n	800391a <DMA_SetConfig+0x10a>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a77      	ldr	r2, [pc, #476]	; (8003a40 <DMA_SetConfig+0x230>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d059      	beq.n	800391a <DMA_SetConfig+0x10a>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a76      	ldr	r2, [pc, #472]	; (8003a44 <DMA_SetConfig+0x234>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d054      	beq.n	800391a <DMA_SetConfig+0x10a>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a74      	ldr	r2, [pc, #464]	; (8003a48 <DMA_SetConfig+0x238>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d04f      	beq.n	800391a <DMA_SetConfig+0x10a>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a73      	ldr	r2, [pc, #460]	; (8003a4c <DMA_SetConfig+0x23c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d04a      	beq.n	800391a <DMA_SetConfig+0x10a>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a71      	ldr	r2, [pc, #452]	; (8003a50 <DMA_SetConfig+0x240>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d045      	beq.n	800391a <DMA_SetConfig+0x10a>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a70      	ldr	r2, [pc, #448]	; (8003a54 <DMA_SetConfig+0x244>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d040      	beq.n	800391a <DMA_SetConfig+0x10a>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a6e      	ldr	r2, [pc, #440]	; (8003a58 <DMA_SetConfig+0x248>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d03b      	beq.n	800391a <DMA_SetConfig+0x10a>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a6d      	ldr	r2, [pc, #436]	; (8003a5c <DMA_SetConfig+0x24c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d036      	beq.n	800391a <DMA_SetConfig+0x10a>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a6b      	ldr	r2, [pc, #428]	; (8003a60 <DMA_SetConfig+0x250>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d031      	beq.n	800391a <DMA_SetConfig+0x10a>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a6a      	ldr	r2, [pc, #424]	; (8003a64 <DMA_SetConfig+0x254>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d02c      	beq.n	800391a <DMA_SetConfig+0x10a>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a68      	ldr	r2, [pc, #416]	; (8003a68 <DMA_SetConfig+0x258>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d027      	beq.n	800391a <DMA_SetConfig+0x10a>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a67      	ldr	r2, [pc, #412]	; (8003a6c <DMA_SetConfig+0x25c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d022      	beq.n	800391a <DMA_SetConfig+0x10a>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a65      	ldr	r2, [pc, #404]	; (8003a70 <DMA_SetConfig+0x260>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d01d      	beq.n	800391a <DMA_SetConfig+0x10a>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a64      	ldr	r2, [pc, #400]	; (8003a74 <DMA_SetConfig+0x264>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d018      	beq.n	800391a <DMA_SetConfig+0x10a>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a62      	ldr	r2, [pc, #392]	; (8003a78 <DMA_SetConfig+0x268>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <DMA_SetConfig+0x10a>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a61      	ldr	r2, [pc, #388]	; (8003a7c <DMA_SetConfig+0x26c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00e      	beq.n	800391a <DMA_SetConfig+0x10a>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a5f      	ldr	r2, [pc, #380]	; (8003a80 <DMA_SetConfig+0x270>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d009      	beq.n	800391a <DMA_SetConfig+0x10a>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a5e      	ldr	r2, [pc, #376]	; (8003a84 <DMA_SetConfig+0x274>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d004      	beq.n	800391a <DMA_SetConfig+0x10a>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a5c      	ldr	r2, [pc, #368]	; (8003a88 <DMA_SetConfig+0x278>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d101      	bne.n	800391e <DMA_SetConfig+0x10e>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <DMA_SetConfig+0x110>
 800391e:	2300      	movs	r3, #0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00d      	beq.n	8003940 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800392c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d004      	beq.n	8003940 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800393e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a39      	ldr	r2, [pc, #228]	; (8003a2c <DMA_SetConfig+0x21c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d04a      	beq.n	80039e0 <DMA_SetConfig+0x1d0>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a38      	ldr	r2, [pc, #224]	; (8003a30 <DMA_SetConfig+0x220>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d045      	beq.n	80039e0 <DMA_SetConfig+0x1d0>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a36      	ldr	r2, [pc, #216]	; (8003a34 <DMA_SetConfig+0x224>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d040      	beq.n	80039e0 <DMA_SetConfig+0x1d0>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a35      	ldr	r2, [pc, #212]	; (8003a38 <DMA_SetConfig+0x228>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d03b      	beq.n	80039e0 <DMA_SetConfig+0x1d0>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a33      	ldr	r2, [pc, #204]	; (8003a3c <DMA_SetConfig+0x22c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d036      	beq.n	80039e0 <DMA_SetConfig+0x1d0>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a32      	ldr	r2, [pc, #200]	; (8003a40 <DMA_SetConfig+0x230>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d031      	beq.n	80039e0 <DMA_SetConfig+0x1d0>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a30      	ldr	r2, [pc, #192]	; (8003a44 <DMA_SetConfig+0x234>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d02c      	beq.n	80039e0 <DMA_SetConfig+0x1d0>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2f      	ldr	r2, [pc, #188]	; (8003a48 <DMA_SetConfig+0x238>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d027      	beq.n	80039e0 <DMA_SetConfig+0x1d0>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a2d      	ldr	r2, [pc, #180]	; (8003a4c <DMA_SetConfig+0x23c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d022      	beq.n	80039e0 <DMA_SetConfig+0x1d0>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a2c      	ldr	r2, [pc, #176]	; (8003a50 <DMA_SetConfig+0x240>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d01d      	beq.n	80039e0 <DMA_SetConfig+0x1d0>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <DMA_SetConfig+0x244>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d018      	beq.n	80039e0 <DMA_SetConfig+0x1d0>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a29      	ldr	r2, [pc, #164]	; (8003a58 <DMA_SetConfig+0x248>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d013      	beq.n	80039e0 <DMA_SetConfig+0x1d0>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a27      	ldr	r2, [pc, #156]	; (8003a5c <DMA_SetConfig+0x24c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00e      	beq.n	80039e0 <DMA_SetConfig+0x1d0>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a26      	ldr	r2, [pc, #152]	; (8003a60 <DMA_SetConfig+0x250>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d009      	beq.n	80039e0 <DMA_SetConfig+0x1d0>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a24      	ldr	r2, [pc, #144]	; (8003a64 <DMA_SetConfig+0x254>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <DMA_SetConfig+0x1d0>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a23      	ldr	r2, [pc, #140]	; (8003a68 <DMA_SetConfig+0x258>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d101      	bne.n	80039e4 <DMA_SetConfig+0x1d4>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <DMA_SetConfig+0x1d6>
 80039e4:	2300      	movs	r3, #0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d059      	beq.n	8003a9e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ee:	f003 031f 	and.w	r3, r3, #31
 80039f2:	223f      	movs	r2, #63	; 0x3f
 80039f4:	409a      	lsls	r2, r3
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a08:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b40      	cmp	r3, #64	; 0x40
 8003a18:	d138      	bne.n	8003a8c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003a2a:	e086      	b.n	8003b3a <DMA_SetConfig+0x32a>
 8003a2c:	40020010 	.word	0x40020010
 8003a30:	40020028 	.word	0x40020028
 8003a34:	40020040 	.word	0x40020040
 8003a38:	40020058 	.word	0x40020058
 8003a3c:	40020070 	.word	0x40020070
 8003a40:	40020088 	.word	0x40020088
 8003a44:	400200a0 	.word	0x400200a0
 8003a48:	400200b8 	.word	0x400200b8
 8003a4c:	40020410 	.word	0x40020410
 8003a50:	40020428 	.word	0x40020428
 8003a54:	40020440 	.word	0x40020440
 8003a58:	40020458 	.word	0x40020458
 8003a5c:	40020470 	.word	0x40020470
 8003a60:	40020488 	.word	0x40020488
 8003a64:	400204a0 	.word	0x400204a0
 8003a68:	400204b8 	.word	0x400204b8
 8003a6c:	58025408 	.word	0x58025408
 8003a70:	5802541c 	.word	0x5802541c
 8003a74:	58025430 	.word	0x58025430
 8003a78:	58025444 	.word	0x58025444
 8003a7c:	58025458 	.word	0x58025458
 8003a80:	5802546c 	.word	0x5802546c
 8003a84:	58025480 	.word	0x58025480
 8003a88:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	60da      	str	r2, [r3, #12]
}
 8003a9c:	e04d      	b.n	8003b3a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a29      	ldr	r2, [pc, #164]	; (8003b48 <DMA_SetConfig+0x338>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d022      	beq.n	8003aee <DMA_SetConfig+0x2de>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a27      	ldr	r2, [pc, #156]	; (8003b4c <DMA_SetConfig+0x33c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d01d      	beq.n	8003aee <DMA_SetConfig+0x2de>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a26      	ldr	r2, [pc, #152]	; (8003b50 <DMA_SetConfig+0x340>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d018      	beq.n	8003aee <DMA_SetConfig+0x2de>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a24      	ldr	r2, [pc, #144]	; (8003b54 <DMA_SetConfig+0x344>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d013      	beq.n	8003aee <DMA_SetConfig+0x2de>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a23      	ldr	r2, [pc, #140]	; (8003b58 <DMA_SetConfig+0x348>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00e      	beq.n	8003aee <DMA_SetConfig+0x2de>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a21      	ldr	r2, [pc, #132]	; (8003b5c <DMA_SetConfig+0x34c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d009      	beq.n	8003aee <DMA_SetConfig+0x2de>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <DMA_SetConfig+0x350>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d004      	beq.n	8003aee <DMA_SetConfig+0x2de>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <DMA_SetConfig+0x354>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d101      	bne.n	8003af2 <DMA_SetConfig+0x2e2>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <DMA_SetConfig+0x2e4>
 8003af2:	2300      	movs	r3, #0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d020      	beq.n	8003b3a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	2201      	movs	r2, #1
 8003b02:	409a      	lsls	r2, r3
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2b40      	cmp	r3, #64	; 0x40
 8003b16:	d108      	bne.n	8003b2a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	60da      	str	r2, [r3, #12]
}
 8003b28:	e007      	b.n	8003b3a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	60da      	str	r2, [r3, #12]
}
 8003b3a:	bf00      	nop
 8003b3c:	371c      	adds	r7, #28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	58025408 	.word	0x58025408
 8003b4c:	5802541c 	.word	0x5802541c
 8003b50:	58025430 	.word	0x58025430
 8003b54:	58025444 	.word	0x58025444
 8003b58:	58025458 	.word	0x58025458
 8003b5c:	5802546c 	.word	0x5802546c
 8003b60:	58025480 	.word	0x58025480
 8003b64:	58025494 	.word	0x58025494

08003b68 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e0cf      	b.n	8003d1a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d106      	bne.n	8003b92 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2223      	movs	r2, #35	; 0x23
 8003b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f008 fb53 	bl	800c238 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b92:	4b64      	ldr	r3, [pc, #400]	; (8003d24 <HAL_ETH_Init+0x1bc>)
 8003b94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b98:	4a62      	ldr	r2, [pc, #392]	; (8003d24 <HAL_ETH_Init+0x1bc>)
 8003b9a:	f043 0302 	orr.w	r3, r3, #2
 8003b9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ba2:	4b60      	ldr	r3, [pc, #384]	; (8003d24 <HAL_ETH_Init+0x1bc>)
 8003ba4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	7a1b      	ldrb	r3, [r3, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d103      	bne.n	8003bc0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003bb8:	2000      	movs	r0, #0
 8003bba:	f7fe f875 	bl	8001ca8 <HAL_SYSCFG_ETHInterfaceSelect>
 8003bbe:	e003      	b.n	8003bc8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003bc0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003bc4:	f7fe f870 	bl	8001ca8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003bc8:	4b57      	ldr	r3, [pc, #348]	; (8003d28 <HAL_ETH_Init+0x1c0>)
 8003bca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003be2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003be4:	f7fe f848 	bl	8001c78 <HAL_GetTick>
 8003be8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003bea:	e011      	b.n	8003c10 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003bec:	f7fe f844 	bl	8001c78 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003bfa:	d909      	bls.n	8003c10 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2204      	movs	r2, #4
 8003c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	22e0      	movs	r2, #224	; 0xe0
 8003c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e084      	b.n	8003d1a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e4      	bne.n	8003bec <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 ff8a 	bl	8004b3c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003c28:	f003 faa0 	bl	800716c <HAL_RCC_GetHCLKFreq>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	4a3f      	ldr	r2, [pc, #252]	; (8003d2c <HAL_ETH_Init+0x1c4>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	0c9a      	lsrs	r2, r3, #18
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3a01      	subs	r2, #1
 8003c3c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f001 f983 	bl	8004f4c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c4e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003c52:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c62:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d009      	beq.n	8003c86 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	22e0      	movs	r2, #224	; 0xe0
 8003c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e049      	b.n	8003d1a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c8e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003c92:	4b27      	ldr	r3, [pc, #156]	; (8003d30 <HAL_ETH_Init+0x1c8>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6952      	ldr	r2, [r2, #20]
 8003c9a:	0051      	lsls	r1, r2, #1
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ca6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f001 f9eb 	bl	8005086 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f001 fa31 	bl	8005118 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	3305      	adds	r3, #5
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	021a      	lsls	r2, r3, #8
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	3303      	adds	r3, #3
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	061a      	lsls	r2, r3, #24
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	3302      	adds	r3, #2
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	041b      	lsls	r3, r3, #16
 8003ce8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003cf4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003d02:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2210      	movs	r2, #16
 8003d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	58024400 	.word	0x58024400
 8003d28:	58000400 	.word	0x58000400
 8003d2c:	431bde83 	.word	0x431bde83
 8003d30:	ffff8001 	.word	0xffff8001

08003d34 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d42:	2b10      	cmp	r3, #16
 8003d44:	d153      	bne.n	8003dee <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2223      	movs	r2, #35	; 0x23
 8003d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2204      	movs	r2, #4
 8003d52:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fa64 	bl	8004222 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0202 	orr.w	r2, r2, #2
 8003d68:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0201 	orr.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d96:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003da6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003dc2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dce:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8003dda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003dde:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2223      	movs	r2, #35	; 0x23
 8003de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e000      	b.n	8003df0 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
  }
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e06:	2b10      	cmp	r3, #16
 8003e08:	d179      	bne.n	8003efe <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2223      	movs	r2, #35	; 0x23
 8003e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b38      	ldr	r3, [pc, #224]	; (8003f08 <HAL_ETH_Start_IT+0x110>)
 8003e26:	430b      	orrs	r3, r1
 8003e28:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b34      	ldr	r3, [pc, #208]	; (8003f0c <HAL_ETH_Start_IT+0x114>)
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2204      	movs	r2, #4
 8003e44:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f9eb 	bl	8004222 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0202 	orr.w	r2, r2, #2
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e88:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e98:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003eb4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8003ecc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ed0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003edc:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003eee:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2223      	movs	r2, #35	; 0x23
 8003ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	e000      	b.n	8003f00 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
  }
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	0c020060 	.word	0x0c020060
 8003f0c:	0c20c000 	.word	0x0c20c000

08003f10 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f1e:	2b23      	cmp	r3, #35	; 0x23
 8003f20:	d165      	bne.n	8003fee <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2223      	movs	r2, #35	; 0x23
 8003f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f32:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	4b30      	ldr	r3, [pc, #192]	; (8003ffc <HAL_ETH_Stop_IT+0xec>)
 8003f3c:	400b      	ands	r3, r1
 8003f3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f42:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f4e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6812      	ldr	r2, [r2, #0]
 8003f56:	f023 0301 	bic.w	r3, r3, #1
 8003f5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f5e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	f023 0301 	bic.w	r3, r3, #1
 8003f76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f7a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0201 	bic.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0202 	bic.w	r2, r2, #2
 8003fb0:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	e00e      	b.n	8003fd6 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	3212      	adds	r2, #18
 8003fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc2:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d9ed      	bls.n	8003fb8 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2210      	movs	r2, #16
 8003fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e000      	b.n	8003ff0 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	ffff2f3e 	.word	0xffff2f3e

08004000 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d109      	bne.n	8004024 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f043 0201 	orr.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e03a      	b.n	800409a <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800402a:	2b23      	cmp	r3, #35	; 0x23
 800402c:	d134      	bne.n	8004098 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004036:	2201      	movs	r2, #1
 8004038:	6839      	ldr	r1, [r7, #0]
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f001 f8ca 	bl	80051d4 <ETH_Prepare_Tx_Descriptors>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404c:	f043 0202 	orr.w	r2, r3, #2
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e01f      	b.n	800409a <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 800405a:	f3bf 8f4f 	dsb	sy
}
 800405e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	629a      	str	r2, [r3, #40]	; 0x28
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	2b03      	cmp	r3, #3
 8004070:	d904      	bls.n	800407c <HAL_ETH_Transmit_IT+0x7c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	1f1a      	subs	r2, r3, #4
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3106      	adds	r1, #6
 8004088:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800408c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004090:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	e000      	b.n	800409a <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
  }
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b088      	sub	sp, #32
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	f043 0201 	orr.w	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e0a5      	b.n	800421a <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d4:	2b23      	cmp	r3, #35	; 0x23
 80040d6:	d001      	beq.n	80040dc <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e09e      	b.n	800421a <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	3212      	adds	r2, #18
 80040e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ec:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f2:	f1c3 0304 	rsb	r3, r3, #4
 80040f6:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80040f8:	e067      	b.n	80041ca <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d103      	bne.n	800412a <HAL_ETH_ReadData+0x88>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d03d      	beq.n	80041a6 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00d      	beq.n	8004170 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004180:	461a      	mov	r2, r3
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	b29b      	uxth	r3, r3
 8004186:	f008 fa3f 	bl	800c608 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	441a      	add	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2200      	movs	r2, #0
 80041a4:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	3301      	adds	r3, #1
 80041aa:	61fb      	str	r3, [r7, #28]
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d902      	bls.n	80041b8 <HAL_ETH_ReadData+0x116>
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	3b04      	subs	r3, #4
 80041b6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	3212      	adds	r2, #18
 80041be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041c2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	3301      	adds	r3, #1
 80041c8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	db06      	blt.n	80041e0 <HAL_ETH_ReadData+0x13e>
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d202      	bcs.n	80041e0 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d08c      	beq.n	80040fa <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	441a      	add	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f814 	bl	8004222 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d108      	bne.n	8004218 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	e000      	b.n	800421a <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
}
 800421a:	4618      	mov	r0, r3
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b088      	sub	sp, #32
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800422e:	2301      	movs	r3, #1
 8004230:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004236:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	3212      	adds	r2, #18
 800423e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004242:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004248:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800424a:	e03b      	b.n	80042c4 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d112      	bne.n	800427a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004254:	f107 030c 	add.w	r3, r7, #12
 8004258:	4618      	mov	r0, r3
 800425a:	f008 f99f 	bl	800c59c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	74fb      	strb	r3, [r7, #19]
 8004268:	e007      	b.n	800427a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	461a      	mov	r2, r3
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	461a      	mov	r2, r3
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 800427a:	7cfb      	ldrb	r3, [r7, #19]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d021      	beq.n	80042c4 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8004280:	f3bf 8f5f 	dmb	sy
}
 8004284:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	2b00      	cmp	r3, #0
 800428c:	d004      	beq.n	8004298 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8004294:	60da      	str	r2, [r3, #12]
 8004296:	e003      	b.n	80042a0 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 800429e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	3301      	adds	r3, #1
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d902      	bls.n	80042b2 <ETH_UpdateDescriptor+0x90>
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	3b04      	subs	r3, #4
 80042b0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	3212      	adds	r2, #18
 80042b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042bc:	617b      	str	r3, [r7, #20]
      desccount--;
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <ETH_UpdateDescriptor+0xae>
 80042ca:	7cfb      	ldrb	r3, [r7, #19]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1bd      	bne.n	800424c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d00d      	beq.n	80042f6 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e2:	461a      	mov	r2, r3
 80042e4:	2300      	movs	r3, #0
 80042e6:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80042f6:	bf00      	nop
 80042f8:	3720      	adds	r7, #32
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b086      	sub	sp, #24
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3318      	adds	r3, #24
 800430a:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800431c:	e03f      	b.n	800439e <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800431e:	2301      	movs	r3, #1
 8004320:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	3b01      	subs	r3, #1
 8004326:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	3304      	adds	r3, #4
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d106      	bne.n	8004346 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	3301      	adds	r3, #1
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004346:	7bbb      	ldrb	r3, [r7, #14]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d028      	beq.n	800439e <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68d9      	ldr	r1, [r3, #12]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4613      	mov	r3, r2
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	4413      	add	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	440b      	add	r3, r1
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	db1b      	blt.n	800439a <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	3304      	adds	r3, #4
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4618      	mov	r0, r3
 8004370:	f008 f9b2 	bl	800c6d8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	3304      	adds	r3, #4
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	2200      	movs	r2, #0
 8004380:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	3301      	adds	r3, #1
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	62da      	str	r2, [r3, #44]	; 0x2c
 8004398:	e001      	b.n	800439e <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_ETH_ReleaseTxPacket+0xac>
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1b9      	bne.n	800431e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80043c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043cc:	2b40      	cmp	r3, #64	; 0x40
 80043ce:	d115      	bne.n	80043fc <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80043dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d10b      	bne.n	80043fc <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ec:	461a      	mov	r2, r3
 80043ee:	f248 0340 	movw	r3, #32832	; 0x8040
 80043f2:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f007 fc80 	bl	800bcfc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004404:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b01      	cmp	r3, #1
 800440e:	d115      	bne.n	800443c <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004418:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b01      	cmp	r3, #1
 8004422:	d10b      	bne.n	800443c <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442c:	461a      	mov	r2, r3
 800442e:	f248 0301 	movw	r3, #32769	; 0x8001
 8004432:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f007 fc70 	bl	800bd1c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004444:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800444c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004450:	d153      	bne.n	80044fa <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800445a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800445e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004462:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004466:	d148      	bne.n	80044fa <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446e:	f043 0208 	orr.w	r2, r3, #8
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004480:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448c:	d11e      	bne.n	80044cc <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004496:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800449a:	f241 1302 	movw	r3, #4354	; 0x1102
 800449e:	4013      	ands	r3, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ae:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80044ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044be:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	22e0      	movs	r2, #224	; 0xe0
 80044c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80044ca:	e013      	b.n	80044f4 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80044d8:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ea:	461a      	mov	r2, r3
 80044ec:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 80044f0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f007 fc21 	bl	800bd3c <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004502:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d104      	bne.n	8004518 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8004514:	2b00      	cmp	r3, #0
 8004516:	d019      	beq.n	800454c <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451e:	f043 0210 	orr.w	r2, r3, #16
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	22e0      	movs	r2, #224	; 0xe0
 800453a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f007 fbfc 	bl	800bd3c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	d10f      	bne.n	800457c <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004564:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f830 	bl	80045d4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004584:	f003 0320 	and.w	r3, r3, #32
 8004588:	2b20      	cmp	r3, #32
 800458a:	d10f      	bne.n	80045ac <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004594:	f003 020f 	and.w	r2, r3, #15
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f822 	bl	80045e8 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80045ac:	4b08      	ldr	r3, [pc, #32]	; (80045d0 <HAL_ETH_IRQHandler+0x21c>)
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d006      	beq.n	80045c6 <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80045b8:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <HAL_ETH_IRQHandler+0x21c>)
 80045ba:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80045be:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f81b 	bl	80045fc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 80045c6:	bf00      	nop
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	58000080 	.word	0x58000080

080045d4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e03e      	b.n	80046b0 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800463a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	055b      	lsls	r3, r3, #21
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	041b      	lsls	r3, r3, #16
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f043 030c 	orr.w	r3, r3, #12
 800465e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f043 0301 	orr.w	r3, r3, #1
 8004666:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004672:	f7fd fb01 	bl	8001c78 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004678:	e009      	b.n	800468e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800467a:	f7fd fafd 	bl	8001c78 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004688:	d901      	bls.n	800468e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e010      	b.n	80046b0 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1ed      	bne.n	800467a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e03c      	b.n	8004754 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046e2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	055b      	lsls	r3, r3, #21
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	041b      	lsls	r3, r3, #16
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f023 030c 	bic.w	r3, r3, #12
 8004706:	f043 0304 	orr.w	r3, r3, #4
 800470a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	b29a      	uxth	r2, r3
 8004718:	4b10      	ldr	r3, [pc, #64]	; (800475c <HAL_ETH_WritePHYRegister+0xa4>)
 800471a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800471e:	4a0f      	ldr	r2, [pc, #60]	; (800475c <HAL_ETH_WritePHYRegister+0xa4>)
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004726:	f7fd faa7 	bl	8001c78 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800472c:	e009      	b.n	8004742 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800472e:	f7fd faa3 	bl	8001c78 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800473c:	d901      	bls.n	8004742 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e008      	b.n	8004754 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1ed      	bne.n	800472e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40028000 	.word	0x40028000

08004760 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e1c3      	b.n	8004afc <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 020c 	and.w	r2, r3, #12
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0310 	and.w	r3, r3, #16
 800478c:	2b00      	cmp	r3, #0
 800478e:	bf14      	ite	ne
 8004790:	2301      	movne	r3, #1
 8004792:	2300      	moveq	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bf0c      	ite	eq
 80047ba:	2301      	moveq	r3, #1
 80047bc:	2300      	movne	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bf14      	ite	ne
 80047d6:	2301      	movne	r3, #1
 80047d8:	2300      	moveq	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bf0c      	ite	eq
 80047f0:	2301      	moveq	r3, #1
 80047f2:	2300      	movne	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	461a      	mov	r2, r3
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004806:	2b00      	cmp	r3, #0
 8004808:	bf14      	ite	ne
 800480a:	2301      	movne	r3, #1
 800480c:	2300      	moveq	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf14      	ite	ne
 8004824:	2301      	movne	r3, #1
 8004826:	2300      	moveq	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004856:	2b00      	cmp	r3, #0
 8004858:	bf14      	ite	ne
 800485a:	2301      	movne	r3, #1
 800485c:	2300      	moveq	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004870:	2b00      	cmp	r3, #0
 8004872:	bf0c      	ite	eq
 8004874:	2301      	moveq	r3, #1
 8004876:	2300      	movne	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800488a:	2b00      	cmp	r3, #0
 800488c:	bf0c      	ite	eq
 800488e:	2301      	moveq	r3, #1
 8004890:	2300      	movne	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bf14      	ite	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	2300      	moveq	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bf14      	ite	ne
 80048c2:	2301      	movne	r3, #1
 80048c4:	2300      	moveq	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80048ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	bf14      	ite	ne
 80048f6:	2301      	movne	r3, #1
 80048f8:	2300      	moveq	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	bf14      	ite	ne
 800491e:	2301      	movne	r3, #1
 8004920:	2300      	moveq	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	461a      	mov	r2, r3
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	461a      	mov	r2, r3
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf14      	ite	ne
 8004970:	2301      	movne	r3, #1
 8004972:	2300      	moveq	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf14      	ite	ne
 800498c:	2301      	movne	r3, #1
 800498e:	2300      	moveq	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	bf14      	ite	ne
 80049a8:	2301      	movne	r3, #1
 80049aa:	2300      	moveq	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	0e5b      	lsrs	r3, r3, #25
 80049be:	f003 021f 	and.w	r2, r3, #31
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	bf14      	ite	ne
 80049d4:	2301      	movne	r3, #1
 80049d6:	2300      	moveq	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f003 020f 	and.w	r2, r3, #15
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bf14      	ite	ne
 80049fe:	2301      	movne	r3, #1
 8004a00:	2300      	moveq	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bf0c      	ite	eq
 8004a1a:	2301      	moveq	r3, #1
 8004a1c:	2300      	movne	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	bf14      	ite	ne
 8004a54:	2301      	movne	r3, #1
 8004a56:	2300      	moveq	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	bf14      	ite	ne
 8004a72:	2301      	movne	r3, #1
 8004a74:	2300      	moveq	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004a88:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004a98:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bf14      	ite	ne
 8004ab0:	2301      	movne	r3, #1
 8004ab2:	2300      	moveq	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004ac6:	f003 0310 	and.w	r3, r3, #16
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bf14      	ite	ne
 8004ace:	2301      	movne	r3, #1
 8004ad0:	2300      	moveq	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bf0c      	ite	eq
 8004aec:	2301      	moveq	r3, #1
 8004aee:	2300      	movne	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e00b      	b.n	8004b34 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b22:	2b10      	cmp	r3, #16
 8004b24:	d105      	bne.n	8004b32 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004b26:	6839      	ldr	r1, [r7, #0]
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f86d 	bl	8004c08 <ETH_SetMACConfig>

    return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e000      	b.n	8004b34 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
  }
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004b56:	f002 fb09 	bl	800716c <HAL_RCC_GetHCLKFreq>
 8004b5a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4a1e      	ldr	r2, [pc, #120]	; (8004bd8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d908      	bls.n	8004b76 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4a1d      	ldr	r2, [pc, #116]	; (8004bdc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d804      	bhi.n	8004b76 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	e027      	b.n	8004bc6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	4a18      	ldr	r2, [pc, #96]	; (8004bdc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d908      	bls.n	8004b90 <HAL_ETH_SetMDIOClockRange+0x54>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4a17      	ldr	r2, [pc, #92]	; (8004be0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d204      	bcs.n	8004b90 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	e01a      	b.n	8004bc6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4a13      	ldr	r2, [pc, #76]	; (8004be0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d303      	bcc.n	8004ba0 <HAL_ETH_SetMDIOClockRange+0x64>
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4a12      	ldr	r2, [pc, #72]	; (8004be4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d911      	bls.n	8004bc4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4a10      	ldr	r2, [pc, #64]	; (8004be4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d908      	bls.n	8004bba <HAL_ETH_SetMDIOClockRange+0x7e>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4a0f      	ldr	r2, [pc, #60]	; (8004be8 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d804      	bhi.n	8004bba <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	e005      	b.n	8004bc6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	e000      	b.n	8004bc6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004bc4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004bd0:	bf00      	nop
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	01312cff 	.word	0x01312cff
 8004bdc:	02160ebf 	.word	0x02160ebf
 8004be0:	03938700 	.word	0x03938700
 8004be4:	05f5e0ff 	.word	0x05f5e0ff
 8004be8:	08f0d17f 	.word	0x08f0d17f

08004bec <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004c1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	791b      	ldrb	r3, [r3, #4]
 8004c20:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004c22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	7b1b      	ldrb	r3, [r3, #12]
 8004c28:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004c2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	7b5b      	ldrb	r3, [r3, #13]
 8004c30:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004c32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	7b9b      	ldrb	r3, [r3, #14]
 8004c38:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004c3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	7bdb      	ldrb	r3, [r3, #15]
 8004c40:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004c42:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	7c12      	ldrb	r2, [r2, #16]
 8004c48:	2a00      	cmp	r2, #0
 8004c4a:	d102      	bne.n	8004c52 <ETH_SetMACConfig+0x4a>
 8004c4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004c50:	e000      	b.n	8004c54 <ETH_SetMACConfig+0x4c>
 8004c52:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004c54:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	7c52      	ldrb	r2, [r2, #17]
 8004c5a:	2a00      	cmp	r2, #0
 8004c5c:	d102      	bne.n	8004c64 <ETH_SetMACConfig+0x5c>
 8004c5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c62:	e000      	b.n	8004c66 <ETH_SetMACConfig+0x5e>
 8004c64:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004c66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	7c9b      	ldrb	r3, [r3, #18]
 8004c6c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004c6e:	431a      	orrs	r2, r3
               macconf->Speed |
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004c74:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004c7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	7f1b      	ldrb	r3, [r3, #28]
 8004c80:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004c82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	7f5b      	ldrb	r3, [r3, #29]
 8004c88:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004c8a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	7f92      	ldrb	r2, [r2, #30]
 8004c90:	2a00      	cmp	r2, #0
 8004c92:	d102      	bne.n	8004c9a <ETH_SetMACConfig+0x92>
 8004c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c98:	e000      	b.n	8004c9c <ETH_SetMACConfig+0x94>
 8004c9a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004c9c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	7fdb      	ldrb	r3, [r3, #31]
 8004ca2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004ca4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004cac:	2a00      	cmp	r2, #0
 8004cae:	d102      	bne.n	8004cb6 <ETH_SetMACConfig+0xae>
 8004cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cb4:	e000      	b.n	8004cb8 <ETH_SetMACConfig+0xb0>
 8004cb6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004cb8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004cbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cc6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004cc8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	4b56      	ldr	r3, [pc, #344]	; (8004e34 <ETH_SetMACConfig+0x22c>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	68f9      	ldr	r1, [r7, #12]
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cea:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cf2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004cf4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cfc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004cfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d06:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004d08:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004d10:	2a00      	cmp	r2, #0
 8004d12:	d102      	bne.n	8004d1a <ETH_SetMACConfig+0x112>
 8004d14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d18:	e000      	b.n	8004d1c <ETH_SetMACConfig+0x114>
 8004d1a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004d1c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	4b42      	ldr	r3, [pc, #264]	; (8004e38 <ETH_SetMACConfig+0x230>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	68f9      	ldr	r1, [r7, #12]
 8004d36:	430b      	orrs	r3, r1
 8004d38:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d40:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	4b3a      	ldr	r3, [pc, #232]	; (8004e3c <ETH_SetMACConfig+0x234>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	68f9      	ldr	r1, [r7, #12]
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004d64:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004d6a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004d72:	2a00      	cmp	r2, #0
 8004d74:	d101      	bne.n	8004d7a <ETH_SetMACConfig+0x172>
 8004d76:	2280      	movs	r2, #128	; 0x80
 8004d78:	e000      	b.n	8004d7c <ETH_SetMACConfig+0x174>
 8004d7a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004d7c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d82:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d8e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004d92:	4013      	ands	r3, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004da4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004dac:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dba:	f023 0103 	bic.w	r1, r3, #3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004dd2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004dee:	2a00      	cmp	r2, #0
 8004df0:	d101      	bne.n	8004df6 <ETH_SetMACConfig+0x1ee>
 8004df2:	2240      	movs	r2, #64	; 0x40
 8004df4:	e000      	b.n	8004df8 <ETH_SetMACConfig+0x1f0>
 8004df6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004df8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004e00:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004e02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004e0a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004e18:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004e28:	bf00      	nop
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	00048083 	.word	0x00048083
 8004e38:	c0f88000 	.word	0xc0f88000
 8004e3c:	fffffef0 	.word	0xfffffef0

08004e40 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	4b38      	ldr	r3, [pc, #224]	; (8004f38 <ETH_SetDMAConfig+0xf8>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	6811      	ldr	r1, [r2, #0]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	430b      	orrs	r3, r1
 8004e62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e66:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	791b      	ldrb	r3, [r3, #4]
 8004e6c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004e72:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	7b1b      	ldrb	r3, [r3, #12]
 8004e78:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	4b2c      	ldr	r3, [pc, #176]	; (8004f3c <ETH_SetDMAConfig+0xfc>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	68f9      	ldr	r1, [r7, #12]
 8004e92:	430b      	orrs	r3, r1
 8004e94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e98:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	7b5b      	ldrb	r3, [r3, #13]
 8004e9e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004eb4:	4b22      	ldr	r3, [pc, #136]	; (8004f40 <ETH_SetDMAConfig+0x100>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6812      	ldr	r2, [r2, #0]
 8004ebc:	68f9      	ldr	r1, [r7, #12]
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ec4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	7d1b      	ldrb	r3, [r3, #20]
 8004ed0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004ed2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	7f5b      	ldrb	r3, [r3, #29]
 8004ed8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ee6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004eea:	4b16      	ldr	r3, [pc, #88]	; (8004f44 <ETH_SetDMAConfig+0x104>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6812      	ldr	r2, [r2, #0]
 8004ef2:	68f9      	ldr	r1, [r7, #12]
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004efa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	7f1b      	ldrb	r3, [r3, #28]
 8004f02:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f14:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004f18:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <ETH_SetDMAConfig+0x108>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	68f9      	ldr	r1, [r7, #12]
 8004f22:	430b      	orrs	r3, r1
 8004f24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f28:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	ffff87fd 	.word	0xffff87fd
 8004f3c:	ffff2ffe 	.word	0xffff2ffe
 8004f40:	fffec000 	.word	0xfffec000
 8004f44:	ffc0efef 	.word	0xffc0efef
 8004f48:	7fc0ffff 	.word	0x7fc0ffff

08004f4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b0a4      	sub	sp, #144	; 0x90
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004f82:	2301      	movs	r3, #1
 8004f84:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f8c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004fa4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004fa8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004faa:	2300      	movs	r3, #0
 8004fac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004fe4:	2320      	movs	r3, #32
 8004fe6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004ff6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004ffc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005000:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005002:	2300      	movs	r3, #0
 8005004:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005008:	2302      	movs	r3, #2
 800500a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800500e:	2300      	movs	r3, #0
 8005010:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005014:	2300      	movs	r3, #0
 8005016:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800501a:	2300      	movs	r3, #0
 800501c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005020:	2301      	movs	r3, #1
 8005022:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005026:	2300      	movs	r3, #0
 8005028:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005034:	4619      	mov	r1, r3
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fde6 	bl	8004c08 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800503c:	2301      	movs	r3, #1
 800503e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005040:	2301      	movs	r3, #1
 8005042:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005044:	2300      	movs	r3, #0
 8005046:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005048:	2300      	movs	r3, #0
 800504a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800504e:	2300      	movs	r3, #0
 8005050:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005052:	2300      	movs	r3, #0
 8005054:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005056:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800505a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800505c:	2300      	movs	r3, #0
 800505e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005060:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005064:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005066:	2300      	movs	r3, #0
 8005068:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800506c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005070:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005072:	f107 0308 	add.w	r3, r7, #8
 8005076:	4619      	mov	r1, r3
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff fee1 	bl	8004e40 <ETH_SetDMAConfig>
}
 800507e:	bf00      	nop
 8005080:	3790      	adds	r7, #144	; 0x90
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005086:	b480      	push	{r7}
 8005088:	b085      	sub	sp, #20
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	e01d      	b.n	80050d0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68d9      	ldr	r1, [r3, #12]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4613      	mov	r3, r2
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	4413      	add	r3, r2
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	440b      	add	r3, r1
 80050a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2200      	movs	r2, #0
 80050b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2200      	movs	r2, #0
 80050b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2200      	movs	r2, #0
 80050bc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	3206      	adds	r2, #6
 80050c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3301      	adds	r3, #1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d9de      	bls.n	8005094 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e4:	461a      	mov	r2, r3
 80050e6:	2303      	movs	r3, #3
 80050e8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005108:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e023      	b.n	800516e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6919      	ldr	r1, [r3, #16]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	4613      	mov	r3, r2
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	4413      	add	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	440b      	add	r3, r1
 8005136:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2200      	movs	r2, #0
 8005142:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2200      	movs	r2, #0
 8005148:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2200      	movs	r2, #0
 800514e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2200      	movs	r2, #0
 8005154:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2200      	movs	r2, #0
 800515a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800515c:	68b9      	ldr	r1, [r7, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	3212      	adds	r2, #18
 8005164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3301      	adds	r3, #1
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b03      	cmp	r3, #3
 8005172:	d9d8      	bls.n	8005126 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800519a:	461a      	mov	r2, r3
 800519c:	2303      	movs	r3, #3
 800519e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ae:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80051c6:	bf00      	nop
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b08d      	sub	sp, #52	; 0x34
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3318      	adds	r3, #24
 80051e4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80051f2:	2300      	movs	r3, #0
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051fe:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005216:	d007      	beq.n	8005228 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521c:	3304      	adds	r3, #4
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005228:	2302      	movs	r3, #2
 800522a:	e259      	b.n	80056e0 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d044      	beq.n	80052c2 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	4b75      	ldr	r3, [pc, #468]	; (8005414 <ETH_Prepare_Tx_Descriptors+0x240>)
 800523e:	4013      	ands	r3, r2
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005244:	431a      	orrs	r2, r3
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005264:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d027      	beq.n	80052c2 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	b29a      	uxth	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	431a      	orrs	r2, r3
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	431a      	orrs	r2, r3
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80052b0:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80052c0:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0310 	and.w	r3, r3, #16
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00e      	beq.n	80052ec <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	4b51      	ldr	r3, [pc, #324]	; (8005418 <ETH_Prepare_Tx_Descriptors+0x244>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	6992      	ldr	r2, [r2, #24]
 80052da:	431a      	orrs	r2, r3
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d105      	bne.n	8005304 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0310 	and.w	r3, r3, #16
 8005300:	2b00      	cmp	r3, #0
 8005302:	d036      	beq.n	8005372 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005310:	f3bf 8f5f 	dmb	sy
}
 8005314:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005324:	3301      	adds	r3, #1
 8005326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532a:	2b03      	cmp	r3, #3
 800532c:	d902      	bls.n	8005334 <ETH_Prepare_Tx_Descriptors+0x160>
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	3b04      	subs	r3, #4
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800533c:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	3301      	adds	r3, #1
 8005342:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800534c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005350:	d10f      	bne.n	8005372 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800535a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 800535c:	f3bf 8f5f 	dmb	sy
}
 8005360:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800536e:	2302      	movs	r3, #2
 8005370:	e1b6      	b.n	80056e0 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	3301      	adds	r3, #1
 8005376:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	461a      	mov	r2, r3
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	4b24      	ldr	r3, [pc, #144]	; (8005418 <ETH_Prepare_Tx_Descriptors+0x244>)
 8005388:	4013      	ands	r3, r2
 800538a:	69fa      	ldr	r2, [r7, #28]
 800538c:	6852      	ldr	r2, [r2, #4]
 800538e:	431a      	orrs	r2, r3
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d012      	beq.n	80053c2 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	4b1a      	ldr	r3, [pc, #104]	; (800541c <ETH_Prepare_Tx_Descriptors+0x248>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	6852      	ldr	r2, [r2, #4]
 80053b8:	0412      	lsls	r2, r2, #16
 80053ba:	431a      	orrs	r2, r3
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	609a      	str	r2, [r3, #8]
 80053c0:	e008      	b.n	80053d4 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	2200      	movs	r2, #0
 80053c6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	4b13      	ldr	r3, [pc, #76]	; (800541c <ETH_Prepare_Tx_Descriptors+0x248>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	6a3a      	ldr	r2, [r7, #32]
 80053d2:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0310 	and.w	r3, r3, #16
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d021      	beq.n	8005424 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	04db      	lsls	r3, r3, #19
 80053ee:	431a      	orrs	r2, r3
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	4b09      	ldr	r3, [pc, #36]	; (8005420 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	69d2      	ldr	r2, [r2, #28]
 8005400:	431a      	orrs	r2, r3
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	60da      	str	r2, [r3, #12]
 8005412:	e02e      	b.n	8005472 <ETH_Prepare_Tx_Descriptors+0x29e>
 8005414:	ffff0000 	.word	0xffff0000
 8005418:	ffffc000 	.word	0xffffc000
 800541c:	c000ffff 	.word	0xc000ffff
 8005420:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	4b7b      	ldr	r3, [pc, #492]	; (8005618 <ETH_Prepare_Tx_Descriptors+0x444>)
 800542a:	4013      	ands	r3, r2
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	6852      	ldr	r2, [r2, #4]
 8005430:	431a      	orrs	r2, r3
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d008      	beq.n	8005454 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	431a      	orrs	r2, r3
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0320 	and.w	r3, r3, #32
 800545c:	2b00      	cmp	r3, #0
 800545e:	d008      	beq.n	8005472 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	431a      	orrs	r2, r3
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b00      	cmp	r3, #0
 800547c:	d008      	beq.n	8005490 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548a:	431a      	orrs	r2, r3
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80054a8:	f3bf 8f5f 	dmb	sy
}
 80054ac:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 80da 	beq.w	800567c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	431a      	orrs	r2, r3
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80054da:	e0cf      	b.n	800567c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80054e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ea:	3301      	adds	r3, #1
 80054ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d902      	bls.n	80054fa <ETH_Prepare_Tx_Descriptors+0x326>
 80054f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f6:	3b04      	subs	r3, #4
 80054f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005502:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800551c:	d007      	beq.n	800552e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005522:	3304      	adds	r3, #4
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d029      	beq.n	8005582 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800553a:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800553c:	2300      	movs	r3, #0
 800553e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005540:	e019      	b.n	8005576 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8005542:	f3bf 8f5f 	dmb	sy
}
 8005546:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	3301      	adds	r3, #1
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	2b03      	cmp	r3, #3
 800555e:	d902      	bls.n	8005566 <ETH_Prepare_Tx_Descriptors+0x392>
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	3b04      	subs	r3, #4
 8005564:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800556a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556e:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005572:	3301      	adds	r3, #1
 8005574:	62bb      	str	r3, [r7, #40]	; 0x28
 8005576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	429a      	cmp	r2, r3
 800557c:	d3e1      	bcc.n	8005542 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800557e:	2302      	movs	r3, #2
 8005580:	e0ae      	b.n	80056e0 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	3301      	adds	r3, #1
 8005586:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	4b1f      	ldr	r3, [pc, #124]	; (800561c <ETH_Prepare_Tx_Descriptors+0x448>)
 800559e:	4013      	ands	r3, r2
 80055a0:	69fa      	ldr	r2, [r7, #28]
 80055a2:	6852      	ldr	r2, [r2, #4]
 80055a4:	431a      	orrs	r2, r3
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d012      	beq.n	80055d8 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	4b16      	ldr	r3, [pc, #88]	; (8005620 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	69fa      	ldr	r2, [r7, #28]
 80055cc:	6852      	ldr	r2, [r2, #4]
 80055ce:	0412      	lsls	r2, r2, #16
 80055d0:	431a      	orrs	r2, r3
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	609a      	str	r2, [r3, #8]
 80055d6:	e008      	b.n	80055ea <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	2200      	movs	r2, #0
 80055dc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	6a3a      	ldr	r2, [r7, #32]
 80055e8:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d018      	beq.n	8005628 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <ETH_Prepare_Tx_Descriptors+0x450>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	69d2      	ldr	r2, [r2, #28]
 8005602:	431a      	orrs	r2, r3
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	60da      	str	r2, [r3, #12]
 8005614:	e020      	b.n	8005658 <ETH_Prepare_Tx_Descriptors+0x484>
 8005616:	bf00      	nop
 8005618:	ffff8000 	.word	0xffff8000
 800561c:	ffffc000 	.word	0xffffc000
 8005620:	c000ffff 	.word	0xc000ffff
 8005624:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	4b2f      	ldr	r3, [pc, #188]	; (80056ec <ETH_Prepare_Tx_Descriptors+0x518>)
 800562e:	4013      	ands	r3, r2
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	6852      	ldr	r2, [r2, #4]
 8005634:	431a      	orrs	r2, r3
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d008      	beq.n	8005658 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	431a      	orrs	r2, r3
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	3301      	adds	r3, #1
 800565c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800565e:	f3bf 8f5f 	dmb	sy
}
 8005662:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f47f af2b 	bne.w	80054dc <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d006      	beq.n	800569a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	609a      	str	r2, [r3, #8]
 8005698:	e005      	b.n	80056a6 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056b6:	6979      	ldr	r1, [r7, #20]
 80056b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ba:	3304      	adds	r3, #4
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	440b      	add	r3, r1
 80056c0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80056c8:	b672      	cpsid	i
}
 80056ca:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	4413      	add	r3, r2
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80056da:	b662      	cpsie	i
}
 80056dc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3734      	adds	r7, #52	; 0x34
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	ffff8000 	.word	0xffff8000

080056f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b098      	sub	sp, #96	; 0x60
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80056f8:	4a84      	ldr	r2, [pc, #528]	; (800590c <HAL_FDCAN_Init+0x21c>)
 80056fa:	f107 030c 	add.w	r3, r7, #12
 80056fe:	4611      	mov	r1, r2
 8005700:	224c      	movs	r2, #76	; 0x4c
 8005702:	4618      	mov	r0, r3
 8005704:	f018 fcd9 	bl	801e0ba <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e1c6      	b.n	8005aa0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a7e      	ldr	r2, [pc, #504]	; (8005910 <HAL_FDCAN_Init+0x220>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d106      	bne.n	800572a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005724:	461a      	mov	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fb f924 	bl	800098c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0210 	bic.w	r2, r2, #16
 8005752:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005754:	f7fc fa90 	bl	8001c78 <HAL_GetTick>
 8005758:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800575a:	e014      	b.n	8005786 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800575c:	f7fc fa8c 	bl	8001c78 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b0a      	cmp	r3, #10
 8005768:	d90d      	bls.n	8005786 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005770:	f043 0201 	orr.w	r2, r3, #1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2203      	movs	r2, #3
 800577e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e18c      	b.n	8005aa0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b08      	cmp	r3, #8
 8005792:	d0e3      	beq.n	800575c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057a4:	f7fc fa68 	bl	8001c78 <HAL_GetTick>
 80057a8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057aa:	e014      	b.n	80057d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80057ac:	f7fc fa64 	bl	8001c78 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b0a      	cmp	r3, #10
 80057b8:	d90d      	bls.n	80057d6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057c0:	f043 0201 	orr.w	r2, r3, #1
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2203      	movs	r2, #3
 80057ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e164      	b.n	8005aa0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0e3      	beq.n	80057ac <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0202 	orr.w	r2, r2, #2
 80057f2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	7c1b      	ldrb	r3, [r3, #16]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d108      	bne.n	800580e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800580a:	619a      	str	r2, [r3, #24]
 800580c:	e007      	b.n	800581e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800581c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	7c5b      	ldrb	r3, [r3, #17]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d108      	bne.n	8005838 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699a      	ldr	r2, [r3, #24]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005834:	619a      	str	r2, [r3, #24]
 8005836:	e007      	b.n	8005848 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005846:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	7c9b      	ldrb	r3, [r3, #18]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d108      	bne.n	8005862 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800585e:	619a      	str	r2, [r3, #24]
 8005860:	e007      	b.n	8005872 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699a      	ldr	r2, [r3, #24]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005870:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005896:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691a      	ldr	r2, [r3, #16]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0210 	bic.w	r2, r2, #16
 80058a6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d108      	bne.n	80058c2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0204 	orr.w	r2, r2, #4
 80058be:	619a      	str	r2, [r3, #24]
 80058c0:	e030      	b.n	8005924 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d02c      	beq.n	8005924 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d020      	beq.n	8005914 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699a      	ldr	r2, [r3, #24]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058e0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0210 	orr.w	r2, r2, #16
 80058f0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d114      	bne.n	8005924 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699a      	ldr	r2, [r3, #24]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0220 	orr.w	r2, r2, #32
 8005908:	619a      	str	r2, [r3, #24]
 800590a:	e00b      	b.n	8005924 <HAL_FDCAN_Init+0x234>
 800590c:	0801f4a0 	.word	0x0801f4a0
 8005910:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0220 	orr.w	r2, r2, #32
 8005922:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	3b01      	subs	r3, #1
 800592a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	3b01      	subs	r3, #1
 8005932:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005934:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800593c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	3b01      	subs	r3, #1
 8005946:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800594c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800594e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005958:	d115      	bne.n	8005986 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	3b01      	subs	r3, #1
 8005966:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005968:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	3b01      	subs	r3, #1
 8005970:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005972:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	3b01      	subs	r3, #1
 800597c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005982:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005984:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ac:	4413      	add	r3, r2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d011      	beq.n	80059d6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80059ba:	f023 0107 	bic.w	r1, r3, #7
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	3360      	adds	r3, #96	; 0x60
 80059c6:	443b      	add	r3, r7
 80059c8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d011      	beq.n	8005a02 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80059e6:	f023 0107 	bic.w	r1, r3, #7
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	3360      	adds	r3, #96	; 0x60
 80059f2:	443b      	add	r3, r7
 80059f4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d012      	beq.n	8005a30 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005a12:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	3360      	adds	r3, #96	; 0x60
 8005a1e:	443b      	add	r3, r7
 8005a20:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005a24:	011a      	lsls	r2, r3, #4
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d012      	beq.n	8005a5e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005a40:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	3360      	adds	r3, #96	; 0x60
 8005a4c:	443b      	add	r3, r7
 8005a4e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005a52:	021a      	lsls	r2, r3, #8
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a11      	ldr	r2, [pc, #68]	; (8005aa8 <HAL_FDCAN_Init+0x3b8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d107      	bne.n	8005a78 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f022 0203 	bic.w	r2, r2, #3
 8005a76:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f80b 	bl	8005aac <FDCAN_CalcultateRamBlockAddresses>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005a9c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3760      	adds	r7, #96	; 0x60
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	4000a000 	.word	0x4000a000

08005aac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005ac2:	4ba7      	ldr	r3, [pc, #668]	; (8005d60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	0091      	lsls	r1, r2, #2
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6812      	ldr	r2, [r2, #0]
 8005ace:	430b      	orrs	r3, r1
 8005ad0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005adc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	041a      	lsls	r2, r3, #16
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	4413      	add	r3, r2
 8005af8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005b02:	4b97      	ldr	r3, [pc, #604]	; (8005d60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	0091      	lsls	r1, r2, #2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	430b      	orrs	r3, r1
 8005b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b24:	041a      	lsls	r2, r3, #16
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	4413      	add	r3, r2
 8005b3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005b44:	4b86      	ldr	r3, [pc, #536]	; (8005d60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	0091      	lsls	r1, r2, #2
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6812      	ldr	r2, [r2, #0]
 8005b50:	430b      	orrs	r3, r1
 8005b52:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b5e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	041a      	lsls	r2, r3, #16
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005b7a:	fb02 f303 	mul.w	r3, r2, r3
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	4413      	add	r3, r2
 8005b82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005b8c:	4b74      	ldr	r3, [pc, #464]	; (8005d60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	0091      	lsls	r1, r2, #2
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ba6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bae:	041a      	lsls	r2, r3, #16
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005bc2:	fb02 f303 	mul.w	r3, r2, r3
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	4413      	add	r3, r2
 8005bca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005bd4:	4b62      	ldr	r3, [pc, #392]	; (8005d60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	0091      	lsls	r1, r2, #2
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6812      	ldr	r2, [r2, #0]
 8005be0:	430b      	orrs	r3, r1
 8005be2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005c00:	4b57      	ldr	r3, [pc, #348]	; (8005d60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c02:	4013      	ands	r3, r2
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	0091      	lsls	r1, r2, #2
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6812      	ldr	r2, [r2, #0]
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c1a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c22:	041a      	lsls	r2, r3, #16
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	4413      	add	r3, r2
 8005c38:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005c42:	4b47      	ldr	r3, [pc, #284]	; (8005d60 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	0091      	lsls	r1, r2, #2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6812      	ldr	r2, [r2, #0]
 8005c4e:	430b      	orrs	r3, r1
 8005c50:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c5c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c64:	041a      	lsls	r2, r3, #16
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c78:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c80:	061a      	lsls	r2, r3, #24
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c90:	4b34      	ldr	r3, [pc, #208]	; (8005d64 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005c92:	4413      	add	r3, r2
 8005c94:	009a      	lsls	r2, r3, #2
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	441a      	add	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	441a      	add	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	6879      	ldr	r1, [r7, #4]
 8005cc4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005cc6:	fb01 f303 	mul.w	r3, r1, r3
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	441a      	add	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005cde:	fb01 f303 	mul.w	r3, r1, r3
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	441a      	add	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005cf6:	fb01 f303 	mul.w	r3, r1, r3
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	441a      	add	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	441a      	add	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005d26:	fb01 f303 	mul.w	r3, r1, r3
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	441a      	add	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005d42:	fb01 f303 	mul.w	r3, r1, r3
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	441a      	add	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d56:	4a04      	ldr	r2, [pc, #16]	; (8005d68 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d915      	bls.n	8005d88 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005d5c:	e006      	b.n	8005d6c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005d5e:	bf00      	nop
 8005d60:	ffff0003 	.word	0xffff0003
 8005d64:	10002b00 	.word	0x10002b00
 8005d68:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d72:	f043 0220 	orr.w	r2, r3, #32
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2203      	movs	r2, #3
 8005d80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e010      	b.n	8005daa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	e005      	b.n	8005d9c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3304      	adds	r3, #4
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d3f3      	bcc.n	8005d90 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop

08005db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b089      	sub	sp, #36	; 0x24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005dc6:	4b89      	ldr	r3, [pc, #548]	; (8005fec <HAL_GPIO_Init+0x234>)
 8005dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005dca:	e194      	b.n	80060f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd8:	4013      	ands	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8186 	beq.w	80060f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f003 0303 	and.w	r3, r3, #3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d005      	beq.n	8005dfc <HAL_GPIO_Init+0x44>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f003 0303 	and.w	r3, r3, #3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d130      	bne.n	8005e5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	2203      	movs	r2, #3
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4013      	ands	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e32:	2201      	movs	r2, #1
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3a:	43db      	mvns	r3, r3
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	091b      	lsrs	r3, r3, #4
 8005e48:	f003 0201 	and.w	r2, r3, #1
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d017      	beq.n	8005e9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	2203      	movs	r2, #3
 8005e76:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7a:	43db      	mvns	r3, r3
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d123      	bne.n	8005eee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	08da      	lsrs	r2, r3, #3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	3208      	adds	r2, #8
 8005eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	220f      	movs	r2, #15
 8005ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec2:	43db      	mvns	r3, r3
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	691a      	ldr	r2, [r3, #16]
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	08da      	lsrs	r2, r3, #3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3208      	adds	r2, #8
 8005ee8:	69b9      	ldr	r1, [r7, #24]
 8005eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	2203      	movs	r2, #3
 8005efa:	fa02 f303 	lsl.w	r3, r2, r3
 8005efe:	43db      	mvns	r3, r3
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	4013      	ands	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f003 0203 	and.w	r2, r3, #3
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	fa02 f303 	lsl.w	r3, r2, r3
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 80e0 	beq.w	80060f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f30:	4b2f      	ldr	r3, [pc, #188]	; (8005ff0 <HAL_GPIO_Init+0x238>)
 8005f32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f36:	4a2e      	ldr	r2, [pc, #184]	; (8005ff0 <HAL_GPIO_Init+0x238>)
 8005f38:	f043 0302 	orr.w	r3, r3, #2
 8005f3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005f40:	4b2b      	ldr	r3, [pc, #172]	; (8005ff0 <HAL_GPIO_Init+0x238>)
 8005f42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f4e:	4a29      	ldr	r2, [pc, #164]	; (8005ff4 <HAL_GPIO_Init+0x23c>)
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	089b      	lsrs	r3, r3, #2
 8005f54:	3302      	adds	r3, #2
 8005f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	220f      	movs	r2, #15
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	43db      	mvns	r3, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a20      	ldr	r2, [pc, #128]	; (8005ff8 <HAL_GPIO_Init+0x240>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d052      	beq.n	8006020 <HAL_GPIO_Init+0x268>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a1f      	ldr	r2, [pc, #124]	; (8005ffc <HAL_GPIO_Init+0x244>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d031      	beq.n	8005fe6 <HAL_GPIO_Init+0x22e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a1e      	ldr	r2, [pc, #120]	; (8006000 <HAL_GPIO_Init+0x248>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d02b      	beq.n	8005fe2 <HAL_GPIO_Init+0x22a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <HAL_GPIO_Init+0x24c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d025      	beq.n	8005fde <HAL_GPIO_Init+0x226>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a1c      	ldr	r2, [pc, #112]	; (8006008 <HAL_GPIO_Init+0x250>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d01f      	beq.n	8005fda <HAL_GPIO_Init+0x222>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a1b      	ldr	r2, [pc, #108]	; (800600c <HAL_GPIO_Init+0x254>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d019      	beq.n	8005fd6 <HAL_GPIO_Init+0x21e>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a1a      	ldr	r2, [pc, #104]	; (8006010 <HAL_GPIO_Init+0x258>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <HAL_GPIO_Init+0x21a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a19      	ldr	r2, [pc, #100]	; (8006014 <HAL_GPIO_Init+0x25c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00d      	beq.n	8005fce <HAL_GPIO_Init+0x216>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a18      	ldr	r2, [pc, #96]	; (8006018 <HAL_GPIO_Init+0x260>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d007      	beq.n	8005fca <HAL_GPIO_Init+0x212>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a17      	ldr	r2, [pc, #92]	; (800601c <HAL_GPIO_Init+0x264>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d101      	bne.n	8005fc6 <HAL_GPIO_Init+0x20e>
 8005fc2:	2309      	movs	r3, #9
 8005fc4:	e02d      	b.n	8006022 <HAL_GPIO_Init+0x26a>
 8005fc6:	230a      	movs	r3, #10
 8005fc8:	e02b      	b.n	8006022 <HAL_GPIO_Init+0x26a>
 8005fca:	2308      	movs	r3, #8
 8005fcc:	e029      	b.n	8006022 <HAL_GPIO_Init+0x26a>
 8005fce:	2307      	movs	r3, #7
 8005fd0:	e027      	b.n	8006022 <HAL_GPIO_Init+0x26a>
 8005fd2:	2306      	movs	r3, #6
 8005fd4:	e025      	b.n	8006022 <HAL_GPIO_Init+0x26a>
 8005fd6:	2305      	movs	r3, #5
 8005fd8:	e023      	b.n	8006022 <HAL_GPIO_Init+0x26a>
 8005fda:	2304      	movs	r3, #4
 8005fdc:	e021      	b.n	8006022 <HAL_GPIO_Init+0x26a>
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e01f      	b.n	8006022 <HAL_GPIO_Init+0x26a>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e01d      	b.n	8006022 <HAL_GPIO_Init+0x26a>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e01b      	b.n	8006022 <HAL_GPIO_Init+0x26a>
 8005fea:	bf00      	nop
 8005fec:	58000080 	.word	0x58000080
 8005ff0:	58024400 	.word	0x58024400
 8005ff4:	58000400 	.word	0x58000400
 8005ff8:	58020000 	.word	0x58020000
 8005ffc:	58020400 	.word	0x58020400
 8006000:	58020800 	.word	0x58020800
 8006004:	58020c00 	.word	0x58020c00
 8006008:	58021000 	.word	0x58021000
 800600c:	58021400 	.word	0x58021400
 8006010:	58021800 	.word	0x58021800
 8006014:	58021c00 	.word	0x58021c00
 8006018:	58022000 	.word	0x58022000
 800601c:	58022400 	.word	0x58022400
 8006020:	2300      	movs	r3, #0
 8006022:	69fa      	ldr	r2, [r7, #28]
 8006024:	f002 0203 	and.w	r2, r2, #3
 8006028:	0092      	lsls	r2, r2, #2
 800602a:	4093      	lsls	r3, r2
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	4313      	orrs	r3, r2
 8006030:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006032:	4938      	ldr	r1, [pc, #224]	; (8006114 <HAL_GPIO_Init+0x35c>)
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	089b      	lsrs	r3, r3, #2
 8006038:	3302      	adds	r3, #2
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	43db      	mvns	r3, r3
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	4013      	ands	r3, r2
 8006050:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	4313      	orrs	r3, r2
 8006064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800606e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	43db      	mvns	r3, r3
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	4013      	ands	r3, r2
 800607e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006094:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	43db      	mvns	r3, r3
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	4013      	ands	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	43db      	mvns	r3, r3
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	4013      	ands	r3, r2
 80060d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	3301      	adds	r3, #1
 80060f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	f47f ae63 	bne.w	8005dcc <HAL_GPIO_Init+0x14>
  }
}
 8006106:	bf00      	nop
 8006108:	bf00      	nop
 800610a:	3724      	adds	r7, #36	; 0x24
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	58000400 	.word	0x58000400

08006118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	807b      	strh	r3, [r7, #2]
 8006124:	4613      	mov	r3, r2
 8006126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006128:	787b      	ldrb	r3, [r7, #1]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800612e:	887a      	ldrh	r2, [r7, #2]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006134:	e003      	b.n	800613e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006136:	887b      	ldrh	r3, [r7, #2]
 8006138:	041a      	lsls	r2, r3, #16
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	619a      	str	r2, [r3, #24]
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800614a:	b480      	push	{r7}
 800614c:	b085      	sub	sp, #20
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	460b      	mov	r3, r1
 8006154:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800615c:	887a      	ldrh	r2, [r7, #2]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4013      	ands	r3, r2
 8006162:	041a      	lsls	r2, r3, #16
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	43d9      	mvns	r1, r3
 8006168:	887b      	ldrh	r3, [r7, #2]
 800616a:	400b      	ands	r3, r1
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	619a      	str	r2, [r3, #24]
}
 8006172:	bf00      	nop
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e041      	b.n	8006214 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006198:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f245 5255 	movw	r2, #21845	; 0x5555
 80061a2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6852      	ldr	r2, [r2, #4]
 80061ac:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6892      	ldr	r2, [r2, #8]
 80061b6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80061b8:	f7fb fd5e 	bl	8001c78 <HAL_GetTick>
 80061bc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80061be:	e00f      	b.n	80061e0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80061c0:	f7fb fd5a 	bl	8001c78 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b31      	cmp	r3, #49	; 0x31
 80061cc:	d908      	bls.n	80061e0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e019      	b.n	8006214 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1e8      	bne.n	80061c0 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d005      	beq.n	8006208 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	68d2      	ldr	r2, [r2, #12]
 8006204:	611a      	str	r2, [r3, #16]
 8006206:	e004      	b.n	8006212 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006210:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800622c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006244:	4b19      	ldr	r3, [pc, #100]	; (80062ac <HAL_PWREx_ConfigSupply+0x70>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b04      	cmp	r3, #4
 800624e:	d00a      	beq.n	8006266 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006250:	4b16      	ldr	r3, [pc, #88]	; (80062ac <HAL_PWREx_ConfigSupply+0x70>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	429a      	cmp	r2, r3
 800625c:	d001      	beq.n	8006262 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e01f      	b.n	80062a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	e01d      	b.n	80062a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006266:	4b11      	ldr	r3, [pc, #68]	; (80062ac <HAL_PWREx_ConfigSupply+0x70>)
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f023 0207 	bic.w	r2, r3, #7
 800626e:	490f      	ldr	r1, [pc, #60]	; (80062ac <HAL_PWREx_ConfigSupply+0x70>)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4313      	orrs	r3, r2
 8006274:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006276:	f7fb fcff 	bl	8001c78 <HAL_GetTick>
 800627a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800627c:	e009      	b.n	8006292 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800627e:	f7fb fcfb 	bl	8001c78 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800628c:	d901      	bls.n	8006292 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e007      	b.n	80062a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006292:	4b06      	ldr	r3, [pc, #24]	; (80062ac <HAL_PWREx_ConfigSupply+0x70>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800629a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800629e:	d1ee      	bne.n	800627e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	58024800 	.word	0x58024800

080062b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08c      	sub	sp, #48	; 0x30
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d102      	bne.n	80062c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	f000 bc1d 	b.w	8006afe <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 8087 	beq.w	80063e0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062d2:	4b99      	ldr	r3, [pc, #612]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062da:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062dc:	4b96      	ldr	r3, [pc, #600]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80062e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e4:	2b10      	cmp	r3, #16
 80062e6:	d007      	beq.n	80062f8 <HAL_RCC_OscConfig+0x48>
 80062e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ea:	2b18      	cmp	r3, #24
 80062ec:	d110      	bne.n	8006310 <HAL_RCC_OscConfig+0x60>
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	f003 0303 	and.w	r3, r3, #3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d10b      	bne.n	8006310 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f8:	4b8f      	ldr	r3, [pc, #572]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d06c      	beq.n	80063de <HAL_RCC_OscConfig+0x12e>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d168      	bne.n	80063de <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e3f6      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006318:	d106      	bne.n	8006328 <HAL_RCC_OscConfig+0x78>
 800631a:	4b87      	ldr	r3, [pc, #540]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a86      	ldr	r2, [pc, #536]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 8006320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006324:	6013      	str	r3, [r2, #0]
 8006326:	e02e      	b.n	8006386 <HAL_RCC_OscConfig+0xd6>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10c      	bne.n	800634a <HAL_RCC_OscConfig+0x9a>
 8006330:	4b81      	ldr	r3, [pc, #516]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a80      	ldr	r2, [pc, #512]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 8006336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	4b7e      	ldr	r3, [pc, #504]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a7d      	ldr	r2, [pc, #500]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 8006342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	e01d      	b.n	8006386 <HAL_RCC_OscConfig+0xd6>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006352:	d10c      	bne.n	800636e <HAL_RCC_OscConfig+0xbe>
 8006354:	4b78      	ldr	r3, [pc, #480]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a77      	ldr	r2, [pc, #476]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 800635a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	4b75      	ldr	r3, [pc, #468]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a74      	ldr	r2, [pc, #464]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 8006366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	e00b      	b.n	8006386 <HAL_RCC_OscConfig+0xd6>
 800636e:	4b72      	ldr	r3, [pc, #456]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a71      	ldr	r2, [pc, #452]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 8006374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	4b6f      	ldr	r3, [pc, #444]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a6e      	ldr	r2, [pc, #440]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 8006380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006384:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d013      	beq.n	80063b6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638e:	f7fb fc73 	bl	8001c78 <HAL_GetTick>
 8006392:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006394:	e008      	b.n	80063a8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006396:	f7fb fc6f 	bl	8001c78 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b64      	cmp	r3, #100	; 0x64
 80063a2:	d901      	bls.n	80063a8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e3aa      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063a8:	4b63      	ldr	r3, [pc, #396]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0f0      	beq.n	8006396 <HAL_RCC_OscConfig+0xe6>
 80063b4:	e014      	b.n	80063e0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b6:	f7fb fc5f 	bl	8001c78 <HAL_GetTick>
 80063ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063be:	f7fb fc5b 	bl	8001c78 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b64      	cmp	r3, #100	; 0x64
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e396      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063d0:	4b59      	ldr	r3, [pc, #356]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1f0      	bne.n	80063be <HAL_RCC_OscConfig+0x10e>
 80063dc:	e000      	b.n	80063e0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 80cb 	beq.w	8006584 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063ee:	4b52      	ldr	r3, [pc, #328]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063f6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063f8:	4b4f      	ldr	r3, [pc, #316]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 80063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <HAL_RCC_OscConfig+0x164>
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	2b18      	cmp	r3, #24
 8006408:	d156      	bne.n	80064b8 <HAL_RCC_OscConfig+0x208>
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	f003 0303 	and.w	r3, r3, #3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d151      	bne.n	80064b8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006414:	4b48      	ldr	r3, [pc, #288]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <HAL_RCC_OscConfig+0x17c>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e368      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800642c:	4b42      	ldr	r3, [pc, #264]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f023 0219 	bic.w	r2, r3, #25
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	493f      	ldr	r1, [pc, #252]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 800643a:	4313      	orrs	r3, r2
 800643c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800643e:	f7fb fc1b 	bl	8001c78 <HAL_GetTick>
 8006442:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006444:	e008      	b.n	8006458 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006446:	f7fb fc17 	bl	8001c78 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d901      	bls.n	8006458 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e352      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006458:	4b37      	ldr	r3, [pc, #220]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0f0      	beq.n	8006446 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006464:	f7fb fc14 	bl	8001c90 <HAL_GetREVID>
 8006468:	4603      	mov	r3, r0
 800646a:	f241 0203 	movw	r2, #4099	; 0x1003
 800646e:	4293      	cmp	r3, r2
 8006470:	d817      	bhi.n	80064a2 <HAL_RCC_OscConfig+0x1f2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	2b40      	cmp	r3, #64	; 0x40
 8006478:	d108      	bne.n	800648c <HAL_RCC_OscConfig+0x1dc>
 800647a:	4b2f      	ldr	r3, [pc, #188]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006482:	4a2d      	ldr	r2, [pc, #180]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 8006484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006488:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800648a:	e07b      	b.n	8006584 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800648c:	4b2a      	ldr	r3, [pc, #168]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	031b      	lsls	r3, r3, #12
 800649a:	4927      	ldr	r1, [pc, #156]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 800649c:	4313      	orrs	r3, r2
 800649e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064a0:	e070      	b.n	8006584 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a2:	4b25      	ldr	r3, [pc, #148]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	061b      	lsls	r3, r3, #24
 80064b0:	4921      	ldr	r1, [pc, #132]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064b6:	e065      	b.n	8006584 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d048      	beq.n	8006552 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064c0:	4b1d      	ldr	r3, [pc, #116]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f023 0219 	bic.w	r2, r3, #25
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	491a      	ldr	r1, [pc, #104]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d2:	f7fb fbd1 	bl	8001c78 <HAL_GetTick>
 80064d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064d8:	e008      	b.n	80064ec <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064da:	f7fb fbcd 	bl	8001c78 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d901      	bls.n	80064ec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e308      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064ec:	4b12      	ldr	r3, [pc, #72]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0f0      	beq.n	80064da <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f8:	f7fb fbca 	bl	8001c90 <HAL_GetREVID>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8006502:	4293      	cmp	r3, r2
 8006504:	d81a      	bhi.n	800653c <HAL_RCC_OscConfig+0x28c>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b40      	cmp	r3, #64	; 0x40
 800650c:	d108      	bne.n	8006520 <HAL_RCC_OscConfig+0x270>
 800650e:	4b0a      	ldr	r3, [pc, #40]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006516:	4a08      	ldr	r2, [pc, #32]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 8006518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800651c:	6053      	str	r3, [r2, #4]
 800651e:	e031      	b.n	8006584 <HAL_RCC_OscConfig+0x2d4>
 8006520:	4b05      	ldr	r3, [pc, #20]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	031b      	lsls	r3, r3, #12
 800652e:	4902      	ldr	r1, [pc, #8]	; (8006538 <HAL_RCC_OscConfig+0x288>)
 8006530:	4313      	orrs	r3, r2
 8006532:	604b      	str	r3, [r1, #4]
 8006534:	e026      	b.n	8006584 <HAL_RCC_OscConfig+0x2d4>
 8006536:	bf00      	nop
 8006538:	58024400 	.word	0x58024400
 800653c:	4b9a      	ldr	r3, [pc, #616]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	061b      	lsls	r3, r3, #24
 800654a:	4997      	ldr	r1, [pc, #604]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 800654c:	4313      	orrs	r3, r2
 800654e:	604b      	str	r3, [r1, #4]
 8006550:	e018      	b.n	8006584 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006552:	4b95      	ldr	r3, [pc, #596]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a94      	ldr	r2, [pc, #592]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 8006558:	f023 0301 	bic.w	r3, r3, #1
 800655c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800655e:	f7fb fb8b 	bl	8001c78 <HAL_GetTick>
 8006562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006564:	e008      	b.n	8006578 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006566:	f7fb fb87 	bl	8001c78 <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	2b02      	cmp	r3, #2
 8006572:	d901      	bls.n	8006578 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e2c2      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006578:	4b8b      	ldr	r3, [pc, #556]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1f0      	bne.n	8006566 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0310 	and.w	r3, r3, #16
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 80a9 	beq.w	80066e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006592:	4b85      	ldr	r3, [pc, #532]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800659a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800659c:	4b82      	ldr	r3, [pc, #520]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 800659e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d007      	beq.n	80065b8 <HAL_RCC_OscConfig+0x308>
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2b18      	cmp	r3, #24
 80065ac:	d13a      	bne.n	8006624 <HAL_RCC_OscConfig+0x374>
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f003 0303 	and.w	r3, r3, #3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d135      	bne.n	8006624 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065b8:	4b7b      	ldr	r3, [pc, #492]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d005      	beq.n	80065d0 <HAL_RCC_OscConfig+0x320>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	2b80      	cmp	r3, #128	; 0x80
 80065ca:	d001      	beq.n	80065d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e296      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065d0:	f7fb fb5e 	bl	8001c90 <HAL_GetREVID>
 80065d4:	4603      	mov	r3, r0
 80065d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80065da:	4293      	cmp	r3, r2
 80065dc:	d817      	bhi.n	800660e <HAL_RCC_OscConfig+0x35e>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d108      	bne.n	80065f8 <HAL_RCC_OscConfig+0x348>
 80065e6:	4b70      	ldr	r3, [pc, #448]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80065ee:	4a6e      	ldr	r2, [pc, #440]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 80065f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065f4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065f6:	e075      	b.n	80066e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065f8:	4b6b      	ldr	r3, [pc, #428]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	069b      	lsls	r3, r3, #26
 8006606:	4968      	ldr	r1, [pc, #416]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 8006608:	4313      	orrs	r3, r2
 800660a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800660c:	e06a      	b.n	80066e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800660e:	4b66      	ldr	r3, [pc, #408]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	061b      	lsls	r3, r3, #24
 800661c:	4962      	ldr	r1, [pc, #392]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 800661e:	4313      	orrs	r3, r2
 8006620:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006622:	e05f      	b.n	80066e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d042      	beq.n	80066b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800662c:	4b5e      	ldr	r3, [pc, #376]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a5d      	ldr	r2, [pc, #372]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 8006632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006638:	f7fb fb1e 	bl	8001c78 <HAL_GetTick>
 800663c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006640:	f7fb fb1a 	bl	8001c78 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b02      	cmp	r3, #2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e255      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006652:	4b55      	ldr	r3, [pc, #340]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0f0      	beq.n	8006640 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800665e:	f7fb fb17 	bl	8001c90 <HAL_GetREVID>
 8006662:	4603      	mov	r3, r0
 8006664:	f241 0203 	movw	r2, #4099	; 0x1003
 8006668:	4293      	cmp	r3, r2
 800666a:	d817      	bhi.n	800669c <HAL_RCC_OscConfig+0x3ec>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	2b20      	cmp	r3, #32
 8006672:	d108      	bne.n	8006686 <HAL_RCC_OscConfig+0x3d6>
 8006674:	4b4c      	ldr	r3, [pc, #304]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800667c:	4a4a      	ldr	r2, [pc, #296]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 800667e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006682:	6053      	str	r3, [r2, #4]
 8006684:	e02e      	b.n	80066e4 <HAL_RCC_OscConfig+0x434>
 8006686:	4b48      	ldr	r3, [pc, #288]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	069b      	lsls	r3, r3, #26
 8006694:	4944      	ldr	r1, [pc, #272]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 8006696:	4313      	orrs	r3, r2
 8006698:	604b      	str	r3, [r1, #4]
 800669a:	e023      	b.n	80066e4 <HAL_RCC_OscConfig+0x434>
 800669c:	4b42      	ldr	r3, [pc, #264]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	061b      	lsls	r3, r3, #24
 80066aa:	493f      	ldr	r1, [pc, #252]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60cb      	str	r3, [r1, #12]
 80066b0:	e018      	b.n	80066e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80066b2:	4b3d      	ldr	r3, [pc, #244]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a3c      	ldr	r2, [pc, #240]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 80066b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066be:	f7fb fadb 	bl	8001c78 <HAL_GetTick>
 80066c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80066c6:	f7fb fad7 	bl	8001c78 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e212      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066d8:	4b33      	ldr	r3, [pc, #204]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1f0      	bne.n	80066c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d036      	beq.n	800675e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d019      	beq.n	800672c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066f8:	4b2b      	ldr	r3, [pc, #172]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 80066fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066fc:	4a2a      	ldr	r2, [pc, #168]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006704:	f7fb fab8 	bl	8001c78 <HAL_GetTick>
 8006708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800670c:	f7fb fab4 	bl	8001c78 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e1ef      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800671e:	4b22      	ldr	r3, [pc, #136]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 8006720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0f0      	beq.n	800670c <HAL_RCC_OscConfig+0x45c>
 800672a:	e018      	b.n	800675e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800672c:	4b1e      	ldr	r3, [pc, #120]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 800672e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006730:	4a1d      	ldr	r2, [pc, #116]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 8006732:	f023 0301 	bic.w	r3, r3, #1
 8006736:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006738:	f7fb fa9e 	bl	8001c78 <HAL_GetTick>
 800673c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800673e:	e008      	b.n	8006752 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006740:	f7fb fa9a 	bl	8001c78 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e1d5      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006752:	4b15      	ldr	r3, [pc, #84]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 8006754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1f0      	bne.n	8006740 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b00      	cmp	r3, #0
 8006768:	d039      	beq.n	80067de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d01c      	beq.n	80067ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006772:	4b0d      	ldr	r3, [pc, #52]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a0c      	ldr	r2, [pc, #48]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 8006778:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800677c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800677e:	f7fb fa7b 	bl	8001c78 <HAL_GetTick>
 8006782:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006786:	f7fb fa77 	bl	8001c78 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e1b2      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006798:	4b03      	ldr	r3, [pc, #12]	; (80067a8 <HAL_RCC_OscConfig+0x4f8>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0f0      	beq.n	8006786 <HAL_RCC_OscConfig+0x4d6>
 80067a4:	e01b      	b.n	80067de <HAL_RCC_OscConfig+0x52e>
 80067a6:	bf00      	nop
 80067a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80067ac:	4b9b      	ldr	r3, [pc, #620]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a9a      	ldr	r2, [pc, #616]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80067b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067b8:	f7fb fa5e 	bl	8001c78 <HAL_GetTick>
 80067bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067be:	e008      	b.n	80067d2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80067c0:	f7fb fa5a 	bl	8001c78 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e195      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067d2:	4b92      	ldr	r3, [pc, #584]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f0      	bne.n	80067c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 8081 	beq.w	80068ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80067ec:	4b8c      	ldr	r3, [pc, #560]	; (8006a20 <HAL_RCC_OscConfig+0x770>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a8b      	ldr	r2, [pc, #556]	; (8006a20 <HAL_RCC_OscConfig+0x770>)
 80067f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067f8:	f7fb fa3e 	bl	8001c78 <HAL_GetTick>
 80067fc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067fe:	e008      	b.n	8006812 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006800:	f7fb fa3a 	bl	8001c78 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b64      	cmp	r3, #100	; 0x64
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e175      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006812:	4b83      	ldr	r3, [pc, #524]	; (8006a20 <HAL_RCC_OscConfig+0x770>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0f0      	beq.n	8006800 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d106      	bne.n	8006834 <HAL_RCC_OscConfig+0x584>
 8006826:	4b7d      	ldr	r3, [pc, #500]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 8006828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682a:	4a7c      	ldr	r2, [pc, #496]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 800682c:	f043 0301 	orr.w	r3, r3, #1
 8006830:	6713      	str	r3, [r2, #112]	; 0x70
 8006832:	e02d      	b.n	8006890 <HAL_RCC_OscConfig+0x5e0>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10c      	bne.n	8006856 <HAL_RCC_OscConfig+0x5a6>
 800683c:	4b77      	ldr	r3, [pc, #476]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 800683e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006840:	4a76      	ldr	r2, [pc, #472]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 8006842:	f023 0301 	bic.w	r3, r3, #1
 8006846:	6713      	str	r3, [r2, #112]	; 0x70
 8006848:	4b74      	ldr	r3, [pc, #464]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 800684a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684c:	4a73      	ldr	r2, [pc, #460]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 800684e:	f023 0304 	bic.w	r3, r3, #4
 8006852:	6713      	str	r3, [r2, #112]	; 0x70
 8006854:	e01c      	b.n	8006890 <HAL_RCC_OscConfig+0x5e0>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	2b05      	cmp	r3, #5
 800685c:	d10c      	bne.n	8006878 <HAL_RCC_OscConfig+0x5c8>
 800685e:	4b6f      	ldr	r3, [pc, #444]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006862:	4a6e      	ldr	r2, [pc, #440]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 8006864:	f043 0304 	orr.w	r3, r3, #4
 8006868:	6713      	str	r3, [r2, #112]	; 0x70
 800686a:	4b6c      	ldr	r3, [pc, #432]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686e:	4a6b      	ldr	r2, [pc, #428]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 8006870:	f043 0301 	orr.w	r3, r3, #1
 8006874:	6713      	str	r3, [r2, #112]	; 0x70
 8006876:	e00b      	b.n	8006890 <HAL_RCC_OscConfig+0x5e0>
 8006878:	4b68      	ldr	r3, [pc, #416]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687c:	4a67      	ldr	r2, [pc, #412]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 800687e:	f023 0301 	bic.w	r3, r3, #1
 8006882:	6713      	str	r3, [r2, #112]	; 0x70
 8006884:	4b65      	ldr	r3, [pc, #404]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 8006886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006888:	4a64      	ldr	r2, [pc, #400]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 800688a:	f023 0304 	bic.w	r3, r3, #4
 800688e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d015      	beq.n	80068c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006898:	f7fb f9ee 	bl	8001c78 <HAL_GetTick>
 800689c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800689e:	e00a      	b.n	80068b6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068a0:	f7fb f9ea 	bl	8001c78 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e123      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068b6:	4b59      	ldr	r3, [pc, #356]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80068b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0ee      	beq.n	80068a0 <HAL_RCC_OscConfig+0x5f0>
 80068c2:	e014      	b.n	80068ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c4:	f7fb f9d8 	bl	8001c78 <HAL_GetTick>
 80068c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068ca:	e00a      	b.n	80068e2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068cc:	f7fb f9d4 	bl	8001c78 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068da:	4293      	cmp	r3, r2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e10d      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068e2:	4b4e      	ldr	r3, [pc, #312]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80068e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1ee      	bne.n	80068cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 8102 	beq.w	8006afc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80068f8:	4b48      	ldr	r3, [pc, #288]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006900:	2b18      	cmp	r3, #24
 8006902:	f000 80bd 	beq.w	8006a80 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	2b02      	cmp	r3, #2
 800690c:	f040 809e 	bne.w	8006a4c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006910:	4b42      	ldr	r3, [pc, #264]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a41      	ldr	r2, [pc, #260]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 8006916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800691a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691c:	f7fb f9ac 	bl	8001c78 <HAL_GetTick>
 8006920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006924:	f7fb f9a8 	bl	8001c78 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e0e3      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006936:	4b39      	ldr	r3, [pc, #228]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1f0      	bne.n	8006924 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006942:	4b36      	ldr	r3, [pc, #216]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 8006944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006946:	4b37      	ldr	r3, [pc, #220]	; (8006a24 <HAL_RCC_OscConfig+0x774>)
 8006948:	4013      	ands	r3, r2
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006952:	0112      	lsls	r2, r2, #4
 8006954:	430a      	orrs	r2, r1
 8006956:	4931      	ldr	r1, [pc, #196]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 8006958:	4313      	orrs	r3, r2
 800695a:	628b      	str	r3, [r1, #40]	; 0x28
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006960:	3b01      	subs	r3, #1
 8006962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696a:	3b01      	subs	r3, #1
 800696c:	025b      	lsls	r3, r3, #9
 800696e:	b29b      	uxth	r3, r3
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006976:	3b01      	subs	r3, #1
 8006978:	041b      	lsls	r3, r3, #16
 800697a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006984:	3b01      	subs	r3, #1
 8006986:	061b      	lsls	r3, r3, #24
 8006988:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800698c:	4923      	ldr	r1, [pc, #140]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 800698e:	4313      	orrs	r3, r2
 8006990:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006992:	4b22      	ldr	r3, [pc, #136]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 8006994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006996:	4a21      	ldr	r2, [pc, #132]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 8006998:	f023 0301 	bic.w	r3, r3, #1
 800699c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800699e:	4b1f      	ldr	r3, [pc, #124]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80069a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069a2:	4b21      	ldr	r3, [pc, #132]	; (8006a28 <HAL_RCC_OscConfig+0x778>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80069aa:	00d2      	lsls	r2, r2, #3
 80069ac:	491b      	ldr	r1, [pc, #108]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80069b2:	4b1a      	ldr	r3, [pc, #104]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80069b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b6:	f023 020c 	bic.w	r2, r3, #12
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	4917      	ldr	r1, [pc, #92]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80069c4:	4b15      	ldr	r3, [pc, #84]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	f023 0202 	bic.w	r2, r3, #2
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d0:	4912      	ldr	r1, [pc, #72]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069d6:	4b11      	ldr	r3, [pc, #68]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	4a10      	ldr	r2, [pc, #64]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80069dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e2:	4b0e      	ldr	r3, [pc, #56]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	4a0d      	ldr	r2, [pc, #52]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80069e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80069ee:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80069f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f2:	4a0a      	ldr	r2, [pc, #40]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80069f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80069fa:	4b08      	ldr	r3, [pc, #32]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 80069fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fe:	4a07      	ldr	r2, [pc, #28]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 8006a00:	f043 0301 	orr.w	r3, r3, #1
 8006a04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a06:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a04      	ldr	r2, [pc, #16]	; (8006a1c <HAL_RCC_OscConfig+0x76c>)
 8006a0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a12:	f7fb f931 	bl	8001c78 <HAL_GetTick>
 8006a16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a18:	e011      	b.n	8006a3e <HAL_RCC_OscConfig+0x78e>
 8006a1a:	bf00      	nop
 8006a1c:	58024400 	.word	0x58024400
 8006a20:	58024800 	.word	0x58024800
 8006a24:	fffffc0c 	.word	0xfffffc0c
 8006a28:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a2c:	f7fb f924 	bl	8001c78 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e05f      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a3e:	4b32      	ldr	r3, [pc, #200]	; (8006b08 <HAL_RCC_OscConfig+0x858>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0f0      	beq.n	8006a2c <HAL_RCC_OscConfig+0x77c>
 8006a4a:	e057      	b.n	8006afc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a4c:	4b2e      	ldr	r3, [pc, #184]	; (8006b08 <HAL_RCC_OscConfig+0x858>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a2d      	ldr	r2, [pc, #180]	; (8006b08 <HAL_RCC_OscConfig+0x858>)
 8006a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a58:	f7fb f90e 	bl	8001c78 <HAL_GetTick>
 8006a5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a5e:	e008      	b.n	8006a72 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a60:	f7fb f90a 	bl	8001c78 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e045      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a72:	4b25      	ldr	r3, [pc, #148]	; (8006b08 <HAL_RCC_OscConfig+0x858>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1f0      	bne.n	8006a60 <HAL_RCC_OscConfig+0x7b0>
 8006a7e:	e03d      	b.n	8006afc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006a80:	4b21      	ldr	r3, [pc, #132]	; (8006b08 <HAL_RCC_OscConfig+0x858>)
 8006a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a84:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a86:	4b20      	ldr	r3, [pc, #128]	; (8006b08 <HAL_RCC_OscConfig+0x858>)
 8006a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d031      	beq.n	8006af8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f003 0203 	and.w	r2, r3, #3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d12a      	bne.n	8006af8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	091b      	lsrs	r3, r3, #4
 8006aa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d122      	bne.n	8006af8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d11a      	bne.n	8006af8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	0a5b      	lsrs	r3, r3, #9
 8006ac6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ace:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d111      	bne.n	8006af8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	0c1b      	lsrs	r3, r3, #16
 8006ad8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d108      	bne.n	8006af8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	0e1b      	lsrs	r3, r3, #24
 8006aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d001      	beq.n	8006afc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e000      	b.n	8006afe <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3730      	adds	r7, #48	; 0x30
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	58024400 	.word	0x58024400

08006b0c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e19c      	b.n	8006e5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b20:	4b8a      	ldr	r3, [pc, #552]	; (8006d4c <HAL_RCC_ClockConfig+0x240>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 030f 	and.w	r3, r3, #15
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d910      	bls.n	8006b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2e:	4b87      	ldr	r3, [pc, #540]	; (8006d4c <HAL_RCC_ClockConfig+0x240>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f023 020f 	bic.w	r2, r3, #15
 8006b36:	4985      	ldr	r1, [pc, #532]	; (8006d4c <HAL_RCC_ClockConfig+0x240>)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3e:	4b83      	ldr	r3, [pc, #524]	; (8006d4c <HAL_RCC_ClockConfig+0x240>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d001      	beq.n	8006b50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e184      	b.n	8006e5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d010      	beq.n	8006b7e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	691a      	ldr	r2, [r3, #16]
 8006b60:	4b7b      	ldr	r3, [pc, #492]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d908      	bls.n	8006b7e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b6c:	4b78      	ldr	r3, [pc, #480]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	4975      	ldr	r1, [pc, #468]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0308 	and.w	r3, r3, #8
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d010      	beq.n	8006bac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	695a      	ldr	r2, [r3, #20]
 8006b8e:	4b70      	ldr	r3, [pc, #448]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d908      	bls.n	8006bac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b9a:	4b6d      	ldr	r3, [pc, #436]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	496a      	ldr	r1, [pc, #424]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0310 	and.w	r3, r3, #16
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d010      	beq.n	8006bda <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	699a      	ldr	r2, [r3, #24]
 8006bbc:	4b64      	ldr	r3, [pc, #400]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d908      	bls.n	8006bda <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006bc8:	4b61      	ldr	r3, [pc, #388]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	495e      	ldr	r1, [pc, #376]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0320 	and.w	r3, r3, #32
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d010      	beq.n	8006c08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	69da      	ldr	r2, [r3, #28]
 8006bea:	4b59      	ldr	r3, [pc, #356]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d908      	bls.n	8006c08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006bf6:	4b56      	ldr	r3, [pc, #344]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	4953      	ldr	r1, [pc, #332]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d010      	beq.n	8006c36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	4b4d      	ldr	r3, [pc, #308]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	f003 030f 	and.w	r3, r3, #15
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d908      	bls.n	8006c36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c24:	4b4a      	ldr	r3, [pc, #296]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	f023 020f 	bic.w	r2, r3, #15
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	4947      	ldr	r1, [pc, #284]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d055      	beq.n	8006cee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c42:	4b43      	ldr	r3, [pc, #268]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	4940      	ldr	r1, [pc, #256]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d107      	bne.n	8006c6c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c5c:	4b3c      	ldr	r3, [pc, #240]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d121      	bne.n	8006cac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e0f6      	b.n	8006e5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	2b03      	cmp	r3, #3
 8006c72:	d107      	bne.n	8006c84 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c74:	4b36      	ldr	r3, [pc, #216]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d115      	bne.n	8006cac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e0ea      	b.n	8006e5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d107      	bne.n	8006c9c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c8c:	4b30      	ldr	r3, [pc, #192]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d109      	bne.n	8006cac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e0de      	b.n	8006e5a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c9c:	4b2c      	ldr	r3, [pc, #176]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e0d6      	b.n	8006e5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006cac:	4b28      	ldr	r3, [pc, #160]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f023 0207 	bic.w	r2, r3, #7
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	4925      	ldr	r1, [pc, #148]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cbe:	f7fa ffdb 	bl	8001c78 <HAL_GetTick>
 8006cc2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc4:	e00a      	b.n	8006cdc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cc6:	f7fa ffd7 	bl	8001c78 <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e0be      	b.n	8006e5a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cdc:	4b1c      	ldr	r3, [pc, #112]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d1eb      	bne.n	8006cc6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d010      	beq.n	8006d1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	4b14      	ldr	r3, [pc, #80]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d208      	bcs.n	8006d1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d0a:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	f023 020f 	bic.w	r2, r3, #15
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	490e      	ldr	r1, [pc, #56]	; (8006d50 <HAL_RCC_ClockConfig+0x244>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d1c:	4b0b      	ldr	r3, [pc, #44]	; (8006d4c <HAL_RCC_ClockConfig+0x240>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 030f 	and.w	r3, r3, #15
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d214      	bcs.n	8006d54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d2a:	4b08      	ldr	r3, [pc, #32]	; (8006d4c <HAL_RCC_ClockConfig+0x240>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f023 020f 	bic.w	r2, r3, #15
 8006d32:	4906      	ldr	r1, [pc, #24]	; (8006d4c <HAL_RCC_ClockConfig+0x240>)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d3a:	4b04      	ldr	r3, [pc, #16]	; (8006d4c <HAL_RCC_ClockConfig+0x240>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d005      	beq.n	8006d54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e086      	b.n	8006e5a <HAL_RCC_ClockConfig+0x34e>
 8006d4c:	52002000 	.word	0x52002000
 8006d50:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0304 	and.w	r3, r3, #4
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d010      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	691a      	ldr	r2, [r3, #16]
 8006d64:	4b3f      	ldr	r3, [pc, #252]	; (8006e64 <HAL_RCC_ClockConfig+0x358>)
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d208      	bcs.n	8006d82 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d70:	4b3c      	ldr	r3, [pc, #240]	; (8006e64 <HAL_RCC_ClockConfig+0x358>)
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	4939      	ldr	r1, [pc, #228]	; (8006e64 <HAL_RCC_ClockConfig+0x358>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0308 	and.w	r3, r3, #8
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d010      	beq.n	8006db0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	695a      	ldr	r2, [r3, #20]
 8006d92:	4b34      	ldr	r3, [pc, #208]	; (8006e64 <HAL_RCC_ClockConfig+0x358>)
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d208      	bcs.n	8006db0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d9e:	4b31      	ldr	r3, [pc, #196]	; (8006e64 <HAL_RCC_ClockConfig+0x358>)
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	492e      	ldr	r1, [pc, #184]	; (8006e64 <HAL_RCC_ClockConfig+0x358>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0310 	and.w	r3, r3, #16
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d010      	beq.n	8006dde <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	699a      	ldr	r2, [r3, #24]
 8006dc0:	4b28      	ldr	r3, [pc, #160]	; (8006e64 <HAL_RCC_ClockConfig+0x358>)
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d208      	bcs.n	8006dde <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006dcc:	4b25      	ldr	r3, [pc, #148]	; (8006e64 <HAL_RCC_ClockConfig+0x358>)
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	4922      	ldr	r1, [pc, #136]	; (8006e64 <HAL_RCC_ClockConfig+0x358>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0320 	and.w	r3, r3, #32
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d010      	beq.n	8006e0c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	69da      	ldr	r2, [r3, #28]
 8006dee:	4b1d      	ldr	r3, [pc, #116]	; (8006e64 <HAL_RCC_ClockConfig+0x358>)
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d208      	bcs.n	8006e0c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006dfa:	4b1a      	ldr	r3, [pc, #104]	; (8006e64 <HAL_RCC_ClockConfig+0x358>)
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	4917      	ldr	r1, [pc, #92]	; (8006e64 <HAL_RCC_ClockConfig+0x358>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006e0c:	f000 f834 	bl	8006e78 <HAL_RCC_GetSysClockFreq>
 8006e10:	4602      	mov	r2, r0
 8006e12:	4b14      	ldr	r3, [pc, #80]	; (8006e64 <HAL_RCC_ClockConfig+0x358>)
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	0a1b      	lsrs	r3, r3, #8
 8006e18:	f003 030f 	and.w	r3, r3, #15
 8006e1c:	4912      	ldr	r1, [pc, #72]	; (8006e68 <HAL_RCC_ClockConfig+0x35c>)
 8006e1e:	5ccb      	ldrb	r3, [r1, r3]
 8006e20:	f003 031f 	and.w	r3, r3, #31
 8006e24:	fa22 f303 	lsr.w	r3, r2, r3
 8006e28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e2a:	4b0e      	ldr	r3, [pc, #56]	; (8006e64 <HAL_RCC_ClockConfig+0x358>)
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	f003 030f 	and.w	r3, r3, #15
 8006e32:	4a0d      	ldr	r2, [pc, #52]	; (8006e68 <HAL_RCC_ClockConfig+0x35c>)
 8006e34:	5cd3      	ldrb	r3, [r2, r3]
 8006e36:	f003 031f 	and.w	r3, r3, #31
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e40:	4a0a      	ldr	r2, [pc, #40]	; (8006e6c <HAL_RCC_ClockConfig+0x360>)
 8006e42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e44:	4a0a      	ldr	r2, [pc, #40]	; (8006e70 <HAL_RCC_ClockConfig+0x364>)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006e4a:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <HAL_RCC_ClockConfig+0x368>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fa f9a6 	bl	80011a0 <HAL_InitTick>
 8006e54:	4603      	mov	r3, r0
 8006e56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	58024400 	.word	0x58024400
 8006e68:	08022b20 	.word	0x08022b20
 8006e6c:	24000004 	.word	0x24000004
 8006e70:	24000000 	.word	0x24000000
 8006e74:	24000008 	.word	0x24000008

08006e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b089      	sub	sp, #36	; 0x24
 8006e7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e7e:	4bb3      	ldr	r3, [pc, #716]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e86:	2b18      	cmp	r3, #24
 8006e88:	f200 8155 	bhi.w	8007136 <HAL_RCC_GetSysClockFreq+0x2be>
 8006e8c:	a201      	add	r2, pc, #4	; (adr r2, 8006e94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e92:	bf00      	nop
 8006e94:	08006ef9 	.word	0x08006ef9
 8006e98:	08007137 	.word	0x08007137
 8006e9c:	08007137 	.word	0x08007137
 8006ea0:	08007137 	.word	0x08007137
 8006ea4:	08007137 	.word	0x08007137
 8006ea8:	08007137 	.word	0x08007137
 8006eac:	08007137 	.word	0x08007137
 8006eb0:	08007137 	.word	0x08007137
 8006eb4:	08006f1f 	.word	0x08006f1f
 8006eb8:	08007137 	.word	0x08007137
 8006ebc:	08007137 	.word	0x08007137
 8006ec0:	08007137 	.word	0x08007137
 8006ec4:	08007137 	.word	0x08007137
 8006ec8:	08007137 	.word	0x08007137
 8006ecc:	08007137 	.word	0x08007137
 8006ed0:	08007137 	.word	0x08007137
 8006ed4:	08006f25 	.word	0x08006f25
 8006ed8:	08007137 	.word	0x08007137
 8006edc:	08007137 	.word	0x08007137
 8006ee0:	08007137 	.word	0x08007137
 8006ee4:	08007137 	.word	0x08007137
 8006ee8:	08007137 	.word	0x08007137
 8006eec:	08007137 	.word	0x08007137
 8006ef0:	08007137 	.word	0x08007137
 8006ef4:	08006f2b 	.word	0x08006f2b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ef8:	4b94      	ldr	r3, [pc, #592]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0320 	and.w	r3, r3, #32
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d009      	beq.n	8006f18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f04:	4b91      	ldr	r3, [pc, #580]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	08db      	lsrs	r3, r3, #3
 8006f0a:	f003 0303 	and.w	r3, r3, #3
 8006f0e:	4a90      	ldr	r2, [pc, #576]	; (8007150 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f10:	fa22 f303 	lsr.w	r3, r2, r3
 8006f14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006f16:	e111      	b.n	800713c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006f18:	4b8d      	ldr	r3, [pc, #564]	; (8007150 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f1a:	61bb      	str	r3, [r7, #24]
    break;
 8006f1c:	e10e      	b.n	800713c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006f1e:	4b8d      	ldr	r3, [pc, #564]	; (8007154 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f20:	61bb      	str	r3, [r7, #24]
    break;
 8006f22:	e10b      	b.n	800713c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006f24:	4b8c      	ldr	r3, [pc, #560]	; (8007158 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006f26:	61bb      	str	r3, [r7, #24]
    break;
 8006f28:	e108      	b.n	800713c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f2a:	4b88      	ldr	r3, [pc, #544]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006f34:	4b85      	ldr	r3, [pc, #532]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f38:	091b      	lsrs	r3, r3, #4
 8006f3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f3e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f40:	4b82      	ldr	r3, [pc, #520]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006f4a:	4b80      	ldr	r3, [pc, #512]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4e:	08db      	lsrs	r3, r3, #3
 8006f50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	fb02 f303 	mul.w	r3, r2, r3
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f62:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 80e1 	beq.w	8007130 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	f000 8083 	beq.w	800707c <HAL_RCC_GetSysClockFreq+0x204>
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	f200 80a1 	bhi.w	80070c0 <HAL_RCC_GetSysClockFreq+0x248>
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d003      	beq.n	8006f8c <HAL_RCC_GetSysClockFreq+0x114>
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d056      	beq.n	8007038 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006f8a:	e099      	b.n	80070c0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f8c:	4b6f      	ldr	r3, [pc, #444]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0320 	and.w	r3, r3, #32
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d02d      	beq.n	8006ff4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f98:	4b6c      	ldr	r3, [pc, #432]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	08db      	lsrs	r3, r3, #3
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	4a6b      	ldr	r2, [pc, #428]	; (8007150 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	ee07 3a90 	vmov	s15, r3
 8006fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc2:	4b62      	ldr	r3, [pc, #392]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fd6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800715c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006ff2:	e087      	b.n	8007104 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007160 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007006:	4b51      	ldr	r3, [pc, #324]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007016:	ed97 6a02 	vldr	s12, [r7, #8]
 800701a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800715c <HAL_RCC_GetSysClockFreq+0x2e4>
 800701e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800702a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800702e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007036:	e065      	b.n	8007104 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007042:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007164 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800704a:	4b40      	ldr	r3, [pc, #256]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800705a:	ed97 6a02 	vldr	s12, [r7, #8]
 800705e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800715c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800706a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800706e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007076:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800707a:	e043      	b.n	8007104 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007086:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007168 <HAL_RCC_GetSysClockFreq+0x2f0>
 800708a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800708e:	4b2f      	ldr	r3, [pc, #188]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709e:	ed97 6a02 	vldr	s12, [r7, #8]
 80070a2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800715c <HAL_RCC_GetSysClockFreq+0x2e4>
 80070a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070be:	e021      	b.n	8007104 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007164 <HAL_RCC_GetSysClockFreq+0x2ec>
 80070ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d2:	4b1e      	ldr	r3, [pc, #120]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80070e6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800715c <HAL_RCC_GetSysClockFreq+0x2e4>
 80070ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007102:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007104:	4b11      	ldr	r3, [pc, #68]	; (800714c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007108:	0a5b      	lsrs	r3, r3, #9
 800710a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800710e:	3301      	adds	r3, #1
 8007110:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	ee07 3a90 	vmov	s15, r3
 8007118:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800711c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007128:	ee17 3a90 	vmov	r3, s15
 800712c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800712e:	e005      	b.n	800713c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	61bb      	str	r3, [r7, #24]
    break;
 8007134:	e002      	b.n	800713c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007136:	4b07      	ldr	r3, [pc, #28]	; (8007154 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007138:	61bb      	str	r3, [r7, #24]
    break;
 800713a:	bf00      	nop
  }

  return sysclockfreq;
 800713c:	69bb      	ldr	r3, [r7, #24]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3724      	adds	r7, #36	; 0x24
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	58024400 	.word	0x58024400
 8007150:	03d09000 	.word	0x03d09000
 8007154:	003d0900 	.word	0x003d0900
 8007158:	017d7840 	.word	0x017d7840
 800715c:	46000000 	.word	0x46000000
 8007160:	4c742400 	.word	0x4c742400
 8007164:	4a742400 	.word	0x4a742400
 8007168:	4bbebc20 	.word	0x4bbebc20

0800716c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007172:	f7ff fe81 	bl	8006e78 <HAL_RCC_GetSysClockFreq>
 8007176:	4602      	mov	r2, r0
 8007178:	4b10      	ldr	r3, [pc, #64]	; (80071bc <HAL_RCC_GetHCLKFreq+0x50>)
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	0a1b      	lsrs	r3, r3, #8
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	490f      	ldr	r1, [pc, #60]	; (80071c0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007184:	5ccb      	ldrb	r3, [r1, r3]
 8007186:	f003 031f 	and.w	r3, r3, #31
 800718a:	fa22 f303 	lsr.w	r3, r2, r3
 800718e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007190:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <HAL_RCC_GetHCLKFreq+0x50>)
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	4a09      	ldr	r2, [pc, #36]	; (80071c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800719a:	5cd3      	ldrb	r3, [r2, r3]
 800719c:	f003 031f 	and.w	r3, r3, #31
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	fa22 f303 	lsr.w	r3, r2, r3
 80071a6:	4a07      	ldr	r2, [pc, #28]	; (80071c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80071a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80071aa:	4a07      	ldr	r2, [pc, #28]	; (80071c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80071b0:	4b04      	ldr	r3, [pc, #16]	; (80071c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80071b2:	681b      	ldr	r3, [r3, #0]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	58024400 	.word	0x58024400
 80071c0:	08022b20 	.word	0x08022b20
 80071c4:	24000004 	.word	0x24000004
 80071c8:	24000000 	.word	0x24000000

080071cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80071d0:	f7ff ffcc 	bl	800716c <HAL_RCC_GetHCLKFreq>
 80071d4:	4602      	mov	r2, r0
 80071d6:	4b06      	ldr	r3, [pc, #24]	; (80071f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	091b      	lsrs	r3, r3, #4
 80071dc:	f003 0307 	and.w	r3, r3, #7
 80071e0:	4904      	ldr	r1, [pc, #16]	; (80071f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80071e2:	5ccb      	ldrb	r3, [r1, r3]
 80071e4:	f003 031f 	and.w	r3, r3, #31
 80071e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	58024400 	.word	0x58024400
 80071f4:	08022b20 	.word	0x08022b20

080071f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80071fc:	f7ff ffb6 	bl	800716c <HAL_RCC_GetHCLKFreq>
 8007200:	4602      	mov	r2, r0
 8007202:	4b06      	ldr	r3, [pc, #24]	; (800721c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	0a1b      	lsrs	r3, r3, #8
 8007208:	f003 0307 	and.w	r3, r3, #7
 800720c:	4904      	ldr	r1, [pc, #16]	; (8007220 <HAL_RCC_GetPCLK2Freq+0x28>)
 800720e:	5ccb      	ldrb	r3, [r1, r3]
 8007210:	f003 031f 	and.w	r3, r3, #31
 8007214:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007218:	4618      	mov	r0, r3
 800721a:	bd80      	pop	{r7, pc}
 800721c:	58024400 	.word	0x58024400
 8007220:	08022b20 	.word	0x08022b20

08007224 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	223f      	movs	r2, #63	; 0x3f
 8007232:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007234:	4b1a      	ldr	r3, [pc, #104]	; (80072a0 <HAL_RCC_GetClockConfig+0x7c>)
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	f003 0207 	and.w	r2, r3, #7
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007240:	4b17      	ldr	r3, [pc, #92]	; (80072a0 <HAL_RCC_GetClockConfig+0x7c>)
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800724c:	4b14      	ldr	r3, [pc, #80]	; (80072a0 <HAL_RCC_GetClockConfig+0x7c>)
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	f003 020f 	and.w	r2, r3, #15
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007258:	4b11      	ldr	r3, [pc, #68]	; (80072a0 <HAL_RCC_GetClockConfig+0x7c>)
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007264:	4b0e      	ldr	r3, [pc, #56]	; (80072a0 <HAL_RCC_GetClockConfig+0x7c>)
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007270:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <HAL_RCC_GetClockConfig+0x7c>)
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800727c:	4b08      	ldr	r3, [pc, #32]	; (80072a0 <HAL_RCC_GetClockConfig+0x7c>)
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007288:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <HAL_RCC_GetClockConfig+0x80>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 020f 	and.w	r2, r3, #15
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	601a      	str	r2, [r3, #0]
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	58024400 	.word	0x58024400
 80072a4:	52002000 	.word	0x52002000

080072a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072b0:	2300      	movs	r3, #0
 80072b2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072b4:	2300      	movs	r3, #0
 80072b6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d03f      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072cc:	d02a      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80072ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072d2:	d824      	bhi.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80072d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072d8:	d018      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80072da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072de:	d81e      	bhi.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d003      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80072e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072e8:	d007      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80072ea:	e018      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ec:	4ba3      	ldr	r3, [pc, #652]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	4aa2      	ldr	r2, [pc, #648]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80072f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80072f8:	e015      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	3304      	adds	r3, #4
 80072fe:	2102      	movs	r1, #2
 8007300:	4618      	mov	r0, r3
 8007302:	f001 fff9 	bl	80092f8 <RCCEx_PLL2_Config>
 8007306:	4603      	mov	r3, r0
 8007308:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800730a:	e00c      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	3324      	adds	r3, #36	; 0x24
 8007310:	2102      	movs	r1, #2
 8007312:	4618      	mov	r0, r3
 8007314:	f002 f8a2 	bl	800945c <RCCEx_PLL3_Config>
 8007318:	4603      	mov	r3, r0
 800731a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800731c:	e003      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	75fb      	strb	r3, [r7, #23]
      break;
 8007322:	e000      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007326:	7dfb      	ldrb	r3, [r7, #23]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d109      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800732c:	4b93      	ldr	r3, [pc, #588]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800732e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007330:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007338:	4990      	ldr	r1, [pc, #576]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800733a:	4313      	orrs	r3, r2
 800733c:	650b      	str	r3, [r1, #80]	; 0x50
 800733e:	e001      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007340:	7dfb      	ldrb	r3, [r7, #23]
 8007342:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800734c:	2b00      	cmp	r3, #0
 800734e:	d03d      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007354:	2b04      	cmp	r3, #4
 8007356:	d826      	bhi.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007358:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800735a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735e:	bf00      	nop
 8007360:	08007375 	.word	0x08007375
 8007364:	08007383 	.word	0x08007383
 8007368:	08007395 	.word	0x08007395
 800736c:	080073ad 	.word	0x080073ad
 8007370:	080073ad 	.word	0x080073ad
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007374:	4b81      	ldr	r3, [pc, #516]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007378:	4a80      	ldr	r2, [pc, #512]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800737a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800737e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007380:	e015      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3304      	adds	r3, #4
 8007386:	2100      	movs	r1, #0
 8007388:	4618      	mov	r0, r3
 800738a:	f001 ffb5 	bl	80092f8 <RCCEx_PLL2_Config>
 800738e:	4603      	mov	r3, r0
 8007390:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007392:	e00c      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3324      	adds	r3, #36	; 0x24
 8007398:	2100      	movs	r1, #0
 800739a:	4618      	mov	r0, r3
 800739c:	f002 f85e 	bl	800945c <RCCEx_PLL3_Config>
 80073a0:	4603      	mov	r3, r0
 80073a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073a4:	e003      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	75fb      	strb	r3, [r7, #23]
      break;
 80073aa:	e000      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80073ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d109      	bne.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073b4:	4b71      	ldr	r3, [pc, #452]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b8:	f023 0207 	bic.w	r2, r3, #7
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c0:	496e      	ldr	r1, [pc, #440]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	650b      	str	r3, [r1, #80]	; 0x50
 80073c6:	e001      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
 80073ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d042      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073e0:	d02b      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80073e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073e6:	d825      	bhi.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80073e8:	2bc0      	cmp	r3, #192	; 0xc0
 80073ea:	d028      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80073ec:	2bc0      	cmp	r3, #192	; 0xc0
 80073ee:	d821      	bhi.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80073f0:	2b80      	cmp	r3, #128	; 0x80
 80073f2:	d016      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80073f4:	2b80      	cmp	r3, #128	; 0x80
 80073f6:	d81d      	bhi.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80073fc:	2b40      	cmp	r3, #64	; 0x40
 80073fe:	d007      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007400:	e018      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007402:	4b5e      	ldr	r3, [pc, #376]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007406:	4a5d      	ldr	r2, [pc, #372]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800740c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800740e:	e017      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3304      	adds	r3, #4
 8007414:	2100      	movs	r1, #0
 8007416:	4618      	mov	r0, r3
 8007418:	f001 ff6e 	bl	80092f8 <RCCEx_PLL2_Config>
 800741c:	4603      	mov	r3, r0
 800741e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007420:	e00e      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3324      	adds	r3, #36	; 0x24
 8007426:	2100      	movs	r1, #0
 8007428:	4618      	mov	r0, r3
 800742a:	f002 f817 	bl	800945c <RCCEx_PLL3_Config>
 800742e:	4603      	mov	r3, r0
 8007430:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007432:	e005      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	75fb      	strb	r3, [r7, #23]
      break;
 8007438:	e002      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800743a:	bf00      	nop
 800743c:	e000      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800743e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007440:	7dfb      	ldrb	r3, [r7, #23]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d109      	bne.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007446:	4b4d      	ldr	r3, [pc, #308]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800744a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007452:	494a      	ldr	r1, [pc, #296]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007454:	4313      	orrs	r3, r2
 8007456:	650b      	str	r3, [r1, #80]	; 0x50
 8007458:	e001      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800745a:	7dfb      	ldrb	r3, [r7, #23]
 800745c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007466:	2b00      	cmp	r3, #0
 8007468:	d049      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007470:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007474:	d030      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800747a:	d82a      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800747c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007480:	d02c      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007482:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007486:	d824      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800748c:	d018      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800748e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007492:	d81e      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800749c:	d007      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x206>
 800749e:	e018      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074a0:	4b36      	ldr	r3, [pc, #216]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	4a35      	ldr	r2, [pc, #212]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074ac:	e017      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3304      	adds	r3, #4
 80074b2:	2100      	movs	r1, #0
 80074b4:	4618      	mov	r0, r3
 80074b6:	f001 ff1f 	bl	80092f8 <RCCEx_PLL2_Config>
 80074ba:	4603      	mov	r3, r0
 80074bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80074be:	e00e      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3324      	adds	r3, #36	; 0x24
 80074c4:	2100      	movs	r1, #0
 80074c6:	4618      	mov	r0, r3
 80074c8:	f001 ffc8 	bl	800945c <RCCEx_PLL3_Config>
 80074cc:	4603      	mov	r3, r0
 80074ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074d0:	e005      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	75fb      	strb	r3, [r7, #23]
      break;
 80074d6:	e002      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80074d8:	bf00      	nop
 80074da:	e000      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80074dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074de:	7dfb      	ldrb	r3, [r7, #23]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10a      	bne.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80074e4:	4b25      	ldr	r3, [pc, #148]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80074f2:	4922      	ldr	r1, [pc, #136]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	658b      	str	r3, [r1, #88]	; 0x58
 80074f8:	e001      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
 80074fc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007506:	2b00      	cmp	r3, #0
 8007508:	d04b      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007510:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007514:	d030      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007516:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800751a:	d82a      	bhi.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800751c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007520:	d02e      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007522:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007526:	d824      	bhi.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007528:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800752c:	d018      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800752e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007532:	d81e      	bhi.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800753c:	d007      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800753e:	e018      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007540:	4b0e      	ldr	r3, [pc, #56]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007544:	4a0d      	ldr	r2, [pc, #52]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800754a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800754c:	e019      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3304      	adds	r3, #4
 8007552:	2100      	movs	r1, #0
 8007554:	4618      	mov	r0, r3
 8007556:	f001 fecf 	bl	80092f8 <RCCEx_PLL2_Config>
 800755a:	4603      	mov	r3, r0
 800755c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800755e:	e010      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3324      	adds	r3, #36	; 0x24
 8007564:	2100      	movs	r1, #0
 8007566:	4618      	mov	r0, r3
 8007568:	f001 ff78 	bl	800945c <RCCEx_PLL3_Config>
 800756c:	4603      	mov	r3, r0
 800756e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007570:	e007      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	75fb      	strb	r3, [r7, #23]
      break;
 8007576:	e004      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007578:	bf00      	nop
 800757a:	e002      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800757c:	58024400 	.word	0x58024400
      break;
 8007580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007582:	7dfb      	ldrb	r3, [r7, #23]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10a      	bne.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007588:	4b99      	ldr	r3, [pc, #612]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800758a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800758c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007596:	4996      	ldr	r1, [pc, #600]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007598:	4313      	orrs	r3, r2
 800759a:	658b      	str	r3, [r1, #88]	; 0x58
 800759c:	e001      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800759e:	7dfb      	ldrb	r3, [r7, #23]
 80075a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d032      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b2:	2b30      	cmp	r3, #48	; 0x30
 80075b4:	d01c      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80075b6:	2b30      	cmp	r3, #48	; 0x30
 80075b8:	d817      	bhi.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x342>
 80075ba:	2b20      	cmp	r3, #32
 80075bc:	d00c      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80075be:	2b20      	cmp	r3, #32
 80075c0:	d813      	bhi.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x342>
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d016      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80075c6:	2b10      	cmp	r3, #16
 80075c8:	d10f      	bne.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ca:	4b89      	ldr	r3, [pc, #548]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	4a88      	ldr	r2, [pc, #544]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80075d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80075d6:	e00e      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3304      	adds	r3, #4
 80075dc:	2102      	movs	r1, #2
 80075de:	4618      	mov	r0, r3
 80075e0:	f001 fe8a 	bl	80092f8 <RCCEx_PLL2_Config>
 80075e4:	4603      	mov	r3, r0
 80075e6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80075e8:	e005      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	75fb      	strb	r3, [r7, #23]
      break;
 80075ee:	e002      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80075f0:	bf00      	nop
 80075f2:	e000      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80075f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d109      	bne.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80075fc:	4b7c      	ldr	r3, [pc, #496]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80075fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007600:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007608:	4979      	ldr	r1, [pc, #484]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800760a:	4313      	orrs	r3, r2
 800760c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800760e:	e001      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d047      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007628:	d030      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800762a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800762e:	d82a      	bhi.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007630:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007634:	d02c      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007636:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800763a:	d824      	bhi.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800763c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007640:	d018      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007646:	d81e      	bhi.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800764c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007650:	d007      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007652:	e018      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007654:	4b66      	ldr	r3, [pc, #408]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	4a65      	ldr	r2, [pc, #404]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800765a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800765e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007660:	e017      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3304      	adds	r3, #4
 8007666:	2100      	movs	r1, #0
 8007668:	4618      	mov	r0, r3
 800766a:	f001 fe45 	bl	80092f8 <RCCEx_PLL2_Config>
 800766e:	4603      	mov	r3, r0
 8007670:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007672:	e00e      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3324      	adds	r3, #36	; 0x24
 8007678:	2100      	movs	r1, #0
 800767a:	4618      	mov	r0, r3
 800767c:	f001 feee 	bl	800945c <RCCEx_PLL3_Config>
 8007680:	4603      	mov	r3, r0
 8007682:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007684:	e005      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	75fb      	strb	r3, [r7, #23]
      break;
 800768a:	e002      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800768c:	bf00      	nop
 800768e:	e000      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007692:	7dfb      	ldrb	r3, [r7, #23]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d109      	bne.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007698:	4b55      	ldr	r3, [pc, #340]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800769a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800769c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a4:	4952      	ldr	r1, [pc, #328]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	650b      	str	r3, [r1, #80]	; 0x50
 80076aa:	e001      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
 80076ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d049      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076c4:	d02e      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80076c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076ca:	d828      	bhi.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80076cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076d0:	d02a      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80076d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076d6:	d822      	bhi.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80076d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076dc:	d026      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80076de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076e2:	d81c      	bhi.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80076e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076e8:	d010      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x464>
 80076ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076ee:	d816      	bhi.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d01d      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80076f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f8:	d111      	bne.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	3304      	adds	r3, #4
 80076fe:	2101      	movs	r1, #1
 8007700:	4618      	mov	r0, r3
 8007702:	f001 fdf9 	bl	80092f8 <RCCEx_PLL2_Config>
 8007706:	4603      	mov	r3, r0
 8007708:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800770a:	e012      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3324      	adds	r3, #36	; 0x24
 8007710:	2101      	movs	r1, #1
 8007712:	4618      	mov	r0, r3
 8007714:	f001 fea2 	bl	800945c <RCCEx_PLL3_Config>
 8007718:	4603      	mov	r3, r0
 800771a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800771c:	e009      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	75fb      	strb	r3, [r7, #23]
      break;
 8007722:	e006      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007724:	bf00      	nop
 8007726:	e004      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007728:	bf00      	nop
 800772a:	e002      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800772c:	bf00      	nop
 800772e:	e000      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007732:	7dfb      	ldrb	r3, [r7, #23]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d109      	bne.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007738:	4b2d      	ldr	r3, [pc, #180]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800773a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007744:	492a      	ldr	r1, [pc, #168]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007746:	4313      	orrs	r3, r2
 8007748:	650b      	str	r3, [r1, #80]	; 0x50
 800774a:	e001      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d04d      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007762:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007766:	d02e      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800776c:	d828      	bhi.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800776e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007772:	d02a      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007778:	d822      	bhi.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800777a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800777e:	d026      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007780:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007784:	d81c      	bhi.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800778a:	d010      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x506>
 800778c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007790:	d816      	bhi.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d01d      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800779a:	d111      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3304      	adds	r3, #4
 80077a0:	2101      	movs	r1, #1
 80077a2:	4618      	mov	r0, r3
 80077a4:	f001 fda8 	bl	80092f8 <RCCEx_PLL2_Config>
 80077a8:	4603      	mov	r3, r0
 80077aa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80077ac:	e012      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3324      	adds	r3, #36	; 0x24
 80077b2:	2101      	movs	r1, #1
 80077b4:	4618      	mov	r0, r3
 80077b6:	f001 fe51 	bl	800945c <RCCEx_PLL3_Config>
 80077ba:	4603      	mov	r3, r0
 80077bc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80077be:	e009      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	75fb      	strb	r3, [r7, #23]
      break;
 80077c4:	e006      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80077c6:	bf00      	nop
 80077c8:	e004      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80077ca:	bf00      	nop
 80077cc:	e002      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80077ce:	bf00      	nop
 80077d0:	e000      	b.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80077d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10c      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80077da:	4b05      	ldr	r3, [pc, #20]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80077dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077e8:	4901      	ldr	r1, [pc, #4]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	658b      	str	r3, [r1, #88]	; 0x58
 80077ee:	e003      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80077f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f4:	7dfb      	ldrb	r3, [r7, #23]
 80077f6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d02f      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800780c:	d00e      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800780e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007812:	d814      	bhi.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007814:	2b00      	cmp	r3, #0
 8007816:	d015      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800781c:	d10f      	bne.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800781e:	4baf      	ldr	r3, [pc, #700]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007822:	4aae      	ldr	r2, [pc, #696]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007828:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800782a:	e00c      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3304      	adds	r3, #4
 8007830:	2101      	movs	r1, #1
 8007832:	4618      	mov	r0, r3
 8007834:	f001 fd60 	bl	80092f8 <RCCEx_PLL2_Config>
 8007838:	4603      	mov	r3, r0
 800783a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800783c:	e003      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	75fb      	strb	r3, [r7, #23]
      break;
 8007842:	e000      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007846:	7dfb      	ldrb	r3, [r7, #23]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d109      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800784c:	4ba3      	ldr	r3, [pc, #652]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800784e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007850:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007858:	49a0      	ldr	r1, [pc, #640]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800785a:	4313      	orrs	r3, r2
 800785c:	650b      	str	r3, [r1, #80]	; 0x50
 800785e:	e001      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007860:	7dfb      	ldrb	r3, [r7, #23]
 8007862:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d032      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007874:	2b03      	cmp	r3, #3
 8007876:	d81b      	bhi.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007878:	a201      	add	r2, pc, #4	; (adr r2, 8007880 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800787a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787e:	bf00      	nop
 8007880:	080078b7 	.word	0x080078b7
 8007884:	08007891 	.word	0x08007891
 8007888:	0800789f 	.word	0x0800789f
 800788c:	080078b7 	.word	0x080078b7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007890:	4b92      	ldr	r3, [pc, #584]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007894:	4a91      	ldr	r2, [pc, #580]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800789a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800789c:	e00c      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3304      	adds	r3, #4
 80078a2:	2102      	movs	r1, #2
 80078a4:	4618      	mov	r0, r3
 80078a6:	f001 fd27 	bl	80092f8 <RCCEx_PLL2_Config>
 80078aa:	4603      	mov	r3, r0
 80078ac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80078ae:	e003      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	75fb      	strb	r3, [r7, #23]
      break;
 80078b4:	e000      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80078b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d109      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80078be:	4b87      	ldr	r3, [pc, #540]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80078c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c2:	f023 0203 	bic.w	r2, r3, #3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ca:	4984      	ldr	r1, [pc, #528]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80078d0:	e001      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d2:	7dfb      	ldrb	r3, [r7, #23]
 80078d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f000 8086 	beq.w	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078e4:	4b7e      	ldr	r3, [pc, #504]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a7d      	ldr	r2, [pc, #500]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80078ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078f0:	f7fa f9c2 	bl	8001c78 <HAL_GetTick>
 80078f4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078f6:	e009      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078f8:	f7fa f9be 	bl	8001c78 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b64      	cmp	r3, #100	; 0x64
 8007904:	d902      	bls.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	75fb      	strb	r3, [r7, #23]
        break;
 800790a:	e005      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800790c:	4b74      	ldr	r3, [pc, #464]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007914:	2b00      	cmp	r3, #0
 8007916:	d0ef      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d166      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800791e:	4b6f      	ldr	r3, [pc, #444]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007920:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007928:	4053      	eors	r3, r2
 800792a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800792e:	2b00      	cmp	r3, #0
 8007930:	d013      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007932:	4b6a      	ldr	r3, [pc, #424]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800793a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800793c:	4b67      	ldr	r3, [pc, #412]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800793e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007940:	4a66      	ldr	r2, [pc, #408]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007946:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007948:	4b64      	ldr	r3, [pc, #400]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800794a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794c:	4a63      	ldr	r2, [pc, #396]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800794e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007952:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007954:	4a61      	ldr	r2, [pc, #388]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007964:	d115      	bne.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007966:	f7fa f987 	bl	8001c78 <HAL_GetTick>
 800796a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800796c:	e00b      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800796e:	f7fa f983 	bl	8001c78 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	f241 3288 	movw	r2, #5000	; 0x1388
 800797c:	4293      	cmp	r3, r2
 800797e:	d902      	bls.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	75fb      	strb	r3, [r7, #23]
            break;
 8007984:	e005      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007986:	4b55      	ldr	r3, [pc, #340]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0ed      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d126      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800799e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079a6:	d10d      	bne.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80079a8:	4b4c      	ldr	r3, [pc, #304]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079b6:	0919      	lsrs	r1, r3, #4
 80079b8:	4b4a      	ldr	r3, [pc, #296]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80079ba:	400b      	ands	r3, r1
 80079bc:	4947      	ldr	r1, [pc, #284]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	610b      	str	r3, [r1, #16]
 80079c2:	e005      	b.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80079c4:	4b45      	ldr	r3, [pc, #276]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	4a44      	ldr	r2, [pc, #272]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80079ce:	6113      	str	r3, [r2, #16]
 80079d0:	4b42      	ldr	r3, [pc, #264]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079de:	493f      	ldr	r1, [pc, #252]	; (8007adc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079e0:	4313      	orrs	r3, r2
 80079e2:	670b      	str	r3, [r1, #112]	; 0x70
 80079e4:	e004      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
 80079e8:	75bb      	strb	r3, [r7, #22]
 80079ea:	e001      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ec:	7dfb      	ldrb	r3, [r7, #23]
 80079ee:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 8085 	beq.w	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a02:	2b28      	cmp	r3, #40	; 0x28
 8007a04:	d866      	bhi.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007ae9 	.word	0x08007ae9
 8007a10:	08007ad5 	.word	0x08007ad5
 8007a14:	08007ad5 	.word	0x08007ad5
 8007a18:	08007ad5 	.word	0x08007ad5
 8007a1c:	08007ad5 	.word	0x08007ad5
 8007a20:	08007ad5 	.word	0x08007ad5
 8007a24:	08007ad5 	.word	0x08007ad5
 8007a28:	08007ad5 	.word	0x08007ad5
 8007a2c:	08007ab1 	.word	0x08007ab1
 8007a30:	08007ad5 	.word	0x08007ad5
 8007a34:	08007ad5 	.word	0x08007ad5
 8007a38:	08007ad5 	.word	0x08007ad5
 8007a3c:	08007ad5 	.word	0x08007ad5
 8007a40:	08007ad5 	.word	0x08007ad5
 8007a44:	08007ad5 	.word	0x08007ad5
 8007a48:	08007ad5 	.word	0x08007ad5
 8007a4c:	08007ac3 	.word	0x08007ac3
 8007a50:	08007ad5 	.word	0x08007ad5
 8007a54:	08007ad5 	.word	0x08007ad5
 8007a58:	08007ad5 	.word	0x08007ad5
 8007a5c:	08007ad5 	.word	0x08007ad5
 8007a60:	08007ad5 	.word	0x08007ad5
 8007a64:	08007ad5 	.word	0x08007ad5
 8007a68:	08007ad5 	.word	0x08007ad5
 8007a6c:	08007ae9 	.word	0x08007ae9
 8007a70:	08007ad5 	.word	0x08007ad5
 8007a74:	08007ad5 	.word	0x08007ad5
 8007a78:	08007ad5 	.word	0x08007ad5
 8007a7c:	08007ad5 	.word	0x08007ad5
 8007a80:	08007ad5 	.word	0x08007ad5
 8007a84:	08007ad5 	.word	0x08007ad5
 8007a88:	08007ad5 	.word	0x08007ad5
 8007a8c:	08007ae9 	.word	0x08007ae9
 8007a90:	08007ad5 	.word	0x08007ad5
 8007a94:	08007ad5 	.word	0x08007ad5
 8007a98:	08007ad5 	.word	0x08007ad5
 8007a9c:	08007ad5 	.word	0x08007ad5
 8007aa0:	08007ad5 	.word	0x08007ad5
 8007aa4:	08007ad5 	.word	0x08007ad5
 8007aa8:	08007ad5 	.word	0x08007ad5
 8007aac:	08007ae9 	.word	0x08007ae9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3304      	adds	r3, #4
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f001 fc1e 	bl	80092f8 <RCCEx_PLL2_Config>
 8007abc:	4603      	mov	r3, r0
 8007abe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007ac0:	e013      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3324      	adds	r3, #36	; 0x24
 8007ac6:	2101      	movs	r1, #1
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f001 fcc7 	bl	800945c <RCCEx_PLL3_Config>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007ad2:	e00a      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ad8:	e007      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007ada:	bf00      	nop
 8007adc:	58024400 	.word	0x58024400
 8007ae0:	58024800 	.word	0x58024800
 8007ae4:	00ffffcf 	.word	0x00ffffcf
      break;
 8007ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d109      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007af0:	4b96      	ldr	r3, [pc, #600]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007afc:	4993      	ldr	r1, [pc, #588]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	654b      	str	r3, [r1, #84]	; 0x54
 8007b02:	e001      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b04:	7dfb      	ldrb	r3, [r7, #23]
 8007b06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0302 	and.w	r3, r3, #2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d038      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b18:	2b05      	cmp	r3, #5
 8007b1a:	d821      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007b1c:	a201      	add	r2, pc, #4	; (adr r2, 8007b24 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b22:	bf00      	nop
 8007b24:	08007b67 	.word	0x08007b67
 8007b28:	08007b3d 	.word	0x08007b3d
 8007b2c:	08007b4f 	.word	0x08007b4f
 8007b30:	08007b67 	.word	0x08007b67
 8007b34:	08007b67 	.word	0x08007b67
 8007b38:	08007b67 	.word	0x08007b67
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	2101      	movs	r1, #1
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 fbd8 	bl	80092f8 <RCCEx_PLL2_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007b4c:	e00c      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	3324      	adds	r3, #36	; 0x24
 8007b52:	2101      	movs	r1, #1
 8007b54:	4618      	mov	r0, r3
 8007b56:	f001 fc81 	bl	800945c <RCCEx_PLL3_Config>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007b5e:	e003      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	75fb      	strb	r3, [r7, #23]
      break;
 8007b64:	e000      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d109      	bne.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007b6e:	4b77      	ldr	r3, [pc, #476]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b72:	f023 0207 	bic.w	r2, r3, #7
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b7a:	4974      	ldr	r1, [pc, #464]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	654b      	str	r3, [r1, #84]	; 0x54
 8007b80:	e001      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
 8007b84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d03a      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b98:	2b05      	cmp	r3, #5
 8007b9a:	d821      	bhi.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007b9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba2:	bf00      	nop
 8007ba4:	08007be7 	.word	0x08007be7
 8007ba8:	08007bbd 	.word	0x08007bbd
 8007bac:	08007bcf 	.word	0x08007bcf
 8007bb0:	08007be7 	.word	0x08007be7
 8007bb4:	08007be7 	.word	0x08007be7
 8007bb8:	08007be7 	.word	0x08007be7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f001 fb98 	bl	80092f8 <RCCEx_PLL2_Config>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007bcc:	e00c      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3324      	adds	r3, #36	; 0x24
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f001 fc41 	bl	800945c <RCCEx_PLL3_Config>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007bde:	e003      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	75fb      	strb	r3, [r7, #23]
      break;
 8007be4:	e000      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10a      	bne.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bee:	4b57      	ldr	r3, [pc, #348]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf2:	f023 0207 	bic.w	r2, r3, #7
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfc:	4953      	ldr	r1, [pc, #332]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	658b      	str	r3, [r1, #88]	; 0x58
 8007c02:	e001      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d04b      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c1e:	d02e      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c24:	d828      	bhi.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c2a:	d02a      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c30:	d822      	bhi.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007c32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c36:	d026      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007c38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c3c:	d81c      	bhi.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c42:	d010      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c48:	d816      	bhi.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d01d      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c52:	d111      	bne.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3304      	adds	r3, #4
 8007c58:	2100      	movs	r1, #0
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f001 fb4c 	bl	80092f8 <RCCEx_PLL2_Config>
 8007c60:	4603      	mov	r3, r0
 8007c62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007c64:	e012      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	3324      	adds	r3, #36	; 0x24
 8007c6a:	2102      	movs	r1, #2
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f001 fbf5 	bl	800945c <RCCEx_PLL3_Config>
 8007c72:	4603      	mov	r3, r0
 8007c74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007c76:	e009      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c7c:	e006      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007c7e:	bf00      	nop
 8007c80:	e004      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007c82:	bf00      	nop
 8007c84:	e002      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007c86:	bf00      	nop
 8007c88:	e000      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10a      	bne.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c92:	4b2e      	ldr	r3, [pc, #184]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ca0:	492a      	ldr	r1, [pc, #168]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	654b      	str	r3, [r1, #84]	; 0x54
 8007ca6:	e001      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
 8007caa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d04d      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cbe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007cc2:	d02e      	beq.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007cc4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007cc8:	d828      	bhi.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cce:	d02a      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cd4:	d822      	bhi.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007cd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cda:	d026      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007cdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ce0:	d81c      	bhi.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ce6:	d010      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cec:	d816      	bhi.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d01d      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cf6:	d111      	bne.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f001 fafa 	bl	80092f8 <RCCEx_PLL2_Config>
 8007d04:	4603      	mov	r3, r0
 8007d06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007d08:	e012      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	3324      	adds	r3, #36	; 0x24
 8007d0e:	2102      	movs	r1, #2
 8007d10:	4618      	mov	r0, r3
 8007d12:	f001 fba3 	bl	800945c <RCCEx_PLL3_Config>
 8007d16:	4603      	mov	r3, r0
 8007d18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007d1a:	e009      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d20:	e006      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007d22:	bf00      	nop
 8007d24:	e004      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007d26:	bf00      	nop
 8007d28:	e002      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007d2a:	bf00      	nop
 8007d2c:	e000      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d30:	7dfb      	ldrb	r3, [r7, #23]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10c      	bne.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d36:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d3a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d44:	4901      	ldr	r1, [pc, #4]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	658b      	str	r3, [r1, #88]	; 0x58
 8007d4a:	e003      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007d4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
 8007d52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d04b      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d66:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007d6a:	d02e      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007d6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007d70:	d828      	bhi.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d76:	d02a      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d7c:	d822      	bhi.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007d7e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007d82:	d026      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007d84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007d88:	d81c      	bhi.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007d8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d8e:	d010      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d94:	d816      	bhi.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d01d      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d9e:	d111      	bne.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3304      	adds	r3, #4
 8007da4:	2100      	movs	r1, #0
 8007da6:	4618      	mov	r0, r3
 8007da8:	f001 faa6 	bl	80092f8 <RCCEx_PLL2_Config>
 8007dac:	4603      	mov	r3, r0
 8007dae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007db0:	e012      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	3324      	adds	r3, #36	; 0x24
 8007db6:	2102      	movs	r1, #2
 8007db8:	4618      	mov	r0, r3
 8007dba:	f001 fb4f 	bl	800945c <RCCEx_PLL3_Config>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007dc2:	e009      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8007dc8:	e006      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007dca:	bf00      	nop
 8007dcc:	e004      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007dce:	bf00      	nop
 8007dd0:	e002      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007dd2:	bf00      	nop
 8007dd4:	e000      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10a      	bne.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007dde:	4b9d      	ldr	r3, [pc, #628]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dec:	4999      	ldr	r1, [pc, #612]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	658b      	str	r3, [r1, #88]	; 0x58
 8007df2:	e001      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
 8007df6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0308 	and.w	r3, r3, #8
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d01a      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e0e:	d10a      	bne.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3324      	adds	r3, #36	; 0x24
 8007e14:	2102      	movs	r1, #2
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fb20 	bl	800945c <RCCEx_PLL3_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007e26:	4b8b      	ldr	r3, [pc, #556]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e34:	4987      	ldr	r1, [pc, #540]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0310 	and.w	r3, r3, #16
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d01a      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e50:	d10a      	bne.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	3324      	adds	r3, #36	; 0x24
 8007e56:	2102      	movs	r1, #2
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f001 faff 	bl	800945c <RCCEx_PLL3_Config>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e68:	4b7a      	ldr	r3, [pc, #488]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e76:	4977      	ldr	r1, [pc, #476]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d034      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e92:	d01d      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e98:	d817      	bhi.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d003      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ea2:	d009      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007ea4:	e011      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	2100      	movs	r1, #0
 8007eac:	4618      	mov	r0, r3
 8007eae:	f001 fa23 	bl	80092f8 <RCCEx_PLL2_Config>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007eb6:	e00c      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3324      	adds	r3, #36	; 0x24
 8007ebc:	2102      	movs	r1, #2
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f001 facc 	bl	800945c <RCCEx_PLL3_Config>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007ec8:	e003      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8007ece:	e000      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10a      	bne.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ed8:	4b5e      	ldr	r3, [pc, #376]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007edc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ee6:	495b      	ldr	r1, [pc, #364]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	658b      	str	r3, [r1, #88]	; 0x58
 8007eec:	e001      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
 8007ef0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d033      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f08:	d01c      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8007f0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f0e:	d816      	bhi.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f14:	d003      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007f16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f1a:	d007      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007f1c:	e00f      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f1e:	4b4d      	ldr	r3, [pc, #308]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f22:	4a4c      	ldr	r2, [pc, #304]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007f2a:	e00c      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3324      	adds	r3, #36	; 0x24
 8007f30:	2101      	movs	r1, #1
 8007f32:	4618      	mov	r0, r3
 8007f34:	f001 fa92 	bl	800945c <RCCEx_PLL3_Config>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007f3c:	e003      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	75fb      	strb	r3, [r7, #23]
      break;
 8007f42:	e000      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10a      	bne.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f4c:	4b41      	ldr	r3, [pc, #260]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f5a:	493e      	ldr	r1, [pc, #248]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	654b      	str	r3, [r1, #84]	; 0x54
 8007f60:	e001      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f62:	7dfb      	ldrb	r3, [r7, #23]
 8007f64:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d029      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f7e:	d007      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007f80:	e00f      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f82:	4b34      	ldr	r3, [pc, #208]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f86:	4a33      	ldr	r2, [pc, #204]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007f8e:	e00b      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3304      	adds	r3, #4
 8007f94:	2102      	movs	r1, #2
 8007f96:	4618      	mov	r0, r3
 8007f98:	f001 f9ae 	bl	80092f8 <RCCEx_PLL2_Config>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007fa0:	e002      	b.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d109      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007fae:	4b29      	ldr	r3, [pc, #164]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fba:	4926      	ldr	r1, [pc, #152]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007fc0:	e001      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
 8007fc4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00a      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3324      	adds	r3, #36	; 0x24
 8007fd6:	2102      	movs	r1, #2
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f001 fa3f 	bl	800945c <RCCEx_PLL3_Config>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d033      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ffc:	d017      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008002:	d811      	bhi.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008008:	d013      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800800a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800800e:	d80b      	bhi.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008010:	2b00      	cmp	r3, #0
 8008012:	d010      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008018:	d106      	bne.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800801a:	4b0e      	ldr	r3, [pc, #56]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	4a0d      	ldr	r2, [pc, #52]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008024:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008026:	e007      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	75fb      	strb	r3, [r7, #23]
      break;
 800802c:	e004      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800802e:	bf00      	nop
 8008030:	e002      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008032:	bf00      	nop
 8008034:	e000      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008038:	7dfb      	ldrb	r3, [r7, #23]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10c      	bne.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800803e:	4b05      	ldr	r3, [pc, #20]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008042:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800804a:	4902      	ldr	r1, [pc, #8]	; (8008054 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800804c:	4313      	orrs	r3, r2
 800804e:	654b      	str	r3, [r1, #84]	; 0x54
 8008050:	e004      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8008052:	bf00      	nop
 8008054:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008058:	7dfb      	ldrb	r3, [r7, #23]
 800805a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d008      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008068:	4b31      	ldr	r3, [pc, #196]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800806a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800806c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008074:	492e      	ldr	r1, [pc, #184]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008076:	4313      	orrs	r3, r2
 8008078:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d009      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008086:	4b2a      	ldr	r3, [pc, #168]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008094:	4926      	ldr	r1, [pc, #152]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008096:	4313      	orrs	r3, r2
 8008098:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d008      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80080a6:	4b22      	ldr	r3, [pc, #136]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080b2:	491f      	ldr	r1, [pc, #124]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00d      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080c4:	4b1a      	ldr	r3, [pc, #104]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	4a19      	ldr	r2, [pc, #100]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080ce:	6113      	str	r3, [r2, #16]
 80080d0:	4b17      	ldr	r3, [pc, #92]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080d2:	691a      	ldr	r2, [r3, #16]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80080da:	4915      	ldr	r1, [pc, #84]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	da08      	bge.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80080e8:	4b11      	ldr	r3, [pc, #68]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f4:	490e      	ldr	r1, [pc, #56]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d009      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008106:	4b0a      	ldr	r3, [pc, #40]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008114:	4906      	ldr	r1, [pc, #24]	; (8008130 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008116:	4313      	orrs	r3, r2
 8008118:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800811a:	7dbb      	ldrb	r3, [r7, #22]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d101      	bne.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	e000      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
}
 8008126:	4618      	mov	r0, r3
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	58024400 	.word	0x58024400

08008134 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b090      	sub	sp, #64	; 0x40
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008142:	f040 8095 	bne.w	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008146:	4b97      	ldr	r3, [pc, #604]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800814a:	f003 0307 	and.w	r3, r3, #7
 800814e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	2b04      	cmp	r3, #4
 8008154:	f200 8088 	bhi.w	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008158:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800815a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815e:	bf00      	nop
 8008160:	08008175 	.word	0x08008175
 8008164:	0800819d 	.word	0x0800819d
 8008168:	080081c5 	.word	0x080081c5
 800816c:	08008261 	.word	0x08008261
 8008170:	080081ed 	.word	0x080081ed
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008174:	4b8b      	ldr	r3, [pc, #556]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800817c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008180:	d108      	bne.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008186:	4618      	mov	r0, r3
 8008188:	f000 ff64 	bl	8009054 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800818c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008190:	f000 bc94 	b.w	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008194:	2300      	movs	r3, #0
 8008196:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008198:	f000 bc90 	b.w	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800819c:	4b81      	ldr	r3, [pc, #516]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081a8:	d108      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081aa:	f107 0318 	add.w	r3, r7, #24
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 fca8 	bl	8008b04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80081b8:	f000 bc80 	b.w	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081c0:	f000 bc7c 	b.w	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081c4:	4b77      	ldr	r3, [pc, #476]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d0:	d108      	bne.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081d2:	f107 030c 	add.w	r3, r7, #12
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 fde8 	bl	8008dac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80081e0:	f000 bc6c 	b.w	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80081e4:	2300      	movs	r3, #0
 80081e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081e8:	f000 bc68 	b.w	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80081ec:	4b6d      	ldr	r3, [pc, #436]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80081ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081f4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80081f6:	4b6b      	ldr	r3, [pc, #428]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0304 	and.w	r3, r3, #4
 80081fe:	2b04      	cmp	r3, #4
 8008200:	d10c      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008204:	2b00      	cmp	r3, #0
 8008206:	d109      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008208:	4b66      	ldr	r3, [pc, #408]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	08db      	lsrs	r3, r3, #3
 800820e:	f003 0303 	and.w	r3, r3, #3
 8008212:	4a65      	ldr	r2, [pc, #404]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008214:	fa22 f303 	lsr.w	r3, r2, r3
 8008218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800821a:	e01f      	b.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800821c:	4b61      	ldr	r3, [pc, #388]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008228:	d106      	bne.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800822a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800822c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008230:	d102      	bne.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008232:	4b5e      	ldr	r3, [pc, #376]	; (80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008236:	e011      	b.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008238:	4b5a      	ldr	r3, [pc, #360]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008240:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008244:	d106      	bne.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800824c:	d102      	bne.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800824e:	4b58      	ldr	r3, [pc, #352]	; (80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008250:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008252:	e003      	b.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008254:	2300      	movs	r3, #0
 8008256:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008258:	f000 bc30 	b.w	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800825c:	f000 bc2e 	b.w	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008260:	4b54      	ldr	r3, [pc, #336]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008262:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008264:	f000 bc2a 	b.w	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008268:	2300      	movs	r3, #0
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800826c:	f000 bc26 	b.w	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008276:	f040 809f 	bne.w	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800827a:	4b4a      	ldr	r3, [pc, #296]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800827c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800827e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008282:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800828a:	d04d      	beq.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800828c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008292:	f200 8084 	bhi.w	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008298:	2bc0      	cmp	r3, #192	; 0xc0
 800829a:	d07d      	beq.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800829c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829e:	2bc0      	cmp	r3, #192	; 0xc0
 80082a0:	d87d      	bhi.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	2b80      	cmp	r3, #128	; 0x80
 80082a6:	d02d      	beq.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	2b80      	cmp	r3, #128	; 0x80
 80082ac:	d877      	bhi.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	2b40      	cmp	r3, #64	; 0x40
 80082b8:	d012      	beq.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80082ba:	e070      	b.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082bc:	4b39      	ldr	r3, [pc, #228]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082c8:	d107      	bne.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 fec0 	bl	8009054 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80082d8:	e3f0      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80082da:	2300      	movs	r3, #0
 80082dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082de:	e3ed      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082e0:	4b30      	ldr	r3, [pc, #192]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082ec:	d107      	bne.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082ee:	f107 0318 	add.w	r3, r7, #24
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 fc06 	bl	8008b04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80082fc:	e3de      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80082fe:	2300      	movs	r3, #0
 8008300:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008302:	e3db      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008304:	4b27      	ldr	r3, [pc, #156]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800830c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008310:	d107      	bne.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008312:	f107 030c 	add.w	r3, r7, #12
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fd48 	bl	8008dac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008320:	e3cc      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008326:	e3c9      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008328:	4b1e      	ldr	r3, [pc, #120]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800832a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800832c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008330:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008332:	4b1c      	ldr	r3, [pc, #112]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0304 	and.w	r3, r3, #4
 800833a:	2b04      	cmp	r3, #4
 800833c:	d10c      	bne.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800833e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008340:	2b00      	cmp	r3, #0
 8008342:	d109      	bne.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008344:	4b17      	ldr	r3, [pc, #92]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	08db      	lsrs	r3, r3, #3
 800834a:	f003 0303 	and.w	r3, r3, #3
 800834e:	4a16      	ldr	r2, [pc, #88]	; (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008350:	fa22 f303 	lsr.w	r3, r2, r3
 8008354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008356:	e01e      	b.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008358:	4b12      	ldr	r3, [pc, #72]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008364:	d106      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008368:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800836c:	d102      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800836e:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008372:	e010      	b.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008374:	4b0b      	ldr	r3, [pc, #44]	; (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800837c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008380:	d106      	bne.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008388:	d102      	bne.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800838a:	4b09      	ldr	r3, [pc, #36]	; (80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800838c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800838e:	e002      	b.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008394:	e392      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008396:	e391      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008398:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800839a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800839c:	e38e      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083a2:	e38b      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80083a4:	58024400 	.word	0x58024400
 80083a8:	03d09000 	.word	0x03d09000
 80083ac:	003d0900 	.word	0x003d0900
 80083b0:	017d7840 	.word	0x017d7840
 80083b4:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083be:	f040 809c 	bne.w	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80083c2:	4b9d      	ldr	r3, [pc, #628]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80083c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80083ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80083cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083d2:	d054      	beq.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80083d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083da:	f200 808b 	bhi.w	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083e4:	f000 8083 	beq.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083ee:	f200 8081 	bhi.w	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083f8:	d02f      	beq.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008400:	d878      	bhi.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	2b00      	cmp	r3, #0
 8008406:	d004      	beq.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800840e:	d012      	beq.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008410:	e070      	b.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008412:	4b89      	ldr	r3, [pc, #548]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800841a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800841e:	d107      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fe15 	bl	8009054 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800842e:	e345      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008430:	2300      	movs	r3, #0
 8008432:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008434:	e342      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008436:	4b80      	ldr	r3, [pc, #512]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800843e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008442:	d107      	bne.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008444:	f107 0318 	add.w	r3, r7, #24
 8008448:	4618      	mov	r0, r3
 800844a:	f000 fb5b 	bl	8008b04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008452:	e333      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008458:	e330      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800845a:	4b77      	ldr	r3, [pc, #476]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008466:	d107      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008468:	f107 030c 	add.w	r3, r7, #12
 800846c:	4618      	mov	r0, r3
 800846e:	f000 fc9d 	bl	8008dac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008476:	e321      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008478:	2300      	movs	r3, #0
 800847a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800847c:	e31e      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800847e:	4b6e      	ldr	r3, [pc, #440]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008482:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008486:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008488:	4b6b      	ldr	r3, [pc, #428]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0304 	and.w	r3, r3, #4
 8008490:	2b04      	cmp	r3, #4
 8008492:	d10c      	bne.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008496:	2b00      	cmp	r3, #0
 8008498:	d109      	bne.n	80084ae <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800849a:	4b67      	ldr	r3, [pc, #412]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	08db      	lsrs	r3, r3, #3
 80084a0:	f003 0303 	and.w	r3, r3, #3
 80084a4:	4a65      	ldr	r2, [pc, #404]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80084a6:	fa22 f303 	lsr.w	r3, r2, r3
 80084aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084ac:	e01e      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084ae:	4b62      	ldr	r3, [pc, #392]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ba:	d106      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80084bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084c2:	d102      	bne.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80084c4:	4b5e      	ldr	r3, [pc, #376]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80084c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084c8:	e010      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084ca:	4b5b      	ldr	r3, [pc, #364]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084d6:	d106      	bne.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80084d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084de:	d102      	bne.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80084e0:	4b58      	ldr	r3, [pc, #352]	; (8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80084e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084e4:	e002      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80084ea:	e2e7      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80084ec:	e2e6      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80084ee:	4b56      	ldr	r3, [pc, #344]	; (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80084f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084f2:	e2e3      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084f8:	e2e0      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008500:	f040 80a7 	bne.w	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008504:	4b4c      	ldr	r3, [pc, #304]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008508:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800850c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008514:	d055      	beq.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008518:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800851c:	f200 8096 	bhi.w	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008522:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008526:	f000 8084 	beq.w	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008530:	f200 808c 	bhi.w	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008536:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800853a:	d030      	beq.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800853c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008542:	f200 8083 	bhi.w	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	2b00      	cmp	r3, #0
 800854a:	d004      	beq.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008552:	d012      	beq.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008554:	e07a      	b.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008556:	4b38      	ldr	r3, [pc, #224]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800855e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008562:	d107      	bne.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008568:	4618      	mov	r0, r3
 800856a:	f000 fd73 	bl	8009054 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800856e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008570:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008572:	e2a3      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008574:	2300      	movs	r3, #0
 8008576:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008578:	e2a0      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800857a:	4b2f      	ldr	r3, [pc, #188]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008582:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008586:	d107      	bne.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008588:	f107 0318 	add.w	r3, r7, #24
 800858c:	4618      	mov	r0, r3
 800858e:	f000 fab9 	bl	8008b04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008596:	e291      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008598:	2300      	movs	r3, #0
 800859a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800859c:	e28e      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800859e:	4b26      	ldr	r3, [pc, #152]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085aa:	d107      	bne.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ac:	f107 030c 	add.w	r3, r7, #12
 80085b0:	4618      	mov	r0, r3
 80085b2:	f000 fbfb 	bl	8008dac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085ba:	e27f      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085c0:	e27c      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80085c2:	4b1d      	ldr	r3, [pc, #116]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80085c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085ca:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085cc:	4b1a      	ldr	r3, [pc, #104]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0304 	and.w	r3, r3, #4
 80085d4:	2b04      	cmp	r3, #4
 80085d6:	d10c      	bne.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80085d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d109      	bne.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085de:	4b16      	ldr	r3, [pc, #88]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	08db      	lsrs	r3, r3, #3
 80085e4:	f003 0303 	and.w	r3, r3, #3
 80085e8:	4a14      	ldr	r2, [pc, #80]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80085ea:	fa22 f303 	lsr.w	r3, r2, r3
 80085ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085f0:	e01e      	b.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085f2:	4b11      	ldr	r3, [pc, #68]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085fe:	d106      	bne.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008606:	d102      	bne.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008608:	4b0d      	ldr	r3, [pc, #52]	; (8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800860a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800860c:	e010      	b.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800860e:	4b0a      	ldr	r3, [pc, #40]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800861a:	d106      	bne.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800861c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008622:	d102      	bne.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008624:	4b07      	ldr	r3, [pc, #28]	; (8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8008626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008628:	e002      	b.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800862a:	2300      	movs	r3, #0
 800862c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800862e:	e245      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008630:	e244      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008632:	4b05      	ldr	r3, [pc, #20]	; (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008636:	e241      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008638:	58024400 	.word	0x58024400
 800863c:	03d09000 	.word	0x03d09000
 8008640:	003d0900 	.word	0x003d0900
 8008644:	017d7840 	.word	0x017d7840
 8008648:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800864c:	2300      	movs	r3, #0
 800864e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008650:	e234      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008658:	f040 809c 	bne.w	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800865c:	4b9b      	ldr	r3, [pc, #620]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800865e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008660:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008664:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800866c:	d054      	beq.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800866e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008674:	f200 808b 	bhi.w	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8008678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800867e:	f000 8083 	beq.w	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008688:	f200 8081 	bhi.w	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008692:	d02f      	beq.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8008694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800869a:	d878      	bhi.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800869c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d004      	beq.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80086a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a8:	d012      	beq.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80086aa:	e070      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086ac:	4b87      	ldr	r3, [pc, #540]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086b8:	d107      	bne.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 fcc8 	bl	8009054 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086c8:	e1f8      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086ce:	e1f5      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086d0:	4b7e      	ldr	r3, [pc, #504]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086dc:	d107      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086de:	f107 0318 	add.w	r3, r7, #24
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 fa0e 	bl	8008b04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80086ec:	e1e6      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086f2:	e1e3      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086f4:	4b75      	ldr	r3, [pc, #468]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008700:	d107      	bne.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008702:	f107 030c 	add.w	r3, r7, #12
 8008706:	4618      	mov	r0, r3
 8008708:	f000 fb50 	bl	8008dac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008710:	e1d4      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008716:	e1d1      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008718:	4b6c      	ldr	r3, [pc, #432]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800871a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800871c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008720:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008722:	4b6a      	ldr	r3, [pc, #424]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0304 	and.w	r3, r3, #4
 800872a:	2b04      	cmp	r3, #4
 800872c:	d10c      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800872e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008730:	2b00      	cmp	r3, #0
 8008732:	d109      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008734:	4b65      	ldr	r3, [pc, #404]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	08db      	lsrs	r3, r3, #3
 800873a:	f003 0303 	and.w	r3, r3, #3
 800873e:	4a64      	ldr	r2, [pc, #400]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8008740:	fa22 f303 	lsr.w	r3, r2, r3
 8008744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008746:	e01e      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008748:	4b60      	ldr	r3, [pc, #384]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008754:	d106      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8008756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008758:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800875c:	d102      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800875e:	4b5d      	ldr	r3, [pc, #372]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008762:	e010      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008764:	4b59      	ldr	r3, [pc, #356]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800876c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008770:	d106      	bne.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008778:	d102      	bne.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800877a:	4b57      	ldr	r3, [pc, #348]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800877c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800877e:	e002      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008780:	2300      	movs	r3, #0
 8008782:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008784:	e19a      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008786:	e199      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008788:	4b54      	ldr	r3, [pc, #336]	; (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800878a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800878c:	e196      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008792:	e193      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800879a:	d173      	bne.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800879c:	4b4b      	ldr	r3, [pc, #300]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800879e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087a4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80087a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087ac:	d02f      	beq.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80087ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087b4:	d863      	bhi.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 80087b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d004      	beq.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80087bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087c2:	d012      	beq.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80087c4:	e05b      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087c6:	4b41      	ldr	r3, [pc, #260]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087d2:	d107      	bne.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087d4:	f107 0318 	add.w	r3, r7, #24
 80087d8:	4618      	mov	r0, r3
 80087da:	f000 f993 	bl	8008b04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80087e2:	e16b      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087e8:	e168      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087ea:	4b38      	ldr	r3, [pc, #224]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087f6:	d107      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087f8:	f107 030c 	add.w	r3, r7, #12
 80087fc:	4618      	mov	r0, r3
 80087fe:	f000 fad5 	bl	8008dac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008806:	e159      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800880c:	e156      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800880e:	4b2f      	ldr	r3, [pc, #188]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008812:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008816:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008818:	4b2c      	ldr	r3, [pc, #176]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0304 	and.w	r3, r3, #4
 8008820:	2b04      	cmp	r3, #4
 8008822:	d10c      	bne.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8008824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008826:	2b00      	cmp	r3, #0
 8008828:	d109      	bne.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800882a:	4b28      	ldr	r3, [pc, #160]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	08db      	lsrs	r3, r3, #3
 8008830:	f003 0303 	and.w	r3, r3, #3
 8008834:	4a26      	ldr	r2, [pc, #152]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8008836:	fa22 f303 	lsr.w	r3, r2, r3
 800883a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800883c:	e01e      	b.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800883e:	4b23      	ldr	r3, [pc, #140]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800884a:	d106      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800884c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008852:	d102      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008854:	4b1f      	ldr	r3, [pc, #124]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8008856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008858:	e010      	b.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800885a:	4b1c      	ldr	r3, [pc, #112]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008862:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008866:	d106      	bne.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8008868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800886a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800886e:	d102      	bne.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008870:	4b19      	ldr	r3, [pc, #100]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8008872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008874:	e002      	b.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008876:	2300      	movs	r3, #0
 8008878:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800887a:	e11f      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800887c:	e11e      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008882:	e11b      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800888a:	d13e      	bne.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800888c:	4b0f      	ldr	r3, [pc, #60]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800888e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008894:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008898:	2b00      	cmp	r3, #0
 800889a:	d004      	beq.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800889c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088a2:	d01d      	beq.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80088a4:	e02e      	b.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088a6:	4b09      	ldr	r3, [pc, #36]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088b2:	d107      	bne.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088b8:	4618      	mov	r0, r3
 80088ba:	f000 fbcb 	bl	8009054 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80088c2:	e0fb      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088c8:	e0f8      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80088ca:	bf00      	nop
 80088cc:	58024400 	.word	0x58024400
 80088d0:	03d09000 	.word	0x03d09000
 80088d4:	003d0900 	.word	0x003d0900
 80088d8:	017d7840 	.word	0x017d7840
 80088dc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088e0:	4b79      	ldr	r3, [pc, #484]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088ec:	d107      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ee:	f107 0318 	add.w	r3, r7, #24
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 f906 	bl	8008b04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80088f8:	6a3b      	ldr	r3, [r7, #32]
 80088fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80088fc:	e0de      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008902:	e0db      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8008904:	2300      	movs	r3, #0
 8008906:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008908:	e0d8      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008910:	f040 8085 	bne.w	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008914:	4b6c      	ldr	r3, [pc, #432]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008918:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800891c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800891e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008924:	d06b      	beq.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8008926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800892c:	d874      	bhi.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800892e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008934:	d056      	beq.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8008936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800893c:	d86c      	bhi.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800893e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008940:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008944:	d03b      	beq.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8008946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008948:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800894c:	d864      	bhi.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800894e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008954:	d021      	beq.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8008956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800895c:	d85c      	bhi.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800895e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008960:	2b00      	cmp	r3, #0
 8008962:	d004      	beq.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800896a:	d004      	beq.n	8008976 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800896c:	e054      	b.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800896e:	f000 f8b3 	bl	8008ad8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008972:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008974:	e0a2      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008976:	4b54      	ldr	r3, [pc, #336]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800897e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008982:	d107      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008984:	f107 0318 	add.w	r3, r7, #24
 8008988:	4618      	mov	r0, r3
 800898a:	f000 f8bb 	bl	8008b04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008992:	e093      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008994:	2300      	movs	r3, #0
 8008996:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008998:	e090      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800899a:	4b4b      	ldr	r3, [pc, #300]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089a6:	d107      	bne.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089a8:	f107 030c 	add.w	r3, r7, #12
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 f9fd 	bl	8008dac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80089b6:	e081      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80089b8:	2300      	movs	r3, #0
 80089ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089bc:	e07e      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80089be:	4b42      	ldr	r3, [pc, #264]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 0304 	and.w	r3, r3, #4
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d109      	bne.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089ca:	4b3f      	ldr	r3, [pc, #252]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	08db      	lsrs	r3, r3, #3
 80089d0:	f003 0303 	and.w	r3, r3, #3
 80089d4:	4a3d      	ldr	r2, [pc, #244]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80089d6:	fa22 f303 	lsr.w	r3, r2, r3
 80089da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80089dc:	e06e      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089e2:	e06b      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80089e4:	4b38      	ldr	r3, [pc, #224]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089f0:	d102      	bne.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 80089f2:	4b37      	ldr	r3, [pc, #220]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80089f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089f6:	e061      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089fc:	e05e      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80089fe:	4b32      	ldr	r3, [pc, #200]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a0a:	d102      	bne.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8008a0c:	4b31      	ldr	r3, [pc, #196]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a10:	e054      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008a12:	2300      	movs	r3, #0
 8008a14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a16:	e051      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a1c:	e04e      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a24:	d148      	bne.n	8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008a26:	4b28      	ldr	r3, [pc, #160]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a2e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a36:	d02a      	beq.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8008a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a3e:	d838      	bhi.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8008a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d004      	beq.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8008a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a4c:	d00d      	beq.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8008a4e:	e030      	b.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a50:	4b1d      	ldr	r3, [pc, #116]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a5c:	d102      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8008a5e:	4b1d      	ldr	r3, [pc, #116]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008a60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a62:	e02b      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008a64:	2300      	movs	r3, #0
 8008a66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a68:	e028      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a6a:	4b17      	ldr	r3, [pc, #92]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a76:	d107      	bne.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f000 fae9 	bl	8009054 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a86:	e019      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a8c:	e016      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a8e:	4b0e      	ldr	r3, [pc, #56]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a9a:	d107      	bne.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a9c:	f107 0318 	add.w	r3, r7, #24
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 f82f 	bl	8008b04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008aaa:	e007      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ab0:	e004      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ab6:	e001      	b.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3740      	adds	r7, #64	; 0x40
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	58024400 	.word	0x58024400
 8008acc:	03d09000 	.word	0x03d09000
 8008ad0:	003d0900 	.word	0x003d0900
 8008ad4:	017d7840 	.word	0x017d7840

08008ad8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008adc:	f7fe fb46 	bl	800716c <HAL_RCC_GetHCLKFreq>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	4b06      	ldr	r3, [pc, #24]	; (8008afc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	091b      	lsrs	r3, r3, #4
 8008ae8:	f003 0307 	and.w	r3, r3, #7
 8008aec:	4904      	ldr	r1, [pc, #16]	; (8008b00 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008aee:	5ccb      	ldrb	r3, [r1, r3]
 8008af0:	f003 031f 	and.w	r3, r3, #31
 8008af4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	58024400 	.word	0x58024400
 8008b00:	08022b20 	.word	0x08022b20

08008b04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b089      	sub	sp, #36	; 0x24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b0c:	4ba1      	ldr	r3, [pc, #644]	; (8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b10:	f003 0303 	and.w	r3, r3, #3
 8008b14:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008b16:	4b9f      	ldr	r3, [pc, #636]	; (8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1a:	0b1b      	lsrs	r3, r3, #12
 8008b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b20:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008b22:	4b9c      	ldr	r3, [pc, #624]	; (8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b26:	091b      	lsrs	r3, r3, #4
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008b2e:	4b99      	ldr	r3, [pc, #612]	; (8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b32:	08db      	lsrs	r3, r3, #3
 8008b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	fb02 f303 	mul.w	r3, r2, r3
 8008b3e:	ee07 3a90 	vmov	s15, r3
 8008b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 8111 	beq.w	8008d74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	f000 8083 	beq.w	8008c60 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	f200 80a1 	bhi.w	8008ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d056      	beq.n	8008c1c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008b6e:	e099      	b.n	8008ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b70:	4b88      	ldr	r3, [pc, #544]	; (8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0320 	and.w	r3, r3, #32
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d02d      	beq.n	8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b7c:	4b85      	ldr	r3, [pc, #532]	; (8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	08db      	lsrs	r3, r3, #3
 8008b82:	f003 0303 	and.w	r3, r3, #3
 8008b86:	4a84      	ldr	r2, [pc, #528]	; (8008d98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008b88:	fa22 f303 	lsr.w	r3, r2, r3
 8008b8c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	ee07 3a90 	vmov	s15, r3
 8008b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	ee07 3a90 	vmov	s15, r3
 8008b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ba6:	4b7b      	ldr	r3, [pc, #492]	; (8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bae:	ee07 3a90 	vmov	s15, r3
 8008bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bd2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008bd6:	e087      	b.n	8008ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	ee07 3a90 	vmov	s15, r3
 8008bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008da0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bea:	4b6a      	ldr	r3, [pc, #424]	; (8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf2:	ee07 3a90 	vmov	s15, r3
 8008bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bfe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c1a:	e065      	b.n	8008ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c2e:	4b59      	ldr	r3, [pc, #356]	; (8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c42:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c5e:	e043      	b.n	8008ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	ee07 3a90 	vmov	s15, r3
 8008c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c72:	4b48      	ldr	r3, [pc, #288]	; (8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c7a:	ee07 3a90 	vmov	s15, r3
 8008c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c86:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ca2:	e021      	b.n	8008ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008da4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb6:	4b37      	ldr	r3, [pc, #220]	; (8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cbe:	ee07 3a90 	vmov	s15, r3
 8008cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ce6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008ce8:	4b2a      	ldr	r3, [pc, #168]	; (8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cec:	0a5b      	lsrs	r3, r3, #9
 8008cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d02:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d0e:	ee17 2a90 	vmov	r2, s15
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008d16:	4b1f      	ldr	r3, [pc, #124]	; (8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1a:	0c1b      	lsrs	r3, r3, #16
 8008d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d20:	ee07 3a90 	vmov	s15, r3
 8008d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d30:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d3c:	ee17 2a90 	vmov	r2, s15
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008d44:	4b13      	ldr	r3, [pc, #76]	; (8008d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d48:	0e1b      	lsrs	r3, r3, #24
 8008d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d4e:	ee07 3a90 	vmov	s15, r3
 8008d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d6a:	ee17 2a90 	vmov	r2, s15
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008d72:	e008      	b.n	8008d86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	609a      	str	r2, [r3, #8]
}
 8008d86:	bf00      	nop
 8008d88:	3724      	adds	r7, #36	; 0x24
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	58024400 	.word	0x58024400
 8008d98:	03d09000 	.word	0x03d09000
 8008d9c:	46000000 	.word	0x46000000
 8008da0:	4c742400 	.word	0x4c742400
 8008da4:	4a742400 	.word	0x4a742400
 8008da8:	4bbebc20 	.word	0x4bbebc20

08008dac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b089      	sub	sp, #36	; 0x24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008db4:	4ba1      	ldr	r3, [pc, #644]	; (800903c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db8:	f003 0303 	and.w	r3, r3, #3
 8008dbc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008dbe:	4b9f      	ldr	r3, [pc, #636]	; (800903c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc2:	0d1b      	lsrs	r3, r3, #20
 8008dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dc8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008dca:	4b9c      	ldr	r3, [pc, #624]	; (800903c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dce:	0a1b      	lsrs	r3, r3, #8
 8008dd0:	f003 0301 	and.w	r3, r3, #1
 8008dd4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008dd6:	4b99      	ldr	r3, [pc, #612]	; (800903c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dda:	08db      	lsrs	r3, r3, #3
 8008ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	fb02 f303 	mul.w	r3, r2, r3
 8008de6:	ee07 3a90 	vmov	s15, r3
 8008dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 8111 	beq.w	800901c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	f000 8083 	beq.w	8008f08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	f200 80a1 	bhi.w	8008f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d056      	beq.n	8008ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008e16:	e099      	b.n	8008f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e18:	4b88      	ldr	r3, [pc, #544]	; (800903c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0320 	and.w	r3, r3, #32
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d02d      	beq.n	8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e24:	4b85      	ldr	r3, [pc, #532]	; (800903c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	08db      	lsrs	r3, r3, #3
 8008e2a:	f003 0303 	and.w	r3, r3, #3
 8008e2e:	4a84      	ldr	r2, [pc, #528]	; (8009040 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008e30:	fa22 f303 	lsr.w	r3, r2, r3
 8008e34:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	ee07 3a90 	vmov	s15, r3
 8008e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	ee07 3a90 	vmov	s15, r3
 8008e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e4e:	4b7b      	ldr	r3, [pc, #492]	; (800903c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e56:	ee07 3a90 	vmov	s15, r3
 8008e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e7a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008e7e:	e087      	b.n	8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	ee07 3a90 	vmov	s15, r3
 8008e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009048 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e92:	4b6a      	ldr	r3, [pc, #424]	; (800903c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e9a:	ee07 3a90 	vmov	s15, r3
 8008e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ea6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ebe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ec2:	e065      	b.n	8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	ee07 3a90 	vmov	s15, r3
 8008eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ece:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800904c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed6:	4b59      	ldr	r3, [pc, #356]	; (800903c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ede:	ee07 3a90 	vmov	s15, r3
 8008ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f06:	e043      	b.n	8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	ee07 3a90 	vmov	s15, r3
 8008f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009050 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f1a:	4b48      	ldr	r3, [pc, #288]	; (800903c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f22:	ee07 3a90 	vmov	s15, r3
 8008f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f4a:	e021      	b.n	8008f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	ee07 3a90 	vmov	s15, r3
 8008f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800904c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f5e:	4b37      	ldr	r3, [pc, #220]	; (800903c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f66:	ee07 3a90 	vmov	s15, r3
 8008f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008f90:	4b2a      	ldr	r3, [pc, #168]	; (800903c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f94:	0a5b      	lsrs	r3, r3, #9
 8008f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f9a:	ee07 3a90 	vmov	s15, r3
 8008f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fb6:	ee17 2a90 	vmov	r2, s15
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008fbe:	4b1f      	ldr	r3, [pc, #124]	; (800903c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc2:	0c1b      	lsrs	r3, r3, #16
 8008fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fc8:	ee07 3a90 	vmov	s15, r3
 8008fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fe4:	ee17 2a90 	vmov	r2, s15
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008fec:	4b13      	ldr	r3, [pc, #76]	; (800903c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff0:	0e1b      	lsrs	r3, r3, #24
 8008ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff6:	ee07 3a90 	vmov	s15, r3
 8008ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009002:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009006:	edd7 6a07 	vldr	s13, [r7, #28]
 800900a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800900e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009012:	ee17 2a90 	vmov	r2, s15
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800901a:	e008      	b.n	800902e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	609a      	str	r2, [r3, #8]
}
 800902e:	bf00      	nop
 8009030:	3724      	adds	r7, #36	; 0x24
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	58024400 	.word	0x58024400
 8009040:	03d09000 	.word	0x03d09000
 8009044:	46000000 	.word	0x46000000
 8009048:	4c742400 	.word	0x4c742400
 800904c:	4a742400 	.word	0x4a742400
 8009050:	4bbebc20 	.word	0x4bbebc20

08009054 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009054:	b480      	push	{r7}
 8009056:	b089      	sub	sp, #36	; 0x24
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800905c:	4ba0      	ldr	r3, [pc, #640]	; (80092e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800905e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009060:	f003 0303 	and.w	r3, r3, #3
 8009064:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009066:	4b9e      	ldr	r3, [pc, #632]	; (80092e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906a:	091b      	lsrs	r3, r3, #4
 800906c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009070:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009072:	4b9b      	ldr	r3, [pc, #620]	; (80092e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800907c:	4b98      	ldr	r3, [pc, #608]	; (80092e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800907e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009080:	08db      	lsrs	r3, r3, #3
 8009082:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	fb02 f303 	mul.w	r3, r2, r3
 800908c:	ee07 3a90 	vmov	s15, r3
 8009090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009094:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 8111 	beq.w	80092c2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	f000 8083 	beq.w	80091ae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	f200 80a1 	bhi.w	80091f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d003      	beq.n	80090be <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d056      	beq.n	800916a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80090bc:	e099      	b.n	80091f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090be:	4b88      	ldr	r3, [pc, #544]	; (80092e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d02d      	beq.n	8009126 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090ca:	4b85      	ldr	r3, [pc, #532]	; (80092e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	08db      	lsrs	r3, r3, #3
 80090d0:	f003 0303 	and.w	r3, r3, #3
 80090d4:	4a83      	ldr	r2, [pc, #524]	; (80092e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80090d6:	fa22 f303 	lsr.w	r3, r2, r3
 80090da:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	ee07 3a90 	vmov	s15, r3
 80090ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090f4:	4b7a      	ldr	r3, [pc, #488]	; (80092e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090fc:	ee07 3a90 	vmov	s15, r3
 8009100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009104:	ed97 6a03 	vldr	s12, [r7, #12]
 8009108:	eddf 5a77 	vldr	s11, [pc, #476]	; 80092e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800910c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009110:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009114:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009118:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800911c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009120:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009124:	e087      	b.n	8009236 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	ee07 3a90 	vmov	s15, r3
 800912c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009130:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80092ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009134:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009138:	4b69      	ldr	r3, [pc, #420]	; (80092e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800913a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009140:	ee07 3a90 	vmov	s15, r3
 8009144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009148:	ed97 6a03 	vldr	s12, [r7, #12]
 800914c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80092e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009150:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009154:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009158:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800915c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009164:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009168:	e065      	b.n	8009236 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	ee07 3a90 	vmov	s15, r3
 8009170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009174:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80092f0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009178:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800917c:	4b58      	ldr	r3, [pc, #352]	; (80092e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800917e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009184:	ee07 3a90 	vmov	s15, r3
 8009188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800918c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009190:	eddf 5a55 	vldr	s11, [pc, #340]	; 80092e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009194:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009198:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800919c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091ac:	e043      	b.n	8009236 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	ee07 3a90 	vmov	s15, r3
 80091b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091b8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80092f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80091bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091c0:	4b47      	ldr	r3, [pc, #284]	; (80092e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091c8:	ee07 3a90 	vmov	s15, r3
 80091cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80091d4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80092e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091f0:	e021      	b.n	8009236 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	ee07 3a90 	vmov	s15, r3
 80091f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091fc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80092ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009204:	4b36      	ldr	r3, [pc, #216]	; (80092e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800920c:	ee07 3a90 	vmov	s15, r3
 8009210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009214:	ed97 6a03 	vldr	s12, [r7, #12]
 8009218:	eddf 5a33 	vldr	s11, [pc, #204]	; 80092e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800921c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009220:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009224:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009228:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800922c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009230:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009234:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009236:	4b2a      	ldr	r3, [pc, #168]	; (80092e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923a:	0a5b      	lsrs	r3, r3, #9
 800923c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009240:	ee07 3a90 	vmov	s15, r3
 8009244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800924c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009250:	edd7 6a07 	vldr	s13, [r7, #28]
 8009254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800925c:	ee17 2a90 	vmov	r2, s15
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009264:	4b1e      	ldr	r3, [pc, #120]	; (80092e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009268:	0c1b      	lsrs	r3, r3, #16
 800926a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800926e:	ee07 3a90 	vmov	s15, r3
 8009272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009276:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800927a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800927e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800928a:	ee17 2a90 	vmov	r2, s15
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009292:	4b13      	ldr	r3, [pc, #76]	; (80092e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009296:	0e1b      	lsrs	r3, r3, #24
 8009298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800929c:	ee07 3a90 	vmov	s15, r3
 80092a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80092b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092b8:	ee17 2a90 	vmov	r2, s15
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80092c0:	e008      	b.n	80092d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	609a      	str	r2, [r3, #8]
}
 80092d4:	bf00      	nop
 80092d6:	3724      	adds	r7, #36	; 0x24
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	58024400 	.word	0x58024400
 80092e4:	03d09000 	.word	0x03d09000
 80092e8:	46000000 	.word	0x46000000
 80092ec:	4c742400 	.word	0x4c742400
 80092f0:	4a742400 	.word	0x4a742400
 80092f4:	4bbebc20 	.word	0x4bbebc20

080092f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009306:	4b53      	ldr	r3, [pc, #332]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 8009308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930a:	f003 0303 	and.w	r3, r3, #3
 800930e:	2b03      	cmp	r3, #3
 8009310:	d101      	bne.n	8009316 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	e099      	b.n	800944a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009316:	4b4f      	ldr	r3, [pc, #316]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a4e      	ldr	r2, [pc, #312]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 800931c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009322:	f7f8 fca9 	bl	8001c78 <HAL_GetTick>
 8009326:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009328:	e008      	b.n	800933c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800932a:	f7f8 fca5 	bl	8001c78 <HAL_GetTick>
 800932e:	4602      	mov	r2, r0
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	2b02      	cmp	r3, #2
 8009336:	d901      	bls.n	800933c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	e086      	b.n	800944a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800933c:	4b45      	ldr	r3, [pc, #276]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1f0      	bne.n	800932a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009348:	4b42      	ldr	r3, [pc, #264]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 800934a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	031b      	lsls	r3, r3, #12
 8009356:	493f      	ldr	r1, [pc, #252]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 8009358:	4313      	orrs	r3, r2
 800935a:	628b      	str	r3, [r1, #40]	; 0x28
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	3b01      	subs	r3, #1
 8009362:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	3b01      	subs	r3, #1
 800936c:	025b      	lsls	r3, r3, #9
 800936e:	b29b      	uxth	r3, r3
 8009370:	431a      	orrs	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	3b01      	subs	r3, #1
 8009378:	041b      	lsls	r3, r3, #16
 800937a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800937e:	431a      	orrs	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	3b01      	subs	r3, #1
 8009386:	061b      	lsls	r3, r3, #24
 8009388:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800938c:	4931      	ldr	r1, [pc, #196]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 800938e:	4313      	orrs	r3, r2
 8009390:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009392:	4b30      	ldr	r3, [pc, #192]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 8009394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009396:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	695b      	ldr	r3, [r3, #20]
 800939e:	492d      	ldr	r1, [pc, #180]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 80093a0:	4313      	orrs	r3, r2
 80093a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80093a4:	4b2b      	ldr	r3, [pc, #172]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	f023 0220 	bic.w	r2, r3, #32
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	4928      	ldr	r1, [pc, #160]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 80093b2:	4313      	orrs	r3, r2
 80093b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80093b6:	4b27      	ldr	r3, [pc, #156]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 80093b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ba:	4a26      	ldr	r2, [pc, #152]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 80093bc:	f023 0310 	bic.w	r3, r3, #16
 80093c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80093c2:	4b24      	ldr	r3, [pc, #144]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 80093c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093c6:	4b24      	ldr	r3, [pc, #144]	; (8009458 <RCCEx_PLL2_Config+0x160>)
 80093c8:	4013      	ands	r3, r2
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	69d2      	ldr	r2, [r2, #28]
 80093ce:	00d2      	lsls	r2, r2, #3
 80093d0:	4920      	ldr	r1, [pc, #128]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 80093d2:	4313      	orrs	r3, r2
 80093d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80093d6:	4b1f      	ldr	r3, [pc, #124]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 80093d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093da:	4a1e      	ldr	r2, [pc, #120]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 80093dc:	f043 0310 	orr.w	r3, r3, #16
 80093e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d106      	bne.n	80093f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80093e8:	4b1a      	ldr	r3, [pc, #104]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 80093ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ec:	4a19      	ldr	r2, [pc, #100]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 80093ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093f4:	e00f      	b.n	8009416 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d106      	bne.n	800940a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80093fc:	4b15      	ldr	r3, [pc, #84]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 80093fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009400:	4a14      	ldr	r2, [pc, #80]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 8009402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009406:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009408:	e005      	b.n	8009416 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800940a:	4b12      	ldr	r3, [pc, #72]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 800940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940e:	4a11      	ldr	r2, [pc, #68]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 8009410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009414:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009416:	4b0f      	ldr	r3, [pc, #60]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a0e      	ldr	r2, [pc, #56]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 800941c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009422:	f7f8 fc29 	bl	8001c78 <HAL_GetTick>
 8009426:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009428:	e008      	b.n	800943c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800942a:	f7f8 fc25 	bl	8001c78 <HAL_GetTick>
 800942e:	4602      	mov	r2, r0
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	2b02      	cmp	r3, #2
 8009436:	d901      	bls.n	800943c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009438:	2303      	movs	r3, #3
 800943a:	e006      	b.n	800944a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800943c:	4b05      	ldr	r3, [pc, #20]	; (8009454 <RCCEx_PLL2_Config+0x15c>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d0f0      	beq.n	800942a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009448:	7bfb      	ldrb	r3, [r7, #15]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	58024400 	.word	0x58024400
 8009458:	ffff0007 	.word	0xffff0007

0800945c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800946a:	4b53      	ldr	r3, [pc, #332]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 800946c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946e:	f003 0303 	and.w	r3, r3, #3
 8009472:	2b03      	cmp	r3, #3
 8009474:	d101      	bne.n	800947a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e099      	b.n	80095ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800947a:	4b4f      	ldr	r3, [pc, #316]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a4e      	ldr	r2, [pc, #312]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 8009480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009486:	f7f8 fbf7 	bl	8001c78 <HAL_GetTick>
 800948a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800948c:	e008      	b.n	80094a0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800948e:	f7f8 fbf3 	bl	8001c78 <HAL_GetTick>
 8009492:	4602      	mov	r2, r0
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	2b02      	cmp	r3, #2
 800949a:	d901      	bls.n	80094a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800949c:	2303      	movs	r3, #3
 800949e:	e086      	b.n	80095ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80094a0:	4b45      	ldr	r3, [pc, #276]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1f0      	bne.n	800948e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80094ac:	4b42      	ldr	r3, [pc, #264]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 80094ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	051b      	lsls	r3, r3, #20
 80094ba:	493f      	ldr	r1, [pc, #252]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 80094bc:	4313      	orrs	r3, r2
 80094be:	628b      	str	r3, [r1, #40]	; 0x28
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	3b01      	subs	r3, #1
 80094c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	025b      	lsls	r3, r3, #9
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	431a      	orrs	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	3b01      	subs	r3, #1
 80094dc:	041b      	lsls	r3, r3, #16
 80094de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80094e2:	431a      	orrs	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	3b01      	subs	r3, #1
 80094ea:	061b      	lsls	r3, r3, #24
 80094ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094f0:	4931      	ldr	r1, [pc, #196]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 80094f2:	4313      	orrs	r3, r2
 80094f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80094f6:	4b30      	ldr	r3, [pc, #192]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 80094f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	492d      	ldr	r1, [pc, #180]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 8009504:	4313      	orrs	r3, r2
 8009506:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009508:	4b2b      	ldr	r3, [pc, #172]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	4928      	ldr	r1, [pc, #160]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 8009516:	4313      	orrs	r3, r2
 8009518:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800951a:	4b27      	ldr	r3, [pc, #156]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 800951c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951e:	4a26      	ldr	r2, [pc, #152]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 8009520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009524:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009526:	4b24      	ldr	r3, [pc, #144]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 8009528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800952a:	4b24      	ldr	r3, [pc, #144]	; (80095bc <RCCEx_PLL3_Config+0x160>)
 800952c:	4013      	ands	r3, r2
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	69d2      	ldr	r2, [r2, #28]
 8009532:	00d2      	lsls	r2, r2, #3
 8009534:	4920      	ldr	r1, [pc, #128]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 8009536:	4313      	orrs	r3, r2
 8009538:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800953a:	4b1f      	ldr	r3, [pc, #124]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 800953c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953e:	4a1e      	ldr	r2, [pc, #120]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 8009540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009544:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d106      	bne.n	800955a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800954c:	4b1a      	ldr	r3, [pc, #104]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	4a19      	ldr	r2, [pc, #100]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 8009552:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009556:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009558:	e00f      	b.n	800957a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d106      	bne.n	800956e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009560:	4b15      	ldr	r3, [pc, #84]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 8009562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009564:	4a14      	ldr	r2, [pc, #80]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 8009566:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800956a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800956c:	e005      	b.n	800957a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800956e:	4b12      	ldr	r3, [pc, #72]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 8009570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009572:	4a11      	ldr	r2, [pc, #68]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 8009574:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009578:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800957a:	4b0f      	ldr	r3, [pc, #60]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a0e      	ldr	r2, [pc, #56]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 8009580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009586:	f7f8 fb77 	bl	8001c78 <HAL_GetTick>
 800958a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800958c:	e008      	b.n	80095a0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800958e:	f7f8 fb73 	bl	8001c78 <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	2b02      	cmp	r3, #2
 800959a:	d901      	bls.n	80095a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e006      	b.n	80095ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80095a0:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <RCCEx_PLL3_Config+0x15c>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0f0      	beq.n	800958e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	58024400 	.word	0x58024400
 80095bc:	ffff0007 	.word	0xffff0007

080095c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d101      	bne.n	80095d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e049      	b.n	8009666 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d106      	bne.n	80095ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7f8 f856 	bl	8001698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2202      	movs	r2, #2
 80095f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	3304      	adds	r3, #4
 80095fc:	4619      	mov	r1, r3
 80095fe:	4610      	mov	r0, r2
 8009600:	f000 fc70 	bl	8009ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
	...

08009670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800967e:	b2db      	uxtb	r3, r3
 8009680:	2b01      	cmp	r3, #1
 8009682:	d001      	beq.n	8009688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e054      	b.n	8009732 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2202      	movs	r2, #2
 800968c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68da      	ldr	r2, [r3, #12]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f042 0201 	orr.w	r2, r2, #1
 800969e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a26      	ldr	r2, [pc, #152]	; (8009740 <HAL_TIM_Base_Start_IT+0xd0>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d022      	beq.n	80096f0 <HAL_TIM_Base_Start_IT+0x80>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096b2:	d01d      	beq.n	80096f0 <HAL_TIM_Base_Start_IT+0x80>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a22      	ldr	r2, [pc, #136]	; (8009744 <HAL_TIM_Base_Start_IT+0xd4>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d018      	beq.n	80096f0 <HAL_TIM_Base_Start_IT+0x80>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a21      	ldr	r2, [pc, #132]	; (8009748 <HAL_TIM_Base_Start_IT+0xd8>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d013      	beq.n	80096f0 <HAL_TIM_Base_Start_IT+0x80>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a1f      	ldr	r2, [pc, #124]	; (800974c <HAL_TIM_Base_Start_IT+0xdc>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d00e      	beq.n	80096f0 <HAL_TIM_Base_Start_IT+0x80>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a1e      	ldr	r2, [pc, #120]	; (8009750 <HAL_TIM_Base_Start_IT+0xe0>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d009      	beq.n	80096f0 <HAL_TIM_Base_Start_IT+0x80>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a1c      	ldr	r2, [pc, #112]	; (8009754 <HAL_TIM_Base_Start_IT+0xe4>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d004      	beq.n	80096f0 <HAL_TIM_Base_Start_IT+0x80>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a1b      	ldr	r2, [pc, #108]	; (8009758 <HAL_TIM_Base_Start_IT+0xe8>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d115      	bne.n	800971c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689a      	ldr	r2, [r3, #8]
 80096f6:	4b19      	ldr	r3, [pc, #100]	; (800975c <HAL_TIM_Base_Start_IT+0xec>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2b06      	cmp	r3, #6
 8009700:	d015      	beq.n	800972e <HAL_TIM_Base_Start_IT+0xbe>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009708:	d011      	beq.n	800972e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f042 0201 	orr.w	r2, r2, #1
 8009718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800971a:	e008      	b.n	800972e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f042 0201 	orr.w	r2, r2, #1
 800972a:	601a      	str	r2, [r3, #0]
 800972c:	e000      	b.n	8009730 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800972e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	40010000 	.word	0x40010000
 8009744:	40000400 	.word	0x40000400
 8009748:	40000800 	.word	0x40000800
 800974c:	40000c00 	.word	0x40000c00
 8009750:	40010400 	.word	0x40010400
 8009754:	40001800 	.word	0x40001800
 8009758:	40014000 	.word	0x40014000
 800975c:	00010007 	.word	0x00010007

08009760 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d101      	bne.n	8009772 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e049      	b.n	8009806 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	d106      	bne.n	800978c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f7f7 ff64 	bl	8001654 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2202      	movs	r2, #2
 8009790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	3304      	adds	r3, #4
 800979c:	4619      	mov	r1, r3
 800979e:	4610      	mov	r0, r2
 80097a0:	f000 fba0 	bl	8009ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
	...

08009810 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d109      	bne.n	8009834 <HAL_TIM_PWM_Start+0x24>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009826:	b2db      	uxtb	r3, r3
 8009828:	2b01      	cmp	r3, #1
 800982a:	bf14      	ite	ne
 800982c:	2301      	movne	r3, #1
 800982e:	2300      	moveq	r3, #0
 8009830:	b2db      	uxtb	r3, r3
 8009832:	e03c      	b.n	80098ae <HAL_TIM_PWM_Start+0x9e>
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	2b04      	cmp	r3, #4
 8009838:	d109      	bne.n	800984e <HAL_TIM_PWM_Start+0x3e>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b01      	cmp	r3, #1
 8009844:	bf14      	ite	ne
 8009846:	2301      	movne	r3, #1
 8009848:	2300      	moveq	r3, #0
 800984a:	b2db      	uxtb	r3, r3
 800984c:	e02f      	b.n	80098ae <HAL_TIM_PWM_Start+0x9e>
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b08      	cmp	r3, #8
 8009852:	d109      	bne.n	8009868 <HAL_TIM_PWM_Start+0x58>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800985a:	b2db      	uxtb	r3, r3
 800985c:	2b01      	cmp	r3, #1
 800985e:	bf14      	ite	ne
 8009860:	2301      	movne	r3, #1
 8009862:	2300      	moveq	r3, #0
 8009864:	b2db      	uxtb	r3, r3
 8009866:	e022      	b.n	80098ae <HAL_TIM_PWM_Start+0x9e>
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	2b0c      	cmp	r3, #12
 800986c:	d109      	bne.n	8009882 <HAL_TIM_PWM_Start+0x72>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009874:	b2db      	uxtb	r3, r3
 8009876:	2b01      	cmp	r3, #1
 8009878:	bf14      	ite	ne
 800987a:	2301      	movne	r3, #1
 800987c:	2300      	moveq	r3, #0
 800987e:	b2db      	uxtb	r3, r3
 8009880:	e015      	b.n	80098ae <HAL_TIM_PWM_Start+0x9e>
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b10      	cmp	r3, #16
 8009886:	d109      	bne.n	800989c <HAL_TIM_PWM_Start+0x8c>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b01      	cmp	r3, #1
 8009892:	bf14      	ite	ne
 8009894:	2301      	movne	r3, #1
 8009896:	2300      	moveq	r3, #0
 8009898:	b2db      	uxtb	r3, r3
 800989a:	e008      	b.n	80098ae <HAL_TIM_PWM_Start+0x9e>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	bf14      	ite	ne
 80098a8:	2301      	movne	r3, #1
 80098aa:	2300      	moveq	r3, #0
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e0a1      	b.n	80099fa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d104      	bne.n	80098c6 <HAL_TIM_PWM_Start+0xb6>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2202      	movs	r2, #2
 80098c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098c4:	e023      	b.n	800990e <HAL_TIM_PWM_Start+0xfe>
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	2b04      	cmp	r3, #4
 80098ca:	d104      	bne.n	80098d6 <HAL_TIM_PWM_Start+0xc6>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2202      	movs	r2, #2
 80098d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098d4:	e01b      	b.n	800990e <HAL_TIM_PWM_Start+0xfe>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2b08      	cmp	r3, #8
 80098da:	d104      	bne.n	80098e6 <HAL_TIM_PWM_Start+0xd6>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2202      	movs	r2, #2
 80098e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098e4:	e013      	b.n	800990e <HAL_TIM_PWM_Start+0xfe>
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b0c      	cmp	r3, #12
 80098ea:	d104      	bne.n	80098f6 <HAL_TIM_PWM_Start+0xe6>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2202      	movs	r2, #2
 80098f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098f4:	e00b      	b.n	800990e <HAL_TIM_PWM_Start+0xfe>
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b10      	cmp	r3, #16
 80098fa:	d104      	bne.n	8009906 <HAL_TIM_PWM_Start+0xf6>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2202      	movs	r2, #2
 8009900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009904:	e003      	b.n	800990e <HAL_TIM_PWM_Start+0xfe>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2202      	movs	r2, #2
 800990a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2201      	movs	r2, #1
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	4618      	mov	r0, r3
 8009918:	f000 fe54 	bl	800a5c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a38      	ldr	r2, [pc, #224]	; (8009a04 <HAL_TIM_PWM_Start+0x1f4>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d013      	beq.n	800994e <HAL_TIM_PWM_Start+0x13e>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a37      	ldr	r2, [pc, #220]	; (8009a08 <HAL_TIM_PWM_Start+0x1f8>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d00e      	beq.n	800994e <HAL_TIM_PWM_Start+0x13e>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a35      	ldr	r2, [pc, #212]	; (8009a0c <HAL_TIM_PWM_Start+0x1fc>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d009      	beq.n	800994e <HAL_TIM_PWM_Start+0x13e>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a34      	ldr	r2, [pc, #208]	; (8009a10 <HAL_TIM_PWM_Start+0x200>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d004      	beq.n	800994e <HAL_TIM_PWM_Start+0x13e>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a32      	ldr	r2, [pc, #200]	; (8009a14 <HAL_TIM_PWM_Start+0x204>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d101      	bne.n	8009952 <HAL_TIM_PWM_Start+0x142>
 800994e:	2301      	movs	r3, #1
 8009950:	e000      	b.n	8009954 <HAL_TIM_PWM_Start+0x144>
 8009952:	2300      	movs	r3, #0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d007      	beq.n	8009968 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009966:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a25      	ldr	r2, [pc, #148]	; (8009a04 <HAL_TIM_PWM_Start+0x1f4>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d022      	beq.n	80099b8 <HAL_TIM_PWM_Start+0x1a8>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800997a:	d01d      	beq.n	80099b8 <HAL_TIM_PWM_Start+0x1a8>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a25      	ldr	r2, [pc, #148]	; (8009a18 <HAL_TIM_PWM_Start+0x208>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d018      	beq.n	80099b8 <HAL_TIM_PWM_Start+0x1a8>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a24      	ldr	r2, [pc, #144]	; (8009a1c <HAL_TIM_PWM_Start+0x20c>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d013      	beq.n	80099b8 <HAL_TIM_PWM_Start+0x1a8>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a22      	ldr	r2, [pc, #136]	; (8009a20 <HAL_TIM_PWM_Start+0x210>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d00e      	beq.n	80099b8 <HAL_TIM_PWM_Start+0x1a8>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a1a      	ldr	r2, [pc, #104]	; (8009a08 <HAL_TIM_PWM_Start+0x1f8>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d009      	beq.n	80099b8 <HAL_TIM_PWM_Start+0x1a8>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a1e      	ldr	r2, [pc, #120]	; (8009a24 <HAL_TIM_PWM_Start+0x214>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d004      	beq.n	80099b8 <HAL_TIM_PWM_Start+0x1a8>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a16      	ldr	r2, [pc, #88]	; (8009a0c <HAL_TIM_PWM_Start+0x1fc>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d115      	bne.n	80099e4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	689a      	ldr	r2, [r3, #8]
 80099be:	4b1a      	ldr	r3, [pc, #104]	; (8009a28 <HAL_TIM_PWM_Start+0x218>)
 80099c0:	4013      	ands	r3, r2
 80099c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2b06      	cmp	r3, #6
 80099c8:	d015      	beq.n	80099f6 <HAL_TIM_PWM_Start+0x1e6>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099d0:	d011      	beq.n	80099f6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f042 0201 	orr.w	r2, r2, #1
 80099e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099e2:	e008      	b.n	80099f6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f042 0201 	orr.w	r2, r2, #1
 80099f2:	601a      	str	r2, [r3, #0]
 80099f4:	e000      	b.n	80099f8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	40010000 	.word	0x40010000
 8009a08:	40010400 	.word	0x40010400
 8009a0c:	40014000 	.word	0x40014000
 8009a10:	40014400 	.word	0x40014400
 8009a14:	40014800 	.word	0x40014800
 8009a18:	40000400 	.word	0x40000400
 8009a1c:	40000800 	.word	0x40000800
 8009a20:	40000c00 	.word	0x40000c00
 8009a24:	40001800 	.word	0x40001800
 8009a28:	00010007 	.word	0x00010007

08009a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	f003 0302 	and.w	r3, r3, #2
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d122      	bne.n	8009a88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	f003 0302 	and.w	r3, r3, #2
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d11b      	bne.n	8009a88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f06f 0202 	mvn.w	r2, #2
 8009a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	f003 0303 	and.w	r3, r3, #3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d003      	beq.n	8009a76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fa1a 	bl	8009ea8 <HAL_TIM_IC_CaptureCallback>
 8009a74:	e005      	b.n	8009a82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fa0c 	bl	8009e94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 fa1d 	bl	8009ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	f003 0304 	and.w	r3, r3, #4
 8009a92:	2b04      	cmp	r3, #4
 8009a94:	d122      	bne.n	8009adc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	f003 0304 	and.w	r3, r3, #4
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	d11b      	bne.n	8009adc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f06f 0204 	mvn.w	r2, #4
 8009aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2202      	movs	r2, #2
 8009ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d003      	beq.n	8009aca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f9f0 	bl	8009ea8 <HAL_TIM_IC_CaptureCallback>
 8009ac8:	e005      	b.n	8009ad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f9e2 	bl	8009e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f9f3 	bl	8009ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	f003 0308 	and.w	r3, r3, #8
 8009ae6:	2b08      	cmp	r3, #8
 8009ae8:	d122      	bne.n	8009b30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	f003 0308 	and.w	r3, r3, #8
 8009af4:	2b08      	cmp	r3, #8
 8009af6:	d11b      	bne.n	8009b30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f06f 0208 	mvn.w	r2, #8
 8009b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2204      	movs	r2, #4
 8009b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	69db      	ldr	r3, [r3, #28]
 8009b0e:	f003 0303 	and.w	r3, r3, #3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d003      	beq.n	8009b1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f9c6 	bl	8009ea8 <HAL_TIM_IC_CaptureCallback>
 8009b1c:	e005      	b.n	8009b2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f9b8 	bl	8009e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f9c9 	bl	8009ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	f003 0310 	and.w	r3, r3, #16
 8009b3a:	2b10      	cmp	r3, #16
 8009b3c:	d122      	bne.n	8009b84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	f003 0310 	and.w	r3, r3, #16
 8009b48:	2b10      	cmp	r3, #16
 8009b4a:	d11b      	bne.n	8009b84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f06f 0210 	mvn.w	r2, #16
 8009b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2208      	movs	r2, #8
 8009b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d003      	beq.n	8009b72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f99c 	bl	8009ea8 <HAL_TIM_IC_CaptureCallback>
 8009b70:	e005      	b.n	8009b7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f98e 	bl	8009e94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f99f 	bl	8009ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d10e      	bne.n	8009bb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	f003 0301 	and.w	r3, r3, #1
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d107      	bne.n	8009bb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f06f 0201 	mvn.w	r2, #1
 8009ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7f7 fac2 	bl	8001134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bba:	2b80      	cmp	r3, #128	; 0x80
 8009bbc:	d10e      	bne.n	8009bdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bc8:	2b80      	cmp	r3, #128	; 0x80
 8009bca:	d107      	bne.n	8009bdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fd23 	bl	800a622 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bea:	d10e      	bne.n	8009c0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bf6:	2b80      	cmp	r3, #128	; 0x80
 8009bf8:	d107      	bne.n	8009c0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fd16 	bl	800a636 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c14:	2b40      	cmp	r3, #64	; 0x40
 8009c16:	d10e      	bne.n	8009c36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c22:	2b40      	cmp	r3, #64	; 0x40
 8009c24:	d107      	bne.n	8009c36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f94d 	bl	8009ed0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	f003 0320 	and.w	r3, r3, #32
 8009c40:	2b20      	cmp	r3, #32
 8009c42:	d10e      	bne.n	8009c62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	f003 0320 	and.w	r3, r3, #32
 8009c4e:	2b20      	cmp	r3, #32
 8009c50:	d107      	bne.n	8009c62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f06f 0220 	mvn.w	r2, #32
 8009c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fcd6 	bl	800a60e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c62:	bf00      	nop
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
	...

08009c6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d101      	bne.n	8009c8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c86:	2302      	movs	r3, #2
 8009c88:	e0ff      	b.n	8009e8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b14      	cmp	r3, #20
 8009c96:	f200 80f0 	bhi.w	8009e7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009c9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ca0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca0:	08009cf5 	.word	0x08009cf5
 8009ca4:	08009e7b 	.word	0x08009e7b
 8009ca8:	08009e7b 	.word	0x08009e7b
 8009cac:	08009e7b 	.word	0x08009e7b
 8009cb0:	08009d35 	.word	0x08009d35
 8009cb4:	08009e7b 	.word	0x08009e7b
 8009cb8:	08009e7b 	.word	0x08009e7b
 8009cbc:	08009e7b 	.word	0x08009e7b
 8009cc0:	08009d77 	.word	0x08009d77
 8009cc4:	08009e7b 	.word	0x08009e7b
 8009cc8:	08009e7b 	.word	0x08009e7b
 8009ccc:	08009e7b 	.word	0x08009e7b
 8009cd0:	08009db7 	.word	0x08009db7
 8009cd4:	08009e7b 	.word	0x08009e7b
 8009cd8:	08009e7b 	.word	0x08009e7b
 8009cdc:	08009e7b 	.word	0x08009e7b
 8009ce0:	08009df9 	.word	0x08009df9
 8009ce4:	08009e7b 	.word	0x08009e7b
 8009ce8:	08009e7b 	.word	0x08009e7b
 8009cec:	08009e7b 	.word	0x08009e7b
 8009cf0:	08009e39 	.word	0x08009e39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68b9      	ldr	r1, [r7, #8]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 f98c 	bl	800a018 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	699a      	ldr	r2, [r3, #24]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f042 0208 	orr.w	r2, r2, #8
 8009d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	699a      	ldr	r2, [r3, #24]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f022 0204 	bic.w	r2, r2, #4
 8009d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6999      	ldr	r1, [r3, #24]
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	691a      	ldr	r2, [r3, #16]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	430a      	orrs	r2, r1
 8009d30:	619a      	str	r2, [r3, #24]
      break;
 8009d32:	e0a5      	b.n	8009e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68b9      	ldr	r1, [r7, #8]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 f9fc 	bl	800a138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	699a      	ldr	r2, [r3, #24]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	699a      	ldr	r2, [r3, #24]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6999      	ldr	r1, [r3, #24]
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	691b      	ldr	r3, [r3, #16]
 8009d6a:	021a      	lsls	r2, r3, #8
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	430a      	orrs	r2, r1
 8009d72:	619a      	str	r2, [r3, #24]
      break;
 8009d74:	e084      	b.n	8009e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68b9      	ldr	r1, [r7, #8]
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f000 fa65 	bl	800a24c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	69da      	ldr	r2, [r3, #28]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f042 0208 	orr.w	r2, r2, #8
 8009d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	69da      	ldr	r2, [r3, #28]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f022 0204 	bic.w	r2, r2, #4
 8009da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	69d9      	ldr	r1, [r3, #28]
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	691a      	ldr	r2, [r3, #16]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	430a      	orrs	r2, r1
 8009db2:	61da      	str	r2, [r3, #28]
      break;
 8009db4:	e064      	b.n	8009e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68b9      	ldr	r1, [r7, #8]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f000 facd 	bl	800a35c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	69da      	ldr	r2, [r3, #28]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	69da      	ldr	r2, [r3, #28]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	69d9      	ldr	r1, [r3, #28]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	021a      	lsls	r2, r3, #8
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	430a      	orrs	r2, r1
 8009df4:	61da      	str	r2, [r3, #28]
      break;
 8009df6:	e043      	b.n	8009e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68b9      	ldr	r1, [r7, #8]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 fb16 	bl	800a430 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f042 0208 	orr.w	r2, r2, #8
 8009e12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f022 0204 	bic.w	r2, r2, #4
 8009e22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	691a      	ldr	r2, [r3, #16]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	430a      	orrs	r2, r1
 8009e34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e36:	e023      	b.n	8009e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68b9      	ldr	r1, [r7, #8]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 fb5a 	bl	800a4f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	021a      	lsls	r2, r3, #8
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	430a      	orrs	r2, r1
 8009e76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009e78:	e002      	b.n	8009e80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop

08009e94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e9c:	bf00      	nop
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a40      	ldr	r2, [pc, #256]	; (8009ff8 <TIM_Base_SetConfig+0x114>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d013      	beq.n	8009f24 <TIM_Base_SetConfig+0x40>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f02:	d00f      	beq.n	8009f24 <TIM_Base_SetConfig+0x40>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a3d      	ldr	r2, [pc, #244]	; (8009ffc <TIM_Base_SetConfig+0x118>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d00b      	beq.n	8009f24 <TIM_Base_SetConfig+0x40>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a3c      	ldr	r2, [pc, #240]	; (800a000 <TIM_Base_SetConfig+0x11c>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d007      	beq.n	8009f24 <TIM_Base_SetConfig+0x40>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a3b      	ldr	r2, [pc, #236]	; (800a004 <TIM_Base_SetConfig+0x120>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d003      	beq.n	8009f24 <TIM_Base_SetConfig+0x40>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a3a      	ldr	r2, [pc, #232]	; (800a008 <TIM_Base_SetConfig+0x124>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d108      	bne.n	8009f36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a2f      	ldr	r2, [pc, #188]	; (8009ff8 <TIM_Base_SetConfig+0x114>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d01f      	beq.n	8009f7e <TIM_Base_SetConfig+0x9a>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f44:	d01b      	beq.n	8009f7e <TIM_Base_SetConfig+0x9a>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a2c      	ldr	r2, [pc, #176]	; (8009ffc <TIM_Base_SetConfig+0x118>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d017      	beq.n	8009f7e <TIM_Base_SetConfig+0x9a>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a2b      	ldr	r2, [pc, #172]	; (800a000 <TIM_Base_SetConfig+0x11c>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d013      	beq.n	8009f7e <TIM_Base_SetConfig+0x9a>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a2a      	ldr	r2, [pc, #168]	; (800a004 <TIM_Base_SetConfig+0x120>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d00f      	beq.n	8009f7e <TIM_Base_SetConfig+0x9a>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a29      	ldr	r2, [pc, #164]	; (800a008 <TIM_Base_SetConfig+0x124>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d00b      	beq.n	8009f7e <TIM_Base_SetConfig+0x9a>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	4a28      	ldr	r2, [pc, #160]	; (800a00c <TIM_Base_SetConfig+0x128>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d007      	beq.n	8009f7e <TIM_Base_SetConfig+0x9a>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a27      	ldr	r2, [pc, #156]	; (800a010 <TIM_Base_SetConfig+0x12c>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d003      	beq.n	8009f7e <TIM_Base_SetConfig+0x9a>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a26      	ldr	r2, [pc, #152]	; (800a014 <TIM_Base_SetConfig+0x130>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d108      	bne.n	8009f90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	695b      	ldr	r3, [r3, #20]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	689a      	ldr	r2, [r3, #8]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a10      	ldr	r2, [pc, #64]	; (8009ff8 <TIM_Base_SetConfig+0x114>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d00f      	beq.n	8009fdc <TIM_Base_SetConfig+0xf8>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a12      	ldr	r2, [pc, #72]	; (800a008 <TIM_Base_SetConfig+0x124>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d00b      	beq.n	8009fdc <TIM_Base_SetConfig+0xf8>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a11      	ldr	r2, [pc, #68]	; (800a00c <TIM_Base_SetConfig+0x128>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d007      	beq.n	8009fdc <TIM_Base_SetConfig+0xf8>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a10      	ldr	r2, [pc, #64]	; (800a010 <TIM_Base_SetConfig+0x12c>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d003      	beq.n	8009fdc <TIM_Base_SetConfig+0xf8>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a0f      	ldr	r2, [pc, #60]	; (800a014 <TIM_Base_SetConfig+0x130>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d103      	bne.n	8009fe4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	691a      	ldr	r2, [r3, #16]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	615a      	str	r2, [r3, #20]
}
 8009fea:	bf00      	nop
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	40010000 	.word	0x40010000
 8009ffc:	40000400 	.word	0x40000400
 800a000:	40000800 	.word	0x40000800
 800a004:	40000c00 	.word	0x40000c00
 800a008:	40010400 	.word	0x40010400
 800a00c:	40014000 	.word	0x40014000
 800a010:	40014400 	.word	0x40014400
 800a014:	40014800 	.word	0x40014800

0800a018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a018:	b480      	push	{r7}
 800a01a:	b087      	sub	sp, #28
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	f023 0201 	bic.w	r2, r3, #1
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	699b      	ldr	r3, [r3, #24]
 800a03e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	4b37      	ldr	r3, [pc, #220]	; (800a120 <TIM_OC1_SetConfig+0x108>)
 800a044:	4013      	ands	r3, r2
 800a046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f023 0303 	bic.w	r3, r3, #3
 800a04e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	4313      	orrs	r3, r2
 800a058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f023 0302 	bic.w	r3, r3, #2
 800a060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	697a      	ldr	r2, [r7, #20]
 800a068:	4313      	orrs	r3, r2
 800a06a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a2d      	ldr	r2, [pc, #180]	; (800a124 <TIM_OC1_SetConfig+0x10c>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d00f      	beq.n	800a094 <TIM_OC1_SetConfig+0x7c>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a2c      	ldr	r2, [pc, #176]	; (800a128 <TIM_OC1_SetConfig+0x110>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d00b      	beq.n	800a094 <TIM_OC1_SetConfig+0x7c>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4a2b      	ldr	r2, [pc, #172]	; (800a12c <TIM_OC1_SetConfig+0x114>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d007      	beq.n	800a094 <TIM_OC1_SetConfig+0x7c>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a2a      	ldr	r2, [pc, #168]	; (800a130 <TIM_OC1_SetConfig+0x118>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d003      	beq.n	800a094 <TIM_OC1_SetConfig+0x7c>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a29      	ldr	r2, [pc, #164]	; (800a134 <TIM_OC1_SetConfig+0x11c>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d10c      	bne.n	800a0ae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	f023 0308 	bic.w	r3, r3, #8
 800a09a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	f023 0304 	bic.w	r3, r3, #4
 800a0ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4a1c      	ldr	r2, [pc, #112]	; (800a124 <TIM_OC1_SetConfig+0x10c>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d00f      	beq.n	800a0d6 <TIM_OC1_SetConfig+0xbe>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a1b      	ldr	r2, [pc, #108]	; (800a128 <TIM_OC1_SetConfig+0x110>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d00b      	beq.n	800a0d6 <TIM_OC1_SetConfig+0xbe>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4a1a      	ldr	r2, [pc, #104]	; (800a12c <TIM_OC1_SetConfig+0x114>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d007      	beq.n	800a0d6 <TIM_OC1_SetConfig+0xbe>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4a19      	ldr	r2, [pc, #100]	; (800a130 <TIM_OC1_SetConfig+0x118>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d003      	beq.n	800a0d6 <TIM_OC1_SetConfig+0xbe>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a18      	ldr	r2, [pc, #96]	; (800a134 <TIM_OC1_SetConfig+0x11c>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d111      	bne.n	800a0fa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	695b      	ldr	r3, [r3, #20]
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	685a      	ldr	r2, [r3, #4]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	621a      	str	r2, [r3, #32]
}
 800a114:	bf00      	nop
 800a116:	371c      	adds	r7, #28
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	fffeff8f 	.word	0xfffeff8f
 800a124:	40010000 	.word	0x40010000
 800a128:	40010400 	.word	0x40010400
 800a12c:	40014000 	.word	0x40014000
 800a130:	40014400 	.word	0x40014400
 800a134:	40014800 	.word	0x40014800

0800a138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a138:	b480      	push	{r7}
 800a13a:	b087      	sub	sp, #28
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	f023 0210 	bic.w	r2, r3, #16
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a1b      	ldr	r3, [r3, #32]
 800a152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	699b      	ldr	r3, [r3, #24]
 800a15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	4b34      	ldr	r3, [pc, #208]	; (800a234 <TIM_OC2_SetConfig+0xfc>)
 800a164:	4013      	ands	r3, r2
 800a166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a16e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	021b      	lsls	r3, r3, #8
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	4313      	orrs	r3, r2
 800a17a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	f023 0320 	bic.w	r3, r3, #32
 800a182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	011b      	lsls	r3, r3, #4
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a29      	ldr	r2, [pc, #164]	; (800a238 <TIM_OC2_SetConfig+0x100>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d003      	beq.n	800a1a0 <TIM_OC2_SetConfig+0x68>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a28      	ldr	r2, [pc, #160]	; (800a23c <TIM_OC2_SetConfig+0x104>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d10d      	bne.n	800a1bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	011b      	lsls	r3, r3, #4
 800a1ae:	697a      	ldr	r2, [r7, #20]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a1e      	ldr	r2, [pc, #120]	; (800a238 <TIM_OC2_SetConfig+0x100>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d00f      	beq.n	800a1e4 <TIM_OC2_SetConfig+0xac>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a1d      	ldr	r2, [pc, #116]	; (800a23c <TIM_OC2_SetConfig+0x104>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d00b      	beq.n	800a1e4 <TIM_OC2_SetConfig+0xac>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a1c      	ldr	r2, [pc, #112]	; (800a240 <TIM_OC2_SetConfig+0x108>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d007      	beq.n	800a1e4 <TIM_OC2_SetConfig+0xac>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a1b      	ldr	r2, [pc, #108]	; (800a244 <TIM_OC2_SetConfig+0x10c>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d003      	beq.n	800a1e4 <TIM_OC2_SetConfig+0xac>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a1a      	ldr	r2, [pc, #104]	; (800a248 <TIM_OC2_SetConfig+0x110>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d113      	bne.n	800a20c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	695b      	ldr	r3, [r3, #20]
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	4313      	orrs	r3, r2
 800a20a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	621a      	str	r2, [r3, #32]
}
 800a226:	bf00      	nop
 800a228:	371c      	adds	r7, #28
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	feff8fff 	.word	0xfeff8fff
 800a238:	40010000 	.word	0x40010000
 800a23c:	40010400 	.word	0x40010400
 800a240:	40014000 	.word	0x40014000
 800a244:	40014400 	.word	0x40014400
 800a248:	40014800 	.word	0x40014800

0800a24c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	69db      	ldr	r3, [r3, #28]
 800a272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	4b33      	ldr	r3, [pc, #204]	; (800a344 <TIM_OC3_SetConfig+0xf8>)
 800a278:	4013      	ands	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f023 0303 	bic.w	r3, r3, #3
 800a282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	021b      	lsls	r3, r3, #8
 800a29c:	697a      	ldr	r2, [r7, #20]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a28      	ldr	r2, [pc, #160]	; (800a348 <TIM_OC3_SetConfig+0xfc>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d003      	beq.n	800a2b2 <TIM_OC3_SetConfig+0x66>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a27      	ldr	r2, [pc, #156]	; (800a34c <TIM_OC3_SetConfig+0x100>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d10d      	bne.n	800a2ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	021b      	lsls	r3, r3, #8
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a1d      	ldr	r2, [pc, #116]	; (800a348 <TIM_OC3_SetConfig+0xfc>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d00f      	beq.n	800a2f6 <TIM_OC3_SetConfig+0xaa>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a1c      	ldr	r2, [pc, #112]	; (800a34c <TIM_OC3_SetConfig+0x100>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d00b      	beq.n	800a2f6 <TIM_OC3_SetConfig+0xaa>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4a1b      	ldr	r2, [pc, #108]	; (800a350 <TIM_OC3_SetConfig+0x104>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d007      	beq.n	800a2f6 <TIM_OC3_SetConfig+0xaa>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a1a      	ldr	r2, [pc, #104]	; (800a354 <TIM_OC3_SetConfig+0x108>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d003      	beq.n	800a2f6 <TIM_OC3_SetConfig+0xaa>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a19      	ldr	r2, [pc, #100]	; (800a358 <TIM_OC3_SetConfig+0x10c>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d113      	bne.n	800a31e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	011b      	lsls	r3, r3, #4
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	4313      	orrs	r3, r2
 800a310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	011b      	lsls	r3, r3, #4
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	693a      	ldr	r2, [r7, #16]
 800a322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	697a      	ldr	r2, [r7, #20]
 800a336:	621a      	str	r2, [r3, #32]
}
 800a338:	bf00      	nop
 800a33a:	371c      	adds	r7, #28
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	fffeff8f 	.word	0xfffeff8f
 800a348:	40010000 	.word	0x40010000
 800a34c:	40010400 	.word	0x40010400
 800a350:	40014000 	.word	0x40014000
 800a354:	40014400 	.word	0x40014400
 800a358:	40014800 	.word	0x40014800

0800a35c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	69db      	ldr	r3, [r3, #28]
 800a382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	4b24      	ldr	r3, [pc, #144]	; (800a418 <TIM_OC4_SetConfig+0xbc>)
 800a388:	4013      	ands	r3, r2
 800a38a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	021b      	lsls	r3, r3, #8
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	031b      	lsls	r3, r3, #12
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a19      	ldr	r2, [pc, #100]	; (800a41c <TIM_OC4_SetConfig+0xc0>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d00f      	beq.n	800a3dc <TIM_OC4_SetConfig+0x80>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a18      	ldr	r2, [pc, #96]	; (800a420 <TIM_OC4_SetConfig+0xc4>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d00b      	beq.n	800a3dc <TIM_OC4_SetConfig+0x80>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a17      	ldr	r2, [pc, #92]	; (800a424 <TIM_OC4_SetConfig+0xc8>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d007      	beq.n	800a3dc <TIM_OC4_SetConfig+0x80>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a16      	ldr	r2, [pc, #88]	; (800a428 <TIM_OC4_SetConfig+0xcc>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d003      	beq.n	800a3dc <TIM_OC4_SetConfig+0x80>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4a15      	ldr	r2, [pc, #84]	; (800a42c <TIM_OC4_SetConfig+0xd0>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d109      	bne.n	800a3f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	695b      	ldr	r3, [r3, #20]
 800a3e8:	019b      	lsls	r3, r3, #6
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	693a      	ldr	r2, [r7, #16]
 800a408:	621a      	str	r2, [r3, #32]
}
 800a40a:	bf00      	nop
 800a40c:	371c      	adds	r7, #28
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	feff8fff 	.word	0xfeff8fff
 800a41c:	40010000 	.word	0x40010000
 800a420:	40010400 	.word	0x40010400
 800a424:	40014000 	.word	0x40014000
 800a428:	40014400 	.word	0x40014400
 800a42c:	40014800 	.word	0x40014800

0800a430 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a430:	b480      	push	{r7}
 800a432:	b087      	sub	sp, #28
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a1b      	ldr	r3, [r3, #32]
 800a44a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	4b21      	ldr	r3, [pc, #132]	; (800a4e0 <TIM_OC5_SetConfig+0xb0>)
 800a45c:	4013      	ands	r3, r2
 800a45e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	4313      	orrs	r3, r2
 800a468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a470:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	041b      	lsls	r3, r3, #16
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a18      	ldr	r2, [pc, #96]	; (800a4e4 <TIM_OC5_SetConfig+0xb4>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d00f      	beq.n	800a4a6 <TIM_OC5_SetConfig+0x76>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a17      	ldr	r2, [pc, #92]	; (800a4e8 <TIM_OC5_SetConfig+0xb8>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d00b      	beq.n	800a4a6 <TIM_OC5_SetConfig+0x76>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4a16      	ldr	r2, [pc, #88]	; (800a4ec <TIM_OC5_SetConfig+0xbc>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d007      	beq.n	800a4a6 <TIM_OC5_SetConfig+0x76>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a15      	ldr	r2, [pc, #84]	; (800a4f0 <TIM_OC5_SetConfig+0xc0>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d003      	beq.n	800a4a6 <TIM_OC5_SetConfig+0x76>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a14      	ldr	r2, [pc, #80]	; (800a4f4 <TIM_OC5_SetConfig+0xc4>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d109      	bne.n	800a4ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	695b      	ldr	r3, [r3, #20]
 800a4b2:	021b      	lsls	r3, r3, #8
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	697a      	ldr	r2, [r7, #20]
 800a4be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	685a      	ldr	r2, [r3, #4]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	621a      	str	r2, [r3, #32]
}
 800a4d4:	bf00      	nop
 800a4d6:	371c      	adds	r7, #28
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	fffeff8f 	.word	0xfffeff8f
 800a4e4:	40010000 	.word	0x40010000
 800a4e8:	40010400 	.word	0x40010400
 800a4ec:	40014000 	.word	0x40014000
 800a4f0:	40014400 	.word	0x40014400
 800a4f4:	40014800 	.word	0x40014800

0800a4f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b087      	sub	sp, #28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a1b      	ldr	r3, [r3, #32]
 800a512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	4b22      	ldr	r3, [pc, #136]	; (800a5ac <TIM_OC6_SetConfig+0xb4>)
 800a524:	4013      	ands	r3, r2
 800a526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	021b      	lsls	r3, r3, #8
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	4313      	orrs	r3, r2
 800a532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a53a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	051b      	lsls	r3, r3, #20
 800a542:	693a      	ldr	r2, [r7, #16]
 800a544:	4313      	orrs	r3, r2
 800a546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a19      	ldr	r2, [pc, #100]	; (800a5b0 <TIM_OC6_SetConfig+0xb8>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d00f      	beq.n	800a570 <TIM_OC6_SetConfig+0x78>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a18      	ldr	r2, [pc, #96]	; (800a5b4 <TIM_OC6_SetConfig+0xbc>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d00b      	beq.n	800a570 <TIM_OC6_SetConfig+0x78>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a17      	ldr	r2, [pc, #92]	; (800a5b8 <TIM_OC6_SetConfig+0xc0>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d007      	beq.n	800a570 <TIM_OC6_SetConfig+0x78>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a16      	ldr	r2, [pc, #88]	; (800a5bc <TIM_OC6_SetConfig+0xc4>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d003      	beq.n	800a570 <TIM_OC6_SetConfig+0x78>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a15      	ldr	r2, [pc, #84]	; (800a5c0 <TIM_OC6_SetConfig+0xc8>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d109      	bne.n	800a584 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a576:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	695b      	ldr	r3, [r3, #20]
 800a57c:	029b      	lsls	r3, r3, #10
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	4313      	orrs	r3, r2
 800a582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	697a      	ldr	r2, [r7, #20]
 800a588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	685a      	ldr	r2, [r3, #4]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	693a      	ldr	r2, [r7, #16]
 800a59c:	621a      	str	r2, [r3, #32]
}
 800a59e:	bf00      	nop
 800a5a0:	371c      	adds	r7, #28
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	feff8fff 	.word	0xfeff8fff
 800a5b0:	40010000 	.word	0x40010000
 800a5b4:	40010400 	.word	0x40010400
 800a5b8:	40014000 	.word	0x40014000
 800a5bc:	40014400 	.word	0x40014400
 800a5c0:	40014800 	.word	0x40014800

0800a5c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b087      	sub	sp, #28
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	f003 031f 	and.w	r3, r3, #31
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6a1a      	ldr	r2, [r3, #32]
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	43db      	mvns	r3, r3
 800a5e6:	401a      	ands	r2, r3
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6a1a      	ldr	r2, [r3, #32]
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	f003 031f 	and.w	r3, r3, #31
 800a5f6:	6879      	ldr	r1, [r7, #4]
 800a5f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a5fc:	431a      	orrs	r2, r3
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	621a      	str	r2, [r3, #32]
}
 800a602:	bf00      	nop
 800a604:	371c      	adds	r7, #28
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr

0800a60e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a60e:	b480      	push	{r7}
 800a610:	b083      	sub	sp, #12
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a616:	bf00      	nop
 800a618:	370c      	adds	r7, #12
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr

0800a622 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a622:	b480      	push	{r7}
 800a624:	b083      	sub	sp, #12
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a62a:	bf00      	nop
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a636:	b480      	push	{r7}
 800a638:	b083      	sub	sp, #12
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a63e:	bf00      	nop
 800a640:	370c      	adds	r7, #12
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr

0800a64a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b082      	sub	sp, #8
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d101      	bne.n	800a65c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	e042      	b.n	800a6e2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a662:	2b00      	cmp	r3, #0
 800a664:	d106      	bne.n	800a674 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f7f7 f8c2 	bl	80017f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2224      	movs	r2, #36	; 0x24
 800a678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f022 0201 	bic.w	r2, r2, #1
 800a68a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 f8c3 	bl	800a818 <UART_SetConfig>
 800a692:	4603      	mov	r3, r0
 800a694:	2b01      	cmp	r3, #1
 800a696:	d101      	bne.n	800a69c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	e022      	b.n	800a6e2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d002      	beq.n	800a6aa <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fe1f 	bl	800b2e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	685a      	ldr	r2, [r3, #4]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	689a      	ldr	r2, [r3, #8]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f042 0201 	orr.w	r2, r2, #1
 800a6d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 fea6 	bl	800b42c <UART_CheckIdleState>
 800a6e0:	4603      	mov	r3, r0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3708      	adds	r7, #8
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b08a      	sub	sp, #40	; 0x28
 800a6ee:	af02      	add	r7, sp, #8
 800a6f0:	60f8      	str	r0, [r7, #12]
 800a6f2:	60b9      	str	r1, [r7, #8]
 800a6f4:	603b      	str	r3, [r7, #0]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a700:	2b20      	cmp	r3, #32
 800a702:	f040 8083 	bne.w	800a80c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d002      	beq.n	800a712 <HAL_UART_Transmit+0x28>
 800a70c:	88fb      	ldrh	r3, [r7, #6]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d101      	bne.n	800a716 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	e07b      	b.n	800a80e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d101      	bne.n	800a724 <HAL_UART_Transmit+0x3a>
 800a720:	2302      	movs	r3, #2
 800a722:	e074      	b.n	800a80e <HAL_UART_Transmit+0x124>
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2221      	movs	r2, #33	; 0x21
 800a738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a73c:	f7f7 fa9c 	bl	8001c78 <HAL_GetTick>
 800a740:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	88fa      	ldrh	r2, [r7, #6]
 800a746:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	88fa      	ldrh	r2, [r7, #6]
 800a74e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a75a:	d108      	bne.n	800a76e <HAL_UART_Transmit+0x84>
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d104      	bne.n	800a76e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a764:	2300      	movs	r3, #0
 800a766:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	61bb      	str	r3, [r7, #24]
 800a76c:	e003      	b.n	800a776 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a772:	2300      	movs	r3, #0
 800a774:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a77e:	e02c      	b.n	800a7da <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	2200      	movs	r2, #0
 800a788:	2180      	movs	r1, #128	; 0x80
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f000 fe99 	bl	800b4c2 <UART_WaitOnFlagUntilTimeout>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d001      	beq.n	800a79a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a796:	2303      	movs	r3, #3
 800a798:	e039      	b.n	800a80e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d10b      	bne.n	800a7b8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	881b      	ldrh	r3, [r3, #0]
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	3302      	adds	r3, #2
 800a7b4:	61bb      	str	r3, [r7, #24]
 800a7b6:	e007      	b.n	800a7c8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	781a      	ldrb	r2, [r3, #0]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d1cc      	bne.n	800a780 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	2140      	movs	r1, #64	; 0x40
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f000 fe66 	bl	800b4c2 <UART_WaitOnFlagUntilTimeout>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e006      	b.n	800a80e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2220      	movs	r2, #32
 800a804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a808:	2300      	movs	r3, #0
 800a80a:	e000      	b.n	800a80e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a80c:	2302      	movs	r3, #2
  }
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3720      	adds	r7, #32
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
	...

0800a818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a81c:	b092      	sub	sp, #72	; 0x48
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	689a      	ldr	r2, [r3, #8]
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	691b      	ldr	r3, [r3, #16]
 800a830:	431a      	orrs	r2, r3
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	431a      	orrs	r2, r3
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	69db      	ldr	r3, [r3, #28]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	4bbe      	ldr	r3, [pc, #760]	; (800ab40 <UART_SetConfig+0x328>)
 800a848:	4013      	ands	r3, r2
 800a84a:	697a      	ldr	r2, [r7, #20]
 800a84c:	6812      	ldr	r2, [r2, #0]
 800a84e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a850:	430b      	orrs	r3, r1
 800a852:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	68da      	ldr	r2, [r3, #12]
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	430a      	orrs	r2, r1
 800a868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4ab3      	ldr	r2, [pc, #716]	; (800ab44 <UART_SetConfig+0x32c>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d004      	beq.n	800a884 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	6a1b      	ldr	r3, [r3, #32]
 800a87e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a880:	4313      	orrs	r3, r2
 800a882:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	689a      	ldr	r2, [r3, #8]
 800a88a:	4baf      	ldr	r3, [pc, #700]	; (800ab48 <UART_SetConfig+0x330>)
 800a88c:	4013      	ands	r3, r2
 800a88e:	697a      	ldr	r2, [r7, #20]
 800a890:	6812      	ldr	r2, [r2, #0]
 800a892:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a894:	430b      	orrs	r3, r1
 800a896:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89e:	f023 010f 	bic.w	r1, r3, #15
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	430a      	orrs	r2, r1
 800a8ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4aa6      	ldr	r2, [pc, #664]	; (800ab4c <UART_SetConfig+0x334>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d177      	bne.n	800a9a8 <UART_SetConfig+0x190>
 800a8b8:	4ba5      	ldr	r3, [pc, #660]	; (800ab50 <UART_SetConfig+0x338>)
 800a8ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8c0:	2b28      	cmp	r3, #40	; 0x28
 800a8c2:	d86d      	bhi.n	800a9a0 <UART_SetConfig+0x188>
 800a8c4:	a201      	add	r2, pc, #4	; (adr r2, 800a8cc <UART_SetConfig+0xb4>)
 800a8c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ca:	bf00      	nop
 800a8cc:	0800a971 	.word	0x0800a971
 800a8d0:	0800a9a1 	.word	0x0800a9a1
 800a8d4:	0800a9a1 	.word	0x0800a9a1
 800a8d8:	0800a9a1 	.word	0x0800a9a1
 800a8dc:	0800a9a1 	.word	0x0800a9a1
 800a8e0:	0800a9a1 	.word	0x0800a9a1
 800a8e4:	0800a9a1 	.word	0x0800a9a1
 800a8e8:	0800a9a1 	.word	0x0800a9a1
 800a8ec:	0800a979 	.word	0x0800a979
 800a8f0:	0800a9a1 	.word	0x0800a9a1
 800a8f4:	0800a9a1 	.word	0x0800a9a1
 800a8f8:	0800a9a1 	.word	0x0800a9a1
 800a8fc:	0800a9a1 	.word	0x0800a9a1
 800a900:	0800a9a1 	.word	0x0800a9a1
 800a904:	0800a9a1 	.word	0x0800a9a1
 800a908:	0800a9a1 	.word	0x0800a9a1
 800a90c:	0800a981 	.word	0x0800a981
 800a910:	0800a9a1 	.word	0x0800a9a1
 800a914:	0800a9a1 	.word	0x0800a9a1
 800a918:	0800a9a1 	.word	0x0800a9a1
 800a91c:	0800a9a1 	.word	0x0800a9a1
 800a920:	0800a9a1 	.word	0x0800a9a1
 800a924:	0800a9a1 	.word	0x0800a9a1
 800a928:	0800a9a1 	.word	0x0800a9a1
 800a92c:	0800a989 	.word	0x0800a989
 800a930:	0800a9a1 	.word	0x0800a9a1
 800a934:	0800a9a1 	.word	0x0800a9a1
 800a938:	0800a9a1 	.word	0x0800a9a1
 800a93c:	0800a9a1 	.word	0x0800a9a1
 800a940:	0800a9a1 	.word	0x0800a9a1
 800a944:	0800a9a1 	.word	0x0800a9a1
 800a948:	0800a9a1 	.word	0x0800a9a1
 800a94c:	0800a991 	.word	0x0800a991
 800a950:	0800a9a1 	.word	0x0800a9a1
 800a954:	0800a9a1 	.word	0x0800a9a1
 800a958:	0800a9a1 	.word	0x0800a9a1
 800a95c:	0800a9a1 	.word	0x0800a9a1
 800a960:	0800a9a1 	.word	0x0800a9a1
 800a964:	0800a9a1 	.word	0x0800a9a1
 800a968:	0800a9a1 	.word	0x0800a9a1
 800a96c:	0800a999 	.word	0x0800a999
 800a970:	2301      	movs	r3, #1
 800a972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a976:	e222      	b.n	800adbe <UART_SetConfig+0x5a6>
 800a978:	2304      	movs	r3, #4
 800a97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a97e:	e21e      	b.n	800adbe <UART_SetConfig+0x5a6>
 800a980:	2308      	movs	r3, #8
 800a982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a986:	e21a      	b.n	800adbe <UART_SetConfig+0x5a6>
 800a988:	2310      	movs	r3, #16
 800a98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a98e:	e216      	b.n	800adbe <UART_SetConfig+0x5a6>
 800a990:	2320      	movs	r3, #32
 800a992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a996:	e212      	b.n	800adbe <UART_SetConfig+0x5a6>
 800a998:	2340      	movs	r3, #64	; 0x40
 800a99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a99e:	e20e      	b.n	800adbe <UART_SetConfig+0x5a6>
 800a9a0:	2380      	movs	r3, #128	; 0x80
 800a9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9a6:	e20a      	b.n	800adbe <UART_SetConfig+0x5a6>
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a69      	ldr	r2, [pc, #420]	; (800ab54 <UART_SetConfig+0x33c>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d130      	bne.n	800aa14 <UART_SetConfig+0x1fc>
 800a9b2:	4b67      	ldr	r3, [pc, #412]	; (800ab50 <UART_SetConfig+0x338>)
 800a9b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9b6:	f003 0307 	and.w	r3, r3, #7
 800a9ba:	2b05      	cmp	r3, #5
 800a9bc:	d826      	bhi.n	800aa0c <UART_SetConfig+0x1f4>
 800a9be:	a201      	add	r2, pc, #4	; (adr r2, 800a9c4 <UART_SetConfig+0x1ac>)
 800a9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c4:	0800a9dd 	.word	0x0800a9dd
 800a9c8:	0800a9e5 	.word	0x0800a9e5
 800a9cc:	0800a9ed 	.word	0x0800a9ed
 800a9d0:	0800a9f5 	.word	0x0800a9f5
 800a9d4:	0800a9fd 	.word	0x0800a9fd
 800a9d8:	0800aa05 	.word	0x0800aa05
 800a9dc:	2300      	movs	r3, #0
 800a9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9e2:	e1ec      	b.n	800adbe <UART_SetConfig+0x5a6>
 800a9e4:	2304      	movs	r3, #4
 800a9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ea:	e1e8      	b.n	800adbe <UART_SetConfig+0x5a6>
 800a9ec:	2308      	movs	r3, #8
 800a9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9f2:	e1e4      	b.n	800adbe <UART_SetConfig+0x5a6>
 800a9f4:	2310      	movs	r3, #16
 800a9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9fa:	e1e0      	b.n	800adbe <UART_SetConfig+0x5a6>
 800a9fc:	2320      	movs	r3, #32
 800a9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa02:	e1dc      	b.n	800adbe <UART_SetConfig+0x5a6>
 800aa04:	2340      	movs	r3, #64	; 0x40
 800aa06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa0a:	e1d8      	b.n	800adbe <UART_SetConfig+0x5a6>
 800aa0c:	2380      	movs	r3, #128	; 0x80
 800aa0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa12:	e1d4      	b.n	800adbe <UART_SetConfig+0x5a6>
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a4f      	ldr	r2, [pc, #316]	; (800ab58 <UART_SetConfig+0x340>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d130      	bne.n	800aa80 <UART_SetConfig+0x268>
 800aa1e:	4b4c      	ldr	r3, [pc, #304]	; (800ab50 <UART_SetConfig+0x338>)
 800aa20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa22:	f003 0307 	and.w	r3, r3, #7
 800aa26:	2b05      	cmp	r3, #5
 800aa28:	d826      	bhi.n	800aa78 <UART_SetConfig+0x260>
 800aa2a:	a201      	add	r2, pc, #4	; (adr r2, 800aa30 <UART_SetConfig+0x218>)
 800aa2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa30:	0800aa49 	.word	0x0800aa49
 800aa34:	0800aa51 	.word	0x0800aa51
 800aa38:	0800aa59 	.word	0x0800aa59
 800aa3c:	0800aa61 	.word	0x0800aa61
 800aa40:	0800aa69 	.word	0x0800aa69
 800aa44:	0800aa71 	.word	0x0800aa71
 800aa48:	2300      	movs	r3, #0
 800aa4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa4e:	e1b6      	b.n	800adbe <UART_SetConfig+0x5a6>
 800aa50:	2304      	movs	r3, #4
 800aa52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa56:	e1b2      	b.n	800adbe <UART_SetConfig+0x5a6>
 800aa58:	2308      	movs	r3, #8
 800aa5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa5e:	e1ae      	b.n	800adbe <UART_SetConfig+0x5a6>
 800aa60:	2310      	movs	r3, #16
 800aa62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa66:	e1aa      	b.n	800adbe <UART_SetConfig+0x5a6>
 800aa68:	2320      	movs	r3, #32
 800aa6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa6e:	e1a6      	b.n	800adbe <UART_SetConfig+0x5a6>
 800aa70:	2340      	movs	r3, #64	; 0x40
 800aa72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa76:	e1a2      	b.n	800adbe <UART_SetConfig+0x5a6>
 800aa78:	2380      	movs	r3, #128	; 0x80
 800aa7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa7e:	e19e      	b.n	800adbe <UART_SetConfig+0x5a6>
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a35      	ldr	r2, [pc, #212]	; (800ab5c <UART_SetConfig+0x344>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d130      	bne.n	800aaec <UART_SetConfig+0x2d4>
 800aa8a:	4b31      	ldr	r3, [pc, #196]	; (800ab50 <UART_SetConfig+0x338>)
 800aa8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa8e:	f003 0307 	and.w	r3, r3, #7
 800aa92:	2b05      	cmp	r3, #5
 800aa94:	d826      	bhi.n	800aae4 <UART_SetConfig+0x2cc>
 800aa96:	a201      	add	r2, pc, #4	; (adr r2, 800aa9c <UART_SetConfig+0x284>)
 800aa98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9c:	0800aab5 	.word	0x0800aab5
 800aaa0:	0800aabd 	.word	0x0800aabd
 800aaa4:	0800aac5 	.word	0x0800aac5
 800aaa8:	0800aacd 	.word	0x0800aacd
 800aaac:	0800aad5 	.word	0x0800aad5
 800aab0:	0800aadd 	.word	0x0800aadd
 800aab4:	2300      	movs	r3, #0
 800aab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaba:	e180      	b.n	800adbe <UART_SetConfig+0x5a6>
 800aabc:	2304      	movs	r3, #4
 800aabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aac2:	e17c      	b.n	800adbe <UART_SetConfig+0x5a6>
 800aac4:	2308      	movs	r3, #8
 800aac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaca:	e178      	b.n	800adbe <UART_SetConfig+0x5a6>
 800aacc:	2310      	movs	r3, #16
 800aace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aad2:	e174      	b.n	800adbe <UART_SetConfig+0x5a6>
 800aad4:	2320      	movs	r3, #32
 800aad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aada:	e170      	b.n	800adbe <UART_SetConfig+0x5a6>
 800aadc:	2340      	movs	r3, #64	; 0x40
 800aade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aae2:	e16c      	b.n	800adbe <UART_SetConfig+0x5a6>
 800aae4:	2380      	movs	r3, #128	; 0x80
 800aae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaea:	e168      	b.n	800adbe <UART_SetConfig+0x5a6>
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a1b      	ldr	r2, [pc, #108]	; (800ab60 <UART_SetConfig+0x348>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d142      	bne.n	800ab7c <UART_SetConfig+0x364>
 800aaf6:	4b16      	ldr	r3, [pc, #88]	; (800ab50 <UART_SetConfig+0x338>)
 800aaf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aafa:	f003 0307 	and.w	r3, r3, #7
 800aafe:	2b05      	cmp	r3, #5
 800ab00:	d838      	bhi.n	800ab74 <UART_SetConfig+0x35c>
 800ab02:	a201      	add	r2, pc, #4	; (adr r2, 800ab08 <UART_SetConfig+0x2f0>)
 800ab04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab08:	0800ab21 	.word	0x0800ab21
 800ab0c:	0800ab29 	.word	0x0800ab29
 800ab10:	0800ab31 	.word	0x0800ab31
 800ab14:	0800ab39 	.word	0x0800ab39
 800ab18:	0800ab65 	.word	0x0800ab65
 800ab1c:	0800ab6d 	.word	0x0800ab6d
 800ab20:	2300      	movs	r3, #0
 800ab22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab26:	e14a      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ab28:	2304      	movs	r3, #4
 800ab2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab2e:	e146      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ab30:	2308      	movs	r3, #8
 800ab32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab36:	e142      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ab38:	2310      	movs	r3, #16
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab3e:	e13e      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ab40:	cfff69f3 	.word	0xcfff69f3
 800ab44:	58000c00 	.word	0x58000c00
 800ab48:	11fff4ff 	.word	0x11fff4ff
 800ab4c:	40011000 	.word	0x40011000
 800ab50:	58024400 	.word	0x58024400
 800ab54:	40004400 	.word	0x40004400
 800ab58:	40004800 	.word	0x40004800
 800ab5c:	40004c00 	.word	0x40004c00
 800ab60:	40005000 	.word	0x40005000
 800ab64:	2320      	movs	r3, #32
 800ab66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab6a:	e128      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ab6c:	2340      	movs	r3, #64	; 0x40
 800ab6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab72:	e124      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ab74:	2380      	movs	r3, #128	; 0x80
 800ab76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab7a:	e120      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4acb      	ldr	r2, [pc, #812]	; (800aeb0 <UART_SetConfig+0x698>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d176      	bne.n	800ac74 <UART_SetConfig+0x45c>
 800ab86:	4bcb      	ldr	r3, [pc, #812]	; (800aeb4 <UART_SetConfig+0x69c>)
 800ab88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab8e:	2b28      	cmp	r3, #40	; 0x28
 800ab90:	d86c      	bhi.n	800ac6c <UART_SetConfig+0x454>
 800ab92:	a201      	add	r2, pc, #4	; (adr r2, 800ab98 <UART_SetConfig+0x380>)
 800ab94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab98:	0800ac3d 	.word	0x0800ac3d
 800ab9c:	0800ac6d 	.word	0x0800ac6d
 800aba0:	0800ac6d 	.word	0x0800ac6d
 800aba4:	0800ac6d 	.word	0x0800ac6d
 800aba8:	0800ac6d 	.word	0x0800ac6d
 800abac:	0800ac6d 	.word	0x0800ac6d
 800abb0:	0800ac6d 	.word	0x0800ac6d
 800abb4:	0800ac6d 	.word	0x0800ac6d
 800abb8:	0800ac45 	.word	0x0800ac45
 800abbc:	0800ac6d 	.word	0x0800ac6d
 800abc0:	0800ac6d 	.word	0x0800ac6d
 800abc4:	0800ac6d 	.word	0x0800ac6d
 800abc8:	0800ac6d 	.word	0x0800ac6d
 800abcc:	0800ac6d 	.word	0x0800ac6d
 800abd0:	0800ac6d 	.word	0x0800ac6d
 800abd4:	0800ac6d 	.word	0x0800ac6d
 800abd8:	0800ac4d 	.word	0x0800ac4d
 800abdc:	0800ac6d 	.word	0x0800ac6d
 800abe0:	0800ac6d 	.word	0x0800ac6d
 800abe4:	0800ac6d 	.word	0x0800ac6d
 800abe8:	0800ac6d 	.word	0x0800ac6d
 800abec:	0800ac6d 	.word	0x0800ac6d
 800abf0:	0800ac6d 	.word	0x0800ac6d
 800abf4:	0800ac6d 	.word	0x0800ac6d
 800abf8:	0800ac55 	.word	0x0800ac55
 800abfc:	0800ac6d 	.word	0x0800ac6d
 800ac00:	0800ac6d 	.word	0x0800ac6d
 800ac04:	0800ac6d 	.word	0x0800ac6d
 800ac08:	0800ac6d 	.word	0x0800ac6d
 800ac0c:	0800ac6d 	.word	0x0800ac6d
 800ac10:	0800ac6d 	.word	0x0800ac6d
 800ac14:	0800ac6d 	.word	0x0800ac6d
 800ac18:	0800ac5d 	.word	0x0800ac5d
 800ac1c:	0800ac6d 	.word	0x0800ac6d
 800ac20:	0800ac6d 	.word	0x0800ac6d
 800ac24:	0800ac6d 	.word	0x0800ac6d
 800ac28:	0800ac6d 	.word	0x0800ac6d
 800ac2c:	0800ac6d 	.word	0x0800ac6d
 800ac30:	0800ac6d 	.word	0x0800ac6d
 800ac34:	0800ac6d 	.word	0x0800ac6d
 800ac38:	0800ac65 	.word	0x0800ac65
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac42:	e0bc      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ac44:	2304      	movs	r3, #4
 800ac46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac4a:	e0b8      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ac4c:	2308      	movs	r3, #8
 800ac4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac52:	e0b4      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ac54:	2310      	movs	r3, #16
 800ac56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac5a:	e0b0      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ac5c:	2320      	movs	r3, #32
 800ac5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac62:	e0ac      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ac64:	2340      	movs	r3, #64	; 0x40
 800ac66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac6a:	e0a8      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ac6c:	2380      	movs	r3, #128	; 0x80
 800ac6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac72:	e0a4      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a8f      	ldr	r2, [pc, #572]	; (800aeb8 <UART_SetConfig+0x6a0>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d130      	bne.n	800ace0 <UART_SetConfig+0x4c8>
 800ac7e:	4b8d      	ldr	r3, [pc, #564]	; (800aeb4 <UART_SetConfig+0x69c>)
 800ac80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac82:	f003 0307 	and.w	r3, r3, #7
 800ac86:	2b05      	cmp	r3, #5
 800ac88:	d826      	bhi.n	800acd8 <UART_SetConfig+0x4c0>
 800ac8a:	a201      	add	r2, pc, #4	; (adr r2, 800ac90 <UART_SetConfig+0x478>)
 800ac8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac90:	0800aca9 	.word	0x0800aca9
 800ac94:	0800acb1 	.word	0x0800acb1
 800ac98:	0800acb9 	.word	0x0800acb9
 800ac9c:	0800acc1 	.word	0x0800acc1
 800aca0:	0800acc9 	.word	0x0800acc9
 800aca4:	0800acd1 	.word	0x0800acd1
 800aca8:	2300      	movs	r3, #0
 800acaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acae:	e086      	b.n	800adbe <UART_SetConfig+0x5a6>
 800acb0:	2304      	movs	r3, #4
 800acb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acb6:	e082      	b.n	800adbe <UART_SetConfig+0x5a6>
 800acb8:	2308      	movs	r3, #8
 800acba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acbe:	e07e      	b.n	800adbe <UART_SetConfig+0x5a6>
 800acc0:	2310      	movs	r3, #16
 800acc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acc6:	e07a      	b.n	800adbe <UART_SetConfig+0x5a6>
 800acc8:	2320      	movs	r3, #32
 800acca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acce:	e076      	b.n	800adbe <UART_SetConfig+0x5a6>
 800acd0:	2340      	movs	r3, #64	; 0x40
 800acd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acd6:	e072      	b.n	800adbe <UART_SetConfig+0x5a6>
 800acd8:	2380      	movs	r3, #128	; 0x80
 800acda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acde:	e06e      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a75      	ldr	r2, [pc, #468]	; (800aebc <UART_SetConfig+0x6a4>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d130      	bne.n	800ad4c <UART_SetConfig+0x534>
 800acea:	4b72      	ldr	r3, [pc, #456]	; (800aeb4 <UART_SetConfig+0x69c>)
 800acec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acee:	f003 0307 	and.w	r3, r3, #7
 800acf2:	2b05      	cmp	r3, #5
 800acf4:	d826      	bhi.n	800ad44 <UART_SetConfig+0x52c>
 800acf6:	a201      	add	r2, pc, #4	; (adr r2, 800acfc <UART_SetConfig+0x4e4>)
 800acf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acfc:	0800ad15 	.word	0x0800ad15
 800ad00:	0800ad1d 	.word	0x0800ad1d
 800ad04:	0800ad25 	.word	0x0800ad25
 800ad08:	0800ad2d 	.word	0x0800ad2d
 800ad0c:	0800ad35 	.word	0x0800ad35
 800ad10:	0800ad3d 	.word	0x0800ad3d
 800ad14:	2300      	movs	r3, #0
 800ad16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad1a:	e050      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ad1c:	2304      	movs	r3, #4
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad22:	e04c      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ad24:	2308      	movs	r3, #8
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad2a:	e048      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ad2c:	2310      	movs	r3, #16
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad32:	e044      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ad34:	2320      	movs	r3, #32
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad3a:	e040      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ad3c:	2340      	movs	r3, #64	; 0x40
 800ad3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad42:	e03c      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ad44:	2380      	movs	r3, #128	; 0x80
 800ad46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad4a:	e038      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a5b      	ldr	r2, [pc, #364]	; (800aec0 <UART_SetConfig+0x6a8>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d130      	bne.n	800adb8 <UART_SetConfig+0x5a0>
 800ad56:	4b57      	ldr	r3, [pc, #348]	; (800aeb4 <UART_SetConfig+0x69c>)
 800ad58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad5a:	f003 0307 	and.w	r3, r3, #7
 800ad5e:	2b05      	cmp	r3, #5
 800ad60:	d826      	bhi.n	800adb0 <UART_SetConfig+0x598>
 800ad62:	a201      	add	r2, pc, #4	; (adr r2, 800ad68 <UART_SetConfig+0x550>)
 800ad64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad68:	0800ad81 	.word	0x0800ad81
 800ad6c:	0800ad89 	.word	0x0800ad89
 800ad70:	0800ad91 	.word	0x0800ad91
 800ad74:	0800ad99 	.word	0x0800ad99
 800ad78:	0800ada1 	.word	0x0800ada1
 800ad7c:	0800ada9 	.word	0x0800ada9
 800ad80:	2302      	movs	r3, #2
 800ad82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad86:	e01a      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ad88:	2304      	movs	r3, #4
 800ad8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad8e:	e016      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ad90:	2308      	movs	r3, #8
 800ad92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad96:	e012      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ad98:	2310      	movs	r3, #16
 800ad9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad9e:	e00e      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ada0:	2320      	movs	r3, #32
 800ada2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ada6:	e00a      	b.n	800adbe <UART_SetConfig+0x5a6>
 800ada8:	2340      	movs	r3, #64	; 0x40
 800adaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adae:	e006      	b.n	800adbe <UART_SetConfig+0x5a6>
 800adb0:	2380      	movs	r3, #128	; 0x80
 800adb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adb6:	e002      	b.n	800adbe <UART_SetConfig+0x5a6>
 800adb8:	2380      	movs	r3, #128	; 0x80
 800adba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a3f      	ldr	r2, [pc, #252]	; (800aec0 <UART_SetConfig+0x6a8>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	f040 80f8 	bne.w	800afba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800adca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800adce:	2b20      	cmp	r3, #32
 800add0:	dc46      	bgt.n	800ae60 <UART_SetConfig+0x648>
 800add2:	2b02      	cmp	r3, #2
 800add4:	f2c0 8082 	blt.w	800aedc <UART_SetConfig+0x6c4>
 800add8:	3b02      	subs	r3, #2
 800adda:	2b1e      	cmp	r3, #30
 800addc:	d87e      	bhi.n	800aedc <UART_SetConfig+0x6c4>
 800adde:	a201      	add	r2, pc, #4	; (adr r2, 800ade4 <UART_SetConfig+0x5cc>)
 800ade0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade4:	0800ae67 	.word	0x0800ae67
 800ade8:	0800aedd 	.word	0x0800aedd
 800adec:	0800ae6f 	.word	0x0800ae6f
 800adf0:	0800aedd 	.word	0x0800aedd
 800adf4:	0800aedd 	.word	0x0800aedd
 800adf8:	0800aedd 	.word	0x0800aedd
 800adfc:	0800ae7f 	.word	0x0800ae7f
 800ae00:	0800aedd 	.word	0x0800aedd
 800ae04:	0800aedd 	.word	0x0800aedd
 800ae08:	0800aedd 	.word	0x0800aedd
 800ae0c:	0800aedd 	.word	0x0800aedd
 800ae10:	0800aedd 	.word	0x0800aedd
 800ae14:	0800aedd 	.word	0x0800aedd
 800ae18:	0800aedd 	.word	0x0800aedd
 800ae1c:	0800ae8f 	.word	0x0800ae8f
 800ae20:	0800aedd 	.word	0x0800aedd
 800ae24:	0800aedd 	.word	0x0800aedd
 800ae28:	0800aedd 	.word	0x0800aedd
 800ae2c:	0800aedd 	.word	0x0800aedd
 800ae30:	0800aedd 	.word	0x0800aedd
 800ae34:	0800aedd 	.word	0x0800aedd
 800ae38:	0800aedd 	.word	0x0800aedd
 800ae3c:	0800aedd 	.word	0x0800aedd
 800ae40:	0800aedd 	.word	0x0800aedd
 800ae44:	0800aedd 	.word	0x0800aedd
 800ae48:	0800aedd 	.word	0x0800aedd
 800ae4c:	0800aedd 	.word	0x0800aedd
 800ae50:	0800aedd 	.word	0x0800aedd
 800ae54:	0800aedd 	.word	0x0800aedd
 800ae58:	0800aedd 	.word	0x0800aedd
 800ae5c:	0800aecf 	.word	0x0800aecf
 800ae60:	2b40      	cmp	r3, #64	; 0x40
 800ae62:	d037      	beq.n	800aed4 <UART_SetConfig+0x6bc>
 800ae64:	e03a      	b.n	800aedc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ae66:	f7fd fe37 	bl	8008ad8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ae6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae6c:	e03c      	b.n	800aee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fd fe46 	bl	8008b04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae7c:	e034      	b.n	800aee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae7e:	f107 0318 	add.w	r3, r7, #24
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fd ff92 	bl	8008dac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae8c:	e02c      	b.n	800aee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae8e:	4b09      	ldr	r3, [pc, #36]	; (800aeb4 <UART_SetConfig+0x69c>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f003 0320 	and.w	r3, r3, #32
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d016      	beq.n	800aec8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae9a:	4b06      	ldr	r3, [pc, #24]	; (800aeb4 <UART_SetConfig+0x69c>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	08db      	lsrs	r3, r3, #3
 800aea0:	f003 0303 	and.w	r3, r3, #3
 800aea4:	4a07      	ldr	r2, [pc, #28]	; (800aec4 <UART_SetConfig+0x6ac>)
 800aea6:	fa22 f303 	lsr.w	r3, r2, r3
 800aeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aeac:	e01c      	b.n	800aee8 <UART_SetConfig+0x6d0>
 800aeae:	bf00      	nop
 800aeb0:	40011400 	.word	0x40011400
 800aeb4:	58024400 	.word	0x58024400
 800aeb8:	40007800 	.word	0x40007800
 800aebc:	40007c00 	.word	0x40007c00
 800aec0:	58000c00 	.word	0x58000c00
 800aec4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800aec8:	4b9d      	ldr	r3, [pc, #628]	; (800b140 <UART_SetConfig+0x928>)
 800aeca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aecc:	e00c      	b.n	800aee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aece:	4b9d      	ldr	r3, [pc, #628]	; (800b144 <UART_SetConfig+0x92c>)
 800aed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aed2:	e009      	b.n	800aee8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aed4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeda:	e005      	b.n	800aee8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800aedc:	2300      	movs	r3, #0
 800aede:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aee6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f000 81de 	beq.w	800b2ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef4:	4a94      	ldr	r2, [pc, #592]	; (800b148 <UART_SetConfig+0x930>)
 800aef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aefa:	461a      	mov	r2, r3
 800aefc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aefe:	fbb3 f3f2 	udiv	r3, r3, r2
 800af02:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	685a      	ldr	r2, [r3, #4]
 800af08:	4613      	mov	r3, r2
 800af0a:	005b      	lsls	r3, r3, #1
 800af0c:	4413      	add	r3, r2
 800af0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af10:	429a      	cmp	r2, r3
 800af12:	d305      	bcc.n	800af20 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d903      	bls.n	800af28 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800af26:	e1c1      	b.n	800b2ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af2a:	2200      	movs	r2, #0
 800af2c:	60bb      	str	r3, [r7, #8]
 800af2e:	60fa      	str	r2, [r7, #12]
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	4a84      	ldr	r2, [pc, #528]	; (800b148 <UART_SetConfig+0x930>)
 800af36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	2200      	movs	r2, #0
 800af3e:	603b      	str	r3, [r7, #0]
 800af40:	607a      	str	r2, [r7, #4]
 800af42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af4a:	f7f5 fa19 	bl	8000380 <__aeabi_uldivmod>
 800af4e:	4602      	mov	r2, r0
 800af50:	460b      	mov	r3, r1
 800af52:	4610      	mov	r0, r2
 800af54:	4619      	mov	r1, r3
 800af56:	f04f 0200 	mov.w	r2, #0
 800af5a:	f04f 0300 	mov.w	r3, #0
 800af5e:	020b      	lsls	r3, r1, #8
 800af60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af64:	0202      	lsls	r2, r0, #8
 800af66:	6979      	ldr	r1, [r7, #20]
 800af68:	6849      	ldr	r1, [r1, #4]
 800af6a:	0849      	lsrs	r1, r1, #1
 800af6c:	2000      	movs	r0, #0
 800af6e:	460c      	mov	r4, r1
 800af70:	4605      	mov	r5, r0
 800af72:	eb12 0804 	adds.w	r8, r2, r4
 800af76:	eb43 0905 	adc.w	r9, r3, r5
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	469a      	mov	sl, r3
 800af82:	4693      	mov	fp, r2
 800af84:	4652      	mov	r2, sl
 800af86:	465b      	mov	r3, fp
 800af88:	4640      	mov	r0, r8
 800af8a:	4649      	mov	r1, r9
 800af8c:	f7f5 f9f8 	bl	8000380 <__aeabi_uldivmod>
 800af90:	4602      	mov	r2, r0
 800af92:	460b      	mov	r3, r1
 800af94:	4613      	mov	r3, r2
 800af96:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af9e:	d308      	bcc.n	800afb2 <UART_SetConfig+0x79a>
 800afa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afa6:	d204      	bcs.n	800afb2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afae:	60da      	str	r2, [r3, #12]
 800afb0:	e17c      	b.n	800b2ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800afb8:	e178      	b.n	800b2ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	69db      	ldr	r3, [r3, #28]
 800afbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afc2:	f040 80c5 	bne.w	800b150 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800afc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800afca:	2b20      	cmp	r3, #32
 800afcc:	dc48      	bgt.n	800b060 <UART_SetConfig+0x848>
 800afce:	2b00      	cmp	r3, #0
 800afd0:	db7b      	blt.n	800b0ca <UART_SetConfig+0x8b2>
 800afd2:	2b20      	cmp	r3, #32
 800afd4:	d879      	bhi.n	800b0ca <UART_SetConfig+0x8b2>
 800afd6:	a201      	add	r2, pc, #4	; (adr r2, 800afdc <UART_SetConfig+0x7c4>)
 800afd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afdc:	0800b067 	.word	0x0800b067
 800afe0:	0800b06f 	.word	0x0800b06f
 800afe4:	0800b0cb 	.word	0x0800b0cb
 800afe8:	0800b0cb 	.word	0x0800b0cb
 800afec:	0800b077 	.word	0x0800b077
 800aff0:	0800b0cb 	.word	0x0800b0cb
 800aff4:	0800b0cb 	.word	0x0800b0cb
 800aff8:	0800b0cb 	.word	0x0800b0cb
 800affc:	0800b087 	.word	0x0800b087
 800b000:	0800b0cb 	.word	0x0800b0cb
 800b004:	0800b0cb 	.word	0x0800b0cb
 800b008:	0800b0cb 	.word	0x0800b0cb
 800b00c:	0800b0cb 	.word	0x0800b0cb
 800b010:	0800b0cb 	.word	0x0800b0cb
 800b014:	0800b0cb 	.word	0x0800b0cb
 800b018:	0800b0cb 	.word	0x0800b0cb
 800b01c:	0800b097 	.word	0x0800b097
 800b020:	0800b0cb 	.word	0x0800b0cb
 800b024:	0800b0cb 	.word	0x0800b0cb
 800b028:	0800b0cb 	.word	0x0800b0cb
 800b02c:	0800b0cb 	.word	0x0800b0cb
 800b030:	0800b0cb 	.word	0x0800b0cb
 800b034:	0800b0cb 	.word	0x0800b0cb
 800b038:	0800b0cb 	.word	0x0800b0cb
 800b03c:	0800b0cb 	.word	0x0800b0cb
 800b040:	0800b0cb 	.word	0x0800b0cb
 800b044:	0800b0cb 	.word	0x0800b0cb
 800b048:	0800b0cb 	.word	0x0800b0cb
 800b04c:	0800b0cb 	.word	0x0800b0cb
 800b050:	0800b0cb 	.word	0x0800b0cb
 800b054:	0800b0cb 	.word	0x0800b0cb
 800b058:	0800b0cb 	.word	0x0800b0cb
 800b05c:	0800b0bd 	.word	0x0800b0bd
 800b060:	2b40      	cmp	r3, #64	; 0x40
 800b062:	d02e      	beq.n	800b0c2 <UART_SetConfig+0x8aa>
 800b064:	e031      	b.n	800b0ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b066:	f7fc f8b1 	bl	80071cc <HAL_RCC_GetPCLK1Freq>
 800b06a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b06c:	e033      	b.n	800b0d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b06e:	f7fc f8c3 	bl	80071f8 <HAL_RCC_GetPCLK2Freq>
 800b072:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b074:	e02f      	b.n	800b0d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fd fd42 	bl	8008b04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b084:	e027      	b.n	800b0d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b086:	f107 0318 	add.w	r3, r7, #24
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7fd fe8e 	bl	8008dac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b094:	e01f      	b.n	800b0d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b096:	4b2d      	ldr	r3, [pc, #180]	; (800b14c <UART_SetConfig+0x934>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 0320 	and.w	r3, r3, #32
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d009      	beq.n	800b0b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b0a2:	4b2a      	ldr	r3, [pc, #168]	; (800b14c <UART_SetConfig+0x934>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	08db      	lsrs	r3, r3, #3
 800b0a8:	f003 0303 	and.w	r3, r3, #3
 800b0ac:	4a24      	ldr	r2, [pc, #144]	; (800b140 <UART_SetConfig+0x928>)
 800b0ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0b4:	e00f      	b.n	800b0d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b0b6:	4b22      	ldr	r3, [pc, #136]	; (800b140 <UART_SetConfig+0x928>)
 800b0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0ba:	e00c      	b.n	800b0d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0bc:	4b21      	ldr	r3, [pc, #132]	; (800b144 <UART_SetConfig+0x92c>)
 800b0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0c0:	e009      	b.n	800b0d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0c8:	e005      	b.n	800b0d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b0d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b0d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f000 80e7 	beq.w	800b2ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e2:	4a19      	ldr	r2, [pc, #100]	; (800b148 <UART_SetConfig+0x930>)
 800b0e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0f0:	005a      	lsls	r2, r3, #1
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	085b      	lsrs	r3, r3, #1
 800b0f8:	441a      	add	r2, r3
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b102:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b106:	2b0f      	cmp	r3, #15
 800b108:	d916      	bls.n	800b138 <UART_SetConfig+0x920>
 800b10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b110:	d212      	bcs.n	800b138 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b114:	b29b      	uxth	r3, r3
 800b116:	f023 030f 	bic.w	r3, r3, #15
 800b11a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11e:	085b      	lsrs	r3, r3, #1
 800b120:	b29b      	uxth	r3, r3
 800b122:	f003 0307 	and.w	r3, r3, #7
 800b126:	b29a      	uxth	r2, r3
 800b128:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b12a:	4313      	orrs	r3, r2
 800b12c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b134:	60da      	str	r2, [r3, #12]
 800b136:	e0b9      	b.n	800b2ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b13e:	e0b5      	b.n	800b2ac <UART_SetConfig+0xa94>
 800b140:	03d09000 	.word	0x03d09000
 800b144:	003d0900 	.word	0x003d0900
 800b148:	08022b30 	.word	0x08022b30
 800b14c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b150:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b154:	2b20      	cmp	r3, #32
 800b156:	dc49      	bgt.n	800b1ec <UART_SetConfig+0x9d4>
 800b158:	2b00      	cmp	r3, #0
 800b15a:	db7c      	blt.n	800b256 <UART_SetConfig+0xa3e>
 800b15c:	2b20      	cmp	r3, #32
 800b15e:	d87a      	bhi.n	800b256 <UART_SetConfig+0xa3e>
 800b160:	a201      	add	r2, pc, #4	; (adr r2, 800b168 <UART_SetConfig+0x950>)
 800b162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b166:	bf00      	nop
 800b168:	0800b1f3 	.word	0x0800b1f3
 800b16c:	0800b1fb 	.word	0x0800b1fb
 800b170:	0800b257 	.word	0x0800b257
 800b174:	0800b257 	.word	0x0800b257
 800b178:	0800b203 	.word	0x0800b203
 800b17c:	0800b257 	.word	0x0800b257
 800b180:	0800b257 	.word	0x0800b257
 800b184:	0800b257 	.word	0x0800b257
 800b188:	0800b213 	.word	0x0800b213
 800b18c:	0800b257 	.word	0x0800b257
 800b190:	0800b257 	.word	0x0800b257
 800b194:	0800b257 	.word	0x0800b257
 800b198:	0800b257 	.word	0x0800b257
 800b19c:	0800b257 	.word	0x0800b257
 800b1a0:	0800b257 	.word	0x0800b257
 800b1a4:	0800b257 	.word	0x0800b257
 800b1a8:	0800b223 	.word	0x0800b223
 800b1ac:	0800b257 	.word	0x0800b257
 800b1b0:	0800b257 	.word	0x0800b257
 800b1b4:	0800b257 	.word	0x0800b257
 800b1b8:	0800b257 	.word	0x0800b257
 800b1bc:	0800b257 	.word	0x0800b257
 800b1c0:	0800b257 	.word	0x0800b257
 800b1c4:	0800b257 	.word	0x0800b257
 800b1c8:	0800b257 	.word	0x0800b257
 800b1cc:	0800b257 	.word	0x0800b257
 800b1d0:	0800b257 	.word	0x0800b257
 800b1d4:	0800b257 	.word	0x0800b257
 800b1d8:	0800b257 	.word	0x0800b257
 800b1dc:	0800b257 	.word	0x0800b257
 800b1e0:	0800b257 	.word	0x0800b257
 800b1e4:	0800b257 	.word	0x0800b257
 800b1e8:	0800b249 	.word	0x0800b249
 800b1ec:	2b40      	cmp	r3, #64	; 0x40
 800b1ee:	d02e      	beq.n	800b24e <UART_SetConfig+0xa36>
 800b1f0:	e031      	b.n	800b256 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1f2:	f7fb ffeb 	bl	80071cc <HAL_RCC_GetPCLK1Freq>
 800b1f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b1f8:	e033      	b.n	800b262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1fa:	f7fb fffd 	bl	80071f8 <HAL_RCC_GetPCLK2Freq>
 800b1fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b200:	e02f      	b.n	800b262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b206:	4618      	mov	r0, r3
 800b208:	f7fd fc7c 	bl	8008b04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b210:	e027      	b.n	800b262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b212:	f107 0318 	add.w	r3, r7, #24
 800b216:	4618      	mov	r0, r3
 800b218:	f7fd fdc8 	bl	8008dac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b220:	e01f      	b.n	800b262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b222:	4b2d      	ldr	r3, [pc, #180]	; (800b2d8 <UART_SetConfig+0xac0>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f003 0320 	and.w	r3, r3, #32
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d009      	beq.n	800b242 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b22e:	4b2a      	ldr	r3, [pc, #168]	; (800b2d8 <UART_SetConfig+0xac0>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	08db      	lsrs	r3, r3, #3
 800b234:	f003 0303 	and.w	r3, r3, #3
 800b238:	4a28      	ldr	r2, [pc, #160]	; (800b2dc <UART_SetConfig+0xac4>)
 800b23a:	fa22 f303 	lsr.w	r3, r2, r3
 800b23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b240:	e00f      	b.n	800b262 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b242:	4b26      	ldr	r3, [pc, #152]	; (800b2dc <UART_SetConfig+0xac4>)
 800b244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b246:	e00c      	b.n	800b262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b248:	4b25      	ldr	r3, [pc, #148]	; (800b2e0 <UART_SetConfig+0xac8>)
 800b24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b24c:	e009      	b.n	800b262 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b24e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b254:	e005      	b.n	800b262 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b256:	2300      	movs	r3, #0
 800b258:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b260:	bf00      	nop
    }

    if (pclk != 0U)
 800b262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b264:	2b00      	cmp	r3, #0
 800b266:	d021      	beq.n	800b2ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26c:	4a1d      	ldr	r2, [pc, #116]	; (800b2e4 <UART_SetConfig+0xacc>)
 800b26e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b272:	461a      	mov	r2, r3
 800b274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b276:	fbb3 f2f2 	udiv	r2, r3, r2
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	085b      	lsrs	r3, r3, #1
 800b280:	441a      	add	r2, r3
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	fbb2 f3f3 	udiv	r3, r2, r3
 800b28a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28e:	2b0f      	cmp	r3, #15
 800b290:	d909      	bls.n	800b2a6 <UART_SetConfig+0xa8e>
 800b292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b298:	d205      	bcs.n	800b2a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	60da      	str	r2, [r3, #12]
 800b2a4:	e002      	b.n	800b2ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b2c8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3748      	adds	r7, #72	; 0x48
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2d6:	bf00      	nop
 800b2d8:	58024400 	.word	0x58024400
 800b2dc:	03d09000 	.word	0x03d09000
 800b2e0:	003d0900 	.word	0x003d0900
 800b2e4:	08022b30 	.word	0x08022b30

0800b2e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f4:	f003 0301 	and.w	r3, r3, #1
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00a      	beq.n	800b312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	430a      	orrs	r2, r1
 800b310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b316:	f003 0302 	and.w	r3, r3, #2
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00a      	beq.n	800b334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	430a      	orrs	r2, r1
 800b332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b338:	f003 0304 	and.w	r3, r3, #4
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00a      	beq.n	800b356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	430a      	orrs	r2, r1
 800b354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b35a:	f003 0308 	and.w	r3, r3, #8
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00a      	beq.n	800b378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	430a      	orrs	r2, r1
 800b376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b37c:	f003 0310 	and.w	r3, r3, #16
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00a      	beq.n	800b39a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	430a      	orrs	r2, r1
 800b398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b39e:	f003 0320 	and.w	r3, r3, #32
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00a      	beq.n	800b3bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	430a      	orrs	r2, r1
 800b3ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d01a      	beq.n	800b3fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	430a      	orrs	r2, r1
 800b3dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3e6:	d10a      	bne.n	800b3fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	430a      	orrs	r2, r1
 800b3fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b406:	2b00      	cmp	r3, #0
 800b408:	d00a      	beq.n	800b420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	430a      	orrs	r2, r1
 800b41e:	605a      	str	r2, [r3, #4]
  }
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af02      	add	r7, sp, #8
 800b432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b43c:	f7f6 fc1c 	bl	8001c78 <HAL_GetTick>
 800b440:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0308 	and.w	r3, r3, #8
 800b44c:	2b08      	cmp	r3, #8
 800b44e:	d10e      	bne.n	800b46e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 f82f 	bl	800b4c2 <UART_WaitOnFlagUntilTimeout>
 800b464:	4603      	mov	r3, r0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d001      	beq.n	800b46e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b46a:	2303      	movs	r3, #3
 800b46c:	e025      	b.n	800b4ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f003 0304 	and.w	r3, r3, #4
 800b478:	2b04      	cmp	r3, #4
 800b47a:	d10e      	bne.n	800b49a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b47c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2200      	movs	r2, #0
 800b486:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 f819 	bl	800b4c2 <UART_WaitOnFlagUntilTimeout>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d001      	beq.n	800b49a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b496:	2303      	movs	r3, #3
 800b498:	e00f      	b.n	800b4ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2220      	movs	r2, #32
 800b49e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2220      	movs	r2, #32
 800b4a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b09c      	sub	sp, #112	; 0x70
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	60f8      	str	r0, [r7, #12]
 800b4ca:	60b9      	str	r1, [r7, #8]
 800b4cc:	603b      	str	r3, [r7, #0]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4d2:	e0a9      	b.n	800b628 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4da:	f000 80a5 	beq.w	800b628 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4de:	f7f6 fbcb 	bl	8001c78 <HAL_GetTick>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	1ad3      	subs	r3, r2, r3
 800b4e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d302      	bcc.n	800b4f4 <UART_WaitOnFlagUntilTimeout+0x32>
 800b4ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d140      	bne.n	800b576 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4fc:	e853 3f00 	ldrex	r3, [r3]
 800b500:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b504:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b508:	667b      	str	r3, [r7, #100]	; 0x64
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	461a      	mov	r2, r3
 800b510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b512:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b514:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b516:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b518:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b51a:	e841 2300 	strex	r3, r2, [r1]
 800b51e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1e6      	bne.n	800b4f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	3308      	adds	r3, #8
 800b52c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b530:	e853 3f00 	ldrex	r3, [r3]
 800b534:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b538:	f023 0301 	bic.w	r3, r3, #1
 800b53c:	663b      	str	r3, [r7, #96]	; 0x60
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	3308      	adds	r3, #8
 800b544:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b546:	64ba      	str	r2, [r7, #72]	; 0x48
 800b548:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b54c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b54e:	e841 2300 	strex	r3, r2, [r1]
 800b552:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1e5      	bne.n	800b526 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2220      	movs	r2, #32
 800b55e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2220      	movs	r2, #32
 800b566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2200      	movs	r2, #0
 800b56e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b572:	2303      	movs	r3, #3
 800b574:	e069      	b.n	800b64a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f003 0304 	and.w	r3, r3, #4
 800b580:	2b00      	cmp	r3, #0
 800b582:	d051      	beq.n	800b628 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	69db      	ldr	r3, [r3, #28]
 800b58a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b58e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b592:	d149      	bne.n	800b628 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b59c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a6:	e853 3f00 	ldrex	r3, [r3]
 800b5aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b5b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5bc:	637b      	str	r3, [r7, #52]	; 0x34
 800b5be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5c4:	e841 2300 	strex	r3, r2, [r1]
 800b5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d1e6      	bne.n	800b59e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3308      	adds	r3, #8
 800b5d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	e853 3f00 	ldrex	r3, [r3]
 800b5de:	613b      	str	r3, [r7, #16]
   return(result);
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	f023 0301 	bic.w	r3, r3, #1
 800b5e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	3308      	adds	r3, #8
 800b5ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b5f0:	623a      	str	r2, [r7, #32]
 800b5f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f4:	69f9      	ldr	r1, [r7, #28]
 800b5f6:	6a3a      	ldr	r2, [r7, #32]
 800b5f8:	e841 2300 	strex	r3, r2, [r1]
 800b5fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1e5      	bne.n	800b5d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2220      	movs	r2, #32
 800b608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2220      	movs	r2, #32
 800b610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2220      	movs	r2, #32
 800b618:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2200      	movs	r2, #0
 800b620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b624:	2303      	movs	r3, #3
 800b626:	e010      	b.n	800b64a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	69da      	ldr	r2, [r3, #28]
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	4013      	ands	r3, r2
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	429a      	cmp	r2, r3
 800b636:	bf0c      	ite	eq
 800b638:	2301      	moveq	r3, #1
 800b63a:	2300      	movne	r3, #0
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	461a      	mov	r2, r3
 800b640:	79fb      	ldrb	r3, [r7, #7]
 800b642:	429a      	cmp	r2, r3
 800b644:	f43f af46 	beq.w	800b4d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3770      	adds	r7, #112	; 0x70
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b652:	b480      	push	{r7}
 800b654:	b085      	sub	sp, #20
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b660:	2b01      	cmp	r3, #1
 800b662:	d101      	bne.n	800b668 <HAL_UARTEx_DisableFifoMode+0x16>
 800b664:	2302      	movs	r3, #2
 800b666:	e027      	b.n	800b6b8 <HAL_UARTEx_DisableFifoMode+0x66>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2224      	movs	r2, #36	; 0x24
 800b674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f022 0201 	bic.w	r2, r2, #1
 800b68e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b696:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2220      	movs	r2, #32
 800b6aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b6b6:	2300      	movs	r3, #0
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3714      	adds	r7, #20
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d101      	bne.n	800b6dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b6d8:	2302      	movs	r3, #2
 800b6da:	e02d      	b.n	800b738 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2224      	movs	r2, #36	; 0x24
 800b6e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f022 0201 	bic.w	r2, r2, #1
 800b702:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	430a      	orrs	r2, r1
 800b716:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f84f 	bl	800b7bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2220      	movs	r2, #32
 800b72a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3710      	adds	r7, #16
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b750:	2b01      	cmp	r3, #1
 800b752:	d101      	bne.n	800b758 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b754:	2302      	movs	r3, #2
 800b756:	e02d      	b.n	800b7b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2201      	movs	r2, #1
 800b75c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2224      	movs	r2, #36	; 0x24
 800b764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f022 0201 	bic.w	r2, r2, #1
 800b77e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	430a      	orrs	r2, r1
 800b792:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 f811 	bl	800b7bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2220      	movs	r2, #32
 800b7a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b085      	sub	sp, #20
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d108      	bne.n	800b7de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b7dc:	e031      	b.n	800b842 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b7de:	2310      	movs	r3, #16
 800b7e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b7e2:	2310      	movs	r3, #16
 800b7e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	0e5b      	lsrs	r3, r3, #25
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	f003 0307 	and.w	r3, r3, #7
 800b7f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	0f5b      	lsrs	r3, r3, #29
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	f003 0307 	and.w	r3, r3, #7
 800b804:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b806:	7bbb      	ldrb	r3, [r7, #14]
 800b808:	7b3a      	ldrb	r2, [r7, #12]
 800b80a:	4911      	ldr	r1, [pc, #68]	; (800b850 <UARTEx_SetNbDataToProcess+0x94>)
 800b80c:	5c8a      	ldrb	r2, [r1, r2]
 800b80e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b812:	7b3a      	ldrb	r2, [r7, #12]
 800b814:	490f      	ldr	r1, [pc, #60]	; (800b854 <UARTEx_SetNbDataToProcess+0x98>)
 800b816:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b818:	fb93 f3f2 	sdiv	r3, r3, r2
 800b81c:	b29a      	uxth	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b824:	7bfb      	ldrb	r3, [r7, #15]
 800b826:	7b7a      	ldrb	r2, [r7, #13]
 800b828:	4909      	ldr	r1, [pc, #36]	; (800b850 <UARTEx_SetNbDataToProcess+0x94>)
 800b82a:	5c8a      	ldrb	r2, [r1, r2]
 800b82c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b830:	7b7a      	ldrb	r2, [r7, #13]
 800b832:	4908      	ldr	r1, [pc, #32]	; (800b854 <UARTEx_SetNbDataToProcess+0x98>)
 800b834:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b836:	fb93 f3f2 	sdiv	r3, r3, r2
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b842:	bf00      	nop
 800b844:	3714      	adds	r7, #20
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	08022b48 	.word	0x08022b48
 800b854:	08022b50 	.word	0x08022b50

0800b858 <MSGReceive>:
#import "gpio.h"
#import "MSGHandler.h"
#import "tim.h"

void MSGReceive(char *msg){
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]


	switch( msg[0]){
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	2ba1      	cmp	r3, #161	; 0xa1
 800b866:	d002      	beq.n	800b86e <MSGReceive+0x16>
 800b868:	2ba3      	cmp	r3, #163	; 0xa3
 800b86a:	d00e      	beq.n	800b88a <MSGReceive+0x32>


	}


}
 800b86c:	e01d      	b.n	800b8aa <MSGReceive+0x52>
		HAL_GPIO_WritePin(GPIOB,LD1_Pin,msg[1] && 0b01);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	3301      	adds	r3, #1
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	bf14      	ite	ne
 800b878:	2301      	movne	r3, #1
 800b87a:	2300      	moveq	r3, #0
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	461a      	mov	r2, r3
 800b880:	2101      	movs	r1, #1
 800b882:	480c      	ldr	r0, [pc, #48]	; (800b8b4 <MSGReceive+0x5c>)
 800b884:	f7fa fc48 	bl	8006118 <HAL_GPIO_WritePin>
		break;
 800b888:	e00f      	b.n	800b8aa <MSGReceive+0x52>
	uint16_t PWMVAL = (msg[1] << 8) | msg[2];
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	3301      	adds	r3, #1
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	021b      	lsls	r3, r3, #8
 800b892:	b21a      	sxth	r2, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3302      	adds	r3, #2
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	b21b      	sxth	r3, r3
 800b89c:	4313      	orrs	r3, r2
 800b89e:	b21b      	sxth	r3, r3
 800b8a0:	81fb      	strh	r3, [r7, #14]
	TIM12->CCR1 = PWMVAL;
 800b8a2:	4a05      	ldr	r2, [pc, #20]	; (800b8b8 <MSGReceive+0x60>)
 800b8a4:	89fb      	ldrh	r3, [r7, #14]
 800b8a6:	6353      	str	r3, [r2, #52]	; 0x34
	break;
 800b8a8:	bf00      	nop
}
 800b8aa:	bf00      	nop
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	58020400 	.word	0x58020400
 800b8b8:	40001800 	.word	0x40001800

0800b8bc <tcp_thread>:
char smsg[200];


/**** Send RESPONSE every time the client sends some data ******/
static void tcp_thread(void *arg)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b086      	sub	sp, #24
 800b8c0:	af02      	add	r7, sp, #8
 800b8c2:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart3,"server tcp_thread\r\n",20,100);
	err_t err, accept_err, recv_error;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	2010      	movs	r0, #16
 800b8ca:	f004 fe35 	bl	8010538 <netconn_new_with_proto_and_callback>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	4a48      	ldr	r2, [pc, #288]	; (800b9f4 <tcp_thread+0x138>)
 800b8d2:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 800b8d4:	4b47      	ldr	r3, [pc, #284]	; (800b9f4 <tcp_thread+0x138>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f000 8086 	beq.w	800b9ea <tcp_thread+0x12e>
	{
		/* Bind connection to the port number 10. */
		err = netconn_bind(conn, IP_ADDR_ANY, 10);
 800b8de:	4b45      	ldr	r3, [pc, #276]	; (800b9f4 <tcp_thread+0x138>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	220a      	movs	r2, #10
 800b8e4:	4944      	ldr	r1, [pc, #272]	; (800b9f8 <tcp_thread+0x13c>)
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f004 fee0 	bl	80106ac <netconn_bind>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 800b8f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d173      	bne.n	800b9e0 <tcp_thread+0x124>
		{
			//HAL_UART_Transmit(&huart3,"server listening\r\n",20,100);
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 800b8f8:	4b3e      	ldr	r3, [pc, #248]	; (800b9f4 <tcp_thread+0x138>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	21ff      	movs	r1, #255	; 0xff
 800b8fe:	4618      	mov	r0, r3
 800b900:	f004 ff0c 	bl	801071c <netconn_listen_with_backlog>

			while (1)
			{
				HAL_UART_Transmit(&huart3,"server ready\r\n",20,100);
 800b904:	2364      	movs	r3, #100	; 0x64
 800b906:	2214      	movs	r2, #20
 800b908:	493c      	ldr	r1, [pc, #240]	; (800b9fc <tcp_thread+0x140>)
 800b90a:	483d      	ldr	r0, [pc, #244]	; (800ba00 <tcp_thread+0x144>)
 800b90c:	f7fe feed 	bl	800a6ea <HAL_UART_Transmit>
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 800b910:	4b38      	ldr	r3, [pc, #224]	; (800b9f4 <tcp_thread+0x138>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	493b      	ldr	r1, [pc, #236]	; (800ba04 <tcp_thread+0x148>)
 800b916:	4618      	mov	r0, r3
 800b918:	f004 ff2c 	bl	8010774 <netconn_accept>
 800b91c:	4603      	mov	r3, r0
 800b91e:	73bb      	strb	r3, [r7, #14]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 800b920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1ed      	bne.n	800b904 <tcp_thread+0x48>
				{
					HAL_UART_Transmit(&huart3,"server connected\r\n",20,100);
 800b928:	2364      	movs	r3, #100	; 0x64
 800b92a:	2214      	movs	r2, #20
 800b92c:	4936      	ldr	r1, [pc, #216]	; (800ba08 <tcp_thread+0x14c>)
 800b92e:	4834      	ldr	r0, [pc, #208]	; (800ba00 <tcp_thread+0x144>)
 800b930:	f7fe fedb 	bl	800a6ea <HAL_UART_Transmit>
					/* receive the data from the client */
					while (netconn_recv(newconn, &buf) == ERR_OK)
 800b934:	e040      	b.n	800b9b8 <tcp_thread+0xfc>
					{

						/* Extrct the address and port in case they are required */
						addr = netbuf_fromaddr(buf);  // get the address of the client
 800b936:	4b35      	ldr	r3, [pc, #212]	; (800ba0c <tcp_thread+0x150>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	3308      	adds	r3, #8
 800b93c:	4a34      	ldr	r2, [pc, #208]	; (800ba10 <tcp_thread+0x154>)
 800b93e:	6013      	str	r3, [r2, #0]
						port = netbuf_fromport(buf);  // get the Port of the client
 800b940:	4b32      	ldr	r3, [pc, #200]	; (800ba0c <tcp_thread+0x150>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	899a      	ldrh	r2, [r3, #12]
 800b946:	4b33      	ldr	r3, [pc, #204]	; (800ba14 <tcp_thread+0x158>)
 800b948:	801a      	strh	r2, [r3, #0]

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{

							strncpy (msg, buf->p->payload, buf->p->len);   // get the message from the client
 800b94a:	4b30      	ldr	r3, [pc, #192]	; (800ba0c <tcp_thread+0x150>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	6859      	ldr	r1, [r3, #4]
 800b952:	4b2e      	ldr	r3, [pc, #184]	; (800ba0c <tcp_thread+0x150>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	895b      	ldrh	r3, [r3, #10]
 800b95a:	461a      	mov	r2, r3
 800b95c:	482e      	ldr	r0, [pc, #184]	; (800ba18 <tcp_thread+0x15c>)
 800b95e:	f012 fda4 	bl	801e4aa <strncpy>

							MSGReceive(msg);
 800b962:	482d      	ldr	r0, [pc, #180]	; (800ba18 <tcp_thread+0x15c>)
 800b964:	f7ff ff78 	bl	800b858 <MSGReceive>


							// Or modify the message received, so that we can send it back to the client
							int len = sprintf (smsg, "\"%s\" was sent by PROJECT JAVELIN\n", msg);
 800b968:	4a2b      	ldr	r2, [pc, #172]	; (800ba18 <tcp_thread+0x15c>)
 800b96a:	492c      	ldr	r1, [pc, #176]	; (800ba1c <tcp_thread+0x160>)
 800b96c:	482c      	ldr	r0, [pc, #176]	; (800ba20 <tcp_thread+0x164>)
 800b96e:	f012 fd39 	bl	801e3e4 <siprintf>
 800b972:	60b8      	str	r0, [r7, #8]
								HAL_UART_Transmit(&huart3,smsg,len,100);
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	b29a      	uxth	r2, r3
 800b978:	2364      	movs	r3, #100	; 0x64
 800b97a:	4929      	ldr	r1, [pc, #164]	; (800ba20 <tcp_thread+0x164>)
 800b97c:	4820      	ldr	r0, [pc, #128]	; (800ba00 <tcp_thread+0x144>)
 800b97e:	f7fe feb4 	bl	800a6ea <HAL_UART_Transmit>
							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 800b982:	4b20      	ldr	r3, [pc, #128]	; (800ba04 <tcp_thread+0x148>)
 800b984:	6818      	ldr	r0, [r3, #0]
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	2300      	movs	r3, #0
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	2301      	movs	r3, #1
 800b98e:	4924      	ldr	r1, [pc, #144]	; (800ba20 <tcp_thread+0x164>)
 800b990:	f005 f972 	bl	8010c78 <netconn_write_partly>
							memset (msg, '\0', 100);  // clear the buffer
 800b994:	2264      	movs	r2, #100	; 0x64
 800b996:	2100      	movs	r1, #0
 800b998:	481f      	ldr	r0, [pc, #124]	; (800ba18 <tcp_thread+0x15c>)
 800b99a:	f012 fbb6 	bl	801e10a <memset>
						}
						while (netbuf_next(buf) >0);
 800b99e:	4b1b      	ldr	r3, [pc, #108]	; (800ba0c <tcp_thread+0x150>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f006 fe88 	bl	80126b8 <netbuf_next>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	dccd      	bgt.n	800b94a <tcp_thread+0x8e>

						netbuf_delete(buf);
 800b9ae:	4b17      	ldr	r3, [pc, #92]	; (800ba0c <tcp_thread+0x150>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f006 fe60 	bl	8012678 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 800b9b8:	4b12      	ldr	r3, [pc, #72]	; (800ba04 <tcp_thread+0x148>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4913      	ldr	r1, [pc, #76]	; (800ba0c <tcp_thread+0x150>)
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f005 f8e0 	bl	8010b84 <netconn_recv>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d0b5      	beq.n	800b936 <tcp_thread+0x7a>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 800b9ca:	4b0e      	ldr	r3, [pc, #56]	; (800ba04 <tcp_thread+0x148>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f005 fa54 	bl	8010e7c <netconn_close>
					netconn_delete(newconn);
 800b9d4:	4b0b      	ldr	r3, [pc, #44]	; (800ba04 <tcp_thread+0x148>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f004 fe4b 	bl	8010674 <netconn_delete>
				HAL_UART_Transmit(&huart3,"server ready\r\n",20,100);
 800b9de:	e791      	b.n	800b904 <tcp_thread+0x48>
			}
		}
		else
		{
			//HAL_UART_Transmit(&huart3,"netconn failed\r\n",20,100);
			netconn_delete(conn);
 800b9e0:	4b04      	ldr	r3, [pc, #16]	; (800b9f4 <tcp_thread+0x138>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f004 fe45 	bl	8010674 <netconn_delete>
		}
	}
	//HAL_UART_Transmit(&huart3,"nullconn\r\n",20,100);
}
 800b9ea:	bf00      	nop
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	240004b8 	.word	0x240004b8
 800b9f8:	08022c78 	.word	0x08022c78
 800b9fc:	0801f4ec 	.word	0x0801f4ec
 800ba00:	24000424 	.word	0x24000424
 800ba04:	240004bc 	.word	0x240004bc
 800ba08:	0801f4fc 	.word	0x0801f4fc
 800ba0c:	240004c0 	.word	0x240004c0
 800ba10:	240004c4 	.word	0x240004c4
 800ba14:	240004c8 	.word	0x240004c8
 800ba18:	240004cc 	.word	0x240004cc
 800ba1c:	0801f510 	.word	0x0801f510
 800ba20:	24000530 	.word	0x24000530

0800ba24 <tcpserver_init>:


void tcpserver_init(void)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af02      	add	r7, sp, #8
	//HAL_UART_Transmit(&huart3,"server made\r\n",20,100);
  sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityHigh);
 800ba2a:	2328      	movs	r3, #40	; 0x28
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800ba32:	2200      	movs	r2, #0
 800ba34:	4903      	ldr	r1, [pc, #12]	; (800ba44 <tcpserver_init+0x20>)
 800ba36:	4804      	ldr	r0, [pc, #16]	; (800ba48 <tcpserver_init+0x24>)
 800ba38:	f012 f9d4 	bl	801dde4 <sys_thread_new>
}
 800ba3c:	bf00      	nop
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	0800b8bd 	.word	0x0800b8bd
 800ba48:	0801f534 	.word	0x0801f534

0800ba4c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ba52:	4b98      	ldr	r3, [pc, #608]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800ba54:	22c0      	movs	r2, #192	; 0xc0
 800ba56:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ba58:	4b96      	ldr	r3, [pc, #600]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800ba5a:	22a8      	movs	r2, #168	; 0xa8
 800ba5c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800ba5e:	4b95      	ldr	r3, [pc, #596]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800ba60:	2200      	movs	r2, #0
 800ba62:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 800ba64:	4b93      	ldr	r3, [pc, #588]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800ba66:	227b      	movs	r2, #123	; 0x7b
 800ba68:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ba6a:	4b93      	ldr	r3, [pc, #588]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800ba6c:	22ff      	movs	r2, #255	; 0xff
 800ba6e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ba70:	4b91      	ldr	r3, [pc, #580]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800ba72:	22ff      	movs	r2, #255	; 0xff
 800ba74:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800ba76:	4b90      	ldr	r3, [pc, #576]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800ba78:	22ff      	movs	r2, #255	; 0xff
 800ba7a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ba7c:	4b8e      	ldr	r3, [pc, #568]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800ba7e:	2200      	movs	r2, #0
 800ba80:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800ba82:	4b8e      	ldr	r3, [pc, #568]	; (800bcbc <MX_LWIP_Init+0x270>)
 800ba84:	22c0      	movs	r2, #192	; 0xc0
 800ba86:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800ba88:	4b8c      	ldr	r3, [pc, #560]	; (800bcbc <MX_LWIP_Init+0x270>)
 800ba8a:	22a8      	movs	r2, #168	; 0xa8
 800ba8c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800ba8e:	4b8b      	ldr	r3, [pc, #556]	; (800bcbc <MX_LWIP_Init+0x270>)
 800ba90:	2200      	movs	r2, #0
 800ba92:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800ba94:	4b89      	ldr	r3, [pc, #548]	; (800bcbc <MX_LWIP_Init+0x270>)
 800ba96:	2201      	movs	r2, #1
 800ba98:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800ba9a:	2100      	movs	r1, #0
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	f006 ffa9 	bl	80129f4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800baa2:	4b84      	ldr	r3, [pc, #528]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	061a      	lsls	r2, r3, #24
 800baa8:	4b82      	ldr	r3, [pc, #520]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800baaa:	785b      	ldrb	r3, [r3, #1]
 800baac:	041b      	lsls	r3, r3, #16
 800baae:	431a      	orrs	r2, r3
 800bab0:	4b80      	ldr	r3, [pc, #512]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800bab2:	789b      	ldrb	r3, [r3, #2]
 800bab4:	021b      	lsls	r3, r3, #8
 800bab6:	4313      	orrs	r3, r2
 800bab8:	4a7e      	ldr	r2, [pc, #504]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800baba:	78d2      	ldrb	r2, [r2, #3]
 800babc:	4313      	orrs	r3, r2
 800babe:	061a      	lsls	r2, r3, #24
 800bac0:	4b7c      	ldr	r3, [pc, #496]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	0619      	lsls	r1, r3, #24
 800bac6:	4b7b      	ldr	r3, [pc, #492]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800bac8:	785b      	ldrb	r3, [r3, #1]
 800baca:	041b      	lsls	r3, r3, #16
 800bacc:	4319      	orrs	r1, r3
 800bace:	4b79      	ldr	r3, [pc, #484]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800bad0:	789b      	ldrb	r3, [r3, #2]
 800bad2:	021b      	lsls	r3, r3, #8
 800bad4:	430b      	orrs	r3, r1
 800bad6:	4977      	ldr	r1, [pc, #476]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800bad8:	78c9      	ldrb	r1, [r1, #3]
 800bada:	430b      	orrs	r3, r1
 800badc:	021b      	lsls	r3, r3, #8
 800bade:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bae2:	431a      	orrs	r2, r3
 800bae4:	4b73      	ldr	r3, [pc, #460]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	0619      	lsls	r1, r3, #24
 800baea:	4b72      	ldr	r3, [pc, #456]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800baec:	785b      	ldrb	r3, [r3, #1]
 800baee:	041b      	lsls	r3, r3, #16
 800baf0:	4319      	orrs	r1, r3
 800baf2:	4b70      	ldr	r3, [pc, #448]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800baf4:	789b      	ldrb	r3, [r3, #2]
 800baf6:	021b      	lsls	r3, r3, #8
 800baf8:	430b      	orrs	r3, r1
 800bafa:	496e      	ldr	r1, [pc, #440]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800bafc:	78c9      	ldrb	r1, [r1, #3]
 800bafe:	430b      	orrs	r3, r1
 800bb00:	0a1b      	lsrs	r3, r3, #8
 800bb02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bb06:	431a      	orrs	r2, r3
 800bb08:	4b6a      	ldr	r3, [pc, #424]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	0619      	lsls	r1, r3, #24
 800bb0e:	4b69      	ldr	r3, [pc, #420]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800bb10:	785b      	ldrb	r3, [r3, #1]
 800bb12:	041b      	lsls	r3, r3, #16
 800bb14:	4319      	orrs	r1, r3
 800bb16:	4b67      	ldr	r3, [pc, #412]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800bb18:	789b      	ldrb	r3, [r3, #2]
 800bb1a:	021b      	lsls	r3, r3, #8
 800bb1c:	430b      	orrs	r3, r1
 800bb1e:	4965      	ldr	r1, [pc, #404]	; (800bcb4 <MX_LWIP_Init+0x268>)
 800bb20:	78c9      	ldrb	r1, [r1, #3]
 800bb22:	430b      	orrs	r3, r1
 800bb24:	0e1b      	lsrs	r3, r3, #24
 800bb26:	4313      	orrs	r3, r2
 800bb28:	4a65      	ldr	r2, [pc, #404]	; (800bcc0 <MX_LWIP_Init+0x274>)
 800bb2a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800bb2c:	4b62      	ldr	r3, [pc, #392]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	061a      	lsls	r2, r3, #24
 800bb32:	4b61      	ldr	r3, [pc, #388]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800bb34:	785b      	ldrb	r3, [r3, #1]
 800bb36:	041b      	lsls	r3, r3, #16
 800bb38:	431a      	orrs	r2, r3
 800bb3a:	4b5f      	ldr	r3, [pc, #380]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800bb3c:	789b      	ldrb	r3, [r3, #2]
 800bb3e:	021b      	lsls	r3, r3, #8
 800bb40:	4313      	orrs	r3, r2
 800bb42:	4a5d      	ldr	r2, [pc, #372]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800bb44:	78d2      	ldrb	r2, [r2, #3]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	061a      	lsls	r2, r3, #24
 800bb4a:	4b5b      	ldr	r3, [pc, #364]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	0619      	lsls	r1, r3, #24
 800bb50:	4b59      	ldr	r3, [pc, #356]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800bb52:	785b      	ldrb	r3, [r3, #1]
 800bb54:	041b      	lsls	r3, r3, #16
 800bb56:	4319      	orrs	r1, r3
 800bb58:	4b57      	ldr	r3, [pc, #348]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800bb5a:	789b      	ldrb	r3, [r3, #2]
 800bb5c:	021b      	lsls	r3, r3, #8
 800bb5e:	430b      	orrs	r3, r1
 800bb60:	4955      	ldr	r1, [pc, #340]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800bb62:	78c9      	ldrb	r1, [r1, #3]
 800bb64:	430b      	orrs	r3, r1
 800bb66:	021b      	lsls	r3, r3, #8
 800bb68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bb6c:	431a      	orrs	r2, r3
 800bb6e:	4b52      	ldr	r3, [pc, #328]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	0619      	lsls	r1, r3, #24
 800bb74:	4b50      	ldr	r3, [pc, #320]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800bb76:	785b      	ldrb	r3, [r3, #1]
 800bb78:	041b      	lsls	r3, r3, #16
 800bb7a:	4319      	orrs	r1, r3
 800bb7c:	4b4e      	ldr	r3, [pc, #312]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800bb7e:	789b      	ldrb	r3, [r3, #2]
 800bb80:	021b      	lsls	r3, r3, #8
 800bb82:	430b      	orrs	r3, r1
 800bb84:	494c      	ldr	r1, [pc, #304]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800bb86:	78c9      	ldrb	r1, [r1, #3]
 800bb88:	430b      	orrs	r3, r1
 800bb8a:	0a1b      	lsrs	r3, r3, #8
 800bb8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bb90:	431a      	orrs	r2, r3
 800bb92:	4b49      	ldr	r3, [pc, #292]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	0619      	lsls	r1, r3, #24
 800bb98:	4b47      	ldr	r3, [pc, #284]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800bb9a:	785b      	ldrb	r3, [r3, #1]
 800bb9c:	041b      	lsls	r3, r3, #16
 800bb9e:	4319      	orrs	r1, r3
 800bba0:	4b45      	ldr	r3, [pc, #276]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800bba2:	789b      	ldrb	r3, [r3, #2]
 800bba4:	021b      	lsls	r3, r3, #8
 800bba6:	430b      	orrs	r3, r1
 800bba8:	4943      	ldr	r1, [pc, #268]	; (800bcb8 <MX_LWIP_Init+0x26c>)
 800bbaa:	78c9      	ldrb	r1, [r1, #3]
 800bbac:	430b      	orrs	r3, r1
 800bbae:	0e1b      	lsrs	r3, r3, #24
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	4a44      	ldr	r2, [pc, #272]	; (800bcc4 <MX_LWIP_Init+0x278>)
 800bbb4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800bbb6:	4b41      	ldr	r3, [pc, #260]	; (800bcbc <MX_LWIP_Init+0x270>)
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	061a      	lsls	r2, r3, #24
 800bbbc:	4b3f      	ldr	r3, [pc, #252]	; (800bcbc <MX_LWIP_Init+0x270>)
 800bbbe:	785b      	ldrb	r3, [r3, #1]
 800bbc0:	041b      	lsls	r3, r3, #16
 800bbc2:	431a      	orrs	r2, r3
 800bbc4:	4b3d      	ldr	r3, [pc, #244]	; (800bcbc <MX_LWIP_Init+0x270>)
 800bbc6:	789b      	ldrb	r3, [r3, #2]
 800bbc8:	021b      	lsls	r3, r3, #8
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	4a3b      	ldr	r2, [pc, #236]	; (800bcbc <MX_LWIP_Init+0x270>)
 800bbce:	78d2      	ldrb	r2, [r2, #3]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	061a      	lsls	r2, r3, #24
 800bbd4:	4b39      	ldr	r3, [pc, #228]	; (800bcbc <MX_LWIP_Init+0x270>)
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	0619      	lsls	r1, r3, #24
 800bbda:	4b38      	ldr	r3, [pc, #224]	; (800bcbc <MX_LWIP_Init+0x270>)
 800bbdc:	785b      	ldrb	r3, [r3, #1]
 800bbde:	041b      	lsls	r3, r3, #16
 800bbe0:	4319      	orrs	r1, r3
 800bbe2:	4b36      	ldr	r3, [pc, #216]	; (800bcbc <MX_LWIP_Init+0x270>)
 800bbe4:	789b      	ldrb	r3, [r3, #2]
 800bbe6:	021b      	lsls	r3, r3, #8
 800bbe8:	430b      	orrs	r3, r1
 800bbea:	4934      	ldr	r1, [pc, #208]	; (800bcbc <MX_LWIP_Init+0x270>)
 800bbec:	78c9      	ldrb	r1, [r1, #3]
 800bbee:	430b      	orrs	r3, r1
 800bbf0:	021b      	lsls	r3, r3, #8
 800bbf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bbf6:	431a      	orrs	r2, r3
 800bbf8:	4b30      	ldr	r3, [pc, #192]	; (800bcbc <MX_LWIP_Init+0x270>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	0619      	lsls	r1, r3, #24
 800bbfe:	4b2f      	ldr	r3, [pc, #188]	; (800bcbc <MX_LWIP_Init+0x270>)
 800bc00:	785b      	ldrb	r3, [r3, #1]
 800bc02:	041b      	lsls	r3, r3, #16
 800bc04:	4319      	orrs	r1, r3
 800bc06:	4b2d      	ldr	r3, [pc, #180]	; (800bcbc <MX_LWIP_Init+0x270>)
 800bc08:	789b      	ldrb	r3, [r3, #2]
 800bc0a:	021b      	lsls	r3, r3, #8
 800bc0c:	430b      	orrs	r3, r1
 800bc0e:	492b      	ldr	r1, [pc, #172]	; (800bcbc <MX_LWIP_Init+0x270>)
 800bc10:	78c9      	ldrb	r1, [r1, #3]
 800bc12:	430b      	orrs	r3, r1
 800bc14:	0a1b      	lsrs	r3, r3, #8
 800bc16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bc1a:	431a      	orrs	r2, r3
 800bc1c:	4b27      	ldr	r3, [pc, #156]	; (800bcbc <MX_LWIP_Init+0x270>)
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	0619      	lsls	r1, r3, #24
 800bc22:	4b26      	ldr	r3, [pc, #152]	; (800bcbc <MX_LWIP_Init+0x270>)
 800bc24:	785b      	ldrb	r3, [r3, #1]
 800bc26:	041b      	lsls	r3, r3, #16
 800bc28:	4319      	orrs	r1, r3
 800bc2a:	4b24      	ldr	r3, [pc, #144]	; (800bcbc <MX_LWIP_Init+0x270>)
 800bc2c:	789b      	ldrb	r3, [r3, #2]
 800bc2e:	021b      	lsls	r3, r3, #8
 800bc30:	430b      	orrs	r3, r1
 800bc32:	4922      	ldr	r1, [pc, #136]	; (800bcbc <MX_LWIP_Init+0x270>)
 800bc34:	78c9      	ldrb	r1, [r1, #3]
 800bc36:	430b      	orrs	r3, r1
 800bc38:	0e1b      	lsrs	r3, r3, #24
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	4a22      	ldr	r2, [pc, #136]	; (800bcc8 <MX_LWIP_Init+0x27c>)
 800bc3e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bc40:	4b22      	ldr	r3, [pc, #136]	; (800bccc <MX_LWIP_Init+0x280>)
 800bc42:	9302      	str	r3, [sp, #8]
 800bc44:	4b22      	ldr	r3, [pc, #136]	; (800bcd0 <MX_LWIP_Init+0x284>)
 800bc46:	9301      	str	r3, [sp, #4]
 800bc48:	2300      	movs	r3, #0
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	4b1e      	ldr	r3, [pc, #120]	; (800bcc8 <MX_LWIP_Init+0x27c>)
 800bc4e:	4a1d      	ldr	r2, [pc, #116]	; (800bcc4 <MX_LWIP_Init+0x278>)
 800bc50:	491b      	ldr	r1, [pc, #108]	; (800bcc0 <MX_LWIP_Init+0x274>)
 800bc52:	4820      	ldr	r0, [pc, #128]	; (800bcd4 <MX_LWIP_Init+0x288>)
 800bc54:	f007 fe1c 	bl	8013890 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bc58:	481e      	ldr	r0, [pc, #120]	; (800bcd4 <MX_LWIP_Init+0x288>)
 800bc5a:	f007 ffcb 	bl	8013bf4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800bc5e:	4b1d      	ldr	r3, [pc, #116]	; (800bcd4 <MX_LWIP_Init+0x288>)
 800bc60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bc64:	089b      	lsrs	r3, r3, #2
 800bc66:	f003 0301 	and.w	r3, r3, #1
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d003      	beq.n	800bc78 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800bc70:	4818      	ldr	r0, [pc, #96]	; (800bcd4 <MX_LWIP_Init+0x288>)
 800bc72:	f007 ffcf 	bl	8013c14 <netif_set_up>
 800bc76:	e002      	b.n	800bc7e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800bc78:	4816      	ldr	r0, [pc, #88]	; (800bcd4 <MX_LWIP_Init+0x288>)
 800bc7a:	f008 f837 	bl	8013cec <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800bc7e:	4916      	ldr	r1, [pc, #88]	; (800bcd8 <MX_LWIP_Init+0x28c>)
 800bc80:	4814      	ldr	r0, [pc, #80]	; (800bcd4 <MX_LWIP_Init+0x288>)
 800bc82:	f008 f8c9 	bl	8013e18 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bc86:	2224      	movs	r2, #36	; 0x24
 800bc88:	2100      	movs	r1, #0
 800bc8a:	4814      	ldr	r0, [pc, #80]	; (800bcdc <MX_LWIP_Init+0x290>)
 800bc8c:	f012 fa3d 	bl	801e10a <memset>
  attributes.name = "EthLink";
 800bc90:	4b12      	ldr	r3, [pc, #72]	; (800bcdc <MX_LWIP_Init+0x290>)
 800bc92:	4a13      	ldr	r2, [pc, #76]	; (800bce0 <MX_LWIP_Init+0x294>)
 800bc94:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bc96:	4b11      	ldr	r3, [pc, #68]	; (800bcdc <MX_LWIP_Init+0x290>)
 800bc98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bc9c:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800bc9e:	4b0f      	ldr	r3, [pc, #60]	; (800bcdc <MX_LWIP_Init+0x290>)
 800bca0:	2210      	movs	r2, #16
 800bca2:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800bca4:	4a0d      	ldr	r2, [pc, #52]	; (800bcdc <MX_LWIP_Init+0x290>)
 800bca6:	490b      	ldr	r1, [pc, #44]	; (800bcd4 <MX_LWIP_Init+0x288>)
 800bca8:	480e      	ldr	r0, [pc, #56]	; (800bce4 <MX_LWIP_Init+0x298>)
 800bcaa:	f000 fdc4 	bl	800c836 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bcae:	bf00      	nop
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	24000638 	.word	0x24000638
 800bcb8:	2400063c 	.word	0x2400063c
 800bcbc:	24000640 	.word	0x24000640
 800bcc0:	2400062c 	.word	0x2400062c
 800bcc4:	24000630 	.word	0x24000630
 800bcc8:	24000634 	.word	0x24000634
 800bccc:	08012905 	.word	0x08012905
 800bcd0:	0800c18d 	.word	0x0800c18d
 800bcd4:	240005f8 	.word	0x240005f8
 800bcd8:	0800bce9 	.word	0x0800bce9
 800bcdc:	24000644 	.word	0x24000644
 800bce0:	0801f540 	.word	0x0801f540
 800bce4:	0800c481 	.word	0x0800c481

0800bce8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800bcf0:	bf00      	nop
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800bd04:	4b04      	ldr	r3, [pc, #16]	; (800bd18 <HAL_ETH_RxCpltCallback+0x1c>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f001 f82b 	bl	800cd64 <osSemaphoreRelease>
}
 800bd0e:	bf00      	nop
 800bd10:	3708      	adds	r7, #8
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	24004ff4 	.word	0x24004ff4

0800bd1c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800bd24:	4b04      	ldr	r3, [pc, #16]	; (800bd38 <HAL_ETH_TxCpltCallback+0x1c>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f001 f81b 	bl	800cd64 <osSemaphoreRelease>
}
 800bd2e:	bf00      	nop
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	24004ff8 	.word	0x24004ff8

0800bd3c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f7f8 ff51 	bl	8004bec <HAL_ETH_GetDMAError>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd50:	2b80      	cmp	r3, #128	; 0x80
 800bd52:	d104      	bne.n	800bd5e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800bd54:	4b04      	ldr	r3, [pc, #16]	; (800bd68 <HAL_ETH_ErrorCallback+0x2c>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f001 f803 	bl	800cd64 <osSemaphoreRelease>
  }
}
 800bd5e:	bf00      	nop
 800bd60:	3708      	adds	r7, #8
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	24004ff4 	.word	0x24004ff4

0800bd6c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b0aa      	sub	sp, #168	; 0xa8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800bd74:	2300      	movs	r3, #0
 800bd76:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 800bd80:	2300      	movs	r3, #0
 800bd82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800bd86:	f107 0310 	add.w	r3, r7, #16
 800bd8a:	2264      	movs	r2, #100	; 0x64
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f012 f9bb 	bl	801e10a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bd94:	4b85      	ldr	r3, [pc, #532]	; (800bfac <low_level_init+0x240>)
 800bd96:	4a86      	ldr	r2, [pc, #536]	; (800bfb0 <low_level_init+0x244>)
 800bd98:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800bd9e:	2380      	movs	r3, #128	; 0x80
 800bda0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800bda2:	23e1      	movs	r3, #225	; 0xe1
 800bda4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800bda6:	2300      	movs	r3, #0
 800bda8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800bdb2:	4a7e      	ldr	r2, [pc, #504]	; (800bfac <low_level_init+0x240>)
 800bdb4:	f107 0308 	add.w	r3, r7, #8
 800bdb8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800bdba:	4b7c      	ldr	r3, [pc, #496]	; (800bfac <low_level_init+0x240>)
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800bdc0:	4b7a      	ldr	r3, [pc, #488]	; (800bfac <low_level_init+0x240>)
 800bdc2:	4a7c      	ldr	r2, [pc, #496]	; (800bfb4 <low_level_init+0x248>)
 800bdc4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800bdc6:	4b79      	ldr	r3, [pc, #484]	; (800bfac <low_level_init+0x240>)
 800bdc8:	4a7b      	ldr	r2, [pc, #492]	; (800bfb8 <low_level_init+0x24c>)
 800bdca:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800bdcc:	4b77      	ldr	r3, [pc, #476]	; (800bfac <low_level_init+0x240>)
 800bdce:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800bdd2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bdd4:	4875      	ldr	r0, [pc, #468]	; (800bfac <low_level_init+0x240>)
 800bdd6:	f7f7 fec7 	bl	8003b68 <HAL_ETH_Init>
 800bdda:	4603      	mov	r3, r0
 800bddc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800bde0:	2238      	movs	r2, #56	; 0x38
 800bde2:	2100      	movs	r1, #0
 800bde4:	4875      	ldr	r0, [pc, #468]	; (800bfbc <low_level_init+0x250>)
 800bde6:	f012 f990 	bl	801e10a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800bdea:	4b74      	ldr	r3, [pc, #464]	; (800bfbc <low_level_init+0x250>)
 800bdec:	2221      	movs	r2, #33	; 0x21
 800bdee:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800bdf0:	4b72      	ldr	r3, [pc, #456]	; (800bfbc <low_level_init+0x250>)
 800bdf2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800bdf6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800bdf8:	4b70      	ldr	r3, [pc, #448]	; (800bfbc <low_level_init+0x250>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800bdfe:	4870      	ldr	r0, [pc, #448]	; (800bfc0 <low_level_init+0x254>)
 800be00:	f007 fc00 	bl	8013604 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2206      	movs	r2, #6
 800be08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800be0c:	4b67      	ldr	r3, [pc, #412]	; (800bfac <low_level_init+0x240>)
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	781a      	ldrb	r2, [r3, #0]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800be18:	4b64      	ldr	r3, [pc, #400]	; (800bfac <low_level_init+0x240>)
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	785a      	ldrb	r2, [r3, #1]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800be24:	4b61      	ldr	r3, [pc, #388]	; (800bfac <low_level_init+0x240>)
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	789a      	ldrb	r2, [r3, #2]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800be30:	4b5e      	ldr	r3, [pc, #376]	; (800bfac <low_level_init+0x240>)
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	78da      	ldrb	r2, [r3, #3]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800be3c:	4b5b      	ldr	r3, [pc, #364]	; (800bfac <low_level_init+0x240>)
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	791a      	ldrb	r2, [r3, #4]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800be48:	4b58      	ldr	r3, [pc, #352]	; (800bfac <low_level_init+0x240>)
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	795a      	ldrb	r2, [r3, #5]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800be5a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be62:	f043 030a 	orr.w	r3, r3, #10
 800be66:	b2da      	uxtb	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800be6e:	2200      	movs	r2, #0
 800be70:	2101      	movs	r1, #1
 800be72:	2001      	movs	r0, #1
 800be74:	f000 fe9a 	bl	800cbac <osSemaphoreNew>
 800be78:	4603      	mov	r3, r0
 800be7a:	4a52      	ldr	r2, [pc, #328]	; (800bfc4 <low_level_init+0x258>)
 800be7c:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800be7e:	2200      	movs	r2, #0
 800be80:	2101      	movs	r1, #1
 800be82:	2001      	movs	r0, #1
 800be84:	f000 fe92 	bl	800cbac <osSemaphoreNew>
 800be88:	4603      	mov	r3, r0
 800be8a:	4a4f      	ldr	r2, [pc, #316]	; (800bfc8 <low_level_init+0x25c>)
 800be8c:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800be8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800be92:	2224      	movs	r2, #36	; 0x24
 800be94:	2100      	movs	r1, #0
 800be96:	4618      	mov	r0, r3
 800be98:	f012 f937 	bl	801e10a <memset>
  attributes.name = "EthIf";
 800be9c:	4b4b      	ldr	r3, [pc, #300]	; (800bfcc <low_level_init+0x260>)
 800be9e:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bea0:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800bea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 800bea8:	2330      	movs	r3, #48	; 0x30
 800beaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800beae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800beb2:	461a      	mov	r2, r3
 800beb4:	6879      	ldr	r1, [r7, #4]
 800beb6:	4846      	ldr	r0, [pc, #280]	; (800bfd0 <low_level_init+0x264>)
 800beb8:	f000 fcbd 	bl	800c836 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800bebc:	4945      	ldr	r1, [pc, #276]	; (800bfd4 <low_level_init+0x268>)
 800bebe:	4846      	ldr	r0, [pc, #280]	; (800bfd8 <low_level_init+0x26c>)
 800bec0:	f7f5 fd29 	bl	8001916 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800bec4:	4844      	ldr	r0, [pc, #272]	; (800bfd8 <low_level_init+0x26c>)
 800bec6:	f7f5 fd58 	bl	800197a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800beca:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d165      	bne.n	800bf9e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bed2:	4841      	ldr	r0, [pc, #260]	; (800bfd8 <low_level_init+0x26c>)
 800bed4:	f7f5 fdf9 	bl	8001aca <LAN8742_GetLinkState>
 800bed8:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800bedc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	dc06      	bgt.n	800bef2 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f007 ff67 	bl	8013db8 <netif_set_link_down>
      netif_set_down(netif);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f007 fefe 	bl	8013cec <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800bef0:	e057      	b.n	800bfa2 <low_level_init+0x236>
      switch (PHYLinkState)
 800bef2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bef6:	3b02      	subs	r3, #2
 800bef8:	2b03      	cmp	r3, #3
 800befa:	d82b      	bhi.n	800bf54 <low_level_init+0x1e8>
 800befc:	a201      	add	r2, pc, #4	; (adr r2, 800bf04 <low_level_init+0x198>)
 800befe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf02:	bf00      	nop
 800bf04:	0800bf15 	.word	0x0800bf15
 800bf08:	0800bf27 	.word	0x0800bf27
 800bf0c:	0800bf37 	.word	0x0800bf37
 800bf10:	0800bf47 	.word	0x0800bf47
        duplex = ETH_FULLDUPLEX_MODE;
 800bf14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800bf1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bf20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800bf24:	e01f      	b.n	800bf66 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800bf26:	2300      	movs	r3, #0
 800bf28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800bf2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bf30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800bf34:	e017      	b.n	800bf66 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800bf36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800bf44:	e00f      	b.n	800bf66 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800bf46:	2300      	movs	r3, #0
 800bf48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800bf52:	e008      	b.n	800bf66 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800bf54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800bf5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bf60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800bf64:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800bf66:	f107 0310 	add.w	r3, r7, #16
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	480f      	ldr	r0, [pc, #60]	; (800bfac <low_level_init+0x240>)
 800bf6e:	f7f8 fbf7 	bl	8004760 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800bf72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bf76:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 800bf78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bf7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800bf7e:	f107 0310 	add.w	r3, r7, #16
 800bf82:	4619      	mov	r1, r3
 800bf84:	4809      	ldr	r0, [pc, #36]	; (800bfac <low_level_init+0x240>)
 800bf86:	f7f8 fdbf 	bl	8004b08 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800bf8a:	4808      	ldr	r0, [pc, #32]	; (800bfac <low_level_init+0x240>)
 800bf8c:	f7f7 ff34 	bl	8003df8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f007 fe3f 	bl	8013c14 <netif_set_up>
    netif_set_link_up(netif);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f007 feda 	bl	8013d50 <netif_set_link_up>
}
 800bf9c:	e001      	b.n	800bfa2 <low_level_init+0x236>
    Error_Handler();
 800bf9e:	f7f5 f8db 	bl	8001158 <Error_Handler>
}
 800bfa2:	bf00      	nop
 800bfa4:	37a8      	adds	r7, #168	; 0xa8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	24004ffc 	.word	0x24004ffc
 800bfb0:	40028000 	.word	0x40028000
 800bfb4:	240000f8 	.word	0x240000f8
 800bfb8:	24000098 	.word	0x24000098
 800bfbc:	240050ac 	.word	0x240050ac
 800bfc0:	08022b58 	.word	0x08022b58
 800bfc4:	24004ff4 	.word	0x24004ff4
 800bfc8:	24004ff8 	.word	0x24004ff8
 800bfcc:	0801f548 	.word	0x0801f548
 800bfd0:	0800c139 	.word	0x0800c139
 800bfd4:	24000010 	.word	0x24000010
 800bfd8:	240050e4 	.word	0x240050e4

0800bfdc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b092      	sub	sp, #72	; 0x48
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800bfea:	2300      	movs	r3, #0
 800bfec:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800bfee:	2300      	movs	r3, #0
 800bff0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800bff4:	f107 030c 	add.w	r3, r7, #12
 800bff8:	2230      	movs	r2, #48	; 0x30
 800bffa:	2100      	movs	r1, #0
 800bffc:	4618      	mov	r0, r3
 800bffe:	f012 f884 	bl	801e10a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c002:	f107 030c 	add.w	r3, r7, #12
 800c006:	2230      	movs	r2, #48	; 0x30
 800c008:	2100      	movs	r1, #0
 800c00a:	4618      	mov	r0, r3
 800c00c:	f012 f87d 	bl	801e10a <memset>

  for(q = p; q != NULL; q = q->next)
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	643b      	str	r3, [r7, #64]	; 0x40
 800c014:	e045      	b.n	800c0a2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c018:	2b03      	cmp	r3, #3
 800c01a:	d902      	bls.n	800c022 <low_level_output+0x46>
      return ERR_IF;
 800c01c:	f06f 030b 	mvn.w	r3, #11
 800c020:	e065      	b.n	800c0ee <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800c022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c024:	6859      	ldr	r1, [r3, #4]
 800c026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c028:	4613      	mov	r3, r2
 800c02a:	005b      	lsls	r3, r3, #1
 800c02c:	4413      	add	r3, r2
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	3348      	adds	r3, #72	; 0x48
 800c032:	443b      	add	r3, r7
 800c034:	3b3c      	subs	r3, #60	; 0x3c
 800c036:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c03a:	895b      	ldrh	r3, [r3, #10]
 800c03c:	4619      	mov	r1, r3
 800c03e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c040:	4613      	mov	r3, r2
 800c042:	005b      	lsls	r3, r3, #1
 800c044:	4413      	add	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	3348      	adds	r3, #72	; 0x48
 800c04a:	443b      	add	r3, r7
 800c04c:	3b38      	subs	r3, #56	; 0x38
 800c04e:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c052:	2b00      	cmp	r3, #0
 800c054:	d011      	beq.n	800c07a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c058:	1e5a      	subs	r2, r3, #1
 800c05a:	f107 000c 	add.w	r0, r7, #12
 800c05e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c060:	460b      	mov	r3, r1
 800c062:	005b      	lsls	r3, r3, #1
 800c064:	440b      	add	r3, r1
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	18c1      	adds	r1, r0, r3
 800c06a:	4613      	mov	r3, r2
 800c06c:	005b      	lsls	r3, r3, #1
 800c06e:	4413      	add	r3, r2
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	3348      	adds	r3, #72	; 0x48
 800c074:	443b      	add	r3, r7
 800c076:	3b34      	subs	r3, #52	; 0x34
 800c078:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c07a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d109      	bne.n	800c096 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800c082:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c084:	4613      	mov	r3, r2
 800c086:	005b      	lsls	r3, r3, #1
 800c088:	4413      	add	r3, r2
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	3348      	adds	r3, #72	; 0x48
 800c08e:	443b      	add	r3, r7
 800c090:	3b34      	subs	r3, #52	; 0x34
 800c092:	2200      	movs	r2, #0
 800c094:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c098:	3301      	adds	r3, #1
 800c09a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800c09c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	643b      	str	r3, [r7, #64]	; 0x40
 800c0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d1b6      	bne.n	800c016 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	891b      	ldrh	r3, [r3, #8]
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	4b12      	ldr	r3, [pc, #72]	; (800c0f8 <low_level_output+0x11c>)
 800c0b0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c0b2:	4a11      	ldr	r2, [pc, #68]	; (800c0f8 <low_level_output+0x11c>)
 800c0b4:	f107 030c 	add.w	r3, r7, #12
 800c0b8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800c0ba:	4a0f      	ldr	r2, [pc, #60]	; (800c0f8 <low_level_output+0x11c>)
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800c0c0:	6838      	ldr	r0, [r7, #0]
 800c0c2:	f008 fb01 	bl	80146c8 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800c0c6:	490c      	ldr	r1, [pc, #48]	; (800c0f8 <low_level_output+0x11c>)
 800c0c8:	480c      	ldr	r0, [pc, #48]	; (800c0fc <low_level_output+0x120>)
 800c0ca:	f7f7 ff99 	bl	8004000 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800c0ce:	bf00      	nop
 800c0d0:	4b0b      	ldr	r3, [pc, #44]	; (800c100 <low_level_output+0x124>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f04f 31ff 	mov.w	r1, #4294967295
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f000 fdf1 	bl	800ccc0 <osSemaphoreAcquire>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d1f5      	bne.n	800c0d0 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800c0e4:	4805      	ldr	r0, [pc, #20]	; (800c0fc <low_level_output+0x120>)
 800c0e6:	f7f8 f90a 	bl	80042fe <HAL_ETH_ReleaseTxPacket>

  return errval;
 800c0ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3748      	adds	r7, #72	; 0x48
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	240050ac 	.word	0x240050ac
 800c0fc:	24004ffc 	.word	0x24004ffc
 800c100:	24004ff8 	.word	0x24004ff8

0800c104 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c10c:	2300      	movs	r3, #0
 800c10e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c110:	4b07      	ldr	r3, [pc, #28]	; (800c130 <low_level_input+0x2c>)
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d105      	bne.n	800c124 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c118:	f107 030c 	add.w	r3, r7, #12
 800c11c:	4619      	mov	r1, r3
 800c11e:	4805      	ldr	r0, [pc, #20]	; (800c134 <low_level_input+0x30>)
 800c120:	f7f7 ffbf 	bl	80040a2 <HAL_ETH_ReadData>
  }

  return p;
 800c124:	68fb      	ldr	r3, [r7, #12]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	24004ff0 	.word	0x24004ff0
 800c134:	24004ffc 	.word	0x24004ffc

0800c138 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c140:	2300      	movs	r3, #0
 800c142:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c148:	4b0f      	ldr	r3, [pc, #60]	; (800c188 <ethernetif_input+0x50>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f04f 31ff 	mov.w	r1, #4294967295
 800c150:	4618      	mov	r0, r3
 800c152:	f000 fdb5 	bl	800ccc0 <osSemaphoreAcquire>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d1f5      	bne.n	800c148 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800c15c:	68b8      	ldr	r0, [r7, #8]
 800c15e:	f7ff ffd1 	bl	800c104 <low_level_input>
 800c162:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00a      	beq.n	800c180 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	691b      	ldr	r3, [r3, #16]
 800c16e:	68b9      	ldr	r1, [r7, #8]
 800c170:	68f8      	ldr	r0, [r7, #12]
 800c172:	4798      	blx	r3
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d002      	beq.n	800c180 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f008 f9fe 	bl	801457c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d1ea      	bne.n	800c15c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c186:	e7df      	b.n	800c148 <ethernetif_input+0x10>
 800c188:	24004ff4 	.word	0x24004ff4

0800c18c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d106      	bne.n	800c1a8 <ethernetif_init+0x1c>
 800c19a:	4b0e      	ldr	r3, [pc, #56]	; (800c1d4 <ethernetif_init+0x48>)
 800c19c:	f240 12f5 	movw	r2, #501	; 0x1f5
 800c1a0:	490d      	ldr	r1, [pc, #52]	; (800c1d8 <ethernetif_init+0x4c>)
 800c1a2:	480e      	ldr	r0, [pc, #56]	; (800c1dc <ethernetif_init+0x50>)
 800c1a4:	f012 f84e 	bl	801e244 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2273      	movs	r2, #115	; 0x73
 800c1ac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2274      	movs	r2, #116	; 0x74
 800c1b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	4a09      	ldr	r2, [pc, #36]	; (800c1e0 <ethernetif_init+0x54>)
 800c1bc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4a08      	ldr	r2, [pc, #32]	; (800c1e4 <ethernetif_init+0x58>)
 800c1c2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f7ff fdd1 	bl	800bd6c <low_level_init>

  return ERR_OK;
 800c1ca:	2300      	movs	r3, #0
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3708      	adds	r7, #8
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	0801f550 	.word	0x0801f550
 800c1d8:	0801f56c 	.word	0x0801f56c
 800c1dc:	0801f57c 	.word	0x0801f57c
 800c1e0:	0801bdb5 	.word	0x0801bdb5
 800c1e4:	0800bfdd 	.word	0x0800bfdd

0800c1e8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c1f4:	68f9      	ldr	r1, [r7, #12]
 800c1f6:	4809      	ldr	r0, [pc, #36]	; (800c21c <pbuf_free_custom+0x34>)
 800c1f8:	f007 faf4 	bl	80137e4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c1fc:	4b08      	ldr	r3, [pc, #32]	; (800c220 <pbuf_free_custom+0x38>)
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	2b01      	cmp	r3, #1
 800c202:	d107      	bne.n	800c214 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c204:	4b06      	ldr	r3, [pc, #24]	; (800c220 <pbuf_free_custom+0x38>)
 800c206:	2200      	movs	r2, #0
 800c208:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800c20a:	4b06      	ldr	r3, [pc, #24]	; (800c224 <pbuf_free_custom+0x3c>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4618      	mov	r0, r3
 800c210:	f000 fda8 	bl	800cd64 <osSemaphoreRelease>
  }
}
 800c214:	bf00      	nop
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	08022b58 	.word	0x08022b58
 800c220:	24004ff0 	.word	0x24004ff0
 800c224:	24004ff4 	.word	0x24004ff4

0800c228 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c22c:	f7f5 fd24 	bl	8001c78 <HAL_GetTick>
 800c230:	4603      	mov	r3, r0
}
 800c232:	4618      	mov	r0, r3
 800c234:	bd80      	pop	{r7, pc}
	...

0800c238 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b08e      	sub	sp, #56	; 0x38
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c244:	2200      	movs	r2, #0
 800c246:	601a      	str	r2, [r3, #0]
 800c248:	605a      	str	r2, [r3, #4]
 800c24a:	609a      	str	r2, [r3, #8]
 800c24c:	60da      	str	r2, [r3, #12]
 800c24e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4a5d      	ldr	r2, [pc, #372]	; (800c3cc <HAL_ETH_MspInit+0x194>)
 800c256:	4293      	cmp	r3, r2
 800c258:	f040 80b3 	bne.w	800c3c2 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800c25c:	4b5c      	ldr	r3, [pc, #368]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c25e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c262:	4a5b      	ldr	r2, [pc, #364]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c268:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c26c:	4b58      	ldr	r3, [pc, #352]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c26e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c276:	623b      	str	r3, [r7, #32]
 800c278:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800c27a:	4b55      	ldr	r3, [pc, #340]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c27c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c280:	4a53      	ldr	r2, [pc, #332]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c286:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c28a:	4b51      	ldr	r3, [pc, #324]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c28c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c294:	61fb      	str	r3, [r7, #28]
 800c296:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800c298:	4b4d      	ldr	r3, [pc, #308]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c29a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c29e:	4a4c      	ldr	r2, [pc, #304]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c2a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c2a8:	4b49      	ldr	r3, [pc, #292]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c2aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c2ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2b2:	61bb      	str	r3, [r7, #24]
 800c2b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c2b6:	4b46      	ldr	r3, [pc, #280]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c2b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2bc:	4a44      	ldr	r2, [pc, #272]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c2be:	f043 0304 	orr.w	r3, r3, #4
 800c2c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c2c6:	4b42      	ldr	r3, [pc, #264]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c2c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2cc:	f003 0304 	and.w	r3, r3, #4
 800c2d0:	617b      	str	r3, [r7, #20]
 800c2d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c2d4:	4b3e      	ldr	r3, [pc, #248]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c2d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2da:	4a3d      	ldr	r2, [pc, #244]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c2dc:	f043 0301 	orr.w	r3, r3, #1
 800c2e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c2e4:	4b3a      	ldr	r3, [pc, #232]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c2e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2ea:	f003 0301 	and.w	r3, r3, #1
 800c2ee:	613b      	str	r3, [r7, #16]
 800c2f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c2f2:	4b37      	ldr	r3, [pc, #220]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c2f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2f8:	4a35      	ldr	r2, [pc, #212]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c2fa:	f043 0302 	orr.w	r3, r3, #2
 800c2fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c302:	4b33      	ldr	r3, [pc, #204]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c308:	f003 0302 	and.w	r3, r3, #2
 800c30c:	60fb      	str	r3, [r7, #12]
 800c30e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c310:	4b2f      	ldr	r3, [pc, #188]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c316:	4a2e      	ldr	r2, [pc, #184]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c31c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c320:	4b2b      	ldr	r3, [pc, #172]	; (800c3d0 <HAL_ETH_MspInit+0x198>)
 800c322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c32a:	60bb      	str	r3, [r7, #8]
 800c32c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c32e:	2332      	movs	r3, #50	; 0x32
 800c330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c332:	2302      	movs	r3, #2
 800c334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c336:	2300      	movs	r3, #0
 800c338:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c33a:	2303      	movs	r3, #3
 800c33c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c33e:	230b      	movs	r3, #11
 800c340:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c346:	4619      	mov	r1, r3
 800c348:	4822      	ldr	r0, [pc, #136]	; (800c3d4 <HAL_ETH_MspInit+0x19c>)
 800c34a:	f7f9 fd35 	bl	8005db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c34e:	2386      	movs	r3, #134	; 0x86
 800c350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c352:	2302      	movs	r3, #2
 800c354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c356:	2300      	movs	r3, #0
 800c358:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c35a:	2303      	movs	r3, #3
 800c35c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c35e:	230b      	movs	r3, #11
 800c360:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c366:	4619      	mov	r1, r3
 800c368:	481b      	ldr	r0, [pc, #108]	; (800c3d8 <HAL_ETH_MspInit+0x1a0>)
 800c36a:	f7f9 fd25 	bl	8005db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c36e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c374:	2302      	movs	r3, #2
 800c376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c378:	2300      	movs	r3, #0
 800c37a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c37c:	2303      	movs	r3, #3
 800c37e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c380:	230b      	movs	r3, #11
 800c382:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c388:	4619      	mov	r1, r3
 800c38a:	4814      	ldr	r0, [pc, #80]	; (800c3dc <HAL_ETH_MspInit+0x1a4>)
 800c38c:	f7f9 fd14 	bl	8005db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800c390:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c396:	2302      	movs	r3, #2
 800c398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c39a:	2300      	movs	r3, #0
 800c39c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c39e:	2303      	movs	r3, #3
 800c3a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c3a2:	230b      	movs	r3, #11
 800c3a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c3a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	480c      	ldr	r0, [pc, #48]	; (800c3e0 <HAL_ETH_MspInit+0x1a8>)
 800c3ae:	f7f9 fd03 	bl	8005db8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	2105      	movs	r1, #5
 800c3b6:	203d      	movs	r0, #61	; 0x3d
 800c3b8:	f7f6 ff1c 	bl	80031f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c3bc:	203d      	movs	r0, #61	; 0x3d
 800c3be:	f7f6 ff33 	bl	8003228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c3c2:	bf00      	nop
 800c3c4:	3738      	adds	r7, #56	; 0x38
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	40028000 	.word	0x40028000
 800c3d0:	58024400 	.word	0x58024400
 800c3d4:	58020800 	.word	0x58020800
 800c3d8:	58020000 	.word	0x58020000
 800c3dc:	58020400 	.word	0x58020400
 800c3e0:	58021800 	.word	0x58021800

0800c3e4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c3e8:	4802      	ldr	r0, [pc, #8]	; (800c3f4 <ETH_PHY_IO_Init+0x10>)
 800c3ea:	f7f8 fba7 	bl	8004b3c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	24004ffc 	.word	0x24004ffc

0800c3f8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	af00      	add	r7, sp, #0
  return 0;
 800c3fc:	2300      	movs	r3, #0
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	68ba      	ldr	r2, [r7, #8]
 800c418:	68f9      	ldr	r1, [r7, #12]
 800c41a:	4807      	ldr	r0, [pc, #28]	; (800c438 <ETH_PHY_IO_ReadReg+0x30>)
 800c41c:	f7f8 f8f8 	bl	8004610 <HAL_ETH_ReadPHYRegister>
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	d002      	beq.n	800c42c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c426:	f04f 33ff 	mov.w	r3, #4294967295
 800c42a:	e000      	b.n	800c42e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	24004ffc 	.word	0x24004ffc

0800c43c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	68ba      	ldr	r2, [r7, #8]
 800c44c:	68f9      	ldr	r1, [r7, #12]
 800c44e:	4807      	ldr	r0, [pc, #28]	; (800c46c <ETH_PHY_IO_WriteReg+0x30>)
 800c450:	f7f8 f932 	bl	80046b8 <HAL_ETH_WritePHYRegister>
 800c454:	4603      	mov	r3, r0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d002      	beq.n	800c460 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c45a:	f04f 33ff 	mov.w	r3, #4294967295
 800c45e:	e000      	b.n	800c462 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c460:	2300      	movs	r3, #0
}
 800c462:	4618      	mov	r0, r3
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	24004ffc 	.word	0x24004ffc

0800c470 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c474:	f7f5 fc00 	bl	8001c78 <HAL_GetTick>
 800c478:	4603      	mov	r3, r0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	bd80      	pop	{r7, pc}
	...

0800c480 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b0a0      	sub	sp, #128	; 0x80
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c488:	f107 0308 	add.w	r3, r7, #8
 800c48c:	2264      	movs	r2, #100	; 0x64
 800c48e:	2100      	movs	r1, #0
 800c490:	4618      	mov	r0, r3
 800c492:	f011 fe3a 	bl	801e10a <memset>
  int32_t PHYLinkState = 0;
 800c496:	2300      	movs	r3, #0
 800c498:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c49a:	2300      	movs	r3, #0
 800c49c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c49e:	2300      	movs	r3, #0
 800c4a0:	67bb      	str	r3, [r7, #120]	; 0x78
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c4aa:	483a      	ldr	r0, [pc, #232]	; (800c594 <ethernet_link_thread+0x114>)
 800c4ac:	f7f5 fb0d 	bl	8001aca <LAN8742_GetLinkState>
 800c4b0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c4b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c4b8:	089b      	lsrs	r3, r3, #2
 800c4ba:	f003 0301 	and.w	r3, r3, #1
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d00c      	beq.n	800c4de <ethernet_link_thread+0x5e>
 800c4c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	dc09      	bgt.n	800c4de <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800c4ca:	4833      	ldr	r0, [pc, #204]	; (800c598 <ethernet_link_thread+0x118>)
 800c4cc:	f7f7 fd20 	bl	8003f10 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c4d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c4d2:	f007 fc0b 	bl	8013cec <netif_set_down>
    netif_set_link_down(netif);
 800c4d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c4d8:	f007 fc6e 	bl	8013db8 <netif_set_link_down>
 800c4dc:	e055      	b.n	800c58a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c4de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c4e4:	f003 0304 	and.w	r3, r3, #4
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d14e      	bne.n	800c58a <ethernet_link_thread+0x10a>
 800c4ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	dd4b      	ble.n	800c58a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800c4f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4f4:	3b02      	subs	r3, #2
 800c4f6:	2b03      	cmp	r3, #3
 800c4f8:	d82a      	bhi.n	800c550 <ethernet_link_thread+0xd0>
 800c4fa:	a201      	add	r2, pc, #4	; (adr r2, 800c500 <ethernet_link_thread+0x80>)
 800c4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c500:	0800c511 	.word	0x0800c511
 800c504:	0800c523 	.word	0x0800c523
 800c508:	0800c533 	.word	0x0800c533
 800c50c:	0800c543 	.word	0x0800c543
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c514:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c516:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c51a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c51c:	2301      	movs	r3, #1
 800c51e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c520:	e017      	b.n	800c552 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c522:	2300      	movs	r3, #0
 800c524:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c526:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c52a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c52c:	2301      	movs	r3, #1
 800c52e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c530:	e00f      	b.n	800c552 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c536:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c538:	2300      	movs	r3, #0
 800c53a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c53c:	2301      	movs	r3, #1
 800c53e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c540:	e007      	b.n	800c552 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c542:	2300      	movs	r3, #0
 800c544:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c546:	2300      	movs	r3, #0
 800c548:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c54a:	2301      	movs	r3, #1
 800c54c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c54e:	e000      	b.n	800c552 <ethernet_link_thread+0xd2>
    default:
      break;
 800c550:	bf00      	nop
    }

    if(linkchanged)
 800c552:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c554:	2b00      	cmp	r3, #0
 800c556:	d018      	beq.n	800c58a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c558:	f107 0308 	add.w	r3, r7, #8
 800c55c:	4619      	mov	r1, r3
 800c55e:	480e      	ldr	r0, [pc, #56]	; (800c598 <ethernet_link_thread+0x118>)
 800c560:	f7f8 f8fe 	bl	8004760 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c566:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800c568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c56a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c56c:	f107 0308 	add.w	r3, r7, #8
 800c570:	4619      	mov	r1, r3
 800c572:	4809      	ldr	r0, [pc, #36]	; (800c598 <ethernet_link_thread+0x118>)
 800c574:	f7f8 fac8 	bl	8004b08 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800c578:	4807      	ldr	r0, [pc, #28]	; (800c598 <ethernet_link_thread+0x118>)
 800c57a:	f7f7 fbdb 	bl	8003d34 <HAL_ETH_Start>
      netif_set_up(netif);
 800c57e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c580:	f007 fb48 	bl	8013c14 <netif_set_up>
      netif_set_link_up(netif);
 800c584:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c586:	f007 fbe3 	bl	8013d50 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */
//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800c58a:	2064      	movs	r0, #100	; 0x64
 800c58c:	f000 f9e5 	bl	800c95a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c590:	e78b      	b.n	800c4aa <ethernet_link_thread+0x2a>
 800c592:	bf00      	nop
 800c594:	240050e4 	.word	0x240050e4
 800c598:	24004ffc 	.word	0x24004ffc

0800c59c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b086      	sub	sp, #24
 800c5a0:	af02      	add	r7, sp, #8
 800c5a2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800c5a4:	2102      	movs	r1, #2
 800c5a6:	4814      	ldr	r0, [pc, #80]	; (800c5f8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c5a8:	f7f9 fdcf 	bl	800614a <HAL_GPIO_TogglePin>
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c5ac:	4813      	ldr	r0, [pc, #76]	; (800c5fc <HAL_ETH_RxAllocateCallback+0x60>)
 800c5ae:	f007 f8a5 	bl	80136fc <memp_malloc_pool>
 800c5b2:	60f8      	str	r0, [r7, #12]
  if (p)
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d014      	beq.n	800c5e4 <HAL_ETH_RxAllocateCallback+0x48>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f103 0220 	add.w	r2, r3, #32
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	4a0e      	ldr	r2, [pc, #56]	; (800c600 <HAL_ETH_RxAllocateCallback+0x64>)
 800c5c8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800c5d2:	9201      	str	r2, [sp, #4]
 800c5d4:	9300      	str	r3, [sp, #0]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2241      	movs	r2, #65	; 0x41
 800c5da:	2100      	movs	r1, #0
 800c5dc:	2000      	movs	r0, #0
 800c5de:	f007 fe13 	bl	8014208 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c5e2:	e005      	b.n	800c5f0 <HAL_ETH_RxAllocateCallback+0x54>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c5e4:	4b07      	ldr	r3, [pc, #28]	; (800c604 <HAL_ETH_RxAllocateCallback+0x68>)
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	601a      	str	r2, [r3, #0]
}
 800c5f0:	bf00      	nop
 800c5f2:	3710      	adds	r7, #16
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	58021000 	.word	0x58021000
 800c5fc:	08022b58 	.word	0x08022b58
 800c600:	0800c1e9 	.word	0x0800c1e9
 800c604:	24004ff0 	.word	0x24004ff0

0800c608 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c608:	b480      	push	{r7}
 800c60a:	b08d      	sub	sp, #52	; 0x34
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
 800c614:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800c61e:	2300      	movs	r3, #0
 800c620:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	3b20      	subs	r3, #32
 800c626:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 800c628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62a:	2200      	movs	r2, #0
 800c62c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c630:	2200      	movs	r2, #0
 800c632:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c636:	887a      	ldrh	r2, [r7, #2]
 800c638:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d103      	bne.n	800c64a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c646:	601a      	str	r2, [r3, #0]
 800c648:	e003      	b.n	800c652 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c650:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c656:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c65e:	e009      	b.n	800c674 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c662:	891a      	ldrh	r2, [r3, #8]
 800c664:	887b      	ldrh	r3, [r7, #2]
 800c666:	4413      	add	r3, r2
 800c668:	b29a      	uxth	r2, r3
 800c66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c676:	2b00      	cmp	r3, #0
 800c678:	d1f2      	bne.n	800c660 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c67a:	887b      	ldrh	r3, [r7, #2]
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	623a      	str	r2, [r7, #32]
 800c680:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800c682:	69fb      	ldr	r3, [r7, #28]
 800c684:	2b00      	cmp	r3, #0
 800c686:	dd1d      	ble.n	800c6c4 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800c688:	6a3b      	ldr	r3, [r7, #32]
 800c68a:	f003 021f 	and.w	r2, r3, #31
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	4413      	add	r3, r2
 800c692:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800c694:	6a3b      	ldr	r3, [r7, #32]
 800c696:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c698:	f3bf 8f4f 	dsb	sy
}
 800c69c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800c69e:	4a0d      	ldr	r2, [pc, #52]	; (800c6d4 <HAL_ETH_RxLinkCallback+0xcc>)
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	3320      	adds	r3, #32
 800c6aa:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	3b20      	subs	r3, #32
 800c6b0:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800c6b2:	69bb      	ldr	r3, [r7, #24]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	dcf2      	bgt.n	800c69e <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800c6b8:	f3bf 8f4f 	dsb	sy
}
 800c6bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c6be:	f3bf 8f6f 	isb	sy
}
 800c6c2:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800c6c4:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c6c6:	bf00      	nop
 800c6c8:	3734      	adds	r7, #52	; 0x34
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	e000ed00 	.word	0xe000ed00

0800c6d8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f007 ff4b 	bl	801457c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800c6e6:	bf00      	nop
 800c6e8:	3708      	adds	r7, #8
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
	...

0800c6f0 <__NVIC_SetPriority>:
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b083      	sub	sp, #12
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	6039      	str	r1, [r7, #0]
 800c6fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c6fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c700:	2b00      	cmp	r3, #0
 800c702:	db0a      	blt.n	800c71a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	b2da      	uxtb	r2, r3
 800c708:	490c      	ldr	r1, [pc, #48]	; (800c73c <__NVIC_SetPriority+0x4c>)
 800c70a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c70e:	0112      	lsls	r2, r2, #4
 800c710:	b2d2      	uxtb	r2, r2
 800c712:	440b      	add	r3, r1
 800c714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c718:	e00a      	b.n	800c730 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	b2da      	uxtb	r2, r3
 800c71e:	4908      	ldr	r1, [pc, #32]	; (800c740 <__NVIC_SetPriority+0x50>)
 800c720:	88fb      	ldrh	r3, [r7, #6]
 800c722:	f003 030f 	and.w	r3, r3, #15
 800c726:	3b04      	subs	r3, #4
 800c728:	0112      	lsls	r2, r2, #4
 800c72a:	b2d2      	uxtb	r2, r2
 800c72c:	440b      	add	r3, r1
 800c72e:	761a      	strb	r2, [r3, #24]
}
 800c730:	bf00      	nop
 800c732:	370c      	adds	r7, #12
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr
 800c73c:	e000e100 	.word	0xe000e100
 800c740:	e000ed00 	.word	0xe000ed00

0800c744 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c744:	b580      	push	{r7, lr}
 800c746:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c748:	4b05      	ldr	r3, [pc, #20]	; (800c760 <SysTick_Handler+0x1c>)
 800c74a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c74c:	f002 fd5e 	bl	800f20c <xTaskGetSchedulerState>
 800c750:	4603      	mov	r3, r0
 800c752:	2b01      	cmp	r3, #1
 800c754:	d001      	beq.n	800c75a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c756:	f003 fc57 	bl	8010008 <xPortSysTickHandler>
  }
}
 800c75a:	bf00      	nop
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	e000e010 	.word	0xe000e010

0800c764 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c764:	b580      	push	{r7, lr}
 800c766:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c768:	2100      	movs	r1, #0
 800c76a:	f06f 0004 	mvn.w	r0, #4
 800c76e:	f7ff ffbf 	bl	800c6f0 <__NVIC_SetPriority>
#endif
}
 800c772:	bf00      	nop
 800c774:	bd80      	pop	{r7, pc}
	...

0800c778 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c77e:	f3ef 8305 	mrs	r3, IPSR
 800c782:	603b      	str	r3, [r7, #0]
  return(result);
 800c784:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c786:	2b00      	cmp	r3, #0
 800c788:	d003      	beq.n	800c792 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c78a:	f06f 0305 	mvn.w	r3, #5
 800c78e:	607b      	str	r3, [r7, #4]
 800c790:	e00c      	b.n	800c7ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c792:	4b0a      	ldr	r3, [pc, #40]	; (800c7bc <osKernelInitialize+0x44>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d105      	bne.n	800c7a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c79a:	4b08      	ldr	r3, [pc, #32]	; (800c7bc <osKernelInitialize+0x44>)
 800c79c:	2201      	movs	r2, #1
 800c79e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	607b      	str	r3, [r7, #4]
 800c7a4:	e002      	b.n	800c7ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c7ac:	687b      	ldr	r3, [r7, #4]
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	370c      	adds	r7, #12
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr
 800c7ba:	bf00      	nop
 800c7bc:	24005104 	.word	0x24005104

0800c7c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7c6:	f3ef 8305 	mrs	r3, IPSR
 800c7ca:	603b      	str	r3, [r7, #0]
  return(result);
 800c7cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d003      	beq.n	800c7da <osKernelStart+0x1a>
    stat = osErrorISR;
 800c7d2:	f06f 0305 	mvn.w	r3, #5
 800c7d6:	607b      	str	r3, [r7, #4]
 800c7d8:	e010      	b.n	800c7fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c7da:	4b0b      	ldr	r3, [pc, #44]	; (800c808 <osKernelStart+0x48>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d109      	bne.n	800c7f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c7e2:	f7ff ffbf 	bl	800c764 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c7e6:	4b08      	ldr	r3, [pc, #32]	; (800c808 <osKernelStart+0x48>)
 800c7e8:	2202      	movs	r2, #2
 800c7ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c7ec:	f002 f872 	bl	800e8d4 <vTaskStartScheduler>
      stat = osOK;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	607b      	str	r3, [r7, #4]
 800c7f4:	e002      	b.n	800c7fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c7fc:	687b      	ldr	r3, [r7, #4]
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	24005104 	.word	0x24005104

0800c80c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c812:	f3ef 8305 	mrs	r3, IPSR
 800c816:	603b      	str	r3, [r7, #0]
  return(result);
 800c818:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d003      	beq.n	800c826 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c81e:	f002 f987 	bl	800eb30 <xTaskGetTickCountFromISR>
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	e002      	b.n	800c82c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c826:	f002 f973 	bl	800eb10 <xTaskGetTickCount>
 800c82a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c82c:	687b      	ldr	r3, [r7, #4]
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}

0800c836 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c836:	b580      	push	{r7, lr}
 800c838:	b08e      	sub	sp, #56	; 0x38
 800c83a:	af04      	add	r7, sp, #16
 800c83c:	60f8      	str	r0, [r7, #12]
 800c83e:	60b9      	str	r1, [r7, #8]
 800c840:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c842:	2300      	movs	r3, #0
 800c844:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c846:	f3ef 8305 	mrs	r3, IPSR
 800c84a:	617b      	str	r3, [r7, #20]
  return(result);
 800c84c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d17e      	bne.n	800c950 <osThreadNew+0x11a>
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d07b      	beq.n	800c950 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c858:	2380      	movs	r3, #128	; 0x80
 800c85a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c85c:	2318      	movs	r3, #24
 800c85e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c860:	2300      	movs	r3, #0
 800c862:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c864:	f04f 33ff 	mov.w	r3, #4294967295
 800c868:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d045      	beq.n	800c8fc <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d002      	beq.n	800c87e <osThreadNew+0x48>
        name = attr->name;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	699b      	ldr	r3, [r3, #24]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d002      	beq.n	800c88c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	699b      	ldr	r3, [r3, #24]
 800c88a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d008      	beq.n	800c8a4 <osThreadNew+0x6e>
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	2b38      	cmp	r3, #56	; 0x38
 800c896:	d805      	bhi.n	800c8a4 <osThreadNew+0x6e>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	f003 0301 	and.w	r3, r3, #1
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d001      	beq.n	800c8a8 <osThreadNew+0x72>
        return (NULL);
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	e054      	b.n	800c952 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	695b      	ldr	r3, [r3, #20]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d003      	beq.n	800c8b8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	695b      	ldr	r3, [r3, #20]
 800c8b4:	089b      	lsrs	r3, r3, #2
 800c8b6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d00e      	beq.n	800c8de <osThreadNew+0xa8>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	2bc3      	cmp	r3, #195	; 0xc3
 800c8c6:	d90a      	bls.n	800c8de <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d006      	beq.n	800c8de <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	695b      	ldr	r3, [r3, #20]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d002      	beq.n	800c8de <osThreadNew+0xa8>
        mem = 1;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	61bb      	str	r3, [r7, #24]
 800c8dc:	e010      	b.n	800c900 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d10c      	bne.n	800c900 <osThreadNew+0xca>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d108      	bne.n	800c900 <osThreadNew+0xca>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d104      	bne.n	800c900 <osThreadNew+0xca>
          mem = 0;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	61bb      	str	r3, [r7, #24]
 800c8fa:	e001      	b.n	800c900 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d110      	bne.n	800c928 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c90e:	9202      	str	r2, [sp, #8]
 800c910:	9301      	str	r3, [sp, #4]
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	9300      	str	r3, [sp, #0]
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	6a3a      	ldr	r2, [r7, #32]
 800c91a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c91c:	68f8      	ldr	r0, [r7, #12]
 800c91e:	f001 fde7 	bl	800e4f0 <xTaskCreateStatic>
 800c922:	4603      	mov	r3, r0
 800c924:	613b      	str	r3, [r7, #16]
 800c926:	e013      	b.n	800c950 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c928:	69bb      	ldr	r3, [r7, #24]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d110      	bne.n	800c950 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c92e:	6a3b      	ldr	r3, [r7, #32]
 800c930:	b29a      	uxth	r2, r3
 800c932:	f107 0310 	add.w	r3, r7, #16
 800c936:	9301      	str	r3, [sp, #4]
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f001 fe32 	bl	800e5aa <xTaskCreate>
 800c946:	4603      	mov	r3, r0
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d001      	beq.n	800c950 <osThreadNew+0x11a>
            hTask = NULL;
 800c94c:	2300      	movs	r3, #0
 800c94e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c950:	693b      	ldr	r3, [r7, #16]
}
 800c952:	4618      	mov	r0, r3
 800c954:	3728      	adds	r7, #40	; 0x28
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}

0800c95a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b084      	sub	sp, #16
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c962:	f3ef 8305 	mrs	r3, IPSR
 800c966:	60bb      	str	r3, [r7, #8]
  return(result);
 800c968:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d003      	beq.n	800c976 <osDelay+0x1c>
    stat = osErrorISR;
 800c96e:	f06f 0305 	mvn.w	r3, #5
 800c972:	60fb      	str	r3, [r7, #12]
 800c974:	e007      	b.n	800c986 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c976:	2300      	movs	r3, #0
 800c978:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d002      	beq.n	800c986 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f001 ff73 	bl	800e86c <vTaskDelay>
    }
  }

  return (stat);
 800c986:	68fb      	ldr	r3, [r7, #12]
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3710      	adds	r7, #16
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c990:	b580      	push	{r7, lr}
 800c992:	b088      	sub	sp, #32
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c998:	2300      	movs	r3, #0
 800c99a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c99c:	f3ef 8305 	mrs	r3, IPSR
 800c9a0:	60bb      	str	r3, [r7, #8]
  return(result);
 800c9a2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d174      	bne.n	800ca92 <osMutexNew+0x102>
    if (attr != NULL) {
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d003      	beq.n	800c9b6 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	61bb      	str	r3, [r7, #24]
 800c9b4:	e001      	b.n	800c9ba <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c9ba:	69bb      	ldr	r3, [r7, #24]
 800c9bc:	f003 0301 	and.w	r3, r3, #1
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d002      	beq.n	800c9ca <osMutexNew+0x3a>
      rmtx = 1U;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	617b      	str	r3, [r7, #20]
 800c9c8:	e001      	b.n	800c9ce <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	f003 0308 	and.w	r3, r3, #8
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d15c      	bne.n	800ca92 <osMutexNew+0x102>
      mem = -1;
 800c9d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c9dc:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d015      	beq.n	800ca10 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	689b      	ldr	r3, [r3, #8]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d006      	beq.n	800c9fa <osMutexNew+0x6a>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	68db      	ldr	r3, [r3, #12]
 800c9f0:	2b4f      	cmp	r3, #79	; 0x4f
 800c9f2:	d902      	bls.n	800c9fa <osMutexNew+0x6a>
          mem = 1;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	613b      	str	r3, [r7, #16]
 800c9f8:	e00c      	b.n	800ca14 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d108      	bne.n	800ca14 <osMutexNew+0x84>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d104      	bne.n	800ca14 <osMutexNew+0x84>
            mem = 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	613b      	str	r3, [r7, #16]
 800ca0e:	e001      	b.n	800ca14 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800ca10:	2300      	movs	r3, #0
 800ca12:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d112      	bne.n	800ca40 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d007      	beq.n	800ca30 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	689b      	ldr	r3, [r3, #8]
 800ca24:	4619      	mov	r1, r3
 800ca26:	2004      	movs	r0, #4
 800ca28:	f000 fdd1 	bl	800d5ce <xQueueCreateMutexStatic>
 800ca2c:	61f8      	str	r0, [r7, #28]
 800ca2e:	e016      	b.n	800ca5e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	4619      	mov	r1, r3
 800ca36:	2001      	movs	r0, #1
 800ca38:	f000 fdc9 	bl	800d5ce <xQueueCreateMutexStatic>
 800ca3c:	61f8      	str	r0, [r7, #28]
 800ca3e:	e00e      	b.n	800ca5e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d10b      	bne.n	800ca5e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d004      	beq.n	800ca56 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800ca4c:	2004      	movs	r0, #4
 800ca4e:	f000 fda6 	bl	800d59e <xQueueCreateMutex>
 800ca52:	61f8      	str	r0, [r7, #28]
 800ca54:	e003      	b.n	800ca5e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800ca56:	2001      	movs	r0, #1
 800ca58:	f000 fda1 	bl	800d59e <xQueueCreateMutex>
 800ca5c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ca5e:	69fb      	ldr	r3, [r7, #28]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d00c      	beq.n	800ca7e <osMutexNew+0xee>
        if (attr != NULL) {
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d003      	beq.n	800ca72 <osMutexNew+0xe2>
          name = attr->name;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	60fb      	str	r3, [r7, #12]
 800ca70:	e001      	b.n	800ca76 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800ca72:	2300      	movs	r3, #0
 800ca74:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ca76:	68f9      	ldr	r1, [r7, #12]
 800ca78:	69f8      	ldr	r0, [r7, #28]
 800ca7a:	f001 fcb1 	bl	800e3e0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d006      	beq.n	800ca92 <osMutexNew+0x102>
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d003      	beq.n	800ca92 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	f043 0301 	orr.w	r3, r3, #1
 800ca90:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ca92:	69fb      	ldr	r3, [r7, #28]
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3720      	adds	r7, #32
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b086      	sub	sp, #24
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f023 0301 	bic.w	r3, r3, #1
 800caac:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f003 0301 	and.w	r3, r3, #1
 800cab4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cab6:	2300      	movs	r3, #0
 800cab8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800caba:	f3ef 8305 	mrs	r3, IPSR
 800cabe:	60bb      	str	r3, [r7, #8]
  return(result);
 800cac0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d003      	beq.n	800cace <osMutexAcquire+0x32>
    stat = osErrorISR;
 800cac6:	f06f 0305 	mvn.w	r3, #5
 800caca:	617b      	str	r3, [r7, #20]
 800cacc:	e02c      	b.n	800cb28 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d103      	bne.n	800cadc <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800cad4:	f06f 0303 	mvn.w	r3, #3
 800cad8:	617b      	str	r3, [r7, #20]
 800cada:	e025      	b.n	800cb28 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d011      	beq.n	800cb06 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cae2:	6839      	ldr	r1, [r7, #0]
 800cae4:	6938      	ldr	r0, [r7, #16]
 800cae6:	f000 fdc1 	bl	800d66c <xQueueTakeMutexRecursive>
 800caea:	4603      	mov	r3, r0
 800caec:	2b01      	cmp	r3, #1
 800caee:	d01b      	beq.n	800cb28 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d003      	beq.n	800cafe <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800caf6:	f06f 0301 	mvn.w	r3, #1
 800cafa:	617b      	str	r3, [r7, #20]
 800cafc:	e014      	b.n	800cb28 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cafe:	f06f 0302 	mvn.w	r3, #2
 800cb02:	617b      	str	r3, [r7, #20]
 800cb04:	e010      	b.n	800cb28 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	6938      	ldr	r0, [r7, #16]
 800cb0a:	f001 f955 	bl	800ddb8 <xQueueSemaphoreTake>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d009      	beq.n	800cb28 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d003      	beq.n	800cb22 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800cb1a:	f06f 0301 	mvn.w	r3, #1
 800cb1e:	617b      	str	r3, [r7, #20]
 800cb20:	e002      	b.n	800cb28 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800cb22:	f06f 0302 	mvn.w	r3, #2
 800cb26:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800cb28:	697b      	ldr	r3, [r7, #20]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3718      	adds	r7, #24
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b086      	sub	sp, #24
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f023 0301 	bic.w	r3, r3, #1
 800cb40:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f003 0301 	and.w	r3, r3, #1
 800cb48:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb4e:	f3ef 8305 	mrs	r3, IPSR
 800cb52:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb54:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d003      	beq.n	800cb62 <osMutexRelease+0x30>
    stat = osErrorISR;
 800cb5a:	f06f 0305 	mvn.w	r3, #5
 800cb5e:	617b      	str	r3, [r7, #20]
 800cb60:	e01f      	b.n	800cba2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d103      	bne.n	800cb70 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800cb68:	f06f 0303 	mvn.w	r3, #3
 800cb6c:	617b      	str	r3, [r7, #20]
 800cb6e:	e018      	b.n	800cba2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d009      	beq.n	800cb8a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cb76:	6938      	ldr	r0, [r7, #16]
 800cb78:	f000 fd44 	bl	800d604 <xQueueGiveMutexRecursive>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d00f      	beq.n	800cba2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800cb82:	f06f 0302 	mvn.w	r3, #2
 800cb86:	617b      	str	r3, [r7, #20]
 800cb88:	e00b      	b.n	800cba2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	2100      	movs	r1, #0
 800cb90:	6938      	ldr	r0, [r7, #16]
 800cb92:	f000 fe0b 	bl	800d7ac <xQueueGenericSend>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d002      	beq.n	800cba2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800cb9c:	f06f 0302 	mvn.w	r3, #2
 800cba0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cba2:	697b      	ldr	r3, [r7, #20]
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3718      	adds	r7, #24
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b08a      	sub	sp, #40	; 0x28
 800cbb0:	af02      	add	r7, sp, #8
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbbc:	f3ef 8305 	mrs	r3, IPSR
 800cbc0:	613b      	str	r3, [r7, #16]
  return(result);
 800cbc2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d175      	bne.n	800ccb4 <osSemaphoreNew+0x108>
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d072      	beq.n	800ccb4 <osSemaphoreNew+0x108>
 800cbce:	68ba      	ldr	r2, [r7, #8]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d86e      	bhi.n	800ccb4 <osSemaphoreNew+0x108>
    mem = -1;
 800cbd6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d015      	beq.n	800cc0e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	689b      	ldr	r3, [r3, #8]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d006      	beq.n	800cbf8 <osSemaphoreNew+0x4c>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	2b4f      	cmp	r3, #79	; 0x4f
 800cbf0:	d902      	bls.n	800cbf8 <osSemaphoreNew+0x4c>
        mem = 1;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	61bb      	str	r3, [r7, #24]
 800cbf6:	e00c      	b.n	800cc12 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d108      	bne.n	800cc12 <osSemaphoreNew+0x66>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d104      	bne.n	800cc12 <osSemaphoreNew+0x66>
          mem = 0;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	61bb      	str	r3, [r7, #24]
 800cc0c:	e001      	b.n	800cc12 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc18:	d04c      	beq.n	800ccb4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d128      	bne.n	800cc72 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800cc20:	69bb      	ldr	r3, [r7, #24]
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d10a      	bne.n	800cc3c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	689b      	ldr	r3, [r3, #8]
 800cc2a:	2203      	movs	r2, #3
 800cc2c:	9200      	str	r2, [sp, #0]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	2100      	movs	r1, #0
 800cc32:	2001      	movs	r0, #1
 800cc34:	f000 fbc4 	bl	800d3c0 <xQueueGenericCreateStatic>
 800cc38:	61f8      	str	r0, [r7, #28]
 800cc3a:	e005      	b.n	800cc48 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800cc3c:	2203      	movs	r2, #3
 800cc3e:	2100      	movs	r1, #0
 800cc40:	2001      	movs	r0, #1
 800cc42:	f000 fc35 	bl	800d4b0 <xQueueGenericCreate>
 800cc46:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d022      	beq.n	800cc94 <osSemaphoreNew+0xe8>
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d01f      	beq.n	800cc94 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cc54:	2300      	movs	r3, #0
 800cc56:	2200      	movs	r2, #0
 800cc58:	2100      	movs	r1, #0
 800cc5a:	69f8      	ldr	r0, [r7, #28]
 800cc5c:	f000 fda6 	bl	800d7ac <xQueueGenericSend>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d016      	beq.n	800cc94 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800cc66:	69f8      	ldr	r0, [r7, #28]
 800cc68:	f001 fa6e 	bl	800e148 <vQueueDelete>
            hSemaphore = NULL;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	61fb      	str	r3, [r7, #28]
 800cc70:	e010      	b.n	800cc94 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800cc72:	69bb      	ldr	r3, [r7, #24]
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d108      	bne.n	800cc8a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	68b9      	ldr	r1, [r7, #8]
 800cc80:	68f8      	ldr	r0, [r7, #12]
 800cc82:	f000 fd29 	bl	800d6d8 <xQueueCreateCountingSemaphoreStatic>
 800cc86:	61f8      	str	r0, [r7, #28]
 800cc88:	e004      	b.n	800cc94 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cc8a:	68b9      	ldr	r1, [r7, #8]
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f000 fd5a 	bl	800d746 <xQueueCreateCountingSemaphore>
 800cc92:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d00c      	beq.n	800ccb4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d003      	beq.n	800cca8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	617b      	str	r3, [r7, #20]
 800cca6:	e001      	b.n	800ccac <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ccac:	6979      	ldr	r1, [r7, #20]
 800ccae:	69f8      	ldr	r0, [r7, #28]
 800ccb0:	f001 fb96 	bl	800e3e0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ccb4:	69fb      	ldr	r3, [r7, #28]
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3720      	adds	r7, #32
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
	...

0800ccc0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b086      	sub	sp, #24
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d103      	bne.n	800cce0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ccd8:	f06f 0303 	mvn.w	r3, #3
 800ccdc:	617b      	str	r3, [r7, #20]
 800ccde:	e039      	b.n	800cd54 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cce0:	f3ef 8305 	mrs	r3, IPSR
 800cce4:	60fb      	str	r3, [r7, #12]
  return(result);
 800cce6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d022      	beq.n	800cd32 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d003      	beq.n	800ccfa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ccf2:	f06f 0303 	mvn.w	r3, #3
 800ccf6:	617b      	str	r3, [r7, #20]
 800ccf8:	e02c      	b.n	800cd54 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ccfe:	f107 0308 	add.w	r3, r7, #8
 800cd02:	461a      	mov	r2, r3
 800cd04:	2100      	movs	r1, #0
 800cd06:	6938      	ldr	r0, [r7, #16]
 800cd08:	f001 f962 	bl	800dfd0 <xQueueReceiveFromISR>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d003      	beq.n	800cd1a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800cd12:	f06f 0302 	mvn.w	r3, #2
 800cd16:	617b      	str	r3, [r7, #20]
 800cd18:	e01c      	b.n	800cd54 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d019      	beq.n	800cd54 <osSemaphoreAcquire+0x94>
 800cd20:	4b0f      	ldr	r3, [pc, #60]	; (800cd60 <osSemaphoreAcquire+0xa0>)
 800cd22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd26:	601a      	str	r2, [r3, #0]
 800cd28:	f3bf 8f4f 	dsb	sy
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	e010      	b.n	800cd54 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800cd32:	6839      	ldr	r1, [r7, #0]
 800cd34:	6938      	ldr	r0, [r7, #16]
 800cd36:	f001 f83f 	bl	800ddb8 <xQueueSemaphoreTake>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d009      	beq.n	800cd54 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d003      	beq.n	800cd4e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800cd46:	f06f 0301 	mvn.w	r3, #1
 800cd4a:	617b      	str	r3, [r7, #20]
 800cd4c:	e002      	b.n	800cd54 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800cd4e:	f06f 0302 	mvn.w	r3, #2
 800cd52:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cd54:	697b      	ldr	r3, [r7, #20]
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3718      	adds	r7, #24
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	e000ed04 	.word	0xe000ed04

0800cd64 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b086      	sub	sp, #24
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d103      	bne.n	800cd82 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800cd7a:	f06f 0303 	mvn.w	r3, #3
 800cd7e:	617b      	str	r3, [r7, #20]
 800cd80:	e02c      	b.n	800cddc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd82:	f3ef 8305 	mrs	r3, IPSR
 800cd86:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd88:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d01a      	beq.n	800cdc4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cd92:	f107 0308 	add.w	r3, r7, #8
 800cd96:	4619      	mov	r1, r3
 800cd98:	6938      	ldr	r0, [r7, #16]
 800cd9a:	f000 fea0 	bl	800dade <xQueueGiveFromISR>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d003      	beq.n	800cdac <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800cda4:	f06f 0302 	mvn.w	r3, #2
 800cda8:	617b      	str	r3, [r7, #20]
 800cdaa:	e017      	b.n	800cddc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d014      	beq.n	800cddc <osSemaphoreRelease+0x78>
 800cdb2:	4b0d      	ldr	r3, [pc, #52]	; (800cde8 <osSemaphoreRelease+0x84>)
 800cdb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	f3bf 8f6f 	isb	sy
 800cdc2:	e00b      	b.n	800cddc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	2100      	movs	r1, #0
 800cdca:	6938      	ldr	r0, [r7, #16]
 800cdcc:	f000 fcee 	bl	800d7ac <xQueueGenericSend>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d002      	beq.n	800cddc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800cdd6:	f06f 0302 	mvn.w	r3, #2
 800cdda:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800cddc:	697b      	ldr	r3, [r7, #20]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3718      	adds	r7, #24
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	e000ed04 	.word	0xe000ed04

0800cdec <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b086      	sub	sp, #24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdf8:	f3ef 8305 	mrs	r3, IPSR
 800cdfc:	60fb      	str	r3, [r7, #12]
  return(result);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d003      	beq.n	800ce0c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800ce04:	f06f 0305 	mvn.w	r3, #5
 800ce08:	617b      	str	r3, [r7, #20]
 800ce0a:	e00e      	b.n	800ce2a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d103      	bne.n	800ce1a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800ce12:	f06f 0303 	mvn.w	r3, #3
 800ce16:	617b      	str	r3, [r7, #20]
 800ce18:	e007      	b.n	800ce2a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800ce1a:	6938      	ldr	r0, [r7, #16]
 800ce1c:	f001 fb0a 	bl	800e434 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800ce20:	2300      	movs	r3, #0
 800ce22:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800ce24:	6938      	ldr	r0, [r7, #16]
 800ce26:	f001 f98f 	bl	800e148 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800ce2a:	697b      	ldr	r3, [r7, #20]
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3718      	adds	r7, #24
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b08a      	sub	sp, #40	; 0x28
 800ce38:	af02      	add	r7, sp, #8
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ce40:	2300      	movs	r3, #0
 800ce42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce44:	f3ef 8305 	mrs	r3, IPSR
 800ce48:	613b      	str	r3, [r7, #16]
  return(result);
 800ce4a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d15f      	bne.n	800cf10 <osMessageQueueNew+0xdc>
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d05c      	beq.n	800cf10 <osMessageQueueNew+0xdc>
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d059      	beq.n	800cf10 <osMessageQueueNew+0xdc>
    mem = -1;
 800ce5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce60:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d029      	beq.n	800cebc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d012      	beq.n	800ce96 <osMessageQueueNew+0x62>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	2b4f      	cmp	r3, #79	; 0x4f
 800ce76:	d90e      	bls.n	800ce96 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00a      	beq.n	800ce96 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	695a      	ldr	r2, [r3, #20]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	68b9      	ldr	r1, [r7, #8]
 800ce88:	fb01 f303 	mul.w	r3, r1, r3
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d302      	bcc.n	800ce96 <osMessageQueueNew+0x62>
        mem = 1;
 800ce90:	2301      	movs	r3, #1
 800ce92:	61bb      	str	r3, [r7, #24]
 800ce94:	e014      	b.n	800cec0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	689b      	ldr	r3, [r3, #8]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d110      	bne.n	800cec0 <osMessageQueueNew+0x8c>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d10c      	bne.n	800cec0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d108      	bne.n	800cec0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	695b      	ldr	r3, [r3, #20]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d104      	bne.n	800cec0 <osMessageQueueNew+0x8c>
          mem = 0;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	61bb      	str	r3, [r7, #24]
 800ceba:	e001      	b.n	800cec0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cebc:	2300      	movs	r3, #0
 800cebe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d10b      	bne.n	800cede <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	691a      	ldr	r2, [r3, #16]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	2100      	movs	r1, #0
 800ced0:	9100      	str	r1, [sp, #0]
 800ced2:	68b9      	ldr	r1, [r7, #8]
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	f000 fa73 	bl	800d3c0 <xQueueGenericCreateStatic>
 800ceda:	61f8      	str	r0, [r7, #28]
 800cedc:	e008      	b.n	800cef0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800cede:	69bb      	ldr	r3, [r7, #24]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d105      	bne.n	800cef0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800cee4:	2200      	movs	r2, #0
 800cee6:	68b9      	ldr	r1, [r7, #8]
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f000 fae1 	bl	800d4b0 <xQueueGenericCreate>
 800ceee:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00c      	beq.n	800cf10 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d003      	beq.n	800cf04 <osMessageQueueNew+0xd0>
        name = attr->name;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	617b      	str	r3, [r7, #20]
 800cf02:	e001      	b.n	800cf08 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800cf04:	2300      	movs	r3, #0
 800cf06:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cf08:	6979      	ldr	r1, [r7, #20]
 800cf0a:	69f8      	ldr	r0, [r7, #28]
 800cf0c:	f001 fa68 	bl	800e3e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cf10:	69fb      	ldr	r3, [r7, #28]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3720      	adds	r7, #32
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
	...

0800cf1c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b088      	sub	sp, #32
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	603b      	str	r3, [r7, #0]
 800cf28:	4613      	mov	r3, r2
 800cf2a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cf30:	2300      	movs	r3, #0
 800cf32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf34:	f3ef 8305 	mrs	r3, IPSR
 800cf38:	617b      	str	r3, [r7, #20]
  return(result);
 800cf3a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d028      	beq.n	800cf92 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cf40:	69bb      	ldr	r3, [r7, #24]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d005      	beq.n	800cf52 <osMessageQueuePut+0x36>
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d002      	beq.n	800cf52 <osMessageQueuePut+0x36>
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d003      	beq.n	800cf5a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800cf52:	f06f 0303 	mvn.w	r3, #3
 800cf56:	61fb      	str	r3, [r7, #28]
 800cf58:	e038      	b.n	800cfcc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cf5e:	f107 0210 	add.w	r2, r7, #16
 800cf62:	2300      	movs	r3, #0
 800cf64:	68b9      	ldr	r1, [r7, #8]
 800cf66:	69b8      	ldr	r0, [r7, #24]
 800cf68:	f000 fd1e 	bl	800d9a8 <xQueueGenericSendFromISR>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d003      	beq.n	800cf7a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800cf72:	f06f 0302 	mvn.w	r3, #2
 800cf76:	61fb      	str	r3, [r7, #28]
 800cf78:	e028      	b.n	800cfcc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d025      	beq.n	800cfcc <osMessageQueuePut+0xb0>
 800cf80:	4b15      	ldr	r3, [pc, #84]	; (800cfd8 <osMessageQueuePut+0xbc>)
 800cf82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf86:	601a      	str	r2, [r3, #0]
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	f3bf 8f6f 	isb	sy
 800cf90:	e01c      	b.n	800cfcc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d002      	beq.n	800cf9e <osMessageQueuePut+0x82>
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d103      	bne.n	800cfa6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800cf9e:	f06f 0303 	mvn.w	r3, #3
 800cfa2:	61fb      	str	r3, [r7, #28]
 800cfa4:	e012      	b.n	800cfcc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	683a      	ldr	r2, [r7, #0]
 800cfaa:	68b9      	ldr	r1, [r7, #8]
 800cfac:	69b8      	ldr	r0, [r7, #24]
 800cfae:	f000 fbfd 	bl	800d7ac <xQueueGenericSend>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d009      	beq.n	800cfcc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d003      	beq.n	800cfc6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cfbe:	f06f 0301 	mvn.w	r3, #1
 800cfc2:	61fb      	str	r3, [r7, #28]
 800cfc4:	e002      	b.n	800cfcc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cfc6:	f06f 0302 	mvn.w	r3, #2
 800cfca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cfcc:	69fb      	ldr	r3, [r7, #28]
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3720      	adds	r7, #32
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	e000ed04 	.word	0xe000ed04

0800cfdc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b088      	sub	sp, #32
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
 800cfe8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cfee:	2300      	movs	r3, #0
 800cff0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cff2:	f3ef 8305 	mrs	r3, IPSR
 800cff6:	617b      	str	r3, [r7, #20]
  return(result);
 800cff8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d028      	beq.n	800d050 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cffe:	69bb      	ldr	r3, [r7, #24]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d005      	beq.n	800d010 <osMessageQueueGet+0x34>
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d002      	beq.n	800d010 <osMessageQueueGet+0x34>
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d003      	beq.n	800d018 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d010:	f06f 0303 	mvn.w	r3, #3
 800d014:	61fb      	str	r3, [r7, #28]
 800d016:	e037      	b.n	800d088 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d018:	2300      	movs	r3, #0
 800d01a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d01c:	f107 0310 	add.w	r3, r7, #16
 800d020:	461a      	mov	r2, r3
 800d022:	68b9      	ldr	r1, [r7, #8]
 800d024:	69b8      	ldr	r0, [r7, #24]
 800d026:	f000 ffd3 	bl	800dfd0 <xQueueReceiveFromISR>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d003      	beq.n	800d038 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d030:	f06f 0302 	mvn.w	r3, #2
 800d034:	61fb      	str	r3, [r7, #28]
 800d036:	e027      	b.n	800d088 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d024      	beq.n	800d088 <osMessageQueueGet+0xac>
 800d03e:	4b15      	ldr	r3, [pc, #84]	; (800d094 <osMessageQueueGet+0xb8>)
 800d040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d044:	601a      	str	r2, [r3, #0]
 800d046:	f3bf 8f4f 	dsb	sy
 800d04a:	f3bf 8f6f 	isb	sy
 800d04e:	e01b      	b.n	800d088 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d050:	69bb      	ldr	r3, [r7, #24]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d002      	beq.n	800d05c <osMessageQueueGet+0x80>
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d103      	bne.n	800d064 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d05c:	f06f 0303 	mvn.w	r3, #3
 800d060:	61fb      	str	r3, [r7, #28]
 800d062:	e011      	b.n	800d088 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d064:	683a      	ldr	r2, [r7, #0]
 800d066:	68b9      	ldr	r1, [r7, #8]
 800d068:	69b8      	ldr	r0, [r7, #24]
 800d06a:	f000 fdc5 	bl	800dbf8 <xQueueReceive>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b01      	cmp	r3, #1
 800d072:	d009      	beq.n	800d088 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d003      	beq.n	800d082 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d07a:	f06f 0301 	mvn.w	r3, #1
 800d07e:	61fb      	str	r3, [r7, #28]
 800d080:	e002      	b.n	800d088 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d082:	f06f 0302 	mvn.w	r3, #2
 800d086:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d088:	69fb      	ldr	r3, [r7, #28]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3720      	adds	r7, #32
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	e000ed04 	.word	0xe000ed04

0800d098 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800d098:	b580      	push	{r7, lr}
 800d09a:	b086      	sub	sp, #24
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d102      	bne.n	800d0b0 <osMessageQueueGetCount+0x18>
    count = 0U;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	617b      	str	r3, [r7, #20]
 800d0ae:	e00e      	b.n	800d0ce <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0b0:	f3ef 8305 	mrs	r3, IPSR
 800d0b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d004      	beq.n	800d0c6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800d0bc:	6938      	ldr	r0, [r7, #16]
 800d0be:	f001 f825 	bl	800e10c <uxQueueMessagesWaitingFromISR>
 800d0c2:	6178      	str	r0, [r7, #20]
 800d0c4:	e003      	b.n	800d0ce <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800d0c6:	6938      	ldr	r0, [r7, #16]
 800d0c8:	f001 f802 	bl	800e0d0 <uxQueueMessagesWaiting>
 800d0cc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800d0ce:	697b      	ldr	r3, [r7, #20]
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3718      	adds	r7, #24
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b086      	sub	sp, #24
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0e4:	f3ef 8305 	mrs	r3, IPSR
 800d0e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d003      	beq.n	800d0f8 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800d0f0:	f06f 0305 	mvn.w	r3, #5
 800d0f4:	617b      	str	r3, [r7, #20]
 800d0f6:	e00e      	b.n	800d116 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d103      	bne.n	800d106 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800d0fe:	f06f 0303 	mvn.w	r3, #3
 800d102:	617b      	str	r3, [r7, #20]
 800d104:	e007      	b.n	800d116 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800d106:	6938      	ldr	r0, [r7, #16]
 800d108:	f001 f994 	bl	800e434 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d10c:	2300      	movs	r3, #0
 800d10e:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800d110:	6938      	ldr	r0, [r7, #16]
 800d112:	f001 f819 	bl	800e148 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d116:	697b      	ldr	r3, [r7, #20]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3718      	adds	r7, #24
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d120:	b480      	push	{r7}
 800d122:	b085      	sub	sp, #20
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	4a07      	ldr	r2, [pc, #28]	; (800d14c <vApplicationGetIdleTaskMemory+0x2c>)
 800d130:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	4a06      	ldr	r2, [pc, #24]	; (800d150 <vApplicationGetIdleTaskMemory+0x30>)
 800d136:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2280      	movs	r2, #128	; 0x80
 800d13c:	601a      	str	r2, [r3, #0]
}
 800d13e:	bf00      	nop
 800d140:	3714      	adds	r7, #20
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop
 800d14c:	24005108 	.word	0x24005108
 800d150:	240051cc 	.word	0x240051cc

0800d154 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d154:	b480      	push	{r7}
 800d156:	b085      	sub	sp, #20
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	4a07      	ldr	r2, [pc, #28]	; (800d180 <vApplicationGetTimerTaskMemory+0x2c>)
 800d164:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	4a06      	ldr	r2, [pc, #24]	; (800d184 <vApplicationGetTimerTaskMemory+0x30>)
 800d16a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d172:	601a      	str	r2, [r3, #0]
}
 800d174:	bf00      	nop
 800d176:	3714      	adds	r7, #20
 800d178:	46bd      	mov	sp, r7
 800d17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17e:	4770      	bx	lr
 800d180:	240053cc 	.word	0x240053cc
 800d184:	24005490 	.word	0x24005490

0800d188 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f103 0208 	add.w	r2, r3, #8
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f103 0208 	add.w	r2, r3, #8
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f103 0208 	add.w	r2, r3, #8
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d1bc:	bf00      	nop
 800d1be:	370c      	adds	r7, #12
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b083      	sub	sp, #12
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d1d6:	bf00      	nop
 800d1d8:	370c      	adds	r7, #12
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr

0800d1e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1e2:	b480      	push	{r7}
 800d1e4:	b085      	sub	sp, #20
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
 800d1ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	689a      	ldr	r2, [r3, #8]
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	689b      	ldr	r3, [r3, #8]
 800d204:	683a      	ldr	r2, [r7, #0]
 800d206:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	683a      	ldr	r2, [r7, #0]
 800d20c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	687a      	ldr	r2, [r7, #4]
 800d212:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	1c5a      	adds	r2, r3, #1
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	601a      	str	r2, [r3, #0]
}
 800d21e:	bf00      	nop
 800d220:	3714      	adds	r7, #20
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr

0800d22a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d22a:	b480      	push	{r7}
 800d22c:	b085      	sub	sp, #20
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
 800d232:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d240:	d103      	bne.n	800d24a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	691b      	ldr	r3, [r3, #16]
 800d246:	60fb      	str	r3, [r7, #12]
 800d248:	e00c      	b.n	800d264 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	3308      	adds	r3, #8
 800d24e:	60fb      	str	r3, [r7, #12]
 800d250:	e002      	b.n	800d258 <vListInsert+0x2e>
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	60fb      	str	r3, [r7, #12]
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	68ba      	ldr	r2, [r7, #8]
 800d260:	429a      	cmp	r2, r3
 800d262:	d2f6      	bcs.n	800d252 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	685a      	ldr	r2, [r3, #4]
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	683a      	ldr	r2, [r7, #0]
 800d272:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	68fa      	ldr	r2, [r7, #12]
 800d278:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	683a      	ldr	r2, [r7, #0]
 800d27e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	1c5a      	adds	r2, r3, #1
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	601a      	str	r2, [r3, #0]
}
 800d290:	bf00      	nop
 800d292:	3714      	adds	r7, #20
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d29c:	b480      	push	{r7}
 800d29e:	b085      	sub	sp, #20
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	691b      	ldr	r3, [r3, #16]
 800d2a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	6892      	ldr	r2, [r2, #8]
 800d2b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	6852      	ldr	r2, [r2, #4]
 800d2bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d103      	bne.n	800d2d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	689a      	ldr	r2, [r3, #8]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	1e5a      	subs	r2, r3, #1
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3714      	adds	r7, #20
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr

0800d2f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b084      	sub	sp, #16
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10a      	bne.n	800d31a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d316:	bf00      	nop
 800d318:	e7fe      	b.n	800d318 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d31a:	f002 fde3 	bl	800fee4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d326:	68f9      	ldr	r1, [r7, #12]
 800d328:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d32a:	fb01 f303 	mul.w	r3, r1, r3
 800d32e:	441a      	add	r2, r3
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2200      	movs	r2, #0
 800d338:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681a      	ldr	r2, [r3, #0]
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d34a:	3b01      	subs	r3, #1
 800d34c:	68f9      	ldr	r1, [r7, #12]
 800d34e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d350:	fb01 f303 	mul.w	r3, r1, r3
 800d354:	441a      	add	r2, r3
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	22ff      	movs	r2, #255	; 0xff
 800d35e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	22ff      	movs	r2, #255	; 0xff
 800d366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d114      	bne.n	800d39a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	691b      	ldr	r3, [r3, #16]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d01a      	beq.n	800d3ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	3310      	adds	r3, #16
 800d37c:	4618      	mov	r0, r3
 800d37e:	f001 fd73 	bl	800ee68 <xTaskRemoveFromEventList>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d012      	beq.n	800d3ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d388:	4b0c      	ldr	r3, [pc, #48]	; (800d3bc <xQueueGenericReset+0xcc>)
 800d38a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d38e:	601a      	str	r2, [r3, #0]
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	e009      	b.n	800d3ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	3310      	adds	r3, #16
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7ff fef2 	bl	800d188 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	3324      	adds	r3, #36	; 0x24
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7ff feed 	bl	800d188 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d3ae:	f002 fdc9 	bl	800ff44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d3b2:	2301      	movs	r3, #1
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3710      	adds	r7, #16
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}
 800d3bc:	e000ed04 	.word	0xe000ed04

0800d3c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b08e      	sub	sp, #56	; 0x38
 800d3c4:	af02      	add	r7, sp, #8
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	607a      	str	r2, [r7, #4]
 800d3cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d10a      	bne.n	800d3ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d8:	f383 8811 	msr	BASEPRI, r3
 800d3dc:	f3bf 8f6f 	isb	sy
 800d3e0:	f3bf 8f4f 	dsb	sy
 800d3e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d3e6:	bf00      	nop
 800d3e8:	e7fe      	b.n	800d3e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d10a      	bne.n	800d406 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f4:	f383 8811 	msr	BASEPRI, r3
 800d3f8:	f3bf 8f6f 	isb	sy
 800d3fc:	f3bf 8f4f 	dsb	sy
 800d400:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d402:	bf00      	nop
 800d404:	e7fe      	b.n	800d404 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d002      	beq.n	800d412 <xQueueGenericCreateStatic+0x52>
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d001      	beq.n	800d416 <xQueueGenericCreateStatic+0x56>
 800d412:	2301      	movs	r3, #1
 800d414:	e000      	b.n	800d418 <xQueueGenericCreateStatic+0x58>
 800d416:	2300      	movs	r3, #0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d10a      	bne.n	800d432 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d420:	f383 8811 	msr	BASEPRI, r3
 800d424:	f3bf 8f6f 	isb	sy
 800d428:	f3bf 8f4f 	dsb	sy
 800d42c:	623b      	str	r3, [r7, #32]
}
 800d42e:	bf00      	nop
 800d430:	e7fe      	b.n	800d430 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d102      	bne.n	800d43e <xQueueGenericCreateStatic+0x7e>
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d101      	bne.n	800d442 <xQueueGenericCreateStatic+0x82>
 800d43e:	2301      	movs	r3, #1
 800d440:	e000      	b.n	800d444 <xQueueGenericCreateStatic+0x84>
 800d442:	2300      	movs	r3, #0
 800d444:	2b00      	cmp	r3, #0
 800d446:	d10a      	bne.n	800d45e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44c:	f383 8811 	msr	BASEPRI, r3
 800d450:	f3bf 8f6f 	isb	sy
 800d454:	f3bf 8f4f 	dsb	sy
 800d458:	61fb      	str	r3, [r7, #28]
}
 800d45a:	bf00      	nop
 800d45c:	e7fe      	b.n	800d45c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d45e:	2350      	movs	r3, #80	; 0x50
 800d460:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	2b50      	cmp	r3, #80	; 0x50
 800d466:	d00a      	beq.n	800d47e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	61bb      	str	r3, [r7, #24]
}
 800d47a:	bf00      	nop
 800d47c:	e7fe      	b.n	800d47c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d47e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00d      	beq.n	800d4a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48c:	2201      	movs	r2, #1
 800d48e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d492:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d498:	9300      	str	r3, [sp, #0]
 800d49a:	4613      	mov	r3, r2
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	68b9      	ldr	r1, [r7, #8]
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f000 f83f 	bl	800d524 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3730      	adds	r7, #48	; 0x30
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b08a      	sub	sp, #40	; 0x28
 800d4b4:	af02      	add	r7, sp, #8
 800d4b6:	60f8      	str	r0, [r7, #12]
 800d4b8:	60b9      	str	r1, [r7, #8]
 800d4ba:	4613      	mov	r3, r2
 800d4bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10a      	bne.n	800d4da <xQueueGenericCreate+0x2a>
	__asm volatile
 800d4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	613b      	str	r3, [r7, #16]
}
 800d4d6:	bf00      	nop
 800d4d8:	e7fe      	b.n	800d4d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	fb02 f303 	mul.w	r3, r2, r3
 800d4e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	3350      	adds	r3, #80	; 0x50
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f002 fe1d 	bl	8010128 <pvPortMalloc>
 800d4ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d4f0:	69bb      	ldr	r3, [r7, #24]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d011      	beq.n	800d51a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d4f6:	69bb      	ldr	r3, [r7, #24]
 800d4f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	3350      	adds	r3, #80	; 0x50
 800d4fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	2200      	movs	r2, #0
 800d504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d508:	79fa      	ldrb	r2, [r7, #7]
 800d50a:	69bb      	ldr	r3, [r7, #24]
 800d50c:	9300      	str	r3, [sp, #0]
 800d50e:	4613      	mov	r3, r2
 800d510:	697a      	ldr	r2, [r7, #20]
 800d512:	68b9      	ldr	r1, [r7, #8]
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f000 f805 	bl	800d524 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d51a:	69bb      	ldr	r3, [r7, #24]
	}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3720      	adds	r7, #32
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b084      	sub	sp, #16
 800d528:	af00      	add	r7, sp, #0
 800d52a:	60f8      	str	r0, [r7, #12]
 800d52c:	60b9      	str	r1, [r7, #8]
 800d52e:	607a      	str	r2, [r7, #4]
 800d530:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d103      	bne.n	800d540 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d538:	69bb      	ldr	r3, [r7, #24]
 800d53a:	69ba      	ldr	r2, [r7, #24]
 800d53c:	601a      	str	r2, [r3, #0]
 800d53e:	e002      	b.n	800d546 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d546:	69bb      	ldr	r3, [r7, #24]
 800d548:	68fa      	ldr	r2, [r7, #12]
 800d54a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	68ba      	ldr	r2, [r7, #8]
 800d550:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d552:	2101      	movs	r1, #1
 800d554:	69b8      	ldr	r0, [r7, #24]
 800d556:	f7ff fecb 	bl	800d2f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d55a:	69bb      	ldr	r3, [r7, #24]
 800d55c:	78fa      	ldrb	r2, [r7, #3]
 800d55e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d562:	bf00      	nop
 800d564:	3710      	adds	r7, #16
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d56a:	b580      	push	{r7, lr}
 800d56c:	b082      	sub	sp, #8
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00e      	beq.n	800d596 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d58a:	2300      	movs	r3, #0
 800d58c:	2200      	movs	r2, #0
 800d58e:	2100      	movs	r1, #0
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f000 f90b 	bl	800d7ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d596:	bf00      	nop
 800d598:	3708      	adds	r7, #8
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}

0800d59e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d59e:	b580      	push	{r7, lr}
 800d5a0:	b086      	sub	sp, #24
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	617b      	str	r3, [r7, #20]
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d5b0:	79fb      	ldrb	r3, [r7, #7]
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	6939      	ldr	r1, [r7, #16]
 800d5b6:	6978      	ldr	r0, [r7, #20]
 800d5b8:	f7ff ff7a 	bl	800d4b0 <xQueueGenericCreate>
 800d5bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d5be:	68f8      	ldr	r0, [r7, #12]
 800d5c0:	f7ff ffd3 	bl	800d56a <prvInitialiseMutex>

		return xNewQueue;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
	}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3718      	adds	r7, #24
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b088      	sub	sp, #32
 800d5d2:	af02      	add	r7, sp, #8
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	6039      	str	r1, [r7, #0]
 800d5d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	617b      	str	r3, [r7, #20]
 800d5de:	2300      	movs	r3, #0
 800d5e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d5e2:	79fb      	ldrb	r3, [r7, #7]
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	6939      	ldr	r1, [r7, #16]
 800d5ec:	6978      	ldr	r0, [r7, #20]
 800d5ee:	f7ff fee7 	bl	800d3c0 <xQueueGenericCreateStatic>
 800d5f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d5f4:	68f8      	ldr	r0, [r7, #12]
 800d5f6:	f7ff ffb8 	bl	800d56a <prvInitialiseMutex>

		return xNewQueue;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
	}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3718      	adds	r7, #24
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d604:	b590      	push	{r4, r7, lr}
 800d606:	b087      	sub	sp, #28
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d10a      	bne.n	800d62c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800d616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d61a:	f383 8811 	msr	BASEPRI, r3
 800d61e:	f3bf 8f6f 	isb	sy
 800d622:	f3bf 8f4f 	dsb	sy
 800d626:	60fb      	str	r3, [r7, #12]
}
 800d628:	bf00      	nop
 800d62a:	e7fe      	b.n	800d62a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	689c      	ldr	r4, [r3, #8]
 800d630:	f001 fddc 	bl	800f1ec <xTaskGetCurrentTaskHandle>
 800d634:	4603      	mov	r3, r0
 800d636:	429c      	cmp	r4, r3
 800d638:	d111      	bne.n	800d65e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	1e5a      	subs	r2, r3, #1
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d105      	bne.n	800d658 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d64c:	2300      	movs	r3, #0
 800d64e:	2200      	movs	r2, #0
 800d650:	2100      	movs	r1, #0
 800d652:	6938      	ldr	r0, [r7, #16]
 800d654:	f000 f8aa 	bl	800d7ac <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d658:	2301      	movs	r3, #1
 800d65a:	617b      	str	r3, [r7, #20]
 800d65c:	e001      	b.n	800d662 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d65e:	2300      	movs	r3, #0
 800d660:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d662:	697b      	ldr	r3, [r7, #20]
	}
 800d664:	4618      	mov	r0, r3
 800d666:	371c      	adds	r7, #28
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd90      	pop	{r4, r7, pc}

0800d66c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d66c:	b590      	push	{r4, r7, lr}
 800d66e:	b087      	sub	sp, #28
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d10a      	bne.n	800d696 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800d680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	60fb      	str	r3, [r7, #12]
}
 800d692:	bf00      	nop
 800d694:	e7fe      	b.n	800d694 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	689c      	ldr	r4, [r3, #8]
 800d69a:	f001 fda7 	bl	800f1ec <xTaskGetCurrentTaskHandle>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	429c      	cmp	r4, r3
 800d6a2:	d107      	bne.n	800d6b4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	1c5a      	adds	r2, r3, #1
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	617b      	str	r3, [r7, #20]
 800d6b2:	e00c      	b.n	800d6ce <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d6b4:	6839      	ldr	r1, [r7, #0]
 800d6b6:	6938      	ldr	r0, [r7, #16]
 800d6b8:	f000 fb7e 	bl	800ddb8 <xQueueSemaphoreTake>
 800d6bc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d004      	beq.n	800d6ce <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	68db      	ldr	r3, [r3, #12]
 800d6c8:	1c5a      	adds	r2, r3, #1
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d6ce:	697b      	ldr	r3, [r7, #20]
	}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	371c      	adds	r7, #28
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd90      	pop	{r4, r7, pc}

0800d6d8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b08a      	sub	sp, #40	; 0x28
 800d6dc:	af02      	add	r7, sp, #8
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	60b9      	str	r1, [r7, #8]
 800d6e2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10a      	bne.n	800d700 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800d6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ee:	f383 8811 	msr	BASEPRI, r3
 800d6f2:	f3bf 8f6f 	isb	sy
 800d6f6:	f3bf 8f4f 	dsb	sy
 800d6fa:	61bb      	str	r3, [r7, #24]
}
 800d6fc:	bf00      	nop
 800d6fe:	e7fe      	b.n	800d6fe <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d700:	68ba      	ldr	r2, [r7, #8]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	429a      	cmp	r2, r3
 800d706:	d90a      	bls.n	800d71e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800d708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70c:	f383 8811 	msr	BASEPRI, r3
 800d710:	f3bf 8f6f 	isb	sy
 800d714:	f3bf 8f4f 	dsb	sy
 800d718:	617b      	str	r3, [r7, #20]
}
 800d71a:	bf00      	nop
 800d71c:	e7fe      	b.n	800d71c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d71e:	2302      	movs	r3, #2
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2200      	movs	r2, #0
 800d726:	2100      	movs	r1, #0
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f7ff fe49 	bl	800d3c0 <xQueueGenericCreateStatic>
 800d72e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d002      	beq.n	800d73c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	68ba      	ldr	r2, [r7, #8]
 800d73a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d73c:	69fb      	ldr	r3, [r7, #28]
	}
 800d73e:	4618      	mov	r0, r3
 800d740:	3720      	adds	r7, #32
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}

0800d746 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d746:	b580      	push	{r7, lr}
 800d748:	b086      	sub	sp, #24
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
 800d74e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d10a      	bne.n	800d76c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800d756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d75a:	f383 8811 	msr	BASEPRI, r3
 800d75e:	f3bf 8f6f 	isb	sy
 800d762:	f3bf 8f4f 	dsb	sy
 800d766:	613b      	str	r3, [r7, #16]
}
 800d768:	bf00      	nop
 800d76a:	e7fe      	b.n	800d76a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d76c:	683a      	ldr	r2, [r7, #0]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	429a      	cmp	r2, r3
 800d772:	d90a      	bls.n	800d78a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800d774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d778:	f383 8811 	msr	BASEPRI, r3
 800d77c:	f3bf 8f6f 	isb	sy
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	60fb      	str	r3, [r7, #12]
}
 800d786:	bf00      	nop
 800d788:	e7fe      	b.n	800d788 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d78a:	2202      	movs	r2, #2
 800d78c:	2100      	movs	r1, #0
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f7ff fe8e 	bl	800d4b0 <xQueueGenericCreate>
 800d794:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d002      	beq.n	800d7a2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	683a      	ldr	r2, [r7, #0]
 800d7a0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d7a2:	697b      	ldr	r3, [r7, #20]
	}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3718      	adds	r7, #24
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b08e      	sub	sp, #56	; 0x38
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
 800d7b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d10a      	bne.n	800d7de <xQueueGenericSend+0x32>
	__asm volatile
 800d7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7cc:	f383 8811 	msr	BASEPRI, r3
 800d7d0:	f3bf 8f6f 	isb	sy
 800d7d4:	f3bf 8f4f 	dsb	sy
 800d7d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d7da:	bf00      	nop
 800d7dc:	e7fe      	b.n	800d7dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d103      	bne.n	800d7ec <xQueueGenericSend+0x40>
 800d7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d101      	bne.n	800d7f0 <xQueueGenericSend+0x44>
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e000      	b.n	800d7f2 <xQueueGenericSend+0x46>
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10a      	bne.n	800d80c <xQueueGenericSend+0x60>
	__asm volatile
 800d7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fa:	f383 8811 	msr	BASEPRI, r3
 800d7fe:	f3bf 8f6f 	isb	sy
 800d802:	f3bf 8f4f 	dsb	sy
 800d806:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d808:	bf00      	nop
 800d80a:	e7fe      	b.n	800d80a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	2b02      	cmp	r3, #2
 800d810:	d103      	bne.n	800d81a <xQueueGenericSend+0x6e>
 800d812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d816:	2b01      	cmp	r3, #1
 800d818:	d101      	bne.n	800d81e <xQueueGenericSend+0x72>
 800d81a:	2301      	movs	r3, #1
 800d81c:	e000      	b.n	800d820 <xQueueGenericSend+0x74>
 800d81e:	2300      	movs	r3, #0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d10a      	bne.n	800d83a <xQueueGenericSend+0x8e>
	__asm volatile
 800d824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d828:	f383 8811 	msr	BASEPRI, r3
 800d82c:	f3bf 8f6f 	isb	sy
 800d830:	f3bf 8f4f 	dsb	sy
 800d834:	623b      	str	r3, [r7, #32]
}
 800d836:	bf00      	nop
 800d838:	e7fe      	b.n	800d838 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d83a:	f001 fce7 	bl	800f20c <xTaskGetSchedulerState>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d102      	bne.n	800d84a <xQueueGenericSend+0x9e>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d101      	bne.n	800d84e <xQueueGenericSend+0xa2>
 800d84a:	2301      	movs	r3, #1
 800d84c:	e000      	b.n	800d850 <xQueueGenericSend+0xa4>
 800d84e:	2300      	movs	r3, #0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10a      	bne.n	800d86a <xQueueGenericSend+0xbe>
	__asm volatile
 800d854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d858:	f383 8811 	msr	BASEPRI, r3
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	61fb      	str	r3, [r7, #28]
}
 800d866:	bf00      	nop
 800d868:	e7fe      	b.n	800d868 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d86a:	f002 fb3b 	bl	800fee4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d876:	429a      	cmp	r2, r3
 800d878:	d302      	bcc.n	800d880 <xQueueGenericSend+0xd4>
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	2b02      	cmp	r3, #2
 800d87e:	d129      	bne.n	800d8d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d880:	683a      	ldr	r2, [r7, #0]
 800d882:	68b9      	ldr	r1, [r7, #8]
 800d884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d886:	f000 fc9a 	bl	800e1be <prvCopyDataToQueue>
 800d88a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d890:	2b00      	cmp	r3, #0
 800d892:	d010      	beq.n	800d8b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d896:	3324      	adds	r3, #36	; 0x24
 800d898:	4618      	mov	r0, r3
 800d89a:	f001 fae5 	bl	800ee68 <xTaskRemoveFromEventList>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d013      	beq.n	800d8cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d8a4:	4b3f      	ldr	r3, [pc, #252]	; (800d9a4 <xQueueGenericSend+0x1f8>)
 800d8a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8aa:	601a      	str	r2, [r3, #0]
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	f3bf 8f6f 	isb	sy
 800d8b4:	e00a      	b.n	800d8cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d007      	beq.n	800d8cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d8bc:	4b39      	ldr	r3, [pc, #228]	; (800d9a4 <xQueueGenericSend+0x1f8>)
 800d8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8c2:	601a      	str	r2, [r3, #0]
 800d8c4:	f3bf 8f4f 	dsb	sy
 800d8c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d8cc:	f002 fb3a 	bl	800ff44 <vPortExitCritical>
				return pdPASS;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	e063      	b.n	800d99c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d103      	bne.n	800d8e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d8da:	f002 fb33 	bl	800ff44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	e05c      	b.n	800d99c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d106      	bne.n	800d8f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d8e8:	f107 0314 	add.w	r3, r7, #20
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f001 fb1f 	bl	800ef30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d8f6:	f002 fb25 	bl	800ff44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d8fa:	f001 f85d 	bl	800e9b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8fe:	f002 faf1 	bl	800fee4 <vPortEnterCritical>
 800d902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d904:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d908:	b25b      	sxtb	r3, r3
 800d90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d90e:	d103      	bne.n	800d918 <xQueueGenericSend+0x16c>
 800d910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d912:	2200      	movs	r2, #0
 800d914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d91e:	b25b      	sxtb	r3, r3
 800d920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d924:	d103      	bne.n	800d92e <xQueueGenericSend+0x182>
 800d926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d928:	2200      	movs	r2, #0
 800d92a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d92e:	f002 fb09 	bl	800ff44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d932:	1d3a      	adds	r2, r7, #4
 800d934:	f107 0314 	add.w	r3, r7, #20
 800d938:	4611      	mov	r1, r2
 800d93a:	4618      	mov	r0, r3
 800d93c:	f001 fb0e 	bl	800ef5c <xTaskCheckForTimeOut>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d124      	bne.n	800d990 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d948:	f000 fd31 	bl	800e3ae <prvIsQueueFull>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d018      	beq.n	800d984 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d954:	3310      	adds	r3, #16
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	4611      	mov	r1, r2
 800d95a:	4618      	mov	r0, r3
 800d95c:	f001 fa34 	bl	800edc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d962:	f000 fcbc 	bl	800e2de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d966:	f001 f835 	bl	800e9d4 <xTaskResumeAll>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f47f af7c 	bne.w	800d86a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d972:	4b0c      	ldr	r3, [pc, #48]	; (800d9a4 <xQueueGenericSend+0x1f8>)
 800d974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d978:	601a      	str	r2, [r3, #0]
 800d97a:	f3bf 8f4f 	dsb	sy
 800d97e:	f3bf 8f6f 	isb	sy
 800d982:	e772      	b.n	800d86a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d986:	f000 fcaa 	bl	800e2de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d98a:	f001 f823 	bl	800e9d4 <xTaskResumeAll>
 800d98e:	e76c      	b.n	800d86a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d992:	f000 fca4 	bl	800e2de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d996:	f001 f81d 	bl	800e9d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d99a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3738      	adds	r7, #56	; 0x38
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	e000ed04 	.word	0xe000ed04

0800d9a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b090      	sub	sp, #64	; 0x40
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	607a      	str	r2, [r7, #4]
 800d9b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d10a      	bne.n	800d9d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c4:	f383 8811 	msr	BASEPRI, r3
 800d9c8:	f3bf 8f6f 	isb	sy
 800d9cc:	f3bf 8f4f 	dsb	sy
 800d9d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d9d2:	bf00      	nop
 800d9d4:	e7fe      	b.n	800d9d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d103      	bne.n	800d9e4 <xQueueGenericSendFromISR+0x3c>
 800d9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d101      	bne.n	800d9e8 <xQueueGenericSendFromISR+0x40>
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	e000      	b.n	800d9ea <xQueueGenericSendFromISR+0x42>
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d10a      	bne.n	800da04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f2:	f383 8811 	msr	BASEPRI, r3
 800d9f6:	f3bf 8f6f 	isb	sy
 800d9fa:	f3bf 8f4f 	dsb	sy
 800d9fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800da00:	bf00      	nop
 800da02:	e7fe      	b.n	800da02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	2b02      	cmp	r3, #2
 800da08:	d103      	bne.n	800da12 <xQueueGenericSendFromISR+0x6a>
 800da0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d101      	bne.n	800da16 <xQueueGenericSendFromISR+0x6e>
 800da12:	2301      	movs	r3, #1
 800da14:	e000      	b.n	800da18 <xQueueGenericSendFromISR+0x70>
 800da16:	2300      	movs	r3, #0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d10a      	bne.n	800da32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800da1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da20:	f383 8811 	msr	BASEPRI, r3
 800da24:	f3bf 8f6f 	isb	sy
 800da28:	f3bf 8f4f 	dsb	sy
 800da2c:	623b      	str	r3, [r7, #32]
}
 800da2e:	bf00      	nop
 800da30:	e7fe      	b.n	800da30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da32:	f002 fb39 	bl	80100a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800da36:	f3ef 8211 	mrs	r2, BASEPRI
 800da3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3e:	f383 8811 	msr	BASEPRI, r3
 800da42:	f3bf 8f6f 	isb	sy
 800da46:	f3bf 8f4f 	dsb	sy
 800da4a:	61fa      	str	r2, [r7, #28]
 800da4c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800da4e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da50:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800da52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d302      	bcc.n	800da64 <xQueueGenericSendFromISR+0xbc>
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	2b02      	cmp	r3, #2
 800da62:	d12f      	bne.n	800dac4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800da64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da72:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800da74:	683a      	ldr	r2, [r7, #0]
 800da76:	68b9      	ldr	r1, [r7, #8]
 800da78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da7a:	f000 fba0 	bl	800e1be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800da7e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800da82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da86:	d112      	bne.n	800daae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d016      	beq.n	800dabe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da92:	3324      	adds	r3, #36	; 0x24
 800da94:	4618      	mov	r0, r3
 800da96:	f001 f9e7 	bl	800ee68 <xTaskRemoveFromEventList>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d00e      	beq.n	800dabe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00b      	beq.n	800dabe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2201      	movs	r2, #1
 800daaa:	601a      	str	r2, [r3, #0]
 800daac:	e007      	b.n	800dabe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800daae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dab2:	3301      	adds	r3, #1
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	b25a      	sxtb	r2, r3
 800dab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dabe:	2301      	movs	r3, #1
 800dac0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800dac2:	e001      	b.n	800dac8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dac4:	2300      	movs	r3, #0
 800dac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dad2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3740      	adds	r7, #64	; 0x40
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b08e      	sub	sp, #56	; 0x38
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
 800dae6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800daec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d10a      	bne.n	800db08 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800daf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf6:	f383 8811 	msr	BASEPRI, r3
 800dafa:	f3bf 8f6f 	isb	sy
 800dafe:	f3bf 8f4f 	dsb	sy
 800db02:	623b      	str	r3, [r7, #32]
}
 800db04:	bf00      	nop
 800db06:	e7fe      	b.n	800db06 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800db08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d00a      	beq.n	800db26 <xQueueGiveFromISR+0x48>
	__asm volatile
 800db10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db14:	f383 8811 	msr	BASEPRI, r3
 800db18:	f3bf 8f6f 	isb	sy
 800db1c:	f3bf 8f4f 	dsb	sy
 800db20:	61fb      	str	r3, [r7, #28]
}
 800db22:	bf00      	nop
 800db24:	e7fe      	b.n	800db24 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800db26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d103      	bne.n	800db36 <xQueueGiveFromISR+0x58>
 800db2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db30:	689b      	ldr	r3, [r3, #8]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d101      	bne.n	800db3a <xQueueGiveFromISR+0x5c>
 800db36:	2301      	movs	r3, #1
 800db38:	e000      	b.n	800db3c <xQueueGiveFromISR+0x5e>
 800db3a:	2300      	movs	r3, #0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d10a      	bne.n	800db56 <xQueueGiveFromISR+0x78>
	__asm volatile
 800db40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db44:	f383 8811 	msr	BASEPRI, r3
 800db48:	f3bf 8f6f 	isb	sy
 800db4c:	f3bf 8f4f 	dsb	sy
 800db50:	61bb      	str	r3, [r7, #24]
}
 800db52:	bf00      	nop
 800db54:	e7fe      	b.n	800db54 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db56:	f002 faa7 	bl	80100a8 <vPortValidateInterruptPriority>
	__asm volatile
 800db5a:	f3ef 8211 	mrs	r2, BASEPRI
 800db5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db62:	f383 8811 	msr	BASEPRI, r3
 800db66:	f3bf 8f6f 	isb	sy
 800db6a:	f3bf 8f4f 	dsb	sy
 800db6e:	617a      	str	r2, [r7, #20]
 800db70:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800db72:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800db7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db82:	429a      	cmp	r2, r3
 800db84:	d22b      	bcs.n	800dbde <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800db86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db92:	1c5a      	adds	r2, r3, #1
 800db94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db96:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800db98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dba0:	d112      	bne.n	800dbc8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d016      	beq.n	800dbd8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbac:	3324      	adds	r3, #36	; 0x24
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f001 f95a 	bl	800ee68 <xTaskRemoveFromEventList>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00e      	beq.n	800dbd8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d00b      	beq.n	800dbd8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	601a      	str	r2, [r3, #0]
 800dbc6:	e007      	b.n	800dbd8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dbc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbcc:	3301      	adds	r3, #1
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	b25a      	sxtb	r2, r3
 800dbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dbd8:	2301      	movs	r3, #1
 800dbda:	637b      	str	r3, [r7, #52]	; 0x34
 800dbdc:	e001      	b.n	800dbe2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	637b      	str	r3, [r7, #52]	; 0x34
 800dbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f383 8811 	msr	BASEPRI, r3
}
 800dbec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dbee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3738      	adds	r7, #56	; 0x38
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b08c      	sub	sp, #48	; 0x30
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	60f8      	str	r0, [r7, #12]
 800dc00:	60b9      	str	r1, [r7, #8]
 800dc02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dc04:	2300      	movs	r3, #0
 800dc06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d10a      	bne.n	800dc28 <xQueueReceive+0x30>
	__asm volatile
 800dc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc16:	f383 8811 	msr	BASEPRI, r3
 800dc1a:	f3bf 8f6f 	isb	sy
 800dc1e:	f3bf 8f4f 	dsb	sy
 800dc22:	623b      	str	r3, [r7, #32]
}
 800dc24:	bf00      	nop
 800dc26:	e7fe      	b.n	800dc26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d103      	bne.n	800dc36 <xQueueReceive+0x3e>
 800dc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d101      	bne.n	800dc3a <xQueueReceive+0x42>
 800dc36:	2301      	movs	r3, #1
 800dc38:	e000      	b.n	800dc3c <xQueueReceive+0x44>
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d10a      	bne.n	800dc56 <xQueueReceive+0x5e>
	__asm volatile
 800dc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc44:	f383 8811 	msr	BASEPRI, r3
 800dc48:	f3bf 8f6f 	isb	sy
 800dc4c:	f3bf 8f4f 	dsb	sy
 800dc50:	61fb      	str	r3, [r7, #28]
}
 800dc52:	bf00      	nop
 800dc54:	e7fe      	b.n	800dc54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc56:	f001 fad9 	bl	800f20c <xTaskGetSchedulerState>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d102      	bne.n	800dc66 <xQueueReceive+0x6e>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d101      	bne.n	800dc6a <xQueueReceive+0x72>
 800dc66:	2301      	movs	r3, #1
 800dc68:	e000      	b.n	800dc6c <xQueueReceive+0x74>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d10a      	bne.n	800dc86 <xQueueReceive+0x8e>
	__asm volatile
 800dc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc74:	f383 8811 	msr	BASEPRI, r3
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	f3bf 8f4f 	dsb	sy
 800dc80:	61bb      	str	r3, [r7, #24]
}
 800dc82:	bf00      	nop
 800dc84:	e7fe      	b.n	800dc84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc86:	f002 f92d 	bl	800fee4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d01f      	beq.n	800dcd6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dc96:	68b9      	ldr	r1, [r7, #8]
 800dc98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc9a:	f000 fafa 	bl	800e292 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca0:	1e5a      	subs	r2, r3, #1
 800dca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca8:	691b      	ldr	r3, [r3, #16]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d00f      	beq.n	800dcce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb0:	3310      	adds	r3, #16
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f001 f8d8 	bl	800ee68 <xTaskRemoveFromEventList>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d007      	beq.n	800dcce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dcbe:	4b3d      	ldr	r3, [pc, #244]	; (800ddb4 <xQueueReceive+0x1bc>)
 800dcc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcc4:	601a      	str	r2, [r3, #0]
 800dcc6:	f3bf 8f4f 	dsb	sy
 800dcca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dcce:	f002 f939 	bl	800ff44 <vPortExitCritical>
				return pdPASS;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e069      	b.n	800ddaa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d103      	bne.n	800dce4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dcdc:	f002 f932 	bl	800ff44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dce0:	2300      	movs	r3, #0
 800dce2:	e062      	b.n	800ddaa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d106      	bne.n	800dcf8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dcea:	f107 0310 	add.w	r3, r7, #16
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f001 f91e 	bl	800ef30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dcf8:	f002 f924 	bl	800ff44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dcfc:	f000 fe5c 	bl	800e9b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd00:	f002 f8f0 	bl	800fee4 <vPortEnterCritical>
 800dd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd0a:	b25b      	sxtb	r3, r3
 800dd0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd10:	d103      	bne.n	800dd1a <xQueueReceive+0x122>
 800dd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd14:	2200      	movs	r2, #0
 800dd16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd20:	b25b      	sxtb	r3, r3
 800dd22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd26:	d103      	bne.n	800dd30 <xQueueReceive+0x138>
 800dd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd30:	f002 f908 	bl	800ff44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd34:	1d3a      	adds	r2, r7, #4
 800dd36:	f107 0310 	add.w	r3, r7, #16
 800dd3a:	4611      	mov	r1, r2
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f001 f90d 	bl	800ef5c <xTaskCheckForTimeOut>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d123      	bne.n	800dd90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd4a:	f000 fb1a 	bl	800e382 <prvIsQueueEmpty>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d017      	beq.n	800dd84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd56:	3324      	adds	r3, #36	; 0x24
 800dd58:	687a      	ldr	r2, [r7, #4]
 800dd5a:	4611      	mov	r1, r2
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f001 f833 	bl	800edc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd64:	f000 fabb 	bl	800e2de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd68:	f000 fe34 	bl	800e9d4 <xTaskResumeAll>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d189      	bne.n	800dc86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dd72:	4b10      	ldr	r3, [pc, #64]	; (800ddb4 <xQueueReceive+0x1bc>)
 800dd74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd78:	601a      	str	r2, [r3, #0]
 800dd7a:	f3bf 8f4f 	dsb	sy
 800dd7e:	f3bf 8f6f 	isb	sy
 800dd82:	e780      	b.n	800dc86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dd84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd86:	f000 faaa 	bl	800e2de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd8a:	f000 fe23 	bl	800e9d4 <xTaskResumeAll>
 800dd8e:	e77a      	b.n	800dc86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dd90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd92:	f000 faa4 	bl	800e2de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd96:	f000 fe1d 	bl	800e9d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd9c:	f000 faf1 	bl	800e382 <prvIsQueueEmpty>
 800dda0:	4603      	mov	r3, r0
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	f43f af6f 	beq.w	800dc86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dda8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3730      	adds	r7, #48	; 0x30
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	e000ed04 	.word	0xe000ed04

0800ddb8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b08e      	sub	sp, #56	; 0x38
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ddce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d10a      	bne.n	800ddea <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ddd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd8:	f383 8811 	msr	BASEPRI, r3
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	623b      	str	r3, [r7, #32]
}
 800dde6:	bf00      	nop
 800dde8:	e7fe      	b.n	800dde8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ddea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d00a      	beq.n	800de08 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ddf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf6:	f383 8811 	msr	BASEPRI, r3
 800ddfa:	f3bf 8f6f 	isb	sy
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	61fb      	str	r3, [r7, #28]
}
 800de04:	bf00      	nop
 800de06:	e7fe      	b.n	800de06 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de08:	f001 fa00 	bl	800f20c <xTaskGetSchedulerState>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d102      	bne.n	800de18 <xQueueSemaphoreTake+0x60>
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d101      	bne.n	800de1c <xQueueSemaphoreTake+0x64>
 800de18:	2301      	movs	r3, #1
 800de1a:	e000      	b.n	800de1e <xQueueSemaphoreTake+0x66>
 800de1c:	2300      	movs	r3, #0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d10a      	bne.n	800de38 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800de22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de26:	f383 8811 	msr	BASEPRI, r3
 800de2a:	f3bf 8f6f 	isb	sy
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	61bb      	str	r3, [r7, #24]
}
 800de34:	bf00      	nop
 800de36:	e7fe      	b.n	800de36 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de38:	f002 f854 	bl	800fee4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800de3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de40:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800de42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de44:	2b00      	cmp	r3, #0
 800de46:	d024      	beq.n	800de92 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800de48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4a:	1e5a      	subs	r2, r3, #1
 800de4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d104      	bne.n	800de62 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800de58:	f001 fb4e 	bl	800f4f8 <pvTaskIncrementMutexHeldCount>
 800de5c:	4602      	mov	r2, r0
 800de5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de60:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de64:	691b      	ldr	r3, [r3, #16]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d00f      	beq.n	800de8a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6c:	3310      	adds	r3, #16
 800de6e:	4618      	mov	r0, r3
 800de70:	f000 fffa 	bl	800ee68 <xTaskRemoveFromEventList>
 800de74:	4603      	mov	r3, r0
 800de76:	2b00      	cmp	r3, #0
 800de78:	d007      	beq.n	800de8a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800de7a:	4b54      	ldr	r3, [pc, #336]	; (800dfcc <xQueueSemaphoreTake+0x214>)
 800de7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de80:	601a      	str	r2, [r3, #0]
 800de82:	f3bf 8f4f 	dsb	sy
 800de86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800de8a:	f002 f85b 	bl	800ff44 <vPortExitCritical>
				return pdPASS;
 800de8e:	2301      	movs	r3, #1
 800de90:	e097      	b.n	800dfc2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d111      	bne.n	800debc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800de98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00a      	beq.n	800deb4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800de9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea2:	f383 8811 	msr	BASEPRI, r3
 800dea6:	f3bf 8f6f 	isb	sy
 800deaa:	f3bf 8f4f 	dsb	sy
 800deae:	617b      	str	r3, [r7, #20]
}
 800deb0:	bf00      	nop
 800deb2:	e7fe      	b.n	800deb2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800deb4:	f002 f846 	bl	800ff44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800deb8:	2300      	movs	r3, #0
 800deba:	e082      	b.n	800dfc2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800debc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d106      	bne.n	800ded0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dec2:	f107 030c 	add.w	r3, r7, #12
 800dec6:	4618      	mov	r0, r3
 800dec8:	f001 f832 	bl	800ef30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800decc:	2301      	movs	r3, #1
 800dece:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ded0:	f002 f838 	bl	800ff44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ded4:	f000 fd70 	bl	800e9b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ded8:	f002 f804 	bl	800fee4 <vPortEnterCritical>
 800dedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dede:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dee2:	b25b      	sxtb	r3, r3
 800dee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dee8:	d103      	bne.n	800def2 <xQueueSemaphoreTake+0x13a>
 800deea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deec:	2200      	movs	r2, #0
 800deee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800def2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800def8:	b25b      	sxtb	r3, r3
 800defa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800defe:	d103      	bne.n	800df08 <xQueueSemaphoreTake+0x150>
 800df00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df02:	2200      	movs	r2, #0
 800df04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df08:	f002 f81c 	bl	800ff44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df0c:	463a      	mov	r2, r7
 800df0e:	f107 030c 	add.w	r3, r7, #12
 800df12:	4611      	mov	r1, r2
 800df14:	4618      	mov	r0, r3
 800df16:	f001 f821 	bl	800ef5c <xTaskCheckForTimeOut>
 800df1a:	4603      	mov	r3, r0
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d132      	bne.n	800df86 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df22:	f000 fa2e 	bl	800e382 <prvIsQueueEmpty>
 800df26:	4603      	mov	r3, r0
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d026      	beq.n	800df7a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d109      	bne.n	800df48 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800df34:	f001 ffd6 	bl	800fee4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800df38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df3a:	689b      	ldr	r3, [r3, #8]
 800df3c:	4618      	mov	r0, r3
 800df3e:	f001 f983 	bl	800f248 <xTaskPriorityInherit>
 800df42:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800df44:	f001 fffe 	bl	800ff44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4a:	3324      	adds	r3, #36	; 0x24
 800df4c:	683a      	ldr	r2, [r7, #0]
 800df4e:	4611      	mov	r1, r2
 800df50:	4618      	mov	r0, r3
 800df52:	f000 ff39 	bl	800edc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df58:	f000 f9c1 	bl	800e2de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df5c:	f000 fd3a 	bl	800e9d4 <xTaskResumeAll>
 800df60:	4603      	mov	r3, r0
 800df62:	2b00      	cmp	r3, #0
 800df64:	f47f af68 	bne.w	800de38 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800df68:	4b18      	ldr	r3, [pc, #96]	; (800dfcc <xQueueSemaphoreTake+0x214>)
 800df6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df6e:	601a      	str	r2, [r3, #0]
 800df70:	f3bf 8f4f 	dsb	sy
 800df74:	f3bf 8f6f 	isb	sy
 800df78:	e75e      	b.n	800de38 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800df7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df7c:	f000 f9af 	bl	800e2de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df80:	f000 fd28 	bl	800e9d4 <xTaskResumeAll>
 800df84:	e758      	b.n	800de38 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800df86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df88:	f000 f9a9 	bl	800e2de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df8c:	f000 fd22 	bl	800e9d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df92:	f000 f9f6 	bl	800e382 <prvIsQueueEmpty>
 800df96:	4603      	mov	r3, r0
 800df98:	2b00      	cmp	r3, #0
 800df9a:	f43f af4d 	beq.w	800de38 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800df9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d00d      	beq.n	800dfc0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800dfa4:	f001 ff9e 	bl	800fee4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dfa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfaa:	f000 f8f0 	bl	800e18e <prvGetDisinheritPriorityAfterTimeout>
 800dfae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb2:	689b      	ldr	r3, [r3, #8]
 800dfb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f001 fa1c 	bl	800f3f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dfbc:	f001 ffc2 	bl	800ff44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dfc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3738      	adds	r7, #56	; 0x38
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	e000ed04 	.word	0xe000ed04

0800dfd0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b08e      	sub	sp, #56	; 0x38
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	60b9      	str	r1, [r7, #8]
 800dfda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d10a      	bne.n	800dffc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800dfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfea:	f383 8811 	msr	BASEPRI, r3
 800dfee:	f3bf 8f6f 	isb	sy
 800dff2:	f3bf 8f4f 	dsb	sy
 800dff6:	623b      	str	r3, [r7, #32]
}
 800dff8:	bf00      	nop
 800dffa:	e7fe      	b.n	800dffa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d103      	bne.n	800e00a <xQueueReceiveFromISR+0x3a>
 800e002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e006:	2b00      	cmp	r3, #0
 800e008:	d101      	bne.n	800e00e <xQueueReceiveFromISR+0x3e>
 800e00a:	2301      	movs	r3, #1
 800e00c:	e000      	b.n	800e010 <xQueueReceiveFromISR+0x40>
 800e00e:	2300      	movs	r3, #0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d10a      	bne.n	800e02a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e018:	f383 8811 	msr	BASEPRI, r3
 800e01c:	f3bf 8f6f 	isb	sy
 800e020:	f3bf 8f4f 	dsb	sy
 800e024:	61fb      	str	r3, [r7, #28]
}
 800e026:	bf00      	nop
 800e028:	e7fe      	b.n	800e028 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e02a:	f002 f83d 	bl	80100a8 <vPortValidateInterruptPriority>
	__asm volatile
 800e02e:	f3ef 8211 	mrs	r2, BASEPRI
 800e032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e036:	f383 8811 	msr	BASEPRI, r3
 800e03a:	f3bf 8f6f 	isb	sy
 800e03e:	f3bf 8f4f 	dsb	sy
 800e042:	61ba      	str	r2, [r7, #24]
 800e044:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e046:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e048:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e04e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e052:	2b00      	cmp	r3, #0
 800e054:	d02f      	beq.n	800e0b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e05c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e060:	68b9      	ldr	r1, [r7, #8]
 800e062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e064:	f000 f915 	bl	800e292 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06a:	1e5a      	subs	r2, r3, #1
 800e06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e070:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e078:	d112      	bne.n	800e0a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07c:	691b      	ldr	r3, [r3, #16]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d016      	beq.n	800e0b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e084:	3310      	adds	r3, #16
 800e086:	4618      	mov	r0, r3
 800e088:	f000 feee 	bl	800ee68 <xTaskRemoveFromEventList>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d00e      	beq.n	800e0b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d00b      	beq.n	800e0b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2201      	movs	r2, #1
 800e09c:	601a      	str	r2, [r3, #0]
 800e09e:	e007      	b.n	800e0b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e0a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	b25a      	sxtb	r2, r3
 800e0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	637b      	str	r3, [r7, #52]	; 0x34
 800e0b4:	e001      	b.n	800e0ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	637b      	str	r3, [r7, #52]	; 0x34
 800e0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	f383 8811 	msr	BASEPRI, r3
}
 800e0c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e0c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3738      	adds	r7, #56	; 0x38
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d10a      	bne.n	800e0f4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800e0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e2:	f383 8811 	msr	BASEPRI, r3
 800e0e6:	f3bf 8f6f 	isb	sy
 800e0ea:	f3bf 8f4f 	dsb	sy
 800e0ee:	60bb      	str	r3, [r7, #8]
}
 800e0f0:	bf00      	nop
 800e0f2:	e7fe      	b.n	800e0f2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800e0f4:	f001 fef6 	bl	800fee4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0fc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800e0fe:	f001 ff21 	bl	800ff44 <vPortExitCritical>

	return uxReturn;
 800e102:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e104:	4618      	mov	r0, r3
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800e10c:	b480      	push	{r7}
 800e10e:	b087      	sub	sp, #28
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d10a      	bne.n	800e134 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800e11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e122:	f383 8811 	msr	BASEPRI, r3
 800e126:	f3bf 8f6f 	isb	sy
 800e12a:	f3bf 8f4f 	dsb	sy
 800e12e:	60fb      	str	r3, [r7, #12]
}
 800e130:	bf00      	nop
 800e132:	e7fe      	b.n	800e132 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e138:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800e13a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e13c:	4618      	mov	r0, r3
 800e13e:	371c      	adds	r7, #28
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr

0800e148 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b084      	sub	sp, #16
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d10a      	bne.n	800e170 <vQueueDelete+0x28>
	__asm volatile
 800e15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15e:	f383 8811 	msr	BASEPRI, r3
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	f3bf 8f4f 	dsb	sy
 800e16a:	60bb      	str	r3, [r7, #8]
}
 800e16c:	bf00      	nop
 800e16e:	e7fe      	b.n	800e16e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	f000 f95f 	bl	800e434 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d102      	bne.n	800e186 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f002 f89d 	bl	80102c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e186:	bf00      	nop
 800e188:	3710      	adds	r7, #16
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}

0800e18e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e18e:	b480      	push	{r7}
 800e190:	b085      	sub	sp, #20
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d006      	beq.n	800e1ac <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e1a8:	60fb      	str	r3, [r7, #12]
 800e1aa:	e001      	b.n	800e1b0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
	}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3714      	adds	r7, #20
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr

0800e1be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b086      	sub	sp, #24
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	60f8      	str	r0, [r7, #12]
 800e1c6:	60b9      	str	r1, [r7, #8]
 800e1c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d10d      	bne.n	800e1f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d14d      	bne.n	800e280 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	689b      	ldr	r3, [r3, #8]
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f001 f895 	bl	800f318 <xTaskPriorityDisinherit>
 800e1ee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	609a      	str	r2, [r3, #8]
 800e1f6:	e043      	b.n	800e280 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d119      	bne.n	800e232 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	6858      	ldr	r0, [r3, #4]
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e206:	461a      	mov	r2, r3
 800e208:	68b9      	ldr	r1, [r7, #8]
 800e20a:	f00f ff56 	bl	801e0ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	685a      	ldr	r2, [r3, #4]
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e216:	441a      	add	r2, r3
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	685a      	ldr	r2, [r3, #4]
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	689b      	ldr	r3, [r3, #8]
 800e224:	429a      	cmp	r2, r3
 800e226:	d32b      	bcc.n	800e280 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	605a      	str	r2, [r3, #4]
 800e230:	e026      	b.n	800e280 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	68d8      	ldr	r0, [r3, #12]
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e23a:	461a      	mov	r2, r3
 800e23c:	68b9      	ldr	r1, [r7, #8]
 800e23e:	f00f ff3c 	bl	801e0ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	68da      	ldr	r2, [r3, #12]
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e24a:	425b      	negs	r3, r3
 800e24c:	441a      	add	r2, r3
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	68da      	ldr	r2, [r3, #12]
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d207      	bcs.n	800e26e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	689a      	ldr	r2, [r3, #8]
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e266:	425b      	negs	r3, r3
 800e268:	441a      	add	r2, r3
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2b02      	cmp	r3, #2
 800e272:	d105      	bne.n	800e280 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d002      	beq.n	800e280 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	3b01      	subs	r3, #1
 800e27e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	1c5a      	adds	r2, r3, #1
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e288:	697b      	ldr	r3, [r7, #20]
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3718      	adds	r7, #24
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}

0800e292 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e292:	b580      	push	{r7, lr}
 800e294:	b082      	sub	sp, #8
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
 800e29a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d018      	beq.n	800e2d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	68da      	ldr	r2, [r3, #12]
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ac:	441a      	add	r2, r3
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	68da      	ldr	r2, [r3, #12]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d303      	bcc.n	800e2c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	68d9      	ldr	r1, [r3, #12]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	6838      	ldr	r0, [r7, #0]
 800e2d2:	f00f fef2 	bl	801e0ba <memcpy>
	}
}
 800e2d6:	bf00      	nop
 800e2d8:	3708      	adds	r7, #8
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}

0800e2de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e2de:	b580      	push	{r7, lr}
 800e2e0:	b084      	sub	sp, #16
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e2e6:	f001 fdfd 	bl	800fee4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e2f2:	e011      	b.n	800e318 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d012      	beq.n	800e322 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	3324      	adds	r3, #36	; 0x24
 800e300:	4618      	mov	r0, r3
 800e302:	f000 fdb1 	bl	800ee68 <xTaskRemoveFromEventList>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d001      	beq.n	800e310 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e30c:	f000 fe88 	bl	800f020 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e310:	7bfb      	ldrb	r3, [r7, #15]
 800e312:	3b01      	subs	r3, #1
 800e314:	b2db      	uxtb	r3, r3
 800e316:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	dce9      	bgt.n	800e2f4 <prvUnlockQueue+0x16>
 800e320:	e000      	b.n	800e324 <prvUnlockQueue+0x46>
					break;
 800e322:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	22ff      	movs	r2, #255	; 0xff
 800e328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e32c:	f001 fe0a 	bl	800ff44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e330:	f001 fdd8 	bl	800fee4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e33a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e33c:	e011      	b.n	800e362 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	691b      	ldr	r3, [r3, #16]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d012      	beq.n	800e36c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	3310      	adds	r3, #16
 800e34a:	4618      	mov	r0, r3
 800e34c:	f000 fd8c 	bl	800ee68 <xTaskRemoveFromEventList>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d001      	beq.n	800e35a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e356:	f000 fe63 	bl	800f020 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e35a:	7bbb      	ldrb	r3, [r7, #14]
 800e35c:	3b01      	subs	r3, #1
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e362:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e366:	2b00      	cmp	r3, #0
 800e368:	dce9      	bgt.n	800e33e <prvUnlockQueue+0x60>
 800e36a:	e000      	b.n	800e36e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e36c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	22ff      	movs	r2, #255	; 0xff
 800e372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e376:	f001 fde5 	bl	800ff44 <vPortExitCritical>
}
 800e37a:	bf00      	nop
 800e37c:	3710      	adds	r7, #16
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e382:	b580      	push	{r7, lr}
 800e384:	b084      	sub	sp, #16
 800e386:	af00      	add	r7, sp, #0
 800e388:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e38a:	f001 fdab 	bl	800fee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e392:	2b00      	cmp	r3, #0
 800e394:	d102      	bne.n	800e39c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e396:	2301      	movs	r3, #1
 800e398:	60fb      	str	r3, [r7, #12]
 800e39a:	e001      	b.n	800e3a0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e39c:	2300      	movs	r3, #0
 800e39e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e3a0:	f001 fdd0 	bl	800ff44 <vPortExitCritical>

	return xReturn;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}

0800e3ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e3ae:	b580      	push	{r7, lr}
 800e3b0:	b084      	sub	sp, #16
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e3b6:	f001 fd95 	bl	800fee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d102      	bne.n	800e3cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	60fb      	str	r3, [r7, #12]
 800e3ca:	e001      	b.n	800e3d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e3d0:	f001 fdb8 	bl	800ff44 <vPortExitCritical>

	return xReturn;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3710      	adds	r7, #16
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
	...

0800e3e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b085      	sub	sp, #20
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	60fb      	str	r3, [r7, #12]
 800e3ee:	e014      	b.n	800e41a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e3f0:	4a0f      	ldr	r2, [pc, #60]	; (800e430 <vQueueAddToRegistry+0x50>)
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d10b      	bne.n	800e414 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e3fc:	490c      	ldr	r1, [pc, #48]	; (800e430 <vQueueAddToRegistry+0x50>)
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	683a      	ldr	r2, [r7, #0]
 800e402:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e406:	4a0a      	ldr	r2, [pc, #40]	; (800e430 <vQueueAddToRegistry+0x50>)
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	00db      	lsls	r3, r3, #3
 800e40c:	4413      	add	r3, r2
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e412:	e006      	b.n	800e422 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	3301      	adds	r3, #1
 800e418:	60fb      	str	r3, [r7, #12]
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2b07      	cmp	r3, #7
 800e41e:	d9e7      	bls.n	800e3f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e420:	bf00      	nop
 800e422:	bf00      	nop
 800e424:	3714      	adds	r7, #20
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr
 800e42e:	bf00      	nop
 800e430:	24005890 	.word	0x24005890

0800e434 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e434:	b480      	push	{r7}
 800e436:	b085      	sub	sp, #20
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e43c:	2300      	movs	r3, #0
 800e43e:	60fb      	str	r3, [r7, #12]
 800e440:	e016      	b.n	800e470 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e442:	4a10      	ldr	r2, [pc, #64]	; (800e484 <vQueueUnregisterQueue+0x50>)
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	00db      	lsls	r3, r3, #3
 800e448:	4413      	add	r3, r2
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	687a      	ldr	r2, [r7, #4]
 800e44e:	429a      	cmp	r2, r3
 800e450:	d10b      	bne.n	800e46a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e452:	4a0c      	ldr	r2, [pc, #48]	; (800e484 <vQueueUnregisterQueue+0x50>)
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2100      	movs	r1, #0
 800e458:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e45c:	4a09      	ldr	r2, [pc, #36]	; (800e484 <vQueueUnregisterQueue+0x50>)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	00db      	lsls	r3, r3, #3
 800e462:	4413      	add	r3, r2
 800e464:	2200      	movs	r2, #0
 800e466:	605a      	str	r2, [r3, #4]
				break;
 800e468:	e006      	b.n	800e478 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	3301      	adds	r3, #1
 800e46e:	60fb      	str	r3, [r7, #12]
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2b07      	cmp	r3, #7
 800e474:	d9e5      	bls.n	800e442 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e476:	bf00      	nop
 800e478:	bf00      	nop
 800e47a:	3714      	adds	r7, #20
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr
 800e484:	24005890 	.word	0x24005890

0800e488 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b086      	sub	sp, #24
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e498:	f001 fd24 	bl	800fee4 <vPortEnterCritical>
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4a2:	b25b      	sxtb	r3, r3
 800e4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4a8:	d103      	bne.n	800e4b2 <vQueueWaitForMessageRestricted+0x2a>
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4b8:	b25b      	sxtb	r3, r3
 800e4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4be:	d103      	bne.n	800e4c8 <vQueueWaitForMessageRestricted+0x40>
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e4c8:	f001 fd3c 	bl	800ff44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d106      	bne.n	800e4e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	3324      	adds	r3, #36	; 0x24
 800e4d8:	687a      	ldr	r2, [r7, #4]
 800e4da:	68b9      	ldr	r1, [r7, #8]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f000 fc97 	bl	800ee10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e4e2:	6978      	ldr	r0, [r7, #20]
 800e4e4:	f7ff fefb 	bl	800e2de <prvUnlockQueue>
	}
 800e4e8:	bf00      	nop
 800e4ea:	3718      	adds	r7, #24
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b08e      	sub	sp, #56	; 0x38
 800e4f4:	af04      	add	r7, sp, #16
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	60b9      	str	r1, [r7, #8]
 800e4fa:	607a      	str	r2, [r7, #4]
 800e4fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e500:	2b00      	cmp	r3, #0
 800e502:	d10a      	bne.n	800e51a <xTaskCreateStatic+0x2a>
	__asm volatile
 800e504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e508:	f383 8811 	msr	BASEPRI, r3
 800e50c:	f3bf 8f6f 	isb	sy
 800e510:	f3bf 8f4f 	dsb	sy
 800e514:	623b      	str	r3, [r7, #32]
}
 800e516:	bf00      	nop
 800e518:	e7fe      	b.n	800e518 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d10a      	bne.n	800e536 <xTaskCreateStatic+0x46>
	__asm volatile
 800e520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e524:	f383 8811 	msr	BASEPRI, r3
 800e528:	f3bf 8f6f 	isb	sy
 800e52c:	f3bf 8f4f 	dsb	sy
 800e530:	61fb      	str	r3, [r7, #28]
}
 800e532:	bf00      	nop
 800e534:	e7fe      	b.n	800e534 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e536:	23c4      	movs	r3, #196	; 0xc4
 800e538:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	2bc4      	cmp	r3, #196	; 0xc4
 800e53e:	d00a      	beq.n	800e556 <xTaskCreateStatic+0x66>
	__asm volatile
 800e540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e544:	f383 8811 	msr	BASEPRI, r3
 800e548:	f3bf 8f6f 	isb	sy
 800e54c:	f3bf 8f4f 	dsb	sy
 800e550:	61bb      	str	r3, [r7, #24]
}
 800e552:	bf00      	nop
 800e554:	e7fe      	b.n	800e554 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e556:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d01e      	beq.n	800e59c <xTaskCreateStatic+0xac>
 800e55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e560:	2b00      	cmp	r3, #0
 800e562:	d01b      	beq.n	800e59c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e566:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e56c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e570:	2202      	movs	r2, #2
 800e572:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e576:	2300      	movs	r3, #0
 800e578:	9303      	str	r3, [sp, #12]
 800e57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57c:	9302      	str	r3, [sp, #8]
 800e57e:	f107 0314 	add.w	r3, r7, #20
 800e582:	9301      	str	r3, [sp, #4]
 800e584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e586:	9300      	str	r3, [sp, #0]
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	687a      	ldr	r2, [r7, #4]
 800e58c:	68b9      	ldr	r1, [r7, #8]
 800e58e:	68f8      	ldr	r0, [r7, #12]
 800e590:	f000 f850 	bl	800e634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e596:	f000 f8f9 	bl	800e78c <prvAddNewTaskToReadyList>
 800e59a:	e001      	b.n	800e5a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e59c:	2300      	movs	r3, #0
 800e59e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e5a0:	697b      	ldr	r3, [r7, #20]
	}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3728      	adds	r7, #40	; 0x28
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}

0800e5aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e5aa:	b580      	push	{r7, lr}
 800e5ac:	b08c      	sub	sp, #48	; 0x30
 800e5ae:	af04      	add	r7, sp, #16
 800e5b0:	60f8      	str	r0, [r7, #12]
 800e5b2:	60b9      	str	r1, [r7, #8]
 800e5b4:	603b      	str	r3, [r7, #0]
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e5ba:	88fb      	ldrh	r3, [r7, #6]
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f001 fdb2 	bl	8010128 <pvPortMalloc>
 800e5c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d00e      	beq.n	800e5ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e5cc:	20c4      	movs	r0, #196	; 0xc4
 800e5ce:	f001 fdab 	bl	8010128 <pvPortMalloc>
 800e5d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d003      	beq.n	800e5e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	697a      	ldr	r2, [r7, #20]
 800e5de:	631a      	str	r2, [r3, #48]	; 0x30
 800e5e0:	e005      	b.n	800e5ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e5e2:	6978      	ldr	r0, [r7, #20]
 800e5e4:	f001 fe6c 	bl	80102c0 <vPortFree>
 800e5e8:	e001      	b.n	800e5ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e5ee:	69fb      	ldr	r3, [r7, #28]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d017      	beq.n	800e624 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e5fc:	88fa      	ldrh	r2, [r7, #6]
 800e5fe:	2300      	movs	r3, #0
 800e600:	9303      	str	r3, [sp, #12]
 800e602:	69fb      	ldr	r3, [r7, #28]
 800e604:	9302      	str	r3, [sp, #8]
 800e606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e608:	9301      	str	r3, [sp, #4]
 800e60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60c:	9300      	str	r3, [sp, #0]
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	68b9      	ldr	r1, [r7, #8]
 800e612:	68f8      	ldr	r0, [r7, #12]
 800e614:	f000 f80e 	bl	800e634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e618:	69f8      	ldr	r0, [r7, #28]
 800e61a:	f000 f8b7 	bl	800e78c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e61e:	2301      	movs	r3, #1
 800e620:	61bb      	str	r3, [r7, #24]
 800e622:	e002      	b.n	800e62a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e624:	f04f 33ff 	mov.w	r3, #4294967295
 800e628:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e62a:	69bb      	ldr	r3, [r7, #24]
	}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3720      	adds	r7, #32
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b088      	sub	sp, #32
 800e638:	af00      	add	r7, sp, #0
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	60b9      	str	r1, [r7, #8]
 800e63e:	607a      	str	r2, [r7, #4]
 800e640:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e644:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	461a      	mov	r2, r3
 800e64c:	21a5      	movs	r1, #165	; 0xa5
 800e64e:	f00f fd5c 	bl	801e10a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e656:	6879      	ldr	r1, [r7, #4]
 800e658:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e65c:	440b      	add	r3, r1
 800e65e:	009b      	lsls	r3, r3, #2
 800e660:	4413      	add	r3, r2
 800e662:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e664:	69bb      	ldr	r3, [r7, #24]
 800e666:	f023 0307 	bic.w	r3, r3, #7
 800e66a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	f003 0307 	and.w	r3, r3, #7
 800e672:	2b00      	cmp	r3, #0
 800e674:	d00a      	beq.n	800e68c <prvInitialiseNewTask+0x58>
	__asm volatile
 800e676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e67a:	f383 8811 	msr	BASEPRI, r3
 800e67e:	f3bf 8f6f 	isb	sy
 800e682:	f3bf 8f4f 	dsb	sy
 800e686:	617b      	str	r3, [r7, #20]
}
 800e688:	bf00      	nop
 800e68a:	e7fe      	b.n	800e68a <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800e68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e68e:	69ba      	ldr	r2, [r7, #24]
 800e690:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d01f      	beq.n	800e6d8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e698:	2300      	movs	r3, #0
 800e69a:	61fb      	str	r3, [r7, #28]
 800e69c:	e012      	b.n	800e6c4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e69e:	68ba      	ldr	r2, [r7, #8]
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	4413      	add	r3, r2
 800e6a4:	7819      	ldrb	r1, [r3, #0]
 800e6a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6a8:	69fb      	ldr	r3, [r7, #28]
 800e6aa:	4413      	add	r3, r2
 800e6ac:	3334      	adds	r3, #52	; 0x34
 800e6ae:	460a      	mov	r2, r1
 800e6b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e6b2:	68ba      	ldr	r2, [r7, #8]
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	4413      	add	r3, r2
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d006      	beq.n	800e6cc <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e6be:	69fb      	ldr	r3, [r7, #28]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	61fb      	str	r3, [r7, #28]
 800e6c4:	69fb      	ldr	r3, [r7, #28]
 800e6c6:	2b0f      	cmp	r3, #15
 800e6c8:	d9e9      	bls.n	800e69e <prvInitialiseNewTask+0x6a>
 800e6ca:	e000      	b.n	800e6ce <prvInitialiseNewTask+0x9a>
			{
				break;
 800e6cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e6d6:	e003      	b.n	800e6e0 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6da:	2200      	movs	r2, #0
 800e6dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e2:	2b37      	cmp	r3, #55	; 0x37
 800e6e4:	d901      	bls.n	800e6ea <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e6e6:	2337      	movs	r3, #55	; 0x37
 800e6e8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6f4:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800e6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6fe:	3304      	adds	r3, #4
 800e700:	4618      	mov	r0, r3
 800e702:	f7fe fd61 	bl	800d1c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e708:	3318      	adds	r3, #24
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7fe fd5c 	bl	800d1c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e714:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e718:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e724:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e728:	2200      	movs	r2, #0
 800e72a:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e72e:	2200      	movs	r2, #0
 800e730:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e736:	2200      	movs	r2, #0
 800e738:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73e:	335c      	adds	r3, #92	; 0x5c
 800e740:	2260      	movs	r2, #96	; 0x60
 800e742:	2100      	movs	r1, #0
 800e744:	4618      	mov	r0, r3
 800e746:	f00f fce0 	bl	801e10a <memset>
 800e74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74c:	4a0c      	ldr	r2, [pc, #48]	; (800e780 <prvInitialiseNewTask+0x14c>)
 800e74e:	661a      	str	r2, [r3, #96]	; 0x60
 800e750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e752:	4a0c      	ldr	r2, [pc, #48]	; (800e784 <prvInitialiseNewTask+0x150>)
 800e754:	665a      	str	r2, [r3, #100]	; 0x64
 800e756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e758:	4a0b      	ldr	r2, [pc, #44]	; (800e788 <prvInitialiseNewTask+0x154>)
 800e75a:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e75c:	683a      	ldr	r2, [r7, #0]
 800e75e:	68f9      	ldr	r1, [r7, #12]
 800e760:	69b8      	ldr	r0, [r7, #24]
 800e762:	f001 fa7f 	bl	800fc64 <pxPortInitialiseStack>
 800e766:	4602      	mov	r2, r0
 800e768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e76a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d002      	beq.n	800e778 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e776:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e778:	bf00      	nop
 800e77a:	3720      	adds	r7, #32
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	08022cac 	.word	0x08022cac
 800e784:	08022ccc 	.word	0x08022ccc
 800e788:	08022c8c 	.word	0x08022c8c

0800e78c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e794:	f001 fba6 	bl	800fee4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e798:	4b2d      	ldr	r3, [pc, #180]	; (800e850 <prvAddNewTaskToReadyList+0xc4>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	3301      	adds	r3, #1
 800e79e:	4a2c      	ldr	r2, [pc, #176]	; (800e850 <prvAddNewTaskToReadyList+0xc4>)
 800e7a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e7a2:	4b2c      	ldr	r3, [pc, #176]	; (800e854 <prvAddNewTaskToReadyList+0xc8>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d109      	bne.n	800e7be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e7aa:	4a2a      	ldr	r2, [pc, #168]	; (800e854 <prvAddNewTaskToReadyList+0xc8>)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e7b0:	4b27      	ldr	r3, [pc, #156]	; (800e850 <prvAddNewTaskToReadyList+0xc4>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d110      	bne.n	800e7da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e7b8:	f000 fc56 	bl	800f068 <prvInitialiseTaskLists>
 800e7bc:	e00d      	b.n	800e7da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e7be:	4b26      	ldr	r3, [pc, #152]	; (800e858 <prvAddNewTaskToReadyList+0xcc>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d109      	bne.n	800e7da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e7c6:	4b23      	ldr	r3, [pc, #140]	; (800e854 <prvAddNewTaskToReadyList+0xc8>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d802      	bhi.n	800e7da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e7d4:	4a1f      	ldr	r2, [pc, #124]	; (800e854 <prvAddNewTaskToReadyList+0xc8>)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e7da:	4b20      	ldr	r3, [pc, #128]	; (800e85c <prvAddNewTaskToReadyList+0xd0>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	3301      	adds	r3, #1
 800e7e0:	4a1e      	ldr	r2, [pc, #120]	; (800e85c <prvAddNewTaskToReadyList+0xd0>)
 800e7e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e7e4:	4b1d      	ldr	r3, [pc, #116]	; (800e85c <prvAddNewTaskToReadyList+0xd0>)
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7f0:	4b1b      	ldr	r3, [pc, #108]	; (800e860 <prvAddNewTaskToReadyList+0xd4>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d903      	bls.n	800e800 <prvAddNewTaskToReadyList+0x74>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7fc:	4a18      	ldr	r2, [pc, #96]	; (800e860 <prvAddNewTaskToReadyList+0xd4>)
 800e7fe:	6013      	str	r3, [r2, #0]
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e804:	4613      	mov	r3, r2
 800e806:	009b      	lsls	r3, r3, #2
 800e808:	4413      	add	r3, r2
 800e80a:	009b      	lsls	r3, r3, #2
 800e80c:	4a15      	ldr	r2, [pc, #84]	; (800e864 <prvAddNewTaskToReadyList+0xd8>)
 800e80e:	441a      	add	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	3304      	adds	r3, #4
 800e814:	4619      	mov	r1, r3
 800e816:	4610      	mov	r0, r2
 800e818:	f7fe fce3 	bl	800d1e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e81c:	f001 fb92 	bl	800ff44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e820:	4b0d      	ldr	r3, [pc, #52]	; (800e858 <prvAddNewTaskToReadyList+0xcc>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d00e      	beq.n	800e846 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e828:	4b0a      	ldr	r3, [pc, #40]	; (800e854 <prvAddNewTaskToReadyList+0xc8>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e832:	429a      	cmp	r2, r3
 800e834:	d207      	bcs.n	800e846 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e836:	4b0c      	ldr	r3, [pc, #48]	; (800e868 <prvAddNewTaskToReadyList+0xdc>)
 800e838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e83c:	601a      	str	r2, [r3, #0]
 800e83e:	f3bf 8f4f 	dsb	sy
 800e842:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e846:	bf00      	nop
 800e848:	3708      	adds	r7, #8
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	24005da4 	.word	0x24005da4
 800e854:	240058d0 	.word	0x240058d0
 800e858:	24005db0 	.word	0x24005db0
 800e85c:	24005dc0 	.word	0x24005dc0
 800e860:	24005dac 	.word	0x24005dac
 800e864:	240058d4 	.word	0x240058d4
 800e868:	e000ed04 	.word	0xe000ed04

0800e86c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e874:	2300      	movs	r3, #0
 800e876:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d017      	beq.n	800e8ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e87e:	4b13      	ldr	r3, [pc, #76]	; (800e8cc <vTaskDelay+0x60>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d00a      	beq.n	800e89c <vTaskDelay+0x30>
	__asm volatile
 800e886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88a:	f383 8811 	msr	BASEPRI, r3
 800e88e:	f3bf 8f6f 	isb	sy
 800e892:	f3bf 8f4f 	dsb	sy
 800e896:	60bb      	str	r3, [r7, #8]
}
 800e898:	bf00      	nop
 800e89a:	e7fe      	b.n	800e89a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e89c:	f000 f88c 	bl	800e9b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e8a0:	2100      	movs	r1, #0
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 fe3c 	bl	800f520 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e8a8:	f000 f894 	bl	800e9d4 <xTaskResumeAll>
 800e8ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d107      	bne.n	800e8c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e8b4:	4b06      	ldr	r3, [pc, #24]	; (800e8d0 <vTaskDelay+0x64>)
 800e8b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8ba:	601a      	str	r2, [r3, #0]
 800e8bc:	f3bf 8f4f 	dsb	sy
 800e8c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e8c4:	bf00      	nop
 800e8c6:	3710      	adds	r7, #16
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	24005dcc 	.word	0x24005dcc
 800e8d0:	e000ed04 	.word	0xe000ed04

0800e8d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b08a      	sub	sp, #40	; 0x28
 800e8d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e8e2:	463a      	mov	r2, r7
 800e8e4:	1d39      	adds	r1, r7, #4
 800e8e6:	f107 0308 	add.w	r3, r7, #8
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fe fc18 	bl	800d120 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e8f0:	6839      	ldr	r1, [r7, #0]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	68ba      	ldr	r2, [r7, #8]
 800e8f6:	9202      	str	r2, [sp, #8]
 800e8f8:	9301      	str	r3, [sp, #4]
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	9300      	str	r3, [sp, #0]
 800e8fe:	2300      	movs	r3, #0
 800e900:	460a      	mov	r2, r1
 800e902:	4925      	ldr	r1, [pc, #148]	; (800e998 <vTaskStartScheduler+0xc4>)
 800e904:	4825      	ldr	r0, [pc, #148]	; (800e99c <vTaskStartScheduler+0xc8>)
 800e906:	f7ff fdf3 	bl	800e4f0 <xTaskCreateStatic>
 800e90a:	4603      	mov	r3, r0
 800e90c:	4a24      	ldr	r2, [pc, #144]	; (800e9a0 <vTaskStartScheduler+0xcc>)
 800e90e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e910:	4b23      	ldr	r3, [pc, #140]	; (800e9a0 <vTaskStartScheduler+0xcc>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d002      	beq.n	800e91e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e918:	2301      	movs	r3, #1
 800e91a:	617b      	str	r3, [r7, #20]
 800e91c:	e001      	b.n	800e922 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e91e:	2300      	movs	r3, #0
 800e920:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	2b01      	cmp	r3, #1
 800e926:	d102      	bne.n	800e92e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e928:	f000 fe4e 	bl	800f5c8 <xTimerCreateTimerTask>
 800e92c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	2b01      	cmp	r3, #1
 800e932:	d11d      	bne.n	800e970 <vTaskStartScheduler+0x9c>
	__asm volatile
 800e934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e938:	f383 8811 	msr	BASEPRI, r3
 800e93c:	f3bf 8f6f 	isb	sy
 800e940:	f3bf 8f4f 	dsb	sy
 800e944:	613b      	str	r3, [r7, #16]
}
 800e946:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e948:	4b16      	ldr	r3, [pc, #88]	; (800e9a4 <vTaskStartScheduler+0xd0>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	335c      	adds	r3, #92	; 0x5c
 800e94e:	4a16      	ldr	r2, [pc, #88]	; (800e9a8 <vTaskStartScheduler+0xd4>)
 800e950:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e952:	4b16      	ldr	r3, [pc, #88]	; (800e9ac <vTaskStartScheduler+0xd8>)
 800e954:	f04f 32ff 	mov.w	r2, #4294967295
 800e958:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e95a:	4b15      	ldr	r3, [pc, #84]	; (800e9b0 <vTaskStartScheduler+0xdc>)
 800e95c:	2201      	movs	r2, #1
 800e95e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e960:	4b14      	ldr	r3, [pc, #80]	; (800e9b4 <vTaskStartScheduler+0xe0>)
 800e962:	2200      	movs	r2, #0
 800e964:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e966:	f7f2 fb8f 	bl	8001088 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e96a:	f001 fa09 	bl	800fd80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e96e:	e00e      	b.n	800e98e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e976:	d10a      	bne.n	800e98e <vTaskStartScheduler+0xba>
	__asm volatile
 800e978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97c:	f383 8811 	msr	BASEPRI, r3
 800e980:	f3bf 8f6f 	isb	sy
 800e984:	f3bf 8f4f 	dsb	sy
 800e988:	60fb      	str	r3, [r7, #12]
}
 800e98a:	bf00      	nop
 800e98c:	e7fe      	b.n	800e98c <vTaskStartScheduler+0xb8>
}
 800e98e:	bf00      	nop
 800e990:	3718      	adds	r7, #24
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	0801f5a4 	.word	0x0801f5a4
 800e99c:	0800f039 	.word	0x0800f039
 800e9a0:	24005dc8 	.word	0x24005dc8
 800e9a4:	240058d0 	.word	0x240058d0
 800e9a8:	24000034 	.word	0x24000034
 800e9ac:	24005dc4 	.word	0x24005dc4
 800e9b0:	24005db0 	.word	0x24005db0
 800e9b4:	24005da8 	.word	0x24005da8

0800e9b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e9bc:	4b04      	ldr	r3, [pc, #16]	; (800e9d0 <vTaskSuspendAll+0x18>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	4a03      	ldr	r2, [pc, #12]	; (800e9d0 <vTaskSuspendAll+0x18>)
 800e9c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e9c6:	bf00      	nop
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr
 800e9d0:	24005dcc 	.word	0x24005dcc

0800e9d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e9e2:	4b42      	ldr	r3, [pc, #264]	; (800eaec <xTaskResumeAll+0x118>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d10a      	bne.n	800ea00 <xTaskResumeAll+0x2c>
	__asm volatile
 800e9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ee:	f383 8811 	msr	BASEPRI, r3
 800e9f2:	f3bf 8f6f 	isb	sy
 800e9f6:	f3bf 8f4f 	dsb	sy
 800e9fa:	603b      	str	r3, [r7, #0]
}
 800e9fc:	bf00      	nop
 800e9fe:	e7fe      	b.n	800e9fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ea00:	f001 fa70 	bl	800fee4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ea04:	4b39      	ldr	r3, [pc, #228]	; (800eaec <xTaskResumeAll+0x118>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	3b01      	subs	r3, #1
 800ea0a:	4a38      	ldr	r2, [pc, #224]	; (800eaec <xTaskResumeAll+0x118>)
 800ea0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea0e:	4b37      	ldr	r3, [pc, #220]	; (800eaec <xTaskResumeAll+0x118>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d162      	bne.n	800eadc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ea16:	4b36      	ldr	r3, [pc, #216]	; (800eaf0 <xTaskResumeAll+0x11c>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d05e      	beq.n	800eadc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ea1e:	e02f      	b.n	800ea80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea20:	4b34      	ldr	r3, [pc, #208]	; (800eaf4 <xTaskResumeAll+0x120>)
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	3318      	adds	r3, #24
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7fe fc35 	bl	800d29c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	3304      	adds	r3, #4
 800ea36:	4618      	mov	r0, r3
 800ea38:	f7fe fc30 	bl	800d29c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea40:	4b2d      	ldr	r3, [pc, #180]	; (800eaf8 <xTaskResumeAll+0x124>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d903      	bls.n	800ea50 <xTaskResumeAll+0x7c>
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea4c:	4a2a      	ldr	r2, [pc, #168]	; (800eaf8 <xTaskResumeAll+0x124>)
 800ea4e:	6013      	str	r3, [r2, #0]
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea54:	4613      	mov	r3, r2
 800ea56:	009b      	lsls	r3, r3, #2
 800ea58:	4413      	add	r3, r2
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	4a27      	ldr	r2, [pc, #156]	; (800eafc <xTaskResumeAll+0x128>)
 800ea5e:	441a      	add	r2, r3
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	3304      	adds	r3, #4
 800ea64:	4619      	mov	r1, r3
 800ea66:	4610      	mov	r0, r2
 800ea68:	f7fe fbbb 	bl	800d1e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea70:	4b23      	ldr	r3, [pc, #140]	; (800eb00 <xTaskResumeAll+0x12c>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d302      	bcc.n	800ea80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ea7a:	4b22      	ldr	r3, [pc, #136]	; (800eb04 <xTaskResumeAll+0x130>)
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ea80:	4b1c      	ldr	r3, [pc, #112]	; (800eaf4 <xTaskResumeAll+0x120>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d1cb      	bne.n	800ea20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d001      	beq.n	800ea92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ea8e:	f000 fb8d 	bl	800f1ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ea92:	4b1d      	ldr	r3, [pc, #116]	; (800eb08 <xTaskResumeAll+0x134>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d010      	beq.n	800eac0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ea9e:	f000 f859 	bl	800eb54 <xTaskIncrementTick>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d002      	beq.n	800eaae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800eaa8:	4b16      	ldr	r3, [pc, #88]	; (800eb04 <xTaskResumeAll+0x130>)
 800eaaa:	2201      	movs	r2, #1
 800eaac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	3b01      	subs	r3, #1
 800eab2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d1f1      	bne.n	800ea9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800eaba:	4b13      	ldr	r3, [pc, #76]	; (800eb08 <xTaskResumeAll+0x134>)
 800eabc:	2200      	movs	r2, #0
 800eabe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eac0:	4b10      	ldr	r3, [pc, #64]	; (800eb04 <xTaskResumeAll+0x130>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d009      	beq.n	800eadc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eac8:	2301      	movs	r3, #1
 800eaca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eacc:	4b0f      	ldr	r3, [pc, #60]	; (800eb0c <xTaskResumeAll+0x138>)
 800eace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ead2:	601a      	str	r2, [r3, #0]
 800ead4:	f3bf 8f4f 	dsb	sy
 800ead8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eadc:	f001 fa32 	bl	800ff44 <vPortExitCritical>

	return xAlreadyYielded;
 800eae0:	68bb      	ldr	r3, [r7, #8]
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	24005dcc 	.word	0x24005dcc
 800eaf0:	24005da4 	.word	0x24005da4
 800eaf4:	24005d64 	.word	0x24005d64
 800eaf8:	24005dac 	.word	0x24005dac
 800eafc:	240058d4 	.word	0x240058d4
 800eb00:	240058d0 	.word	0x240058d0
 800eb04:	24005db8 	.word	0x24005db8
 800eb08:	24005db4 	.word	0x24005db4
 800eb0c:	e000ed04 	.word	0xe000ed04

0800eb10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800eb10:	b480      	push	{r7}
 800eb12:	b083      	sub	sp, #12
 800eb14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800eb16:	4b05      	ldr	r3, [pc, #20]	; (800eb2c <xTaskGetTickCount+0x1c>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800eb1c:	687b      	ldr	r3, [r7, #4]
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	370c      	adds	r7, #12
 800eb22:	46bd      	mov	sp, r7
 800eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb28:	4770      	bx	lr
 800eb2a:	bf00      	nop
 800eb2c:	24005da8 	.word	0x24005da8

0800eb30 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb36:	f001 fab7 	bl	80100a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800eb3e:	4b04      	ldr	r3, [pc, #16]	; (800eb50 <xTaskGetTickCountFromISR+0x20>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eb44:	683b      	ldr	r3, [r7, #0]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3708      	adds	r7, #8
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	24005da8 	.word	0x24005da8

0800eb54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b086      	sub	sp, #24
 800eb58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb5e:	4b4f      	ldr	r3, [pc, #316]	; (800ec9c <xTaskIncrementTick+0x148>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	f040 808f 	bne.w	800ec86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800eb68:	4b4d      	ldr	r3, [pc, #308]	; (800eca0 <xTaskIncrementTick+0x14c>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	3301      	adds	r3, #1
 800eb6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800eb70:	4a4b      	ldr	r2, [pc, #300]	; (800eca0 <xTaskIncrementTick+0x14c>)
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d120      	bne.n	800ebbe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800eb7c:	4b49      	ldr	r3, [pc, #292]	; (800eca4 <xTaskIncrementTick+0x150>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d00a      	beq.n	800eb9c <xTaskIncrementTick+0x48>
	__asm volatile
 800eb86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb8a:	f383 8811 	msr	BASEPRI, r3
 800eb8e:	f3bf 8f6f 	isb	sy
 800eb92:	f3bf 8f4f 	dsb	sy
 800eb96:	603b      	str	r3, [r7, #0]
}
 800eb98:	bf00      	nop
 800eb9a:	e7fe      	b.n	800eb9a <xTaskIncrementTick+0x46>
 800eb9c:	4b41      	ldr	r3, [pc, #260]	; (800eca4 <xTaskIncrementTick+0x150>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	60fb      	str	r3, [r7, #12]
 800eba2:	4b41      	ldr	r3, [pc, #260]	; (800eca8 <xTaskIncrementTick+0x154>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	4a3f      	ldr	r2, [pc, #252]	; (800eca4 <xTaskIncrementTick+0x150>)
 800eba8:	6013      	str	r3, [r2, #0]
 800ebaa:	4a3f      	ldr	r2, [pc, #252]	; (800eca8 <xTaskIncrementTick+0x154>)
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	6013      	str	r3, [r2, #0]
 800ebb0:	4b3e      	ldr	r3, [pc, #248]	; (800ecac <xTaskIncrementTick+0x158>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	4a3d      	ldr	r2, [pc, #244]	; (800ecac <xTaskIncrementTick+0x158>)
 800ebb8:	6013      	str	r3, [r2, #0]
 800ebba:	f000 faf7 	bl	800f1ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ebbe:	4b3c      	ldr	r3, [pc, #240]	; (800ecb0 <xTaskIncrementTick+0x15c>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	693a      	ldr	r2, [r7, #16]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d349      	bcc.n	800ec5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ebc8:	4b36      	ldr	r3, [pc, #216]	; (800eca4 <xTaskIncrementTick+0x150>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d104      	bne.n	800ebdc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebd2:	4b37      	ldr	r3, [pc, #220]	; (800ecb0 <xTaskIncrementTick+0x15c>)
 800ebd4:	f04f 32ff 	mov.w	r2, #4294967295
 800ebd8:	601a      	str	r2, [r3, #0]
					break;
 800ebda:	e03f      	b.n	800ec5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebdc:	4b31      	ldr	r3, [pc, #196]	; (800eca4 <xTaskIncrementTick+0x150>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	68db      	ldr	r3, [r3, #12]
 800ebe2:	68db      	ldr	r3, [r3, #12]
 800ebe4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ebec:	693a      	ldr	r2, [r7, #16]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d203      	bcs.n	800ebfc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ebf4:	4a2e      	ldr	r2, [pc, #184]	; (800ecb0 <xTaskIncrementTick+0x15c>)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ebfa:	e02f      	b.n	800ec5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	3304      	adds	r3, #4
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7fe fb4b 	bl	800d29c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d004      	beq.n	800ec18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	3318      	adds	r3, #24
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fe fb42 	bl	800d29c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec1c:	4b25      	ldr	r3, [pc, #148]	; (800ecb4 <xTaskIncrementTick+0x160>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d903      	bls.n	800ec2c <xTaskIncrementTick+0xd8>
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec28:	4a22      	ldr	r2, [pc, #136]	; (800ecb4 <xTaskIncrementTick+0x160>)
 800ec2a:	6013      	str	r3, [r2, #0]
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec30:	4613      	mov	r3, r2
 800ec32:	009b      	lsls	r3, r3, #2
 800ec34:	4413      	add	r3, r2
 800ec36:	009b      	lsls	r3, r3, #2
 800ec38:	4a1f      	ldr	r2, [pc, #124]	; (800ecb8 <xTaskIncrementTick+0x164>)
 800ec3a:	441a      	add	r2, r3
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	3304      	adds	r3, #4
 800ec40:	4619      	mov	r1, r3
 800ec42:	4610      	mov	r0, r2
 800ec44:	f7fe facd 	bl	800d1e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec4c:	4b1b      	ldr	r3, [pc, #108]	; (800ecbc <xTaskIncrementTick+0x168>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d3b8      	bcc.n	800ebc8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ec56:	2301      	movs	r3, #1
 800ec58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec5a:	e7b5      	b.n	800ebc8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ec5c:	4b17      	ldr	r3, [pc, #92]	; (800ecbc <xTaskIncrementTick+0x168>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec62:	4915      	ldr	r1, [pc, #84]	; (800ecb8 <xTaskIncrementTick+0x164>)
 800ec64:	4613      	mov	r3, r2
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	4413      	add	r3, r2
 800ec6a:	009b      	lsls	r3, r3, #2
 800ec6c:	440b      	add	r3, r1
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	2b01      	cmp	r3, #1
 800ec72:	d901      	bls.n	800ec78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ec74:	2301      	movs	r3, #1
 800ec76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ec78:	4b11      	ldr	r3, [pc, #68]	; (800ecc0 <xTaskIncrementTick+0x16c>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d007      	beq.n	800ec90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ec80:	2301      	movs	r3, #1
 800ec82:	617b      	str	r3, [r7, #20]
 800ec84:	e004      	b.n	800ec90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ec86:	4b0f      	ldr	r3, [pc, #60]	; (800ecc4 <xTaskIncrementTick+0x170>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	4a0d      	ldr	r2, [pc, #52]	; (800ecc4 <xTaskIncrementTick+0x170>)
 800ec8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ec90:	697b      	ldr	r3, [r7, #20]
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3718      	adds	r7, #24
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}
 800ec9a:	bf00      	nop
 800ec9c:	24005dcc 	.word	0x24005dcc
 800eca0:	24005da8 	.word	0x24005da8
 800eca4:	24005d5c 	.word	0x24005d5c
 800eca8:	24005d60 	.word	0x24005d60
 800ecac:	24005dbc 	.word	0x24005dbc
 800ecb0:	24005dc4 	.word	0x24005dc4
 800ecb4:	24005dac 	.word	0x24005dac
 800ecb8:	240058d4 	.word	0x240058d4
 800ecbc:	240058d0 	.word	0x240058d0
 800ecc0:	24005db8 	.word	0x24005db8
 800ecc4:	24005db4 	.word	0x24005db4

0800ecc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ecce:	4b36      	ldr	r3, [pc, #216]	; (800eda8 <vTaskSwitchContext+0xe0>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d003      	beq.n	800ecde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ecd6:	4b35      	ldr	r3, [pc, #212]	; (800edac <vTaskSwitchContext+0xe4>)
 800ecd8:	2201      	movs	r2, #1
 800ecda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ecdc:	e05f      	b.n	800ed9e <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800ecde:	4b33      	ldr	r3, [pc, #204]	; (800edac <vTaskSwitchContext+0xe4>)
 800ece0:	2200      	movs	r2, #0
 800ece2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ece4:	f7f2 f9de 	bl	80010a4 <getRunTimeCounterValue>
 800ece8:	4603      	mov	r3, r0
 800ecea:	4a31      	ldr	r2, [pc, #196]	; (800edb0 <vTaskSwitchContext+0xe8>)
 800ecec:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800ecee:	4b30      	ldr	r3, [pc, #192]	; (800edb0 <vTaskSwitchContext+0xe8>)
 800ecf0:	681a      	ldr	r2, [r3, #0]
 800ecf2:	4b30      	ldr	r3, [pc, #192]	; (800edb4 <vTaskSwitchContext+0xec>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d909      	bls.n	800ed0e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ecfa:	4b2f      	ldr	r3, [pc, #188]	; (800edb8 <vTaskSwitchContext+0xf0>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800ed00:	4a2b      	ldr	r2, [pc, #172]	; (800edb0 <vTaskSwitchContext+0xe8>)
 800ed02:	6810      	ldr	r0, [r2, #0]
 800ed04:	4a2b      	ldr	r2, [pc, #172]	; (800edb4 <vTaskSwitchContext+0xec>)
 800ed06:	6812      	ldr	r2, [r2, #0]
 800ed08:	1a82      	subs	r2, r0, r2
 800ed0a:	440a      	add	r2, r1
 800ed0c:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800ed0e:	4b28      	ldr	r3, [pc, #160]	; (800edb0 <vTaskSwitchContext+0xe8>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	4a28      	ldr	r2, [pc, #160]	; (800edb4 <vTaskSwitchContext+0xec>)
 800ed14:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed16:	4b29      	ldr	r3, [pc, #164]	; (800edbc <vTaskSwitchContext+0xf4>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	60fb      	str	r3, [r7, #12]
 800ed1c:	e010      	b.n	800ed40 <vTaskSwitchContext+0x78>
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d10a      	bne.n	800ed3a <vTaskSwitchContext+0x72>
	__asm volatile
 800ed24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed28:	f383 8811 	msr	BASEPRI, r3
 800ed2c:	f3bf 8f6f 	isb	sy
 800ed30:	f3bf 8f4f 	dsb	sy
 800ed34:	607b      	str	r3, [r7, #4]
}
 800ed36:	bf00      	nop
 800ed38:	e7fe      	b.n	800ed38 <vTaskSwitchContext+0x70>
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	3b01      	subs	r3, #1
 800ed3e:	60fb      	str	r3, [r7, #12]
 800ed40:	491f      	ldr	r1, [pc, #124]	; (800edc0 <vTaskSwitchContext+0xf8>)
 800ed42:	68fa      	ldr	r2, [r7, #12]
 800ed44:	4613      	mov	r3, r2
 800ed46:	009b      	lsls	r3, r3, #2
 800ed48:	4413      	add	r3, r2
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	440b      	add	r3, r1
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d0e4      	beq.n	800ed1e <vTaskSwitchContext+0x56>
 800ed54:	68fa      	ldr	r2, [r7, #12]
 800ed56:	4613      	mov	r3, r2
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	4413      	add	r3, r2
 800ed5c:	009b      	lsls	r3, r3, #2
 800ed5e:	4a18      	ldr	r2, [pc, #96]	; (800edc0 <vTaskSwitchContext+0xf8>)
 800ed60:	4413      	add	r3, r2
 800ed62:	60bb      	str	r3, [r7, #8]
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	685b      	ldr	r3, [r3, #4]
 800ed68:	685a      	ldr	r2, [r3, #4]
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	605a      	str	r2, [r3, #4]
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	685a      	ldr	r2, [r3, #4]
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	3308      	adds	r3, #8
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d104      	bne.n	800ed84 <vTaskSwitchContext+0xbc>
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	685b      	ldr	r3, [r3, #4]
 800ed7e:	685a      	ldr	r2, [r3, #4]
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	605a      	str	r2, [r3, #4]
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	685b      	ldr	r3, [r3, #4]
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	4a0b      	ldr	r2, [pc, #44]	; (800edb8 <vTaskSwitchContext+0xf0>)
 800ed8c:	6013      	str	r3, [r2, #0]
 800ed8e:	4a0b      	ldr	r2, [pc, #44]	; (800edbc <vTaskSwitchContext+0xf4>)
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ed94:	4b08      	ldr	r3, [pc, #32]	; (800edb8 <vTaskSwitchContext+0xf0>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	335c      	adds	r3, #92	; 0x5c
 800ed9a:	4a0a      	ldr	r2, [pc, #40]	; (800edc4 <vTaskSwitchContext+0xfc>)
 800ed9c:	6013      	str	r3, [r2, #0]
}
 800ed9e:	bf00      	nop
 800eda0:	3710      	adds	r7, #16
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	24005dcc 	.word	0x24005dcc
 800edac:	24005db8 	.word	0x24005db8
 800edb0:	24005dd4 	.word	0x24005dd4
 800edb4:	24005dd0 	.word	0x24005dd0
 800edb8:	240058d0 	.word	0x240058d0
 800edbc:	24005dac 	.word	0x24005dac
 800edc0:	240058d4 	.word	0x240058d4
 800edc4:	24000034 	.word	0x24000034

0800edc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b084      	sub	sp, #16
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d10a      	bne.n	800edee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800edd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eddc:	f383 8811 	msr	BASEPRI, r3
 800ede0:	f3bf 8f6f 	isb	sy
 800ede4:	f3bf 8f4f 	dsb	sy
 800ede8:	60fb      	str	r3, [r7, #12]
}
 800edea:	bf00      	nop
 800edec:	e7fe      	b.n	800edec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800edee:	4b07      	ldr	r3, [pc, #28]	; (800ee0c <vTaskPlaceOnEventList+0x44>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	3318      	adds	r3, #24
 800edf4:	4619      	mov	r1, r3
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f7fe fa17 	bl	800d22a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800edfc:	2101      	movs	r1, #1
 800edfe:	6838      	ldr	r0, [r7, #0]
 800ee00:	f000 fb8e 	bl	800f520 <prvAddCurrentTaskToDelayedList>
}
 800ee04:	bf00      	nop
 800ee06:	3710      	adds	r7, #16
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}
 800ee0c:	240058d0 	.word	0x240058d0

0800ee10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b086      	sub	sp, #24
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	60f8      	str	r0, [r7, #12]
 800ee18:	60b9      	str	r1, [r7, #8]
 800ee1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d10a      	bne.n	800ee38 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ee22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee26:	f383 8811 	msr	BASEPRI, r3
 800ee2a:	f3bf 8f6f 	isb	sy
 800ee2e:	f3bf 8f4f 	dsb	sy
 800ee32:	617b      	str	r3, [r7, #20]
}
 800ee34:	bf00      	nop
 800ee36:	e7fe      	b.n	800ee36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ee38:	4b0a      	ldr	r3, [pc, #40]	; (800ee64 <vTaskPlaceOnEventListRestricted+0x54>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	3318      	adds	r3, #24
 800ee3e:	4619      	mov	r1, r3
 800ee40:	68f8      	ldr	r0, [r7, #12]
 800ee42:	f7fe f9ce 	bl	800d1e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ee4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee50:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ee52:	6879      	ldr	r1, [r7, #4]
 800ee54:	68b8      	ldr	r0, [r7, #8]
 800ee56:	f000 fb63 	bl	800f520 <prvAddCurrentTaskToDelayedList>
	}
 800ee5a:	bf00      	nop
 800ee5c:	3718      	adds	r7, #24
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
 800ee62:	bf00      	nop
 800ee64:	240058d0 	.word	0x240058d0

0800ee68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b086      	sub	sp, #24
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d10a      	bne.n	800ee94 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ee7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee82:	f383 8811 	msr	BASEPRI, r3
 800ee86:	f3bf 8f6f 	isb	sy
 800ee8a:	f3bf 8f4f 	dsb	sy
 800ee8e:	60fb      	str	r3, [r7, #12]
}
 800ee90:	bf00      	nop
 800ee92:	e7fe      	b.n	800ee92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ee94:	693b      	ldr	r3, [r7, #16]
 800ee96:	3318      	adds	r3, #24
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7fe f9ff 	bl	800d29c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee9e:	4b1e      	ldr	r3, [pc, #120]	; (800ef18 <xTaskRemoveFromEventList+0xb0>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d11d      	bne.n	800eee2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eea6:	693b      	ldr	r3, [r7, #16]
 800eea8:	3304      	adds	r3, #4
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7fe f9f6 	bl	800d29c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeb4:	4b19      	ldr	r3, [pc, #100]	; (800ef1c <xTaskRemoveFromEventList+0xb4>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d903      	bls.n	800eec4 <xTaskRemoveFromEventList+0x5c>
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eec0:	4a16      	ldr	r2, [pc, #88]	; (800ef1c <xTaskRemoveFromEventList+0xb4>)
 800eec2:	6013      	str	r3, [r2, #0]
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eec8:	4613      	mov	r3, r2
 800eeca:	009b      	lsls	r3, r3, #2
 800eecc:	4413      	add	r3, r2
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	4a13      	ldr	r2, [pc, #76]	; (800ef20 <xTaskRemoveFromEventList+0xb8>)
 800eed2:	441a      	add	r2, r3
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	3304      	adds	r3, #4
 800eed8:	4619      	mov	r1, r3
 800eeda:	4610      	mov	r0, r2
 800eedc:	f7fe f981 	bl	800d1e2 <vListInsertEnd>
 800eee0:	e005      	b.n	800eeee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	3318      	adds	r3, #24
 800eee6:	4619      	mov	r1, r3
 800eee8:	480e      	ldr	r0, [pc, #56]	; (800ef24 <xTaskRemoveFromEventList+0xbc>)
 800eeea:	f7fe f97a 	bl	800d1e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eef2:	4b0d      	ldr	r3, [pc, #52]	; (800ef28 <xTaskRemoveFromEventList+0xc0>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d905      	bls.n	800ef08 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eefc:	2301      	movs	r3, #1
 800eefe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ef00:	4b0a      	ldr	r3, [pc, #40]	; (800ef2c <xTaskRemoveFromEventList+0xc4>)
 800ef02:	2201      	movs	r2, #1
 800ef04:	601a      	str	r2, [r3, #0]
 800ef06:	e001      	b.n	800ef0c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ef0c:	697b      	ldr	r3, [r7, #20]
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3718      	adds	r7, #24
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	24005dcc 	.word	0x24005dcc
 800ef1c:	24005dac 	.word	0x24005dac
 800ef20:	240058d4 	.word	0x240058d4
 800ef24:	24005d64 	.word	0x24005d64
 800ef28:	240058d0 	.word	0x240058d0
 800ef2c:	24005db8 	.word	0x24005db8

0800ef30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ef30:	b480      	push	{r7}
 800ef32:	b083      	sub	sp, #12
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ef38:	4b06      	ldr	r3, [pc, #24]	; (800ef54 <vTaskInternalSetTimeOutState+0x24>)
 800ef3a:	681a      	ldr	r2, [r3, #0]
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ef40:	4b05      	ldr	r3, [pc, #20]	; (800ef58 <vTaskInternalSetTimeOutState+0x28>)
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	605a      	str	r2, [r3, #4]
}
 800ef48:	bf00      	nop
 800ef4a:	370c      	adds	r7, #12
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef52:	4770      	bx	lr
 800ef54:	24005dbc 	.word	0x24005dbc
 800ef58:	24005da8 	.word	0x24005da8

0800ef5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b088      	sub	sp, #32
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d10a      	bne.n	800ef82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ef6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef70:	f383 8811 	msr	BASEPRI, r3
 800ef74:	f3bf 8f6f 	isb	sy
 800ef78:	f3bf 8f4f 	dsb	sy
 800ef7c:	613b      	str	r3, [r7, #16]
}
 800ef7e:	bf00      	nop
 800ef80:	e7fe      	b.n	800ef80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d10a      	bne.n	800ef9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ef88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8c:	f383 8811 	msr	BASEPRI, r3
 800ef90:	f3bf 8f6f 	isb	sy
 800ef94:	f3bf 8f4f 	dsb	sy
 800ef98:	60fb      	str	r3, [r7, #12]
}
 800ef9a:	bf00      	nop
 800ef9c:	e7fe      	b.n	800ef9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ef9e:	f000 ffa1 	bl	800fee4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800efa2:	4b1d      	ldr	r3, [pc, #116]	; (800f018 <xTaskCheckForTimeOut+0xbc>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	69ba      	ldr	r2, [r7, #24]
 800efae:	1ad3      	subs	r3, r2, r3
 800efb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efba:	d102      	bne.n	800efc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800efbc:	2300      	movs	r3, #0
 800efbe:	61fb      	str	r3, [r7, #28]
 800efc0:	e023      	b.n	800f00a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681a      	ldr	r2, [r3, #0]
 800efc6:	4b15      	ldr	r3, [pc, #84]	; (800f01c <xTaskCheckForTimeOut+0xc0>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d007      	beq.n	800efde <xTaskCheckForTimeOut+0x82>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	69ba      	ldr	r2, [r7, #24]
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d302      	bcc.n	800efde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800efd8:	2301      	movs	r3, #1
 800efda:	61fb      	str	r3, [r7, #28]
 800efdc:	e015      	b.n	800f00a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	697a      	ldr	r2, [r7, #20]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d20b      	bcs.n	800f000 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	1ad2      	subs	r2, r2, r3
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f7ff ff9b 	bl	800ef30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800effa:	2300      	movs	r3, #0
 800effc:	61fb      	str	r3, [r7, #28]
 800effe:	e004      	b.n	800f00a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	2200      	movs	r2, #0
 800f004:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f006:	2301      	movs	r3, #1
 800f008:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f00a:	f000 ff9b 	bl	800ff44 <vPortExitCritical>

	return xReturn;
 800f00e:	69fb      	ldr	r3, [r7, #28]
}
 800f010:	4618      	mov	r0, r3
 800f012:	3720      	adds	r7, #32
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}
 800f018:	24005da8 	.word	0x24005da8
 800f01c:	24005dbc 	.word	0x24005dbc

0800f020 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f020:	b480      	push	{r7}
 800f022:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f024:	4b03      	ldr	r3, [pc, #12]	; (800f034 <vTaskMissedYield+0x14>)
 800f026:	2201      	movs	r2, #1
 800f028:	601a      	str	r2, [r3, #0]
}
 800f02a:	bf00      	nop
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr
 800f034:	24005db8 	.word	0x24005db8

0800f038 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f040:	f000 f852 	bl	800f0e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f044:	4b06      	ldr	r3, [pc, #24]	; (800f060 <prvIdleTask+0x28>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d9f9      	bls.n	800f040 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f04c:	4b05      	ldr	r3, [pc, #20]	; (800f064 <prvIdleTask+0x2c>)
 800f04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f052:	601a      	str	r2, [r3, #0]
 800f054:	f3bf 8f4f 	dsb	sy
 800f058:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f05c:	e7f0      	b.n	800f040 <prvIdleTask+0x8>
 800f05e:	bf00      	nop
 800f060:	240058d4 	.word	0x240058d4
 800f064:	e000ed04 	.word	0xe000ed04

0800f068 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f06e:	2300      	movs	r3, #0
 800f070:	607b      	str	r3, [r7, #4]
 800f072:	e00c      	b.n	800f08e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f074:	687a      	ldr	r2, [r7, #4]
 800f076:	4613      	mov	r3, r2
 800f078:	009b      	lsls	r3, r3, #2
 800f07a:	4413      	add	r3, r2
 800f07c:	009b      	lsls	r3, r3, #2
 800f07e:	4a12      	ldr	r2, [pc, #72]	; (800f0c8 <prvInitialiseTaskLists+0x60>)
 800f080:	4413      	add	r3, r2
 800f082:	4618      	mov	r0, r3
 800f084:	f7fe f880 	bl	800d188 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	3301      	adds	r3, #1
 800f08c:	607b      	str	r3, [r7, #4]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2b37      	cmp	r3, #55	; 0x37
 800f092:	d9ef      	bls.n	800f074 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f094:	480d      	ldr	r0, [pc, #52]	; (800f0cc <prvInitialiseTaskLists+0x64>)
 800f096:	f7fe f877 	bl	800d188 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f09a:	480d      	ldr	r0, [pc, #52]	; (800f0d0 <prvInitialiseTaskLists+0x68>)
 800f09c:	f7fe f874 	bl	800d188 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f0a0:	480c      	ldr	r0, [pc, #48]	; (800f0d4 <prvInitialiseTaskLists+0x6c>)
 800f0a2:	f7fe f871 	bl	800d188 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f0a6:	480c      	ldr	r0, [pc, #48]	; (800f0d8 <prvInitialiseTaskLists+0x70>)
 800f0a8:	f7fe f86e 	bl	800d188 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f0ac:	480b      	ldr	r0, [pc, #44]	; (800f0dc <prvInitialiseTaskLists+0x74>)
 800f0ae:	f7fe f86b 	bl	800d188 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f0b2:	4b0b      	ldr	r3, [pc, #44]	; (800f0e0 <prvInitialiseTaskLists+0x78>)
 800f0b4:	4a05      	ldr	r2, [pc, #20]	; (800f0cc <prvInitialiseTaskLists+0x64>)
 800f0b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f0b8:	4b0a      	ldr	r3, [pc, #40]	; (800f0e4 <prvInitialiseTaskLists+0x7c>)
 800f0ba:	4a05      	ldr	r2, [pc, #20]	; (800f0d0 <prvInitialiseTaskLists+0x68>)
 800f0bc:	601a      	str	r2, [r3, #0]
}
 800f0be:	bf00      	nop
 800f0c0:	3708      	adds	r7, #8
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}
 800f0c6:	bf00      	nop
 800f0c8:	240058d4 	.word	0x240058d4
 800f0cc:	24005d34 	.word	0x24005d34
 800f0d0:	24005d48 	.word	0x24005d48
 800f0d4:	24005d64 	.word	0x24005d64
 800f0d8:	24005d78 	.word	0x24005d78
 800f0dc:	24005d90 	.word	0x24005d90
 800f0e0:	24005d5c 	.word	0x24005d5c
 800f0e4:	24005d60 	.word	0x24005d60

0800f0e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b082      	sub	sp, #8
 800f0ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f0ee:	e019      	b.n	800f124 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f0f0:	f000 fef8 	bl	800fee4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0f4:	4b10      	ldr	r3, [pc, #64]	; (800f138 <prvCheckTasksWaitingTermination+0x50>)
 800f0f6:	68db      	ldr	r3, [r3, #12]
 800f0f8:	68db      	ldr	r3, [r3, #12]
 800f0fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	3304      	adds	r3, #4
 800f100:	4618      	mov	r0, r3
 800f102:	f7fe f8cb 	bl	800d29c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f106:	4b0d      	ldr	r3, [pc, #52]	; (800f13c <prvCheckTasksWaitingTermination+0x54>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	3b01      	subs	r3, #1
 800f10c:	4a0b      	ldr	r2, [pc, #44]	; (800f13c <prvCheckTasksWaitingTermination+0x54>)
 800f10e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f110:	4b0b      	ldr	r3, [pc, #44]	; (800f140 <prvCheckTasksWaitingTermination+0x58>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	3b01      	subs	r3, #1
 800f116:	4a0a      	ldr	r2, [pc, #40]	; (800f140 <prvCheckTasksWaitingTermination+0x58>)
 800f118:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f11a:	f000 ff13 	bl	800ff44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f000 f810 	bl	800f144 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f124:	4b06      	ldr	r3, [pc, #24]	; (800f140 <prvCheckTasksWaitingTermination+0x58>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1e1      	bne.n	800f0f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f12c:	bf00      	nop
 800f12e:	bf00      	nop
 800f130:	3708      	adds	r7, #8
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	24005d78 	.word	0x24005d78
 800f13c:	24005da4 	.word	0x24005da4
 800f140:	24005d8c 	.word	0x24005d8c

0800f144 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	335c      	adds	r3, #92	; 0x5c
 800f150:	4618      	mov	r0, r3
 800f152:	f00f f8db 	bl	801e30c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d108      	bne.n	800f172 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f164:	4618      	mov	r0, r3
 800f166:	f001 f8ab 	bl	80102c0 <vPortFree>
				vPortFree( pxTCB );
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f001 f8a8 	bl	80102c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f170:	e018      	b.n	800f1a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d103      	bne.n	800f184 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f001 f89f 	bl	80102c0 <vPortFree>
	}
 800f182:	e00f      	b.n	800f1a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800f18a:	2b02      	cmp	r3, #2
 800f18c:	d00a      	beq.n	800f1a4 <prvDeleteTCB+0x60>
	__asm volatile
 800f18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f192:	f383 8811 	msr	BASEPRI, r3
 800f196:	f3bf 8f6f 	isb	sy
 800f19a:	f3bf 8f4f 	dsb	sy
 800f19e:	60fb      	str	r3, [r7, #12]
}
 800f1a0:	bf00      	nop
 800f1a2:	e7fe      	b.n	800f1a2 <prvDeleteTCB+0x5e>
	}
 800f1a4:	bf00      	nop
 800f1a6:	3710      	adds	r7, #16
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1b2:	4b0c      	ldr	r3, [pc, #48]	; (800f1e4 <prvResetNextTaskUnblockTime+0x38>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d104      	bne.n	800f1c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f1bc:	4b0a      	ldr	r3, [pc, #40]	; (800f1e8 <prvResetNextTaskUnblockTime+0x3c>)
 800f1be:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f1c4:	e008      	b.n	800f1d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1c6:	4b07      	ldr	r3, [pc, #28]	; (800f1e4 <prvResetNextTaskUnblockTime+0x38>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	685b      	ldr	r3, [r3, #4]
 800f1d4:	4a04      	ldr	r2, [pc, #16]	; (800f1e8 <prvResetNextTaskUnblockTime+0x3c>)
 800f1d6:	6013      	str	r3, [r2, #0]
}
 800f1d8:	bf00      	nop
 800f1da:	370c      	adds	r7, #12
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr
 800f1e4:	24005d5c 	.word	0x24005d5c
 800f1e8:	24005dc4 	.word	0x24005dc4

0800f1ec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f1f2:	4b05      	ldr	r3, [pc, #20]	; (800f208 <xTaskGetCurrentTaskHandle+0x1c>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f1f8:	687b      	ldr	r3, [r7, #4]
	}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	370c      	adds	r7, #12
 800f1fe:	46bd      	mov	sp, r7
 800f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f204:	4770      	bx	lr
 800f206:	bf00      	nop
 800f208:	240058d0 	.word	0x240058d0

0800f20c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f20c:	b480      	push	{r7}
 800f20e:	b083      	sub	sp, #12
 800f210:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f212:	4b0b      	ldr	r3, [pc, #44]	; (800f240 <xTaskGetSchedulerState+0x34>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d102      	bne.n	800f220 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f21a:	2301      	movs	r3, #1
 800f21c:	607b      	str	r3, [r7, #4]
 800f21e:	e008      	b.n	800f232 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f220:	4b08      	ldr	r3, [pc, #32]	; (800f244 <xTaskGetSchedulerState+0x38>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d102      	bne.n	800f22e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f228:	2302      	movs	r3, #2
 800f22a:	607b      	str	r3, [r7, #4]
 800f22c:	e001      	b.n	800f232 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f22e:	2300      	movs	r3, #0
 800f230:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f232:	687b      	ldr	r3, [r7, #4]
	}
 800f234:	4618      	mov	r0, r3
 800f236:	370c      	adds	r7, #12
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr
 800f240:	24005db0 	.word	0x24005db0
 800f244:	24005dcc 	.word	0x24005dcc

0800f248 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f254:	2300      	movs	r3, #0
 800f256:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d051      	beq.n	800f302 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f262:	4b2a      	ldr	r3, [pc, #168]	; (800f30c <xTaskPriorityInherit+0xc4>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f268:	429a      	cmp	r2, r3
 800f26a:	d241      	bcs.n	800f2f0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	699b      	ldr	r3, [r3, #24]
 800f270:	2b00      	cmp	r3, #0
 800f272:	db06      	blt.n	800f282 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f274:	4b25      	ldr	r3, [pc, #148]	; (800f30c <xTaskPriorityInherit+0xc4>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f27a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	6959      	ldr	r1, [r3, #20]
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f28a:	4613      	mov	r3, r2
 800f28c:	009b      	lsls	r3, r3, #2
 800f28e:	4413      	add	r3, r2
 800f290:	009b      	lsls	r3, r3, #2
 800f292:	4a1f      	ldr	r2, [pc, #124]	; (800f310 <xTaskPriorityInherit+0xc8>)
 800f294:	4413      	add	r3, r2
 800f296:	4299      	cmp	r1, r3
 800f298:	d122      	bne.n	800f2e0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	3304      	adds	r3, #4
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7fd fffc 	bl	800d29c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f2a4:	4b19      	ldr	r3, [pc, #100]	; (800f30c <xTaskPriorityInherit+0xc4>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2b2:	4b18      	ldr	r3, [pc, #96]	; (800f314 <xTaskPriorityInherit+0xcc>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d903      	bls.n	800f2c2 <xTaskPriorityInherit+0x7a>
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2be:	4a15      	ldr	r2, [pc, #84]	; (800f314 <xTaskPriorityInherit+0xcc>)
 800f2c0:	6013      	str	r3, [r2, #0]
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	4413      	add	r3, r2
 800f2cc:	009b      	lsls	r3, r3, #2
 800f2ce:	4a10      	ldr	r2, [pc, #64]	; (800f310 <xTaskPriorityInherit+0xc8>)
 800f2d0:	441a      	add	r2, r3
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	3304      	adds	r3, #4
 800f2d6:	4619      	mov	r1, r3
 800f2d8:	4610      	mov	r0, r2
 800f2da:	f7fd ff82 	bl	800d1e2 <vListInsertEnd>
 800f2de:	e004      	b.n	800f2ea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f2e0:	4b0a      	ldr	r3, [pc, #40]	; (800f30c <xTaskPriorityInherit+0xc4>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	60fb      	str	r3, [r7, #12]
 800f2ee:	e008      	b.n	800f302 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f2f4:	4b05      	ldr	r3, [pc, #20]	; (800f30c <xTaskPriorityInherit+0xc4>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d201      	bcs.n	800f302 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f2fe:	2301      	movs	r3, #1
 800f300:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f302:	68fb      	ldr	r3, [r7, #12]
	}
 800f304:	4618      	mov	r0, r3
 800f306:	3710      	adds	r7, #16
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	240058d0 	.word	0x240058d0
 800f310:	240058d4 	.word	0x240058d4
 800f314:	24005dac 	.word	0x24005dac

0800f318 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b086      	sub	sp, #24
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f324:	2300      	movs	r3, #0
 800f326:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d056      	beq.n	800f3dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f32e:	4b2e      	ldr	r3, [pc, #184]	; (800f3e8 <xTaskPriorityDisinherit+0xd0>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	693a      	ldr	r2, [r7, #16]
 800f334:	429a      	cmp	r2, r3
 800f336:	d00a      	beq.n	800f34e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f33c:	f383 8811 	msr	BASEPRI, r3
 800f340:	f3bf 8f6f 	isb	sy
 800f344:	f3bf 8f4f 	dsb	sy
 800f348:	60fb      	str	r3, [r7, #12]
}
 800f34a:	bf00      	nop
 800f34c:	e7fe      	b.n	800f34c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f352:	2b00      	cmp	r3, #0
 800f354:	d10a      	bne.n	800f36c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f35a:	f383 8811 	msr	BASEPRI, r3
 800f35e:	f3bf 8f6f 	isb	sy
 800f362:	f3bf 8f4f 	dsb	sy
 800f366:	60bb      	str	r3, [r7, #8]
}
 800f368:	bf00      	nop
 800f36a:	e7fe      	b.n	800f36a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f370:	1e5a      	subs	r2, r3, #1
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f37e:	429a      	cmp	r2, r3
 800f380:	d02c      	beq.n	800f3dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f386:	2b00      	cmp	r3, #0
 800f388:	d128      	bne.n	800f3dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	3304      	adds	r3, #4
 800f38e:	4618      	mov	r0, r3
 800f390:	f7fd ff84 	bl	800d29c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f3a4:	693b      	ldr	r3, [r7, #16]
 800f3a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3ac:	4b0f      	ldr	r3, [pc, #60]	; (800f3ec <xTaskPriorityDisinherit+0xd4>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d903      	bls.n	800f3bc <xTaskPriorityDisinherit+0xa4>
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3b8:	4a0c      	ldr	r2, [pc, #48]	; (800f3ec <xTaskPriorityDisinherit+0xd4>)
 800f3ba:	6013      	str	r3, [r2, #0]
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3c0:	4613      	mov	r3, r2
 800f3c2:	009b      	lsls	r3, r3, #2
 800f3c4:	4413      	add	r3, r2
 800f3c6:	009b      	lsls	r3, r3, #2
 800f3c8:	4a09      	ldr	r2, [pc, #36]	; (800f3f0 <xTaskPriorityDisinherit+0xd8>)
 800f3ca:	441a      	add	r2, r3
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	3304      	adds	r3, #4
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	4610      	mov	r0, r2
 800f3d4:	f7fd ff05 	bl	800d1e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f3d8:	2301      	movs	r3, #1
 800f3da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f3dc:	697b      	ldr	r3, [r7, #20]
	}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3718      	adds	r7, #24
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	240058d0 	.word	0x240058d0
 800f3ec:	24005dac 	.word	0x24005dac
 800f3f0:	240058d4 	.word	0x240058d4

0800f3f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b088      	sub	sp, #32
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f402:	2301      	movs	r3, #1
 800f404:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d06a      	beq.n	800f4e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f40c:	69bb      	ldr	r3, [r7, #24]
 800f40e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f410:	2b00      	cmp	r3, #0
 800f412:	d10a      	bne.n	800f42a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f418:	f383 8811 	msr	BASEPRI, r3
 800f41c:	f3bf 8f6f 	isb	sy
 800f420:	f3bf 8f4f 	dsb	sy
 800f424:	60fb      	str	r3, [r7, #12]
}
 800f426:	bf00      	nop
 800f428:	e7fe      	b.n	800f428 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f42a:	69bb      	ldr	r3, [r7, #24]
 800f42c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f42e:	683a      	ldr	r2, [r7, #0]
 800f430:	429a      	cmp	r2, r3
 800f432:	d902      	bls.n	800f43a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	61fb      	str	r3, [r7, #28]
 800f438:	e002      	b.n	800f440 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f43e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f440:	69bb      	ldr	r3, [r7, #24]
 800f442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f444:	69fa      	ldr	r2, [r7, #28]
 800f446:	429a      	cmp	r2, r3
 800f448:	d04b      	beq.n	800f4e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f44a:	69bb      	ldr	r3, [r7, #24]
 800f44c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f44e:	697a      	ldr	r2, [r7, #20]
 800f450:	429a      	cmp	r2, r3
 800f452:	d146      	bne.n	800f4e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f454:	4b25      	ldr	r3, [pc, #148]	; (800f4ec <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	69ba      	ldr	r2, [r7, #24]
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d10a      	bne.n	800f474 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f462:	f383 8811 	msr	BASEPRI, r3
 800f466:	f3bf 8f6f 	isb	sy
 800f46a:	f3bf 8f4f 	dsb	sy
 800f46e:	60bb      	str	r3, [r7, #8]
}
 800f470:	bf00      	nop
 800f472:	e7fe      	b.n	800f472 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f474:	69bb      	ldr	r3, [r7, #24]
 800f476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f478:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f47a:	69bb      	ldr	r3, [r7, #24]
 800f47c:	69fa      	ldr	r2, [r7, #28]
 800f47e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f480:	69bb      	ldr	r3, [r7, #24]
 800f482:	699b      	ldr	r3, [r3, #24]
 800f484:	2b00      	cmp	r3, #0
 800f486:	db04      	blt.n	800f492 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f48e:	69bb      	ldr	r3, [r7, #24]
 800f490:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f492:	69bb      	ldr	r3, [r7, #24]
 800f494:	6959      	ldr	r1, [r3, #20]
 800f496:	693a      	ldr	r2, [r7, #16]
 800f498:	4613      	mov	r3, r2
 800f49a:	009b      	lsls	r3, r3, #2
 800f49c:	4413      	add	r3, r2
 800f49e:	009b      	lsls	r3, r3, #2
 800f4a0:	4a13      	ldr	r2, [pc, #76]	; (800f4f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f4a2:	4413      	add	r3, r2
 800f4a4:	4299      	cmp	r1, r3
 800f4a6:	d11c      	bne.n	800f4e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4a8:	69bb      	ldr	r3, [r7, #24]
 800f4aa:	3304      	adds	r3, #4
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7fd fef5 	bl	800d29c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4b6:	4b0f      	ldr	r3, [pc, #60]	; (800f4f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d903      	bls.n	800f4c6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4c2:	4a0c      	ldr	r2, [pc, #48]	; (800f4f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f4c4:	6013      	str	r3, [r2, #0]
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4ca:	4613      	mov	r3, r2
 800f4cc:	009b      	lsls	r3, r3, #2
 800f4ce:	4413      	add	r3, r2
 800f4d0:	009b      	lsls	r3, r3, #2
 800f4d2:	4a07      	ldr	r2, [pc, #28]	; (800f4f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f4d4:	441a      	add	r2, r3
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	3304      	adds	r3, #4
 800f4da:	4619      	mov	r1, r3
 800f4dc:	4610      	mov	r0, r2
 800f4de:	f7fd fe80 	bl	800d1e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f4e2:	bf00      	nop
 800f4e4:	3720      	adds	r7, #32
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop
 800f4ec:	240058d0 	.word	0x240058d0
 800f4f0:	240058d4 	.word	0x240058d4
 800f4f4:	24005dac 	.word	0x24005dac

0800f4f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f4f8:	b480      	push	{r7}
 800f4fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f4fc:	4b07      	ldr	r3, [pc, #28]	; (800f51c <pvTaskIncrementMutexHeldCount+0x24>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d004      	beq.n	800f50e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f504:	4b05      	ldr	r3, [pc, #20]	; (800f51c <pvTaskIncrementMutexHeldCount+0x24>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f50a:	3201      	adds	r2, #1
 800f50c:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800f50e:	4b03      	ldr	r3, [pc, #12]	; (800f51c <pvTaskIncrementMutexHeldCount+0x24>)
 800f510:	681b      	ldr	r3, [r3, #0]
	}
 800f512:	4618      	mov	r0, r3
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr
 800f51c:	240058d0 	.word	0x240058d0

0800f520 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f52a:	4b21      	ldr	r3, [pc, #132]	; (800f5b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f530:	4b20      	ldr	r3, [pc, #128]	; (800f5b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	3304      	adds	r3, #4
 800f536:	4618      	mov	r0, r3
 800f538:	f7fd feb0 	bl	800d29c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f542:	d10a      	bne.n	800f55a <prvAddCurrentTaskToDelayedList+0x3a>
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d007      	beq.n	800f55a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f54a:	4b1a      	ldr	r3, [pc, #104]	; (800f5b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	3304      	adds	r3, #4
 800f550:	4619      	mov	r1, r3
 800f552:	4819      	ldr	r0, [pc, #100]	; (800f5b8 <prvAddCurrentTaskToDelayedList+0x98>)
 800f554:	f7fd fe45 	bl	800d1e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f558:	e026      	b.n	800f5a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f55a:	68fa      	ldr	r2, [r7, #12]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	4413      	add	r3, r2
 800f560:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f562:	4b14      	ldr	r3, [pc, #80]	; (800f5b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	68ba      	ldr	r2, [r7, #8]
 800f568:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f56a:	68ba      	ldr	r2, [r7, #8]
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	429a      	cmp	r2, r3
 800f570:	d209      	bcs.n	800f586 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f572:	4b12      	ldr	r3, [pc, #72]	; (800f5bc <prvAddCurrentTaskToDelayedList+0x9c>)
 800f574:	681a      	ldr	r2, [r3, #0]
 800f576:	4b0f      	ldr	r3, [pc, #60]	; (800f5b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	3304      	adds	r3, #4
 800f57c:	4619      	mov	r1, r3
 800f57e:	4610      	mov	r0, r2
 800f580:	f7fd fe53 	bl	800d22a <vListInsert>
}
 800f584:	e010      	b.n	800f5a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f586:	4b0e      	ldr	r3, [pc, #56]	; (800f5c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f588:	681a      	ldr	r2, [r3, #0]
 800f58a:	4b0a      	ldr	r3, [pc, #40]	; (800f5b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	3304      	adds	r3, #4
 800f590:	4619      	mov	r1, r3
 800f592:	4610      	mov	r0, r2
 800f594:	f7fd fe49 	bl	800d22a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f598:	4b0a      	ldr	r3, [pc, #40]	; (800f5c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	68ba      	ldr	r2, [r7, #8]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d202      	bcs.n	800f5a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f5a2:	4a08      	ldr	r2, [pc, #32]	; (800f5c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	6013      	str	r3, [r2, #0]
}
 800f5a8:	bf00      	nop
 800f5aa:	3710      	adds	r7, #16
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}
 800f5b0:	24005da8 	.word	0x24005da8
 800f5b4:	240058d0 	.word	0x240058d0
 800f5b8:	24005d90 	.word	0x24005d90
 800f5bc:	24005d60 	.word	0x24005d60
 800f5c0:	24005d5c 	.word	0x24005d5c
 800f5c4:	24005dc4 	.word	0x24005dc4

0800f5c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b08a      	sub	sp, #40	; 0x28
 800f5cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f5d2:	f000 fb07 	bl	800fbe4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f5d6:	4b1c      	ldr	r3, [pc, #112]	; (800f648 <xTimerCreateTimerTask+0x80>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d021      	beq.n	800f622 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f5e6:	1d3a      	adds	r2, r7, #4
 800f5e8:	f107 0108 	add.w	r1, r7, #8
 800f5ec:	f107 030c 	add.w	r3, r7, #12
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7fd fdaf 	bl	800d154 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f5f6:	6879      	ldr	r1, [r7, #4]
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	68fa      	ldr	r2, [r7, #12]
 800f5fc:	9202      	str	r2, [sp, #8]
 800f5fe:	9301      	str	r3, [sp, #4]
 800f600:	2302      	movs	r3, #2
 800f602:	9300      	str	r3, [sp, #0]
 800f604:	2300      	movs	r3, #0
 800f606:	460a      	mov	r2, r1
 800f608:	4910      	ldr	r1, [pc, #64]	; (800f64c <xTimerCreateTimerTask+0x84>)
 800f60a:	4811      	ldr	r0, [pc, #68]	; (800f650 <xTimerCreateTimerTask+0x88>)
 800f60c:	f7fe ff70 	bl	800e4f0 <xTaskCreateStatic>
 800f610:	4603      	mov	r3, r0
 800f612:	4a10      	ldr	r2, [pc, #64]	; (800f654 <xTimerCreateTimerTask+0x8c>)
 800f614:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f616:	4b0f      	ldr	r3, [pc, #60]	; (800f654 <xTimerCreateTimerTask+0x8c>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d001      	beq.n	800f622 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f61e:	2301      	movs	r3, #1
 800f620:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d10a      	bne.n	800f63e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f62c:	f383 8811 	msr	BASEPRI, r3
 800f630:	f3bf 8f6f 	isb	sy
 800f634:	f3bf 8f4f 	dsb	sy
 800f638:	613b      	str	r3, [r7, #16]
}
 800f63a:	bf00      	nop
 800f63c:	e7fe      	b.n	800f63c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f63e:	697b      	ldr	r3, [r7, #20]
}
 800f640:	4618      	mov	r0, r3
 800f642:	3718      	adds	r7, #24
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}
 800f648:	24005e08 	.word	0x24005e08
 800f64c:	0801f5d4 	.word	0x0801f5d4
 800f650:	0800f78d 	.word	0x0800f78d
 800f654:	24005e0c 	.word	0x24005e0c

0800f658 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b08a      	sub	sp, #40	; 0x28
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	60b9      	str	r1, [r7, #8]
 800f662:	607a      	str	r2, [r7, #4]
 800f664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f666:	2300      	movs	r3, #0
 800f668:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d10a      	bne.n	800f686 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f674:	f383 8811 	msr	BASEPRI, r3
 800f678:	f3bf 8f6f 	isb	sy
 800f67c:	f3bf 8f4f 	dsb	sy
 800f680:	623b      	str	r3, [r7, #32]
}
 800f682:	bf00      	nop
 800f684:	e7fe      	b.n	800f684 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f686:	4b1a      	ldr	r3, [pc, #104]	; (800f6f0 <xTimerGenericCommand+0x98>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d02a      	beq.n	800f6e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	2b05      	cmp	r3, #5
 800f69e:	dc18      	bgt.n	800f6d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f6a0:	f7ff fdb4 	bl	800f20c <xTaskGetSchedulerState>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	2b02      	cmp	r3, #2
 800f6a8:	d109      	bne.n	800f6be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f6aa:	4b11      	ldr	r3, [pc, #68]	; (800f6f0 <xTimerGenericCommand+0x98>)
 800f6ac:	6818      	ldr	r0, [r3, #0]
 800f6ae:	f107 0110 	add.w	r1, r7, #16
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6b6:	f7fe f879 	bl	800d7ac <xQueueGenericSend>
 800f6ba:	6278      	str	r0, [r7, #36]	; 0x24
 800f6bc:	e012      	b.n	800f6e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f6be:	4b0c      	ldr	r3, [pc, #48]	; (800f6f0 <xTimerGenericCommand+0x98>)
 800f6c0:	6818      	ldr	r0, [r3, #0]
 800f6c2:	f107 0110 	add.w	r1, r7, #16
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	f7fe f86f 	bl	800d7ac <xQueueGenericSend>
 800f6ce:	6278      	str	r0, [r7, #36]	; 0x24
 800f6d0:	e008      	b.n	800f6e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f6d2:	4b07      	ldr	r3, [pc, #28]	; (800f6f0 <xTimerGenericCommand+0x98>)
 800f6d4:	6818      	ldr	r0, [r3, #0]
 800f6d6:	f107 0110 	add.w	r1, r7, #16
 800f6da:	2300      	movs	r3, #0
 800f6dc:	683a      	ldr	r2, [r7, #0]
 800f6de:	f7fe f963 	bl	800d9a8 <xQueueGenericSendFromISR>
 800f6e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3728      	adds	r7, #40	; 0x28
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}
 800f6ee:	bf00      	nop
 800f6f0:	24005e08 	.word	0x24005e08

0800f6f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b088      	sub	sp, #32
 800f6f8:	af02      	add	r7, sp, #8
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6fe:	4b22      	ldr	r3, [pc, #136]	; (800f788 <prvProcessExpiredTimer+0x94>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	68db      	ldr	r3, [r3, #12]
 800f704:	68db      	ldr	r3, [r3, #12]
 800f706:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	3304      	adds	r3, #4
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7fd fdc5 	bl	800d29c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f718:	f003 0304 	and.w	r3, r3, #4
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d022      	beq.n	800f766 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	699a      	ldr	r2, [r3, #24]
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	18d1      	adds	r1, r2, r3
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	683a      	ldr	r2, [r7, #0]
 800f72c:	6978      	ldr	r0, [r7, #20]
 800f72e:	f000 f8d1 	bl	800f8d4 <prvInsertTimerInActiveList>
 800f732:	4603      	mov	r3, r0
 800f734:	2b00      	cmp	r3, #0
 800f736:	d01f      	beq.n	800f778 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f738:	2300      	movs	r3, #0
 800f73a:	9300      	str	r3, [sp, #0]
 800f73c:	2300      	movs	r3, #0
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	2100      	movs	r1, #0
 800f742:	6978      	ldr	r0, [r7, #20]
 800f744:	f7ff ff88 	bl	800f658 <xTimerGenericCommand>
 800f748:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d113      	bne.n	800f778 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f754:	f383 8811 	msr	BASEPRI, r3
 800f758:	f3bf 8f6f 	isb	sy
 800f75c:	f3bf 8f4f 	dsb	sy
 800f760:	60fb      	str	r3, [r7, #12]
}
 800f762:	bf00      	nop
 800f764:	e7fe      	b.n	800f764 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f76c:	f023 0301 	bic.w	r3, r3, #1
 800f770:	b2da      	uxtb	r2, r3
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	6a1b      	ldr	r3, [r3, #32]
 800f77c:	6978      	ldr	r0, [r7, #20]
 800f77e:	4798      	blx	r3
}
 800f780:	bf00      	nop
 800f782:	3718      	adds	r7, #24
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}
 800f788:	24005e00 	.word	0x24005e00

0800f78c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b084      	sub	sp, #16
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f794:	f107 0308 	add.w	r3, r7, #8
 800f798:	4618      	mov	r0, r3
 800f79a:	f000 f857 	bl	800f84c <prvGetNextExpireTime>
 800f79e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	4619      	mov	r1, r3
 800f7a4:	68f8      	ldr	r0, [r7, #12]
 800f7a6:	f000 f803 	bl	800f7b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f7aa:	f000 f8d5 	bl	800f958 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f7ae:	e7f1      	b.n	800f794 <prvTimerTask+0x8>

0800f7b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
 800f7b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f7ba:	f7ff f8fd 	bl	800e9b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f7be:	f107 0308 	add.w	r3, r7, #8
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f000 f866 	bl	800f894 <prvSampleTimeNow>
 800f7c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d130      	bne.n	800f832 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d10a      	bne.n	800f7ec <prvProcessTimerOrBlockTask+0x3c>
 800f7d6:	687a      	ldr	r2, [r7, #4]
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d806      	bhi.n	800f7ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f7de:	f7ff f8f9 	bl	800e9d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f7e2:	68f9      	ldr	r1, [r7, #12]
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f7ff ff85 	bl	800f6f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f7ea:	e024      	b.n	800f836 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d008      	beq.n	800f804 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f7f2:	4b13      	ldr	r3, [pc, #76]	; (800f840 <prvProcessTimerOrBlockTask+0x90>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d101      	bne.n	800f800 <prvProcessTimerOrBlockTask+0x50>
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	e000      	b.n	800f802 <prvProcessTimerOrBlockTask+0x52>
 800f800:	2300      	movs	r3, #0
 800f802:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f804:	4b0f      	ldr	r3, [pc, #60]	; (800f844 <prvProcessTimerOrBlockTask+0x94>)
 800f806:	6818      	ldr	r0, [r3, #0]
 800f808:	687a      	ldr	r2, [r7, #4]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	1ad3      	subs	r3, r2, r3
 800f80e:	683a      	ldr	r2, [r7, #0]
 800f810:	4619      	mov	r1, r3
 800f812:	f7fe fe39 	bl	800e488 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f816:	f7ff f8dd 	bl	800e9d4 <xTaskResumeAll>
 800f81a:	4603      	mov	r3, r0
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d10a      	bne.n	800f836 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f820:	4b09      	ldr	r3, [pc, #36]	; (800f848 <prvProcessTimerOrBlockTask+0x98>)
 800f822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f826:	601a      	str	r2, [r3, #0]
 800f828:	f3bf 8f4f 	dsb	sy
 800f82c:	f3bf 8f6f 	isb	sy
}
 800f830:	e001      	b.n	800f836 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f832:	f7ff f8cf 	bl	800e9d4 <xTaskResumeAll>
}
 800f836:	bf00      	nop
 800f838:	3710      	adds	r7, #16
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	24005e04 	.word	0x24005e04
 800f844:	24005e08 	.word	0x24005e08
 800f848:	e000ed04 	.word	0xe000ed04

0800f84c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f84c:	b480      	push	{r7}
 800f84e:	b085      	sub	sp, #20
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f854:	4b0e      	ldr	r3, [pc, #56]	; (800f890 <prvGetNextExpireTime+0x44>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d101      	bne.n	800f862 <prvGetNextExpireTime+0x16>
 800f85e:	2201      	movs	r2, #1
 800f860:	e000      	b.n	800f864 <prvGetNextExpireTime+0x18>
 800f862:	2200      	movs	r2, #0
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d105      	bne.n	800f87c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f870:	4b07      	ldr	r3, [pc, #28]	; (800f890 <prvGetNextExpireTime+0x44>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	68db      	ldr	r3, [r3, #12]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	60fb      	str	r3, [r7, #12]
 800f87a:	e001      	b.n	800f880 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f87c:	2300      	movs	r3, #0
 800f87e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f880:	68fb      	ldr	r3, [r7, #12]
}
 800f882:	4618      	mov	r0, r3
 800f884:	3714      	adds	r7, #20
 800f886:	46bd      	mov	sp, r7
 800f888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88c:	4770      	bx	lr
 800f88e:	bf00      	nop
 800f890:	24005e00 	.word	0x24005e00

0800f894 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f89c:	f7ff f938 	bl	800eb10 <xTaskGetTickCount>
 800f8a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f8a2:	4b0b      	ldr	r3, [pc, #44]	; (800f8d0 <prvSampleTimeNow+0x3c>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d205      	bcs.n	800f8b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f8ac:	f000 f936 	bl	800fb1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	601a      	str	r2, [r3, #0]
 800f8b6:	e002      	b.n	800f8be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f8be:	4a04      	ldr	r2, [pc, #16]	; (800f8d0 <prvSampleTimeNow+0x3c>)
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3710      	adds	r7, #16
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	24005e10 	.word	0x24005e10

0800f8d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b086      	sub	sp, #24
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	60f8      	str	r0, [r7, #12]
 800f8dc:	60b9      	str	r1, [r7, #8]
 800f8de:	607a      	str	r2, [r7, #4]
 800f8e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	68ba      	ldr	r2, [r7, #8]
 800f8ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	68fa      	ldr	r2, [r7, #12]
 800f8f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f8f2:	68ba      	ldr	r2, [r7, #8]
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d812      	bhi.n	800f920 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8fa:	687a      	ldr	r2, [r7, #4]
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	1ad2      	subs	r2, r2, r3
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	699b      	ldr	r3, [r3, #24]
 800f904:	429a      	cmp	r2, r3
 800f906:	d302      	bcc.n	800f90e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f908:	2301      	movs	r3, #1
 800f90a:	617b      	str	r3, [r7, #20]
 800f90c:	e01b      	b.n	800f946 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f90e:	4b10      	ldr	r3, [pc, #64]	; (800f950 <prvInsertTimerInActiveList+0x7c>)
 800f910:	681a      	ldr	r2, [r3, #0]
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	3304      	adds	r3, #4
 800f916:	4619      	mov	r1, r3
 800f918:	4610      	mov	r0, r2
 800f91a:	f7fd fc86 	bl	800d22a <vListInsert>
 800f91e:	e012      	b.n	800f946 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f920:	687a      	ldr	r2, [r7, #4]
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	429a      	cmp	r2, r3
 800f926:	d206      	bcs.n	800f936 <prvInsertTimerInActiveList+0x62>
 800f928:	68ba      	ldr	r2, [r7, #8]
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d302      	bcc.n	800f936 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f930:	2301      	movs	r3, #1
 800f932:	617b      	str	r3, [r7, #20]
 800f934:	e007      	b.n	800f946 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f936:	4b07      	ldr	r3, [pc, #28]	; (800f954 <prvInsertTimerInActiveList+0x80>)
 800f938:	681a      	ldr	r2, [r3, #0]
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	3304      	adds	r3, #4
 800f93e:	4619      	mov	r1, r3
 800f940:	4610      	mov	r0, r2
 800f942:	f7fd fc72 	bl	800d22a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f946:	697b      	ldr	r3, [r7, #20]
}
 800f948:	4618      	mov	r0, r3
 800f94a:	3718      	adds	r7, #24
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}
 800f950:	24005e04 	.word	0x24005e04
 800f954:	24005e00 	.word	0x24005e00

0800f958 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b08e      	sub	sp, #56	; 0x38
 800f95c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f95e:	e0ca      	b.n	800faf6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2b00      	cmp	r3, #0
 800f964:	da18      	bge.n	800f998 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f966:	1d3b      	adds	r3, r7, #4
 800f968:	3304      	adds	r3, #4
 800f96a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d10a      	bne.n	800f988 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f976:	f383 8811 	msr	BASEPRI, r3
 800f97a:	f3bf 8f6f 	isb	sy
 800f97e:	f3bf 8f4f 	dsb	sy
 800f982:	61fb      	str	r3, [r7, #28]
}
 800f984:	bf00      	nop
 800f986:	e7fe      	b.n	800f986 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f98e:	6850      	ldr	r0, [r2, #4]
 800f990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f992:	6892      	ldr	r2, [r2, #8]
 800f994:	4611      	mov	r1, r2
 800f996:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	f2c0 80aa 	blt.w	800faf4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a6:	695b      	ldr	r3, [r3, #20]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d004      	beq.n	800f9b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ae:	3304      	adds	r3, #4
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7fd fc73 	bl	800d29c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9b6:	463b      	mov	r3, r7
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7ff ff6b 	bl	800f894 <prvSampleTimeNow>
 800f9be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2b09      	cmp	r3, #9
 800f9c4:	f200 8097 	bhi.w	800faf6 <prvProcessReceivedCommands+0x19e>
 800f9c8:	a201      	add	r2, pc, #4	; (adr r2, 800f9d0 <prvProcessReceivedCommands+0x78>)
 800f9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9ce:	bf00      	nop
 800f9d0:	0800f9f9 	.word	0x0800f9f9
 800f9d4:	0800f9f9 	.word	0x0800f9f9
 800f9d8:	0800f9f9 	.word	0x0800f9f9
 800f9dc:	0800fa6d 	.word	0x0800fa6d
 800f9e0:	0800fa81 	.word	0x0800fa81
 800f9e4:	0800facb 	.word	0x0800facb
 800f9e8:	0800f9f9 	.word	0x0800f9f9
 800f9ec:	0800f9f9 	.word	0x0800f9f9
 800f9f0:	0800fa6d 	.word	0x0800fa6d
 800f9f4:	0800fa81 	.word	0x0800fa81
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9fe:	f043 0301 	orr.w	r3, r3, #1
 800fa02:	b2da      	uxtb	r2, r3
 800fa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fa0a:	68ba      	ldr	r2, [r7, #8]
 800fa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa0e:	699b      	ldr	r3, [r3, #24]
 800fa10:	18d1      	adds	r1, r2, r3
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa18:	f7ff ff5c 	bl	800f8d4 <prvInsertTimerInActiveList>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d069      	beq.n	800faf6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa24:	6a1b      	ldr	r3, [r3, #32]
 800fa26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa30:	f003 0304 	and.w	r3, r3, #4
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d05e      	beq.n	800faf6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fa38:	68ba      	ldr	r2, [r7, #8]
 800fa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa3c:	699b      	ldr	r3, [r3, #24]
 800fa3e:	441a      	add	r2, r3
 800fa40:	2300      	movs	r3, #0
 800fa42:	9300      	str	r3, [sp, #0]
 800fa44:	2300      	movs	r3, #0
 800fa46:	2100      	movs	r1, #0
 800fa48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa4a:	f7ff fe05 	bl	800f658 <xTimerGenericCommand>
 800fa4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fa50:	6a3b      	ldr	r3, [r7, #32]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d14f      	bne.n	800faf6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fa56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa5a:	f383 8811 	msr	BASEPRI, r3
 800fa5e:	f3bf 8f6f 	isb	sy
 800fa62:	f3bf 8f4f 	dsb	sy
 800fa66:	61bb      	str	r3, [r7, #24]
}
 800fa68:	bf00      	nop
 800fa6a:	e7fe      	b.n	800fa6a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa72:	f023 0301 	bic.w	r3, r3, #1
 800fa76:	b2da      	uxtb	r2, r3
 800fa78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fa7e:	e03a      	b.n	800faf6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fa80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa86:	f043 0301 	orr.w	r3, r3, #1
 800fa8a:	b2da      	uxtb	r2, r3
 800fa8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fa92:	68ba      	ldr	r2, [r7, #8]
 800fa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa96:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9a:	699b      	ldr	r3, [r3, #24]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d10a      	bne.n	800fab6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800faa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa4:	f383 8811 	msr	BASEPRI, r3
 800faa8:	f3bf 8f6f 	isb	sy
 800faac:	f3bf 8f4f 	dsb	sy
 800fab0:	617b      	str	r3, [r7, #20]
}
 800fab2:	bf00      	nop
 800fab4:	e7fe      	b.n	800fab4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab8:	699a      	ldr	r2, [r3, #24]
 800faba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fabc:	18d1      	adds	r1, r2, r3
 800fabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fac4:	f7ff ff06 	bl	800f8d4 <prvInsertTimerInActiveList>
					break;
 800fac8:	e015      	b.n	800faf6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800faca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800facc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fad0:	f003 0302 	and.w	r3, r3, #2
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d103      	bne.n	800fae0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fada:	f000 fbf1 	bl	80102c0 <vPortFree>
 800fade:	e00a      	b.n	800faf6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fae6:	f023 0301 	bic.w	r3, r3, #1
 800faea:	b2da      	uxtb	r2, r3
 800faec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800faf2:	e000      	b.n	800faf6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800faf4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800faf6:	4b08      	ldr	r3, [pc, #32]	; (800fb18 <prvProcessReceivedCommands+0x1c0>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	1d39      	adds	r1, r7, #4
 800fafc:	2200      	movs	r2, #0
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7fe f87a 	bl	800dbf8 <xQueueReceive>
 800fb04:	4603      	mov	r3, r0
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	f47f af2a 	bne.w	800f960 <prvProcessReceivedCommands+0x8>
	}
}
 800fb0c:	bf00      	nop
 800fb0e:	bf00      	nop
 800fb10:	3730      	adds	r7, #48	; 0x30
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}
 800fb16:	bf00      	nop
 800fb18:	24005e08 	.word	0x24005e08

0800fb1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b088      	sub	sp, #32
 800fb20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fb22:	e048      	b.n	800fbb6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fb24:	4b2d      	ldr	r3, [pc, #180]	; (800fbdc <prvSwitchTimerLists+0xc0>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	68db      	ldr	r3, [r3, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb2e:	4b2b      	ldr	r3, [pc, #172]	; (800fbdc <prvSwitchTimerLists+0xc0>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	68db      	ldr	r3, [r3, #12]
 800fb34:	68db      	ldr	r3, [r3, #12]
 800fb36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	3304      	adds	r3, #4
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fd fbad 	bl	800d29c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	6a1b      	ldr	r3, [r3, #32]
 800fb46:	68f8      	ldr	r0, [r7, #12]
 800fb48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb50:	f003 0304 	and.w	r3, r3, #4
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d02e      	beq.n	800fbb6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	699b      	ldr	r3, [r3, #24]
 800fb5c:	693a      	ldr	r2, [r7, #16]
 800fb5e:	4413      	add	r3, r2
 800fb60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fb62:	68ba      	ldr	r2, [r7, #8]
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d90e      	bls.n	800fb88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	68ba      	ldr	r2, [r7, #8]
 800fb6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	68fa      	ldr	r2, [r7, #12]
 800fb74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb76:	4b19      	ldr	r3, [pc, #100]	; (800fbdc <prvSwitchTimerLists+0xc0>)
 800fb78:	681a      	ldr	r2, [r3, #0]
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	3304      	adds	r3, #4
 800fb7e:	4619      	mov	r1, r3
 800fb80:	4610      	mov	r0, r2
 800fb82:	f7fd fb52 	bl	800d22a <vListInsert>
 800fb86:	e016      	b.n	800fbb6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb88:	2300      	movs	r3, #0
 800fb8a:	9300      	str	r3, [sp, #0]
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	693a      	ldr	r2, [r7, #16]
 800fb90:	2100      	movs	r1, #0
 800fb92:	68f8      	ldr	r0, [r7, #12]
 800fb94:	f7ff fd60 	bl	800f658 <xTimerGenericCommand>
 800fb98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d10a      	bne.n	800fbb6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba4:	f383 8811 	msr	BASEPRI, r3
 800fba8:	f3bf 8f6f 	isb	sy
 800fbac:	f3bf 8f4f 	dsb	sy
 800fbb0:	603b      	str	r3, [r7, #0]
}
 800fbb2:	bf00      	nop
 800fbb4:	e7fe      	b.n	800fbb4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fbb6:	4b09      	ldr	r3, [pc, #36]	; (800fbdc <prvSwitchTimerLists+0xc0>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d1b1      	bne.n	800fb24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fbc0:	4b06      	ldr	r3, [pc, #24]	; (800fbdc <prvSwitchTimerLists+0xc0>)
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fbc6:	4b06      	ldr	r3, [pc, #24]	; (800fbe0 <prvSwitchTimerLists+0xc4>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	4a04      	ldr	r2, [pc, #16]	; (800fbdc <prvSwitchTimerLists+0xc0>)
 800fbcc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fbce:	4a04      	ldr	r2, [pc, #16]	; (800fbe0 <prvSwitchTimerLists+0xc4>)
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	6013      	str	r3, [r2, #0]
}
 800fbd4:	bf00      	nop
 800fbd6:	3718      	adds	r7, #24
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}
 800fbdc:	24005e00 	.word	0x24005e00
 800fbe0:	24005e04 	.word	0x24005e04

0800fbe4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b082      	sub	sp, #8
 800fbe8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fbea:	f000 f97b 	bl	800fee4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fbee:	4b15      	ldr	r3, [pc, #84]	; (800fc44 <prvCheckForValidListAndQueue+0x60>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d120      	bne.n	800fc38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fbf6:	4814      	ldr	r0, [pc, #80]	; (800fc48 <prvCheckForValidListAndQueue+0x64>)
 800fbf8:	f7fd fac6 	bl	800d188 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fbfc:	4813      	ldr	r0, [pc, #76]	; (800fc4c <prvCheckForValidListAndQueue+0x68>)
 800fbfe:	f7fd fac3 	bl	800d188 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fc02:	4b13      	ldr	r3, [pc, #76]	; (800fc50 <prvCheckForValidListAndQueue+0x6c>)
 800fc04:	4a10      	ldr	r2, [pc, #64]	; (800fc48 <prvCheckForValidListAndQueue+0x64>)
 800fc06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fc08:	4b12      	ldr	r3, [pc, #72]	; (800fc54 <prvCheckForValidListAndQueue+0x70>)
 800fc0a:	4a10      	ldr	r2, [pc, #64]	; (800fc4c <prvCheckForValidListAndQueue+0x68>)
 800fc0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fc0e:	2300      	movs	r3, #0
 800fc10:	9300      	str	r3, [sp, #0]
 800fc12:	4b11      	ldr	r3, [pc, #68]	; (800fc58 <prvCheckForValidListAndQueue+0x74>)
 800fc14:	4a11      	ldr	r2, [pc, #68]	; (800fc5c <prvCheckForValidListAndQueue+0x78>)
 800fc16:	2110      	movs	r1, #16
 800fc18:	200a      	movs	r0, #10
 800fc1a:	f7fd fbd1 	bl	800d3c0 <xQueueGenericCreateStatic>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	4a08      	ldr	r2, [pc, #32]	; (800fc44 <prvCheckForValidListAndQueue+0x60>)
 800fc22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fc24:	4b07      	ldr	r3, [pc, #28]	; (800fc44 <prvCheckForValidListAndQueue+0x60>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d005      	beq.n	800fc38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fc2c:	4b05      	ldr	r3, [pc, #20]	; (800fc44 <prvCheckForValidListAndQueue+0x60>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	490b      	ldr	r1, [pc, #44]	; (800fc60 <prvCheckForValidListAndQueue+0x7c>)
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fe fbd4 	bl	800e3e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc38:	f000 f984 	bl	800ff44 <vPortExitCritical>
}
 800fc3c:	bf00      	nop
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	24005e08 	.word	0x24005e08
 800fc48:	24005dd8 	.word	0x24005dd8
 800fc4c:	24005dec 	.word	0x24005dec
 800fc50:	24005e00 	.word	0x24005e00
 800fc54:	24005e04 	.word	0x24005e04
 800fc58:	24005eb4 	.word	0x24005eb4
 800fc5c:	24005e14 	.word	0x24005e14
 800fc60:	0801f5dc 	.word	0x0801f5dc

0800fc64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fc64:	b480      	push	{r7}
 800fc66:	b085      	sub	sp, #20
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	60f8      	str	r0, [r7, #12]
 800fc6c:	60b9      	str	r1, [r7, #8]
 800fc6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	3b04      	subs	r3, #4
 800fc74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fc7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	3b04      	subs	r3, #4
 800fc82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	f023 0201 	bic.w	r2, r3, #1
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	3b04      	subs	r3, #4
 800fc92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fc94:	4a0c      	ldr	r2, [pc, #48]	; (800fcc8 <pxPortInitialiseStack+0x64>)
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	3b14      	subs	r3, #20
 800fc9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fca0:	687a      	ldr	r2, [r7, #4]
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	3b04      	subs	r3, #4
 800fcaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	f06f 0202 	mvn.w	r2, #2
 800fcb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	3b20      	subs	r3, #32
 800fcb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fcba:	68fb      	ldr	r3, [r7, #12]
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3714      	adds	r7, #20
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc6:	4770      	bx	lr
 800fcc8:	0800fccd 	.word	0x0800fccd

0800fccc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fccc:	b480      	push	{r7}
 800fcce:	b085      	sub	sp, #20
 800fcd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fcd6:	4b12      	ldr	r3, [pc, #72]	; (800fd20 <prvTaskExitError+0x54>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcde:	d00a      	beq.n	800fcf6 <prvTaskExitError+0x2a>
	__asm volatile
 800fce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce4:	f383 8811 	msr	BASEPRI, r3
 800fce8:	f3bf 8f6f 	isb	sy
 800fcec:	f3bf 8f4f 	dsb	sy
 800fcf0:	60fb      	str	r3, [r7, #12]
}
 800fcf2:	bf00      	nop
 800fcf4:	e7fe      	b.n	800fcf4 <prvTaskExitError+0x28>
	__asm volatile
 800fcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcfa:	f383 8811 	msr	BASEPRI, r3
 800fcfe:	f3bf 8f6f 	isb	sy
 800fd02:	f3bf 8f4f 	dsb	sy
 800fd06:	60bb      	str	r3, [r7, #8]
}
 800fd08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fd0a:	bf00      	nop
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d0fc      	beq.n	800fd0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fd12:	bf00      	nop
 800fd14:	bf00      	nop
 800fd16:	3714      	adds	r7, #20
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr
 800fd20:	24000024 	.word	0x24000024
	...

0800fd30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fd30:	4b07      	ldr	r3, [pc, #28]	; (800fd50 <pxCurrentTCBConst2>)
 800fd32:	6819      	ldr	r1, [r3, #0]
 800fd34:	6808      	ldr	r0, [r1, #0]
 800fd36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd3a:	f380 8809 	msr	PSP, r0
 800fd3e:	f3bf 8f6f 	isb	sy
 800fd42:	f04f 0000 	mov.w	r0, #0
 800fd46:	f380 8811 	msr	BASEPRI, r0
 800fd4a:	4770      	bx	lr
 800fd4c:	f3af 8000 	nop.w

0800fd50 <pxCurrentTCBConst2>:
 800fd50:	240058d0 	.word	0x240058d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fd54:	bf00      	nop
 800fd56:	bf00      	nop

0800fd58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fd58:	4808      	ldr	r0, [pc, #32]	; (800fd7c <prvPortStartFirstTask+0x24>)
 800fd5a:	6800      	ldr	r0, [r0, #0]
 800fd5c:	6800      	ldr	r0, [r0, #0]
 800fd5e:	f380 8808 	msr	MSP, r0
 800fd62:	f04f 0000 	mov.w	r0, #0
 800fd66:	f380 8814 	msr	CONTROL, r0
 800fd6a:	b662      	cpsie	i
 800fd6c:	b661      	cpsie	f
 800fd6e:	f3bf 8f4f 	dsb	sy
 800fd72:	f3bf 8f6f 	isb	sy
 800fd76:	df00      	svc	0
 800fd78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fd7a:	bf00      	nop
 800fd7c:	e000ed08 	.word	0xe000ed08

0800fd80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b088      	sub	sp, #32
 800fd84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fd86:	4b4e      	ldr	r3, [pc, #312]	; (800fec0 <xPortStartScheduler+0x140>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	4a4e      	ldr	r2, [pc, #312]	; (800fec4 <xPortStartScheduler+0x144>)
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	d10a      	bne.n	800fda6 <xPortStartScheduler+0x26>
	__asm volatile
 800fd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd94:	f383 8811 	msr	BASEPRI, r3
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	f3bf 8f4f 	dsb	sy
 800fda0:	61bb      	str	r3, [r7, #24]
}
 800fda2:	bf00      	nop
 800fda4:	e7fe      	b.n	800fda4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fda6:	4b46      	ldr	r3, [pc, #280]	; (800fec0 <xPortStartScheduler+0x140>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	4a47      	ldr	r2, [pc, #284]	; (800fec8 <xPortStartScheduler+0x148>)
 800fdac:	4293      	cmp	r3, r2
 800fdae:	d10a      	bne.n	800fdc6 <xPortStartScheduler+0x46>
	__asm volatile
 800fdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdb4:	f383 8811 	msr	BASEPRI, r3
 800fdb8:	f3bf 8f6f 	isb	sy
 800fdbc:	f3bf 8f4f 	dsb	sy
 800fdc0:	617b      	str	r3, [r7, #20]
}
 800fdc2:	bf00      	nop
 800fdc4:	e7fe      	b.n	800fdc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fdc6:	4b41      	ldr	r3, [pc, #260]	; (800fecc <xPortStartScheduler+0x14c>)
 800fdc8:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fdca:	69fb      	ldr	r3, [r7, #28]
 800fdcc:	781b      	ldrb	r3, [r3, #0]
 800fdce:	b2db      	uxtb	r3, r3
 800fdd0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fdd2:	69fb      	ldr	r3, [r7, #28]
 800fdd4:	22ff      	movs	r2, #255	; 0xff
 800fdd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	b2db      	uxtb	r3, r3
 800fdde:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fde0:	79fb      	ldrb	r3, [r7, #7]
 800fde2:	b2db      	uxtb	r3, r3
 800fde4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fde8:	b2da      	uxtb	r2, r3
 800fdea:	4b39      	ldr	r3, [pc, #228]	; (800fed0 <xPortStartScheduler+0x150>)
 800fdec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fdee:	4b39      	ldr	r3, [pc, #228]	; (800fed4 <xPortStartScheduler+0x154>)
 800fdf0:	2207      	movs	r2, #7
 800fdf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fdf4:	e009      	b.n	800fe0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fdf6:	4b37      	ldr	r3, [pc, #220]	; (800fed4 <xPortStartScheduler+0x154>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	3b01      	subs	r3, #1
 800fdfc:	4a35      	ldr	r2, [pc, #212]	; (800fed4 <xPortStartScheduler+0x154>)
 800fdfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fe00:	79fb      	ldrb	r3, [r7, #7]
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	005b      	lsls	r3, r3, #1
 800fe06:	b2db      	uxtb	r3, r3
 800fe08:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe0a:	79fb      	ldrb	r3, [r7, #7]
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe12:	2b80      	cmp	r3, #128	; 0x80
 800fe14:	d0ef      	beq.n	800fdf6 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800fe16:	4b2f      	ldr	r3, [pc, #188]	; (800fed4 <xPortStartScheduler+0x154>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f1c3 0307 	rsb	r3, r3, #7
 800fe1e:	2b04      	cmp	r3, #4
 800fe20:	d00a      	beq.n	800fe38 <xPortStartScheduler+0xb8>
	__asm volatile
 800fe22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe26:	f383 8811 	msr	BASEPRI, r3
 800fe2a:	f3bf 8f6f 	isb	sy
 800fe2e:	f3bf 8f4f 	dsb	sy
 800fe32:	613b      	str	r3, [r7, #16]
}
 800fe34:	bf00      	nop
 800fe36:	e7fe      	b.n	800fe36 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fe38:	4b26      	ldr	r3, [pc, #152]	; (800fed4 <xPortStartScheduler+0x154>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	f1c3 0307 	rsb	r3, r3, #7
 800fe40:	2b04      	cmp	r3, #4
 800fe42:	d00a      	beq.n	800fe5a <xPortStartScheduler+0xda>
	__asm volatile
 800fe44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe48:	f383 8811 	msr	BASEPRI, r3
 800fe4c:	f3bf 8f6f 	isb	sy
 800fe50:	f3bf 8f4f 	dsb	sy
 800fe54:	60fb      	str	r3, [r7, #12]
}
 800fe56:	bf00      	nop
 800fe58:	e7fe      	b.n	800fe58 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fe5a:	4b1e      	ldr	r3, [pc, #120]	; (800fed4 <xPortStartScheduler+0x154>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	021b      	lsls	r3, r3, #8
 800fe60:	4a1c      	ldr	r2, [pc, #112]	; (800fed4 <xPortStartScheduler+0x154>)
 800fe62:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fe64:	4b1b      	ldr	r3, [pc, #108]	; (800fed4 <xPortStartScheduler+0x154>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fe6c:	4a19      	ldr	r2, [pc, #100]	; (800fed4 <xPortStartScheduler+0x154>)
 800fe6e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	b2da      	uxtb	r2, r3
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fe78:	4b17      	ldr	r3, [pc, #92]	; (800fed8 <xPortStartScheduler+0x158>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	4a16      	ldr	r2, [pc, #88]	; (800fed8 <xPortStartScheduler+0x158>)
 800fe7e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fe82:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fe84:	4b14      	ldr	r3, [pc, #80]	; (800fed8 <xPortStartScheduler+0x158>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	4a13      	ldr	r2, [pc, #76]	; (800fed8 <xPortStartScheduler+0x158>)
 800fe8a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fe8e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fe90:	f000 f8dc 	bl	801004c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fe94:	4b11      	ldr	r3, [pc, #68]	; (800fedc <xPortStartScheduler+0x15c>)
 800fe96:	2200      	movs	r2, #0
 800fe98:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fe9a:	f000 f8fb 	bl	8010094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fe9e:	4b10      	ldr	r3, [pc, #64]	; (800fee0 <xPortStartScheduler+0x160>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	4a0f      	ldr	r2, [pc, #60]	; (800fee0 <xPortStartScheduler+0x160>)
 800fea4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fea8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800feaa:	f7ff ff55 	bl	800fd58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800feae:	f7fe ff0b 	bl	800ecc8 <vTaskSwitchContext>
	prvTaskExitError();
 800feb2:	f7ff ff0b 	bl	800fccc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800feb6:	2300      	movs	r3, #0
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3720      	adds	r7, #32
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	e000ed00 	.word	0xe000ed00
 800fec4:	410fc271 	.word	0x410fc271
 800fec8:	410fc270 	.word	0x410fc270
 800fecc:	e000e400 	.word	0xe000e400
 800fed0:	24005f04 	.word	0x24005f04
 800fed4:	24005f08 	.word	0x24005f08
 800fed8:	e000ed20 	.word	0xe000ed20
 800fedc:	24000024 	.word	0x24000024
 800fee0:	e000ef34 	.word	0xe000ef34

0800fee4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
	__asm volatile
 800feea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feee:	f383 8811 	msr	BASEPRI, r3
 800fef2:	f3bf 8f6f 	isb	sy
 800fef6:	f3bf 8f4f 	dsb	sy
 800fefa:	607b      	str	r3, [r7, #4]
}
 800fefc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fefe:	4b0f      	ldr	r3, [pc, #60]	; (800ff3c <vPortEnterCritical+0x58>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	3301      	adds	r3, #1
 800ff04:	4a0d      	ldr	r2, [pc, #52]	; (800ff3c <vPortEnterCritical+0x58>)
 800ff06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ff08:	4b0c      	ldr	r3, [pc, #48]	; (800ff3c <vPortEnterCritical+0x58>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d10f      	bne.n	800ff30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ff10:	4b0b      	ldr	r3, [pc, #44]	; (800ff40 <vPortEnterCritical+0x5c>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	b2db      	uxtb	r3, r3
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d00a      	beq.n	800ff30 <vPortEnterCritical+0x4c>
	__asm volatile
 800ff1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff1e:	f383 8811 	msr	BASEPRI, r3
 800ff22:	f3bf 8f6f 	isb	sy
 800ff26:	f3bf 8f4f 	dsb	sy
 800ff2a:	603b      	str	r3, [r7, #0]
}
 800ff2c:	bf00      	nop
 800ff2e:	e7fe      	b.n	800ff2e <vPortEnterCritical+0x4a>
	}
}
 800ff30:	bf00      	nop
 800ff32:	370c      	adds	r7, #12
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr
 800ff3c:	24000024 	.word	0x24000024
 800ff40:	e000ed04 	.word	0xe000ed04

0800ff44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ff44:	b480      	push	{r7}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ff4a:	4b12      	ldr	r3, [pc, #72]	; (800ff94 <vPortExitCritical+0x50>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d10a      	bne.n	800ff68 <vPortExitCritical+0x24>
	__asm volatile
 800ff52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff56:	f383 8811 	msr	BASEPRI, r3
 800ff5a:	f3bf 8f6f 	isb	sy
 800ff5e:	f3bf 8f4f 	dsb	sy
 800ff62:	607b      	str	r3, [r7, #4]
}
 800ff64:	bf00      	nop
 800ff66:	e7fe      	b.n	800ff66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ff68:	4b0a      	ldr	r3, [pc, #40]	; (800ff94 <vPortExitCritical+0x50>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	3b01      	subs	r3, #1
 800ff6e:	4a09      	ldr	r2, [pc, #36]	; (800ff94 <vPortExitCritical+0x50>)
 800ff70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ff72:	4b08      	ldr	r3, [pc, #32]	; (800ff94 <vPortExitCritical+0x50>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d105      	bne.n	800ff86 <vPortExitCritical+0x42>
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	f383 8811 	msr	BASEPRI, r3
}
 800ff84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ff86:	bf00      	nop
 800ff88:	370c      	adds	r7, #12
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr
 800ff92:	bf00      	nop
 800ff94:	24000024 	.word	0x24000024
	...

0800ffa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ffa0:	f3ef 8009 	mrs	r0, PSP
 800ffa4:	f3bf 8f6f 	isb	sy
 800ffa8:	4b15      	ldr	r3, [pc, #84]	; (8010000 <pxCurrentTCBConst>)
 800ffaa:	681a      	ldr	r2, [r3, #0]
 800ffac:	f01e 0f10 	tst.w	lr, #16
 800ffb0:	bf08      	it	eq
 800ffb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ffb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffba:	6010      	str	r0, [r2, #0]
 800ffbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ffc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ffc4:	f380 8811 	msr	BASEPRI, r0
 800ffc8:	f3bf 8f4f 	dsb	sy
 800ffcc:	f3bf 8f6f 	isb	sy
 800ffd0:	f7fe fe7a 	bl	800ecc8 <vTaskSwitchContext>
 800ffd4:	f04f 0000 	mov.w	r0, #0
 800ffd8:	f380 8811 	msr	BASEPRI, r0
 800ffdc:	bc09      	pop	{r0, r3}
 800ffde:	6819      	ldr	r1, [r3, #0]
 800ffe0:	6808      	ldr	r0, [r1, #0]
 800ffe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe6:	f01e 0f10 	tst.w	lr, #16
 800ffea:	bf08      	it	eq
 800ffec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fff0:	f380 8809 	msr	PSP, r0
 800fff4:	f3bf 8f6f 	isb	sy
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop
 800fffc:	f3af 8000 	nop.w

08010000 <pxCurrentTCBConst>:
 8010000:	240058d0 	.word	0x240058d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010004:	bf00      	nop
 8010006:	bf00      	nop

08010008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
	__asm volatile
 801000e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010012:	f383 8811 	msr	BASEPRI, r3
 8010016:	f3bf 8f6f 	isb	sy
 801001a:	f3bf 8f4f 	dsb	sy
 801001e:	607b      	str	r3, [r7, #4]
}
 8010020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010022:	f7fe fd97 	bl	800eb54 <xTaskIncrementTick>
 8010026:	4603      	mov	r3, r0
 8010028:	2b00      	cmp	r3, #0
 801002a:	d003      	beq.n	8010034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801002c:	4b06      	ldr	r3, [pc, #24]	; (8010048 <xPortSysTickHandler+0x40>)
 801002e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010032:	601a      	str	r2, [r3, #0]
 8010034:	2300      	movs	r3, #0
 8010036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	f383 8811 	msr	BASEPRI, r3
}
 801003e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010040:	bf00      	nop
 8010042:	3708      	adds	r7, #8
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}
 8010048:	e000ed04 	.word	0xe000ed04

0801004c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801004c:	b480      	push	{r7}
 801004e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010050:	4b0b      	ldr	r3, [pc, #44]	; (8010080 <vPortSetupTimerInterrupt+0x34>)
 8010052:	2200      	movs	r2, #0
 8010054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010056:	4b0b      	ldr	r3, [pc, #44]	; (8010084 <vPortSetupTimerInterrupt+0x38>)
 8010058:	2200      	movs	r2, #0
 801005a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801005c:	4b0a      	ldr	r3, [pc, #40]	; (8010088 <vPortSetupTimerInterrupt+0x3c>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4a0a      	ldr	r2, [pc, #40]	; (801008c <vPortSetupTimerInterrupt+0x40>)
 8010062:	fba2 2303 	umull	r2, r3, r2, r3
 8010066:	099b      	lsrs	r3, r3, #6
 8010068:	4a09      	ldr	r2, [pc, #36]	; (8010090 <vPortSetupTimerInterrupt+0x44>)
 801006a:	3b01      	subs	r3, #1
 801006c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801006e:	4b04      	ldr	r3, [pc, #16]	; (8010080 <vPortSetupTimerInterrupt+0x34>)
 8010070:	2207      	movs	r2, #7
 8010072:	601a      	str	r2, [r3, #0]
}
 8010074:	bf00      	nop
 8010076:	46bd      	mov	sp, r7
 8010078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007c:	4770      	bx	lr
 801007e:	bf00      	nop
 8010080:	e000e010 	.word	0xe000e010
 8010084:	e000e018 	.word	0xe000e018
 8010088:	24000000 	.word	0x24000000
 801008c:	10624dd3 	.word	0x10624dd3
 8010090:	e000e014 	.word	0xe000e014

08010094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80100a4 <vPortEnableVFP+0x10>
 8010098:	6801      	ldr	r1, [r0, #0]
 801009a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801009e:	6001      	str	r1, [r0, #0]
 80100a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80100a2:	bf00      	nop
 80100a4:	e000ed88 	.word	0xe000ed88

080100a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80100a8:	b480      	push	{r7}
 80100aa:	b085      	sub	sp, #20
 80100ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80100ae:	f3ef 8305 	mrs	r3, IPSR
 80100b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	2b0f      	cmp	r3, #15
 80100b8:	d914      	bls.n	80100e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80100ba:	4a17      	ldr	r2, [pc, #92]	; (8010118 <vPortValidateInterruptPriority+0x70>)
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	4413      	add	r3, r2
 80100c0:	781b      	ldrb	r3, [r3, #0]
 80100c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80100c4:	4b15      	ldr	r3, [pc, #84]	; (801011c <vPortValidateInterruptPriority+0x74>)
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	7afa      	ldrb	r2, [r7, #11]
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d20a      	bcs.n	80100e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80100ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d2:	f383 8811 	msr	BASEPRI, r3
 80100d6:	f3bf 8f6f 	isb	sy
 80100da:	f3bf 8f4f 	dsb	sy
 80100de:	607b      	str	r3, [r7, #4]
}
 80100e0:	bf00      	nop
 80100e2:	e7fe      	b.n	80100e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80100e4:	4b0e      	ldr	r3, [pc, #56]	; (8010120 <vPortValidateInterruptPriority+0x78>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80100ec:	4b0d      	ldr	r3, [pc, #52]	; (8010124 <vPortValidateInterruptPriority+0x7c>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d90a      	bls.n	801010a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80100f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f8:	f383 8811 	msr	BASEPRI, r3
 80100fc:	f3bf 8f6f 	isb	sy
 8010100:	f3bf 8f4f 	dsb	sy
 8010104:	603b      	str	r3, [r7, #0]
}
 8010106:	bf00      	nop
 8010108:	e7fe      	b.n	8010108 <vPortValidateInterruptPriority+0x60>
	}
 801010a:	bf00      	nop
 801010c:	3714      	adds	r7, #20
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	e000e3f0 	.word	0xe000e3f0
 801011c:	24005f04 	.word	0x24005f04
 8010120:	e000ed0c 	.word	0xe000ed0c
 8010124:	24005f08 	.word	0x24005f08

08010128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b08a      	sub	sp, #40	; 0x28
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010130:	2300      	movs	r3, #0
 8010132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010134:	f7fe fc40 	bl	800e9b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010138:	4b5b      	ldr	r3, [pc, #364]	; (80102a8 <pvPortMalloc+0x180>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d101      	bne.n	8010144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010140:	f000 f920 	bl	8010384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010144:	4b59      	ldr	r3, [pc, #356]	; (80102ac <pvPortMalloc+0x184>)
 8010146:	681a      	ldr	r2, [r3, #0]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	4013      	ands	r3, r2
 801014c:	2b00      	cmp	r3, #0
 801014e:	f040 8093 	bne.w	8010278 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d01d      	beq.n	8010194 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010158:	2208      	movs	r2, #8
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	4413      	add	r3, r2
 801015e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f003 0307 	and.w	r3, r3, #7
 8010166:	2b00      	cmp	r3, #0
 8010168:	d014      	beq.n	8010194 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f023 0307 	bic.w	r3, r3, #7
 8010170:	3308      	adds	r3, #8
 8010172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f003 0307 	and.w	r3, r3, #7
 801017a:	2b00      	cmp	r3, #0
 801017c:	d00a      	beq.n	8010194 <pvPortMalloc+0x6c>
	__asm volatile
 801017e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010182:	f383 8811 	msr	BASEPRI, r3
 8010186:	f3bf 8f6f 	isb	sy
 801018a:	f3bf 8f4f 	dsb	sy
 801018e:	617b      	str	r3, [r7, #20]
}
 8010190:	bf00      	nop
 8010192:	e7fe      	b.n	8010192 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d06e      	beq.n	8010278 <pvPortMalloc+0x150>
 801019a:	4b45      	ldr	r3, [pc, #276]	; (80102b0 <pvPortMalloc+0x188>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	687a      	ldr	r2, [r7, #4]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d869      	bhi.n	8010278 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80101a4:	4b43      	ldr	r3, [pc, #268]	; (80102b4 <pvPortMalloc+0x18c>)
 80101a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80101a8:	4b42      	ldr	r3, [pc, #264]	; (80102b4 <pvPortMalloc+0x18c>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80101ae:	e004      	b.n	80101ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80101b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80101b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80101ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101bc:	685b      	ldr	r3, [r3, #4]
 80101be:	687a      	ldr	r2, [r7, #4]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d903      	bls.n	80101cc <pvPortMalloc+0xa4>
 80101c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d1f1      	bne.n	80101b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80101cc:	4b36      	ldr	r3, [pc, #216]	; (80102a8 <pvPortMalloc+0x180>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d050      	beq.n	8010278 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80101d6:	6a3b      	ldr	r3, [r7, #32]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2208      	movs	r2, #8
 80101dc:	4413      	add	r3, r2
 80101de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80101e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e2:	681a      	ldr	r2, [r3, #0]
 80101e4:	6a3b      	ldr	r3, [r7, #32]
 80101e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80101e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ea:	685a      	ldr	r2, [r3, #4]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	1ad2      	subs	r2, r2, r3
 80101f0:	2308      	movs	r3, #8
 80101f2:	005b      	lsls	r3, r3, #1
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d91f      	bls.n	8010238 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80101f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	4413      	add	r3, r2
 80101fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010200:	69bb      	ldr	r3, [r7, #24]
 8010202:	f003 0307 	and.w	r3, r3, #7
 8010206:	2b00      	cmp	r3, #0
 8010208:	d00a      	beq.n	8010220 <pvPortMalloc+0xf8>
	__asm volatile
 801020a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801020e:	f383 8811 	msr	BASEPRI, r3
 8010212:	f3bf 8f6f 	isb	sy
 8010216:	f3bf 8f4f 	dsb	sy
 801021a:	613b      	str	r3, [r7, #16]
}
 801021c:	bf00      	nop
 801021e:	e7fe      	b.n	801021e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010222:	685a      	ldr	r2, [r3, #4]
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	1ad2      	subs	r2, r2, r3
 8010228:	69bb      	ldr	r3, [r7, #24]
 801022a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801022c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022e:	687a      	ldr	r2, [r7, #4]
 8010230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010232:	69b8      	ldr	r0, [r7, #24]
 8010234:	f000 f908 	bl	8010448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010238:	4b1d      	ldr	r3, [pc, #116]	; (80102b0 <pvPortMalloc+0x188>)
 801023a:	681a      	ldr	r2, [r3, #0]
 801023c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	4a1b      	ldr	r2, [pc, #108]	; (80102b0 <pvPortMalloc+0x188>)
 8010244:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010246:	4b1a      	ldr	r3, [pc, #104]	; (80102b0 <pvPortMalloc+0x188>)
 8010248:	681a      	ldr	r2, [r3, #0]
 801024a:	4b1b      	ldr	r3, [pc, #108]	; (80102b8 <pvPortMalloc+0x190>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	429a      	cmp	r2, r3
 8010250:	d203      	bcs.n	801025a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010252:	4b17      	ldr	r3, [pc, #92]	; (80102b0 <pvPortMalloc+0x188>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	4a18      	ldr	r2, [pc, #96]	; (80102b8 <pvPortMalloc+0x190>)
 8010258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801025a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025c:	685a      	ldr	r2, [r3, #4]
 801025e:	4b13      	ldr	r3, [pc, #76]	; (80102ac <pvPortMalloc+0x184>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	431a      	orrs	r2, r3
 8010264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801026a:	2200      	movs	r2, #0
 801026c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801026e:	4b13      	ldr	r3, [pc, #76]	; (80102bc <pvPortMalloc+0x194>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	3301      	adds	r3, #1
 8010274:	4a11      	ldr	r2, [pc, #68]	; (80102bc <pvPortMalloc+0x194>)
 8010276:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010278:	f7fe fbac 	bl	800e9d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801027c:	69fb      	ldr	r3, [r7, #28]
 801027e:	f003 0307 	and.w	r3, r3, #7
 8010282:	2b00      	cmp	r3, #0
 8010284:	d00a      	beq.n	801029c <pvPortMalloc+0x174>
	__asm volatile
 8010286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028a:	f383 8811 	msr	BASEPRI, r3
 801028e:	f3bf 8f6f 	isb	sy
 8010292:	f3bf 8f4f 	dsb	sy
 8010296:	60fb      	str	r3, [r7, #12]
}
 8010298:	bf00      	nop
 801029a:	e7fe      	b.n	801029a <pvPortMalloc+0x172>
	return pvReturn;
 801029c:	69fb      	ldr	r3, [r7, #28]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3728      	adds	r7, #40	; 0x28
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop
 80102a8:	24015f14 	.word	0x24015f14
 80102ac:	24015f28 	.word	0x24015f28
 80102b0:	24015f18 	.word	0x24015f18
 80102b4:	24015f0c 	.word	0x24015f0c
 80102b8:	24015f1c 	.word	0x24015f1c
 80102bc:	24015f20 	.word	0x24015f20

080102c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b086      	sub	sp, #24
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d04d      	beq.n	801036e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80102d2:	2308      	movs	r3, #8
 80102d4:	425b      	negs	r3, r3
 80102d6:	697a      	ldr	r2, [r7, #20]
 80102d8:	4413      	add	r3, r2
 80102da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	685a      	ldr	r2, [r3, #4]
 80102e4:	4b24      	ldr	r3, [pc, #144]	; (8010378 <vPortFree+0xb8>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	4013      	ands	r3, r2
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d10a      	bne.n	8010304 <vPortFree+0x44>
	__asm volatile
 80102ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f2:	f383 8811 	msr	BASEPRI, r3
 80102f6:	f3bf 8f6f 	isb	sy
 80102fa:	f3bf 8f4f 	dsb	sy
 80102fe:	60fb      	str	r3, [r7, #12]
}
 8010300:	bf00      	nop
 8010302:	e7fe      	b.n	8010302 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d00a      	beq.n	8010322 <vPortFree+0x62>
	__asm volatile
 801030c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010310:	f383 8811 	msr	BASEPRI, r3
 8010314:	f3bf 8f6f 	isb	sy
 8010318:	f3bf 8f4f 	dsb	sy
 801031c:	60bb      	str	r3, [r7, #8]
}
 801031e:	bf00      	nop
 8010320:	e7fe      	b.n	8010320 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010322:	693b      	ldr	r3, [r7, #16]
 8010324:	685a      	ldr	r2, [r3, #4]
 8010326:	4b14      	ldr	r3, [pc, #80]	; (8010378 <vPortFree+0xb8>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	4013      	ands	r3, r2
 801032c:	2b00      	cmp	r3, #0
 801032e:	d01e      	beq.n	801036e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d11a      	bne.n	801036e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	685a      	ldr	r2, [r3, #4]
 801033c:	4b0e      	ldr	r3, [pc, #56]	; (8010378 <vPortFree+0xb8>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	43db      	mvns	r3, r3
 8010342:	401a      	ands	r2, r3
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010348:	f7fe fb36 	bl	800e9b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	685a      	ldr	r2, [r3, #4]
 8010350:	4b0a      	ldr	r3, [pc, #40]	; (801037c <vPortFree+0xbc>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	4413      	add	r3, r2
 8010356:	4a09      	ldr	r2, [pc, #36]	; (801037c <vPortFree+0xbc>)
 8010358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801035a:	6938      	ldr	r0, [r7, #16]
 801035c:	f000 f874 	bl	8010448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010360:	4b07      	ldr	r3, [pc, #28]	; (8010380 <vPortFree+0xc0>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	3301      	adds	r3, #1
 8010366:	4a06      	ldr	r2, [pc, #24]	; (8010380 <vPortFree+0xc0>)
 8010368:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801036a:	f7fe fb33 	bl	800e9d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801036e:	bf00      	nop
 8010370:	3718      	adds	r7, #24
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	24015f28 	.word	0x24015f28
 801037c:	24015f18 	.word	0x24015f18
 8010380:	24015f24 	.word	0x24015f24

08010384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010384:	b480      	push	{r7}
 8010386:	b085      	sub	sp, #20
 8010388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801038a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801038e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010390:	4b27      	ldr	r3, [pc, #156]	; (8010430 <prvHeapInit+0xac>)
 8010392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	f003 0307 	and.w	r3, r3, #7
 801039a:	2b00      	cmp	r3, #0
 801039c:	d00c      	beq.n	80103b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	3307      	adds	r3, #7
 80103a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	f023 0307 	bic.w	r3, r3, #7
 80103aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80103ac:	68ba      	ldr	r2, [r7, #8]
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	1ad3      	subs	r3, r2, r3
 80103b2:	4a1f      	ldr	r2, [pc, #124]	; (8010430 <prvHeapInit+0xac>)
 80103b4:	4413      	add	r3, r2
 80103b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80103bc:	4a1d      	ldr	r2, [pc, #116]	; (8010434 <prvHeapInit+0xb0>)
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80103c2:	4b1c      	ldr	r3, [pc, #112]	; (8010434 <prvHeapInit+0xb0>)
 80103c4:	2200      	movs	r2, #0
 80103c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	68ba      	ldr	r2, [r7, #8]
 80103cc:	4413      	add	r3, r2
 80103ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80103d0:	2208      	movs	r2, #8
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	1a9b      	subs	r3, r3, r2
 80103d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	f023 0307 	bic.w	r3, r3, #7
 80103de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	4a15      	ldr	r2, [pc, #84]	; (8010438 <prvHeapInit+0xb4>)
 80103e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80103e6:	4b14      	ldr	r3, [pc, #80]	; (8010438 <prvHeapInit+0xb4>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	2200      	movs	r2, #0
 80103ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80103ee:	4b12      	ldr	r3, [pc, #72]	; (8010438 <prvHeapInit+0xb4>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	2200      	movs	r2, #0
 80103f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	68fa      	ldr	r2, [r7, #12]
 80103fe:	1ad2      	subs	r2, r2, r3
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010404:	4b0c      	ldr	r3, [pc, #48]	; (8010438 <prvHeapInit+0xb4>)
 8010406:	681a      	ldr	r2, [r3, #0]
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	4a0a      	ldr	r2, [pc, #40]	; (801043c <prvHeapInit+0xb8>)
 8010412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	685b      	ldr	r3, [r3, #4]
 8010418:	4a09      	ldr	r2, [pc, #36]	; (8010440 <prvHeapInit+0xbc>)
 801041a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801041c:	4b09      	ldr	r3, [pc, #36]	; (8010444 <prvHeapInit+0xc0>)
 801041e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010422:	601a      	str	r2, [r3, #0]
}
 8010424:	bf00      	nop
 8010426:	3714      	adds	r7, #20
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr
 8010430:	24005f0c 	.word	0x24005f0c
 8010434:	24015f0c 	.word	0x24015f0c
 8010438:	24015f14 	.word	0x24015f14
 801043c:	24015f1c 	.word	0x24015f1c
 8010440:	24015f18 	.word	0x24015f18
 8010444:	24015f28 	.word	0x24015f28

08010448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010448:	b480      	push	{r7}
 801044a:	b085      	sub	sp, #20
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010450:	4b28      	ldr	r3, [pc, #160]	; (80104f4 <prvInsertBlockIntoFreeList+0xac>)
 8010452:	60fb      	str	r3, [r7, #12]
 8010454:	e002      	b.n	801045c <prvInsertBlockIntoFreeList+0x14>
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	60fb      	str	r3, [r7, #12]
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	687a      	ldr	r2, [r7, #4]
 8010462:	429a      	cmp	r2, r3
 8010464:	d8f7      	bhi.n	8010456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	685b      	ldr	r3, [r3, #4]
 801046e:	68ba      	ldr	r2, [r7, #8]
 8010470:	4413      	add	r3, r2
 8010472:	687a      	ldr	r2, [r7, #4]
 8010474:	429a      	cmp	r2, r3
 8010476:	d108      	bne.n	801048a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	685a      	ldr	r2, [r3, #4]
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	685b      	ldr	r3, [r3, #4]
 8010480:	441a      	add	r2, r3
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	68ba      	ldr	r2, [r7, #8]
 8010494:	441a      	add	r2, r3
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	429a      	cmp	r2, r3
 801049c:	d118      	bne.n	80104d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	681a      	ldr	r2, [r3, #0]
 80104a2:	4b15      	ldr	r3, [pc, #84]	; (80104f8 <prvInsertBlockIntoFreeList+0xb0>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d00d      	beq.n	80104c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	685a      	ldr	r2, [r3, #4]
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	685b      	ldr	r3, [r3, #4]
 80104b4:	441a      	add	r2, r3
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	681a      	ldr	r2, [r3, #0]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	601a      	str	r2, [r3, #0]
 80104c4:	e008      	b.n	80104d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80104c6:	4b0c      	ldr	r3, [pc, #48]	; (80104f8 <prvInsertBlockIntoFreeList+0xb0>)
 80104c8:	681a      	ldr	r2, [r3, #0]
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	601a      	str	r2, [r3, #0]
 80104ce:	e003      	b.n	80104d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80104d8:	68fa      	ldr	r2, [r7, #12]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d002      	beq.n	80104e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	687a      	ldr	r2, [r7, #4]
 80104e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80104e6:	bf00      	nop
 80104e8:	3714      	adds	r7, #20
 80104ea:	46bd      	mov	sp, r7
 80104ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f0:	4770      	bx	lr
 80104f2:	bf00      	nop
 80104f4:	24015f0c 	.word	0x24015f0c
 80104f8:	24015f14 	.word	0x24015f14

080104fc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b084      	sub	sp, #16
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	330c      	adds	r3, #12
 801050c:	461a      	mov	r2, r3
 801050e:	6839      	ldr	r1, [r7, #0]
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f002 fa59 	bl	80129c8 <tcpip_send_msg_wait_sem>
 8010516:	4603      	mov	r3, r0
 8010518:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801051a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d103      	bne.n	801052a <netconn_apimsg+0x2e>
    return apimsg->err;
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010528:	e001      	b.n	801052e <netconn_apimsg+0x32>
  }
  return err;
 801052a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801052e:	4618      	mov	r0, r3
 8010530:	3710      	adds	r7, #16
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}
	...

08010538 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b08c      	sub	sp, #48	; 0x30
 801053c:	af00      	add	r7, sp, #0
 801053e:	4603      	mov	r3, r0
 8010540:	603a      	str	r2, [r7, #0]
 8010542:	71fb      	strb	r3, [r7, #7]
 8010544:	460b      	mov	r3, r1
 8010546:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8010548:	79fb      	ldrb	r3, [r7, #7]
 801054a:	6839      	ldr	r1, [r7, #0]
 801054c:	4618      	mov	r0, r3
 801054e:	f001 f923 	bl	8011798 <netconn_alloc>
 8010552:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8010554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010556:	2b00      	cmp	r3, #0
 8010558:	d054      	beq.n	8010604 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 801055a:	79bb      	ldrb	r3, [r7, #6]
 801055c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 801055e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010560:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8010562:	f107 0308 	add.w	r3, r7, #8
 8010566:	4619      	mov	r1, r3
 8010568:	4829      	ldr	r0, [pc, #164]	; (8010610 <netconn_new_with_proto_and_callback+0xd8>)
 801056a:	f7ff ffc7 	bl	80104fc <netconn_apimsg>
 801056e:	4603      	mov	r3, r0
 8010570:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8010574:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010578:	2b00      	cmp	r3, #0
 801057a:	d043      	beq.n	8010604 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 801057c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057e:	685b      	ldr	r3, [r3, #4]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d005      	beq.n	8010590 <netconn_new_with_proto_and_callback+0x58>
 8010584:	4b23      	ldr	r3, [pc, #140]	; (8010614 <netconn_new_with_proto_and_callback+0xdc>)
 8010586:	22a3      	movs	r2, #163	; 0xa3
 8010588:	4923      	ldr	r1, [pc, #140]	; (8010618 <netconn_new_with_proto_and_callback+0xe0>)
 801058a:	4824      	ldr	r0, [pc, #144]	; (801061c <netconn_new_with_proto_and_callback+0xe4>)
 801058c:	f00d fe5a 	bl	801e244 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8010590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010592:	3310      	adds	r3, #16
 8010594:	4618      	mov	r0, r3
 8010596:	f00d fb3b 	bl	801dc10 <sys_mbox_valid>
 801059a:	4603      	mov	r3, r0
 801059c:	2b00      	cmp	r3, #0
 801059e:	d105      	bne.n	80105ac <netconn_new_with_proto_and_callback+0x74>
 80105a0:	4b1c      	ldr	r3, [pc, #112]	; (8010614 <netconn_new_with_proto_and_callback+0xdc>)
 80105a2:	22a4      	movs	r2, #164	; 0xa4
 80105a4:	491e      	ldr	r1, [pc, #120]	; (8010620 <netconn_new_with_proto_and_callback+0xe8>)
 80105a6:	481d      	ldr	r0, [pc, #116]	; (801061c <netconn_new_with_proto_and_callback+0xe4>)
 80105a8:	f00d fe4c 	bl	801e244 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80105ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ae:	3314      	adds	r3, #20
 80105b0:	4618      	mov	r0, r3
 80105b2:	f00d fb2d 	bl	801dc10 <sys_mbox_valid>
 80105b6:	4603      	mov	r3, r0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d005      	beq.n	80105c8 <netconn_new_with_proto_and_callback+0x90>
 80105bc:	4b15      	ldr	r3, [pc, #84]	; (8010614 <netconn_new_with_proto_and_callback+0xdc>)
 80105be:	22a6      	movs	r2, #166	; 0xa6
 80105c0:	4918      	ldr	r1, [pc, #96]	; (8010624 <netconn_new_with_proto_and_callback+0xec>)
 80105c2:	4816      	ldr	r0, [pc, #88]	; (801061c <netconn_new_with_proto_and_callback+0xe4>)
 80105c4:	f00d fe3e 	bl	801e244 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80105c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ca:	330c      	adds	r3, #12
 80105cc:	4618      	mov	r0, r3
 80105ce:	f00d fbad 	bl	801dd2c <sys_sem_valid>
 80105d2:	4603      	mov	r3, r0
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d105      	bne.n	80105e4 <netconn_new_with_proto_and_callback+0xac>
 80105d8:	4b0e      	ldr	r3, [pc, #56]	; (8010614 <netconn_new_with_proto_and_callback+0xdc>)
 80105da:	22a9      	movs	r2, #169	; 0xa9
 80105dc:	4912      	ldr	r1, [pc, #72]	; (8010628 <netconn_new_with_proto_and_callback+0xf0>)
 80105de:	480f      	ldr	r0, [pc, #60]	; (801061c <netconn_new_with_proto_and_callback+0xe4>)
 80105e0:	f00d fe30 	bl	801e244 <iprintf>
      sys_sem_free(&conn->op_completed);
 80105e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e6:	330c      	adds	r3, #12
 80105e8:	4618      	mov	r0, r3
 80105ea:	f00d fb92 	bl	801dd12 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80105ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f0:	3310      	adds	r3, #16
 80105f2:	4618      	mov	r0, r3
 80105f4:	f00d fa98 	bl	801db28 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80105f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105fa:	2007      	movs	r0, #7
 80105fc:	f003 f916 	bl	801382c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8010600:	2300      	movs	r3, #0
 8010602:	e000      	b.n	8010606 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8010604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010606:	4618      	mov	r0, r3
 8010608:	3730      	adds	r7, #48	; 0x30
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
 801060e:	bf00      	nop
 8010610:	0801176d 	.word	0x0801176d
 8010614:	0801f5e4 	.word	0x0801f5e4
 8010618:	0801f618 	.word	0x0801f618
 801061c:	0801f63c 	.word	0x0801f63c
 8010620:	0801f664 	.word	0x0801f664
 8010624:	0801f67c 	.word	0x0801f67c
 8010628:	0801f6a0 	.word	0x0801f6a0

0801062c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b08c      	sub	sp, #48	; 0x30
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d101      	bne.n	801063e <netconn_prepare_delete+0x12>
    return ERR_OK;
 801063a:	2300      	movs	r3, #0
 801063c:	e014      	b.n	8010668 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8010642:	2329      	movs	r3, #41	; 0x29
 8010644:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8010646:	f107 030c 	add.w	r3, r7, #12
 801064a:	4619      	mov	r1, r3
 801064c:	4808      	ldr	r0, [pc, #32]	; (8010670 <netconn_prepare_delete+0x44>)
 801064e:	f7ff ff55 	bl	80104fc <netconn_apimsg>
 8010652:	4603      	mov	r3, r0
 8010654:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8010658:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801065c:	2b00      	cmp	r3, #0
 801065e:	d002      	beq.n	8010666 <netconn_prepare_delete+0x3a>
    return err;
 8010660:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8010664:	e000      	b.n	8010668 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8010666:	2300      	movs	r3, #0
}
 8010668:	4618      	mov	r0, r3
 801066a:	3730      	adds	r7, #48	; 0x30
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}
 8010670:	08011cd9 	.word	0x08011cd9

08010674 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b084      	sub	sp, #16
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d101      	bne.n	8010686 <netconn_delete+0x12>
    return ERR_OK;
 8010682:	2300      	movs	r3, #0
 8010684:	e00d      	b.n	80106a2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f7ff ffd0 	bl	801062c <netconn_prepare_delete>
 801068c:	4603      	mov	r3, r0
 801068e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8010690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d102      	bne.n	801069e <netconn_delete+0x2a>
    netconn_free(conn);
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f001 f8eb 	bl	8011874 <netconn_free>
  }
  return err;
 801069e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3710      	adds	r7, #16
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
	...

080106ac <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b08e      	sub	sp, #56	; 0x38
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	60f8      	str	r0, [r7, #12]
 80106b4:	60b9      	str	r1, [r7, #8]
 80106b6:	4613      	mov	r3, r2
 80106b8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d109      	bne.n	80106d4 <netconn_bind+0x28>
 80106c0:	4b11      	ldr	r3, [pc, #68]	; (8010708 <netconn_bind+0x5c>)
 80106c2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80106c6:	4911      	ldr	r1, [pc, #68]	; (801070c <netconn_bind+0x60>)
 80106c8:	4811      	ldr	r0, [pc, #68]	; (8010710 <netconn_bind+0x64>)
 80106ca:	f00d fdbb 	bl	801e244 <iprintf>
 80106ce:	f06f 030f 	mvn.w	r3, #15
 80106d2:	e015      	b.n	8010700 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d101      	bne.n	80106de <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80106da:	4b0e      	ldr	r3, [pc, #56]	; (8010714 <netconn_bind+0x68>)
 80106dc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80106e6:	88fb      	ldrh	r3, [r7, #6]
 80106e8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80106ea:	f107 0314 	add.w	r3, r7, #20
 80106ee:	4619      	mov	r1, r3
 80106f0:	4809      	ldr	r0, [pc, #36]	; (8010718 <netconn_bind+0x6c>)
 80106f2:	f7ff ff03 	bl	80104fc <netconn_apimsg>
 80106f6:	4603      	mov	r3, r0
 80106f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80106fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8010700:	4618      	mov	r0, r3
 8010702:	3738      	adds	r7, #56	; 0x38
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	0801f5e4 	.word	0x0801f5e4
 801070c:	0801f71c 	.word	0x0801f71c
 8010710:	0801f63c 	.word	0x0801f63c
 8010714:	08022c78 	.word	0x08022c78
 8010718:	08011ea1 	.word	0x08011ea1

0801071c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b08c      	sub	sp, #48	; 0x30
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	460b      	mov	r3, r1
 8010726:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d109      	bne.n	8010742 <netconn_listen_with_backlog+0x26>
 801072e:	4b0d      	ldr	r3, [pc, #52]	; (8010764 <netconn_listen_with_backlog+0x48>)
 8010730:	f240 12bb 	movw	r2, #443	; 0x1bb
 8010734:	490c      	ldr	r1, [pc, #48]	; (8010768 <netconn_listen_with_backlog+0x4c>)
 8010736:	480d      	ldr	r0, [pc, #52]	; (801076c <netconn_listen_with_backlog+0x50>)
 8010738:	f00d fd84 	bl	801e244 <iprintf>
 801073c:	f06f 030f 	mvn.w	r3, #15
 8010740:	e00c      	b.n	801075c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8010746:	f107 030c 	add.w	r3, r7, #12
 801074a:	4619      	mov	r1, r3
 801074c:	4808      	ldr	r0, [pc, #32]	; (8010770 <netconn_listen_with_backlog+0x54>)
 801074e:	f7ff fed5 	bl	80104fc <netconn_apimsg>
 8010752:	4603      	mov	r3, r0
 8010754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8010758:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 801075c:	4618      	mov	r0, r3
 801075e:	3730      	adds	r7, #48	; 0x30
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}
 8010764:	0801f5e4 	.word	0x0801f5e4
 8010768:	0801f79c 	.word	0x0801f79c
 801076c:	0801f63c 	.word	0x0801f63c
 8010770:	08011f15 	.word	0x08011f15

08010774 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b086      	sub	sp, #24
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d109      	bne.n	8010798 <netconn_accept+0x24>
 8010784:	4b3d      	ldr	r3, [pc, #244]	; (801087c <netconn_accept+0x108>)
 8010786:	f240 12e1 	movw	r2, #481	; 0x1e1
 801078a:	493d      	ldr	r1, [pc, #244]	; (8010880 <netconn_accept+0x10c>)
 801078c:	483d      	ldr	r0, [pc, #244]	; (8010884 <netconn_accept+0x110>)
 801078e:	f00d fd59 	bl	801e244 <iprintf>
 8010792:	f06f 030f 	mvn.w	r3, #15
 8010796:	e06c      	b.n	8010872 <netconn_accept+0xfe>
  *new_conn = NULL;
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	2200      	movs	r2, #0
 801079c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d109      	bne.n	80107b8 <netconn_accept+0x44>
 80107a4:	4b35      	ldr	r3, [pc, #212]	; (801087c <netconn_accept+0x108>)
 80107a6:	f240 12e3 	movw	r2, #483	; 0x1e3
 80107aa:	4937      	ldr	r1, [pc, #220]	; (8010888 <netconn_accept+0x114>)
 80107ac:	4835      	ldr	r0, [pc, #212]	; (8010884 <netconn_accept+0x110>)
 80107ae:	f00d fd49 	bl	801e244 <iprintf>
 80107b2:	f06f 030f 	mvn.w	r3, #15
 80107b6:	e05c      	b.n	8010872 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f000 fb6c 	bl	8010e96 <netconn_err>
 80107be:	4603      	mov	r3, r0
 80107c0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80107c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d002      	beq.n	80107d0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80107ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80107ce:	e050      	b.n	8010872 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	3314      	adds	r3, #20
 80107d4:	4618      	mov	r0, r3
 80107d6:	f00d fa1b 	bl	801dc10 <sys_mbox_valid>
 80107da:	4603      	mov	r3, r0
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d005      	beq.n	80107ec <netconn_accept+0x78>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	7f1b      	ldrb	r3, [r3, #28]
 80107e4:	f003 0301 	and.w	r3, r3, #1
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d002      	beq.n	80107f2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80107ec:	f06f 030e 	mvn.w	r3, #14
 80107f0:	e03f      	b.n	8010872 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	7f1b      	ldrb	r3, [r3, #28]
 80107f6:	f003 0302 	and.w	r3, r3, #2
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d00e      	beq.n	801081c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	3314      	adds	r3, #20
 8010802:	f107 020c 	add.w	r2, r7, #12
 8010806:	4611      	mov	r1, r2
 8010808:	4618      	mov	r0, r3
 801080a:	f00d f9ea 	bl	801dbe2 <sys_arch_mbox_tryfetch>
 801080e:	4603      	mov	r3, r0
 8010810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010814:	d10a      	bne.n	801082c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8010816:	f06f 0306 	mvn.w	r3, #6
 801081a:	e02a      	b.n	8010872 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	3314      	adds	r3, #20
 8010820:	f107 010c 	add.w	r1, r7, #12
 8010824:	2200      	movs	r2, #0
 8010826:	4618      	mov	r0, r3
 8010828:	f00d f9aa 	bl	801db80 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010830:	2b00      	cmp	r3, #0
 8010832:	d005      	beq.n	8010840 <netconn_accept+0xcc>
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010838:	2200      	movs	r2, #0
 801083a:	2101      	movs	r1, #1
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f107 0213 	add.w	r2, r7, #19
 8010846:	4611      	mov	r1, r2
 8010848:	4618      	mov	r0, r3
 801084a:	f000 fb75 	bl	8010f38 <lwip_netconn_is_err_msg>
 801084e:	4603      	mov	r3, r0
 8010850:	2b00      	cmp	r3, #0
 8010852:	d002      	beq.n	801085a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8010854:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010858:	e00b      	b.n	8010872 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d102      	bne.n	8010866 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8010860:	f06f 030e 	mvn.w	r3, #14
 8010864:	e005      	b.n	8010872 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	697a      	ldr	r2, [r7, #20]
 801086e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8010870:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8010872:	4618      	mov	r0, r3
 8010874:	3718      	adds	r7, #24
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}
 801087a:	bf00      	nop
 801087c:	0801f5e4 	.word	0x0801f5e4
 8010880:	0801f7bc 	.word	0x0801f7bc
 8010884:	0801f63c 	.word	0x0801f63c
 8010888:	0801f7dc 	.word	0x0801f7dc

0801088c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b088      	sub	sp, #32
 8010890:	af00      	add	r7, sp, #0
 8010892:	60f8      	str	r0, [r7, #12]
 8010894:	60b9      	str	r1, [r7, #8]
 8010896:	4613      	mov	r3, r2
 8010898:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 801089a:	2300      	movs	r3, #0
 801089c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d109      	bne.n	80108b8 <netconn_recv_data+0x2c>
 80108a4:	4b58      	ldr	r3, [pc, #352]	; (8010a08 <netconn_recv_data+0x17c>)
 80108a6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80108aa:	4958      	ldr	r1, [pc, #352]	; (8010a0c <netconn_recv_data+0x180>)
 80108ac:	4858      	ldr	r0, [pc, #352]	; (8010a10 <netconn_recv_data+0x184>)
 80108ae:	f00d fcc9 	bl	801e244 <iprintf>
 80108b2:	f06f 030f 	mvn.w	r3, #15
 80108b6:	e0a2      	b.n	80109fe <netconn_recv_data+0x172>
  *new_buf = NULL;
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	2200      	movs	r2, #0
 80108bc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d109      	bne.n	80108d8 <netconn_recv_data+0x4c>
 80108c4:	4b50      	ldr	r3, [pc, #320]	; (8010a08 <netconn_recv_data+0x17c>)
 80108c6:	f240 224a 	movw	r2, #586	; 0x24a
 80108ca:	4952      	ldr	r1, [pc, #328]	; (8010a14 <netconn_recv_data+0x188>)
 80108cc:	4850      	ldr	r0, [pc, #320]	; (8010a10 <netconn_recv_data+0x184>)
 80108ce:	f00d fcb9 	bl	801e244 <iprintf>
 80108d2:	f06f 030f 	mvn.w	r3, #15
 80108d6:	e092      	b.n	80109fe <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	3310      	adds	r3, #16
 80108dc:	4618      	mov	r0, r3
 80108de:	f00d f997 	bl	801dc10 <sys_mbox_valid>
 80108e2:	4603      	mov	r3, r0
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d10e      	bne.n	8010906 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80108e8:	68f8      	ldr	r0, [r7, #12]
 80108ea:	f000 fad4 	bl	8010e96 <netconn_err>
 80108ee:	4603      	mov	r3, r0
 80108f0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80108f2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d002      	beq.n	8010900 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80108fa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80108fe:	e07e      	b.n	80109fe <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8010900:	f06f 030a 	mvn.w	r3, #10
 8010904:	e07b      	b.n	80109fe <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	7f1b      	ldrb	r3, [r3, #28]
 801090a:	f003 0302 	and.w	r3, r3, #2
 801090e:	2b00      	cmp	r3, #0
 8010910:	d10f      	bne.n	8010932 <netconn_recv_data+0xa6>
 8010912:	79fb      	ldrb	r3, [r7, #7]
 8010914:	f003 0304 	and.w	r3, r3, #4
 8010918:	2b00      	cmp	r3, #0
 801091a:	d10a      	bne.n	8010932 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	7f1b      	ldrb	r3, [r3, #28]
 8010920:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8010924:	2b00      	cmp	r3, #0
 8010926:	d104      	bne.n	8010932 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d023      	beq.n	801097a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	3310      	adds	r3, #16
 8010936:	f107 0218 	add.w	r2, r7, #24
 801093a:	4611      	mov	r1, r2
 801093c:	4618      	mov	r0, r3
 801093e:	f00d f950 	bl	801dbe2 <sys_arch_mbox_tryfetch>
 8010942:	4603      	mov	r3, r0
 8010944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010948:	d11f      	bne.n	801098a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 801094a:	68f8      	ldr	r0, [r7, #12]
 801094c:	f000 faa3 	bl	8010e96 <netconn_err>
 8010950:	4603      	mov	r3, r0
 8010952:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8010954:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d002      	beq.n	8010962 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 801095c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010960:	e04d      	b.n	80109fe <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	7f1b      	ldrb	r3, [r3, #28]
 8010966:	f003 0301 	and.w	r3, r3, #1
 801096a:	2b00      	cmp	r3, #0
 801096c:	d002      	beq.n	8010974 <netconn_recv_data+0xe8>
        return ERR_CONN;
 801096e:	f06f 030a 	mvn.w	r3, #10
 8010972:	e044      	b.n	80109fe <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8010974:	f06f 0306 	mvn.w	r3, #6
 8010978:	e041      	b.n	80109fe <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	3310      	adds	r3, #16
 801097e:	f107 0118 	add.w	r1, r7, #24
 8010982:	2200      	movs	r2, #0
 8010984:	4618      	mov	r0, r3
 8010986:	f00d f8fb 	bl	801db80 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010992:	2b10      	cmp	r3, #16
 8010994:	d117      	bne.n	80109c6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8010996:	69bb      	ldr	r3, [r7, #24]
 8010998:	f107 0217 	add.w	r2, r7, #23
 801099c:	4611      	mov	r1, r2
 801099e:	4618      	mov	r0, r3
 80109a0:	f000 faca 	bl	8010f38 <lwip_netconn_is_err_msg>
 80109a4:	4603      	mov	r3, r0
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d009      	beq.n	80109be <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80109aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80109ae:	f113 0f0f 	cmn.w	r3, #15
 80109b2:	d101      	bne.n	80109b8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80109b4:	2300      	movs	r3, #0
 80109b6:	e022      	b.n	80109fe <netconn_recv_data+0x172>
      }
      return err;
 80109b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80109bc:	e01f      	b.n	80109fe <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80109be:	69bb      	ldr	r3, [r7, #24]
 80109c0:	891b      	ldrh	r3, [r3, #8]
 80109c2:	83fb      	strh	r3, [r7, #30]
 80109c4:	e00d      	b.n	80109e2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80109c6:	69bb      	ldr	r3, [r7, #24]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d106      	bne.n	80109da <netconn_recv_data+0x14e>
 80109cc:	4b0e      	ldr	r3, [pc, #56]	; (8010a08 <netconn_recv_data+0x17c>)
 80109ce:	f240 2291 	movw	r2, #657	; 0x291
 80109d2:	4911      	ldr	r1, [pc, #68]	; (8010a18 <netconn_recv_data+0x18c>)
 80109d4:	480e      	ldr	r0, [pc, #56]	; (8010a10 <netconn_recv_data+0x184>)
 80109d6:	f00d fc35 	bl	801e244 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80109da:	69bb      	ldr	r3, [r7, #24]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	891b      	ldrh	r3, [r3, #8]
 80109e0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d005      	beq.n	80109f6 <netconn_recv_data+0x16a>
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ee:	8bfa      	ldrh	r2, [r7, #30]
 80109f0:	2101      	movs	r1, #1
 80109f2:	68f8      	ldr	r0, [r7, #12]
 80109f4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80109f6:	69ba      	ldr	r2, [r7, #24]
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80109fc:	2300      	movs	r3, #0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3720      	adds	r7, #32
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	0801f5e4 	.word	0x0801f5e4
 8010a0c:	0801f7fc 	.word	0x0801f7fc
 8010a10:	0801f63c 	.word	0x0801f63c
 8010a14:	0801f81c 	.word	0x0801f81c
 8010a18:	0801f838 	.word	0x0801f838

08010a1c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d005      	beq.n	8010a3a <netconn_tcp_recvd_msg+0x1e>
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a36:	2b10      	cmp	r3, #16
 8010a38:	d009      	beq.n	8010a4e <netconn_tcp_recvd_msg+0x32>
 8010a3a:	4b0c      	ldr	r3, [pc, #48]	; (8010a6c <netconn_tcp_recvd_msg+0x50>)
 8010a3c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8010a40:	490b      	ldr	r1, [pc, #44]	; (8010a70 <netconn_tcp_recvd_msg+0x54>)
 8010a42:	480c      	ldr	r0, [pc, #48]	; (8010a74 <netconn_tcp_recvd_msg+0x58>)
 8010a44:	f00d fbfe 	bl	801e244 <iprintf>
 8010a48:	f06f 030f 	mvn.w	r3, #15
 8010a4c:	e00a      	b.n	8010a64 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	68fa      	ldr	r2, [r7, #12]
 8010a52:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	68ba      	ldr	r2, [r7, #8]
 8010a58:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8010a5a:	6879      	ldr	r1, [r7, #4]
 8010a5c:	4806      	ldr	r0, [pc, #24]	; (8010a78 <netconn_tcp_recvd_msg+0x5c>)
 8010a5e:	f7ff fd4d 	bl	80104fc <netconn_apimsg>
 8010a62:	4603      	mov	r3, r0
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3710      	adds	r7, #16
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	0801f5e4 	.word	0x0801f5e4
 8010a70:	0801f844 	.word	0x0801f844
 8010a74:	0801f63c 	.word	0x0801f63c
 8010a78:	08012045 	.word	0x08012045

08010a7c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b090      	sub	sp, #64	; 0x40
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	60f8      	str	r0, [r7, #12]
 8010a84:	60b9      	str	r1, [r7, #8]
 8010a86:	4613      	mov	r3, r2
 8010a88:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	3310      	adds	r3, #16
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f00d f8be 	bl	801dc10 <sys_mbox_valid>
 8010a94:	4603      	mov	r3, r0
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d102      	bne.n	8010aa0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8010a9a:	f06f 030a 	mvn.w	r3, #10
 8010a9e:	e06d      	b.n	8010b7c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	7f1b      	ldrb	r3, [r3, #28]
 8010aa4:	b25b      	sxtb	r3, r3
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	da07      	bge.n	8010aba <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	7f1b      	ldrb	r3, [r3, #28]
 8010aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ab2:	b2da      	uxtb	r2, r3
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8010ab8:	e039      	b.n	8010b2e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8010aba:	79fb      	ldrb	r3, [r7, #7]
 8010abc:	461a      	mov	r2, r3
 8010abe:	68b9      	ldr	r1, [r7, #8]
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	f7ff fee3 	bl	801088c <netconn_recv_data>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8010acc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d002      	beq.n	8010ada <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8010ad4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010ad8:	e050      	b.n	8010b7c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8010ae0:	79fb      	ldrb	r3, [r7, #7]
 8010ae2:	f003 0308 	and.w	r3, r3, #8
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d10e      	bne.n	8010b08 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8010aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d002      	beq.n	8010af6 <netconn_recv_data_tcp+0x7a>
 8010af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af2:	891b      	ldrh	r3, [r3, #8]
 8010af4:	e000      	b.n	8010af8 <netconn_recv_data_tcp+0x7c>
 8010af6:	2301      	movs	r3, #1
 8010af8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8010afa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010afc:	f107 0214 	add.w	r2, r7, #20
 8010b00:	4619      	mov	r1, r3
 8010b02:	68f8      	ldr	r0, [r7, #12]
 8010b04:	f7ff ff8a 	bl	8010a1c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8010b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d134      	bne.n	8010b78 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8010b0e:	79fb      	ldrb	r3, [r7, #7]
 8010b10:	f003 0310 	and.w	r3, r3, #16
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d009      	beq.n	8010b2c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	7f1b      	ldrb	r3, [r3, #28]
 8010b1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010b20:	b2da      	uxtb	r2, r3
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8010b26:	f06f 0306 	mvn.w	r3, #6
 8010b2a:	e027      	b.n	8010b7c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8010b2c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d005      	beq.n	8010b42 <netconn_recv_data_tcp+0xc6>
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	2101      	movs	r1, #1
 8010b3e:	68f8      	ldr	r0, [r7, #12]
 8010b40:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	685b      	ldr	r3, [r3, #4]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d10f      	bne.n	8010b6a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8010b4a:	68f8      	ldr	r0, [r7, #12]
 8010b4c:	f000 f9a3 	bl	8010e96 <netconn_err>
 8010b50:	4603      	mov	r3, r0
 8010b52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8010b56:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d002      	beq.n	8010b64 <netconn_recv_data_tcp+0xe8>
          return err;
 8010b5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010b62:	e00b      	b.n	8010b7c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8010b64:	f06f 030d 	mvn.w	r3, #13
 8010b68:	e008      	b.n	8010b7c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8010b6a:	2101      	movs	r1, #1
 8010b6c:	68f8      	ldr	r0, [r7, #12]
 8010b6e:	f000 f955 	bl	8010e1c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8010b72:	f06f 030e 	mvn.w	r3, #14
 8010b76:	e001      	b.n	8010b7c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8010b78:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3740      	adds	r7, #64	; 0x40
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}

08010b84 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b086      	sub	sp, #24
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
 8010b8c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d109      	bne.n	8010bac <netconn_recv+0x28>
 8010b98:	4b32      	ldr	r3, [pc, #200]	; (8010c64 <netconn_recv+0xe0>)
 8010b9a:	f240 3263 	movw	r2, #867	; 0x363
 8010b9e:	4932      	ldr	r1, [pc, #200]	; (8010c68 <netconn_recv+0xe4>)
 8010ba0:	4832      	ldr	r0, [pc, #200]	; (8010c6c <netconn_recv+0xe8>)
 8010ba2:	f00d fb4f 	bl	801e244 <iprintf>
 8010ba6:	f06f 030f 	mvn.w	r3, #15
 8010baa:	e056      	b.n	8010c5a <netconn_recv+0xd6>
  *new_buf = NULL;
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d109      	bne.n	8010bcc <netconn_recv+0x48>
 8010bb8:	4b2a      	ldr	r3, [pc, #168]	; (8010c64 <netconn_recv+0xe0>)
 8010bba:	f240 3265 	movw	r2, #869	; 0x365
 8010bbe:	492c      	ldr	r1, [pc, #176]	; (8010c70 <netconn_recv+0xec>)
 8010bc0:	482a      	ldr	r0, [pc, #168]	; (8010c6c <netconn_recv+0xe8>)
 8010bc2:	f00d fb3f 	bl	801e244 <iprintf>
 8010bc6:	f06f 030f 	mvn.w	r3, #15
 8010bca:	e046      	b.n	8010c5a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010bd4:	2b10      	cmp	r3, #16
 8010bd6:	d13a      	bne.n	8010c4e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8010bd8:	2300      	movs	r3, #0
 8010bda:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8010bdc:	2006      	movs	r0, #6
 8010bde:	f002 fdaf 	bl	8013740 <memp_malloc>
 8010be2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d102      	bne.n	8010bf0 <netconn_recv+0x6c>
      return ERR_MEM;
 8010bea:	f04f 33ff 	mov.w	r3, #4294967295
 8010bee:	e034      	b.n	8010c5a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8010bf0:	f107 030c 	add.w	r3, r7, #12
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	4619      	mov	r1, r3
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f7ff ff3f 	bl	8010a7c <netconn_recv_data_tcp>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010c02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d006      	beq.n	8010c18 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8010c0a:	6979      	ldr	r1, [r7, #20]
 8010c0c:	2006      	movs	r0, #6
 8010c0e:	f002 fe0d 	bl	801382c <memp_free>
      return err;
 8010c12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010c16:	e020      	b.n	8010c5a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d106      	bne.n	8010c2c <netconn_recv+0xa8>
 8010c1e:	4b11      	ldr	r3, [pc, #68]	; (8010c64 <netconn_recv+0xe0>)
 8010c20:	f240 3279 	movw	r2, #889	; 0x379
 8010c24:	4913      	ldr	r1, [pc, #76]	; (8010c74 <netconn_recv+0xf0>)
 8010c26:	4811      	ldr	r0, [pc, #68]	; (8010c6c <netconn_recv+0xe8>)
 8010c28:	f00d fb0c 	bl	801e244 <iprintf>

    buf->p = p;
 8010c2c:	68fa      	ldr	r2, [r7, #12]
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8010c32:	68fa      	ldr	r2, [r7, #12]
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	2200      	movs	r2, #0
 8010c42:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	697a      	ldr	r2, [r7, #20]
 8010c48:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	e005      	b.n	8010c5a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8010c4e:	2200      	movs	r2, #0
 8010c50:	6839      	ldr	r1, [r7, #0]
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f7ff fe1a 	bl	801088c <netconn_recv_data>
 8010c58:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3718      	adds	r7, #24
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	0801f5e4 	.word	0x0801f5e4
 8010c68:	0801f7fc 	.word	0x0801f7fc
 8010c6c:	0801f63c 	.word	0x0801f63c
 8010c70:	0801f81c 	.word	0x0801f81c
 8010c74:	0801f894 	.word	0x0801f894

08010c78 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b088      	sub	sp, #32
 8010c7c:	af02      	add	r7, sp, #8
 8010c7e:	60f8      	str	r0, [r7, #12]
 8010c80:	60b9      	str	r1, [r7, #8]
 8010c82:	607a      	str	r2, [r7, #4]
 8010c84:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8010c8e:	78fa      	ldrb	r2, [r7, #3]
 8010c90:	f107 0110 	add.w	r1, r7, #16
 8010c94:	6a3b      	ldr	r3, [r7, #32]
 8010c96:	9300      	str	r3, [sp, #0]
 8010c98:	4613      	mov	r3, r2
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	68f8      	ldr	r0, [r7, #12]
 8010c9e:	f000 f805 	bl	8010cac <netconn_write_vectors_partly>
 8010ca2:	4603      	mov	r3, r0
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3718      	adds	r7, #24
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}

08010cac <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b092      	sub	sp, #72	; 0x48
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	60f8      	str	r0, [r7, #12]
 8010cb4:	60b9      	str	r1, [r7, #8]
 8010cb6:	4611      	mov	r1, r2
 8010cb8:	461a      	mov	r2, r3
 8010cba:	460b      	mov	r3, r1
 8010cbc:	80fb      	strh	r3, [r7, #6]
 8010cbe:	4613      	mov	r3, r2
 8010cc0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d109      	bne.n	8010cdc <netconn_write_vectors_partly+0x30>
 8010cc8:	4b4e      	ldr	r3, [pc, #312]	; (8010e04 <netconn_write_vectors_partly+0x158>)
 8010cca:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010cce:	494e      	ldr	r1, [pc, #312]	; (8010e08 <netconn_write_vectors_partly+0x15c>)
 8010cd0:	484e      	ldr	r0, [pc, #312]	; (8010e0c <netconn_write_vectors_partly+0x160>)
 8010cd2:	f00d fab7 	bl	801e244 <iprintf>
 8010cd6:	f06f 030f 	mvn.w	r3, #15
 8010cda:	e08e      	b.n	8010dfa <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ce4:	2b10      	cmp	r3, #16
 8010ce6:	d009      	beq.n	8010cfc <netconn_write_vectors_partly+0x50>
 8010ce8:	4b46      	ldr	r3, [pc, #280]	; (8010e04 <netconn_write_vectors_partly+0x158>)
 8010cea:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8010cee:	4948      	ldr	r1, [pc, #288]	; (8010e10 <netconn_write_vectors_partly+0x164>)
 8010cf0:	4846      	ldr	r0, [pc, #280]	; (8010e0c <netconn_write_vectors_partly+0x160>)
 8010cf2:	f00d faa7 	bl	801e244 <iprintf>
 8010cf6:	f06f 0305 	mvn.w	r3, #5
 8010cfa:	e07e      	b.n	8010dfa <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	7f1b      	ldrb	r3, [r3, #28]
 8010d00:	f003 0302 	and.w	r3, r3, #2
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d104      	bne.n	8010d12 <netconn_write_vectors_partly+0x66>
 8010d08:	797b      	ldrb	r3, [r7, #5]
 8010d0a:	f003 0304 	and.w	r3, r3, #4
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d001      	beq.n	8010d16 <netconn_write_vectors_partly+0x6a>
 8010d12:	2301      	movs	r3, #1
 8010d14:	e000      	b.n	8010d18 <netconn_write_vectors_partly+0x6c>
 8010d16:	2300      	movs	r3, #0
 8010d18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8010d1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d005      	beq.n	8010d30 <netconn_write_vectors_partly+0x84>
 8010d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d102      	bne.n	8010d30 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8010d2a:	f06f 0305 	mvn.w	r3, #5
 8010d2e:	e064      	b.n	8010dfa <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8010d30:	2300      	movs	r3, #0
 8010d32:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8010d34:	2300      	movs	r3, #0
 8010d36:	643b      	str	r3, [r7, #64]	; 0x40
 8010d38:	e015      	b.n	8010d66 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8010d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d3c:	00db      	lsls	r3, r3, #3
 8010d3e:	68ba      	ldr	r2, [r7, #8]
 8010d40:	4413      	add	r3, r2
 8010d42:	685b      	ldr	r3, [r3, #4]
 8010d44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d46:	4413      	add	r3, r2
 8010d48:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8010d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d4c:	00db      	lsls	r3, r3, #3
 8010d4e:	68ba      	ldr	r2, [r7, #8]
 8010d50:	4413      	add	r3, r2
 8010d52:	685b      	ldr	r3, [r3, #4]
 8010d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d202      	bcs.n	8010d60 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8010d5a:	f06f 0305 	mvn.w	r3, #5
 8010d5e:	e04c      	b.n	8010dfa <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8010d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d62:	3301      	adds	r3, #1
 8010d64:	643b      	str	r3, [r7, #64]	; 0x40
 8010d66:	88fb      	ldrh	r3, [r7, #6]
 8010d68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	dbe5      	blt.n	8010d3a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8010d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d101      	bne.n	8010d78 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8010d74:	2300      	movs	r3, #0
 8010d76:	e040      	b.n	8010dfa <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8010d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	da0a      	bge.n	8010d94 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8010d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d102      	bne.n	8010d8a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8010d84:	f06f 0305 	mvn.w	r3, #5
 8010d88:	e037      	b.n	8010dfa <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8010d8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010d8e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8010d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d92:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8010d9c:	88fb      	ldrh	r3, [r7, #6]
 8010d9e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8010da0:	2300      	movs	r3, #0
 8010da2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8010da4:	797b      	ldrb	r3, [r7, #5]
 8010da6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8010daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010dac:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8010dae:	2300      	movs	r3, #0
 8010db0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8010db2:	f107 0314 	add.w	r3, r7, #20
 8010db6:	4619      	mov	r1, r3
 8010db8:	4816      	ldr	r0, [pc, #88]	; (8010e14 <netconn_write_vectors_partly+0x168>)
 8010dba:	f7ff fb9f 	bl	80104fc <netconn_apimsg>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8010dc4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d114      	bne.n	8010df6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8010dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d002      	beq.n	8010dd8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8010dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dd6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8010dd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d10a      	bne.n	8010df6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8010de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010de4:	429a      	cmp	r2, r3
 8010de6:	d006      	beq.n	8010df6 <netconn_write_vectors_partly+0x14a>
 8010de8:	4b06      	ldr	r3, [pc, #24]	; (8010e04 <netconn_write_vectors_partly+0x158>)
 8010dea:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010dee:	490a      	ldr	r1, [pc, #40]	; (8010e18 <netconn_write_vectors_partly+0x16c>)
 8010df0:	4806      	ldr	r0, [pc, #24]	; (8010e0c <netconn_write_vectors_partly+0x160>)
 8010df2:	f00d fa27 	bl	801e244 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8010df6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3748      	adds	r7, #72	; 0x48
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}
 8010e02:	bf00      	nop
 8010e04:	0801f5e4 	.word	0x0801f5e4
 8010e08:	0801f8bc 	.word	0x0801f8bc
 8010e0c:	0801f63c 	.word	0x0801f63c
 8010e10:	0801f8d8 	.word	0x0801f8d8
 8010e14:	08012449 	.word	0x08012449
 8010e18:	0801f8fc 	.word	0x0801f8fc

08010e1c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b08c      	sub	sp, #48	; 0x30
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
 8010e24:	460b      	mov	r3, r1
 8010e26:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d109      	bne.n	8010e42 <netconn_close_shutdown+0x26>
 8010e2e:	4b0f      	ldr	r3, [pc, #60]	; (8010e6c <netconn_close_shutdown+0x50>)
 8010e30:	f240 4247 	movw	r2, #1095	; 0x447
 8010e34:	490e      	ldr	r1, [pc, #56]	; (8010e70 <netconn_close_shutdown+0x54>)
 8010e36:	480f      	ldr	r0, [pc, #60]	; (8010e74 <netconn_close_shutdown+0x58>)
 8010e38:	f00d fa04 	bl	801e244 <iprintf>
 8010e3c:	f06f 030f 	mvn.w	r3, #15
 8010e40:	e010      	b.n	8010e64 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8010e46:	78fb      	ldrb	r3, [r7, #3]
 8010e48:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8010e4a:	2329      	movs	r3, #41	; 0x29
 8010e4c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8010e4e:	f107 030c 	add.w	r3, r7, #12
 8010e52:	4619      	mov	r1, r3
 8010e54:	4808      	ldr	r0, [pc, #32]	; (8010e78 <netconn_close_shutdown+0x5c>)
 8010e56:	f7ff fb51 	bl	80104fc <netconn_apimsg>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8010e60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8010e64:	4618      	mov	r0, r3
 8010e66:	3730      	adds	r7, #48	; 0x30
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}
 8010e6c:	0801f5e4 	.word	0x0801f5e4
 8010e70:	0801f920 	.word	0x0801f920
 8010e74:	0801f63c 	.word	0x0801f63c
 8010e78:	08012561 	.word	0x08012561

08010e7c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8010e84:	2103      	movs	r1, #3
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f7ff ffc8 	bl	8010e1c <netconn_close_shutdown>
 8010e8c:	4603      	mov	r3, r0
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3708      	adds	r7, #8
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}

08010e96 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8010e96:	b580      	push	{r7, lr}
 8010e98:	b084      	sub	sp, #16
 8010e9a:	af00      	add	r7, sp, #0
 8010e9c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d101      	bne.n	8010ea8 <netconn_err+0x12>
    return ERR_OK;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	e00d      	b.n	8010ec4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8010ea8:	f00c ffbc 	bl	801de24 <sys_arch_protect>
 8010eac:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	7a1b      	ldrb	r3, [r3, #8]
 8010eb2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8010eba:	68f8      	ldr	r0, [r7, #12]
 8010ebc:	f00c ffc0 	bl	801de40 <sys_arch_unprotect>
  return err;
 8010ec0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	3710      	adds	r7, #16
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8010ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010eda:	f113 0f0d 	cmn.w	r3, #13
 8010ede:	d009      	beq.n	8010ef4 <lwip_netconn_err_to_msg+0x28>
 8010ee0:	f113 0f0d 	cmn.w	r3, #13
 8010ee4:	dc0c      	bgt.n	8010f00 <lwip_netconn_err_to_msg+0x34>
 8010ee6:	f113 0f0f 	cmn.w	r3, #15
 8010eea:	d007      	beq.n	8010efc <lwip_netconn_err_to_msg+0x30>
 8010eec:	f113 0f0e 	cmn.w	r3, #14
 8010ef0:	d002      	beq.n	8010ef8 <lwip_netconn_err_to_msg+0x2c>
 8010ef2:	e005      	b.n	8010f00 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8010ef4:	4b0a      	ldr	r3, [pc, #40]	; (8010f20 <lwip_netconn_err_to_msg+0x54>)
 8010ef6:	e00e      	b.n	8010f16 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8010ef8:	4b0a      	ldr	r3, [pc, #40]	; (8010f24 <lwip_netconn_err_to_msg+0x58>)
 8010efa:	e00c      	b.n	8010f16 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8010efc:	4b0a      	ldr	r3, [pc, #40]	; (8010f28 <lwip_netconn_err_to_msg+0x5c>)
 8010efe:	e00a      	b.n	8010f16 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8010f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d005      	beq.n	8010f14 <lwip_netconn_err_to_msg+0x48>
 8010f08:	4b08      	ldr	r3, [pc, #32]	; (8010f2c <lwip_netconn_err_to_msg+0x60>)
 8010f0a:	227d      	movs	r2, #125	; 0x7d
 8010f0c:	4908      	ldr	r1, [pc, #32]	; (8010f30 <lwip_netconn_err_to_msg+0x64>)
 8010f0e:	4809      	ldr	r0, [pc, #36]	; (8010f34 <lwip_netconn_err_to_msg+0x68>)
 8010f10:	f00d f998 	bl	801e244 <iprintf>
      return NULL;
 8010f14:	2300      	movs	r3, #0
  }
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3708      	adds	r7, #8
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop
 8010f20:	08022b64 	.word	0x08022b64
 8010f24:	08022b65 	.word	0x08022b65
 8010f28:	08022b66 	.word	0x08022b66
 8010f2c:	0801f93c 	.word	0x0801f93c
 8010f30:	0801f970 	.word	0x0801f970
 8010f34:	0801f980 	.word	0x0801f980

08010f38 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d105      	bne.n	8010f54 <lwip_netconn_is_err_msg+0x1c>
 8010f48:	4b12      	ldr	r3, [pc, #72]	; (8010f94 <lwip_netconn_is_err_msg+0x5c>)
 8010f4a:	2285      	movs	r2, #133	; 0x85
 8010f4c:	4912      	ldr	r1, [pc, #72]	; (8010f98 <lwip_netconn_is_err_msg+0x60>)
 8010f4e:	4813      	ldr	r0, [pc, #76]	; (8010f9c <lwip_netconn_is_err_msg+0x64>)
 8010f50:	f00d f978 	bl	801e244 <iprintf>

  if (msg == &netconn_aborted) {
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	4a12      	ldr	r2, [pc, #72]	; (8010fa0 <lwip_netconn_is_err_msg+0x68>)
 8010f58:	4293      	cmp	r3, r2
 8010f5a:	d104      	bne.n	8010f66 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	22f3      	movs	r2, #243	; 0xf3
 8010f60:	701a      	strb	r2, [r3, #0]
    return 1;
 8010f62:	2301      	movs	r3, #1
 8010f64:	e012      	b.n	8010f8c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	4a0e      	ldr	r2, [pc, #56]	; (8010fa4 <lwip_netconn_is_err_msg+0x6c>)
 8010f6a:	4293      	cmp	r3, r2
 8010f6c:	d104      	bne.n	8010f78 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	22f2      	movs	r2, #242	; 0xf2
 8010f72:	701a      	strb	r2, [r3, #0]
    return 1;
 8010f74:	2301      	movs	r3, #1
 8010f76:	e009      	b.n	8010f8c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	4a0b      	ldr	r2, [pc, #44]	; (8010fa8 <lwip_netconn_is_err_msg+0x70>)
 8010f7c:	4293      	cmp	r3, r2
 8010f7e:	d104      	bne.n	8010f8a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	22f1      	movs	r2, #241	; 0xf1
 8010f84:	701a      	strb	r2, [r3, #0]
    return 1;
 8010f86:	2301      	movs	r3, #1
 8010f88:	e000      	b.n	8010f8c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8010f8a:	2300      	movs	r3, #0
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	3708      	adds	r7, #8
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}
 8010f94:	0801f93c 	.word	0x0801f93c
 8010f98:	0801f9a8 	.word	0x0801f9a8
 8010f9c:	0801f980 	.word	0x0801f980
 8010fa0:	08022b64 	.word	0x08022b64
 8010fa4:	08022b65 	.word	0x08022b65
 8010fa8:	08022b66 	.word	0x08022b66

08010fac <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b088      	sub	sp, #32
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	60b9      	str	r1, [r7, #8]
 8010fb6:	607a      	str	r2, [r7, #4]
 8010fb8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d105      	bne.n	8010fcc <recv_udp+0x20>
 8010fc0:	4b34      	ldr	r3, [pc, #208]	; (8011094 <recv_udp+0xe8>)
 8010fc2:	22e5      	movs	r2, #229	; 0xe5
 8010fc4:	4934      	ldr	r1, [pc, #208]	; (8011098 <recv_udp+0xec>)
 8010fc6:	4835      	ldr	r0, [pc, #212]	; (801109c <recv_udp+0xf0>)
 8010fc8:	f00d f93c 	bl	801e244 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d105      	bne.n	8010fde <recv_udp+0x32>
 8010fd2:	4b30      	ldr	r3, [pc, #192]	; (8011094 <recv_udp+0xe8>)
 8010fd4:	22e6      	movs	r2, #230	; 0xe6
 8010fd6:	4932      	ldr	r1, [pc, #200]	; (80110a0 <recv_udp+0xf4>)
 8010fd8:	4830      	ldr	r0, [pc, #192]	; (801109c <recv_udp+0xf0>)
 8010fda:	f00d f933 	bl	801e244 <iprintf>
  conn = (struct netconn *)arg;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8010fe2:	69fb      	ldr	r3, [r7, #28]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d103      	bne.n	8010ff0 <recv_udp+0x44>
    pbuf_free(p);
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f003 fac7 	bl	801457c <pbuf_free>
    return;
 8010fee:	e04d      	b.n	801108c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8010ff0:	69fb      	ldr	r3, [r7, #28]
 8010ff2:	685b      	ldr	r3, [r3, #4]
 8010ff4:	68ba      	ldr	r2, [r7, #8]
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d005      	beq.n	8011006 <recv_udp+0x5a>
 8010ffa:	4b26      	ldr	r3, [pc, #152]	; (8011094 <recv_udp+0xe8>)
 8010ffc:	22ee      	movs	r2, #238	; 0xee
 8010ffe:	4929      	ldr	r1, [pc, #164]	; (80110a4 <recv_udp+0xf8>)
 8011000:	4826      	ldr	r0, [pc, #152]	; (801109c <recv_udp+0xf0>)
 8011002:	f00d f91f 	bl	801e244 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011006:	69fb      	ldr	r3, [r7, #28]
 8011008:	3310      	adds	r3, #16
 801100a:	4618      	mov	r0, r3
 801100c:	f00c fe00 	bl	801dc10 <sys_mbox_valid>
 8011010:	4603      	mov	r3, r0
 8011012:	2b00      	cmp	r3, #0
 8011014:	d103      	bne.n	801101e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f003 fab0 	bl	801457c <pbuf_free>
    return;
 801101c:	e036      	b.n	801108c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801101e:	2006      	movs	r0, #6
 8011020:	f002 fb8e 	bl	8013740 <memp_malloc>
 8011024:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8011026:	69bb      	ldr	r3, [r7, #24]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d103      	bne.n	8011034 <recv_udp+0x88>
    pbuf_free(p);
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f003 faa5 	bl	801457c <pbuf_free>
    return;
 8011032:	e02b      	b.n	801108c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8011034:	69bb      	ldr	r3, [r7, #24]
 8011036:	687a      	ldr	r2, [r7, #4]
 8011038:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801103a:	69bb      	ldr	r3, [r7, #24]
 801103c:	687a      	ldr	r2, [r7, #4]
 801103e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d002      	beq.n	801104c <recv_udp+0xa0>
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	e000      	b.n	801104e <recv_udp+0xa2>
 801104c:	2300      	movs	r3, #0
 801104e:	69ba      	ldr	r2, [r7, #24]
 8011050:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011052:	69bb      	ldr	r3, [r7, #24]
 8011054:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8011056:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	891b      	ldrh	r3, [r3, #8]
 801105c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 801105e:	69fb      	ldr	r3, [r7, #28]
 8011060:	3310      	adds	r3, #16
 8011062:	69b9      	ldr	r1, [r7, #24]
 8011064:	4618      	mov	r0, r3
 8011066:	f00c fd71 	bl	801db4c <sys_mbox_trypost>
 801106a:	4603      	mov	r3, r0
 801106c:	2b00      	cmp	r3, #0
 801106e:	d003      	beq.n	8011078 <recv_udp+0xcc>
    netbuf_delete(buf);
 8011070:	69b8      	ldr	r0, [r7, #24]
 8011072:	f001 fb01 	bl	8012678 <netbuf_delete>
    return;
 8011076:	e009      	b.n	801108c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011078:	69fb      	ldr	r3, [r7, #28]
 801107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801107c:	2b00      	cmp	r3, #0
 801107e:	d005      	beq.n	801108c <recv_udp+0xe0>
 8011080:	69fb      	ldr	r3, [r7, #28]
 8011082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011084:	8afa      	ldrh	r2, [r7, #22]
 8011086:	2100      	movs	r1, #0
 8011088:	69f8      	ldr	r0, [r7, #28]
 801108a:	4798      	blx	r3
  }
}
 801108c:	3720      	adds	r7, #32
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}
 8011092:	bf00      	nop
 8011094:	0801f93c 	.word	0x0801f93c
 8011098:	0801f9b4 	.word	0x0801f9b4
 801109c:	0801f980 	.word	0x0801f980
 80110a0:	0801f9d8 	.word	0x0801f9d8
 80110a4:	0801f9f8 	.word	0x0801f9f8

080110a8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b088      	sub	sp, #32
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	60f8      	str	r0, [r7, #12]
 80110b0:	60b9      	str	r1, [r7, #8]
 80110b2:	607a      	str	r2, [r7, #4]
 80110b4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d106      	bne.n	80110ca <recv_tcp+0x22>
 80110bc:	4b36      	ldr	r3, [pc, #216]	; (8011198 <recv_tcp+0xf0>)
 80110be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80110c2:	4936      	ldr	r1, [pc, #216]	; (801119c <recv_tcp+0xf4>)
 80110c4:	4836      	ldr	r0, [pc, #216]	; (80111a0 <recv_tcp+0xf8>)
 80110c6:	f00d f8bd 	bl	801e244 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d106      	bne.n	80110de <recv_tcp+0x36>
 80110d0:	4b31      	ldr	r3, [pc, #196]	; (8011198 <recv_tcp+0xf0>)
 80110d2:	f240 122d 	movw	r2, #301	; 0x12d
 80110d6:	4933      	ldr	r1, [pc, #204]	; (80111a4 <recv_tcp+0xfc>)
 80110d8:	4831      	ldr	r0, [pc, #196]	; (80111a0 <recv_tcp+0xf8>)
 80110da:	f00d f8b3 	bl	801e244 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80110de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d006      	beq.n	80110f4 <recv_tcp+0x4c>
 80110e6:	4b2c      	ldr	r3, [pc, #176]	; (8011198 <recv_tcp+0xf0>)
 80110e8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80110ec:	492e      	ldr	r1, [pc, #184]	; (80111a8 <recv_tcp+0x100>)
 80110ee:	482c      	ldr	r0, [pc, #176]	; (80111a0 <recv_tcp+0xf8>)
 80110f0:	f00d f8a8 	bl	801e244 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d102      	bne.n	8011104 <recv_tcp+0x5c>
    return ERR_VAL;
 80110fe:	f06f 0305 	mvn.w	r3, #5
 8011102:	e045      	b.n	8011190 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8011104:	697b      	ldr	r3, [r7, #20]
 8011106:	685b      	ldr	r3, [r3, #4]
 8011108:	68ba      	ldr	r2, [r7, #8]
 801110a:	429a      	cmp	r2, r3
 801110c:	d006      	beq.n	801111c <recv_tcp+0x74>
 801110e:	4b22      	ldr	r3, [pc, #136]	; (8011198 <recv_tcp+0xf0>)
 8011110:	f240 1235 	movw	r2, #309	; 0x135
 8011114:	4925      	ldr	r1, [pc, #148]	; (80111ac <recv_tcp+0x104>)
 8011116:	4822      	ldr	r0, [pc, #136]	; (80111a0 <recv_tcp+0xf8>)
 8011118:	f00d f894 	bl	801e244 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	3310      	adds	r3, #16
 8011120:	4618      	mov	r0, r3
 8011122:	f00c fd75 	bl	801dc10 <sys_mbox_valid>
 8011126:	4603      	mov	r3, r0
 8011128:	2b00      	cmp	r3, #0
 801112a:	d10d      	bne.n	8011148 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d008      	beq.n	8011144 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	891b      	ldrh	r3, [r3, #8]
 8011136:	4619      	mov	r1, r3
 8011138:	68b8      	ldr	r0, [r7, #8]
 801113a:	f004 f9d7 	bl	80154ec <tcp_recved>
      pbuf_free(p);
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f003 fa1c 	bl	801457c <pbuf_free>
    }
    return ERR_OK;
 8011144:	2300      	movs	r3, #0
 8011146:	e023      	b.n	8011190 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d005      	beq.n	801115a <recv_tcp+0xb2>
    msg = p;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	891b      	ldrh	r3, [r3, #8]
 8011156:	83fb      	strh	r3, [r7, #30]
 8011158:	e003      	b.n	8011162 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 801115a:	4b15      	ldr	r3, [pc, #84]	; (80111b0 <recv_tcp+0x108>)
 801115c:	61bb      	str	r3, [r7, #24]
    len = 0;
 801115e:	2300      	movs	r3, #0
 8011160:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	3310      	adds	r3, #16
 8011166:	69b9      	ldr	r1, [r7, #24]
 8011168:	4618      	mov	r0, r3
 801116a:	f00c fcef 	bl	801db4c <sys_mbox_trypost>
 801116e:	4603      	mov	r3, r0
 8011170:	2b00      	cmp	r3, #0
 8011172:	d002      	beq.n	801117a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8011174:	f04f 33ff 	mov.w	r3, #4294967295
 8011178:	e00a      	b.n	8011190 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801117e:	2b00      	cmp	r3, #0
 8011180:	d005      	beq.n	801118e <recv_tcp+0xe6>
 8011182:	697b      	ldr	r3, [r7, #20]
 8011184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011186:	8bfa      	ldrh	r2, [r7, #30]
 8011188:	2100      	movs	r1, #0
 801118a:	6978      	ldr	r0, [r7, #20]
 801118c:	4798      	blx	r3
  }

  return ERR_OK;
 801118e:	2300      	movs	r3, #0
}
 8011190:	4618      	mov	r0, r3
 8011192:	3720      	adds	r7, #32
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}
 8011198:	0801f93c 	.word	0x0801f93c
 801119c:	0801fa18 	.word	0x0801fa18
 80111a0:	0801f980 	.word	0x0801f980
 80111a4:	0801fa3c 	.word	0x0801fa3c
 80111a8:	0801fa5c 	.word	0x0801fa5c
 80111ac:	0801fa74 	.word	0x0801fa74
 80111b0:	08022b66 	.word	0x08022b66

080111b4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b084      	sub	sp, #16
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
 80111bc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d106      	bne.n	80111d6 <poll_tcp+0x22>
 80111c8:	4b29      	ldr	r3, [pc, #164]	; (8011270 <poll_tcp+0xbc>)
 80111ca:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80111ce:	4929      	ldr	r1, [pc, #164]	; (8011274 <poll_tcp+0xc0>)
 80111d0:	4829      	ldr	r0, [pc, #164]	; (8011278 <poll_tcp+0xc4>)
 80111d2:	f00d f837 	bl	801e244 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	785b      	ldrb	r3, [r3, #1]
 80111da:	2b01      	cmp	r3, #1
 80111dc:	d104      	bne.n	80111e8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80111de:	2101      	movs	r1, #1
 80111e0:	68f8      	ldr	r0, [r7, #12]
 80111e2:	f000 ff65 	bl	80120b0 <lwip_netconn_do_writemore>
 80111e6:	e016      	b.n	8011216 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	785b      	ldrb	r3, [r3, #1]
 80111ec:	2b04      	cmp	r3, #4
 80111ee:	d112      	bne.n	8011216 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	6a1b      	ldr	r3, [r3, #32]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d00a      	beq.n	801120e <poll_tcp+0x5a>
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	6a1b      	ldr	r3, [r3, #32]
 80111fc:	7a5b      	ldrb	r3, [r3, #9]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d005      	beq.n	801120e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	6a1b      	ldr	r3, [r3, #32]
 8011206:	7a5a      	ldrb	r2, [r3, #9]
 8011208:	3a01      	subs	r2, #1
 801120a:	b2d2      	uxtb	r2, r2
 801120c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801120e:	2101      	movs	r1, #1
 8011210:	68f8      	ldr	r0, [r7, #12]
 8011212:	f000 fbf7 	bl	8011a04 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	7f1b      	ldrb	r3, [r3, #28]
 801121a:	f003 0310 	and.w	r3, r3, #16
 801121e:	2b00      	cmp	r3, #0
 8011220:	d021      	beq.n	8011266 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d01d      	beq.n	8011266 <poll_tcp+0xb2>
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011232:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8011236:	d316      	bcc.n	8011266 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	685b      	ldr	r3, [r3, #4]
 801123c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011240:	2b04      	cmp	r3, #4
 8011242:	d810      	bhi.n	8011266 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	7f1b      	ldrb	r3, [r3, #28]
 8011248:	f023 0310 	bic.w	r3, r3, #16
 801124c:	b2da      	uxtb	r2, r3
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011256:	2b00      	cmp	r3, #0
 8011258:	d005      	beq.n	8011266 <poll_tcp+0xb2>
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801125e:	2200      	movs	r2, #0
 8011260:	2102      	movs	r1, #2
 8011262:	68f8      	ldr	r0, [r7, #12]
 8011264:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011266:	2300      	movs	r3, #0
}
 8011268:	4618      	mov	r0, r3
 801126a:	3710      	adds	r7, #16
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}
 8011270:	0801f93c 	.word	0x0801f93c
 8011274:	0801fa94 	.word	0x0801fa94
 8011278:	0801f980 	.word	0x0801f980

0801127c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b086      	sub	sp, #24
 8011280:	af00      	add	r7, sp, #0
 8011282:	60f8      	str	r0, [r7, #12]
 8011284:	60b9      	str	r1, [r7, #8]
 8011286:	4613      	mov	r3, r2
 8011288:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d106      	bne.n	80112a2 <sent_tcp+0x26>
 8011294:	4b20      	ldr	r3, [pc, #128]	; (8011318 <sent_tcp+0x9c>)
 8011296:	f240 1293 	movw	r2, #403	; 0x193
 801129a:	4920      	ldr	r1, [pc, #128]	; (801131c <sent_tcp+0xa0>)
 801129c:	4820      	ldr	r0, [pc, #128]	; (8011320 <sent_tcp+0xa4>)
 801129e:	f00c ffd1 	bl	801e244 <iprintf>

  if (conn) {
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d032      	beq.n	801130e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80112a8:	697b      	ldr	r3, [r7, #20]
 80112aa:	785b      	ldrb	r3, [r3, #1]
 80112ac:	2b01      	cmp	r3, #1
 80112ae:	d104      	bne.n	80112ba <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80112b0:	2101      	movs	r1, #1
 80112b2:	6978      	ldr	r0, [r7, #20]
 80112b4:	f000 fefc 	bl	80120b0 <lwip_netconn_do_writemore>
 80112b8:	e007      	b.n	80112ca <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80112ba:	697b      	ldr	r3, [r7, #20]
 80112bc:	785b      	ldrb	r3, [r3, #1]
 80112be:	2b04      	cmp	r3, #4
 80112c0:	d103      	bne.n	80112ca <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80112c2:	2101      	movs	r1, #1
 80112c4:	6978      	ldr	r0, [r7, #20]
 80112c6:	f000 fb9d 	bl	8011a04 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	685b      	ldr	r3, [r3, #4]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d01d      	beq.n	801130e <sent_tcp+0x92>
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80112da:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80112de:	d316      	bcc.n	801130e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80112e8:	2b04      	cmp	r3, #4
 80112ea:	d810      	bhi.n	801130e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	7f1b      	ldrb	r3, [r3, #28]
 80112f0:	f023 0310 	bic.w	r3, r3, #16
 80112f4:	b2da      	uxtb	r2, r3
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80112fa:	697b      	ldr	r3, [r7, #20]
 80112fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d005      	beq.n	801130e <sent_tcp+0x92>
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011306:	88fa      	ldrh	r2, [r7, #6]
 8011308:	2102      	movs	r1, #2
 801130a:	6978      	ldr	r0, [r7, #20]
 801130c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801130e:	2300      	movs	r3, #0
}
 8011310:	4618      	mov	r0, r3
 8011312:	3718      	adds	r7, #24
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}
 8011318:	0801f93c 	.word	0x0801f93c
 801131c:	0801fa94 	.word	0x0801fa94
 8011320:	0801f980 	.word	0x0801f980

08011324 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b088      	sub	sp, #32
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
 801132c:	460b      	mov	r3, r1
 801132e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011334:	69fb      	ldr	r3, [r7, #28]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d106      	bne.n	8011348 <err_tcp+0x24>
 801133a:	4b5f      	ldr	r3, [pc, #380]	; (80114b8 <err_tcp+0x194>)
 801133c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011340:	495e      	ldr	r1, [pc, #376]	; (80114bc <err_tcp+0x198>)
 8011342:	485f      	ldr	r0, [pc, #380]	; (80114c0 <err_tcp+0x19c>)
 8011344:	f00c ff7e 	bl	801e244 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8011348:	f00c fd6c 	bl	801de24 <sys_arch_protect>
 801134c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 801134e:	69fb      	ldr	r3, [r7, #28]
 8011350:	2200      	movs	r2, #0
 8011352:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8011354:	69fb      	ldr	r3, [r7, #28]
 8011356:	78fa      	ldrb	r2, [r7, #3]
 8011358:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 801135a:	69fb      	ldr	r3, [r7, #28]
 801135c:	7f1b      	ldrb	r3, [r3, #28]
 801135e:	f043 0301 	orr.w	r3, r3, #1
 8011362:	b2da      	uxtb	r2, r3
 8011364:	69fb      	ldr	r3, [r7, #28]
 8011366:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8011368:	69fb      	ldr	r3, [r7, #28]
 801136a:	785b      	ldrb	r3, [r3, #1]
 801136c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 801136e:	69fb      	ldr	r3, [r7, #28]
 8011370:	2200      	movs	r2, #0
 8011372:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8011374:	69b8      	ldr	r0, [r7, #24]
 8011376:	f00c fd63 	bl	801de40 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801137a:	69fb      	ldr	r3, [r7, #28]
 801137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801137e:	2b00      	cmp	r3, #0
 8011380:	d005      	beq.n	801138e <err_tcp+0x6a>
 8011382:	69fb      	ldr	r3, [r7, #28]
 8011384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011386:	2200      	movs	r2, #0
 8011388:	2104      	movs	r1, #4
 801138a:	69f8      	ldr	r0, [r7, #28]
 801138c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801138e:	69fb      	ldr	r3, [r7, #28]
 8011390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011392:	2b00      	cmp	r3, #0
 8011394:	d005      	beq.n	80113a2 <err_tcp+0x7e>
 8011396:	69fb      	ldr	r3, [r7, #28]
 8011398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801139a:	2200      	movs	r2, #0
 801139c:	2100      	movs	r1, #0
 801139e:	69f8      	ldr	r0, [r7, #28]
 80113a0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80113a2:	69fb      	ldr	r3, [r7, #28]
 80113a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d005      	beq.n	80113b6 <err_tcp+0x92>
 80113aa:	69fb      	ldr	r3, [r7, #28]
 80113ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ae:	2200      	movs	r2, #0
 80113b0:	2102      	movs	r1, #2
 80113b2:	69f8      	ldr	r0, [r7, #28]
 80113b4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80113b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7ff fd86 	bl	8010ecc <lwip_netconn_err_to_msg>
 80113c0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80113c2:	69fb      	ldr	r3, [r7, #28]
 80113c4:	3310      	adds	r3, #16
 80113c6:	4618      	mov	r0, r3
 80113c8:	f00c fc22 	bl	801dc10 <sys_mbox_valid>
 80113cc:	4603      	mov	r3, r0
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d005      	beq.n	80113de <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80113d2:	69fb      	ldr	r3, [r7, #28]
 80113d4:	3310      	adds	r3, #16
 80113d6:	6939      	ldr	r1, [r7, #16]
 80113d8:	4618      	mov	r0, r3
 80113da:	f00c fbb7 	bl	801db4c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80113de:	69fb      	ldr	r3, [r7, #28]
 80113e0:	3314      	adds	r3, #20
 80113e2:	4618      	mov	r0, r3
 80113e4:	f00c fc14 	bl	801dc10 <sys_mbox_valid>
 80113e8:	4603      	mov	r3, r0
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d005      	beq.n	80113fa <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80113ee:	69fb      	ldr	r3, [r7, #28]
 80113f0:	3314      	adds	r3, #20
 80113f2:	6939      	ldr	r1, [r7, #16]
 80113f4:	4618      	mov	r0, r3
 80113f6:	f00c fba9 	bl	801db4c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80113fa:	7dfb      	ldrb	r3, [r7, #23]
 80113fc:	2b01      	cmp	r3, #1
 80113fe:	d005      	beq.n	801140c <err_tcp+0xe8>
 8011400:	7dfb      	ldrb	r3, [r7, #23]
 8011402:	2b04      	cmp	r3, #4
 8011404:	d002      	beq.n	801140c <err_tcp+0xe8>
 8011406:	7dfb      	ldrb	r3, [r7, #23]
 8011408:	2b03      	cmp	r3, #3
 801140a:	d143      	bne.n	8011494 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 801140c:	69fb      	ldr	r3, [r7, #28]
 801140e:	7f1b      	ldrb	r3, [r3, #28]
 8011410:	f003 0304 	and.w	r3, r3, #4
 8011414:	2b00      	cmp	r3, #0
 8011416:	bf14      	ite	ne
 8011418:	2301      	movne	r3, #1
 801141a:	2300      	moveq	r3, #0
 801141c:	b2db      	uxtb	r3, r3
 801141e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8011420:	69fb      	ldr	r3, [r7, #28]
 8011422:	7f1b      	ldrb	r3, [r3, #28]
 8011424:	f023 0304 	bic.w	r3, r3, #4
 8011428:	b2da      	uxtb	r2, r3
 801142a:	69fb      	ldr	r3, [r7, #28]
 801142c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d13b      	bne.n	80114ac <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011434:	69fb      	ldr	r3, [r7, #28]
 8011436:	6a1b      	ldr	r3, [r3, #32]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d106      	bne.n	801144a <err_tcp+0x126>
 801143c:	4b1e      	ldr	r3, [pc, #120]	; (80114b8 <err_tcp+0x194>)
 801143e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011442:	4920      	ldr	r1, [pc, #128]	; (80114c4 <err_tcp+0x1a0>)
 8011444:	481e      	ldr	r0, [pc, #120]	; (80114c0 <err_tcp+0x19c>)
 8011446:	f00c fefd 	bl	801e244 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 801144a:	7dfb      	ldrb	r3, [r7, #23]
 801144c:	2b04      	cmp	r3, #4
 801144e:	d104      	bne.n	801145a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8011450:	69fb      	ldr	r3, [r7, #28]
 8011452:	6a1b      	ldr	r3, [r3, #32]
 8011454:	2200      	movs	r2, #0
 8011456:	711a      	strb	r2, [r3, #4]
 8011458:	e003      	b.n	8011462 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 801145a:	69fb      	ldr	r3, [r7, #28]
 801145c:	6a1b      	ldr	r3, [r3, #32]
 801145e:	78fa      	ldrb	r2, [r7, #3]
 8011460:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011462:	69fb      	ldr	r3, [r7, #28]
 8011464:	6a1b      	ldr	r3, [r3, #32]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	330c      	adds	r3, #12
 801146a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 801146c:	68b8      	ldr	r0, [r7, #8]
 801146e:	f00c fc5d 	bl	801dd2c <sys_sem_valid>
 8011472:	4603      	mov	r3, r0
 8011474:	2b00      	cmp	r3, #0
 8011476:	d106      	bne.n	8011486 <err_tcp+0x162>
 8011478:	4b0f      	ldr	r3, [pc, #60]	; (80114b8 <err_tcp+0x194>)
 801147a:	f240 12ef 	movw	r2, #495	; 0x1ef
 801147e:	4912      	ldr	r1, [pc, #72]	; (80114c8 <err_tcp+0x1a4>)
 8011480:	480f      	ldr	r0, [pc, #60]	; (80114c0 <err_tcp+0x19c>)
 8011482:	f00c fedf 	bl	801e244 <iprintf>
      conn->current_msg = NULL;
 8011486:	69fb      	ldr	r3, [r7, #28]
 8011488:	2200      	movs	r2, #0
 801148a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 801148c:	68b8      	ldr	r0, [r7, #8]
 801148e:	f00c fc33 	bl	801dcf8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8011492:	e00b      	b.n	80114ac <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8011494:	69fb      	ldr	r3, [r7, #28]
 8011496:	6a1b      	ldr	r3, [r3, #32]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d008      	beq.n	80114ae <err_tcp+0x18a>
 801149c:	4b06      	ldr	r3, [pc, #24]	; (80114b8 <err_tcp+0x194>)
 801149e:	f240 12f7 	movw	r2, #503	; 0x1f7
 80114a2:	490a      	ldr	r1, [pc, #40]	; (80114cc <err_tcp+0x1a8>)
 80114a4:	4806      	ldr	r0, [pc, #24]	; (80114c0 <err_tcp+0x19c>)
 80114a6:	f00c fecd 	bl	801e244 <iprintf>
  }
}
 80114aa:	e000      	b.n	80114ae <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80114ac:	bf00      	nop
}
 80114ae:	bf00      	nop
 80114b0:	3720      	adds	r7, #32
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
 80114b6:	bf00      	nop
 80114b8:	0801f93c 	.word	0x0801f93c
 80114bc:	0801fa94 	.word	0x0801fa94
 80114c0:	0801f980 	.word	0x0801f980
 80114c4:	0801faa4 	.word	0x0801faa4
 80114c8:	0801fac0 	.word	0x0801fac0
 80114cc:	0801fadc 	.word	0x0801fadc

080114d0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b084      	sub	sp, #16
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	685b      	ldr	r3, [r3, #4]
 80114dc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80114de:	6879      	ldr	r1, [r7, #4]
 80114e0:	68f8      	ldr	r0, [r7, #12]
 80114e2:	f004 fec9 	bl	8016278 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80114e6:	490a      	ldr	r1, [pc, #40]	; (8011510 <setup_tcp+0x40>)
 80114e8:	68f8      	ldr	r0, [r7, #12]
 80114ea:	f004 fed7 	bl	801629c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80114ee:	4909      	ldr	r1, [pc, #36]	; (8011514 <setup_tcp+0x44>)
 80114f0:	68f8      	ldr	r0, [r7, #12]
 80114f2:	f004 fef5 	bl	80162e0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80114f6:	2202      	movs	r2, #2
 80114f8:	4907      	ldr	r1, [pc, #28]	; (8011518 <setup_tcp+0x48>)
 80114fa:	68f8      	ldr	r0, [r7, #12]
 80114fc:	f004 ff4c 	bl	8016398 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8011500:	4906      	ldr	r1, [pc, #24]	; (801151c <setup_tcp+0x4c>)
 8011502:	68f8      	ldr	r0, [r7, #12]
 8011504:	f004 ff0e 	bl	8016324 <tcp_err>
}
 8011508:	bf00      	nop
 801150a:	3710      	adds	r7, #16
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}
 8011510:	080110a9 	.word	0x080110a9
 8011514:	0801127d 	.word	0x0801127d
 8011518:	080111b5 	.word	0x080111b5
 801151c:	08011325 	.word	0x08011325

08011520 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8011520:	b590      	push	{r4, r7, lr}
 8011522:	b089      	sub	sp, #36	; 0x24
 8011524:	af00      	add	r7, sp, #0
 8011526:	60f8      	str	r0, [r7, #12]
 8011528:	60b9      	str	r1, [r7, #8]
 801152a:	4613      	mov	r3, r2
 801152c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8011532:	69fb      	ldr	r3, [r7, #28]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d102      	bne.n	801153e <accept_function+0x1e>
    return ERR_VAL;
 8011538:	f06f 0305 	mvn.w	r3, #5
 801153c:	e0a1      	b.n	8011682 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801153e:	69fb      	ldr	r3, [r7, #28]
 8011540:	3314      	adds	r3, #20
 8011542:	4618      	mov	r0, r3
 8011544:	f00c fb64 	bl	801dc10 <sys_mbox_valid>
 8011548:	4603      	mov	r3, r0
 801154a:	2b00      	cmp	r3, #0
 801154c:	d102      	bne.n	8011554 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 801154e:	f06f 0305 	mvn.w	r3, #5
 8011552:	e096      	b.n	8011682 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d11b      	bne.n	8011592 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 801155a:	69fb      	ldr	r3, [r7, #28]
 801155c:	f103 0414 	add.w	r4, r3, #20
 8011560:	f06f 000c 	mvn.w	r0, #12
 8011564:	f7ff fcb2 	bl	8010ecc <lwip_netconn_err_to_msg>
 8011568:	4603      	mov	r3, r0
 801156a:	4619      	mov	r1, r3
 801156c:	4620      	mov	r0, r4
 801156e:	f00c faed 	bl	801db4c <sys_mbox_trypost>
 8011572:	4603      	mov	r3, r0
 8011574:	2b00      	cmp	r3, #0
 8011576:	d109      	bne.n	801158c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011578:	69fb      	ldr	r3, [r7, #28]
 801157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801157c:	2b00      	cmp	r3, #0
 801157e:	d005      	beq.n	801158c <accept_function+0x6c>
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011584:	2200      	movs	r2, #0
 8011586:	2100      	movs	r1, #0
 8011588:	69f8      	ldr	r0, [r7, #28]
 801158a:	4798      	blx	r3
    }
    return ERR_VAL;
 801158c:	f06f 0305 	mvn.w	r3, #5
 8011590:	e077      	b.n	8011682 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8011592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d006      	beq.n	80115a8 <accept_function+0x88>
 801159a:	4b3c      	ldr	r3, [pc, #240]	; (801168c <accept_function+0x16c>)
 801159c:	f240 222a 	movw	r2, #554	; 0x22a
 80115a0:	493b      	ldr	r1, [pc, #236]	; (8011690 <accept_function+0x170>)
 80115a2:	483c      	ldr	r0, [pc, #240]	; (8011694 <accept_function+0x174>)
 80115a4:	f00c fe4e 	bl	801e244 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80115a8:	69fb      	ldr	r3, [r7, #28]
 80115aa:	781a      	ldrb	r2, [r3, #0]
 80115ac:	69fb      	ldr	r3, [r7, #28]
 80115ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115b0:	4619      	mov	r1, r3
 80115b2:	4610      	mov	r0, r2
 80115b4:	f000 f8f0 	bl	8011798 <netconn_alloc>
 80115b8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80115ba:	69bb      	ldr	r3, [r7, #24]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d11b      	bne.n	80115f8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80115c0:	69fb      	ldr	r3, [r7, #28]
 80115c2:	f103 0414 	add.w	r4, r3, #20
 80115c6:	f06f 000c 	mvn.w	r0, #12
 80115ca:	f7ff fc7f 	bl	8010ecc <lwip_netconn_err_to_msg>
 80115ce:	4603      	mov	r3, r0
 80115d0:	4619      	mov	r1, r3
 80115d2:	4620      	mov	r0, r4
 80115d4:	f00c faba 	bl	801db4c <sys_mbox_trypost>
 80115d8:	4603      	mov	r3, r0
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d109      	bne.n	80115f2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80115de:	69fb      	ldr	r3, [r7, #28]
 80115e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d005      	beq.n	80115f2 <accept_function+0xd2>
 80115e6:	69fb      	ldr	r3, [r7, #28]
 80115e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ea:	2200      	movs	r2, #0
 80115ec:	2100      	movs	r1, #0
 80115ee:	69f8      	ldr	r0, [r7, #28]
 80115f0:	4798      	blx	r3
    }
    return ERR_MEM;
 80115f2:	f04f 33ff 	mov.w	r3, #4294967295
 80115f6:	e044      	b.n	8011682 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80115f8:	69bb      	ldr	r3, [r7, #24]
 80115fa:	68ba      	ldr	r2, [r7, #8]
 80115fc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80115fe:	69b8      	ldr	r0, [r7, #24]
 8011600:	f7ff ff66 	bl	80114d0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8011604:	69fb      	ldr	r3, [r7, #28]
 8011606:	3314      	adds	r3, #20
 8011608:	69b9      	ldr	r1, [r7, #24]
 801160a:	4618      	mov	r0, r3
 801160c:	f00c fa9e 	bl	801db4c <sys_mbox_trypost>
 8011610:	4603      	mov	r3, r0
 8011612:	2b00      	cmp	r3, #0
 8011614:	d02a      	beq.n	801166c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8011616:	69bb      	ldr	r3, [r7, #24]
 8011618:	685b      	ldr	r3, [r3, #4]
 801161a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 801161c:	2100      	movs	r1, #0
 801161e:	6978      	ldr	r0, [r7, #20]
 8011620:	f004 fe2a 	bl	8016278 <tcp_arg>
    tcp_recv(pcb, NULL);
 8011624:	2100      	movs	r1, #0
 8011626:	6978      	ldr	r0, [r7, #20]
 8011628:	f004 fe38 	bl	801629c <tcp_recv>
    tcp_sent(pcb, NULL);
 801162c:	2100      	movs	r1, #0
 801162e:	6978      	ldr	r0, [r7, #20]
 8011630:	f004 fe56 	bl	80162e0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8011634:	2200      	movs	r2, #0
 8011636:	2100      	movs	r1, #0
 8011638:	6978      	ldr	r0, [r7, #20]
 801163a:	f004 fead 	bl	8016398 <tcp_poll>
    tcp_err(pcb, NULL);
 801163e:	2100      	movs	r1, #0
 8011640:	6978      	ldr	r0, [r7, #20]
 8011642:	f004 fe6f 	bl	8016324 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8011646:	69bb      	ldr	r3, [r7, #24]
 8011648:	2200      	movs	r2, #0
 801164a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 801164c:	69bb      	ldr	r3, [r7, #24]
 801164e:	3310      	adds	r3, #16
 8011650:	4618      	mov	r0, r3
 8011652:	f00c fa69 	bl	801db28 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8011656:	69bb      	ldr	r3, [r7, #24]
 8011658:	3310      	adds	r3, #16
 801165a:	4618      	mov	r0, r3
 801165c:	f00c fae9 	bl	801dc32 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8011660:	69b8      	ldr	r0, [r7, #24]
 8011662:	f000 f907 	bl	8011874 <netconn_free>
    return ERR_MEM;
 8011666:	f04f 33ff 	mov.w	r3, #4294967295
 801166a:	e00a      	b.n	8011682 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801166c:	69fb      	ldr	r3, [r7, #28]
 801166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011670:	2b00      	cmp	r3, #0
 8011672:	d005      	beq.n	8011680 <accept_function+0x160>
 8011674:	69fb      	ldr	r3, [r7, #28]
 8011676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011678:	2200      	movs	r2, #0
 801167a:	2100      	movs	r1, #0
 801167c:	69f8      	ldr	r0, [r7, #28]
 801167e:	4798      	blx	r3
  }

  return ERR_OK;
 8011680:	2300      	movs	r3, #0
}
 8011682:	4618      	mov	r0, r3
 8011684:	3724      	adds	r7, #36	; 0x24
 8011686:	46bd      	mov	sp, r7
 8011688:	bd90      	pop	{r4, r7, pc}
 801168a:	bf00      	nop
 801168c:	0801f93c 	.word	0x0801f93c
 8011690:	0801faf8 	.word	0x0801faf8
 8011694:	0801f980 	.word	0x0801f980

08011698 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8011698:	b590      	push	{r4, r7, lr}
 801169a:	b085      	sub	sp, #20
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80116a0:	2300      	movs	r3, #0
 80116a2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	685b      	ldr	r3, [r3, #4]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d006      	beq.n	80116bc <pcb_new+0x24>
 80116ae:	4b2b      	ldr	r3, [pc, #172]	; (801175c <pcb_new+0xc4>)
 80116b0:	f240 2265 	movw	r2, #613	; 0x265
 80116b4:	492a      	ldr	r1, [pc, #168]	; (8011760 <pcb_new+0xc8>)
 80116b6:	482b      	ldr	r0, [pc, #172]	; (8011764 <pcb_new+0xcc>)
 80116b8:	f00c fdc4 	bl	801e244 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	781b      	ldrb	r3, [r3, #0]
 80116c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80116c6:	2b10      	cmp	r3, #16
 80116c8:	d022      	beq.n	8011710 <pcb_new+0x78>
 80116ca:	2b20      	cmp	r3, #32
 80116cc:	d133      	bne.n	8011736 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681c      	ldr	r4, [r3, #0]
 80116d2:	7bfb      	ldrb	r3, [r7, #15]
 80116d4:	4618      	mov	r0, r3
 80116d6:	f009 fee4 	bl	801b4a2 <udp_new_ip_type>
 80116da:	4603      	mov	r3, r0
 80116dc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d02a      	beq.n	801173e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	781b      	ldrb	r3, [r3, #0]
 80116ee:	2b22      	cmp	r3, #34	; 0x22
 80116f0:	d104      	bne.n	80116fc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	2201      	movs	r2, #1
 80116fa:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	6858      	ldr	r0, [r3, #4]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	461a      	mov	r2, r3
 8011708:	4917      	ldr	r1, [pc, #92]	; (8011768 <pcb_new+0xd0>)
 801170a:	f009 fe51 	bl	801b3b0 <udp_recv>
      }
      break;
 801170e:	e016      	b.n	801173e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681c      	ldr	r4, [r3, #0]
 8011714:	7bfb      	ldrb	r3, [r7, #15]
 8011716:	4618      	mov	r0, r3
 8011718:	f004 fda0 	bl	801625c <tcp_new_ip_type>
 801171c:	4603      	mov	r3, r0
 801171e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d00b      	beq.n	8011742 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	4618      	mov	r0, r3
 8011730:	f7ff fece 	bl	80114d0 <setup_tcp>
      }
      break;
 8011734:	e005      	b.n	8011742 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	22fa      	movs	r2, #250	; 0xfa
 801173a:	711a      	strb	r2, [r3, #4]
      return;
 801173c:	e00a      	b.n	8011754 <pcb_new+0xbc>
      break;
 801173e:	bf00      	nop
 8011740:	e000      	b.n	8011744 <pcb_new+0xac>
      break;
 8011742:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d102      	bne.n	8011754 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	22ff      	movs	r2, #255	; 0xff
 8011752:	711a      	strb	r2, [r3, #4]
  }
}
 8011754:	3714      	adds	r7, #20
 8011756:	46bd      	mov	sp, r7
 8011758:	bd90      	pop	{r4, r7, pc}
 801175a:	bf00      	nop
 801175c:	0801f93c 	.word	0x0801f93c
 8011760:	0801fb20 	.word	0x0801fb20
 8011764:	0801f980 	.word	0x0801f980
 8011768:	08010fad 	.word	0x08010fad

0801176c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b084      	sub	sp, #16
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	2200      	movs	r2, #0
 801177c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	685b      	ldr	r3, [r3, #4]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d102      	bne.n	801178e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8011788:	68f8      	ldr	r0, [r7, #12]
 801178a:	f7ff ff85 	bl	8011698 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 801178e:	bf00      	nop
 8011790:	3710      	adds	r7, #16
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}
	...

08011798 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b086      	sub	sp, #24
 801179c:	af00      	add	r7, sp, #0
 801179e:	4603      	mov	r3, r0
 80117a0:	6039      	str	r1, [r7, #0]
 80117a2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80117a4:	2300      	movs	r3, #0
 80117a6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80117a8:	2007      	movs	r0, #7
 80117aa:	f001 ffc9 	bl	8013740 <memp_malloc>
 80117ae:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d101      	bne.n	80117ba <netconn_alloc+0x22>
    return NULL;
 80117b6:	2300      	movs	r3, #0
 80117b8:	e052      	b.n	8011860 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2200      	movs	r2, #0
 80117be:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	79fa      	ldrb	r2, [r7, #7]
 80117c4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	2200      	movs	r2, #0
 80117ca:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80117cc:	79fb      	ldrb	r3, [r7, #7]
 80117ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80117d2:	2b10      	cmp	r3, #16
 80117d4:	d004      	beq.n	80117e0 <netconn_alloc+0x48>
 80117d6:	2b20      	cmp	r3, #32
 80117d8:	d105      	bne.n	80117e6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80117da:	2306      	movs	r3, #6
 80117dc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80117de:	e00a      	b.n	80117f6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80117e0:	2306      	movs	r3, #6
 80117e2:	617b      	str	r3, [r7, #20]
      break;
 80117e4:	e007      	b.n	80117f6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80117e6:	4b20      	ldr	r3, [pc, #128]	; (8011868 <netconn_alloc+0xd0>)
 80117e8:	f240 22e5 	movw	r2, #741	; 0x2e5
 80117ec:	491f      	ldr	r1, [pc, #124]	; (801186c <netconn_alloc+0xd4>)
 80117ee:	4820      	ldr	r0, [pc, #128]	; (8011870 <netconn_alloc+0xd8>)
 80117f0:	f00c fd28 	bl	801e244 <iprintf>
      goto free_and_return;
 80117f4:	e02f      	b.n	8011856 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	3310      	adds	r3, #16
 80117fa:	6979      	ldr	r1, [r7, #20]
 80117fc:	4618      	mov	r0, r3
 80117fe:	f00c f979 	bl	801daf4 <sys_mbox_new>
 8011802:	4603      	mov	r3, r0
 8011804:	2b00      	cmp	r3, #0
 8011806:	d125      	bne.n	8011854 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	330c      	adds	r3, #12
 801180c:	2100      	movs	r1, #0
 801180e:	4618      	mov	r0, r3
 8011810:	f00c fa1c 	bl	801dc4c <sys_sem_new>
 8011814:	4603      	mov	r3, r0
 8011816:	2b00      	cmp	r3, #0
 8011818:	d005      	beq.n	8011826 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	3310      	adds	r3, #16
 801181e:	4618      	mov	r0, r3
 8011820:	f00c f982 	bl	801db28 <sys_mbox_free>
    goto free_and_return;
 8011824:	e017      	b.n	8011856 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	3314      	adds	r3, #20
 801182a:	4618      	mov	r0, r3
 801182c:	f00c fa01 	bl	801dc32 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	2200      	movs	r2, #0
 8011834:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	f04f 32ff 	mov.w	r2, #4294967295
 801183c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	683a      	ldr	r2, [r7, #0]
 8011842:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	2200      	movs	r2, #0
 8011848:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	7cfa      	ldrb	r2, [r7, #19]
 801184e:	771a      	strb	r2, [r3, #28]
  return conn;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	e005      	b.n	8011860 <netconn_alloc+0xc8>
    goto free_and_return;
 8011854:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8011856:	68f9      	ldr	r1, [r7, #12]
 8011858:	2007      	movs	r0, #7
 801185a:	f001 ffe7 	bl	801382c <memp_free>
  return NULL;
 801185e:	2300      	movs	r3, #0
}
 8011860:	4618      	mov	r0, r3
 8011862:	3718      	adds	r7, #24
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}
 8011868:	0801f93c 	.word	0x0801f93c
 801186c:	0801fb40 	.word	0x0801fb40
 8011870:	0801f980 	.word	0x0801f980

08011874 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d006      	beq.n	8011892 <netconn_free+0x1e>
 8011884:	4b1b      	ldr	r3, [pc, #108]	; (80118f4 <netconn_free+0x80>)
 8011886:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801188a:	491b      	ldr	r1, [pc, #108]	; (80118f8 <netconn_free+0x84>)
 801188c:	481b      	ldr	r0, [pc, #108]	; (80118fc <netconn_free+0x88>)
 801188e:	f00c fcd9 	bl	801e244 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	3310      	adds	r3, #16
 8011896:	4618      	mov	r0, r3
 8011898:	f00c f9ba 	bl	801dc10 <sys_mbox_valid>
 801189c:	4603      	mov	r3, r0
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d006      	beq.n	80118b0 <netconn_free+0x3c>
 80118a2:	4b14      	ldr	r3, [pc, #80]	; (80118f4 <netconn_free+0x80>)
 80118a4:	f240 3223 	movw	r2, #803	; 0x323
 80118a8:	4915      	ldr	r1, [pc, #84]	; (8011900 <netconn_free+0x8c>)
 80118aa:	4814      	ldr	r0, [pc, #80]	; (80118fc <netconn_free+0x88>)
 80118ac:	f00c fcca 	bl	801e244 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	3314      	adds	r3, #20
 80118b4:	4618      	mov	r0, r3
 80118b6:	f00c f9ab 	bl	801dc10 <sys_mbox_valid>
 80118ba:	4603      	mov	r3, r0
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d006      	beq.n	80118ce <netconn_free+0x5a>
 80118c0:	4b0c      	ldr	r3, [pc, #48]	; (80118f4 <netconn_free+0x80>)
 80118c2:	f240 3226 	movw	r2, #806	; 0x326
 80118c6:	490f      	ldr	r1, [pc, #60]	; (8011904 <netconn_free+0x90>)
 80118c8:	480c      	ldr	r0, [pc, #48]	; (80118fc <netconn_free+0x88>)
 80118ca:	f00c fcbb 	bl	801e244 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	330c      	adds	r3, #12
 80118d2:	4618      	mov	r0, r3
 80118d4:	f00c fa1d 	bl	801dd12 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	330c      	adds	r3, #12
 80118dc:	4618      	mov	r0, r3
 80118de:	f00c fa36 	bl	801dd4e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80118e2:	6879      	ldr	r1, [r7, #4]
 80118e4:	2007      	movs	r0, #7
 80118e6:	f001 ffa1 	bl	801382c <memp_free>
}
 80118ea:	bf00      	nop
 80118ec:	3708      	adds	r7, #8
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop
 80118f4:	0801f93c 	.word	0x0801f93c
 80118f8:	0801fb68 	.word	0x0801fb68
 80118fc:	0801f980 	.word	0x0801f980
 8011900:	0801fb98 	.word	0x0801fb98
 8011904:	0801fbd4 	.word	0x0801fbd4

08011908 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b086      	sub	sp, #24
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	3310      	adds	r3, #16
 8011914:	4618      	mov	r0, r3
 8011916:	f00c f97b 	bl	801dc10 <sys_mbox_valid>
 801191a:	4603      	mov	r3, r0
 801191c:	2b00      	cmp	r3, #0
 801191e:	d02f      	beq.n	8011980 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011920:	e018      	b.n	8011954 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	781b      	ldrb	r3, [r3, #0]
 8011926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801192a:	2b10      	cmp	r3, #16
 801192c:	d10e      	bne.n	801194c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	f107 020f 	add.w	r2, r7, #15
 8011934:	4611      	mov	r1, r2
 8011936:	4618      	mov	r0, r3
 8011938:	f7ff fafe 	bl	8010f38 <lwip_netconn_is_err_msg>
 801193c:	4603      	mov	r3, r0
 801193e:	2b00      	cmp	r3, #0
 8011940:	d108      	bne.n	8011954 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	4618      	mov	r0, r3
 8011946:	f002 fe19 	bl	801457c <pbuf_free>
 801194a:	e003      	b.n	8011954 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	4618      	mov	r0, r3
 8011950:	f000 fe92 	bl	8012678 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	3310      	adds	r3, #16
 8011958:	f107 0210 	add.w	r2, r7, #16
 801195c:	4611      	mov	r1, r2
 801195e:	4618      	mov	r0, r3
 8011960:	f00c f93f 	bl	801dbe2 <sys_arch_mbox_tryfetch>
 8011964:	4603      	mov	r3, r0
 8011966:	f1b3 3fff 	cmp.w	r3, #4294967295
 801196a:	d1da      	bne.n	8011922 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	3310      	adds	r3, #16
 8011970:	4618      	mov	r0, r3
 8011972:	f00c f8d9 	bl	801db28 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	3310      	adds	r3, #16
 801197a:	4618      	mov	r0, r3
 801197c:	f00c f959 	bl	801dc32 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	3314      	adds	r3, #20
 8011984:	4618      	mov	r0, r3
 8011986:	f00c f943 	bl	801dc10 <sys_mbox_valid>
 801198a:	4603      	mov	r3, r0
 801198c:	2b00      	cmp	r3, #0
 801198e:	d034      	beq.n	80119fa <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011990:	e01d      	b.n	80119ce <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	f107 020e 	add.w	r2, r7, #14
 8011998:	4611      	mov	r1, r2
 801199a:	4618      	mov	r0, r3
 801199c:	f7ff facc 	bl	8010f38 <lwip_netconn_is_err_msg>
 80119a0:	4603      	mov	r3, r0
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d113      	bne.n	80119ce <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80119a6:	693b      	ldr	r3, [r7, #16]
 80119a8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80119aa:	6978      	ldr	r0, [r7, #20]
 80119ac:	f7ff ffac 	bl	8011908 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	685b      	ldr	r3, [r3, #4]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d007      	beq.n	80119c8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	685b      	ldr	r3, [r3, #4]
 80119bc:	4618      	mov	r0, r3
 80119be:	f003 fbcd 	bl	801515c <tcp_abort>
            newconn->pcb.tcp = NULL;
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	2200      	movs	r2, #0
 80119c6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80119c8:	6978      	ldr	r0, [r7, #20]
 80119ca:	f7ff ff53 	bl	8011874 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	3314      	adds	r3, #20
 80119d2:	f107 0210 	add.w	r2, r7, #16
 80119d6:	4611      	mov	r1, r2
 80119d8:	4618      	mov	r0, r3
 80119da:	f00c f902 	bl	801dbe2 <sys_arch_mbox_tryfetch>
 80119de:	4603      	mov	r3, r0
 80119e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119e4:	d1d5      	bne.n	8011992 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	3314      	adds	r3, #20
 80119ea:	4618      	mov	r0, r3
 80119ec:	f00c f89c 	bl	801db28 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	3314      	adds	r3, #20
 80119f4:	4618      	mov	r0, r3
 80119f6:	f00c f91c 	bl	801dc32 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80119fa:	bf00      	nop
 80119fc:	3718      	adds	r7, #24
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}
	...

08011a04 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b086      	sub	sp, #24
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
 8011a0c:	460b      	mov	r3, r1
 8011a0e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8011a10:	2300      	movs	r3, #0
 8011a12:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d106      	bne.n	8011a28 <lwip_netconn_do_close_internal+0x24>
 8011a1a:	4b87      	ldr	r3, [pc, #540]	; (8011c38 <lwip_netconn_do_close_internal+0x234>)
 8011a1c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8011a20:	4986      	ldr	r1, [pc, #536]	; (8011c3c <lwip_netconn_do_close_internal+0x238>)
 8011a22:	4887      	ldr	r0, [pc, #540]	; (8011c40 <lwip_netconn_do_close_internal+0x23c>)
 8011a24:	f00c fc0e 	bl	801e244 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	781b      	ldrb	r3, [r3, #0]
 8011a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011a30:	2b10      	cmp	r3, #16
 8011a32:	d006      	beq.n	8011a42 <lwip_netconn_do_close_internal+0x3e>
 8011a34:	4b80      	ldr	r3, [pc, #512]	; (8011c38 <lwip_netconn_do_close_internal+0x234>)
 8011a36:	f240 32a3 	movw	r2, #931	; 0x3a3
 8011a3a:	4982      	ldr	r1, [pc, #520]	; (8011c44 <lwip_netconn_do_close_internal+0x240>)
 8011a3c:	4880      	ldr	r0, [pc, #512]	; (8011c40 <lwip_netconn_do_close_internal+0x23c>)
 8011a3e:	f00c fc01 	bl	801e244 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	785b      	ldrb	r3, [r3, #1]
 8011a46:	2b04      	cmp	r3, #4
 8011a48:	d006      	beq.n	8011a58 <lwip_netconn_do_close_internal+0x54>
 8011a4a:	4b7b      	ldr	r3, [pc, #492]	; (8011c38 <lwip_netconn_do_close_internal+0x234>)
 8011a4c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8011a50:	497d      	ldr	r1, [pc, #500]	; (8011c48 <lwip_netconn_do_close_internal+0x244>)
 8011a52:	487b      	ldr	r0, [pc, #492]	; (8011c40 <lwip_netconn_do_close_internal+0x23c>)
 8011a54:	f00c fbf6 	bl	801e244 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d106      	bne.n	8011a6e <lwip_netconn_do_close_internal+0x6a>
 8011a60:	4b75      	ldr	r3, [pc, #468]	; (8011c38 <lwip_netconn_do_close_internal+0x234>)
 8011a62:	f240 32a5 	movw	r2, #933	; 0x3a5
 8011a66:	4979      	ldr	r1, [pc, #484]	; (8011c4c <lwip_netconn_do_close_internal+0x248>)
 8011a68:	4875      	ldr	r0, [pc, #468]	; (8011c40 <lwip_netconn_do_close_internal+0x23c>)
 8011a6a:	f00c fbeb 	bl	801e244 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6a1b      	ldr	r3, [r3, #32]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d106      	bne.n	8011a84 <lwip_netconn_do_close_internal+0x80>
 8011a76:	4b70      	ldr	r3, [pc, #448]	; (8011c38 <lwip_netconn_do_close_internal+0x234>)
 8011a78:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011a7c:	4974      	ldr	r1, [pc, #464]	; (8011c50 <lwip_netconn_do_close_internal+0x24c>)
 8011a7e:	4870      	ldr	r0, [pc, #448]	; (8011c40 <lwip_netconn_do_close_internal+0x23c>)
 8011a80:	f00c fbe0 	bl	801e244 <iprintf>

  tpcb = conn->pcb.tcp;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	685b      	ldr	r3, [r3, #4]
 8011a88:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6a1b      	ldr	r3, [r3, #32]
 8011a8e:	7a1b      	ldrb	r3, [r3, #8]
 8011a90:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8011a92:	7bfb      	ldrb	r3, [r7, #15]
 8011a94:	f003 0301 	and.w	r3, r3, #1
 8011a98:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8011a9a:	7bfb      	ldrb	r3, [r7, #15]
 8011a9c:	f003 0302 	and.w	r3, r3, #2
 8011aa0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8011aa2:	7bfb      	ldrb	r3, [r7, #15]
 8011aa4:	2b03      	cmp	r3, #3
 8011aa6:	d102      	bne.n	8011aae <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	75bb      	strb	r3, [r7, #22]
 8011aac:	e01f      	b.n	8011aee <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8011aae:	7bbb      	ldrb	r3, [r7, #14]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d00e      	beq.n	8011ad2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8011ab8:	2b05      	cmp	r3, #5
 8011aba:	d007      	beq.n	8011acc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8011abc:	693b      	ldr	r3, [r7, #16]
 8011abe:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8011ac0:	2b06      	cmp	r3, #6
 8011ac2:	d003      	beq.n	8011acc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8011ac8:	2b08      	cmp	r3, #8
 8011aca:	d102      	bne.n	8011ad2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8011acc:	2301      	movs	r3, #1
 8011ace:	75bb      	strb	r3, [r7, #22]
 8011ad0:	e00d      	b.n	8011aee <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8011ad2:	7b7b      	ldrb	r3, [r7, #13]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d008      	beq.n	8011aea <lwip_netconn_do_close_internal+0xe6>
 8011ad8:	693b      	ldr	r3, [r7, #16]
 8011ada:	8b5b      	ldrh	r3, [r3, #26]
 8011adc:	f003 0310 	and.w	r3, r3, #16
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d002      	beq.n	8011aea <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	75bb      	strb	r3, [r7, #22]
 8011ae8:	e001      	b.n	8011aee <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8011aea:	2300      	movs	r3, #0
 8011aec:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8011aee:	7dbb      	ldrb	r3, [r7, #22]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d003      	beq.n	8011afc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8011af4:	2100      	movs	r1, #0
 8011af6:	6938      	ldr	r0, [r7, #16]
 8011af8:	f004 fbbe 	bl	8016278 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	7d1b      	ldrb	r3, [r3, #20]
 8011b00:	2b01      	cmp	r3, #1
 8011b02:	d104      	bne.n	8011b0e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8011b04:	2100      	movs	r1, #0
 8011b06:	6938      	ldr	r0, [r7, #16]
 8011b08:	f004 fc2e 	bl	8016368 <tcp_accept>
 8011b0c:	e01d      	b.n	8011b4a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8011b0e:	7bbb      	ldrb	r3, [r7, #14]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d007      	beq.n	8011b24 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8011b14:	2100      	movs	r1, #0
 8011b16:	6938      	ldr	r0, [r7, #16]
 8011b18:	f004 fbc0 	bl	801629c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8011b1c:	2100      	movs	r1, #0
 8011b1e:	6938      	ldr	r0, [r7, #16]
 8011b20:	f004 fc22 	bl	8016368 <tcp_accept>
    }
    if (shut_tx) {
 8011b24:	7b7b      	ldrb	r3, [r7, #13]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d003      	beq.n	8011b32 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8011b2a:	2100      	movs	r1, #0
 8011b2c:	6938      	ldr	r0, [r7, #16]
 8011b2e:	f004 fbd7 	bl	80162e0 <tcp_sent>
    }
    if (shut_close) {
 8011b32:	7dbb      	ldrb	r3, [r7, #22]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d008      	beq.n	8011b4a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8011b38:	2200      	movs	r2, #0
 8011b3a:	2100      	movs	r1, #0
 8011b3c:	6938      	ldr	r0, [r7, #16]
 8011b3e:	f004 fc2b 	bl	8016398 <tcp_poll>
      tcp_err(tpcb, NULL);
 8011b42:	2100      	movs	r1, #0
 8011b44:	6938      	ldr	r0, [r7, #16]
 8011b46:	f004 fbed 	bl	8016324 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8011b4a:	7dbb      	ldrb	r3, [r7, #22]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d005      	beq.n	8011b5c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8011b50:	6938      	ldr	r0, [r7, #16]
 8011b52:	f003 f9bd 	bl	8014ed0 <tcp_close>
 8011b56:	4603      	mov	r3, r0
 8011b58:	75fb      	strb	r3, [r7, #23]
 8011b5a:	e007      	b.n	8011b6c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8011b5c:	7bbb      	ldrb	r3, [r7, #14]
 8011b5e:	7b7a      	ldrb	r2, [r7, #13]
 8011b60:	4619      	mov	r1, r3
 8011b62:	6938      	ldr	r0, [r7, #16]
 8011b64:	f003 f9e0 	bl	8014f28 <tcp_shutdown>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8011b6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d102      	bne.n	8011b7a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8011b74:	2301      	movs	r3, #1
 8011b76:	757b      	strb	r3, [r7, #21]
 8011b78:	e016      	b.n	8011ba8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8011b7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b82:	d10f      	bne.n	8011ba4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	6a1b      	ldr	r3, [r3, #32]
 8011b88:	7a5b      	ldrb	r3, [r3, #9]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d10c      	bne.n	8011ba8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8011b8e:	2301      	movs	r3, #1
 8011b90:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8011b92:	7dbb      	ldrb	r3, [r7, #22]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d007      	beq.n	8011ba8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8011b98:	6938      	ldr	r0, [r7, #16]
 8011b9a:	f003 fadf 	bl	801515c <tcp_abort>
          err = ERR_OK;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	75fb      	strb	r3, [r7, #23]
 8011ba2:	e001      	b.n	8011ba8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8011ba8:	7d7b      	ldrb	r3, [r7, #21]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d052      	beq.n	8011c54 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6a1b      	ldr	r3, [r3, #32]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	330c      	adds	r3, #12
 8011bb6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	6a1b      	ldr	r3, [r3, #32]
 8011bbc:	7dfa      	ldrb	r2, [r7, #23]
 8011bbe:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2200      	movs	r2, #0
 8011bca:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8011bcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d129      	bne.n	8011c28 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8011bd4:	7dbb      	ldrb	r3, [r7, #22]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d00c      	beq.n	8011bf4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2200      	movs	r2, #0
 8011bde:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d005      	beq.n	8011bf4 <lwip_netconn_do_close_internal+0x1f0>
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bec:	2200      	movs	r2, #0
 8011bee:	2104      	movs	r1, #4
 8011bf0:	6878      	ldr	r0, [r7, #4]
 8011bf2:	4798      	blx	r3
      }
      if (shut_rx) {
 8011bf4:	7bbb      	ldrb	r3, [r7, #14]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d009      	beq.n	8011c0e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d005      	beq.n	8011c0e <lwip_netconn_do_close_internal+0x20a>
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c06:	2200      	movs	r2, #0
 8011c08:	2100      	movs	r1, #0
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	4798      	blx	r3
      }
      if (shut_tx) {
 8011c0e:	7b7b      	ldrb	r3, [r7, #13]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d009      	beq.n	8011c28 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d005      	beq.n	8011c28 <lwip_netconn_do_close_internal+0x224>
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c20:	2200      	movs	r2, #0
 8011c22:	2102      	movs	r1, #2
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011c28:	78fb      	ldrb	r3, [r7, #3]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d002      	beq.n	8011c34 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8011c2e:	68b8      	ldr	r0, [r7, #8]
 8011c30:	f00c f862 	bl	801dcf8 <sys_sem_signal>
    }
    return ERR_OK;
 8011c34:	2300      	movs	r3, #0
 8011c36:	e03c      	b.n	8011cb2 <lwip_netconn_do_close_internal+0x2ae>
 8011c38:	0801f93c 	.word	0x0801f93c
 8011c3c:	0801fc10 	.word	0x0801fc10
 8011c40:	0801f980 	.word	0x0801f980
 8011c44:	0801fc20 	.word	0x0801fc20
 8011c48:	0801fc40 	.word	0x0801fc40
 8011c4c:	0801fc64 	.word	0x0801fc64
 8011c50:	0801faa4 	.word	0x0801faa4
  }
  if (!close_finished) {
 8011c54:	7d7b      	ldrb	r3, [r7, #21]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d11e      	bne.n	8011c98 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8011c5a:	693b      	ldr	r3, [r7, #16]
 8011c5c:	7d1b      	ldrb	r3, [r3, #20]
 8011c5e:	2b01      	cmp	r3, #1
 8011c60:	d106      	bne.n	8011c70 <lwip_netconn_do_close_internal+0x26c>
 8011c62:	4b16      	ldr	r3, [pc, #88]	; (8011cbc <lwip_netconn_do_close_internal+0x2b8>)
 8011c64:	f240 4241 	movw	r2, #1089	; 0x441
 8011c68:	4915      	ldr	r1, [pc, #84]	; (8011cc0 <lwip_netconn_do_close_internal+0x2bc>)
 8011c6a:	4816      	ldr	r0, [pc, #88]	; (8011cc4 <lwip_netconn_do_close_internal+0x2c0>)
 8011c6c:	f00c faea 	bl	801e244 <iprintf>
    if (shut_tx) {
 8011c70:	7b7b      	ldrb	r3, [r7, #13]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d003      	beq.n	8011c7e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8011c76:	4914      	ldr	r1, [pc, #80]	; (8011cc8 <lwip_netconn_do_close_internal+0x2c4>)
 8011c78:	6938      	ldr	r0, [r7, #16]
 8011c7a:	f004 fb31 	bl	80162e0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8011c7e:	2201      	movs	r2, #1
 8011c80:	4912      	ldr	r1, [pc, #72]	; (8011ccc <lwip_netconn_do_close_internal+0x2c8>)
 8011c82:	6938      	ldr	r0, [r7, #16]
 8011c84:	f004 fb88 	bl	8016398 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8011c88:	4911      	ldr	r1, [pc, #68]	; (8011cd0 <lwip_netconn_do_close_internal+0x2cc>)
 8011c8a:	6938      	ldr	r0, [r7, #16]
 8011c8c:	f004 fb4a 	bl	8016324 <tcp_err>
    tcp_arg(tpcb, conn);
 8011c90:	6879      	ldr	r1, [r7, #4]
 8011c92:	6938      	ldr	r0, [r7, #16]
 8011c94:	f004 faf0 	bl	8016278 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8011c98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d106      	bne.n	8011cae <lwip_netconn_do_close_internal+0x2aa>
 8011ca0:	4b06      	ldr	r3, [pc, #24]	; (8011cbc <lwip_netconn_do_close_internal+0x2b8>)
 8011ca2:	f240 424d 	movw	r2, #1101	; 0x44d
 8011ca6:	490b      	ldr	r1, [pc, #44]	; (8011cd4 <lwip_netconn_do_close_internal+0x2d0>)
 8011ca8:	4806      	ldr	r0, [pc, #24]	; (8011cc4 <lwip_netconn_do_close_internal+0x2c0>)
 8011caa:	f00c facb 	bl	801e244 <iprintf>
  return err;
 8011cae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3718      	adds	r7, #24
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}
 8011cba:	bf00      	nop
 8011cbc:	0801f93c 	.word	0x0801f93c
 8011cc0:	0801fc78 	.word	0x0801fc78
 8011cc4:	0801f980 	.word	0x0801f980
 8011cc8:	0801127d 	.word	0x0801127d
 8011ccc:	080111b5 	.word	0x080111b5
 8011cd0:	08011325 	.word	0x08011325
 8011cd4:	0801fc9c 	.word	0x0801fc9c

08011cd8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b084      	sub	sp, #16
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	785b      	ldrb	r3, [r3, #1]
 8011cea:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8011cec:	7afb      	ldrb	r3, [r7, #11]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d00d      	beq.n	8011d0e <lwip_netconn_do_delconn+0x36>
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	781b      	ldrb	r3, [r3, #0]
 8011cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011cfc:	2b10      	cmp	r3, #16
 8011cfe:	d006      	beq.n	8011d0e <lwip_netconn_do_delconn+0x36>
 8011d00:	4b60      	ldr	r3, [pc, #384]	; (8011e84 <lwip_netconn_do_delconn+0x1ac>)
 8011d02:	f240 425e 	movw	r2, #1118	; 0x45e
 8011d06:	4960      	ldr	r1, [pc, #384]	; (8011e88 <lwip_netconn_do_delconn+0x1b0>)
 8011d08:	4860      	ldr	r0, [pc, #384]	; (8011e8c <lwip_netconn_do_delconn+0x1b4>)
 8011d0a:	f00c fa9b 	bl	801e244 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8011d0e:	7afb      	ldrb	r3, [r7, #11]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d005      	beq.n	8011d20 <lwip_netconn_do_delconn+0x48>
 8011d14:	7afb      	ldrb	r3, [r7, #11]
 8011d16:	2b02      	cmp	r3, #2
 8011d18:	d002      	beq.n	8011d20 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8011d1a:	7afb      	ldrb	r3, [r7, #11]
 8011d1c:	2b03      	cmp	r3, #3
 8011d1e:	d109      	bne.n	8011d34 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8011d20:	7afb      	ldrb	r3, [r7, #11]
 8011d22:	2b03      	cmp	r3, #3
 8011d24:	d10a      	bne.n	8011d3c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	7f1b      	ldrb	r3, [r3, #28]
 8011d2c:	f003 0304 	and.w	r3, r3, #4
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d103      	bne.n	8011d3c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	22fb      	movs	r2, #251	; 0xfb
 8011d38:	711a      	strb	r2, [r3, #4]
 8011d3a:	e097      	b.n	8011e6c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8011d3c:	7afb      	ldrb	r3, [r7, #11]
 8011d3e:	2b03      	cmp	r3, #3
 8011d40:	d10d      	bne.n	8011d5e <lwip_netconn_do_delconn+0x86>
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	7f1b      	ldrb	r3, [r3, #28]
 8011d48:	f003 0304 	and.w	r3, r3, #4
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d106      	bne.n	8011d5e <lwip_netconn_do_delconn+0x86>
 8011d50:	4b4c      	ldr	r3, [pc, #304]	; (8011e84 <lwip_netconn_do_delconn+0x1ac>)
 8011d52:	f240 427a 	movw	r2, #1146	; 0x47a
 8011d56:	494e      	ldr	r1, [pc, #312]	; (8011e90 <lwip_netconn_do_delconn+0x1b8>)
 8011d58:	484c      	ldr	r0, [pc, #304]	; (8011e8c <lwip_netconn_do_delconn+0x1b4>)
 8011d5a:	f00c fa73 	bl	801e244 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	2200      	movs	r2, #0
 8011d62:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f7ff fdcd 	bl	8011908 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d05f      	beq.n	8011e38 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d82:	2b10      	cmp	r3, #16
 8011d84:	d00d      	beq.n	8011da2 <lwip_netconn_do_delconn+0xca>
 8011d86:	2b20      	cmp	r3, #32
 8011d88:	d151      	bne.n	8011e2e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	685b      	ldr	r3, [r3, #4]
 8011d90:	2200      	movs	r2, #0
 8011d92:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	685b      	ldr	r3, [r3, #4]
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f009 fb28 	bl	801b3f0 <udp_remove>
          break;
 8011da0:	e046      	b.n	8011e30 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	6a1b      	ldr	r3, [r3, #32]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d006      	beq.n	8011dba <lwip_netconn_do_delconn+0xe2>
 8011dac:	4b35      	ldr	r3, [pc, #212]	; (8011e84 <lwip_netconn_do_delconn+0x1ac>)
 8011dae:	f240 4294 	movw	r2, #1172	; 0x494
 8011db2:	4938      	ldr	r1, [pc, #224]	; (8011e94 <lwip_netconn_do_delconn+0x1bc>)
 8011db4:	4835      	ldr	r0, [pc, #212]	; (8011e8c <lwip_netconn_do_delconn+0x1b4>)
 8011db6:	f00c fa45 	bl	801e244 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	2204      	movs	r2, #4
 8011dc0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	2203      	movs	r2, #3
 8011dc6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	68fa      	ldr	r2, [r7, #12]
 8011dce:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	2100      	movs	r1, #0
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f7ff fe14 	bl	8011a04 <lwip_netconn_do_close_internal>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d04b      	beq.n	8011e7a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	785b      	ldrb	r3, [r3, #1]
 8011de8:	2b04      	cmp	r3, #4
 8011dea:	d006      	beq.n	8011dfa <lwip_netconn_do_delconn+0x122>
 8011dec:	4b25      	ldr	r3, [pc, #148]	; (8011e84 <lwip_netconn_do_delconn+0x1ac>)
 8011dee:	f240 429a 	movw	r2, #1178	; 0x49a
 8011df2:	4929      	ldr	r1, [pc, #164]	; (8011e98 <lwip_netconn_do_delconn+0x1c0>)
 8011df4:	4825      	ldr	r0, [pc, #148]	; (8011e8c <lwip_netconn_do_delconn+0x1b4>)
 8011df6:	f00c fa25 	bl	801e244 <iprintf>
            UNLOCK_TCPIP_CORE();
 8011dfa:	4828      	ldr	r0, [pc, #160]	; (8011e9c <lwip_netconn_do_delconn+0x1c4>)
 8011dfc:	f00b ffe5 	bl	801ddca <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	330c      	adds	r3, #12
 8011e06:	2100      	movs	r1, #0
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f00b ff44 	bl	801dc96 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8011e0e:	4823      	ldr	r0, [pc, #140]	; (8011e9c <lwip_netconn_do_delconn+0x1c4>)
 8011e10:	f00b ffcc 	bl	801ddac <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	785b      	ldrb	r3, [r3, #1]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d02d      	beq.n	8011e7a <lwip_netconn_do_delconn+0x1a2>
 8011e1e:	4b19      	ldr	r3, [pc, #100]	; (8011e84 <lwip_netconn_do_delconn+0x1ac>)
 8011e20:	f240 429e 	movw	r2, #1182	; 0x49e
 8011e24:	491c      	ldr	r1, [pc, #112]	; (8011e98 <lwip_netconn_do_delconn+0x1c0>)
 8011e26:	4819      	ldr	r0, [pc, #100]	; (8011e8c <lwip_netconn_do_delconn+0x1b4>)
 8011e28:	f00c fa0c 	bl	801e244 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8011e2c:	e025      	b.n	8011e7a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8011e2e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	2200      	movs	r2, #0
 8011e36:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d007      	beq.n	8011e52 <lwip_netconn_do_delconn+0x17a>
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e48:	68fa      	ldr	r2, [r7, #12]
 8011e4a:	6810      	ldr	r0, [r2, #0]
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	2100      	movs	r1, #0
 8011e50:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d007      	beq.n	8011e6c <lwip_netconn_do_delconn+0x194>
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e62:	68fa      	ldr	r2, [r7, #12]
 8011e64:	6810      	ldr	r0, [r2, #0]
 8011e66:	2200      	movs	r2, #0
 8011e68:	2102      	movs	r1, #2
 8011e6a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	330c      	adds	r3, #12
 8011e72:	4618      	mov	r0, r3
 8011e74:	f00b ff5a 	bl	801dd2c <sys_sem_valid>
 8011e78:	e000      	b.n	8011e7c <lwip_netconn_do_delconn+0x1a4>
          return;
 8011e7a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8011e7c:	3710      	adds	r7, #16
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}
 8011e82:	bf00      	nop
 8011e84:	0801f93c 	.word	0x0801f93c
 8011e88:	0801fcac 	.word	0x0801fcac
 8011e8c:	0801f980 	.word	0x0801f980
 8011e90:	0801fcc0 	.word	0x0801fcc0
 8011e94:	0801fce0 	.word	0x0801fce0
 8011e98:	0801fcfc 	.word	0x0801fcfc
 8011e9c:	24015f38 	.word	0x24015f38

08011ea0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b084      	sub	sp, #16
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8011eac:	68bb      	ldr	r3, [r7, #8]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d025      	beq.n	8011f02 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	781b      	ldrb	r3, [r3, #0]
 8011ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011ec0:	2b10      	cmp	r3, #16
 8011ec2:	d00e      	beq.n	8011ee2 <lwip_netconn_do_bind+0x42>
 8011ec4:	2b20      	cmp	r3, #32
 8011ec6:	d119      	bne.n	8011efc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	6858      	ldr	r0, [r3, #4]
 8011ece:	68bb      	ldr	r3, [r7, #8]
 8011ed0:	6899      	ldr	r1, [r3, #8]
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	899b      	ldrh	r3, [r3, #12]
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	f009 f9e2 	bl	801b2a0 <udp_bind>
 8011edc:	4603      	mov	r3, r0
 8011ede:	73fb      	strb	r3, [r7, #15]
        break;
 8011ee0:	e011      	b.n	8011f06 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	6858      	ldr	r0, [r3, #4]
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	6899      	ldr	r1, [r3, #8]
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	899b      	ldrh	r3, [r3, #12]
 8011ef0:	461a      	mov	r2, r3
 8011ef2:	f003 f93f 	bl	8015174 <tcp_bind>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	73fb      	strb	r3, [r7, #15]
        break;
 8011efa:	e004      	b.n	8011f06 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8011efc:	23fa      	movs	r3, #250	; 0xfa
 8011efe:	73fb      	strb	r3, [r7, #15]
        break;
 8011f00:	e001      	b.n	8011f06 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8011f02:	23fa      	movs	r3, #250	; 0xfa
 8011f04:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	7bfa      	ldrb	r2, [r7, #15]
 8011f0a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8011f0c:	bf00      	nop
 8011f0e:	3710      	adds	r7, #16
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}

08011f14 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b086      	sub	sp, #24
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d07f      	beq.n	801202a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011f2a:	697b      	ldr	r3, [r7, #20]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	781b      	ldrb	r3, [r3, #0]
 8011f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f34:	2b10      	cmp	r3, #16
 8011f36:	d175      	bne.n	8012024 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	785b      	ldrb	r3, [r3, #1]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d165      	bne.n	801200e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8011f42:	697b      	ldr	r3, [r7, #20]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	7d1b      	ldrb	r3, [r3, #20]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d002      	beq.n	8011f54 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8011f4e:	23fa      	movs	r3, #250	; 0xfa
 8011f50:	72fb      	strb	r3, [r7, #11]
 8011f52:	e06c      	b.n	801202e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8011f54:	23ff      	movs	r3, #255	; 0xff
 8011f56:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8011f58:	697b      	ldr	r3, [r7, #20]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	f107 020b 	add.w	r2, r7, #11
 8011f62:	7cf9      	ldrb	r1, [r7, #19]
 8011f64:	4618      	mov	r0, r3
 8011f66:	f003 f9bd 	bl	80152e4 <tcp_listen_with_backlog_and_err>
 8011f6a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d05d      	beq.n	801202e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	3310      	adds	r3, #16
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f00b fe49 	bl	801dc10 <sys_mbox_valid>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d00b      	beq.n	8011f9c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8011f84:	697b      	ldr	r3, [r7, #20]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	3310      	adds	r3, #16
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f00b fdcc 	bl	801db28 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8011f90:	697b      	ldr	r3, [r7, #20]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	3310      	adds	r3, #16
 8011f96:	4618      	mov	r0, r3
 8011f98:	f00b fe4b 	bl	801dc32 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8011fa0:	697b      	ldr	r3, [r7, #20]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	3314      	adds	r3, #20
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f00b fe32 	bl	801dc10 <sys_mbox_valid>
 8011fac:	4603      	mov	r3, r0
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d108      	bne.n	8011fc4 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8011fb2:	697b      	ldr	r3, [r7, #20]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	3314      	adds	r3, #20
 8011fb8:	2106      	movs	r1, #6
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f00b fd9a 	bl	801daf4 <sys_mbox_new>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8011fc4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d118      	bne.n	8011ffe <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	2202      	movs	r2, #2
 8011fd2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	68fa      	ldr	r2, [r7, #12]
 8011fda:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	685a      	ldr	r2, [r3, #4]
 8011fe2:	697b      	ldr	r3, [r7, #20]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	4619      	mov	r1, r3
 8011fe8:	4610      	mov	r0, r2
 8011fea:	f004 f945 	bl	8016278 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8011fee:	697b      	ldr	r3, [r7, #20]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	4912      	ldr	r1, [pc, #72]	; (8012040 <lwip_netconn_do_listen+0x12c>)
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f004 f9b6 	bl	8016368 <tcp_accept>
 8011ffc:	e017      	b.n	801202e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8011ffe:	68f8      	ldr	r0, [r7, #12]
 8012000:	f002 ff66 	bl	8014ed0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	2200      	movs	r2, #0
 801200a:	605a      	str	r2, [r3, #4]
 801200c:	e00f      	b.n	801202e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	785b      	ldrb	r3, [r3, #1]
 8012014:	2b02      	cmp	r3, #2
 8012016:	d102      	bne.n	801201e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8012018:	2300      	movs	r3, #0
 801201a:	72fb      	strb	r3, [r7, #11]
 801201c:	e007      	b.n	801202e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 801201e:	23f5      	movs	r3, #245	; 0xf5
 8012020:	72fb      	strb	r3, [r7, #11]
 8012022:	e004      	b.n	801202e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8012024:	23f0      	movs	r3, #240	; 0xf0
 8012026:	72fb      	strb	r3, [r7, #11]
 8012028:	e001      	b.n	801202e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 801202a:	23f5      	movs	r3, #245	; 0xf5
 801202c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 801202e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012036:	bf00      	nop
 8012038:	3718      	adds	r7, #24
 801203a:	46bd      	mov	sp, r7
 801203c:	bd80      	pop	{r7, pc}
 801203e:	bf00      	nop
 8012040:	08011521 	.word	0x08011521

08012044 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b086      	sub	sp, #24
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8012050:	693b      	ldr	r3, [r7, #16]
 8012052:	2200      	movs	r2, #0
 8012054:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8012056:	693b      	ldr	r3, [r7, #16]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	685b      	ldr	r3, [r3, #4]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d022      	beq.n	80120a6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	781b      	ldrb	r3, [r3, #0]
 8012066:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801206a:	2b10      	cmp	r3, #16
 801206c:	d11b      	bne.n	80120a6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 801206e:	693b      	ldr	r3, [r7, #16]
 8012070:	689b      	ldr	r3, [r3, #8]
 8012072:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8012074:	697b      	ldr	r3, [r7, #20]
 8012076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801207a:	d202      	bcs.n	8012082 <lwip_netconn_do_recv+0x3e>
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	b29b      	uxth	r3, r3
 8012080:	e001      	b.n	8012086 <lwip_netconn_do_recv+0x42>
 8012082:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012086:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	685b      	ldr	r3, [r3, #4]
 801208e:	89fa      	ldrh	r2, [r7, #14]
 8012090:	4611      	mov	r1, r2
 8012092:	4618      	mov	r0, r3
 8012094:	f003 fa2a 	bl	80154ec <tcp_recved>
        remaining -= recved;
 8012098:	89fb      	ldrh	r3, [r7, #14]
 801209a:	697a      	ldr	r2, [r7, #20]
 801209c:	1ad3      	subs	r3, r2, r3
 801209e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d1e6      	bne.n	8012074 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80120a6:	bf00      	nop
 80120a8:	3718      	adds	r7, #24
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}
	...

080120b0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b088      	sub	sp, #32
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	460b      	mov	r3, r1
 80120ba:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80120bc:	2300      	movs	r3, #0
 80120be:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d106      	bne.n	80120d4 <lwip_netconn_do_writemore+0x24>
 80120c6:	4b96      	ldr	r3, [pc, #600]	; (8012320 <lwip_netconn_do_writemore+0x270>)
 80120c8:	f240 6273 	movw	r2, #1651	; 0x673
 80120cc:	4995      	ldr	r1, [pc, #596]	; (8012324 <lwip_netconn_do_writemore+0x274>)
 80120ce:	4896      	ldr	r0, [pc, #600]	; (8012328 <lwip_netconn_do_writemore+0x278>)
 80120d0:	f00c f8b8 	bl	801e244 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	785b      	ldrb	r3, [r3, #1]
 80120d8:	2b01      	cmp	r3, #1
 80120da:	d006      	beq.n	80120ea <lwip_netconn_do_writemore+0x3a>
 80120dc:	4b90      	ldr	r3, [pc, #576]	; (8012320 <lwip_netconn_do_writemore+0x270>)
 80120de:	f240 6274 	movw	r2, #1652	; 0x674
 80120e2:	4992      	ldr	r1, [pc, #584]	; (801232c <lwip_netconn_do_writemore+0x27c>)
 80120e4:	4890      	ldr	r0, [pc, #576]	; (8012328 <lwip_netconn_do_writemore+0x278>)
 80120e6:	f00c f8ad 	bl	801e244 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	6a1b      	ldr	r3, [r3, #32]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d106      	bne.n	8012100 <lwip_netconn_do_writemore+0x50>
 80120f2:	4b8b      	ldr	r3, [pc, #556]	; (8012320 <lwip_netconn_do_writemore+0x270>)
 80120f4:	f240 6275 	movw	r2, #1653	; 0x675
 80120f8:	498d      	ldr	r1, [pc, #564]	; (8012330 <lwip_netconn_do_writemore+0x280>)
 80120fa:	488b      	ldr	r0, [pc, #556]	; (8012328 <lwip_netconn_do_writemore+0x278>)
 80120fc:	f00c f8a2 	bl	801e244 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	685b      	ldr	r3, [r3, #4]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d106      	bne.n	8012116 <lwip_netconn_do_writemore+0x66>
 8012108:	4b85      	ldr	r3, [pc, #532]	; (8012320 <lwip_netconn_do_writemore+0x270>)
 801210a:	f240 6276 	movw	r2, #1654	; 0x676
 801210e:	4989      	ldr	r1, [pc, #548]	; (8012334 <lwip_netconn_do_writemore+0x284>)
 8012110:	4885      	ldr	r0, [pc, #532]	; (8012328 <lwip_netconn_do_writemore+0x278>)
 8012112:	f00c f897 	bl	801e244 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	6a1b      	ldr	r3, [r3, #32]
 801211a:	699a      	ldr	r2, [r3, #24]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6a1b      	ldr	r3, [r3, #32]
 8012120:	695b      	ldr	r3, [r3, #20]
 8012122:	429a      	cmp	r2, r3
 8012124:	d306      	bcc.n	8012134 <lwip_netconn_do_writemore+0x84>
 8012126:	4b7e      	ldr	r3, [pc, #504]	; (8012320 <lwip_netconn_do_writemore+0x270>)
 8012128:	f240 6277 	movw	r2, #1655	; 0x677
 801212c:	4982      	ldr	r1, [pc, #520]	; (8012338 <lwip_netconn_do_writemore+0x288>)
 801212e:	487e      	ldr	r0, [pc, #504]	; (8012328 <lwip_netconn_do_writemore+0x278>)
 8012130:	f00c f888 	bl	801e244 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6a1b      	ldr	r3, [r3, #32]
 8012138:	899b      	ldrh	r3, [r3, #12]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d106      	bne.n	801214c <lwip_netconn_do_writemore+0x9c>
 801213e:	4b78      	ldr	r3, [pc, #480]	; (8012320 <lwip_netconn_do_writemore+0x270>)
 8012140:	f240 6279 	movw	r2, #1657	; 0x679
 8012144:	497d      	ldr	r1, [pc, #500]	; (801233c <lwip_netconn_do_writemore+0x28c>)
 8012146:	4878      	ldr	r0, [pc, #480]	; (8012328 <lwip_netconn_do_writemore+0x278>)
 8012148:	f00c f87c 	bl	801e244 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6a1b      	ldr	r3, [r3, #32]
 8012150:	7f1b      	ldrb	r3, [r3, #28]
 8012152:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	7f1b      	ldrb	r3, [r3, #28]
 8012158:	f003 0302 	and.w	r3, r3, #2
 801215c:	2b00      	cmp	r3, #0
 801215e:	d104      	bne.n	801216a <lwip_netconn_do_writemore+0xba>
 8012160:	7ebb      	ldrb	r3, [r7, #26]
 8012162:	f003 0304 	and.w	r3, r3, #4
 8012166:	2b00      	cmp	r3, #0
 8012168:	d001      	beq.n	801216e <lwip_netconn_do_writemore+0xbe>
 801216a:	2301      	movs	r3, #1
 801216c:	e000      	b.n	8012170 <lwip_netconn_do_writemore+0xc0>
 801216e:	2300      	movs	r3, #0
 8012170:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6a1b      	ldr	r3, [r3, #32]
 8012176:	689b      	ldr	r3, [r3, #8]
 8012178:	681a      	ldr	r2, [r3, #0]
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	6a1b      	ldr	r3, [r3, #32]
 801217e:	691b      	ldr	r3, [r3, #16]
 8012180:	4413      	add	r3, r2
 8012182:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	6a1b      	ldr	r3, [r3, #32]
 8012188:	689b      	ldr	r3, [r3, #8]
 801218a:	685a      	ldr	r2, [r3, #4]
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	6a1b      	ldr	r3, [r3, #32]
 8012190:	691b      	ldr	r3, [r3, #16]
 8012192:	1ad3      	subs	r3, r2, r3
 8012194:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8012196:	693b      	ldr	r3, [r7, #16]
 8012198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801219c:	d307      	bcc.n	80121ae <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801219e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80121a2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80121a4:	7ebb      	ldrb	r3, [r7, #26]
 80121a6:	f043 0302 	orr.w	r3, r3, #2
 80121aa:	76bb      	strb	r3, [r7, #26]
 80121ac:	e001      	b.n	80121b2 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 80121ae:	693b      	ldr	r3, [r7, #16]
 80121b0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	685b      	ldr	r3, [r3, #4]
 80121b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80121ba:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 80121bc:	89fa      	ldrh	r2, [r7, #14]
 80121be:	8bbb      	ldrh	r3, [r7, #28]
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d216      	bcs.n	80121f2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 80121c4:	89fb      	ldrh	r3, [r7, #14]
 80121c6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80121c8:	7e3b      	ldrb	r3, [r7, #24]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d00d      	beq.n	80121ea <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 80121ce:	8bbb      	ldrh	r3, [r7, #28]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d10e      	bne.n	80121f2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	6a1b      	ldr	r3, [r3, #32]
 80121d8:	699b      	ldr	r3, [r3, #24]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d102      	bne.n	80121e4 <lwip_netconn_do_writemore+0x134>
 80121de:	f06f 0306 	mvn.w	r3, #6
 80121e2:	e000      	b.n	80121e6 <lwip_netconn_do_writemore+0x136>
 80121e4:	2300      	movs	r3, #0
 80121e6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80121e8:	e07d      	b.n	80122e6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80121ea:	7ebb      	ldrb	r3, [r7, #26]
 80121ec:	f043 0302 	orr.w	r3, r3, #2
 80121f0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	6a1b      	ldr	r3, [r3, #32]
 80121f6:	691a      	ldr	r2, [r3, #16]
 80121f8:	8bbb      	ldrh	r3, [r7, #28]
 80121fa:	441a      	add	r2, r3
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	6a1b      	ldr	r3, [r3, #32]
 8012200:	689b      	ldr	r3, [r3, #8]
 8012202:	685b      	ldr	r3, [r3, #4]
 8012204:	429a      	cmp	r2, r3
 8012206:	d906      	bls.n	8012216 <lwip_netconn_do_writemore+0x166>
 8012208:	4b45      	ldr	r3, [pc, #276]	; (8012320 <lwip_netconn_do_writemore+0x270>)
 801220a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 801220e:	494c      	ldr	r1, [pc, #304]	; (8012340 <lwip_netconn_do_writemore+0x290>)
 8012210:	4845      	ldr	r0, [pc, #276]	; (8012328 <lwip_netconn_do_writemore+0x278>)
 8012212:	f00c f817 	bl	801e244 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012216:	8bbb      	ldrh	r3, [r7, #28]
 8012218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801221c:	4293      	cmp	r3, r2
 801221e:	d103      	bne.n	8012228 <lwip_netconn_do_writemore+0x178>
 8012220:	693b      	ldr	r3, [r7, #16]
 8012222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012226:	d209      	bcs.n	801223c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 801222c:	8bba      	ldrh	r2, [r7, #28]
 801222e:	429a      	cmp	r2, r3
 8012230:	d10b      	bne.n	801224a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	6a1b      	ldr	r3, [r3, #32]
 8012236:	899b      	ldrh	r3, [r3, #12]
 8012238:	2b01      	cmp	r3, #1
 801223a:	d906      	bls.n	801224a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 801223c:	2301      	movs	r3, #1
 801223e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012240:	7ebb      	ldrb	r3, [r7, #26]
 8012242:	f043 0302 	orr.w	r3, r3, #2
 8012246:	76bb      	strb	r3, [r7, #26]
 8012248:	e001      	b.n	801224e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 801224a:	2300      	movs	r3, #0
 801224c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	6858      	ldr	r0, [r3, #4]
 8012252:	7ebb      	ldrb	r3, [r7, #26]
 8012254:	8bba      	ldrh	r2, [r7, #28]
 8012256:	6979      	ldr	r1, [r7, #20]
 8012258:	f006 ff64 	bl	8019124 <tcp_write>
 801225c:	4603      	mov	r3, r0
 801225e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8012260:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d12c      	bne.n	80122c2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	6a1b      	ldr	r3, [r3, #32]
 801226c:	6999      	ldr	r1, [r3, #24]
 801226e:	8bba      	ldrh	r2, [r7, #28]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6a1b      	ldr	r3, [r3, #32]
 8012274:	440a      	add	r2, r1
 8012276:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	6a1b      	ldr	r3, [r3, #32]
 801227c:	6919      	ldr	r1, [r3, #16]
 801227e:	8bba      	ldrh	r2, [r7, #28]
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6a1b      	ldr	r3, [r3, #32]
 8012284:	440a      	add	r2, r1
 8012286:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	6a1b      	ldr	r3, [r3, #32]
 801228c:	691a      	ldr	r2, [r3, #16]
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	6a1b      	ldr	r3, [r3, #32]
 8012292:	689b      	ldr	r3, [r3, #8]
 8012294:	685b      	ldr	r3, [r3, #4]
 8012296:	429a      	cmp	r2, r3
 8012298:	d113      	bne.n	80122c2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	6a1b      	ldr	r3, [r3, #32]
 801229e:	899a      	ldrh	r2, [r3, #12]
 80122a0:	3a01      	subs	r2, #1
 80122a2:	b292      	uxth	r2, r2
 80122a4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6a1b      	ldr	r3, [r3, #32]
 80122aa:	899b      	ldrh	r3, [r3, #12]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d008      	beq.n	80122c2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	6a1b      	ldr	r3, [r3, #32]
 80122b4:	689a      	ldr	r2, [r3, #8]
 80122b6:	3208      	adds	r2, #8
 80122b8:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	6a1b      	ldr	r3, [r3, #32]
 80122be:	2200      	movs	r2, #0
 80122c0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80122c2:	7e7b      	ldrb	r3, [r7, #25]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d004      	beq.n	80122d2 <lwip_netconn_do_writemore+0x222>
 80122c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	f43f af50 	beq.w	8012172 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80122d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d004      	beq.n	80122e4 <lwip_netconn_do_writemore+0x234>
 80122da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80122de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122e2:	d146      	bne.n	8012372 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80122e4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80122e6:	7e3b      	ldrb	r3, [r7, #24]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d02b      	beq.n	8012344 <lwip_netconn_do_writemore+0x294>
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6a1b      	ldr	r3, [r3, #32]
 80122f0:	699a      	ldr	r2, [r3, #24]
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	6a1b      	ldr	r3, [r3, #32]
 80122f6:	695b      	ldr	r3, [r3, #20]
 80122f8:	429a      	cmp	r2, r3
 80122fa:	d223      	bcs.n	8012344 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012300:	2b00      	cmp	r3, #0
 8012302:	d005      	beq.n	8012310 <lwip_netconn_do_writemore+0x260>
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012308:	2200      	movs	r2, #0
 801230a:	2103      	movs	r1, #3
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	7f1b      	ldrb	r3, [r3, #28]
 8012314:	f043 0310 	orr.w	r3, r3, #16
 8012318:	b2da      	uxtb	r2, r3
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	771a      	strb	r2, [r3, #28]
 801231e:	e028      	b.n	8012372 <lwip_netconn_do_writemore+0x2c2>
 8012320:	0801f93c 	.word	0x0801f93c
 8012324:	0801fa94 	.word	0x0801fa94
 8012328:	0801f980 	.word	0x0801f980
 801232c:	0801fd9c 	.word	0x0801fd9c
 8012330:	0801faa4 	.word	0x0801faa4
 8012334:	0801fdbc 	.word	0x0801fdbc
 8012338:	0801fdd4 	.word	0x0801fdd4
 801233c:	0801fe14 	.word	0x0801fe14
 8012340:	0801fe3c 	.word	0x0801fe3c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	685b      	ldr	r3, [r3, #4]
 8012348:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801234c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8012350:	d305      	bcc.n	801235e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	685b      	ldr	r3, [r3, #4]
 8012356:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801235a:	2b04      	cmp	r3, #4
 801235c:	d909      	bls.n	8012372 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012362:	2b00      	cmp	r3, #0
 8012364:	d005      	beq.n	8012372 <lwip_netconn_do_writemore+0x2c2>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801236a:	2200      	movs	r2, #0
 801236c:	2103      	movs	r1, #3
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8012372:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d11d      	bne.n	80123b6 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	6a1b      	ldr	r3, [r3, #32]
 801237e:	699a      	ldr	r2, [r3, #24]
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6a1b      	ldr	r3, [r3, #32]
 8012384:	695b      	ldr	r3, [r3, #20]
 8012386:	429a      	cmp	r2, r3
 8012388:	d002      	beq.n	8012390 <lwip_netconn_do_writemore+0x2e0>
 801238a:	7e3b      	ldrb	r3, [r7, #24]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d001      	beq.n	8012394 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8012390:	2301      	movs	r3, #1
 8012392:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	685b      	ldr	r3, [r3, #4]
 8012398:	4618      	mov	r0, r3
 801239a:	f007 fcad 	bl	8019cf8 <tcp_output>
 801239e:	4603      	mov	r3, r0
 80123a0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80123a2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80123a6:	f113 0f04 	cmn.w	r3, #4
 80123aa:	d12c      	bne.n	8012406 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80123ac:	7b3b      	ldrb	r3, [r7, #12]
 80123ae:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80123b0:	2301      	movs	r3, #1
 80123b2:	76fb      	strb	r3, [r7, #27]
 80123b4:	e027      	b.n	8012406 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 80123b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80123ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123be:	d120      	bne.n	8012402 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	685b      	ldr	r3, [r3, #4]
 80123c4:	4618      	mov	r0, r3
 80123c6:	f007 fc97 	bl	8019cf8 <tcp_output>
 80123ca:	4603      	mov	r3, r0
 80123cc:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80123ce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80123d2:	f113 0f04 	cmn.w	r3, #4
 80123d6:	d104      	bne.n	80123e2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80123d8:	7b7b      	ldrb	r3, [r7, #13]
 80123da:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80123dc:	2301      	movs	r3, #1
 80123de:	76fb      	strb	r3, [r7, #27]
 80123e0:	e011      	b.n	8012406 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80123e2:	7e3b      	ldrb	r3, [r7, #24]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d00e      	beq.n	8012406 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6a1b      	ldr	r3, [r3, #32]
 80123ec:	699b      	ldr	r3, [r3, #24]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d102      	bne.n	80123f8 <lwip_netconn_do_writemore+0x348>
 80123f2:	f06f 0306 	mvn.w	r3, #6
 80123f6:	e000      	b.n	80123fa <lwip_netconn_do_writemore+0x34a>
 80123f8:	2300      	movs	r3, #0
 80123fa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80123fc:	2301      	movs	r3, #1
 80123fe:	76fb      	strb	r3, [r7, #27]
 8012400:	e001      	b.n	8012406 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8012402:	2301      	movs	r3, #1
 8012404:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8012406:	7efb      	ldrb	r3, [r7, #27]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d015      	beq.n	8012438 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	6a1b      	ldr	r3, [r3, #32]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	330c      	adds	r3, #12
 8012414:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	6a1b      	ldr	r3, [r3, #32]
 801241a:	7ffa      	ldrb	r2, [r7, #31]
 801241c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2200      	movs	r2, #0
 8012422:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2200      	movs	r2, #0
 8012428:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801242a:	78fb      	ldrb	r3, [r7, #3]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d006      	beq.n	801243e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8012430:	68b8      	ldr	r0, [r7, #8]
 8012432:	f00b fc61 	bl	801dcf8 <sys_sem_signal>
 8012436:	e002      	b.n	801243e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8012438:	f04f 33ff 	mov.w	r3, #4294967295
 801243c:	e000      	b.n	8012440 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 801243e:	2300      	movs	r3, #0
}
 8012440:	4618      	mov	r0, r3
 8012442:	3720      	adds	r7, #32
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}

08012448 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b084      	sub	sp, #16
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	4618      	mov	r0, r3
 801245a:	f7fe fd1c 	bl	8010e96 <netconn_err>
 801245e:	4603      	mov	r3, r0
 8012460:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8012462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d166      	bne.n	8012538 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	781b      	ldrb	r3, [r3, #0]
 8012470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012474:	2b10      	cmp	r3, #16
 8012476:	d15d      	bne.n	8012534 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	785b      	ldrb	r3, [r3, #1]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d002      	beq.n	8012488 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8012482:	23fb      	movs	r3, #251	; 0xfb
 8012484:	73fb      	strb	r3, [r7, #15]
 8012486:	e057      	b.n	8012538 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	685b      	ldr	r3, [r3, #4]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d04d      	beq.n	801252e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8012492:	68bb      	ldr	r3, [r7, #8]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	2201      	movs	r2, #1
 8012498:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801249a:	68bb      	ldr	r3, [r7, #8]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	6a1b      	ldr	r3, [r3, #32]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d006      	beq.n	80124b2 <lwip_netconn_do_write+0x6a>
 80124a4:	4b28      	ldr	r3, [pc, #160]	; (8012548 <lwip_netconn_do_write+0x100>)
 80124a6:	f240 7223 	movw	r2, #1827	; 0x723
 80124aa:	4928      	ldr	r1, [pc, #160]	; (801254c <lwip_netconn_do_write+0x104>)
 80124ac:	4828      	ldr	r0, [pc, #160]	; (8012550 <lwip_netconn_do_write+0x108>)
 80124ae:	f00b fec9 	bl	801e244 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	695b      	ldr	r3, [r3, #20]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d106      	bne.n	80124c8 <lwip_netconn_do_write+0x80>
 80124ba:	4b23      	ldr	r3, [pc, #140]	; (8012548 <lwip_netconn_do_write+0x100>)
 80124bc:	f240 7224 	movw	r2, #1828	; 0x724
 80124c0:	4924      	ldr	r1, [pc, #144]	; (8012554 <lwip_netconn_do_write+0x10c>)
 80124c2:	4823      	ldr	r0, [pc, #140]	; (8012550 <lwip_netconn_do_write+0x108>)
 80124c4:	f00b febe 	bl	801e244 <iprintf>
        msg->conn->current_msg = msg;
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	68ba      	ldr	r2, [r7, #8]
 80124ce:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	2100      	movs	r1, #0
 80124d6:	4618      	mov	r0, r3
 80124d8:	f7ff fdea 	bl	80120b0 <lwip_netconn_do_writemore>
 80124dc:	4603      	mov	r3, r0
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d02e      	beq.n	8012540 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	785b      	ldrb	r3, [r3, #1]
 80124e8:	2b01      	cmp	r3, #1
 80124ea:	d006      	beq.n	80124fa <lwip_netconn_do_write+0xb2>
 80124ec:	4b16      	ldr	r3, [pc, #88]	; (8012548 <lwip_netconn_do_write+0x100>)
 80124ee:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80124f2:	4919      	ldr	r1, [pc, #100]	; (8012558 <lwip_netconn_do_write+0x110>)
 80124f4:	4816      	ldr	r0, [pc, #88]	; (8012550 <lwip_netconn_do_write+0x108>)
 80124f6:	f00b fea5 	bl	801e244 <iprintf>
          UNLOCK_TCPIP_CORE();
 80124fa:	4818      	ldr	r0, [pc, #96]	; (801255c <lwip_netconn_do_write+0x114>)
 80124fc:	f00b fc65 	bl	801ddca <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	330c      	adds	r3, #12
 8012506:	2100      	movs	r1, #0
 8012508:	4618      	mov	r0, r3
 801250a:	f00b fbc4 	bl	801dc96 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 801250e:	4813      	ldr	r0, [pc, #76]	; (801255c <lwip_netconn_do_write+0x114>)
 8012510:	f00b fc4c 	bl	801ddac <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	785b      	ldrb	r3, [r3, #1]
 801251a:	2b01      	cmp	r3, #1
 801251c:	d110      	bne.n	8012540 <lwip_netconn_do_write+0xf8>
 801251e:	4b0a      	ldr	r3, [pc, #40]	; (8012548 <lwip_netconn_do_write+0x100>)
 8012520:	f240 722c 	movw	r2, #1836	; 0x72c
 8012524:	490c      	ldr	r1, [pc, #48]	; (8012558 <lwip_netconn_do_write+0x110>)
 8012526:	480a      	ldr	r0, [pc, #40]	; (8012550 <lwip_netconn_do_write+0x108>)
 8012528:	f00b fe8c 	bl	801e244 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 801252c:	e008      	b.n	8012540 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 801252e:	23f5      	movs	r3, #245	; 0xf5
 8012530:	73fb      	strb	r3, [r7, #15]
 8012532:	e001      	b.n	8012538 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8012534:	23fa      	movs	r3, #250	; 0xfa
 8012536:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	7bfa      	ldrb	r2, [r7, #15]
 801253c:	711a      	strb	r2, [r3, #4]
 801253e:	e000      	b.n	8012542 <lwip_netconn_do_write+0xfa>
        return;
 8012540:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8012542:	3710      	adds	r7, #16
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}
 8012548:	0801f93c 	.word	0x0801f93c
 801254c:	0801fce0 	.word	0x0801fce0
 8012550:	0801f980 	.word	0x0801f980
 8012554:	0801fe68 	.word	0x0801fe68
 8012558:	0801fcfc 	.word	0x0801fcfc
 801255c:	24015f38 	.word	0x24015f38

08012560 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b084      	sub	sp, #16
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	785b      	ldrb	r3, [r3, #1]
 8012572:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	685b      	ldr	r3, [r3, #4]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d069      	beq.n	8012652 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	781b      	ldrb	r3, [r3, #0]
 8012584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8012588:	2b10      	cmp	r3, #16
 801258a:	d162      	bne.n	8012652 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012590:	2b03      	cmp	r3, #3
 8012592:	d002      	beq.n	801259a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012594:	7afb      	ldrb	r3, [r7, #11]
 8012596:	2b02      	cmp	r3, #2
 8012598:	d05b      	beq.n	8012652 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 801259a:	7afb      	ldrb	r3, [r7, #11]
 801259c:	2b03      	cmp	r3, #3
 801259e:	d103      	bne.n	80125a8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	22f5      	movs	r2, #245	; 0xf5
 80125a4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80125a6:	e059      	b.n	801265c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80125a8:	7afb      	ldrb	r3, [r7, #11]
 80125aa:	2b01      	cmp	r3, #1
 80125ac:	d103      	bne.n	80125b6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	22fb      	movs	r2, #251	; 0xfb
 80125b2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80125b4:	e052      	b.n	801265c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	7a1b      	ldrb	r3, [r3, #8]
 80125ba:	f003 0301 	and.w	r3, r3, #1
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d004      	beq.n	80125cc <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	4618      	mov	r0, r3
 80125c8:	f7ff f99e 	bl	8011908 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	6a1b      	ldr	r3, [r3, #32]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d006      	beq.n	80125e4 <lwip_netconn_do_close+0x84>
 80125d6:	4b23      	ldr	r3, [pc, #140]	; (8012664 <lwip_netconn_do_close+0x104>)
 80125d8:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80125dc:	4922      	ldr	r1, [pc, #136]	; (8012668 <lwip_netconn_do_close+0x108>)
 80125de:	4823      	ldr	r0, [pc, #140]	; (801266c <lwip_netconn_do_close+0x10c>)
 80125e0:	f00b fe30 	bl	801e244 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	2204      	movs	r2, #4
 80125ea:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	68fa      	ldr	r2, [r7, #12]
 80125f2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	2100      	movs	r1, #0
 80125fa:	4618      	mov	r0, r3
 80125fc:	f7ff fa02 	bl	8011a04 <lwip_netconn_do_close_internal>
 8012600:	4603      	mov	r3, r0
 8012602:	2b00      	cmp	r3, #0
 8012604:	d029      	beq.n	801265a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	785b      	ldrb	r3, [r3, #1]
 801260c:	2b04      	cmp	r3, #4
 801260e:	d006      	beq.n	801261e <lwip_netconn_do_close+0xbe>
 8012610:	4b14      	ldr	r3, [pc, #80]	; (8012664 <lwip_netconn_do_close+0x104>)
 8012612:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8012616:	4916      	ldr	r1, [pc, #88]	; (8012670 <lwip_netconn_do_close+0x110>)
 8012618:	4814      	ldr	r0, [pc, #80]	; (801266c <lwip_netconn_do_close+0x10c>)
 801261a:	f00b fe13 	bl	801e244 <iprintf>
        UNLOCK_TCPIP_CORE();
 801261e:	4815      	ldr	r0, [pc, #84]	; (8012674 <lwip_netconn_do_close+0x114>)
 8012620:	f00b fbd3 	bl	801ddca <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	330c      	adds	r3, #12
 801262a:	2100      	movs	r1, #0
 801262c:	4618      	mov	r0, r3
 801262e:	f00b fb32 	bl	801dc96 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8012632:	4810      	ldr	r0, [pc, #64]	; (8012674 <lwip_netconn_do_close+0x114>)
 8012634:	f00b fbba 	bl	801ddac <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	785b      	ldrb	r3, [r3, #1]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d00b      	beq.n	801265a <lwip_netconn_do_close+0xfa>
 8012642:	4b08      	ldr	r3, [pc, #32]	; (8012664 <lwip_netconn_do_close+0x104>)
 8012644:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8012648:	4909      	ldr	r1, [pc, #36]	; (8012670 <lwip_netconn_do_close+0x110>)
 801264a:	4808      	ldr	r0, [pc, #32]	; (801266c <lwip_netconn_do_close+0x10c>)
 801264c:	f00b fdfa 	bl	801e244 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8012650:	e003      	b.n	801265a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	22f5      	movs	r2, #245	; 0xf5
 8012656:	711a      	strb	r2, [r3, #4]
 8012658:	e000      	b.n	801265c <lwip_netconn_do_close+0xfc>
      return;
 801265a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 801265c:	3710      	adds	r7, #16
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}
 8012662:	bf00      	nop
 8012664:	0801f93c 	.word	0x0801f93c
 8012668:	0801fce0 	.word	0x0801fce0
 801266c:	0801f980 	.word	0x0801f980
 8012670:	0801fcfc 	.word	0x0801fcfc
 8012674:	24015f38 	.word	0x24015f38

08012678 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b082      	sub	sp, #8
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d013      	beq.n	80126ae <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d00b      	beq.n	80126a6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	4618      	mov	r0, r3
 8012694:	f001 ff72 	bl	801457c <pbuf_free>
      buf->p = buf->ptr = NULL;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2200      	movs	r2, #0
 801269c:	605a      	str	r2, [r3, #4]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	685a      	ldr	r2, [r3, #4]
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80126a6:	6879      	ldr	r1, [r7, #4]
 80126a8:	2006      	movs	r0, #6
 80126aa:	f001 f8bf 	bl	801382c <memp_free>
  }
}
 80126ae:	bf00      	nop
 80126b0:	3708      	adds	r7, #8
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}
	...

080126b8 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d108      	bne.n	80126d8 <netbuf_next+0x20>
 80126c6:	4b11      	ldr	r3, [pc, #68]	; (801270c <netbuf_next+0x54>)
 80126c8:	22e0      	movs	r2, #224	; 0xe0
 80126ca:	4911      	ldr	r1, [pc, #68]	; (8012710 <netbuf_next+0x58>)
 80126cc:	4811      	ldr	r0, [pc, #68]	; (8012714 <netbuf_next+0x5c>)
 80126ce:	f00b fdb9 	bl	801e244 <iprintf>
 80126d2:	f04f 33ff 	mov.w	r3, #4294967295
 80126d6:	e014      	b.n	8012702 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	685b      	ldr	r3, [r3, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d102      	bne.n	80126e8 <netbuf_next+0x30>
    return -1;
 80126e2:	f04f 33ff 	mov.w	r3, #4294967295
 80126e6:	e00c      	b.n	8012702 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	685b      	ldr	r3, [r3, #4]
 80126ec:	681a      	ldr	r2, [r3, #0]
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	685b      	ldr	r3, [r3, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d101      	bne.n	8012700 <netbuf_next+0x48>
    return 1;
 80126fc:	2301      	movs	r3, #1
 80126fe:	e000      	b.n	8012702 <netbuf_next+0x4a>
  }
  return 0;
 8012700:	2300      	movs	r3, #0
}
 8012702:	4618      	mov	r0, r3
 8012704:	3708      	adds	r7, #8
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}
 801270a:	bf00      	nop
 801270c:	0801fe94 	.word	0x0801fe94
 8012710:	0801fff4 	.word	0x0801fff4
 8012714:	0801fee4 	.word	0x0801fee4

08012718 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b084      	sub	sp, #16
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012722:	f008 fbc3 	bl	801aeac <sys_timeouts_sleeptime>
 8012726:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801272e:	d10b      	bne.n	8012748 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012730:	4813      	ldr	r0, [pc, #76]	; (8012780 <tcpip_timeouts_mbox_fetch+0x68>)
 8012732:	f00b fb4a 	bl	801ddca <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012736:	2200      	movs	r2, #0
 8012738:	6839      	ldr	r1, [r7, #0]
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f00b fa20 	bl	801db80 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012740:	480f      	ldr	r0, [pc, #60]	; (8012780 <tcpip_timeouts_mbox_fetch+0x68>)
 8012742:	f00b fb33 	bl	801ddac <sys_mutex_lock>
    return;
 8012746:	e018      	b.n	801277a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d102      	bne.n	8012754 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801274e:	f008 fb73 	bl	801ae38 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012752:	e7e6      	b.n	8012722 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012754:	480a      	ldr	r0, [pc, #40]	; (8012780 <tcpip_timeouts_mbox_fetch+0x68>)
 8012756:	f00b fb38 	bl	801ddca <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801275a:	68fa      	ldr	r2, [r7, #12]
 801275c:	6839      	ldr	r1, [r7, #0]
 801275e:	6878      	ldr	r0, [r7, #4]
 8012760:	f00b fa0e 	bl	801db80 <sys_arch_mbox_fetch>
 8012764:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012766:	4806      	ldr	r0, [pc, #24]	; (8012780 <tcpip_timeouts_mbox_fetch+0x68>)
 8012768:	f00b fb20 	bl	801ddac <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801276c:	68bb      	ldr	r3, [r7, #8]
 801276e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012772:	d102      	bne.n	801277a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012774:	f008 fb60 	bl	801ae38 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012778:	e7d3      	b.n	8012722 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801277a:	3710      	adds	r7, #16
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}
 8012780:	24015f38 	.word	0x24015f38

08012784 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b084      	sub	sp, #16
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801278c:	4810      	ldr	r0, [pc, #64]	; (80127d0 <tcpip_thread+0x4c>)
 801278e:	f00b fb0d 	bl	801ddac <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012792:	4b10      	ldr	r3, [pc, #64]	; (80127d4 <tcpip_thread+0x50>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d005      	beq.n	80127a6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801279a:	4b0e      	ldr	r3, [pc, #56]	; (80127d4 <tcpip_thread+0x50>)
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	4a0e      	ldr	r2, [pc, #56]	; (80127d8 <tcpip_thread+0x54>)
 80127a0:	6812      	ldr	r2, [r2, #0]
 80127a2:	4610      	mov	r0, r2
 80127a4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80127a6:	f107 030c 	add.w	r3, r7, #12
 80127aa:	4619      	mov	r1, r3
 80127ac:	480b      	ldr	r0, [pc, #44]	; (80127dc <tcpip_thread+0x58>)
 80127ae:	f7ff ffb3 	bl	8012718 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d106      	bne.n	80127c6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80127b8:	4b09      	ldr	r3, [pc, #36]	; (80127e0 <tcpip_thread+0x5c>)
 80127ba:	2291      	movs	r2, #145	; 0x91
 80127bc:	4909      	ldr	r1, [pc, #36]	; (80127e4 <tcpip_thread+0x60>)
 80127be:	480a      	ldr	r0, [pc, #40]	; (80127e8 <tcpip_thread+0x64>)
 80127c0:	f00b fd40 	bl	801e244 <iprintf>
      continue;
 80127c4:	e003      	b.n	80127ce <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	4618      	mov	r0, r3
 80127ca:	f000 f80f 	bl	80127ec <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80127ce:	e7ea      	b.n	80127a6 <tcpip_thread+0x22>
 80127d0:	24015f38 	.word	0x24015f38
 80127d4:	24015f2c 	.word	0x24015f2c
 80127d8:	24015f30 	.word	0x24015f30
 80127dc:	24015f34 	.word	0x24015f34
 80127e0:	0802002c 	.word	0x0802002c
 80127e4:	0802005c 	.word	0x0802005c
 80127e8:	0802007c 	.word	0x0802007c

080127ec <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b082      	sub	sp, #8
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	2b02      	cmp	r3, #2
 80127fa:	d026      	beq.n	801284a <tcpip_thread_handle_msg+0x5e>
 80127fc:	2b02      	cmp	r3, #2
 80127fe:	dc2b      	bgt.n	8012858 <tcpip_thread_handle_msg+0x6c>
 8012800:	2b00      	cmp	r3, #0
 8012802:	d002      	beq.n	801280a <tcpip_thread_handle_msg+0x1e>
 8012804:	2b01      	cmp	r3, #1
 8012806:	d015      	beq.n	8012834 <tcpip_thread_handle_msg+0x48>
 8012808:	e026      	b.n	8012858 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	68db      	ldr	r3, [r3, #12]
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	6850      	ldr	r0, [r2, #4]
 8012812:	687a      	ldr	r2, [r7, #4]
 8012814:	6892      	ldr	r2, [r2, #8]
 8012816:	4611      	mov	r1, r2
 8012818:	4798      	blx	r3
 801281a:	4603      	mov	r3, r0
 801281c:	2b00      	cmp	r3, #0
 801281e:	d004      	beq.n	801282a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	685b      	ldr	r3, [r3, #4]
 8012824:	4618      	mov	r0, r3
 8012826:	f001 fea9 	bl	801457c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801282a:	6879      	ldr	r1, [r7, #4]
 801282c:	2009      	movs	r0, #9
 801282e:	f000 fffd 	bl	801382c <memp_free>
      break;
 8012832:	e018      	b.n	8012866 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	687a      	ldr	r2, [r7, #4]
 801283a:	6892      	ldr	r2, [r2, #8]
 801283c:	4610      	mov	r0, r2
 801283e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012840:	6879      	ldr	r1, [r7, #4]
 8012842:	2008      	movs	r0, #8
 8012844:	f000 fff2 	bl	801382c <memp_free>
      break;
 8012848:	e00d      	b.n	8012866 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	685b      	ldr	r3, [r3, #4]
 801284e:	687a      	ldr	r2, [r7, #4]
 8012850:	6892      	ldr	r2, [r2, #8]
 8012852:	4610      	mov	r0, r2
 8012854:	4798      	blx	r3
      break;
 8012856:	e006      	b.n	8012866 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012858:	4b05      	ldr	r3, [pc, #20]	; (8012870 <tcpip_thread_handle_msg+0x84>)
 801285a:	22cf      	movs	r2, #207	; 0xcf
 801285c:	4905      	ldr	r1, [pc, #20]	; (8012874 <tcpip_thread_handle_msg+0x88>)
 801285e:	4806      	ldr	r0, [pc, #24]	; (8012878 <tcpip_thread_handle_msg+0x8c>)
 8012860:	f00b fcf0 	bl	801e244 <iprintf>
      break;
 8012864:	bf00      	nop
  }
}
 8012866:	bf00      	nop
 8012868:	3708      	adds	r7, #8
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}
 801286e:	bf00      	nop
 8012870:	0802002c 	.word	0x0802002c
 8012874:	0802005c 	.word	0x0802005c
 8012878:	0802007c 	.word	0x0802007c

0801287c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b086      	sub	sp, #24
 8012880:	af00      	add	r7, sp, #0
 8012882:	60f8      	str	r0, [r7, #12]
 8012884:	60b9      	str	r1, [r7, #8]
 8012886:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012888:	481a      	ldr	r0, [pc, #104]	; (80128f4 <tcpip_inpkt+0x78>)
 801288a:	f00b f9c1 	bl	801dc10 <sys_mbox_valid>
 801288e:	4603      	mov	r3, r0
 8012890:	2b00      	cmp	r3, #0
 8012892:	d105      	bne.n	80128a0 <tcpip_inpkt+0x24>
 8012894:	4b18      	ldr	r3, [pc, #96]	; (80128f8 <tcpip_inpkt+0x7c>)
 8012896:	22fc      	movs	r2, #252	; 0xfc
 8012898:	4918      	ldr	r1, [pc, #96]	; (80128fc <tcpip_inpkt+0x80>)
 801289a:	4819      	ldr	r0, [pc, #100]	; (8012900 <tcpip_inpkt+0x84>)
 801289c:	f00b fcd2 	bl	801e244 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80128a0:	2009      	movs	r0, #9
 80128a2:	f000 ff4d 	bl	8013740 <memp_malloc>
 80128a6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80128a8:	697b      	ldr	r3, [r7, #20]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d102      	bne.n	80128b4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80128ae:	f04f 33ff 	mov.w	r3, #4294967295
 80128b2:	e01a      	b.n	80128ea <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	2200      	movs	r2, #0
 80128b8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80128ba:	697b      	ldr	r3, [r7, #20]
 80128bc:	68fa      	ldr	r2, [r7, #12]
 80128be:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80128c0:	697b      	ldr	r3, [r7, #20]
 80128c2:	68ba      	ldr	r2, [r7, #8]
 80128c4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80128c6:	697b      	ldr	r3, [r7, #20]
 80128c8:	687a      	ldr	r2, [r7, #4]
 80128ca:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80128cc:	6979      	ldr	r1, [r7, #20]
 80128ce:	4809      	ldr	r0, [pc, #36]	; (80128f4 <tcpip_inpkt+0x78>)
 80128d0:	f00b f93c 	bl	801db4c <sys_mbox_trypost>
 80128d4:	4603      	mov	r3, r0
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d006      	beq.n	80128e8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80128da:	6979      	ldr	r1, [r7, #20]
 80128dc:	2009      	movs	r0, #9
 80128de:	f000 ffa5 	bl	801382c <memp_free>
    return ERR_MEM;
 80128e2:	f04f 33ff 	mov.w	r3, #4294967295
 80128e6:	e000      	b.n	80128ea <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80128e8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80128ea:	4618      	mov	r0, r3
 80128ec:	3718      	adds	r7, #24
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}
 80128f2:	bf00      	nop
 80128f4:	24015f34 	.word	0x24015f34
 80128f8:	0802002c 	.word	0x0802002c
 80128fc:	080200a4 	.word	0x080200a4
 8012900:	0802007c 	.word	0x0802007c

08012904 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b082      	sub	sp, #8
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
 801290c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012914:	f003 0318 	and.w	r3, r3, #24
 8012918:	2b00      	cmp	r3, #0
 801291a:	d006      	beq.n	801292a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801291c:	4a08      	ldr	r2, [pc, #32]	; (8012940 <tcpip_input+0x3c>)
 801291e:	6839      	ldr	r1, [r7, #0]
 8012920:	6878      	ldr	r0, [r7, #4]
 8012922:	f7ff ffab 	bl	801287c <tcpip_inpkt>
 8012926:	4603      	mov	r3, r0
 8012928:	e005      	b.n	8012936 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801292a:	4a06      	ldr	r2, [pc, #24]	; (8012944 <tcpip_input+0x40>)
 801292c:	6839      	ldr	r1, [r7, #0]
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	f7ff ffa4 	bl	801287c <tcpip_inpkt>
 8012934:	4603      	mov	r3, r0
}
 8012936:	4618      	mov	r0, r3
 8012938:	3708      	adds	r7, #8
 801293a:	46bd      	mov	sp, r7
 801293c:	bd80      	pop	{r7, pc}
 801293e:	bf00      	nop
 8012940:	0801d949 	.word	0x0801d949
 8012944:	0801c851 	.word	0x0801c851

08012948 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b084      	sub	sp, #16
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
 8012950:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012952:	4819      	ldr	r0, [pc, #100]	; (80129b8 <tcpip_try_callback+0x70>)
 8012954:	f00b f95c 	bl	801dc10 <sys_mbox_valid>
 8012958:	4603      	mov	r3, r0
 801295a:	2b00      	cmp	r3, #0
 801295c:	d106      	bne.n	801296c <tcpip_try_callback+0x24>
 801295e:	4b17      	ldr	r3, [pc, #92]	; (80129bc <tcpip_try_callback+0x74>)
 8012960:	f240 125d 	movw	r2, #349	; 0x15d
 8012964:	4916      	ldr	r1, [pc, #88]	; (80129c0 <tcpip_try_callback+0x78>)
 8012966:	4817      	ldr	r0, [pc, #92]	; (80129c4 <tcpip_try_callback+0x7c>)
 8012968:	f00b fc6c 	bl	801e244 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801296c:	2008      	movs	r0, #8
 801296e:	f000 fee7 	bl	8013740 <memp_malloc>
 8012972:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d102      	bne.n	8012980 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801297a:	f04f 33ff 	mov.w	r3, #4294967295
 801297e:	e017      	b.n	80129b0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	2201      	movs	r2, #1
 8012984:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	687a      	ldr	r2, [r7, #4]
 801298a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	683a      	ldr	r2, [r7, #0]
 8012990:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012992:	68f9      	ldr	r1, [r7, #12]
 8012994:	4808      	ldr	r0, [pc, #32]	; (80129b8 <tcpip_try_callback+0x70>)
 8012996:	f00b f8d9 	bl	801db4c <sys_mbox_trypost>
 801299a:	4603      	mov	r3, r0
 801299c:	2b00      	cmp	r3, #0
 801299e:	d006      	beq.n	80129ae <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80129a0:	68f9      	ldr	r1, [r7, #12]
 80129a2:	2008      	movs	r0, #8
 80129a4:	f000 ff42 	bl	801382c <memp_free>
    return ERR_MEM;
 80129a8:	f04f 33ff 	mov.w	r3, #4294967295
 80129ac:	e000      	b.n	80129b0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80129ae:	2300      	movs	r3, #0
}
 80129b0:	4618      	mov	r0, r3
 80129b2:	3710      	adds	r7, #16
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd80      	pop	{r7, pc}
 80129b8:	24015f34 	.word	0x24015f34
 80129bc:	0802002c 	.word	0x0802002c
 80129c0:	080200a4 	.word	0x080200a4
 80129c4:	0802007c 	.word	0x0802007c

080129c8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b084      	sub	sp, #16
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	60f8      	str	r0, [r7, #12]
 80129d0:	60b9      	str	r1, [r7, #8]
 80129d2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80129d4:	4806      	ldr	r0, [pc, #24]	; (80129f0 <tcpip_send_msg_wait_sem+0x28>)
 80129d6:	f00b f9e9 	bl	801ddac <sys_mutex_lock>
  fn(apimsg);
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	68b8      	ldr	r0, [r7, #8]
 80129de:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80129e0:	4803      	ldr	r0, [pc, #12]	; (80129f0 <tcpip_send_msg_wait_sem+0x28>)
 80129e2:	f00b f9f2 	bl	801ddca <sys_mutex_unlock>
  return ERR_OK;
 80129e6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80129e8:	4618      	mov	r0, r3
 80129ea:	3710      	adds	r7, #16
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}
 80129f0:	24015f38 	.word	0x24015f38

080129f4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b084      	sub	sp, #16
 80129f8:	af02      	add	r7, sp, #8
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	6039      	str	r1, [r7, #0]
  lwip_init();
 80129fe:	f000 f9ea 	bl	8012dd6 <lwip_init>

  tcpip_init_done = initfunc;
 8012a02:	4a17      	ldr	r2, [pc, #92]	; (8012a60 <tcpip_init+0x6c>)
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012a08:	4a16      	ldr	r2, [pc, #88]	; (8012a64 <tcpip_init+0x70>)
 8012a0a:	683b      	ldr	r3, [r7, #0]
 8012a0c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012a0e:	2106      	movs	r1, #6
 8012a10:	4815      	ldr	r0, [pc, #84]	; (8012a68 <tcpip_init+0x74>)
 8012a12:	f00b f86f 	bl	801daf4 <sys_mbox_new>
 8012a16:	4603      	mov	r3, r0
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d006      	beq.n	8012a2a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012a1c:	4b13      	ldr	r3, [pc, #76]	; (8012a6c <tcpip_init+0x78>)
 8012a1e:	f240 2261 	movw	r2, #609	; 0x261
 8012a22:	4913      	ldr	r1, [pc, #76]	; (8012a70 <tcpip_init+0x7c>)
 8012a24:	4813      	ldr	r0, [pc, #76]	; (8012a74 <tcpip_init+0x80>)
 8012a26:	f00b fc0d 	bl	801e244 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012a2a:	4813      	ldr	r0, [pc, #76]	; (8012a78 <tcpip_init+0x84>)
 8012a2c:	f00b f9a8 	bl	801dd80 <sys_mutex_new>
 8012a30:	4603      	mov	r3, r0
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d006      	beq.n	8012a44 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012a36:	4b0d      	ldr	r3, [pc, #52]	; (8012a6c <tcpip_init+0x78>)
 8012a38:	f240 2265 	movw	r2, #613	; 0x265
 8012a3c:	490f      	ldr	r1, [pc, #60]	; (8012a7c <tcpip_init+0x88>)
 8012a3e:	480d      	ldr	r0, [pc, #52]	; (8012a74 <tcpip_init+0x80>)
 8012a40:	f00b fc00 	bl	801e244 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012a44:	2318      	movs	r3, #24
 8012a46:	9300      	str	r3, [sp, #0]
 8012a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	490c      	ldr	r1, [pc, #48]	; (8012a80 <tcpip_init+0x8c>)
 8012a50:	480c      	ldr	r0, [pc, #48]	; (8012a84 <tcpip_init+0x90>)
 8012a52:	f00b f9c7 	bl	801dde4 <sys_thread_new>
}
 8012a56:	bf00      	nop
 8012a58:	3708      	adds	r7, #8
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
 8012a5e:	bf00      	nop
 8012a60:	24015f2c 	.word	0x24015f2c
 8012a64:	24015f30 	.word	0x24015f30
 8012a68:	24015f34 	.word	0x24015f34
 8012a6c:	0802002c 	.word	0x0802002c
 8012a70:	080200b4 	.word	0x080200b4
 8012a74:	0802007c 	.word	0x0802007c
 8012a78:	24015f38 	.word	0x24015f38
 8012a7c:	080200d8 	.word	0x080200d8
 8012a80:	08012785 	.word	0x08012785
 8012a84:	080200fc 	.word	0x080200fc

08012a88 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012a88:	b480      	push	{r7}
 8012a8a:	b083      	sub	sp, #12
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	4603      	mov	r3, r0
 8012a90:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012a92:	88fb      	ldrh	r3, [r7, #6]
 8012a94:	021b      	lsls	r3, r3, #8
 8012a96:	b21a      	sxth	r2, r3
 8012a98:	88fb      	ldrh	r3, [r7, #6]
 8012a9a:	0a1b      	lsrs	r3, r3, #8
 8012a9c:	b29b      	uxth	r3, r3
 8012a9e:	b21b      	sxth	r3, r3
 8012aa0:	4313      	orrs	r3, r2
 8012aa2:	b21b      	sxth	r3, r3
 8012aa4:	b29b      	uxth	r3, r3
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	370c      	adds	r7, #12
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab0:	4770      	bx	lr

08012ab2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012ab2:	b480      	push	{r7}
 8012ab4:	b083      	sub	sp, #12
 8012ab6:	af00      	add	r7, sp, #0
 8012ab8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	061a      	lsls	r2, r3, #24
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	021b      	lsls	r3, r3, #8
 8012ac2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012ac6:	431a      	orrs	r2, r3
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	0a1b      	lsrs	r3, r3, #8
 8012acc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012ad0:	431a      	orrs	r2, r3
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	0e1b      	lsrs	r3, r3, #24
 8012ad6:	4313      	orrs	r3, r2
}
 8012ad8:	4618      	mov	r0, r3
 8012ada:	370c      	adds	r7, #12
 8012adc:	46bd      	mov	sp, r7
 8012ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae2:	4770      	bx	lr

08012ae4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8012ae4:	b480      	push	{r7}
 8012ae6:	b089      	sub	sp, #36	; 0x24
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
 8012aec:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8012af2:	2300      	movs	r3, #0
 8012af4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8012af6:	2300      	movs	r3, #0
 8012af8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8012afa:	69fb      	ldr	r3, [r7, #28]
 8012afc:	f003 0301 	and.w	r3, r3, #1
 8012b00:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8012b02:	693b      	ldr	r3, [r7, #16]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d00d      	beq.n	8012b24 <lwip_standard_chksum+0x40>
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	dd0a      	ble.n	8012b24 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8012b0e:	69fa      	ldr	r2, [r7, #28]
 8012b10:	1c53      	adds	r3, r2, #1
 8012b12:	61fb      	str	r3, [r7, #28]
 8012b14:	f107 030e 	add.w	r3, r7, #14
 8012b18:	3301      	adds	r3, #1
 8012b1a:	7812      	ldrb	r2, [r2, #0]
 8012b1c:	701a      	strb	r2, [r3, #0]
    len--;
 8012b1e:	683b      	ldr	r3, [r7, #0]
 8012b20:	3b01      	subs	r3, #1
 8012b22:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8012b24:	69fb      	ldr	r3, [r7, #28]
 8012b26:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8012b28:	e00a      	b.n	8012b40 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8012b2a:	69bb      	ldr	r3, [r7, #24]
 8012b2c:	1c9a      	adds	r2, r3, #2
 8012b2e:	61ba      	str	r2, [r7, #24]
 8012b30:	881b      	ldrh	r3, [r3, #0]
 8012b32:	461a      	mov	r2, r3
 8012b34:	697b      	ldr	r3, [r7, #20]
 8012b36:	4413      	add	r3, r2
 8012b38:	617b      	str	r3, [r7, #20]
    len -= 2;
 8012b3a:	683b      	ldr	r3, [r7, #0]
 8012b3c:	3b02      	subs	r3, #2
 8012b3e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	2b01      	cmp	r3, #1
 8012b44:	dcf1      	bgt.n	8012b2a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8012b46:	683b      	ldr	r3, [r7, #0]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	dd04      	ble.n	8012b56 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8012b4c:	f107 030e 	add.w	r3, r7, #14
 8012b50:	69ba      	ldr	r2, [r7, #24]
 8012b52:	7812      	ldrb	r2, [r2, #0]
 8012b54:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8012b56:	89fb      	ldrh	r3, [r7, #14]
 8012b58:	461a      	mov	r2, r3
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	4413      	add	r3, r2
 8012b5e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	0c1a      	lsrs	r2, r3, #16
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	4413      	add	r3, r2
 8012b6a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	0c1a      	lsrs	r2, r3, #16
 8012b70:	697b      	ldr	r3, [r7, #20]
 8012b72:	b29b      	uxth	r3, r3
 8012b74:	4413      	add	r3, r2
 8012b76:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d007      	beq.n	8012b8e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8012b7e:	697b      	ldr	r3, [r7, #20]
 8012b80:	021b      	lsls	r3, r3, #8
 8012b82:	b29a      	uxth	r2, r3
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	0a1b      	lsrs	r3, r3, #8
 8012b88:	b2db      	uxtb	r3, r3
 8012b8a:	4313      	orrs	r3, r2
 8012b8c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8012b8e:	697b      	ldr	r3, [r7, #20]
 8012b90:	b29b      	uxth	r3, r3
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	3724      	adds	r7, #36	; 0x24
 8012b96:	46bd      	mov	sp, r7
 8012b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9c:	4770      	bx	lr

08012b9e <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8012b9e:	b580      	push	{r7, lr}
 8012ba0:	b086      	sub	sp, #24
 8012ba2:	af00      	add	r7, sp, #0
 8012ba4:	60f8      	str	r0, [r7, #12]
 8012ba6:	607b      	str	r3, [r7, #4]
 8012ba8:	460b      	mov	r3, r1
 8012baa:	72fb      	strb	r3, [r7, #11]
 8012bac:	4613      	mov	r3, r2
 8012bae:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	617b      	str	r3, [r7, #20]
 8012bb8:	e02b      	b.n	8012c12 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	685a      	ldr	r2, [r3, #4]
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	895b      	ldrh	r3, [r3, #10]
 8012bc2:	4619      	mov	r1, r3
 8012bc4:	4610      	mov	r0, r2
 8012bc6:	f7ff ff8d 	bl	8012ae4 <lwip_standard_chksum>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	461a      	mov	r2, r3
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	4413      	add	r3, r2
 8012bd2:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	0c1a      	lsrs	r2, r3, #16
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	b29b      	uxth	r3, r3
 8012bdc:	4413      	add	r3, r2
 8012bde:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	895b      	ldrh	r3, [r3, #10]
 8012be4:	f003 0301 	and.w	r3, r3, #1
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d00e      	beq.n	8012c0c <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 8012bee:	693b      	ldr	r3, [r7, #16]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	bf0c      	ite	eq
 8012bf4:	2301      	moveq	r3, #1
 8012bf6:	2300      	movne	r3, #0
 8012bf8:	b2db      	uxtb	r3, r3
 8012bfa:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	021b      	lsls	r3, r3, #8
 8012c00:	b29a      	uxth	r2, r3
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	0a1b      	lsrs	r3, r3, #8
 8012c06:	b2db      	uxtb	r3, r3
 8012c08:	4313      	orrs	r3, r2
 8012c0a:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 8012c0c:	697b      	ldr	r3, [r7, #20]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	617b      	str	r3, [r7, #20]
 8012c12:	697b      	ldr	r3, [r7, #20]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d1d0      	bne.n	8012bba <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8012c18:	693b      	ldr	r3, [r7, #16]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d007      	beq.n	8012c2e <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	021b      	lsls	r3, r3, #8
 8012c22:	b29a      	uxth	r2, r3
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	0a1b      	lsrs	r3, r3, #8
 8012c28:	b2db      	uxtb	r3, r3
 8012c2a:	4313      	orrs	r3, r2
 8012c2c:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8012c2e:	7afb      	ldrb	r3, [r7, #11]
 8012c30:	b29b      	uxth	r3, r3
 8012c32:	4618      	mov	r0, r3
 8012c34:	f7ff ff28 	bl	8012a88 <lwip_htons>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	461a      	mov	r2, r3
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	4413      	add	r3, r2
 8012c40:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8012c42:	893b      	ldrh	r3, [r7, #8]
 8012c44:	4618      	mov	r0, r3
 8012c46:	f7ff ff1f 	bl	8012a88 <lwip_htons>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	461a      	mov	r2, r3
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	4413      	add	r3, r2
 8012c52:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	0c1a      	lsrs	r2, r3, #16
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	b29b      	uxth	r3, r3
 8012c5c:	4413      	add	r3, r2
 8012c5e:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	0c1a      	lsrs	r2, r3, #16
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	b29b      	uxth	r3, r3
 8012c68:	4413      	add	r3, r2
 8012c6a:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	b29b      	uxth	r3, r3
 8012c70:	43db      	mvns	r3, r3
 8012c72:	b29b      	uxth	r3, r3
}
 8012c74:	4618      	mov	r0, r3
 8012c76:	3718      	adds	r7, #24
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}

08012c7c <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b086      	sub	sp, #24
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	60f8      	str	r0, [r7, #12]
 8012c84:	607b      	str	r3, [r7, #4]
 8012c86:	460b      	mov	r3, r1
 8012c88:	72fb      	strb	r3, [r7, #11]
 8012c8a:	4613      	mov	r3, r2
 8012c8c:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	b29b      	uxth	r3, r3
 8012c98:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	0c1b      	lsrs	r3, r3, #16
 8012c9e:	693a      	ldr	r2, [r7, #16]
 8012ca0:	4413      	add	r3, r2
 8012ca2:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8012ca4:	6a3b      	ldr	r3, [r7, #32]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	b29b      	uxth	r3, r3
 8012cae:	693a      	ldr	r2, [r7, #16]
 8012cb0:	4413      	add	r3, r2
 8012cb2:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8012cb4:	697b      	ldr	r3, [r7, #20]
 8012cb6:	0c1b      	lsrs	r3, r3, #16
 8012cb8:	693a      	ldr	r2, [r7, #16]
 8012cba:	4413      	add	r3, r2
 8012cbc:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8012cbe:	693b      	ldr	r3, [r7, #16]
 8012cc0:	0c1a      	lsrs	r2, r3, #16
 8012cc2:	693b      	ldr	r3, [r7, #16]
 8012cc4:	b29b      	uxth	r3, r3
 8012cc6:	4413      	add	r3, r2
 8012cc8:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 8012cca:	693b      	ldr	r3, [r7, #16]
 8012ccc:	0c1a      	lsrs	r2, r3, #16
 8012cce:	693b      	ldr	r3, [r7, #16]
 8012cd0:	b29b      	uxth	r3, r3
 8012cd2:	4413      	add	r3, r2
 8012cd4:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8012cd6:	893a      	ldrh	r2, [r7, #8]
 8012cd8:	7af9      	ldrb	r1, [r7, #11]
 8012cda:	693b      	ldr	r3, [r7, #16]
 8012cdc:	68f8      	ldr	r0, [r7, #12]
 8012cde:	f7ff ff5e 	bl	8012b9e <inet_cksum_pseudo_base>
 8012ce2:	4603      	mov	r3, r0
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3718      	adds	r7, #24
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}

08012cec <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b086      	sub	sp, #24
 8012cf0:	af02      	add	r7, sp, #8
 8012cf2:	60f8      	str	r0, [r7, #12]
 8012cf4:	607b      	str	r3, [r7, #4]
 8012cf6:	460b      	mov	r3, r1
 8012cf8:	72fb      	strb	r3, [r7, #11]
 8012cfa:	4613      	mov	r3, r2
 8012cfc:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8012cfe:	893a      	ldrh	r2, [r7, #8]
 8012d00:	7af9      	ldrb	r1, [r7, #11]
 8012d02:	69bb      	ldr	r3, [r7, #24]
 8012d04:	9300      	str	r3, [sp, #0]
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	68f8      	ldr	r0, [r7, #12]
 8012d0a:	f7ff ffb7 	bl	8012c7c <inet_chksum_pseudo>
 8012d0e:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8012d10:	4618      	mov	r0, r3
 8012d12:	3710      	adds	r7, #16
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}

08012d18 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b082      	sub	sp, #8
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
 8012d20:	460b      	mov	r3, r1
 8012d22:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8012d24:	887b      	ldrh	r3, [r7, #2]
 8012d26:	4619      	mov	r1, r3
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f7ff fedb 	bl	8012ae4 <lwip_standard_chksum>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	43db      	mvns	r3, r3
 8012d32:	b29b      	uxth	r3, r3
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3708      	adds	r7, #8
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}

08012d3c <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b086      	sub	sp, #24
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8012d44:	2300      	movs	r3, #0
 8012d46:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8012d48:	2300      	movs	r3, #0
 8012d4a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	613b      	str	r3, [r7, #16]
 8012d50:	e02b      	b.n	8012daa <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8012d52:	693b      	ldr	r3, [r7, #16]
 8012d54:	685a      	ldr	r2, [r3, #4]
 8012d56:	693b      	ldr	r3, [r7, #16]
 8012d58:	895b      	ldrh	r3, [r3, #10]
 8012d5a:	4619      	mov	r1, r3
 8012d5c:	4610      	mov	r0, r2
 8012d5e:	f7ff fec1 	bl	8012ae4 <lwip_standard_chksum>
 8012d62:	4603      	mov	r3, r0
 8012d64:	461a      	mov	r2, r3
 8012d66:	697b      	ldr	r3, [r7, #20]
 8012d68:	4413      	add	r3, r2
 8012d6a:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	0c1a      	lsrs	r2, r3, #16
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	b29b      	uxth	r3, r3
 8012d74:	4413      	add	r3, r2
 8012d76:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8012d78:	693b      	ldr	r3, [r7, #16]
 8012d7a:	895b      	ldrh	r3, [r3, #10]
 8012d7c:	f003 0301 	and.w	r3, r3, #1
 8012d80:	b29b      	uxth	r3, r3
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d00e      	beq.n	8012da4 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	bf0c      	ite	eq
 8012d8c:	2301      	moveq	r3, #1
 8012d8e:	2300      	movne	r3, #0
 8012d90:	b2db      	uxtb	r3, r3
 8012d92:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	021b      	lsls	r3, r3, #8
 8012d98:	b29a      	uxth	r2, r3
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	0a1b      	lsrs	r3, r3, #8
 8012d9e:	b2db      	uxtb	r3, r3
 8012da0:	4313      	orrs	r3, r2
 8012da2:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8012da4:	693b      	ldr	r3, [r7, #16]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	613b      	str	r3, [r7, #16]
 8012daa:	693b      	ldr	r3, [r7, #16]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d1d0      	bne.n	8012d52 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d007      	beq.n	8012dc6 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	021b      	lsls	r3, r3, #8
 8012dba:	b29a      	uxth	r2, r3
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	0a1b      	lsrs	r3, r3, #8
 8012dc0:	b2db      	uxtb	r3, r3
 8012dc2:	4313      	orrs	r3, r2
 8012dc4:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	b29b      	uxth	r3, r3
 8012dca:	43db      	mvns	r3, r3
 8012dcc:	b29b      	uxth	r3, r3
}
 8012dce:	4618      	mov	r0, r3
 8012dd0:	3718      	adds	r7, #24
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}

08012dd6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012dd6:	b580      	push	{r7, lr}
 8012dd8:	b082      	sub	sp, #8
 8012dda:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8012de0:	f00a ffc2 	bl	801dd68 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012de4:	f000 f8d8 	bl	8012f98 <mem_init>
  memp_init();
 8012de8:	f000 fc3c 	bl	8013664 <memp_init>
  pbuf_init();
  netif_init();
 8012dec:	f000 fd48 	bl	8013880 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012df0:	f008 f894 	bl	801af1c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012df4:	f001 fe5c 	bl	8014ab0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012df8:	f007 ffd6 	bl	801ada8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012dfc:	bf00      	nop
 8012dfe:	3708      	adds	r7, #8
 8012e00:	46bd      	mov	sp, r7
 8012e02:	bd80      	pop	{r7, pc}

08012e04 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012e04:	b480      	push	{r7}
 8012e06:	b083      	sub	sp, #12
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8012e0e:	4b05      	ldr	r3, [pc, #20]	; (8012e24 <ptr_to_mem+0x20>)
 8012e10:	681a      	ldr	r2, [r3, #0]
 8012e12:	88fb      	ldrh	r3, [r7, #6]
 8012e14:	4413      	add	r3, r2
}
 8012e16:	4618      	mov	r0, r3
 8012e18:	370c      	adds	r7, #12
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e20:	4770      	bx	lr
 8012e22:	bf00      	nop
 8012e24:	24015f54 	.word	0x24015f54

08012e28 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012e28:	b480      	push	{r7}
 8012e2a:	b083      	sub	sp, #12
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012e30:	4b05      	ldr	r3, [pc, #20]	; (8012e48 <mem_to_ptr+0x20>)
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	687a      	ldr	r2, [r7, #4]
 8012e36:	1ad3      	subs	r3, r2, r3
 8012e38:	b29b      	uxth	r3, r3
}
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	370c      	adds	r7, #12
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e44:	4770      	bx	lr
 8012e46:	bf00      	nop
 8012e48:	24015f54 	.word	0x24015f54

08012e4c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012e4c:	b590      	push	{r4, r7, lr}
 8012e4e:	b085      	sub	sp, #20
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012e54:	4b47      	ldr	r3, [pc, #284]	; (8012f74 <plug_holes+0x128>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	687a      	ldr	r2, [r7, #4]
 8012e5a:	429a      	cmp	r2, r3
 8012e5c:	d206      	bcs.n	8012e6c <plug_holes+0x20>
 8012e5e:	4b46      	ldr	r3, [pc, #280]	; (8012f78 <plug_holes+0x12c>)
 8012e60:	f240 12df 	movw	r2, #479	; 0x1df
 8012e64:	4945      	ldr	r1, [pc, #276]	; (8012f7c <plug_holes+0x130>)
 8012e66:	4846      	ldr	r0, [pc, #280]	; (8012f80 <plug_holes+0x134>)
 8012e68:	f00b f9ec 	bl	801e244 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012e6c:	4b45      	ldr	r3, [pc, #276]	; (8012f84 <plug_holes+0x138>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	687a      	ldr	r2, [r7, #4]
 8012e72:	429a      	cmp	r2, r3
 8012e74:	d306      	bcc.n	8012e84 <plug_holes+0x38>
 8012e76:	4b40      	ldr	r3, [pc, #256]	; (8012f78 <plug_holes+0x12c>)
 8012e78:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012e7c:	4942      	ldr	r1, [pc, #264]	; (8012f88 <plug_holes+0x13c>)
 8012e7e:	4840      	ldr	r0, [pc, #256]	; (8012f80 <plug_holes+0x134>)
 8012e80:	f00b f9e0 	bl	801e244 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	791b      	ldrb	r3, [r3, #4]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d006      	beq.n	8012e9a <plug_holes+0x4e>
 8012e8c:	4b3a      	ldr	r3, [pc, #232]	; (8012f78 <plug_holes+0x12c>)
 8012e8e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8012e92:	493e      	ldr	r1, [pc, #248]	; (8012f8c <plug_holes+0x140>)
 8012e94:	483a      	ldr	r0, [pc, #232]	; (8012f80 <plug_holes+0x134>)
 8012e96:	f00b f9d5 	bl	801e244 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	881b      	ldrh	r3, [r3, #0]
 8012e9e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012ea2:	4293      	cmp	r3, r2
 8012ea4:	d906      	bls.n	8012eb4 <plug_holes+0x68>
 8012ea6:	4b34      	ldr	r3, [pc, #208]	; (8012f78 <plug_holes+0x12c>)
 8012ea8:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8012eac:	4938      	ldr	r1, [pc, #224]	; (8012f90 <plug_holes+0x144>)
 8012eae:	4834      	ldr	r0, [pc, #208]	; (8012f80 <plug_holes+0x134>)
 8012eb0:	f00b f9c8 	bl	801e244 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	881b      	ldrh	r3, [r3, #0]
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7ff ffa3 	bl	8012e04 <ptr_to_mem>
 8012ebe:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012ec0:	687a      	ldr	r2, [r7, #4]
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	429a      	cmp	r2, r3
 8012ec6:	d025      	beq.n	8012f14 <plug_holes+0xc8>
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	791b      	ldrb	r3, [r3, #4]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d121      	bne.n	8012f14 <plug_holes+0xc8>
 8012ed0:	4b2c      	ldr	r3, [pc, #176]	; (8012f84 <plug_holes+0x138>)
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	68fa      	ldr	r2, [r7, #12]
 8012ed6:	429a      	cmp	r2, r3
 8012ed8:	d01c      	beq.n	8012f14 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012eda:	4b2e      	ldr	r3, [pc, #184]	; (8012f94 <plug_holes+0x148>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	68fa      	ldr	r2, [r7, #12]
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	d102      	bne.n	8012eea <plug_holes+0x9e>
      lfree = mem;
 8012ee4:	4a2b      	ldr	r2, [pc, #172]	; (8012f94 <plug_holes+0x148>)
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	881a      	ldrh	r2, [r3, #0]
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	881b      	ldrh	r3, [r3, #0]
 8012ef6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012efa:	4293      	cmp	r3, r2
 8012efc:	d00a      	beq.n	8012f14 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	881b      	ldrh	r3, [r3, #0]
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7ff ff7e 	bl	8012e04 <ptr_to_mem>
 8012f08:	4604      	mov	r4, r0
 8012f0a:	6878      	ldr	r0, [r7, #4]
 8012f0c:	f7ff ff8c 	bl	8012e28 <mem_to_ptr>
 8012f10:	4603      	mov	r3, r0
 8012f12:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	885b      	ldrh	r3, [r3, #2]
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7ff ff73 	bl	8012e04 <ptr_to_mem>
 8012f1e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012f20:	68ba      	ldr	r2, [r7, #8]
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	429a      	cmp	r2, r3
 8012f26:	d020      	beq.n	8012f6a <plug_holes+0x11e>
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	791b      	ldrb	r3, [r3, #4]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d11c      	bne.n	8012f6a <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012f30:	4b18      	ldr	r3, [pc, #96]	; (8012f94 <plug_holes+0x148>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	687a      	ldr	r2, [r7, #4]
 8012f36:	429a      	cmp	r2, r3
 8012f38:	d102      	bne.n	8012f40 <plug_holes+0xf4>
      lfree = pmem;
 8012f3a:	4a16      	ldr	r2, [pc, #88]	; (8012f94 <plug_holes+0x148>)
 8012f3c:	68bb      	ldr	r3, [r7, #8]
 8012f3e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	881a      	ldrh	r2, [r3, #0]
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	881b      	ldrh	r3, [r3, #0]
 8012f4c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012f50:	4293      	cmp	r3, r2
 8012f52:	d00a      	beq.n	8012f6a <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	881b      	ldrh	r3, [r3, #0]
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f7ff ff53 	bl	8012e04 <ptr_to_mem>
 8012f5e:	4604      	mov	r4, r0
 8012f60:	68b8      	ldr	r0, [r7, #8]
 8012f62:	f7ff ff61 	bl	8012e28 <mem_to_ptr>
 8012f66:	4603      	mov	r3, r0
 8012f68:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012f6a:	bf00      	nop
 8012f6c:	3714      	adds	r7, #20
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd90      	pop	{r4, r7, pc}
 8012f72:	bf00      	nop
 8012f74:	24015f54 	.word	0x24015f54
 8012f78:	0802010c 	.word	0x0802010c
 8012f7c:	0802013c 	.word	0x0802013c
 8012f80:	08020154 	.word	0x08020154
 8012f84:	24015f58 	.word	0x24015f58
 8012f88:	0802017c 	.word	0x0802017c
 8012f8c:	08020198 	.word	0x08020198
 8012f90:	080201b4 	.word	0x080201b4
 8012f94:	24015f60 	.word	0x24015f60

08012f98 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b082      	sub	sp, #8
 8012f9c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012f9e:	4b1d      	ldr	r3, [pc, #116]	; (8013014 <mem_init+0x7c>)
 8012fa0:	4a1d      	ldr	r2, [pc, #116]	; (8013018 <mem_init+0x80>)
 8012fa2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012fa4:	4b1b      	ldr	r3, [pc, #108]	; (8013014 <mem_init+0x7c>)
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012fb0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012fbe:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 8012fc2:	f7ff ff1f 	bl	8012e04 <ptr_to_mem>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	4a14      	ldr	r2, [pc, #80]	; (801301c <mem_init+0x84>)
 8012fca:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012fcc:	4b13      	ldr	r3, [pc, #76]	; (801301c <mem_init+0x84>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	2201      	movs	r2, #1
 8012fd2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012fd4:	4b11      	ldr	r3, [pc, #68]	; (801301c <mem_init+0x84>)
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012fdc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012fde:	4b0f      	ldr	r3, [pc, #60]	; (801301c <mem_init+0x84>)
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8012fe6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012fe8:	4b0a      	ldr	r3, [pc, #40]	; (8013014 <mem_init+0x7c>)
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	4a0c      	ldr	r2, [pc, #48]	; (8013020 <mem_init+0x88>)
 8012fee:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012ff0:	480c      	ldr	r0, [pc, #48]	; (8013024 <mem_init+0x8c>)
 8012ff2:	f00a fec5 	bl	801dd80 <sys_mutex_new>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d006      	beq.n	801300a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012ffc:	4b0a      	ldr	r3, [pc, #40]	; (8013028 <mem_init+0x90>)
 8012ffe:	f240 221f 	movw	r2, #543	; 0x21f
 8013002:	490a      	ldr	r1, [pc, #40]	; (801302c <mem_init+0x94>)
 8013004:	480a      	ldr	r0, [pc, #40]	; (8013030 <mem_init+0x98>)
 8013006:	f00b f91d 	bl	801e244 <iprintf>
  }
}
 801300a:	bf00      	nop
 801300c:	3708      	adds	r7, #8
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}
 8013012:	bf00      	nop
 8013014:	24015f54 	.word	0x24015f54
 8013018:	30044000 	.word	0x30044000
 801301c:	24015f58 	.word	0x24015f58
 8013020:	24015f60 	.word	0x24015f60
 8013024:	24015f5c 	.word	0x24015f5c
 8013028:	0802010c 	.word	0x0802010c
 801302c:	080201e0 	.word	0x080201e0
 8013030:	08020154 	.word	0x08020154

08013034 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b086      	sub	sp, #24
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f7ff fef3 	bl	8012e28 <mem_to_ptr>
 8013042:	4603      	mov	r3, r0
 8013044:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	881b      	ldrh	r3, [r3, #0]
 801304a:	4618      	mov	r0, r3
 801304c:	f7ff feda 	bl	8012e04 <ptr_to_mem>
 8013050:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	885b      	ldrh	r3, [r3, #2]
 8013056:	4618      	mov	r0, r3
 8013058:	f7ff fed4 	bl	8012e04 <ptr_to_mem>
 801305c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	881b      	ldrh	r3, [r3, #0]
 8013062:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8013066:	4293      	cmp	r3, r2
 8013068:	d819      	bhi.n	801309e <mem_link_valid+0x6a>
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	885b      	ldrh	r3, [r3, #2]
 801306e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8013072:	4293      	cmp	r3, r2
 8013074:	d813      	bhi.n	801309e <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801307a:	8afa      	ldrh	r2, [r7, #22]
 801307c:	429a      	cmp	r2, r3
 801307e:	d004      	beq.n	801308a <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	881b      	ldrh	r3, [r3, #0]
 8013084:	8afa      	ldrh	r2, [r7, #22]
 8013086:	429a      	cmp	r2, r3
 8013088:	d109      	bne.n	801309e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801308a:	4b08      	ldr	r3, [pc, #32]	; (80130ac <mem_link_valid+0x78>)
 801308c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801308e:	693a      	ldr	r2, [r7, #16]
 8013090:	429a      	cmp	r2, r3
 8013092:	d006      	beq.n	80130a2 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	885b      	ldrh	r3, [r3, #2]
 8013098:	8afa      	ldrh	r2, [r7, #22]
 801309a:	429a      	cmp	r2, r3
 801309c:	d001      	beq.n	80130a2 <mem_link_valid+0x6e>
    return 0;
 801309e:	2300      	movs	r3, #0
 80130a0:	e000      	b.n	80130a4 <mem_link_valid+0x70>
  }
  return 1;
 80130a2:	2301      	movs	r3, #1
}
 80130a4:	4618      	mov	r0, r3
 80130a6:	3718      	adds	r7, #24
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}
 80130ac:	24015f58 	.word	0x24015f58

080130b0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b088      	sub	sp, #32
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d070      	beq.n	80131a0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	f003 0303 	and.w	r3, r3, #3
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d00d      	beq.n	80130e4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80130c8:	4b37      	ldr	r3, [pc, #220]	; (80131a8 <mem_free+0xf8>)
 80130ca:	f240 2273 	movw	r2, #627	; 0x273
 80130ce:	4937      	ldr	r1, [pc, #220]	; (80131ac <mem_free+0xfc>)
 80130d0:	4837      	ldr	r0, [pc, #220]	; (80131b0 <mem_free+0x100>)
 80130d2:	f00b f8b7 	bl	801e244 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80130d6:	f00a fea5 	bl	801de24 <sys_arch_protect>
 80130da:	60f8      	str	r0, [r7, #12]
 80130dc:	68f8      	ldr	r0, [r7, #12]
 80130de:	f00a feaf 	bl	801de40 <sys_arch_unprotect>
    return;
 80130e2:	e05e      	b.n	80131a2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	3b08      	subs	r3, #8
 80130e8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80130ea:	4b32      	ldr	r3, [pc, #200]	; (80131b4 <mem_free+0x104>)
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	69fa      	ldr	r2, [r7, #28]
 80130f0:	429a      	cmp	r2, r3
 80130f2:	d306      	bcc.n	8013102 <mem_free+0x52>
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	f103 020c 	add.w	r2, r3, #12
 80130fa:	4b2f      	ldr	r3, [pc, #188]	; (80131b8 <mem_free+0x108>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	429a      	cmp	r2, r3
 8013100:	d90d      	bls.n	801311e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8013102:	4b29      	ldr	r3, [pc, #164]	; (80131a8 <mem_free+0xf8>)
 8013104:	f240 227f 	movw	r2, #639	; 0x27f
 8013108:	492c      	ldr	r1, [pc, #176]	; (80131bc <mem_free+0x10c>)
 801310a:	4829      	ldr	r0, [pc, #164]	; (80131b0 <mem_free+0x100>)
 801310c:	f00b f89a 	bl	801e244 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013110:	f00a fe88 	bl	801de24 <sys_arch_protect>
 8013114:	6138      	str	r0, [r7, #16]
 8013116:	6938      	ldr	r0, [r7, #16]
 8013118:	f00a fe92 	bl	801de40 <sys_arch_unprotect>
    return;
 801311c:	e041      	b.n	80131a2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801311e:	4828      	ldr	r0, [pc, #160]	; (80131c0 <mem_free+0x110>)
 8013120:	f00a fe44 	bl	801ddac <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013124:	69fb      	ldr	r3, [r7, #28]
 8013126:	791b      	ldrb	r3, [r3, #4]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d110      	bne.n	801314e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801312c:	4b1e      	ldr	r3, [pc, #120]	; (80131a8 <mem_free+0xf8>)
 801312e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8013132:	4924      	ldr	r1, [pc, #144]	; (80131c4 <mem_free+0x114>)
 8013134:	481e      	ldr	r0, [pc, #120]	; (80131b0 <mem_free+0x100>)
 8013136:	f00b f885 	bl	801e244 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801313a:	4821      	ldr	r0, [pc, #132]	; (80131c0 <mem_free+0x110>)
 801313c:	f00a fe45 	bl	801ddca <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013140:	f00a fe70 	bl	801de24 <sys_arch_protect>
 8013144:	6178      	str	r0, [r7, #20]
 8013146:	6978      	ldr	r0, [r7, #20]
 8013148:	f00a fe7a 	bl	801de40 <sys_arch_unprotect>
    return;
 801314c:	e029      	b.n	80131a2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801314e:	69f8      	ldr	r0, [r7, #28]
 8013150:	f7ff ff70 	bl	8013034 <mem_link_valid>
 8013154:	4603      	mov	r3, r0
 8013156:	2b00      	cmp	r3, #0
 8013158:	d110      	bne.n	801317c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801315a:	4b13      	ldr	r3, [pc, #76]	; (80131a8 <mem_free+0xf8>)
 801315c:	f240 2295 	movw	r2, #661	; 0x295
 8013160:	4919      	ldr	r1, [pc, #100]	; (80131c8 <mem_free+0x118>)
 8013162:	4813      	ldr	r0, [pc, #76]	; (80131b0 <mem_free+0x100>)
 8013164:	f00b f86e 	bl	801e244 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013168:	4815      	ldr	r0, [pc, #84]	; (80131c0 <mem_free+0x110>)
 801316a:	f00a fe2e 	bl	801ddca <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801316e:	f00a fe59 	bl	801de24 <sys_arch_protect>
 8013172:	61b8      	str	r0, [r7, #24]
 8013174:	69b8      	ldr	r0, [r7, #24]
 8013176:	f00a fe63 	bl	801de40 <sys_arch_unprotect>
    return;
 801317a:	e012      	b.n	80131a2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801317c:	69fb      	ldr	r3, [r7, #28]
 801317e:	2200      	movs	r2, #0
 8013180:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8013182:	4b12      	ldr	r3, [pc, #72]	; (80131cc <mem_free+0x11c>)
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	69fa      	ldr	r2, [r7, #28]
 8013188:	429a      	cmp	r2, r3
 801318a:	d202      	bcs.n	8013192 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801318c:	4a0f      	ldr	r2, [pc, #60]	; (80131cc <mem_free+0x11c>)
 801318e:	69fb      	ldr	r3, [r7, #28]
 8013190:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8013192:	69f8      	ldr	r0, [r7, #28]
 8013194:	f7ff fe5a 	bl	8012e4c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013198:	4809      	ldr	r0, [pc, #36]	; (80131c0 <mem_free+0x110>)
 801319a:	f00a fe16 	bl	801ddca <sys_mutex_unlock>
 801319e:	e000      	b.n	80131a2 <mem_free+0xf2>
    return;
 80131a0:	bf00      	nop
}
 80131a2:	3720      	adds	r7, #32
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}
 80131a8:	0802010c 	.word	0x0802010c
 80131ac:	080201fc 	.word	0x080201fc
 80131b0:	08020154 	.word	0x08020154
 80131b4:	24015f54 	.word	0x24015f54
 80131b8:	24015f58 	.word	0x24015f58
 80131bc:	08020220 	.word	0x08020220
 80131c0:	24015f5c 	.word	0x24015f5c
 80131c4:	0802023c 	.word	0x0802023c
 80131c8:	08020264 	.word	0x08020264
 80131cc:	24015f60 	.word	0x24015f60

080131d0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b088      	sub	sp, #32
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
 80131d8:	460b      	mov	r3, r1
 80131da:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80131dc:	887b      	ldrh	r3, [r7, #2]
 80131de:	3303      	adds	r3, #3
 80131e0:	b29b      	uxth	r3, r3
 80131e2:	f023 0303 	bic.w	r3, r3, #3
 80131e6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80131e8:	8bfb      	ldrh	r3, [r7, #30]
 80131ea:	2b0b      	cmp	r3, #11
 80131ec:	d801      	bhi.n	80131f2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80131ee:	230c      	movs	r3, #12
 80131f0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80131f2:	8bfb      	ldrh	r3, [r7, #30]
 80131f4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80131f8:	4293      	cmp	r3, r2
 80131fa:	d803      	bhi.n	8013204 <mem_trim+0x34>
 80131fc:	8bfa      	ldrh	r2, [r7, #30]
 80131fe:	887b      	ldrh	r3, [r7, #2]
 8013200:	429a      	cmp	r2, r3
 8013202:	d201      	bcs.n	8013208 <mem_trim+0x38>
    return NULL;
 8013204:	2300      	movs	r3, #0
 8013206:	e0dc      	b.n	80133c2 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013208:	4b70      	ldr	r3, [pc, #448]	; (80133cc <mem_trim+0x1fc>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	687a      	ldr	r2, [r7, #4]
 801320e:	429a      	cmp	r2, r3
 8013210:	d304      	bcc.n	801321c <mem_trim+0x4c>
 8013212:	4b6f      	ldr	r3, [pc, #444]	; (80133d0 <mem_trim+0x200>)
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	687a      	ldr	r2, [r7, #4]
 8013218:	429a      	cmp	r2, r3
 801321a:	d306      	bcc.n	801322a <mem_trim+0x5a>
 801321c:	4b6d      	ldr	r3, [pc, #436]	; (80133d4 <mem_trim+0x204>)
 801321e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013222:	496d      	ldr	r1, [pc, #436]	; (80133d8 <mem_trim+0x208>)
 8013224:	486d      	ldr	r0, [pc, #436]	; (80133dc <mem_trim+0x20c>)
 8013226:	f00b f80d 	bl	801e244 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801322a:	4b68      	ldr	r3, [pc, #416]	; (80133cc <mem_trim+0x1fc>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	687a      	ldr	r2, [r7, #4]
 8013230:	429a      	cmp	r2, r3
 8013232:	d304      	bcc.n	801323e <mem_trim+0x6e>
 8013234:	4b66      	ldr	r3, [pc, #408]	; (80133d0 <mem_trim+0x200>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	687a      	ldr	r2, [r7, #4]
 801323a:	429a      	cmp	r2, r3
 801323c:	d307      	bcc.n	801324e <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801323e:	f00a fdf1 	bl	801de24 <sys_arch_protect>
 8013242:	60b8      	str	r0, [r7, #8]
 8013244:	68b8      	ldr	r0, [r7, #8]
 8013246:	f00a fdfb 	bl	801de40 <sys_arch_unprotect>
    return rmem;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	e0b9      	b.n	80133c2 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	3b08      	subs	r3, #8
 8013252:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8013254:	69b8      	ldr	r0, [r7, #24]
 8013256:	f7ff fde7 	bl	8012e28 <mem_to_ptr>
 801325a:	4603      	mov	r3, r0
 801325c:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801325e:	69bb      	ldr	r3, [r7, #24]
 8013260:	881a      	ldrh	r2, [r3, #0]
 8013262:	8afb      	ldrh	r3, [r7, #22]
 8013264:	1ad3      	subs	r3, r2, r3
 8013266:	b29b      	uxth	r3, r3
 8013268:	3b08      	subs	r3, #8
 801326a:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801326c:	8bfa      	ldrh	r2, [r7, #30]
 801326e:	8abb      	ldrh	r3, [r7, #20]
 8013270:	429a      	cmp	r2, r3
 8013272:	d906      	bls.n	8013282 <mem_trim+0xb2>
 8013274:	4b57      	ldr	r3, [pc, #348]	; (80133d4 <mem_trim+0x204>)
 8013276:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801327a:	4959      	ldr	r1, [pc, #356]	; (80133e0 <mem_trim+0x210>)
 801327c:	4857      	ldr	r0, [pc, #348]	; (80133dc <mem_trim+0x20c>)
 801327e:	f00a ffe1 	bl	801e244 <iprintf>
  if (newsize > size) {
 8013282:	8bfa      	ldrh	r2, [r7, #30]
 8013284:	8abb      	ldrh	r3, [r7, #20]
 8013286:	429a      	cmp	r2, r3
 8013288:	d901      	bls.n	801328e <mem_trim+0xbe>
    /* not supported */
    return NULL;
 801328a:	2300      	movs	r3, #0
 801328c:	e099      	b.n	80133c2 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 801328e:	8bfa      	ldrh	r2, [r7, #30]
 8013290:	8abb      	ldrh	r3, [r7, #20]
 8013292:	429a      	cmp	r2, r3
 8013294:	d101      	bne.n	801329a <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	e093      	b.n	80133c2 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801329a:	4852      	ldr	r0, [pc, #328]	; (80133e4 <mem_trim+0x214>)
 801329c:	f00a fd86 	bl	801ddac <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80132a0:	69bb      	ldr	r3, [r7, #24]
 80132a2:	881b      	ldrh	r3, [r3, #0]
 80132a4:	4618      	mov	r0, r3
 80132a6:	f7ff fdad 	bl	8012e04 <ptr_to_mem>
 80132aa:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80132ac:	693b      	ldr	r3, [r7, #16]
 80132ae:	791b      	ldrb	r3, [r3, #4]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d141      	bne.n	8013338 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80132b4:	69bb      	ldr	r3, [r7, #24]
 80132b6:	881b      	ldrh	r3, [r3, #0]
 80132b8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80132bc:	4293      	cmp	r3, r2
 80132be:	d106      	bne.n	80132ce <mem_trim+0xfe>
 80132c0:	4b44      	ldr	r3, [pc, #272]	; (80133d4 <mem_trim+0x204>)
 80132c2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80132c6:	4948      	ldr	r1, [pc, #288]	; (80133e8 <mem_trim+0x218>)
 80132c8:	4844      	ldr	r0, [pc, #272]	; (80133dc <mem_trim+0x20c>)
 80132ca:	f00a ffbb 	bl	801e244 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80132ce:	693b      	ldr	r3, [r7, #16]
 80132d0:	881b      	ldrh	r3, [r3, #0]
 80132d2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80132d4:	8afa      	ldrh	r2, [r7, #22]
 80132d6:	8bfb      	ldrh	r3, [r7, #30]
 80132d8:	4413      	add	r3, r2
 80132da:	b29b      	uxth	r3, r3
 80132dc:	3308      	adds	r3, #8
 80132de:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80132e0:	4b42      	ldr	r3, [pc, #264]	; (80133ec <mem_trim+0x21c>)
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	693a      	ldr	r2, [r7, #16]
 80132e6:	429a      	cmp	r2, r3
 80132e8:	d106      	bne.n	80132f8 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 80132ea:	89fb      	ldrh	r3, [r7, #14]
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7ff fd89 	bl	8012e04 <ptr_to_mem>
 80132f2:	4603      	mov	r3, r0
 80132f4:	4a3d      	ldr	r2, [pc, #244]	; (80133ec <mem_trim+0x21c>)
 80132f6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80132f8:	89fb      	ldrh	r3, [r7, #14]
 80132fa:	4618      	mov	r0, r3
 80132fc:	f7ff fd82 	bl	8012e04 <ptr_to_mem>
 8013300:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	2200      	movs	r2, #0
 8013306:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013308:	693b      	ldr	r3, [r7, #16]
 801330a:	89ba      	ldrh	r2, [r7, #12]
 801330c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801330e:	693b      	ldr	r3, [r7, #16]
 8013310:	8afa      	ldrh	r2, [r7, #22]
 8013312:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013314:	69bb      	ldr	r3, [r7, #24]
 8013316:	89fa      	ldrh	r2, [r7, #14]
 8013318:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801331a:	693b      	ldr	r3, [r7, #16]
 801331c:	881b      	ldrh	r3, [r3, #0]
 801331e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8013322:	4293      	cmp	r3, r2
 8013324:	d049      	beq.n	80133ba <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	881b      	ldrh	r3, [r3, #0]
 801332a:	4618      	mov	r0, r3
 801332c:	f7ff fd6a 	bl	8012e04 <ptr_to_mem>
 8013330:	4602      	mov	r2, r0
 8013332:	89fb      	ldrh	r3, [r7, #14]
 8013334:	8053      	strh	r3, [r2, #2]
 8013336:	e040      	b.n	80133ba <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013338:	8bfb      	ldrh	r3, [r7, #30]
 801333a:	f103 0214 	add.w	r2, r3, #20
 801333e:	8abb      	ldrh	r3, [r7, #20]
 8013340:	429a      	cmp	r2, r3
 8013342:	d83a      	bhi.n	80133ba <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013344:	8afa      	ldrh	r2, [r7, #22]
 8013346:	8bfb      	ldrh	r3, [r7, #30]
 8013348:	4413      	add	r3, r2
 801334a:	b29b      	uxth	r3, r3
 801334c:	3308      	adds	r3, #8
 801334e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013350:	69bb      	ldr	r3, [r7, #24]
 8013352:	881b      	ldrh	r3, [r3, #0]
 8013354:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8013358:	4293      	cmp	r3, r2
 801335a:	d106      	bne.n	801336a <mem_trim+0x19a>
 801335c:	4b1d      	ldr	r3, [pc, #116]	; (80133d4 <mem_trim+0x204>)
 801335e:	f240 3216 	movw	r2, #790	; 0x316
 8013362:	4921      	ldr	r1, [pc, #132]	; (80133e8 <mem_trim+0x218>)
 8013364:	481d      	ldr	r0, [pc, #116]	; (80133dc <mem_trim+0x20c>)
 8013366:	f00a ff6d 	bl	801e244 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801336a:	89fb      	ldrh	r3, [r7, #14]
 801336c:	4618      	mov	r0, r3
 801336e:	f7ff fd49 	bl	8012e04 <ptr_to_mem>
 8013372:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013374:	4b1d      	ldr	r3, [pc, #116]	; (80133ec <mem_trim+0x21c>)
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	693a      	ldr	r2, [r7, #16]
 801337a:	429a      	cmp	r2, r3
 801337c:	d202      	bcs.n	8013384 <mem_trim+0x1b4>
      lfree = mem2;
 801337e:	4a1b      	ldr	r2, [pc, #108]	; (80133ec <mem_trim+0x21c>)
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	2200      	movs	r2, #0
 8013388:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801338a:	69bb      	ldr	r3, [r7, #24]
 801338c:	881a      	ldrh	r2, [r3, #0]
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013392:	693b      	ldr	r3, [r7, #16]
 8013394:	8afa      	ldrh	r2, [r7, #22]
 8013396:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8013398:	69bb      	ldr	r3, [r7, #24]
 801339a:	89fa      	ldrh	r2, [r7, #14]
 801339c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801339e:	693b      	ldr	r3, [r7, #16]
 80133a0:	881b      	ldrh	r3, [r3, #0]
 80133a2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80133a6:	4293      	cmp	r3, r2
 80133a8:	d007      	beq.n	80133ba <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	881b      	ldrh	r3, [r3, #0]
 80133ae:	4618      	mov	r0, r3
 80133b0:	f7ff fd28 	bl	8012e04 <ptr_to_mem>
 80133b4:	4602      	mov	r2, r0
 80133b6:	89fb      	ldrh	r3, [r7, #14]
 80133b8:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80133ba:	480a      	ldr	r0, [pc, #40]	; (80133e4 <mem_trim+0x214>)
 80133bc:	f00a fd05 	bl	801ddca <sys_mutex_unlock>
  return rmem;
 80133c0:	687b      	ldr	r3, [r7, #4]
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	3720      	adds	r7, #32
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}
 80133ca:	bf00      	nop
 80133cc:	24015f54 	.word	0x24015f54
 80133d0:	24015f58 	.word	0x24015f58
 80133d4:	0802010c 	.word	0x0802010c
 80133d8:	08020298 	.word	0x08020298
 80133dc:	08020154 	.word	0x08020154
 80133e0:	080202b0 	.word	0x080202b0
 80133e4:	24015f5c 	.word	0x24015f5c
 80133e8:	080202d0 	.word	0x080202d0
 80133ec:	24015f60 	.word	0x24015f60

080133f0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b088      	sub	sp, #32
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	4603      	mov	r3, r0
 80133f8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80133fa:	88fb      	ldrh	r3, [r7, #6]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d101      	bne.n	8013404 <mem_malloc+0x14>
    return NULL;
 8013400:	2300      	movs	r3, #0
 8013402:	e0e6      	b.n	80135d2 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013404:	88fb      	ldrh	r3, [r7, #6]
 8013406:	3303      	adds	r3, #3
 8013408:	b29b      	uxth	r3, r3
 801340a:	f023 0303 	bic.w	r3, r3, #3
 801340e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013410:	8bbb      	ldrh	r3, [r7, #28]
 8013412:	2b0b      	cmp	r3, #11
 8013414:	d801      	bhi.n	801341a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013416:	230c      	movs	r3, #12
 8013418:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801341a:	8bbb      	ldrh	r3, [r7, #28]
 801341c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8013420:	4293      	cmp	r3, r2
 8013422:	d803      	bhi.n	801342c <mem_malloc+0x3c>
 8013424:	8bba      	ldrh	r2, [r7, #28]
 8013426:	88fb      	ldrh	r3, [r7, #6]
 8013428:	429a      	cmp	r2, r3
 801342a:	d201      	bcs.n	8013430 <mem_malloc+0x40>
    return NULL;
 801342c:	2300      	movs	r3, #0
 801342e:	e0d0      	b.n	80135d2 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013430:	486a      	ldr	r0, [pc, #424]	; (80135dc <mem_malloc+0x1ec>)
 8013432:	f00a fcbb 	bl	801ddac <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013436:	4b6a      	ldr	r3, [pc, #424]	; (80135e0 <mem_malloc+0x1f0>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	4618      	mov	r0, r3
 801343c:	f7ff fcf4 	bl	8012e28 <mem_to_ptr>
 8013440:	4603      	mov	r3, r0
 8013442:	83fb      	strh	r3, [r7, #30]
 8013444:	e0b9      	b.n	80135ba <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013446:	8bfb      	ldrh	r3, [r7, #30]
 8013448:	4618      	mov	r0, r3
 801344a:	f7ff fcdb 	bl	8012e04 <ptr_to_mem>
 801344e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	791b      	ldrb	r3, [r3, #4]
 8013454:	2b00      	cmp	r3, #0
 8013456:	f040 80a9 	bne.w	80135ac <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801345a:	697b      	ldr	r3, [r7, #20]
 801345c:	881b      	ldrh	r3, [r3, #0]
 801345e:	461a      	mov	r2, r3
 8013460:	8bfb      	ldrh	r3, [r7, #30]
 8013462:	1ad3      	subs	r3, r2, r3
 8013464:	f1a3 0208 	sub.w	r2, r3, #8
 8013468:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801346a:	429a      	cmp	r2, r3
 801346c:	f0c0 809e 	bcc.w	80135ac <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8013470:	697b      	ldr	r3, [r7, #20]
 8013472:	881b      	ldrh	r3, [r3, #0]
 8013474:	461a      	mov	r2, r3
 8013476:	8bfb      	ldrh	r3, [r7, #30]
 8013478:	1ad3      	subs	r3, r2, r3
 801347a:	f1a3 0208 	sub.w	r2, r3, #8
 801347e:	8bbb      	ldrh	r3, [r7, #28]
 8013480:	3314      	adds	r3, #20
 8013482:	429a      	cmp	r2, r3
 8013484:	d335      	bcc.n	80134f2 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013486:	8bfa      	ldrh	r2, [r7, #30]
 8013488:	8bbb      	ldrh	r3, [r7, #28]
 801348a:	4413      	add	r3, r2
 801348c:	b29b      	uxth	r3, r3
 801348e:	3308      	adds	r3, #8
 8013490:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013492:	8a7b      	ldrh	r3, [r7, #18]
 8013494:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8013498:	4293      	cmp	r3, r2
 801349a:	d106      	bne.n	80134aa <mem_malloc+0xba>
 801349c:	4b51      	ldr	r3, [pc, #324]	; (80135e4 <mem_malloc+0x1f4>)
 801349e:	f240 3287 	movw	r2, #903	; 0x387
 80134a2:	4951      	ldr	r1, [pc, #324]	; (80135e8 <mem_malloc+0x1f8>)
 80134a4:	4851      	ldr	r0, [pc, #324]	; (80135ec <mem_malloc+0x1fc>)
 80134a6:	f00a fecd 	bl	801e244 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80134aa:	8a7b      	ldrh	r3, [r7, #18]
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7ff fca9 	bl	8012e04 <ptr_to_mem>
 80134b2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	2200      	movs	r2, #0
 80134b8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	881a      	ldrh	r2, [r3, #0]
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	8bfa      	ldrh	r2, [r7, #30]
 80134c6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80134c8:	697b      	ldr	r3, [r7, #20]
 80134ca:	8a7a      	ldrh	r2, [r7, #18]
 80134cc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80134ce:	697b      	ldr	r3, [r7, #20]
 80134d0:	2201      	movs	r2, #1
 80134d2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	881b      	ldrh	r3, [r3, #0]
 80134d8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80134dc:	4293      	cmp	r3, r2
 80134de:	d00b      	beq.n	80134f8 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	881b      	ldrh	r3, [r3, #0]
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7ff fc8d 	bl	8012e04 <ptr_to_mem>
 80134ea:	4602      	mov	r2, r0
 80134ec:	8a7b      	ldrh	r3, [r7, #18]
 80134ee:	8053      	strh	r3, [r2, #2]
 80134f0:	e002      	b.n	80134f8 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80134f2:	697b      	ldr	r3, [r7, #20]
 80134f4:	2201      	movs	r2, #1
 80134f6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80134f8:	4b39      	ldr	r3, [pc, #228]	; (80135e0 <mem_malloc+0x1f0>)
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	697a      	ldr	r2, [r7, #20]
 80134fe:	429a      	cmp	r2, r3
 8013500:	d127      	bne.n	8013552 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8013502:	4b37      	ldr	r3, [pc, #220]	; (80135e0 <mem_malloc+0x1f0>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013508:	e005      	b.n	8013516 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801350a:	69bb      	ldr	r3, [r7, #24]
 801350c:	881b      	ldrh	r3, [r3, #0]
 801350e:	4618      	mov	r0, r3
 8013510:	f7ff fc78 	bl	8012e04 <ptr_to_mem>
 8013514:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013516:	69bb      	ldr	r3, [r7, #24]
 8013518:	791b      	ldrb	r3, [r3, #4]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d004      	beq.n	8013528 <mem_malloc+0x138>
 801351e:	4b34      	ldr	r3, [pc, #208]	; (80135f0 <mem_malloc+0x200>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	69ba      	ldr	r2, [r7, #24]
 8013524:	429a      	cmp	r2, r3
 8013526:	d1f0      	bne.n	801350a <mem_malloc+0x11a>
          }
          lfree = cur;
 8013528:	4a2d      	ldr	r2, [pc, #180]	; (80135e0 <mem_malloc+0x1f0>)
 801352a:	69bb      	ldr	r3, [r7, #24]
 801352c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801352e:	4b2c      	ldr	r3, [pc, #176]	; (80135e0 <mem_malloc+0x1f0>)
 8013530:	681a      	ldr	r2, [r3, #0]
 8013532:	4b2f      	ldr	r3, [pc, #188]	; (80135f0 <mem_malloc+0x200>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	429a      	cmp	r2, r3
 8013538:	d00b      	beq.n	8013552 <mem_malloc+0x162>
 801353a:	4b29      	ldr	r3, [pc, #164]	; (80135e0 <mem_malloc+0x1f0>)
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	791b      	ldrb	r3, [r3, #4]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d006      	beq.n	8013552 <mem_malloc+0x162>
 8013544:	4b27      	ldr	r3, [pc, #156]	; (80135e4 <mem_malloc+0x1f4>)
 8013546:	f240 32b5 	movw	r2, #949	; 0x3b5
 801354a:	492a      	ldr	r1, [pc, #168]	; (80135f4 <mem_malloc+0x204>)
 801354c:	4827      	ldr	r0, [pc, #156]	; (80135ec <mem_malloc+0x1fc>)
 801354e:	f00a fe79 	bl	801e244 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013552:	4822      	ldr	r0, [pc, #136]	; (80135dc <mem_malloc+0x1ec>)
 8013554:	f00a fc39 	bl	801ddca <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013558:	8bba      	ldrh	r2, [r7, #28]
 801355a:	697b      	ldr	r3, [r7, #20]
 801355c:	4413      	add	r3, r2
 801355e:	3308      	adds	r3, #8
 8013560:	4a23      	ldr	r2, [pc, #140]	; (80135f0 <mem_malloc+0x200>)
 8013562:	6812      	ldr	r2, [r2, #0]
 8013564:	4293      	cmp	r3, r2
 8013566:	d906      	bls.n	8013576 <mem_malloc+0x186>
 8013568:	4b1e      	ldr	r3, [pc, #120]	; (80135e4 <mem_malloc+0x1f4>)
 801356a:	f240 32b9 	movw	r2, #953	; 0x3b9
 801356e:	4922      	ldr	r1, [pc, #136]	; (80135f8 <mem_malloc+0x208>)
 8013570:	481e      	ldr	r0, [pc, #120]	; (80135ec <mem_malloc+0x1fc>)
 8013572:	f00a fe67 	bl	801e244 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013576:	697b      	ldr	r3, [r7, #20]
 8013578:	f003 0303 	and.w	r3, r3, #3
 801357c:	2b00      	cmp	r3, #0
 801357e:	d006      	beq.n	801358e <mem_malloc+0x19e>
 8013580:	4b18      	ldr	r3, [pc, #96]	; (80135e4 <mem_malloc+0x1f4>)
 8013582:	f240 32bb 	movw	r2, #955	; 0x3bb
 8013586:	491d      	ldr	r1, [pc, #116]	; (80135fc <mem_malloc+0x20c>)
 8013588:	4818      	ldr	r0, [pc, #96]	; (80135ec <mem_malloc+0x1fc>)
 801358a:	f00a fe5b 	bl	801e244 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	f003 0303 	and.w	r3, r3, #3
 8013594:	2b00      	cmp	r3, #0
 8013596:	d006      	beq.n	80135a6 <mem_malloc+0x1b6>
 8013598:	4b12      	ldr	r3, [pc, #72]	; (80135e4 <mem_malloc+0x1f4>)
 801359a:	f240 32bd 	movw	r2, #957	; 0x3bd
 801359e:	4918      	ldr	r1, [pc, #96]	; (8013600 <mem_malloc+0x210>)
 80135a0:	4812      	ldr	r0, [pc, #72]	; (80135ec <mem_malloc+0x1fc>)
 80135a2:	f00a fe4f 	bl	801e244 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80135a6:	697b      	ldr	r3, [r7, #20]
 80135a8:	3308      	adds	r3, #8
 80135aa:	e012      	b.n	80135d2 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 80135ac:	8bfb      	ldrh	r3, [r7, #30]
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7ff fc28 	bl	8012e04 <ptr_to_mem>
 80135b4:	4603      	mov	r3, r0
 80135b6:	881b      	ldrh	r3, [r3, #0]
 80135b8:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80135ba:	8bfa      	ldrh	r2, [r7, #30]
 80135bc:	8bb9      	ldrh	r1, [r7, #28]
 80135be:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 80135c2:	1a5b      	subs	r3, r3, r1
 80135c4:	429a      	cmp	r2, r3
 80135c6:	f4ff af3e 	bcc.w	8013446 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80135ca:	4804      	ldr	r0, [pc, #16]	; (80135dc <mem_malloc+0x1ec>)
 80135cc:	f00a fbfd 	bl	801ddca <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80135d0:	2300      	movs	r3, #0
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	3720      	adds	r7, #32
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}
 80135da:	bf00      	nop
 80135dc:	24015f5c 	.word	0x24015f5c
 80135e0:	24015f60 	.word	0x24015f60
 80135e4:	0802010c 	.word	0x0802010c
 80135e8:	080202d0 	.word	0x080202d0
 80135ec:	08020154 	.word	0x08020154
 80135f0:	24015f58 	.word	0x24015f58
 80135f4:	080202e4 	.word	0x080202e4
 80135f8:	08020300 	.word	0x08020300
 80135fc:	08020330 	.word	0x08020330
 8013600:	08020360 	.word	0x08020360

08013604 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013604:	b480      	push	{r7}
 8013606:	b085      	sub	sp, #20
 8013608:	af00      	add	r7, sp, #0
 801360a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	689b      	ldr	r3, [r3, #8]
 8013610:	2200      	movs	r2, #0
 8013612:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	685b      	ldr	r3, [r3, #4]
 8013618:	3303      	adds	r3, #3
 801361a:	f023 0303 	bic.w	r3, r3, #3
 801361e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013620:	2300      	movs	r3, #0
 8013622:	60fb      	str	r3, [r7, #12]
 8013624:	e011      	b.n	801364a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	689b      	ldr	r3, [r3, #8]
 801362a:	681a      	ldr	r2, [r3, #0]
 801362c:	68bb      	ldr	r3, [r7, #8]
 801362e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	689b      	ldr	r3, [r3, #8]
 8013634:	68ba      	ldr	r2, [r7, #8]
 8013636:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	881b      	ldrh	r3, [r3, #0]
 801363c:	461a      	mov	r2, r3
 801363e:	68bb      	ldr	r3, [r7, #8]
 8013640:	4413      	add	r3, r2
 8013642:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	3301      	adds	r3, #1
 8013648:	60fb      	str	r3, [r7, #12]
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	885b      	ldrh	r3, [r3, #2]
 801364e:	461a      	mov	r2, r3
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	4293      	cmp	r3, r2
 8013654:	dbe7      	blt.n	8013626 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013656:	bf00      	nop
 8013658:	bf00      	nop
 801365a:	3714      	adds	r7, #20
 801365c:	46bd      	mov	sp, r7
 801365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013662:	4770      	bx	lr

08013664 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b082      	sub	sp, #8
 8013668:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801366a:	2300      	movs	r3, #0
 801366c:	80fb      	strh	r3, [r7, #6]
 801366e:	e009      	b.n	8013684 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013670:	88fb      	ldrh	r3, [r7, #6]
 8013672:	4a08      	ldr	r2, [pc, #32]	; (8013694 <memp_init+0x30>)
 8013674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013678:	4618      	mov	r0, r3
 801367a:	f7ff ffc3 	bl	8013604 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801367e:	88fb      	ldrh	r3, [r7, #6]
 8013680:	3301      	adds	r3, #1
 8013682:	80fb      	strh	r3, [r7, #6]
 8013684:	88fb      	ldrh	r3, [r7, #6]
 8013686:	2b0c      	cmp	r3, #12
 8013688:	d9f2      	bls.n	8013670 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801368a:	bf00      	nop
 801368c:	bf00      	nop
 801368e:	3708      	adds	r7, #8
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}
 8013694:	08022c04 	.word	0x08022c04

08013698 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b084      	sub	sp, #16
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80136a0:	f00a fbc0 	bl	801de24 <sys_arch_protect>
 80136a4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	689b      	ldr	r3, [r3, #8]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d015      	beq.n	80136e0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	689b      	ldr	r3, [r3, #8]
 80136b8:	68ba      	ldr	r2, [r7, #8]
 80136ba:	6812      	ldr	r2, [r2, #0]
 80136bc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80136be:	68bb      	ldr	r3, [r7, #8]
 80136c0:	f003 0303 	and.w	r3, r3, #3
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d006      	beq.n	80136d6 <do_memp_malloc_pool+0x3e>
 80136c8:	4b09      	ldr	r3, [pc, #36]	; (80136f0 <do_memp_malloc_pool+0x58>)
 80136ca:	f44f 728c 	mov.w	r2, #280	; 0x118
 80136ce:	4909      	ldr	r1, [pc, #36]	; (80136f4 <do_memp_malloc_pool+0x5c>)
 80136d0:	4809      	ldr	r0, [pc, #36]	; (80136f8 <do_memp_malloc_pool+0x60>)
 80136d2:	f00a fdb7 	bl	801e244 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80136d6:	68f8      	ldr	r0, [r7, #12]
 80136d8:	f00a fbb2 	bl	801de40 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	e003      	b.n	80136e8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80136e0:	68f8      	ldr	r0, [r7, #12]
 80136e2:	f00a fbad 	bl	801de40 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80136e6:	2300      	movs	r3, #0
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	3710      	adds	r7, #16
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}
 80136f0:	08020384 	.word	0x08020384
 80136f4:	080203b4 	.word	0x080203b4
 80136f8:	080203d8 	.word	0x080203d8

080136fc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b082      	sub	sp, #8
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d106      	bne.n	8013718 <memp_malloc_pool+0x1c>
 801370a:	4b0a      	ldr	r3, [pc, #40]	; (8013734 <memp_malloc_pool+0x38>)
 801370c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8013710:	4909      	ldr	r1, [pc, #36]	; (8013738 <memp_malloc_pool+0x3c>)
 8013712:	480a      	ldr	r0, [pc, #40]	; (801373c <memp_malloc_pool+0x40>)
 8013714:	f00a fd96 	bl	801e244 <iprintf>
  if (desc == NULL) {
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d101      	bne.n	8013722 <memp_malloc_pool+0x26>
    return NULL;
 801371e:	2300      	movs	r3, #0
 8013720:	e003      	b.n	801372a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8013722:	6878      	ldr	r0, [r7, #4]
 8013724:	f7ff ffb8 	bl	8013698 <do_memp_malloc_pool>
 8013728:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801372a:	4618      	mov	r0, r3
 801372c:	3708      	adds	r7, #8
 801372e:	46bd      	mov	sp, r7
 8013730:	bd80      	pop	{r7, pc}
 8013732:	bf00      	nop
 8013734:	08020384 	.word	0x08020384
 8013738:	08020400 	.word	0x08020400
 801373c:	080203d8 	.word	0x080203d8

08013740 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013740:	b580      	push	{r7, lr}
 8013742:	b084      	sub	sp, #16
 8013744:	af00      	add	r7, sp, #0
 8013746:	4603      	mov	r3, r0
 8013748:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801374a:	79fb      	ldrb	r3, [r7, #7]
 801374c:	2b0c      	cmp	r3, #12
 801374e:	d908      	bls.n	8013762 <memp_malloc+0x22>
 8013750:	4b0a      	ldr	r3, [pc, #40]	; (801377c <memp_malloc+0x3c>)
 8013752:	f240 1257 	movw	r2, #343	; 0x157
 8013756:	490a      	ldr	r1, [pc, #40]	; (8013780 <memp_malloc+0x40>)
 8013758:	480a      	ldr	r0, [pc, #40]	; (8013784 <memp_malloc+0x44>)
 801375a:	f00a fd73 	bl	801e244 <iprintf>
 801375e:	2300      	movs	r3, #0
 8013760:	e008      	b.n	8013774 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013762:	79fb      	ldrb	r3, [r7, #7]
 8013764:	4a08      	ldr	r2, [pc, #32]	; (8013788 <memp_malloc+0x48>)
 8013766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801376a:	4618      	mov	r0, r3
 801376c:	f7ff ff94 	bl	8013698 <do_memp_malloc_pool>
 8013770:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013772:	68fb      	ldr	r3, [r7, #12]
}
 8013774:	4618      	mov	r0, r3
 8013776:	3710      	adds	r7, #16
 8013778:	46bd      	mov	sp, r7
 801377a:	bd80      	pop	{r7, pc}
 801377c:	08020384 	.word	0x08020384
 8013780:	08020414 	.word	0x08020414
 8013784:	080203d8 	.word	0x080203d8
 8013788:	08022c04 	.word	0x08022c04

0801378c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b084      	sub	sp, #16
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
 8013794:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	f003 0303 	and.w	r3, r3, #3
 801379c:	2b00      	cmp	r3, #0
 801379e:	d006      	beq.n	80137ae <do_memp_free_pool+0x22>
 80137a0:	4b0d      	ldr	r3, [pc, #52]	; (80137d8 <do_memp_free_pool+0x4c>)
 80137a2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80137a6:	490d      	ldr	r1, [pc, #52]	; (80137dc <do_memp_free_pool+0x50>)
 80137a8:	480d      	ldr	r0, [pc, #52]	; (80137e0 <do_memp_free_pool+0x54>)
 80137aa:	f00a fd4b 	bl	801e244 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80137b2:	f00a fb37 	bl	801de24 <sys_arch_protect>
 80137b6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	689b      	ldr	r3, [r3, #8]
 80137bc:	681a      	ldr	r2, [r3, #0]
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	689b      	ldr	r3, [r3, #8]
 80137c6:	68fa      	ldr	r2, [r7, #12]
 80137c8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80137ca:	68b8      	ldr	r0, [r7, #8]
 80137cc:	f00a fb38 	bl	801de40 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80137d0:	bf00      	nop
 80137d2:	3710      	adds	r7, #16
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}
 80137d8:	08020384 	.word	0x08020384
 80137dc:	08020434 	.word	0x08020434
 80137e0:	080203d8 	.word	0x080203d8

080137e4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b082      	sub	sp, #8
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
 80137ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d106      	bne.n	8013802 <memp_free_pool+0x1e>
 80137f4:	4b0a      	ldr	r3, [pc, #40]	; (8013820 <memp_free_pool+0x3c>)
 80137f6:	f240 1295 	movw	r2, #405	; 0x195
 80137fa:	490a      	ldr	r1, [pc, #40]	; (8013824 <memp_free_pool+0x40>)
 80137fc:	480a      	ldr	r0, [pc, #40]	; (8013828 <memp_free_pool+0x44>)
 80137fe:	f00a fd21 	bl	801e244 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d007      	beq.n	8013818 <memp_free_pool+0x34>
 8013808:	683b      	ldr	r3, [r7, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d004      	beq.n	8013818 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801380e:	6839      	ldr	r1, [r7, #0]
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f7ff ffbb 	bl	801378c <do_memp_free_pool>
 8013816:	e000      	b.n	801381a <memp_free_pool+0x36>
    return;
 8013818:	bf00      	nop
}
 801381a:	3708      	adds	r7, #8
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}
 8013820:	08020384 	.word	0x08020384
 8013824:	08020400 	.word	0x08020400
 8013828:	080203d8 	.word	0x080203d8

0801382c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b082      	sub	sp, #8
 8013830:	af00      	add	r7, sp, #0
 8013832:	4603      	mov	r3, r0
 8013834:	6039      	str	r1, [r7, #0]
 8013836:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013838:	79fb      	ldrb	r3, [r7, #7]
 801383a:	2b0c      	cmp	r3, #12
 801383c:	d907      	bls.n	801384e <memp_free+0x22>
 801383e:	4b0c      	ldr	r3, [pc, #48]	; (8013870 <memp_free+0x44>)
 8013840:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8013844:	490b      	ldr	r1, [pc, #44]	; (8013874 <memp_free+0x48>)
 8013846:	480c      	ldr	r0, [pc, #48]	; (8013878 <memp_free+0x4c>)
 8013848:	f00a fcfc 	bl	801e244 <iprintf>
 801384c:	e00c      	b.n	8013868 <memp_free+0x3c>

  if (mem == NULL) {
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d008      	beq.n	8013866 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013854:	79fb      	ldrb	r3, [r7, #7]
 8013856:	4a09      	ldr	r2, [pc, #36]	; (801387c <memp_free+0x50>)
 8013858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801385c:	6839      	ldr	r1, [r7, #0]
 801385e:	4618      	mov	r0, r3
 8013860:	f7ff ff94 	bl	801378c <do_memp_free_pool>
 8013864:	e000      	b.n	8013868 <memp_free+0x3c>
    return;
 8013866:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013868:	3708      	adds	r7, #8
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}
 801386e:	bf00      	nop
 8013870:	08020384 	.word	0x08020384
 8013874:	08020454 	.word	0x08020454
 8013878:	080203d8 	.word	0x080203d8
 801387c:	08022c04 	.word	0x08022c04

08013880 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013880:	b480      	push	{r7}
 8013882:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013884:	bf00      	nop
 8013886:	46bd      	mov	sp, r7
 8013888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388c:	4770      	bx	lr
	...

08013890 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b086      	sub	sp, #24
 8013894:	af00      	add	r7, sp, #0
 8013896:	60f8      	str	r0, [r7, #12]
 8013898:	60b9      	str	r1, [r7, #8]
 801389a:	607a      	str	r2, [r7, #4]
 801389c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d108      	bne.n	80138b6 <netif_add+0x26>
 80138a4:	4b57      	ldr	r3, [pc, #348]	; (8013a04 <netif_add+0x174>)
 80138a6:	f240 1227 	movw	r2, #295	; 0x127
 80138aa:	4957      	ldr	r1, [pc, #348]	; (8013a08 <netif_add+0x178>)
 80138ac:	4857      	ldr	r0, [pc, #348]	; (8013a0c <netif_add+0x17c>)
 80138ae:	f00a fcc9 	bl	801e244 <iprintf>
 80138b2:	2300      	movs	r3, #0
 80138b4:	e0a2      	b.n	80139fc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80138b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d108      	bne.n	80138ce <netif_add+0x3e>
 80138bc:	4b51      	ldr	r3, [pc, #324]	; (8013a04 <netif_add+0x174>)
 80138be:	f44f 7294 	mov.w	r2, #296	; 0x128
 80138c2:	4953      	ldr	r1, [pc, #332]	; (8013a10 <netif_add+0x180>)
 80138c4:	4851      	ldr	r0, [pc, #324]	; (8013a0c <netif_add+0x17c>)
 80138c6:	f00a fcbd 	bl	801e244 <iprintf>
 80138ca:	2300      	movs	r3, #0
 80138cc:	e096      	b.n	80139fc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80138ce:	68bb      	ldr	r3, [r7, #8]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d101      	bne.n	80138d8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80138d4:	4b4f      	ldr	r3, [pc, #316]	; (8013a14 <netif_add+0x184>)
 80138d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d101      	bne.n	80138e2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80138de:	4b4d      	ldr	r3, [pc, #308]	; (8013a14 <netif_add+0x184>)
 80138e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d101      	bne.n	80138ec <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80138e8:	4b4a      	ldr	r3, [pc, #296]	; (8013a14 <netif_add+0x184>)
 80138ea:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	2200      	movs	r2, #0
 80138f0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	2200      	movs	r2, #0
 80138f6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	2200      	movs	r2, #0
 80138fc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	4a45      	ldr	r2, [pc, #276]	; (8013a18 <netif_add+0x188>)
 8013902:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	2200      	movs	r2, #0
 8013908:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	2200      	movs	r2, #0
 801390e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	2200      	movs	r2, #0
 8013916:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	6a3a      	ldr	r2, [r7, #32]
 801391c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801391e:	4b3f      	ldr	r3, [pc, #252]	; (8013a1c <netif_add+0x18c>)
 8013920:	781a      	ldrb	r2, [r3, #0]
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801392c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	687a      	ldr	r2, [r7, #4]
 8013932:	68b9      	ldr	r1, [r7, #8]
 8013934:	68f8      	ldr	r0, [r7, #12]
 8013936:	f000 f913 	bl	8013b60 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801393c:	68f8      	ldr	r0, [r7, #12]
 801393e:	4798      	blx	r3
 8013940:	4603      	mov	r3, r0
 8013942:	2b00      	cmp	r3, #0
 8013944:	d001      	beq.n	801394a <netif_add+0xba>
    return NULL;
 8013946:	2300      	movs	r3, #0
 8013948:	e058      	b.n	80139fc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013950:	2bff      	cmp	r3, #255	; 0xff
 8013952:	d103      	bne.n	801395c <netif_add+0xcc>
        netif->num = 0;
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	2200      	movs	r2, #0
 8013958:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 801395c:	2300      	movs	r3, #0
 801395e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013960:	4b2f      	ldr	r3, [pc, #188]	; (8013a20 <netif_add+0x190>)
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	617b      	str	r3, [r7, #20]
 8013966:	e02b      	b.n	80139c0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013968:	697a      	ldr	r2, [r7, #20]
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	429a      	cmp	r2, r3
 801396e:	d106      	bne.n	801397e <netif_add+0xee>
 8013970:	4b24      	ldr	r3, [pc, #144]	; (8013a04 <netif_add+0x174>)
 8013972:	f240 128b 	movw	r2, #395	; 0x18b
 8013976:	492b      	ldr	r1, [pc, #172]	; (8013a24 <netif_add+0x194>)
 8013978:	4824      	ldr	r0, [pc, #144]	; (8013a0c <netif_add+0x17c>)
 801397a:	f00a fc63 	bl	801e244 <iprintf>
        num_netifs++;
 801397e:	693b      	ldr	r3, [r7, #16]
 8013980:	3301      	adds	r3, #1
 8013982:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013984:	693b      	ldr	r3, [r7, #16]
 8013986:	2bff      	cmp	r3, #255	; 0xff
 8013988:	dd06      	ble.n	8013998 <netif_add+0x108>
 801398a:	4b1e      	ldr	r3, [pc, #120]	; (8013a04 <netif_add+0x174>)
 801398c:	f240 128d 	movw	r2, #397	; 0x18d
 8013990:	4925      	ldr	r1, [pc, #148]	; (8013a28 <netif_add+0x198>)
 8013992:	481e      	ldr	r0, [pc, #120]	; (8013a0c <netif_add+0x17c>)
 8013994:	f00a fc56 	bl	801e244 <iprintf>
        if (netif2->num == netif->num) {
 8013998:	697b      	ldr	r3, [r7, #20]
 801399a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d108      	bne.n	80139ba <netif_add+0x12a>
          netif->num++;
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80139ae:	3301      	adds	r3, #1
 80139b0:	b2da      	uxtb	r2, r3
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80139b8:	e005      	b.n	80139c6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80139ba:	697b      	ldr	r3, [r7, #20]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	617b      	str	r3, [r7, #20]
 80139c0:	697b      	ldr	r3, [r7, #20]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d1d0      	bne.n	8013968 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d1be      	bne.n	801394a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80139d2:	2bfe      	cmp	r3, #254	; 0xfe
 80139d4:	d103      	bne.n	80139de <netif_add+0x14e>
    netif_num = 0;
 80139d6:	4b11      	ldr	r3, [pc, #68]	; (8013a1c <netif_add+0x18c>)
 80139d8:	2200      	movs	r2, #0
 80139da:	701a      	strb	r2, [r3, #0]
 80139dc:	e006      	b.n	80139ec <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80139e4:	3301      	adds	r3, #1
 80139e6:	b2da      	uxtb	r2, r3
 80139e8:	4b0c      	ldr	r3, [pc, #48]	; (8013a1c <netif_add+0x18c>)
 80139ea:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80139ec:	4b0c      	ldr	r3, [pc, #48]	; (8013a20 <netif_add+0x190>)
 80139ee:	681a      	ldr	r2, [r3, #0]
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80139f4:	4a0a      	ldr	r2, [pc, #40]	; (8013a20 <netif_add+0x190>)
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80139fa:	68fb      	ldr	r3, [r7, #12]
}
 80139fc:	4618      	mov	r0, r3
 80139fe:	3718      	adds	r7, #24
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}
 8013a04:	08020470 	.word	0x08020470
 8013a08:	08020504 	.word	0x08020504
 8013a0c:	080204c0 	.word	0x080204c0
 8013a10:	08020520 	.word	0x08020520
 8013a14:	08022c78 	.word	0x08022c78
 8013a18:	08013e3b 	.word	0x08013e3b
 8013a1c:	2405e9a8 	.word	0x2405e9a8
 8013a20:	2405e9a0 	.word	0x2405e9a0
 8013a24:	08020544 	.word	0x08020544
 8013a28:	08020558 	.word	0x08020558

08013a2c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b082      	sub	sp, #8
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
 8013a34:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8013a36:	6839      	ldr	r1, [r7, #0]
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f002 fe53 	bl	80166e4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013a3e:	6839      	ldr	r1, [r7, #0]
 8013a40:	6878      	ldr	r0, [r7, #4]
 8013a42:	f007 fd3b 	bl	801b4bc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8013a46:	bf00      	nop
 8013a48:	3708      	adds	r7, #8
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	bd80      	pop	{r7, pc}
	...

08013a50 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b086      	sub	sp, #24
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	60f8      	str	r0, [r7, #12]
 8013a58:	60b9      	str	r1, [r7, #8]
 8013a5a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d106      	bne.n	8013a70 <netif_do_set_ipaddr+0x20>
 8013a62:	4b1d      	ldr	r3, [pc, #116]	; (8013ad8 <netif_do_set_ipaddr+0x88>)
 8013a64:	f240 12cb 	movw	r2, #459	; 0x1cb
 8013a68:	491c      	ldr	r1, [pc, #112]	; (8013adc <netif_do_set_ipaddr+0x8c>)
 8013a6a:	481d      	ldr	r0, [pc, #116]	; (8013ae0 <netif_do_set_ipaddr+0x90>)
 8013a6c:	f00a fbea 	bl	801e244 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d106      	bne.n	8013a84 <netif_do_set_ipaddr+0x34>
 8013a76:	4b18      	ldr	r3, [pc, #96]	; (8013ad8 <netif_do_set_ipaddr+0x88>)
 8013a78:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8013a7c:	4917      	ldr	r1, [pc, #92]	; (8013adc <netif_do_set_ipaddr+0x8c>)
 8013a7e:	4818      	ldr	r0, [pc, #96]	; (8013ae0 <netif_do_set_ipaddr+0x90>)
 8013a80:	f00a fbe0 	bl	801e244 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	681a      	ldr	r2, [r3, #0]
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	3304      	adds	r3, #4
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	d01c      	beq.n	8013acc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8013a92:	68bb      	ldr	r3, [r7, #8]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	3304      	adds	r3, #4
 8013a9c:	681a      	ldr	r2, [r3, #0]
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013aa2:	f107 0314 	add.w	r3, r7, #20
 8013aa6:	4619      	mov	r1, r3
 8013aa8:	6878      	ldr	r0, [r7, #4]
 8013aaa:	f7ff ffbf 	bl	8013a2c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013aae:	68bb      	ldr	r3, [r7, #8]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d002      	beq.n	8013aba <netif_do_set_ipaddr+0x6a>
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	e000      	b.n	8013abc <netif_do_set_ipaddr+0x6c>
 8013aba:	2300      	movs	r3, #0
 8013abc:	68fa      	ldr	r2, [r7, #12]
 8013abe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013ac0:	2101      	movs	r1, #1
 8013ac2:	68f8      	ldr	r0, [r7, #12]
 8013ac4:	f000 f8d2 	bl	8013c6c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013ac8:	2301      	movs	r3, #1
 8013aca:	e000      	b.n	8013ace <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013acc:	2300      	movs	r3, #0
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	3718      	adds	r7, #24
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	bd80      	pop	{r7, pc}
 8013ad6:	bf00      	nop
 8013ad8:	08020470 	.word	0x08020470
 8013adc:	08020588 	.word	0x08020588
 8013ae0:	080204c0 	.word	0x080204c0

08013ae4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013ae4:	b480      	push	{r7}
 8013ae6:	b085      	sub	sp, #20
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	60f8      	str	r0, [r7, #12]
 8013aec:	60b9      	str	r1, [r7, #8]
 8013aee:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013af0:	68bb      	ldr	r3, [r7, #8]
 8013af2:	681a      	ldr	r2, [r3, #0]
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	3308      	adds	r3, #8
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	429a      	cmp	r2, r3
 8013afc:	d00a      	beq.n	8013b14 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013afe:	68bb      	ldr	r3, [r7, #8]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d002      	beq.n	8013b0a <netif_do_set_netmask+0x26>
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	e000      	b.n	8013b0c <netif_do_set_netmask+0x28>
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	68fa      	ldr	r2, [r7, #12]
 8013b0e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013b10:	2301      	movs	r3, #1
 8013b12:	e000      	b.n	8013b16 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013b14:	2300      	movs	r3, #0
}
 8013b16:	4618      	mov	r0, r3
 8013b18:	3714      	adds	r7, #20
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b20:	4770      	bx	lr

08013b22 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013b22:	b480      	push	{r7}
 8013b24:	b085      	sub	sp, #20
 8013b26:	af00      	add	r7, sp, #0
 8013b28:	60f8      	str	r0, [r7, #12]
 8013b2a:	60b9      	str	r1, [r7, #8]
 8013b2c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013b2e:	68bb      	ldr	r3, [r7, #8]
 8013b30:	681a      	ldr	r2, [r3, #0]
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	330c      	adds	r3, #12
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	429a      	cmp	r2, r3
 8013b3a:	d00a      	beq.n	8013b52 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013b3c:	68bb      	ldr	r3, [r7, #8]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d002      	beq.n	8013b48 <netif_do_set_gw+0x26>
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	e000      	b.n	8013b4a <netif_do_set_gw+0x28>
 8013b48:	2300      	movs	r3, #0
 8013b4a:	68fa      	ldr	r2, [r7, #12]
 8013b4c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013b4e:	2301      	movs	r3, #1
 8013b50:	e000      	b.n	8013b54 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8013b52:	2300      	movs	r3, #0
}
 8013b54:	4618      	mov	r0, r3
 8013b56:	3714      	adds	r7, #20
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5e:	4770      	bx	lr

08013b60 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b088      	sub	sp, #32
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	60f8      	str	r0, [r7, #12]
 8013b68:	60b9      	str	r1, [r7, #8]
 8013b6a:	607a      	str	r2, [r7, #4]
 8013b6c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013b72:	2300      	movs	r3, #0
 8013b74:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013b76:	68bb      	ldr	r3, [r7, #8]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d101      	bne.n	8013b80 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013b7c:	4b1c      	ldr	r3, [pc, #112]	; (8013bf0 <netif_set_addr+0x90>)
 8013b7e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d101      	bne.n	8013b8a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013b86:	4b1a      	ldr	r3, [pc, #104]	; (8013bf0 <netif_set_addr+0x90>)
 8013b88:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013b8a:	683b      	ldr	r3, [r7, #0]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d101      	bne.n	8013b94 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013b90:	4b17      	ldr	r3, [pc, #92]	; (8013bf0 <netif_set_addr+0x90>)
 8013b92:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013b94:	68bb      	ldr	r3, [r7, #8]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d003      	beq.n	8013ba2 <netif_set_addr+0x42>
 8013b9a:	68bb      	ldr	r3, [r7, #8]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d101      	bne.n	8013ba6 <netif_set_addr+0x46>
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	e000      	b.n	8013ba8 <netif_set_addr+0x48>
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013baa:	697b      	ldr	r3, [r7, #20]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d006      	beq.n	8013bbe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013bb0:	f107 0310 	add.w	r3, r7, #16
 8013bb4:	461a      	mov	r2, r3
 8013bb6:	68b9      	ldr	r1, [r7, #8]
 8013bb8:	68f8      	ldr	r0, [r7, #12]
 8013bba:	f7ff ff49 	bl	8013a50 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013bbe:	69fa      	ldr	r2, [r7, #28]
 8013bc0:	6879      	ldr	r1, [r7, #4]
 8013bc2:	68f8      	ldr	r0, [r7, #12]
 8013bc4:	f7ff ff8e 	bl	8013ae4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013bc8:	69ba      	ldr	r2, [r7, #24]
 8013bca:	6839      	ldr	r1, [r7, #0]
 8013bcc:	68f8      	ldr	r0, [r7, #12]
 8013bce:	f7ff ffa8 	bl	8013b22 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d106      	bne.n	8013be6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013bd8:	f107 0310 	add.w	r3, r7, #16
 8013bdc:	461a      	mov	r2, r3
 8013bde:	68b9      	ldr	r1, [r7, #8]
 8013be0:	68f8      	ldr	r0, [r7, #12]
 8013be2:	f7ff ff35 	bl	8013a50 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8013be6:	bf00      	nop
 8013be8:	3720      	adds	r7, #32
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bd80      	pop	{r7, pc}
 8013bee:	bf00      	nop
 8013bf0:	08022c78 	.word	0x08022c78

08013bf4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013bf4:	b480      	push	{r7}
 8013bf6:	b083      	sub	sp, #12
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013bfc:	4a04      	ldr	r2, [pc, #16]	; (8013c10 <netif_set_default+0x1c>)
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013c02:	bf00      	nop
 8013c04:	370c      	adds	r7, #12
 8013c06:	46bd      	mov	sp, r7
 8013c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0c:	4770      	bx	lr
 8013c0e:	bf00      	nop
 8013c10:	2405e9a4 	.word	0x2405e9a4

08013c14 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b082      	sub	sp, #8
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d107      	bne.n	8013c32 <netif_set_up+0x1e>
 8013c22:	4b0f      	ldr	r3, [pc, #60]	; (8013c60 <netif_set_up+0x4c>)
 8013c24:	f44f 7254 	mov.w	r2, #848	; 0x350
 8013c28:	490e      	ldr	r1, [pc, #56]	; (8013c64 <netif_set_up+0x50>)
 8013c2a:	480f      	ldr	r0, [pc, #60]	; (8013c68 <netif_set_up+0x54>)
 8013c2c:	f00a fb0a 	bl	801e244 <iprintf>
 8013c30:	e013      	b.n	8013c5a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c38:	f003 0301 	and.w	r3, r3, #1
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d10c      	bne.n	8013c5a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c46:	f043 0301 	orr.w	r3, r3, #1
 8013c4a:	b2da      	uxtb	r2, r3
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013c52:	2103      	movs	r1, #3
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f000 f809 	bl	8013c6c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8013c5a:	3708      	adds	r7, #8
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}
 8013c60:	08020470 	.word	0x08020470
 8013c64:	080205f8 	.word	0x080205f8
 8013c68:	080204c0 	.word	0x080204c0

08013c6c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b082      	sub	sp, #8
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
 8013c74:	460b      	mov	r3, r1
 8013c76:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d106      	bne.n	8013c8c <netif_issue_reports+0x20>
 8013c7e:	4b18      	ldr	r3, [pc, #96]	; (8013ce0 <netif_issue_reports+0x74>)
 8013c80:	f240 326d 	movw	r2, #877	; 0x36d
 8013c84:	4917      	ldr	r1, [pc, #92]	; (8013ce4 <netif_issue_reports+0x78>)
 8013c86:	4818      	ldr	r0, [pc, #96]	; (8013ce8 <netif_issue_reports+0x7c>)
 8013c88:	f00a fadc 	bl	801e244 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c92:	f003 0304 	and.w	r3, r3, #4
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d01e      	beq.n	8013cd8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013ca0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d017      	beq.n	8013cd8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013ca8:	78fb      	ldrb	r3, [r7, #3]
 8013caa:	f003 0301 	and.w	r3, r3, #1
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d013      	beq.n	8013cda <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	3304      	adds	r3, #4
 8013cb6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d00e      	beq.n	8013cda <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013cc2:	f003 0308 	and.w	r3, r3, #8
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d007      	beq.n	8013cda <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	3304      	adds	r3, #4
 8013cce:	4619      	mov	r1, r3
 8013cd0:	6878      	ldr	r0, [r7, #4]
 8013cd2:	f008 fb5d 	bl	801c390 <etharp_request>
 8013cd6:	e000      	b.n	8013cda <netif_issue_reports+0x6e>
    return;
 8013cd8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8013cda:	3708      	adds	r7, #8
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}
 8013ce0:	08020470 	.word	0x08020470
 8013ce4:	08020614 	.word	0x08020614
 8013ce8:	080204c0 	.word	0x080204c0

08013cec <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b082      	sub	sp, #8
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d107      	bne.n	8013d0a <netif_set_down+0x1e>
 8013cfa:	4b12      	ldr	r3, [pc, #72]	; (8013d44 <netif_set_down+0x58>)
 8013cfc:	f240 329b 	movw	r2, #923	; 0x39b
 8013d00:	4911      	ldr	r1, [pc, #68]	; (8013d48 <netif_set_down+0x5c>)
 8013d02:	4812      	ldr	r0, [pc, #72]	; (8013d4c <netif_set_down+0x60>)
 8013d04:	f00a fa9e 	bl	801e244 <iprintf>
 8013d08:	e019      	b.n	8013d3e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013d10:	f003 0301 	and.w	r3, r3, #1
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d012      	beq.n	8013d3e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013d1e:	f023 0301 	bic.w	r3, r3, #1
 8013d22:	b2da      	uxtb	r2, r3
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013d30:	f003 0308 	and.w	r3, r3, #8
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d002      	beq.n	8013d3e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013d38:	6878      	ldr	r0, [r7, #4]
 8013d3a:	f007 fee7 	bl	801bb0c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013d3e:	3708      	adds	r7, #8
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}
 8013d44:	08020470 	.word	0x08020470
 8013d48:	08020638 	.word	0x08020638
 8013d4c:	080204c0 	.word	0x080204c0

08013d50 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b082      	sub	sp, #8
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d107      	bne.n	8013d6e <netif_set_link_up+0x1e>
 8013d5e:	4b13      	ldr	r3, [pc, #76]	; (8013dac <netif_set_link_up+0x5c>)
 8013d60:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8013d64:	4912      	ldr	r1, [pc, #72]	; (8013db0 <netif_set_link_up+0x60>)
 8013d66:	4813      	ldr	r0, [pc, #76]	; (8013db4 <netif_set_link_up+0x64>)
 8013d68:	f00a fa6c 	bl	801e244 <iprintf>
 8013d6c:	e01b      	b.n	8013da6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013d74:	f003 0304 	and.w	r3, r3, #4
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d114      	bne.n	8013da6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013d82:	f043 0304 	orr.w	r3, r3, #4
 8013d86:	b2da      	uxtb	r2, r3
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013d8e:	2103      	movs	r1, #3
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f7ff ff6b 	bl	8013c6c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	69db      	ldr	r3, [r3, #28]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d003      	beq.n	8013da6 <netif_set_link_up+0x56>
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	69db      	ldr	r3, [r3, #28]
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013da6:	3708      	adds	r7, #8
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}
 8013dac:	08020470 	.word	0x08020470
 8013db0:	08020658 	.word	0x08020658
 8013db4:	080204c0 	.word	0x080204c0

08013db8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b082      	sub	sp, #8
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d107      	bne.n	8013dd6 <netif_set_link_down+0x1e>
 8013dc6:	4b11      	ldr	r3, [pc, #68]	; (8013e0c <netif_set_link_down+0x54>)
 8013dc8:	f240 4206 	movw	r2, #1030	; 0x406
 8013dcc:	4910      	ldr	r1, [pc, #64]	; (8013e10 <netif_set_link_down+0x58>)
 8013dce:	4811      	ldr	r0, [pc, #68]	; (8013e14 <netif_set_link_down+0x5c>)
 8013dd0:	f00a fa38 	bl	801e244 <iprintf>
 8013dd4:	e017      	b.n	8013e06 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013ddc:	f003 0304 	and.w	r3, r3, #4
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d010      	beq.n	8013e06 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013dea:	f023 0304 	bic.w	r3, r3, #4
 8013dee:	b2da      	uxtb	r2, r3
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	69db      	ldr	r3, [r3, #28]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d003      	beq.n	8013e06 <netif_set_link_down+0x4e>
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	69db      	ldr	r3, [r3, #28]
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013e06:	3708      	adds	r7, #8
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}
 8013e0c:	08020470 	.word	0x08020470
 8013e10:	0802067c 	.word	0x0802067c
 8013e14:	080204c0 	.word	0x080204c0

08013e18 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013e18:	b480      	push	{r7}
 8013e1a:	b083      	sub	sp, #12
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
 8013e20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d002      	beq.n	8013e2e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	683a      	ldr	r2, [r7, #0]
 8013e2c:	61da      	str	r2, [r3, #28]
  }
}
 8013e2e:	bf00      	nop
 8013e30:	370c      	adds	r7, #12
 8013e32:	46bd      	mov	sp, r7
 8013e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e38:	4770      	bx	lr

08013e3a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013e3a:	b480      	push	{r7}
 8013e3c:	b085      	sub	sp, #20
 8013e3e:	af00      	add	r7, sp, #0
 8013e40:	60f8      	str	r0, [r7, #12]
 8013e42:	60b9      	str	r1, [r7, #8]
 8013e44:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013e46:	f06f 030b 	mvn.w	r3, #11
}
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	3714      	adds	r7, #20
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e54:	4770      	bx	lr
	...

08013e58 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013e58:	b480      	push	{r7}
 8013e5a:	b085      	sub	sp, #20
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	4603      	mov	r3, r0
 8013e60:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013e62:	79fb      	ldrb	r3, [r7, #7]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d013      	beq.n	8013e90 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013e68:	4b0d      	ldr	r3, [pc, #52]	; (8013ea0 <netif_get_by_index+0x48>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	60fb      	str	r3, [r7, #12]
 8013e6e:	e00c      	b.n	8013e8a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013e76:	3301      	adds	r3, #1
 8013e78:	b2db      	uxtb	r3, r3
 8013e7a:	79fa      	ldrb	r2, [r7, #7]
 8013e7c:	429a      	cmp	r2, r3
 8013e7e:	d101      	bne.n	8013e84 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	e006      	b.n	8013e92 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	60fb      	str	r3, [r7, #12]
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d1ef      	bne.n	8013e70 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013e90:	2300      	movs	r3, #0
}
 8013e92:	4618      	mov	r0, r3
 8013e94:	3714      	adds	r7, #20
 8013e96:	46bd      	mov	sp, r7
 8013e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9c:	4770      	bx	lr
 8013e9e:	bf00      	nop
 8013ea0:	2405e9a0 	.word	0x2405e9a0

08013ea4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b082      	sub	sp, #8
 8013ea8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013eaa:	f009 ffbb 	bl	801de24 <sys_arch_protect>
 8013eae:	6038      	str	r0, [r7, #0]
 8013eb0:	4b0d      	ldr	r3, [pc, #52]	; (8013ee8 <pbuf_free_ooseq+0x44>)
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	701a      	strb	r2, [r3, #0]
 8013eb6:	6838      	ldr	r0, [r7, #0]
 8013eb8:	f009 ffc2 	bl	801de40 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013ebc:	4b0b      	ldr	r3, [pc, #44]	; (8013eec <pbuf_free_ooseq+0x48>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	607b      	str	r3, [r7, #4]
 8013ec2:	e00a      	b.n	8013eda <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d003      	beq.n	8013ed4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013ecc:	6878      	ldr	r0, [r7, #4]
 8013ece:	f002 fc47 	bl	8016760 <tcp_free_ooseq>
      return;
 8013ed2:	e005      	b.n	8013ee0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	68db      	ldr	r3, [r3, #12]
 8013ed8:	607b      	str	r3, [r7, #4]
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d1f1      	bne.n	8013ec4 <pbuf_free_ooseq+0x20>
    }
  }
}
 8013ee0:	3708      	adds	r7, #8
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}
 8013ee6:	bf00      	nop
 8013ee8:	2405e9a9 	.word	0x2405e9a9
 8013eec:	2405e9b8 	.word	0x2405e9b8

08013ef0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b082      	sub	sp, #8
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013ef8:	f7ff ffd4 	bl	8013ea4 <pbuf_free_ooseq>
}
 8013efc:	bf00      	nop
 8013efe:	3708      	adds	r7, #8
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}

08013f04 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b082      	sub	sp, #8
 8013f08:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013f0a:	f009 ff8b 	bl	801de24 <sys_arch_protect>
 8013f0e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013f10:	4b0f      	ldr	r3, [pc, #60]	; (8013f50 <pbuf_pool_is_empty+0x4c>)
 8013f12:	781b      	ldrb	r3, [r3, #0]
 8013f14:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013f16:	4b0e      	ldr	r3, [pc, #56]	; (8013f50 <pbuf_pool_is_empty+0x4c>)
 8013f18:	2201      	movs	r2, #1
 8013f1a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	f009 ff8f 	bl	801de40 <sys_arch_unprotect>

  if (!queued) {
 8013f22:	78fb      	ldrb	r3, [r7, #3]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d10f      	bne.n	8013f48 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013f28:	2100      	movs	r1, #0
 8013f2a:	480a      	ldr	r0, [pc, #40]	; (8013f54 <pbuf_pool_is_empty+0x50>)
 8013f2c:	f7fe fd0c 	bl	8012948 <tcpip_try_callback>
 8013f30:	4603      	mov	r3, r0
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d008      	beq.n	8013f48 <pbuf_pool_is_empty+0x44>
 8013f36:	f009 ff75 	bl	801de24 <sys_arch_protect>
 8013f3a:	6078      	str	r0, [r7, #4]
 8013f3c:	4b04      	ldr	r3, [pc, #16]	; (8013f50 <pbuf_pool_is_empty+0x4c>)
 8013f3e:	2200      	movs	r2, #0
 8013f40:	701a      	strb	r2, [r3, #0]
 8013f42:	6878      	ldr	r0, [r7, #4]
 8013f44:	f009 ff7c 	bl	801de40 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013f48:	bf00      	nop
 8013f4a:	3708      	adds	r7, #8
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bd80      	pop	{r7, pc}
 8013f50:	2405e9a9 	.word	0x2405e9a9
 8013f54:	08013ef1 	.word	0x08013ef1

08013f58 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013f58:	b480      	push	{r7}
 8013f5a:	b085      	sub	sp, #20
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	60f8      	str	r0, [r7, #12]
 8013f60:	60b9      	str	r1, [r7, #8]
 8013f62:	4611      	mov	r1, r2
 8013f64:	461a      	mov	r2, r3
 8013f66:	460b      	mov	r3, r1
 8013f68:	80fb      	strh	r3, [r7, #6]
 8013f6a:	4613      	mov	r3, r2
 8013f6c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	2200      	movs	r2, #0
 8013f72:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	68ba      	ldr	r2, [r7, #8]
 8013f78:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	88fa      	ldrh	r2, [r7, #6]
 8013f7e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	88ba      	ldrh	r2, [r7, #4]
 8013f84:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013f86:	8b3b      	ldrh	r3, [r7, #24]
 8013f88:	b2da      	uxtb	r2, r3
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	7f3a      	ldrb	r2, [r7, #28]
 8013f92:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	2201      	movs	r2, #1
 8013f98:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	73da      	strb	r2, [r3, #15]
}
 8013fa0:	bf00      	nop
 8013fa2:	3714      	adds	r7, #20
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013faa:	4770      	bx	lr

08013fac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b08c      	sub	sp, #48	; 0x30
 8013fb0:	af02      	add	r7, sp, #8
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	71fb      	strb	r3, [r7, #7]
 8013fb6:	460b      	mov	r3, r1
 8013fb8:	80bb      	strh	r3, [r7, #4]
 8013fba:	4613      	mov	r3, r2
 8013fbc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013fbe:	79fb      	ldrb	r3, [r7, #7]
 8013fc0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013fc2:	887b      	ldrh	r3, [r7, #2]
 8013fc4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013fc8:	f000 8082 	beq.w	80140d0 <pbuf_alloc+0x124>
 8013fcc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013fd0:	f300 80ca 	bgt.w	8014168 <pbuf_alloc+0x1bc>
 8013fd4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013fd8:	d010      	beq.n	8013ffc <pbuf_alloc+0x50>
 8013fda:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013fde:	f300 80c3 	bgt.w	8014168 <pbuf_alloc+0x1bc>
 8013fe2:	2b01      	cmp	r3, #1
 8013fe4:	d002      	beq.n	8013fec <pbuf_alloc+0x40>
 8013fe6:	2b41      	cmp	r3, #65	; 0x41
 8013fe8:	f040 80be 	bne.w	8014168 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013fec:	887a      	ldrh	r2, [r7, #2]
 8013fee:	88bb      	ldrh	r3, [r7, #4]
 8013ff0:	4619      	mov	r1, r3
 8013ff2:	2000      	movs	r0, #0
 8013ff4:	f000 f8d4 	bl	80141a0 <pbuf_alloc_reference>
 8013ff8:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8013ffa:	e0bf      	b.n	801417c <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8014000:	2300      	movs	r3, #0
 8014002:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8014004:	88bb      	ldrh	r3, [r7, #4]
 8014006:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8014008:	200c      	movs	r0, #12
 801400a:	f7ff fb99 	bl	8013740 <memp_malloc>
 801400e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014010:	693b      	ldr	r3, [r7, #16]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d109      	bne.n	801402a <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8014016:	f7ff ff75 	bl	8013f04 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801401c:	2b00      	cmp	r3, #0
 801401e:	d002      	beq.n	8014026 <pbuf_alloc+0x7a>
            pbuf_free(p);
 8014020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014022:	f000 faab 	bl	801457c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8014026:	2300      	movs	r3, #0
 8014028:	e0a9      	b.n	801417e <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801402a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801402c:	3303      	adds	r3, #3
 801402e:	b29b      	uxth	r3, r3
 8014030:	f023 0303 	bic.w	r3, r3, #3
 8014034:	b29a      	uxth	r2, r3
 8014036:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 801403a:	1a9b      	subs	r3, r3, r2
 801403c:	b29b      	uxth	r3, r3
 801403e:	8b7a      	ldrh	r2, [r7, #26]
 8014040:	4293      	cmp	r3, r2
 8014042:	bf28      	it	cs
 8014044:	4613      	movcs	r3, r2
 8014046:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8014048:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801404a:	3310      	adds	r3, #16
 801404c:	693a      	ldr	r2, [r7, #16]
 801404e:	4413      	add	r3, r2
 8014050:	3303      	adds	r3, #3
 8014052:	f023 0303 	bic.w	r3, r3, #3
 8014056:	4618      	mov	r0, r3
 8014058:	89f9      	ldrh	r1, [r7, #14]
 801405a:	8b7a      	ldrh	r2, [r7, #26]
 801405c:	2300      	movs	r3, #0
 801405e:	9301      	str	r3, [sp, #4]
 8014060:	887b      	ldrh	r3, [r7, #2]
 8014062:	9300      	str	r3, [sp, #0]
 8014064:	460b      	mov	r3, r1
 8014066:	4601      	mov	r1, r0
 8014068:	6938      	ldr	r0, [r7, #16]
 801406a:	f7ff ff75 	bl	8013f58 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	685b      	ldr	r3, [r3, #4]
 8014072:	f003 0303 	and.w	r3, r3, #3
 8014076:	2b00      	cmp	r3, #0
 8014078:	d006      	beq.n	8014088 <pbuf_alloc+0xdc>
 801407a:	4b43      	ldr	r3, [pc, #268]	; (8014188 <pbuf_alloc+0x1dc>)
 801407c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014080:	4942      	ldr	r1, [pc, #264]	; (801418c <pbuf_alloc+0x1e0>)
 8014082:	4843      	ldr	r0, [pc, #268]	; (8014190 <pbuf_alloc+0x1e4>)
 8014084:	f00a f8de 	bl	801e244 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014088:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801408a:	3303      	adds	r3, #3
 801408c:	f023 0303 	bic.w	r3, r3, #3
 8014090:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8014094:	4293      	cmp	r3, r2
 8014096:	d106      	bne.n	80140a6 <pbuf_alloc+0xfa>
 8014098:	4b3b      	ldr	r3, [pc, #236]	; (8014188 <pbuf_alloc+0x1dc>)
 801409a:	f44f 7281 	mov.w	r2, #258	; 0x102
 801409e:	493d      	ldr	r1, [pc, #244]	; (8014194 <pbuf_alloc+0x1e8>)
 80140a0:	483b      	ldr	r0, [pc, #236]	; (8014190 <pbuf_alloc+0x1e4>)
 80140a2:	f00a f8cf 	bl	801e244 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80140a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d102      	bne.n	80140b2 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80140ac:	693b      	ldr	r3, [r7, #16]
 80140ae:	627b      	str	r3, [r7, #36]	; 0x24
 80140b0:	e002      	b.n	80140b8 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80140b2:	69fb      	ldr	r3, [r7, #28]
 80140b4:	693a      	ldr	r2, [r7, #16]
 80140b6:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80140b8:	693b      	ldr	r3, [r7, #16]
 80140ba:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80140bc:	8b7a      	ldrh	r2, [r7, #26]
 80140be:	89fb      	ldrh	r3, [r7, #14]
 80140c0:	1ad3      	subs	r3, r2, r3
 80140c2:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80140c4:	2300      	movs	r3, #0
 80140c6:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80140c8:	8b7b      	ldrh	r3, [r7, #26]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d19c      	bne.n	8014008 <pbuf_alloc+0x5c>
      break;
 80140ce:	e055      	b.n	801417c <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80140d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80140d2:	3303      	adds	r3, #3
 80140d4:	b29b      	uxth	r3, r3
 80140d6:	f023 0303 	bic.w	r3, r3, #3
 80140da:	b29a      	uxth	r2, r3
 80140dc:	88bb      	ldrh	r3, [r7, #4]
 80140de:	3303      	adds	r3, #3
 80140e0:	b29b      	uxth	r3, r3
 80140e2:	f023 0303 	bic.w	r3, r3, #3
 80140e6:	b29b      	uxth	r3, r3
 80140e8:	4413      	add	r3, r2
 80140ea:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80140ec:	8b3b      	ldrh	r3, [r7, #24]
 80140ee:	3310      	adds	r3, #16
 80140f0:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80140f2:	8b3a      	ldrh	r2, [r7, #24]
 80140f4:	88bb      	ldrh	r3, [r7, #4]
 80140f6:	3303      	adds	r3, #3
 80140f8:	f023 0303 	bic.w	r3, r3, #3
 80140fc:	429a      	cmp	r2, r3
 80140fe:	d306      	bcc.n	801410e <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8014100:	8afa      	ldrh	r2, [r7, #22]
 8014102:	88bb      	ldrh	r3, [r7, #4]
 8014104:	3303      	adds	r3, #3
 8014106:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801410a:	429a      	cmp	r2, r3
 801410c:	d201      	bcs.n	8014112 <pbuf_alloc+0x166>
        return NULL;
 801410e:	2300      	movs	r3, #0
 8014110:	e035      	b.n	801417e <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014112:	8afb      	ldrh	r3, [r7, #22]
 8014114:	4618      	mov	r0, r3
 8014116:	f7ff f96b 	bl	80133f0 <mem_malloc>
 801411a:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801411e:	2b00      	cmp	r3, #0
 8014120:	d101      	bne.n	8014126 <pbuf_alloc+0x17a>
        return NULL;
 8014122:	2300      	movs	r3, #0
 8014124:	e02b      	b.n	801417e <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014126:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014128:	3310      	adds	r3, #16
 801412a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801412c:	4413      	add	r3, r2
 801412e:	3303      	adds	r3, #3
 8014130:	f023 0303 	bic.w	r3, r3, #3
 8014134:	4618      	mov	r0, r3
 8014136:	88b9      	ldrh	r1, [r7, #4]
 8014138:	88ba      	ldrh	r2, [r7, #4]
 801413a:	2300      	movs	r3, #0
 801413c:	9301      	str	r3, [sp, #4]
 801413e:	887b      	ldrh	r3, [r7, #2]
 8014140:	9300      	str	r3, [sp, #0]
 8014142:	460b      	mov	r3, r1
 8014144:	4601      	mov	r1, r0
 8014146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014148:	f7ff ff06 	bl	8013f58 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801414e:	685b      	ldr	r3, [r3, #4]
 8014150:	f003 0303 	and.w	r3, r3, #3
 8014154:	2b00      	cmp	r3, #0
 8014156:	d010      	beq.n	801417a <pbuf_alloc+0x1ce>
 8014158:	4b0b      	ldr	r3, [pc, #44]	; (8014188 <pbuf_alloc+0x1dc>)
 801415a:	f44f 7291 	mov.w	r2, #290	; 0x122
 801415e:	490e      	ldr	r1, [pc, #56]	; (8014198 <pbuf_alloc+0x1ec>)
 8014160:	480b      	ldr	r0, [pc, #44]	; (8014190 <pbuf_alloc+0x1e4>)
 8014162:	f00a f86f 	bl	801e244 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8014166:	e008      	b.n	801417a <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8014168:	4b07      	ldr	r3, [pc, #28]	; (8014188 <pbuf_alloc+0x1dc>)
 801416a:	f240 1227 	movw	r2, #295	; 0x127
 801416e:	490b      	ldr	r1, [pc, #44]	; (801419c <pbuf_alloc+0x1f0>)
 8014170:	4807      	ldr	r0, [pc, #28]	; (8014190 <pbuf_alloc+0x1e4>)
 8014172:	f00a f867 	bl	801e244 <iprintf>
      return NULL;
 8014176:	2300      	movs	r3, #0
 8014178:	e001      	b.n	801417e <pbuf_alloc+0x1d2>
      break;
 801417a:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801417e:	4618      	mov	r0, r3
 8014180:	3728      	adds	r7, #40	; 0x28
 8014182:	46bd      	mov	sp, r7
 8014184:	bd80      	pop	{r7, pc}
 8014186:	bf00      	nop
 8014188:	080206a0 	.word	0x080206a0
 801418c:	080206d0 	.word	0x080206d0
 8014190:	08020700 	.word	0x08020700
 8014194:	08020728 	.word	0x08020728
 8014198:	0802075c 	.word	0x0802075c
 801419c:	08020788 	.word	0x08020788

080141a0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b086      	sub	sp, #24
 80141a4:	af02      	add	r7, sp, #8
 80141a6:	6078      	str	r0, [r7, #4]
 80141a8:	460b      	mov	r3, r1
 80141aa:	807b      	strh	r3, [r7, #2]
 80141ac:	4613      	mov	r3, r2
 80141ae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80141b0:	883b      	ldrh	r3, [r7, #0]
 80141b2:	2b41      	cmp	r3, #65	; 0x41
 80141b4:	d009      	beq.n	80141ca <pbuf_alloc_reference+0x2a>
 80141b6:	883b      	ldrh	r3, [r7, #0]
 80141b8:	2b01      	cmp	r3, #1
 80141ba:	d006      	beq.n	80141ca <pbuf_alloc_reference+0x2a>
 80141bc:	4b0f      	ldr	r3, [pc, #60]	; (80141fc <pbuf_alloc_reference+0x5c>)
 80141be:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80141c2:	490f      	ldr	r1, [pc, #60]	; (8014200 <pbuf_alloc_reference+0x60>)
 80141c4:	480f      	ldr	r0, [pc, #60]	; (8014204 <pbuf_alloc_reference+0x64>)
 80141c6:	f00a f83d 	bl	801e244 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80141ca:	200b      	movs	r0, #11
 80141cc:	f7ff fab8 	bl	8013740 <memp_malloc>
 80141d0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d101      	bne.n	80141dc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80141d8:	2300      	movs	r3, #0
 80141da:	e00b      	b.n	80141f4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80141dc:	8879      	ldrh	r1, [r7, #2]
 80141de:	887a      	ldrh	r2, [r7, #2]
 80141e0:	2300      	movs	r3, #0
 80141e2:	9301      	str	r3, [sp, #4]
 80141e4:	883b      	ldrh	r3, [r7, #0]
 80141e6:	9300      	str	r3, [sp, #0]
 80141e8:	460b      	mov	r3, r1
 80141ea:	6879      	ldr	r1, [r7, #4]
 80141ec:	68f8      	ldr	r0, [r7, #12]
 80141ee:	f7ff feb3 	bl	8013f58 <pbuf_init_alloced_pbuf>
  return p;
 80141f2:	68fb      	ldr	r3, [r7, #12]
}
 80141f4:	4618      	mov	r0, r3
 80141f6:	3710      	adds	r7, #16
 80141f8:	46bd      	mov	sp, r7
 80141fa:	bd80      	pop	{r7, pc}
 80141fc:	080206a0 	.word	0x080206a0
 8014200:	080207a4 	.word	0x080207a4
 8014204:	08020700 	.word	0x08020700

08014208 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b088      	sub	sp, #32
 801420c:	af02      	add	r7, sp, #8
 801420e:	607b      	str	r3, [r7, #4]
 8014210:	4603      	mov	r3, r0
 8014212:	73fb      	strb	r3, [r7, #15]
 8014214:	460b      	mov	r3, r1
 8014216:	81bb      	strh	r3, [r7, #12]
 8014218:	4613      	mov	r3, r2
 801421a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801421c:	7bfb      	ldrb	r3, [r7, #15]
 801421e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8014220:	8a7b      	ldrh	r3, [r7, #18]
 8014222:	3303      	adds	r3, #3
 8014224:	f023 0203 	bic.w	r2, r3, #3
 8014228:	89bb      	ldrh	r3, [r7, #12]
 801422a:	441a      	add	r2, r3
 801422c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801422e:	429a      	cmp	r2, r3
 8014230:	d901      	bls.n	8014236 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8014232:	2300      	movs	r3, #0
 8014234:	e018      	b.n	8014268 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8014236:	6a3b      	ldr	r3, [r7, #32]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d007      	beq.n	801424c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801423c:	8a7b      	ldrh	r3, [r7, #18]
 801423e:	3303      	adds	r3, #3
 8014240:	f023 0303 	bic.w	r3, r3, #3
 8014244:	6a3a      	ldr	r2, [r7, #32]
 8014246:	4413      	add	r3, r2
 8014248:	617b      	str	r3, [r7, #20]
 801424a:	e001      	b.n	8014250 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801424c:	2300      	movs	r3, #0
 801424e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	89b9      	ldrh	r1, [r7, #12]
 8014254:	89ba      	ldrh	r2, [r7, #12]
 8014256:	2302      	movs	r3, #2
 8014258:	9301      	str	r3, [sp, #4]
 801425a:	897b      	ldrh	r3, [r7, #10]
 801425c:	9300      	str	r3, [sp, #0]
 801425e:	460b      	mov	r3, r1
 8014260:	6979      	ldr	r1, [r7, #20]
 8014262:	f7ff fe79 	bl	8013f58 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8014266:	687b      	ldr	r3, [r7, #4]
}
 8014268:	4618      	mov	r0, r3
 801426a:	3718      	adds	r7, #24
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}

08014270 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8014270:	b580      	push	{r7, lr}
 8014272:	b084      	sub	sp, #16
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
 8014278:	460b      	mov	r3, r1
 801427a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d106      	bne.n	8014290 <pbuf_realloc+0x20>
 8014282:	4b3a      	ldr	r3, [pc, #232]	; (801436c <pbuf_realloc+0xfc>)
 8014284:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8014288:	4939      	ldr	r1, [pc, #228]	; (8014370 <pbuf_realloc+0x100>)
 801428a:	483a      	ldr	r0, [pc, #232]	; (8014374 <pbuf_realloc+0x104>)
 801428c:	f009 ffda 	bl	801e244 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	891b      	ldrh	r3, [r3, #8]
 8014294:	887a      	ldrh	r2, [r7, #2]
 8014296:	429a      	cmp	r2, r3
 8014298:	d263      	bcs.n	8014362 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	891a      	ldrh	r2, [r3, #8]
 801429e:	887b      	ldrh	r3, [r7, #2]
 80142a0:	1ad3      	subs	r3, r2, r3
 80142a2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80142a4:	887b      	ldrh	r3, [r7, #2]
 80142a6:	817b      	strh	r3, [r7, #10]
  q = p;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80142ac:	e018      	b.n	80142e0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	895b      	ldrh	r3, [r3, #10]
 80142b2:	897a      	ldrh	r2, [r7, #10]
 80142b4:	1ad3      	subs	r3, r2, r3
 80142b6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	891a      	ldrh	r2, [r3, #8]
 80142bc:	893b      	ldrh	r3, [r7, #8]
 80142be:	1ad3      	subs	r3, r2, r3
 80142c0:	b29a      	uxth	r2, r3
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d106      	bne.n	80142e0 <pbuf_realloc+0x70>
 80142d2:	4b26      	ldr	r3, [pc, #152]	; (801436c <pbuf_realloc+0xfc>)
 80142d4:	f240 12af 	movw	r2, #431	; 0x1af
 80142d8:	4927      	ldr	r1, [pc, #156]	; (8014378 <pbuf_realloc+0x108>)
 80142da:	4826      	ldr	r0, [pc, #152]	; (8014374 <pbuf_realloc+0x104>)
 80142dc:	f009 ffb2 	bl	801e244 <iprintf>
  while (rem_len > q->len) {
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	895b      	ldrh	r3, [r3, #10]
 80142e4:	897a      	ldrh	r2, [r7, #10]
 80142e6:	429a      	cmp	r2, r3
 80142e8:	d8e1      	bhi.n	80142ae <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	7b1b      	ldrb	r3, [r3, #12]
 80142ee:	f003 030f 	and.w	r3, r3, #15
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d121      	bne.n	801433a <pbuf_realloc+0xca>
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	895b      	ldrh	r3, [r3, #10]
 80142fa:	897a      	ldrh	r2, [r7, #10]
 80142fc:	429a      	cmp	r2, r3
 80142fe:	d01c      	beq.n	801433a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	7b5b      	ldrb	r3, [r3, #13]
 8014304:	f003 0302 	and.w	r3, r3, #2
 8014308:	2b00      	cmp	r3, #0
 801430a:	d116      	bne.n	801433a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	685a      	ldr	r2, [r3, #4]
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	1ad3      	subs	r3, r2, r3
 8014314:	b29a      	uxth	r2, r3
 8014316:	897b      	ldrh	r3, [r7, #10]
 8014318:	4413      	add	r3, r2
 801431a:	b29b      	uxth	r3, r3
 801431c:	4619      	mov	r1, r3
 801431e:	68f8      	ldr	r0, [r7, #12]
 8014320:	f7fe ff56 	bl	80131d0 <mem_trim>
 8014324:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d106      	bne.n	801433a <pbuf_realloc+0xca>
 801432c:	4b0f      	ldr	r3, [pc, #60]	; (801436c <pbuf_realloc+0xfc>)
 801432e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8014332:	4912      	ldr	r1, [pc, #72]	; (801437c <pbuf_realloc+0x10c>)
 8014334:	480f      	ldr	r0, [pc, #60]	; (8014374 <pbuf_realloc+0x104>)
 8014336:	f009 ff85 	bl	801e244 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	897a      	ldrh	r2, [r7, #10]
 801433e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	895a      	ldrh	r2, [r3, #10]
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d004      	beq.n	801435a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	4618      	mov	r0, r3
 8014356:	f000 f911 	bl	801457c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	2200      	movs	r2, #0
 801435e:	601a      	str	r2, [r3, #0]
 8014360:	e000      	b.n	8014364 <pbuf_realloc+0xf4>
    return;
 8014362:	bf00      	nop

}
 8014364:	3710      	adds	r7, #16
 8014366:	46bd      	mov	sp, r7
 8014368:	bd80      	pop	{r7, pc}
 801436a:	bf00      	nop
 801436c:	080206a0 	.word	0x080206a0
 8014370:	080207b8 	.word	0x080207b8
 8014374:	08020700 	.word	0x08020700
 8014378:	080207d0 	.word	0x080207d0
 801437c:	080207e8 	.word	0x080207e8

08014380 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	b086      	sub	sp, #24
 8014384:	af00      	add	r7, sp, #0
 8014386:	60f8      	str	r0, [r7, #12]
 8014388:	60b9      	str	r1, [r7, #8]
 801438a:	4613      	mov	r3, r2
 801438c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d106      	bne.n	80143a2 <pbuf_add_header_impl+0x22>
 8014394:	4b2b      	ldr	r3, [pc, #172]	; (8014444 <pbuf_add_header_impl+0xc4>)
 8014396:	f240 12df 	movw	r2, #479	; 0x1df
 801439a:	492b      	ldr	r1, [pc, #172]	; (8014448 <pbuf_add_header_impl+0xc8>)
 801439c:	482b      	ldr	r0, [pc, #172]	; (801444c <pbuf_add_header_impl+0xcc>)
 801439e:	f009 ff51 	bl	801e244 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d003      	beq.n	80143b0 <pbuf_add_header_impl+0x30>
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80143ae:	d301      	bcc.n	80143b4 <pbuf_add_header_impl+0x34>
    return 1;
 80143b0:	2301      	movs	r3, #1
 80143b2:	e043      	b.n	801443c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80143b4:	68bb      	ldr	r3, [r7, #8]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d101      	bne.n	80143be <pbuf_add_header_impl+0x3e>
    return 0;
 80143ba:	2300      	movs	r3, #0
 80143bc:	e03e      	b.n	801443c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80143be:	68bb      	ldr	r3, [r7, #8]
 80143c0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	891a      	ldrh	r2, [r3, #8]
 80143c6:	8a7b      	ldrh	r3, [r7, #18]
 80143c8:	4413      	add	r3, r2
 80143ca:	b29b      	uxth	r3, r3
 80143cc:	8a7a      	ldrh	r2, [r7, #18]
 80143ce:	429a      	cmp	r2, r3
 80143d0:	d901      	bls.n	80143d6 <pbuf_add_header_impl+0x56>
    return 1;
 80143d2:	2301      	movs	r3, #1
 80143d4:	e032      	b.n	801443c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	7b1b      	ldrb	r3, [r3, #12]
 80143da:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80143dc:	8a3b      	ldrh	r3, [r7, #16]
 80143de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d00c      	beq.n	8014400 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	685a      	ldr	r2, [r3, #4]
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	425b      	negs	r3, r3
 80143ee:	4413      	add	r3, r2
 80143f0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	3310      	adds	r3, #16
 80143f6:	697a      	ldr	r2, [r7, #20]
 80143f8:	429a      	cmp	r2, r3
 80143fa:	d20d      	bcs.n	8014418 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80143fc:	2301      	movs	r3, #1
 80143fe:	e01d      	b.n	801443c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014400:	79fb      	ldrb	r3, [r7, #7]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d006      	beq.n	8014414 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	685a      	ldr	r2, [r3, #4]
 801440a:	68bb      	ldr	r3, [r7, #8]
 801440c:	425b      	negs	r3, r3
 801440e:	4413      	add	r3, r2
 8014410:	617b      	str	r3, [r7, #20]
 8014412:	e001      	b.n	8014418 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014414:	2301      	movs	r3, #1
 8014416:	e011      	b.n	801443c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	697a      	ldr	r2, [r7, #20]
 801441c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	895a      	ldrh	r2, [r3, #10]
 8014422:	8a7b      	ldrh	r3, [r7, #18]
 8014424:	4413      	add	r3, r2
 8014426:	b29a      	uxth	r2, r3
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	891a      	ldrh	r2, [r3, #8]
 8014430:	8a7b      	ldrh	r3, [r7, #18]
 8014432:	4413      	add	r3, r2
 8014434:	b29a      	uxth	r2, r3
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	811a      	strh	r2, [r3, #8]


  return 0;
 801443a:	2300      	movs	r3, #0
}
 801443c:	4618      	mov	r0, r3
 801443e:	3718      	adds	r7, #24
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}
 8014444:	080206a0 	.word	0x080206a0
 8014448:	08020804 	.word	0x08020804
 801444c:	08020700 	.word	0x08020700

08014450 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b082      	sub	sp, #8
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
 8014458:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801445a:	2200      	movs	r2, #0
 801445c:	6839      	ldr	r1, [r7, #0]
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f7ff ff8e 	bl	8014380 <pbuf_add_header_impl>
 8014464:	4603      	mov	r3, r0
}
 8014466:	4618      	mov	r0, r3
 8014468:	3708      	adds	r7, #8
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}
	...

08014470 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b084      	sub	sp, #16
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d106      	bne.n	801448e <pbuf_remove_header+0x1e>
 8014480:	4b20      	ldr	r3, [pc, #128]	; (8014504 <pbuf_remove_header+0x94>)
 8014482:	f240 224b 	movw	r2, #587	; 0x24b
 8014486:	4920      	ldr	r1, [pc, #128]	; (8014508 <pbuf_remove_header+0x98>)
 8014488:	4820      	ldr	r0, [pc, #128]	; (801450c <pbuf_remove_header+0x9c>)
 801448a:	f009 fedb 	bl	801e244 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d003      	beq.n	801449c <pbuf_remove_header+0x2c>
 8014494:	683b      	ldr	r3, [r7, #0]
 8014496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801449a:	d301      	bcc.n	80144a0 <pbuf_remove_header+0x30>
    return 1;
 801449c:	2301      	movs	r3, #1
 801449e:	e02c      	b.n	80144fa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80144a0:	683b      	ldr	r3, [r7, #0]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d101      	bne.n	80144aa <pbuf_remove_header+0x3a>
    return 0;
 80144a6:	2300      	movs	r3, #0
 80144a8:	e027      	b.n	80144fa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80144aa:	683b      	ldr	r3, [r7, #0]
 80144ac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	895b      	ldrh	r3, [r3, #10]
 80144b2:	89fa      	ldrh	r2, [r7, #14]
 80144b4:	429a      	cmp	r2, r3
 80144b6:	d908      	bls.n	80144ca <pbuf_remove_header+0x5a>
 80144b8:	4b12      	ldr	r3, [pc, #72]	; (8014504 <pbuf_remove_header+0x94>)
 80144ba:	f240 2255 	movw	r2, #597	; 0x255
 80144be:	4914      	ldr	r1, [pc, #80]	; (8014510 <pbuf_remove_header+0xa0>)
 80144c0:	4812      	ldr	r0, [pc, #72]	; (801450c <pbuf_remove_header+0x9c>)
 80144c2:	f009 febf 	bl	801e244 <iprintf>
 80144c6:	2301      	movs	r3, #1
 80144c8:	e017      	b.n	80144fa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	685b      	ldr	r3, [r3, #4]
 80144ce:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	685a      	ldr	r2, [r3, #4]
 80144d4:	683b      	ldr	r3, [r7, #0]
 80144d6:	441a      	add	r2, r3
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	895a      	ldrh	r2, [r3, #10]
 80144e0:	89fb      	ldrh	r3, [r7, #14]
 80144e2:	1ad3      	subs	r3, r2, r3
 80144e4:	b29a      	uxth	r2, r3
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	891a      	ldrh	r2, [r3, #8]
 80144ee:	89fb      	ldrh	r3, [r7, #14]
 80144f0:	1ad3      	subs	r3, r2, r3
 80144f2:	b29a      	uxth	r2, r3
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80144f8:	2300      	movs	r3, #0
}
 80144fa:	4618      	mov	r0, r3
 80144fc:	3710      	adds	r7, #16
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}
 8014502:	bf00      	nop
 8014504:	080206a0 	.word	0x080206a0
 8014508:	08020804 	.word	0x08020804
 801450c:	08020700 	.word	0x08020700
 8014510:	08020810 	.word	0x08020810

08014514 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b082      	sub	sp, #8
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
 801451c:	460b      	mov	r3, r1
 801451e:	807b      	strh	r3, [r7, #2]
 8014520:	4613      	mov	r3, r2
 8014522:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014524:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014528:	2b00      	cmp	r3, #0
 801452a:	da08      	bge.n	801453e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801452c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014530:	425b      	negs	r3, r3
 8014532:	4619      	mov	r1, r3
 8014534:	6878      	ldr	r0, [r7, #4]
 8014536:	f7ff ff9b 	bl	8014470 <pbuf_remove_header>
 801453a:	4603      	mov	r3, r0
 801453c:	e007      	b.n	801454e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801453e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014542:	787a      	ldrb	r2, [r7, #1]
 8014544:	4619      	mov	r1, r3
 8014546:	6878      	ldr	r0, [r7, #4]
 8014548:	f7ff ff1a 	bl	8014380 <pbuf_add_header_impl>
 801454c:	4603      	mov	r3, r0
  }
}
 801454e:	4618      	mov	r0, r3
 8014550:	3708      	adds	r7, #8
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}

08014556 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014556:	b580      	push	{r7, lr}
 8014558:	b082      	sub	sp, #8
 801455a:	af00      	add	r7, sp, #0
 801455c:	6078      	str	r0, [r7, #4]
 801455e:	460b      	mov	r3, r1
 8014560:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014562:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014566:	2201      	movs	r2, #1
 8014568:	4619      	mov	r1, r3
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f7ff ffd2 	bl	8014514 <pbuf_header_impl>
 8014570:	4603      	mov	r3, r0
}
 8014572:	4618      	mov	r0, r3
 8014574:	3708      	adds	r7, #8
 8014576:	46bd      	mov	sp, r7
 8014578:	bd80      	pop	{r7, pc}
	...

0801457c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b088      	sub	sp, #32
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d10b      	bne.n	80145a2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d106      	bne.n	801459e <pbuf_free+0x22>
 8014590:	4b3b      	ldr	r3, [pc, #236]	; (8014680 <pbuf_free+0x104>)
 8014592:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8014596:	493b      	ldr	r1, [pc, #236]	; (8014684 <pbuf_free+0x108>)
 8014598:	483b      	ldr	r0, [pc, #236]	; (8014688 <pbuf_free+0x10c>)
 801459a:	f009 fe53 	bl	801e244 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801459e:	2300      	movs	r3, #0
 80145a0:	e069      	b.n	8014676 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80145a2:	2300      	movs	r3, #0
 80145a4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80145a6:	e062      	b.n	801466e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80145a8:	f009 fc3c 	bl	801de24 <sys_arch_protect>
 80145ac:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	7b9b      	ldrb	r3, [r3, #14]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d106      	bne.n	80145c4 <pbuf_free+0x48>
 80145b6:	4b32      	ldr	r3, [pc, #200]	; (8014680 <pbuf_free+0x104>)
 80145b8:	f240 22f1 	movw	r2, #753	; 0x2f1
 80145bc:	4933      	ldr	r1, [pc, #204]	; (801468c <pbuf_free+0x110>)
 80145be:	4832      	ldr	r0, [pc, #200]	; (8014688 <pbuf_free+0x10c>)
 80145c0:	f009 fe40 	bl	801e244 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	7b9b      	ldrb	r3, [r3, #14]
 80145c8:	3b01      	subs	r3, #1
 80145ca:	b2da      	uxtb	r2, r3
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	739a      	strb	r2, [r3, #14]
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	7b9b      	ldrb	r3, [r3, #14]
 80145d4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80145d6:	69b8      	ldr	r0, [r7, #24]
 80145d8:	f009 fc32 	bl	801de40 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80145dc:	7dfb      	ldrb	r3, [r7, #23]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d143      	bne.n	801466a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	7b1b      	ldrb	r3, [r3, #12]
 80145ec:	f003 030f 	and.w	r3, r3, #15
 80145f0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	7b5b      	ldrb	r3, [r3, #13]
 80145f6:	f003 0302 	and.w	r3, r3, #2
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d011      	beq.n	8014622 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014602:	68bb      	ldr	r3, [r7, #8]
 8014604:	691b      	ldr	r3, [r3, #16]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d106      	bne.n	8014618 <pbuf_free+0x9c>
 801460a:	4b1d      	ldr	r3, [pc, #116]	; (8014680 <pbuf_free+0x104>)
 801460c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8014610:	491f      	ldr	r1, [pc, #124]	; (8014690 <pbuf_free+0x114>)
 8014612:	481d      	ldr	r0, [pc, #116]	; (8014688 <pbuf_free+0x10c>)
 8014614:	f009 fe16 	bl	801e244 <iprintf>
        pc->custom_free_function(p);
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	691b      	ldr	r3, [r3, #16]
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	4798      	blx	r3
 8014620:	e01d      	b.n	801465e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014622:	7bfb      	ldrb	r3, [r7, #15]
 8014624:	2b02      	cmp	r3, #2
 8014626:	d104      	bne.n	8014632 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014628:	6879      	ldr	r1, [r7, #4]
 801462a:	200c      	movs	r0, #12
 801462c:	f7ff f8fe 	bl	801382c <memp_free>
 8014630:	e015      	b.n	801465e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014632:	7bfb      	ldrb	r3, [r7, #15]
 8014634:	2b01      	cmp	r3, #1
 8014636:	d104      	bne.n	8014642 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014638:	6879      	ldr	r1, [r7, #4]
 801463a:	200b      	movs	r0, #11
 801463c:	f7ff f8f6 	bl	801382c <memp_free>
 8014640:	e00d      	b.n	801465e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014642:	7bfb      	ldrb	r3, [r7, #15]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d103      	bne.n	8014650 <pbuf_free+0xd4>
          mem_free(p);
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f7fe fd31 	bl	80130b0 <mem_free>
 801464e:	e006      	b.n	801465e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014650:	4b0b      	ldr	r3, [pc, #44]	; (8014680 <pbuf_free+0x104>)
 8014652:	f240 320f 	movw	r2, #783	; 0x30f
 8014656:	490f      	ldr	r1, [pc, #60]	; (8014694 <pbuf_free+0x118>)
 8014658:	480b      	ldr	r0, [pc, #44]	; (8014688 <pbuf_free+0x10c>)
 801465a:	f009 fdf3 	bl	801e244 <iprintf>
        }
      }
      count++;
 801465e:	7ffb      	ldrb	r3, [r7, #31]
 8014660:	3301      	adds	r3, #1
 8014662:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	607b      	str	r3, [r7, #4]
 8014668:	e001      	b.n	801466e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801466a:	2300      	movs	r3, #0
 801466c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d199      	bne.n	80145a8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014674:	7ffb      	ldrb	r3, [r7, #31]
}
 8014676:	4618      	mov	r0, r3
 8014678:	3720      	adds	r7, #32
 801467a:	46bd      	mov	sp, r7
 801467c:	bd80      	pop	{r7, pc}
 801467e:	bf00      	nop
 8014680:	080206a0 	.word	0x080206a0
 8014684:	08020804 	.word	0x08020804
 8014688:	08020700 	.word	0x08020700
 801468c:	08020830 	.word	0x08020830
 8014690:	08020848 	.word	0x08020848
 8014694:	0802086c 	.word	0x0802086c

08014698 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014698:	b480      	push	{r7}
 801469a:	b085      	sub	sp, #20
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80146a0:	2300      	movs	r3, #0
 80146a2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80146a4:	e005      	b.n	80146b2 <pbuf_clen+0x1a>
    ++len;
 80146a6:	89fb      	ldrh	r3, [r7, #14]
 80146a8:	3301      	adds	r3, #1
 80146aa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d1f6      	bne.n	80146a6 <pbuf_clen+0xe>
  }
  return len;
 80146b8:	89fb      	ldrh	r3, [r7, #14]
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3714      	adds	r7, #20
 80146be:	46bd      	mov	sp, r7
 80146c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c4:	4770      	bx	lr
	...

080146c8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b084      	sub	sp, #16
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d016      	beq.n	8014704 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80146d6:	f009 fba5 	bl	801de24 <sys_arch_protect>
 80146da:	60f8      	str	r0, [r7, #12]
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	7b9b      	ldrb	r3, [r3, #14]
 80146e0:	3301      	adds	r3, #1
 80146e2:	b2da      	uxtb	r2, r3
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	739a      	strb	r2, [r3, #14]
 80146e8:	68f8      	ldr	r0, [r7, #12]
 80146ea:	f009 fba9 	bl	801de40 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	7b9b      	ldrb	r3, [r3, #14]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d106      	bne.n	8014704 <pbuf_ref+0x3c>
 80146f6:	4b05      	ldr	r3, [pc, #20]	; (801470c <pbuf_ref+0x44>)
 80146f8:	f240 3242 	movw	r2, #834	; 0x342
 80146fc:	4904      	ldr	r1, [pc, #16]	; (8014710 <pbuf_ref+0x48>)
 80146fe:	4805      	ldr	r0, [pc, #20]	; (8014714 <pbuf_ref+0x4c>)
 8014700:	f009 fda0 	bl	801e244 <iprintf>
  }
}
 8014704:	bf00      	nop
 8014706:	3710      	adds	r7, #16
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}
 801470c:	080206a0 	.word	0x080206a0
 8014710:	08020880 	.word	0x08020880
 8014714:	08020700 	.word	0x08020700

08014718 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b084      	sub	sp, #16
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
 8014720:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d002      	beq.n	801472e <pbuf_cat+0x16>
 8014728:	683b      	ldr	r3, [r7, #0]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d107      	bne.n	801473e <pbuf_cat+0x26>
 801472e:	4b20      	ldr	r3, [pc, #128]	; (80147b0 <pbuf_cat+0x98>)
 8014730:	f240 3259 	movw	r2, #857	; 0x359
 8014734:	491f      	ldr	r1, [pc, #124]	; (80147b4 <pbuf_cat+0x9c>)
 8014736:	4820      	ldr	r0, [pc, #128]	; (80147b8 <pbuf_cat+0xa0>)
 8014738:	f009 fd84 	bl	801e244 <iprintf>
 801473c:	e034      	b.n	80147a8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	60fb      	str	r3, [r7, #12]
 8014742:	e00a      	b.n	801475a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	891a      	ldrh	r2, [r3, #8]
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	891b      	ldrh	r3, [r3, #8]
 801474c:	4413      	add	r3, r2
 801474e:	b29a      	uxth	r2, r3
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	60fb      	str	r3, [r7, #12]
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d1f0      	bne.n	8014744 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	891a      	ldrh	r2, [r3, #8]
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	895b      	ldrh	r3, [r3, #10]
 801476a:	429a      	cmp	r2, r3
 801476c:	d006      	beq.n	801477c <pbuf_cat+0x64>
 801476e:	4b10      	ldr	r3, [pc, #64]	; (80147b0 <pbuf_cat+0x98>)
 8014770:	f240 3262 	movw	r2, #866	; 0x362
 8014774:	4911      	ldr	r1, [pc, #68]	; (80147bc <pbuf_cat+0xa4>)
 8014776:	4810      	ldr	r0, [pc, #64]	; (80147b8 <pbuf_cat+0xa0>)
 8014778:	f009 fd64 	bl	801e244 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d006      	beq.n	8014792 <pbuf_cat+0x7a>
 8014784:	4b0a      	ldr	r3, [pc, #40]	; (80147b0 <pbuf_cat+0x98>)
 8014786:	f240 3263 	movw	r2, #867	; 0x363
 801478a:	490d      	ldr	r1, [pc, #52]	; (80147c0 <pbuf_cat+0xa8>)
 801478c:	480a      	ldr	r0, [pc, #40]	; (80147b8 <pbuf_cat+0xa0>)
 801478e:	f009 fd59 	bl	801e244 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	891a      	ldrh	r2, [r3, #8]
 8014796:	683b      	ldr	r3, [r7, #0]
 8014798:	891b      	ldrh	r3, [r3, #8]
 801479a:	4413      	add	r3, r2
 801479c:	b29a      	uxth	r2, r3
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	683a      	ldr	r2, [r7, #0]
 80147a6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80147a8:	3710      	adds	r7, #16
 80147aa:	46bd      	mov	sp, r7
 80147ac:	bd80      	pop	{r7, pc}
 80147ae:	bf00      	nop
 80147b0:	080206a0 	.word	0x080206a0
 80147b4:	08020894 	.word	0x08020894
 80147b8:	08020700 	.word	0x08020700
 80147bc:	080208cc 	.word	0x080208cc
 80147c0:	080208fc 	.word	0x080208fc

080147c4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b086      	sub	sp, #24
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80147ce:	2300      	movs	r3, #0
 80147d0:	617b      	str	r3, [r7, #20]
 80147d2:	2300      	movs	r3, #0
 80147d4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d008      	beq.n	80147ee <pbuf_copy+0x2a>
 80147dc:	683b      	ldr	r3, [r7, #0]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d005      	beq.n	80147ee <pbuf_copy+0x2a>
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	891a      	ldrh	r2, [r3, #8]
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	891b      	ldrh	r3, [r3, #8]
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d209      	bcs.n	8014802 <pbuf_copy+0x3e>
 80147ee:	4b57      	ldr	r3, [pc, #348]	; (801494c <pbuf_copy+0x188>)
 80147f0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80147f4:	4956      	ldr	r1, [pc, #344]	; (8014950 <pbuf_copy+0x18c>)
 80147f6:	4857      	ldr	r0, [pc, #348]	; (8014954 <pbuf_copy+0x190>)
 80147f8:	f009 fd24 	bl	801e244 <iprintf>
 80147fc:	f06f 030f 	mvn.w	r3, #15
 8014800:	e09f      	b.n	8014942 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	895b      	ldrh	r3, [r3, #10]
 8014806:	461a      	mov	r2, r3
 8014808:	697b      	ldr	r3, [r7, #20]
 801480a:	1ad2      	subs	r2, r2, r3
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	895b      	ldrh	r3, [r3, #10]
 8014810:	4619      	mov	r1, r3
 8014812:	693b      	ldr	r3, [r7, #16]
 8014814:	1acb      	subs	r3, r1, r3
 8014816:	429a      	cmp	r2, r3
 8014818:	d306      	bcc.n	8014828 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	895b      	ldrh	r3, [r3, #10]
 801481e:	461a      	mov	r2, r3
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	1ad3      	subs	r3, r2, r3
 8014824:	60fb      	str	r3, [r7, #12]
 8014826:	e005      	b.n	8014834 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	895b      	ldrh	r3, [r3, #10]
 801482c:	461a      	mov	r2, r3
 801482e:	697b      	ldr	r3, [r7, #20]
 8014830:	1ad3      	subs	r3, r2, r3
 8014832:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	685a      	ldr	r2, [r3, #4]
 8014838:	697b      	ldr	r3, [r7, #20]
 801483a:	18d0      	adds	r0, r2, r3
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	685a      	ldr	r2, [r3, #4]
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	4413      	add	r3, r2
 8014844:	68fa      	ldr	r2, [r7, #12]
 8014846:	4619      	mov	r1, r3
 8014848:	f009 fc37 	bl	801e0ba <memcpy>
    offset_to += len;
 801484c:	697a      	ldr	r2, [r7, #20]
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	4413      	add	r3, r2
 8014852:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014854:	693a      	ldr	r2, [r7, #16]
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	4413      	add	r3, r2
 801485a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	895b      	ldrh	r3, [r3, #10]
 8014860:	461a      	mov	r2, r3
 8014862:	697b      	ldr	r3, [r7, #20]
 8014864:	4293      	cmp	r3, r2
 8014866:	d906      	bls.n	8014876 <pbuf_copy+0xb2>
 8014868:	4b38      	ldr	r3, [pc, #224]	; (801494c <pbuf_copy+0x188>)
 801486a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801486e:	493a      	ldr	r1, [pc, #232]	; (8014958 <pbuf_copy+0x194>)
 8014870:	4838      	ldr	r0, [pc, #224]	; (8014954 <pbuf_copy+0x190>)
 8014872:	f009 fce7 	bl	801e244 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014876:	683b      	ldr	r3, [r7, #0]
 8014878:	895b      	ldrh	r3, [r3, #10]
 801487a:	461a      	mov	r2, r3
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	4293      	cmp	r3, r2
 8014880:	d906      	bls.n	8014890 <pbuf_copy+0xcc>
 8014882:	4b32      	ldr	r3, [pc, #200]	; (801494c <pbuf_copy+0x188>)
 8014884:	f240 32da 	movw	r2, #986	; 0x3da
 8014888:	4934      	ldr	r1, [pc, #208]	; (801495c <pbuf_copy+0x198>)
 801488a:	4832      	ldr	r0, [pc, #200]	; (8014954 <pbuf_copy+0x190>)
 801488c:	f009 fcda 	bl	801e244 <iprintf>
    if (offset_from >= p_from->len) {
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	895b      	ldrh	r3, [r3, #10]
 8014894:	461a      	mov	r2, r3
 8014896:	693b      	ldr	r3, [r7, #16]
 8014898:	4293      	cmp	r3, r2
 801489a:	d304      	bcc.n	80148a6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801489c:	2300      	movs	r3, #0
 801489e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	895b      	ldrh	r3, [r3, #10]
 80148aa:	461a      	mov	r2, r3
 80148ac:	697b      	ldr	r3, [r7, #20]
 80148ae:	4293      	cmp	r3, r2
 80148b0:	d114      	bne.n	80148dc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80148b2:	2300      	movs	r3, #0
 80148b4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d10c      	bne.n	80148dc <pbuf_copy+0x118>
 80148c2:	683b      	ldr	r3, [r7, #0]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d009      	beq.n	80148dc <pbuf_copy+0x118>
 80148c8:	4b20      	ldr	r3, [pc, #128]	; (801494c <pbuf_copy+0x188>)
 80148ca:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80148ce:	4924      	ldr	r1, [pc, #144]	; (8014960 <pbuf_copy+0x19c>)
 80148d0:	4820      	ldr	r0, [pc, #128]	; (8014954 <pbuf_copy+0x190>)
 80148d2:	f009 fcb7 	bl	801e244 <iprintf>
 80148d6:	f06f 030f 	mvn.w	r3, #15
 80148da:	e032      	b.n	8014942 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80148dc:	683b      	ldr	r3, [r7, #0]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d013      	beq.n	801490a <pbuf_copy+0x146>
 80148e2:	683b      	ldr	r3, [r7, #0]
 80148e4:	895a      	ldrh	r2, [r3, #10]
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	891b      	ldrh	r3, [r3, #8]
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d10d      	bne.n	801490a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80148ee:	683b      	ldr	r3, [r7, #0]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d009      	beq.n	801490a <pbuf_copy+0x146>
 80148f6:	4b15      	ldr	r3, [pc, #84]	; (801494c <pbuf_copy+0x188>)
 80148f8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80148fc:	4919      	ldr	r1, [pc, #100]	; (8014964 <pbuf_copy+0x1a0>)
 80148fe:	4815      	ldr	r0, [pc, #84]	; (8014954 <pbuf_copy+0x190>)
 8014900:	f009 fca0 	bl	801e244 <iprintf>
 8014904:	f06f 0305 	mvn.w	r3, #5
 8014908:	e01b      	b.n	8014942 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d013      	beq.n	8014938 <pbuf_copy+0x174>
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	895a      	ldrh	r2, [r3, #10]
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	891b      	ldrh	r3, [r3, #8]
 8014918:	429a      	cmp	r2, r3
 801491a:	d10d      	bne.n	8014938 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d009      	beq.n	8014938 <pbuf_copy+0x174>
 8014924:	4b09      	ldr	r3, [pc, #36]	; (801494c <pbuf_copy+0x188>)
 8014926:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801492a:	490e      	ldr	r1, [pc, #56]	; (8014964 <pbuf_copy+0x1a0>)
 801492c:	4809      	ldr	r0, [pc, #36]	; (8014954 <pbuf_copy+0x190>)
 801492e:	f009 fc89 	bl	801e244 <iprintf>
 8014932:	f06f 0305 	mvn.w	r3, #5
 8014936:	e004      	b.n	8014942 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014938:	683b      	ldr	r3, [r7, #0]
 801493a:	2b00      	cmp	r3, #0
 801493c:	f47f af61 	bne.w	8014802 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014940:	2300      	movs	r3, #0
}
 8014942:	4618      	mov	r0, r3
 8014944:	3718      	adds	r7, #24
 8014946:	46bd      	mov	sp, r7
 8014948:	bd80      	pop	{r7, pc}
 801494a:	bf00      	nop
 801494c:	080206a0 	.word	0x080206a0
 8014950:	08020948 	.word	0x08020948
 8014954:	08020700 	.word	0x08020700
 8014958:	08020978 	.word	0x08020978
 801495c:	08020990 	.word	0x08020990
 8014960:	080209ac 	.word	0x080209ac
 8014964:	080209bc 	.word	0x080209bc

08014968 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b088      	sub	sp, #32
 801496c:	af00      	add	r7, sp, #0
 801496e:	60f8      	str	r0, [r7, #12]
 8014970:	60b9      	str	r1, [r7, #8]
 8014972:	4611      	mov	r1, r2
 8014974:	461a      	mov	r2, r3
 8014976:	460b      	mov	r3, r1
 8014978:	80fb      	strh	r3, [r7, #6]
 801497a:	4613      	mov	r3, r2
 801497c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801497e:	2300      	movs	r3, #0
 8014980:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014982:	2300      	movs	r3, #0
 8014984:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d108      	bne.n	801499e <pbuf_copy_partial+0x36>
 801498c:	4b2b      	ldr	r3, [pc, #172]	; (8014a3c <pbuf_copy_partial+0xd4>)
 801498e:	f240 420a 	movw	r2, #1034	; 0x40a
 8014992:	492b      	ldr	r1, [pc, #172]	; (8014a40 <pbuf_copy_partial+0xd8>)
 8014994:	482b      	ldr	r0, [pc, #172]	; (8014a44 <pbuf_copy_partial+0xdc>)
 8014996:	f009 fc55 	bl	801e244 <iprintf>
 801499a:	2300      	movs	r3, #0
 801499c:	e04a      	b.n	8014a34 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d108      	bne.n	80149b6 <pbuf_copy_partial+0x4e>
 80149a4:	4b25      	ldr	r3, [pc, #148]	; (8014a3c <pbuf_copy_partial+0xd4>)
 80149a6:	f240 420b 	movw	r2, #1035	; 0x40b
 80149aa:	4927      	ldr	r1, [pc, #156]	; (8014a48 <pbuf_copy_partial+0xe0>)
 80149ac:	4825      	ldr	r0, [pc, #148]	; (8014a44 <pbuf_copy_partial+0xdc>)
 80149ae:	f009 fc49 	bl	801e244 <iprintf>
 80149b2:	2300      	movs	r3, #0
 80149b4:	e03e      	b.n	8014a34 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	61fb      	str	r3, [r7, #28]
 80149ba:	e034      	b.n	8014a26 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80149bc:	88bb      	ldrh	r3, [r7, #4]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d00a      	beq.n	80149d8 <pbuf_copy_partial+0x70>
 80149c2:	69fb      	ldr	r3, [r7, #28]
 80149c4:	895b      	ldrh	r3, [r3, #10]
 80149c6:	88ba      	ldrh	r2, [r7, #4]
 80149c8:	429a      	cmp	r2, r3
 80149ca:	d305      	bcc.n	80149d8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80149cc:	69fb      	ldr	r3, [r7, #28]
 80149ce:	895b      	ldrh	r3, [r3, #10]
 80149d0:	88ba      	ldrh	r2, [r7, #4]
 80149d2:	1ad3      	subs	r3, r2, r3
 80149d4:	80bb      	strh	r3, [r7, #4]
 80149d6:	e023      	b.n	8014a20 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80149d8:	69fb      	ldr	r3, [r7, #28]
 80149da:	895a      	ldrh	r2, [r3, #10]
 80149dc:	88bb      	ldrh	r3, [r7, #4]
 80149de:	1ad3      	subs	r3, r2, r3
 80149e0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80149e2:	8b3a      	ldrh	r2, [r7, #24]
 80149e4:	88fb      	ldrh	r3, [r7, #6]
 80149e6:	429a      	cmp	r2, r3
 80149e8:	d901      	bls.n	80149ee <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80149ea:	88fb      	ldrh	r3, [r7, #6]
 80149ec:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80149ee:	8b7b      	ldrh	r3, [r7, #26]
 80149f0:	68ba      	ldr	r2, [r7, #8]
 80149f2:	18d0      	adds	r0, r2, r3
 80149f4:	69fb      	ldr	r3, [r7, #28]
 80149f6:	685a      	ldr	r2, [r3, #4]
 80149f8:	88bb      	ldrh	r3, [r7, #4]
 80149fa:	4413      	add	r3, r2
 80149fc:	8b3a      	ldrh	r2, [r7, #24]
 80149fe:	4619      	mov	r1, r3
 8014a00:	f009 fb5b 	bl	801e0ba <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014a04:	8afa      	ldrh	r2, [r7, #22]
 8014a06:	8b3b      	ldrh	r3, [r7, #24]
 8014a08:	4413      	add	r3, r2
 8014a0a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8014a0c:	8b7a      	ldrh	r2, [r7, #26]
 8014a0e:	8b3b      	ldrh	r3, [r7, #24]
 8014a10:	4413      	add	r3, r2
 8014a12:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014a14:	88fa      	ldrh	r2, [r7, #6]
 8014a16:	8b3b      	ldrh	r3, [r7, #24]
 8014a18:	1ad3      	subs	r3, r2, r3
 8014a1a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014a20:	69fb      	ldr	r3, [r7, #28]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	61fb      	str	r3, [r7, #28]
 8014a26:	88fb      	ldrh	r3, [r7, #6]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d002      	beq.n	8014a32 <pbuf_copy_partial+0xca>
 8014a2c:	69fb      	ldr	r3, [r7, #28]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d1c4      	bne.n	80149bc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014a32:	8afb      	ldrh	r3, [r7, #22]
}
 8014a34:	4618      	mov	r0, r3
 8014a36:	3720      	adds	r7, #32
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}
 8014a3c:	080206a0 	.word	0x080206a0
 8014a40:	080209e8 	.word	0x080209e8
 8014a44:	08020700 	.word	0x08020700
 8014a48:	08020a08 	.word	0x08020a08

08014a4c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b084      	sub	sp, #16
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	4603      	mov	r3, r0
 8014a54:	603a      	str	r2, [r7, #0]
 8014a56:	71fb      	strb	r3, [r7, #7]
 8014a58:	460b      	mov	r3, r1
 8014a5a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014a5c:	683b      	ldr	r3, [r7, #0]
 8014a5e:	8919      	ldrh	r1, [r3, #8]
 8014a60:	88ba      	ldrh	r2, [r7, #4]
 8014a62:	79fb      	ldrb	r3, [r7, #7]
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7ff faa1 	bl	8013fac <pbuf_alloc>
 8014a6a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d101      	bne.n	8014a76 <pbuf_clone+0x2a>
    return NULL;
 8014a72:	2300      	movs	r3, #0
 8014a74:	e011      	b.n	8014a9a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8014a76:	6839      	ldr	r1, [r7, #0]
 8014a78:	68f8      	ldr	r0, [r7, #12]
 8014a7a:	f7ff fea3 	bl	80147c4 <pbuf_copy>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014a82:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d006      	beq.n	8014a98 <pbuf_clone+0x4c>
 8014a8a:	4b06      	ldr	r3, [pc, #24]	; (8014aa4 <pbuf_clone+0x58>)
 8014a8c:	f240 5224 	movw	r2, #1316	; 0x524
 8014a90:	4905      	ldr	r1, [pc, #20]	; (8014aa8 <pbuf_clone+0x5c>)
 8014a92:	4806      	ldr	r0, [pc, #24]	; (8014aac <pbuf_clone+0x60>)
 8014a94:	f009 fbd6 	bl	801e244 <iprintf>
  return q;
 8014a98:	68fb      	ldr	r3, [r7, #12]
}
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	3710      	adds	r7, #16
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	bd80      	pop	{r7, pc}
 8014aa2:	bf00      	nop
 8014aa4:	080206a0 	.word	0x080206a0
 8014aa8:	08020b14 	.word	0x08020b14
 8014aac:	08020700 	.word	0x08020700

08014ab0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014ab4:	f009 fbde 	bl	801e274 <rand>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	b29b      	uxth	r3, r3
 8014abc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014ac0:	b29b      	uxth	r3, r3
 8014ac2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014ac6:	b29a      	uxth	r2, r3
 8014ac8:	4b01      	ldr	r3, [pc, #4]	; (8014ad0 <tcp_init+0x20>)
 8014aca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014acc:	bf00      	nop
 8014ace:	bd80      	pop	{r7, pc}
 8014ad0:	24000028 	.word	0x24000028

08014ad4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b082      	sub	sp, #8
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	7d1b      	ldrb	r3, [r3, #20]
 8014ae0:	2b01      	cmp	r3, #1
 8014ae2:	d105      	bne.n	8014af0 <tcp_free+0x1c>
 8014ae4:	4b06      	ldr	r3, [pc, #24]	; (8014b00 <tcp_free+0x2c>)
 8014ae6:	22d4      	movs	r2, #212	; 0xd4
 8014ae8:	4906      	ldr	r1, [pc, #24]	; (8014b04 <tcp_free+0x30>)
 8014aea:	4807      	ldr	r0, [pc, #28]	; (8014b08 <tcp_free+0x34>)
 8014aec:	f009 fbaa 	bl	801e244 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014af0:	6879      	ldr	r1, [r7, #4]
 8014af2:	2001      	movs	r0, #1
 8014af4:	f7fe fe9a 	bl	801382c <memp_free>
}
 8014af8:	bf00      	nop
 8014afa:	3708      	adds	r7, #8
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd80      	pop	{r7, pc}
 8014b00:	08020ba0 	.word	0x08020ba0
 8014b04:	08020bd0 	.word	0x08020bd0
 8014b08:	08020be4 	.word	0x08020be4

08014b0c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b082      	sub	sp, #8
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	7d1b      	ldrb	r3, [r3, #20]
 8014b18:	2b01      	cmp	r3, #1
 8014b1a:	d105      	bne.n	8014b28 <tcp_free_listen+0x1c>
 8014b1c:	4b06      	ldr	r3, [pc, #24]	; (8014b38 <tcp_free_listen+0x2c>)
 8014b1e:	22df      	movs	r2, #223	; 0xdf
 8014b20:	4906      	ldr	r1, [pc, #24]	; (8014b3c <tcp_free_listen+0x30>)
 8014b22:	4807      	ldr	r0, [pc, #28]	; (8014b40 <tcp_free_listen+0x34>)
 8014b24:	f009 fb8e 	bl	801e244 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8014b28:	6879      	ldr	r1, [r7, #4]
 8014b2a:	2002      	movs	r0, #2
 8014b2c:	f7fe fe7e 	bl	801382c <memp_free>
}
 8014b30:	bf00      	nop
 8014b32:	3708      	adds	r7, #8
 8014b34:	46bd      	mov	sp, r7
 8014b36:	bd80      	pop	{r7, pc}
 8014b38:	08020ba0 	.word	0x08020ba0
 8014b3c:	08020c0c 	.word	0x08020c0c
 8014b40:	08020be4 	.word	0x08020be4

08014b44 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8014b48:	f001 f8a6 	bl	8015c98 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014b4c:	4b07      	ldr	r3, [pc, #28]	; (8014b6c <tcp_tmr+0x28>)
 8014b4e:	781b      	ldrb	r3, [r3, #0]
 8014b50:	3301      	adds	r3, #1
 8014b52:	b2da      	uxtb	r2, r3
 8014b54:	4b05      	ldr	r3, [pc, #20]	; (8014b6c <tcp_tmr+0x28>)
 8014b56:	701a      	strb	r2, [r3, #0]
 8014b58:	4b04      	ldr	r3, [pc, #16]	; (8014b6c <tcp_tmr+0x28>)
 8014b5a:	781b      	ldrb	r3, [r3, #0]
 8014b5c:	f003 0301 	and.w	r3, r3, #1
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d001      	beq.n	8014b68 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014b64:	f000 fd58 	bl	8015618 <tcp_slowtmr>
  }
}
 8014b68:	bf00      	nop
 8014b6a:	bd80      	pop	{r7, pc}
 8014b6c:	2405e9c1 	.word	0x2405e9c1

08014b70 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014b70:	b580      	push	{r7, lr}
 8014b72:	b084      	sub	sp, #16
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
 8014b78:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d105      	bne.n	8014b8c <tcp_remove_listener+0x1c>
 8014b80:	4b0d      	ldr	r3, [pc, #52]	; (8014bb8 <tcp_remove_listener+0x48>)
 8014b82:	22ff      	movs	r2, #255	; 0xff
 8014b84:	490d      	ldr	r1, [pc, #52]	; (8014bbc <tcp_remove_listener+0x4c>)
 8014b86:	480e      	ldr	r0, [pc, #56]	; (8014bc0 <tcp_remove_listener+0x50>)
 8014b88:	f009 fb5c 	bl	801e244 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	60fb      	str	r3, [r7, #12]
 8014b90:	e00a      	b.n	8014ba8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b96:	683a      	ldr	r2, [r7, #0]
 8014b98:	429a      	cmp	r2, r3
 8014b9a:	d102      	bne.n	8014ba2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	68db      	ldr	r3, [r3, #12]
 8014ba6:	60fb      	str	r3, [r7, #12]
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d1f1      	bne.n	8014b92 <tcp_remove_listener+0x22>
    }
  }
}
 8014bae:	bf00      	nop
 8014bb0:	bf00      	nop
 8014bb2:	3710      	adds	r7, #16
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}
 8014bb8:	08020ba0 	.word	0x08020ba0
 8014bbc:	08020c28 	.word	0x08020c28
 8014bc0:	08020be4 	.word	0x08020be4

08014bc4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b084      	sub	sp, #16
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d106      	bne.n	8014be0 <tcp_listen_closed+0x1c>
 8014bd2:	4b14      	ldr	r3, [pc, #80]	; (8014c24 <tcp_listen_closed+0x60>)
 8014bd4:	f240 1211 	movw	r2, #273	; 0x111
 8014bd8:	4913      	ldr	r1, [pc, #76]	; (8014c28 <tcp_listen_closed+0x64>)
 8014bda:	4814      	ldr	r0, [pc, #80]	; (8014c2c <tcp_listen_closed+0x68>)
 8014bdc:	f009 fb32 	bl	801e244 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	7d1b      	ldrb	r3, [r3, #20]
 8014be4:	2b01      	cmp	r3, #1
 8014be6:	d006      	beq.n	8014bf6 <tcp_listen_closed+0x32>
 8014be8:	4b0e      	ldr	r3, [pc, #56]	; (8014c24 <tcp_listen_closed+0x60>)
 8014bea:	f44f 7289 	mov.w	r2, #274	; 0x112
 8014bee:	4910      	ldr	r1, [pc, #64]	; (8014c30 <tcp_listen_closed+0x6c>)
 8014bf0:	480e      	ldr	r0, [pc, #56]	; (8014c2c <tcp_listen_closed+0x68>)
 8014bf2:	f009 fb27 	bl	801e244 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014bf6:	2301      	movs	r3, #1
 8014bf8:	60fb      	str	r3, [r7, #12]
 8014bfa:	e00b      	b.n	8014c14 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8014bfc:	4a0d      	ldr	r2, [pc, #52]	; (8014c34 <tcp_listen_closed+0x70>)
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	6879      	ldr	r1, [r7, #4]
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f7ff ffb1 	bl	8014b70 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	3301      	adds	r3, #1
 8014c12:	60fb      	str	r3, [r7, #12]
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	2b03      	cmp	r3, #3
 8014c18:	d9f0      	bls.n	8014bfc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8014c1a:	bf00      	nop
 8014c1c:	bf00      	nop
 8014c1e:	3710      	adds	r7, #16
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}
 8014c24:	08020ba0 	.word	0x08020ba0
 8014c28:	08020c50 	.word	0x08020c50
 8014c2c:	08020be4 	.word	0x08020be4
 8014c30:	08020c5c 	.word	0x08020c5c
 8014c34:	08022c50 	.word	0x08022c50

08014c38 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014c38:	b5b0      	push	{r4, r5, r7, lr}
 8014c3a:	b088      	sub	sp, #32
 8014c3c:	af04      	add	r7, sp, #16
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	460b      	mov	r3, r1
 8014c42:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d106      	bne.n	8014c58 <tcp_close_shutdown+0x20>
 8014c4a:	4b63      	ldr	r3, [pc, #396]	; (8014dd8 <tcp_close_shutdown+0x1a0>)
 8014c4c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8014c50:	4962      	ldr	r1, [pc, #392]	; (8014ddc <tcp_close_shutdown+0x1a4>)
 8014c52:	4863      	ldr	r0, [pc, #396]	; (8014de0 <tcp_close_shutdown+0x1a8>)
 8014c54:	f009 faf6 	bl	801e244 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014c58:	78fb      	ldrb	r3, [r7, #3]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d066      	beq.n	8014d2c <tcp_close_shutdown+0xf4>
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	7d1b      	ldrb	r3, [r3, #20]
 8014c62:	2b04      	cmp	r3, #4
 8014c64:	d003      	beq.n	8014c6e <tcp_close_shutdown+0x36>
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	7d1b      	ldrb	r3, [r3, #20]
 8014c6a:	2b07      	cmp	r3, #7
 8014c6c:	d15e      	bne.n	8014d2c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d104      	bne.n	8014c80 <tcp_close_shutdown+0x48>
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014c7a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014c7e:	d055      	beq.n	8014d2c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	8b5b      	ldrh	r3, [r3, #26]
 8014c84:	f003 0310 	and.w	r3, r3, #16
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d106      	bne.n	8014c9a <tcp_close_shutdown+0x62>
 8014c8c:	4b52      	ldr	r3, [pc, #328]	; (8014dd8 <tcp_close_shutdown+0x1a0>)
 8014c8e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8014c92:	4954      	ldr	r1, [pc, #336]	; (8014de4 <tcp_close_shutdown+0x1ac>)
 8014c94:	4852      	ldr	r0, [pc, #328]	; (8014de0 <tcp_close_shutdown+0x1a8>)
 8014c96:	f009 fad5 	bl	801e244 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014ca2:	687d      	ldr	r5, [r7, #4]
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	3304      	adds	r3, #4
 8014ca8:	687a      	ldr	r2, [r7, #4]
 8014caa:	8ad2      	ldrh	r2, [r2, #22]
 8014cac:	6879      	ldr	r1, [r7, #4]
 8014cae:	8b09      	ldrh	r1, [r1, #24]
 8014cb0:	9102      	str	r1, [sp, #8]
 8014cb2:	9201      	str	r2, [sp, #4]
 8014cb4:	9300      	str	r3, [sp, #0]
 8014cb6:	462b      	mov	r3, r5
 8014cb8:	4622      	mov	r2, r4
 8014cba:	4601      	mov	r1, r0
 8014cbc:	6878      	ldr	r0, [r7, #4]
 8014cbe:	f005 fdf1 	bl	801a8a4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014cc2:	6878      	ldr	r0, [r7, #4]
 8014cc4:	f001 fb98 	bl	80163f8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014cc8:	4b47      	ldr	r3, [pc, #284]	; (8014de8 <tcp_close_shutdown+0x1b0>)
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	687a      	ldr	r2, [r7, #4]
 8014cce:	429a      	cmp	r2, r3
 8014cd0:	d105      	bne.n	8014cde <tcp_close_shutdown+0xa6>
 8014cd2:	4b45      	ldr	r3, [pc, #276]	; (8014de8 <tcp_close_shutdown+0x1b0>)
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	68db      	ldr	r3, [r3, #12]
 8014cd8:	4a43      	ldr	r2, [pc, #268]	; (8014de8 <tcp_close_shutdown+0x1b0>)
 8014cda:	6013      	str	r3, [r2, #0]
 8014cdc:	e013      	b.n	8014d06 <tcp_close_shutdown+0xce>
 8014cde:	4b42      	ldr	r3, [pc, #264]	; (8014de8 <tcp_close_shutdown+0x1b0>)
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	60fb      	str	r3, [r7, #12]
 8014ce4:	e00c      	b.n	8014d00 <tcp_close_shutdown+0xc8>
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	68db      	ldr	r3, [r3, #12]
 8014cea:	687a      	ldr	r2, [r7, #4]
 8014cec:	429a      	cmp	r2, r3
 8014cee:	d104      	bne.n	8014cfa <tcp_close_shutdown+0xc2>
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	68da      	ldr	r2, [r3, #12]
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	60da      	str	r2, [r3, #12]
 8014cf8:	e005      	b.n	8014d06 <tcp_close_shutdown+0xce>
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	68db      	ldr	r3, [r3, #12]
 8014cfe:	60fb      	str	r3, [r7, #12]
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d1ef      	bne.n	8014ce6 <tcp_close_shutdown+0xae>
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	2200      	movs	r2, #0
 8014d0a:	60da      	str	r2, [r3, #12]
 8014d0c:	4b37      	ldr	r3, [pc, #220]	; (8014dec <tcp_close_shutdown+0x1b4>)
 8014d0e:	2201      	movs	r2, #1
 8014d10:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014d12:	4b37      	ldr	r3, [pc, #220]	; (8014df0 <tcp_close_shutdown+0x1b8>)
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	687a      	ldr	r2, [r7, #4]
 8014d18:	429a      	cmp	r2, r3
 8014d1a:	d102      	bne.n	8014d22 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014d1c:	f004 f844 	bl	8018da8 <tcp_trigger_input_pcb_close>
 8014d20:	e002      	b.n	8014d28 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014d22:	6878      	ldr	r0, [r7, #4]
 8014d24:	f7ff fed6 	bl	8014ad4 <tcp_free>
      }
      return ERR_OK;
 8014d28:	2300      	movs	r3, #0
 8014d2a:	e050      	b.n	8014dce <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	7d1b      	ldrb	r3, [r3, #20]
 8014d30:	2b02      	cmp	r3, #2
 8014d32:	d03b      	beq.n	8014dac <tcp_close_shutdown+0x174>
 8014d34:	2b02      	cmp	r3, #2
 8014d36:	dc44      	bgt.n	8014dc2 <tcp_close_shutdown+0x18a>
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d002      	beq.n	8014d42 <tcp_close_shutdown+0x10a>
 8014d3c:	2b01      	cmp	r3, #1
 8014d3e:	d02a      	beq.n	8014d96 <tcp_close_shutdown+0x15e>
 8014d40:	e03f      	b.n	8014dc2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	8adb      	ldrh	r3, [r3, #22]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d021      	beq.n	8014d8e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014d4a:	4b2a      	ldr	r3, [pc, #168]	; (8014df4 <tcp_close_shutdown+0x1bc>)
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	687a      	ldr	r2, [r7, #4]
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d105      	bne.n	8014d60 <tcp_close_shutdown+0x128>
 8014d54:	4b27      	ldr	r3, [pc, #156]	; (8014df4 <tcp_close_shutdown+0x1bc>)
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	68db      	ldr	r3, [r3, #12]
 8014d5a:	4a26      	ldr	r2, [pc, #152]	; (8014df4 <tcp_close_shutdown+0x1bc>)
 8014d5c:	6013      	str	r3, [r2, #0]
 8014d5e:	e013      	b.n	8014d88 <tcp_close_shutdown+0x150>
 8014d60:	4b24      	ldr	r3, [pc, #144]	; (8014df4 <tcp_close_shutdown+0x1bc>)
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	60bb      	str	r3, [r7, #8]
 8014d66:	e00c      	b.n	8014d82 <tcp_close_shutdown+0x14a>
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	68db      	ldr	r3, [r3, #12]
 8014d6c:	687a      	ldr	r2, [r7, #4]
 8014d6e:	429a      	cmp	r2, r3
 8014d70:	d104      	bne.n	8014d7c <tcp_close_shutdown+0x144>
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	68da      	ldr	r2, [r3, #12]
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	60da      	str	r2, [r3, #12]
 8014d7a:	e005      	b.n	8014d88 <tcp_close_shutdown+0x150>
 8014d7c:	68bb      	ldr	r3, [r7, #8]
 8014d7e:	68db      	ldr	r3, [r3, #12]
 8014d80:	60bb      	str	r3, [r7, #8]
 8014d82:	68bb      	ldr	r3, [r7, #8]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d1ef      	bne.n	8014d68 <tcp_close_shutdown+0x130>
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014d8e:	6878      	ldr	r0, [r7, #4]
 8014d90:	f7ff fea0 	bl	8014ad4 <tcp_free>
      break;
 8014d94:	e01a      	b.n	8014dcc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014d96:	6878      	ldr	r0, [r7, #4]
 8014d98:	f7ff ff14 	bl	8014bc4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014d9c:	6879      	ldr	r1, [r7, #4]
 8014d9e:	4816      	ldr	r0, [pc, #88]	; (8014df8 <tcp_close_shutdown+0x1c0>)
 8014da0:	f001 fb7a 	bl	8016498 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014da4:	6878      	ldr	r0, [r7, #4]
 8014da6:	f7ff feb1 	bl	8014b0c <tcp_free_listen>
      break;
 8014daa:	e00f      	b.n	8014dcc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014dac:	6879      	ldr	r1, [r7, #4]
 8014dae:	480e      	ldr	r0, [pc, #56]	; (8014de8 <tcp_close_shutdown+0x1b0>)
 8014db0:	f001 fb72 	bl	8016498 <tcp_pcb_remove>
 8014db4:	4b0d      	ldr	r3, [pc, #52]	; (8014dec <tcp_close_shutdown+0x1b4>)
 8014db6:	2201      	movs	r2, #1
 8014db8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014dba:	6878      	ldr	r0, [r7, #4]
 8014dbc:	f7ff fe8a 	bl	8014ad4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014dc0:	e004      	b.n	8014dcc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014dc2:	6878      	ldr	r0, [r7, #4]
 8014dc4:	f000 f81a 	bl	8014dfc <tcp_close_shutdown_fin>
 8014dc8:	4603      	mov	r3, r0
 8014dca:	e000      	b.n	8014dce <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014dcc:	2300      	movs	r3, #0
}
 8014dce:	4618      	mov	r0, r3
 8014dd0:	3710      	adds	r7, #16
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8014dd6:	bf00      	nop
 8014dd8:	08020ba0 	.word	0x08020ba0
 8014ddc:	08020c74 	.word	0x08020c74
 8014de0:	08020be4 	.word	0x08020be4
 8014de4:	08020c94 	.word	0x08020c94
 8014de8:	2405e9b8 	.word	0x2405e9b8
 8014dec:	2405e9c0 	.word	0x2405e9c0
 8014df0:	2405e9f8 	.word	0x2405e9f8
 8014df4:	2405e9b0 	.word	0x2405e9b0
 8014df8:	2405e9b4 	.word	0x2405e9b4

08014dfc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b084      	sub	sp, #16
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d106      	bne.n	8014e18 <tcp_close_shutdown_fin+0x1c>
 8014e0a:	4b2e      	ldr	r3, [pc, #184]	; (8014ec4 <tcp_close_shutdown_fin+0xc8>)
 8014e0c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8014e10:	492d      	ldr	r1, [pc, #180]	; (8014ec8 <tcp_close_shutdown_fin+0xcc>)
 8014e12:	482e      	ldr	r0, [pc, #184]	; (8014ecc <tcp_close_shutdown_fin+0xd0>)
 8014e14:	f009 fa16 	bl	801e244 <iprintf>

  switch (pcb->state) {
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	7d1b      	ldrb	r3, [r3, #20]
 8014e1c:	2b07      	cmp	r3, #7
 8014e1e:	d020      	beq.n	8014e62 <tcp_close_shutdown_fin+0x66>
 8014e20:	2b07      	cmp	r3, #7
 8014e22:	dc2b      	bgt.n	8014e7c <tcp_close_shutdown_fin+0x80>
 8014e24:	2b03      	cmp	r3, #3
 8014e26:	d002      	beq.n	8014e2e <tcp_close_shutdown_fin+0x32>
 8014e28:	2b04      	cmp	r3, #4
 8014e2a:	d00d      	beq.n	8014e48 <tcp_close_shutdown_fin+0x4c>
 8014e2c:	e026      	b.n	8014e7c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014e2e:	6878      	ldr	r0, [r7, #4]
 8014e30:	f004 fe24 	bl	8019a7c <tcp_send_fin>
 8014e34:	4603      	mov	r3, r0
 8014e36:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d11f      	bne.n	8014e80 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2205      	movs	r2, #5
 8014e44:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014e46:	e01b      	b.n	8014e80 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8014e48:	6878      	ldr	r0, [r7, #4]
 8014e4a:	f004 fe17 	bl	8019a7c <tcp_send_fin>
 8014e4e:	4603      	mov	r3, r0
 8014e50:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d114      	bne.n	8014e84 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	2205      	movs	r2, #5
 8014e5e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014e60:	e010      	b.n	8014e84 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014e62:	6878      	ldr	r0, [r7, #4]
 8014e64:	f004 fe0a 	bl	8019a7c <tcp_send_fin>
 8014e68:	4603      	mov	r3, r0
 8014e6a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d109      	bne.n	8014e88 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	2209      	movs	r2, #9
 8014e78:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014e7a:	e005      	b.n	8014e88 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	e01c      	b.n	8014eba <tcp_close_shutdown_fin+0xbe>
      break;
 8014e80:	bf00      	nop
 8014e82:	e002      	b.n	8014e8a <tcp_close_shutdown_fin+0x8e>
      break;
 8014e84:	bf00      	nop
 8014e86:	e000      	b.n	8014e8a <tcp_close_shutdown_fin+0x8e>
      break;
 8014e88:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d103      	bne.n	8014e9a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	f004 ff30 	bl	8019cf8 <tcp_output>
 8014e98:	e00d      	b.n	8014eb6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ea2:	d108      	bne.n	8014eb6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	8b5b      	ldrh	r3, [r3, #26]
 8014ea8:	f043 0308 	orr.w	r3, r3, #8
 8014eac:	b29a      	uxth	r2, r3
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	e001      	b.n	8014eba <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014eba:	4618      	mov	r0, r3
 8014ebc:	3710      	adds	r7, #16
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bd80      	pop	{r7, pc}
 8014ec2:	bf00      	nop
 8014ec4:	08020ba0 	.word	0x08020ba0
 8014ec8:	08020c50 	.word	0x08020c50
 8014ecc:	08020be4 	.word	0x08020be4

08014ed0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b082      	sub	sp, #8
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d109      	bne.n	8014ef2 <tcp_close+0x22>
 8014ede:	4b0f      	ldr	r3, [pc, #60]	; (8014f1c <tcp_close+0x4c>)
 8014ee0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8014ee4:	490e      	ldr	r1, [pc, #56]	; (8014f20 <tcp_close+0x50>)
 8014ee6:	480f      	ldr	r0, [pc, #60]	; (8014f24 <tcp_close+0x54>)
 8014ee8:	f009 f9ac 	bl	801e244 <iprintf>
 8014eec:	f06f 030f 	mvn.w	r3, #15
 8014ef0:	e00f      	b.n	8014f12 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	7d1b      	ldrb	r3, [r3, #20]
 8014ef6:	2b01      	cmp	r3, #1
 8014ef8:	d006      	beq.n	8014f08 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	8b5b      	ldrh	r3, [r3, #26]
 8014efe:	f043 0310 	orr.w	r3, r3, #16
 8014f02:	b29a      	uxth	r2, r3
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014f08:	2101      	movs	r1, #1
 8014f0a:	6878      	ldr	r0, [r7, #4]
 8014f0c:	f7ff fe94 	bl	8014c38 <tcp_close_shutdown>
 8014f10:	4603      	mov	r3, r0
}
 8014f12:	4618      	mov	r0, r3
 8014f14:	3708      	adds	r7, #8
 8014f16:	46bd      	mov	sp, r7
 8014f18:	bd80      	pop	{r7, pc}
 8014f1a:	bf00      	nop
 8014f1c:	08020ba0 	.word	0x08020ba0
 8014f20:	08020cb0 	.word	0x08020cb0
 8014f24:	08020be4 	.word	0x08020be4

08014f28 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b084      	sub	sp, #16
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	60f8      	str	r0, [r7, #12]
 8014f30:	60b9      	str	r1, [r7, #8]
 8014f32:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d109      	bne.n	8014f4e <tcp_shutdown+0x26>
 8014f3a:	4b26      	ldr	r3, [pc, #152]	; (8014fd4 <tcp_shutdown+0xac>)
 8014f3c:	f240 2207 	movw	r2, #519	; 0x207
 8014f40:	4925      	ldr	r1, [pc, #148]	; (8014fd8 <tcp_shutdown+0xb0>)
 8014f42:	4826      	ldr	r0, [pc, #152]	; (8014fdc <tcp_shutdown+0xb4>)
 8014f44:	f009 f97e 	bl	801e244 <iprintf>
 8014f48:	f06f 030f 	mvn.w	r3, #15
 8014f4c:	e03d      	b.n	8014fca <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	7d1b      	ldrb	r3, [r3, #20]
 8014f52:	2b01      	cmp	r3, #1
 8014f54:	d102      	bne.n	8014f5c <tcp_shutdown+0x34>
    return ERR_CONN;
 8014f56:	f06f 030a 	mvn.w	r3, #10
 8014f5a:	e036      	b.n	8014fca <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8014f5c:	68bb      	ldr	r3, [r7, #8]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d01b      	beq.n	8014f9a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	8b5b      	ldrh	r3, [r3, #26]
 8014f66:	f043 0310 	orr.w	r3, r3, #16
 8014f6a:	b29a      	uxth	r2, r3
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d005      	beq.n	8014f82 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8014f76:	2101      	movs	r1, #1
 8014f78:	68f8      	ldr	r0, [r7, #12]
 8014f7a:	f7ff fe5d 	bl	8014c38 <tcp_close_shutdown>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	e023      	b.n	8014fca <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d007      	beq.n	8014f9a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f7ff faf4 	bl	801457c <pbuf_free>
      pcb->refused_data = NULL;
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	2200      	movs	r2, #0
 8014f98:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d013      	beq.n	8014fc8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	7d1b      	ldrb	r3, [r3, #20]
 8014fa4:	2b04      	cmp	r3, #4
 8014fa6:	dc02      	bgt.n	8014fae <tcp_shutdown+0x86>
 8014fa8:	2b03      	cmp	r3, #3
 8014faa:	da02      	bge.n	8014fb2 <tcp_shutdown+0x8a>
 8014fac:	e009      	b.n	8014fc2 <tcp_shutdown+0x9a>
 8014fae:	2b07      	cmp	r3, #7
 8014fb0:	d107      	bne.n	8014fc2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8014fb2:	68bb      	ldr	r3, [r7, #8]
 8014fb4:	b2db      	uxtb	r3, r3
 8014fb6:	4619      	mov	r1, r3
 8014fb8:	68f8      	ldr	r0, [r7, #12]
 8014fba:	f7ff fe3d 	bl	8014c38 <tcp_close_shutdown>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	e003      	b.n	8014fca <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8014fc2:	f06f 030a 	mvn.w	r3, #10
 8014fc6:	e000      	b.n	8014fca <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8014fc8:	2300      	movs	r3, #0
}
 8014fca:	4618      	mov	r0, r3
 8014fcc:	3710      	adds	r7, #16
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bd80      	pop	{r7, pc}
 8014fd2:	bf00      	nop
 8014fd4:	08020ba0 	.word	0x08020ba0
 8014fd8:	08020cc8 	.word	0x08020cc8
 8014fdc:	08020be4 	.word	0x08020be4

08014fe0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b08e      	sub	sp, #56	; 0x38
 8014fe4:	af04      	add	r7, sp, #16
 8014fe6:	6078      	str	r0, [r7, #4]
 8014fe8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d107      	bne.n	8015000 <tcp_abandon+0x20>
 8014ff0:	4b52      	ldr	r3, [pc, #328]	; (801513c <tcp_abandon+0x15c>)
 8014ff2:	f240 223d 	movw	r2, #573	; 0x23d
 8014ff6:	4952      	ldr	r1, [pc, #328]	; (8015140 <tcp_abandon+0x160>)
 8014ff8:	4852      	ldr	r0, [pc, #328]	; (8015144 <tcp_abandon+0x164>)
 8014ffa:	f009 f923 	bl	801e244 <iprintf>
 8014ffe:	e099      	b.n	8015134 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	7d1b      	ldrb	r3, [r3, #20]
 8015004:	2b01      	cmp	r3, #1
 8015006:	d106      	bne.n	8015016 <tcp_abandon+0x36>
 8015008:	4b4c      	ldr	r3, [pc, #304]	; (801513c <tcp_abandon+0x15c>)
 801500a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801500e:	494e      	ldr	r1, [pc, #312]	; (8015148 <tcp_abandon+0x168>)
 8015010:	484c      	ldr	r0, [pc, #304]	; (8015144 <tcp_abandon+0x164>)
 8015012:	f009 f917 	bl	801e244 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	7d1b      	ldrb	r3, [r3, #20]
 801501a:	2b0a      	cmp	r3, #10
 801501c:	d107      	bne.n	801502e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801501e:	6879      	ldr	r1, [r7, #4]
 8015020:	484a      	ldr	r0, [pc, #296]	; (801514c <tcp_abandon+0x16c>)
 8015022:	f001 fa39 	bl	8016498 <tcp_pcb_remove>
    tcp_free(pcb);
 8015026:	6878      	ldr	r0, [r7, #4]
 8015028:	f7ff fd54 	bl	8014ad4 <tcp_free>
 801502c:	e082      	b.n	8015134 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801502e:	2300      	movs	r3, #0
 8015030:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8015032:	2300      	movs	r3, #0
 8015034:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801503a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015040:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015048:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	691b      	ldr	r3, [r3, #16]
 801504e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	7d1b      	ldrb	r3, [r3, #20]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d126      	bne.n	80150a6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	8adb      	ldrh	r3, [r3, #22]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d02e      	beq.n	80150be <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015060:	4b3b      	ldr	r3, [pc, #236]	; (8015150 <tcp_abandon+0x170>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	687a      	ldr	r2, [r7, #4]
 8015066:	429a      	cmp	r2, r3
 8015068:	d105      	bne.n	8015076 <tcp_abandon+0x96>
 801506a:	4b39      	ldr	r3, [pc, #228]	; (8015150 <tcp_abandon+0x170>)
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	68db      	ldr	r3, [r3, #12]
 8015070:	4a37      	ldr	r2, [pc, #220]	; (8015150 <tcp_abandon+0x170>)
 8015072:	6013      	str	r3, [r2, #0]
 8015074:	e013      	b.n	801509e <tcp_abandon+0xbe>
 8015076:	4b36      	ldr	r3, [pc, #216]	; (8015150 <tcp_abandon+0x170>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	61fb      	str	r3, [r7, #28]
 801507c:	e00c      	b.n	8015098 <tcp_abandon+0xb8>
 801507e:	69fb      	ldr	r3, [r7, #28]
 8015080:	68db      	ldr	r3, [r3, #12]
 8015082:	687a      	ldr	r2, [r7, #4]
 8015084:	429a      	cmp	r2, r3
 8015086:	d104      	bne.n	8015092 <tcp_abandon+0xb2>
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	68da      	ldr	r2, [r3, #12]
 801508c:	69fb      	ldr	r3, [r7, #28]
 801508e:	60da      	str	r2, [r3, #12]
 8015090:	e005      	b.n	801509e <tcp_abandon+0xbe>
 8015092:	69fb      	ldr	r3, [r7, #28]
 8015094:	68db      	ldr	r3, [r3, #12]
 8015096:	61fb      	str	r3, [r7, #28]
 8015098:	69fb      	ldr	r3, [r7, #28]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d1ef      	bne.n	801507e <tcp_abandon+0x9e>
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	2200      	movs	r2, #0
 80150a2:	60da      	str	r2, [r3, #12]
 80150a4:	e00b      	b.n	80150be <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	8adb      	ldrh	r3, [r3, #22]
 80150ae:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80150b0:	6879      	ldr	r1, [r7, #4]
 80150b2:	4828      	ldr	r0, [pc, #160]	; (8015154 <tcp_abandon+0x174>)
 80150b4:	f001 f9f0 	bl	8016498 <tcp_pcb_remove>
 80150b8:	4b27      	ldr	r3, [pc, #156]	; (8015158 <tcp_abandon+0x178>)
 80150ba:	2201      	movs	r2, #1
 80150bc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d004      	beq.n	80150d0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80150ca:	4618      	mov	r0, r3
 80150cc:	f000 fec4 	bl	8015e58 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d004      	beq.n	80150e2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150dc:	4618      	mov	r0, r3
 80150de:	f000 febb 	bl	8015e58 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d004      	beq.n	80150f4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80150ee:	4618      	mov	r0, r3
 80150f0:	f000 feb2 	bl	8015e58 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80150f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d00e      	beq.n	8015118 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80150fa:	6879      	ldr	r1, [r7, #4]
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	3304      	adds	r3, #4
 8015100:	687a      	ldr	r2, [r7, #4]
 8015102:	8b12      	ldrh	r2, [r2, #24]
 8015104:	9202      	str	r2, [sp, #8]
 8015106:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015108:	9201      	str	r2, [sp, #4]
 801510a:	9300      	str	r3, [sp, #0]
 801510c:	460b      	mov	r3, r1
 801510e:	697a      	ldr	r2, [r7, #20]
 8015110:	69b9      	ldr	r1, [r7, #24]
 8015112:	6878      	ldr	r0, [r7, #4]
 8015114:	f005 fbc6 	bl	801a8a4 <tcp_rst>
    }
    last_state = pcb->state;
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	7d1b      	ldrb	r3, [r3, #20]
 801511c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f7ff fcd8 	bl	8014ad4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d004      	beq.n	8015134 <tcp_abandon+0x154>
 801512a:	693b      	ldr	r3, [r7, #16]
 801512c:	f06f 010c 	mvn.w	r1, #12
 8015130:	68f8      	ldr	r0, [r7, #12]
 8015132:	4798      	blx	r3
  }
}
 8015134:	3728      	adds	r7, #40	; 0x28
 8015136:	46bd      	mov	sp, r7
 8015138:	bd80      	pop	{r7, pc}
 801513a:	bf00      	nop
 801513c:	08020ba0 	.word	0x08020ba0
 8015140:	08020ce4 	.word	0x08020ce4
 8015144:	08020be4 	.word	0x08020be4
 8015148:	08020d00 	.word	0x08020d00
 801514c:	2405e9bc 	.word	0x2405e9bc
 8015150:	2405e9b0 	.word	0x2405e9b0
 8015154:	2405e9b8 	.word	0x2405e9b8
 8015158:	2405e9c0 	.word	0x2405e9c0

0801515c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	b082      	sub	sp, #8
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015164:	2101      	movs	r1, #1
 8015166:	6878      	ldr	r0, [r7, #4]
 8015168:	f7ff ff3a 	bl	8014fe0 <tcp_abandon>
}
 801516c:	bf00      	nop
 801516e:	3708      	adds	r7, #8
 8015170:	46bd      	mov	sp, r7
 8015172:	bd80      	pop	{r7, pc}

08015174 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b088      	sub	sp, #32
 8015178:	af00      	add	r7, sp, #0
 801517a:	60f8      	str	r0, [r7, #12]
 801517c:	60b9      	str	r1, [r7, #8]
 801517e:	4613      	mov	r3, r2
 8015180:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8015182:	2304      	movs	r3, #4
 8015184:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015186:	68bb      	ldr	r3, [r7, #8]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d101      	bne.n	8015190 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801518c:	4b3e      	ldr	r3, [pc, #248]	; (8015288 <tcp_bind+0x114>)
 801518e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d109      	bne.n	80151aa <tcp_bind+0x36>
 8015196:	4b3d      	ldr	r3, [pc, #244]	; (801528c <tcp_bind+0x118>)
 8015198:	f240 22a9 	movw	r2, #681	; 0x2a9
 801519c:	493c      	ldr	r1, [pc, #240]	; (8015290 <tcp_bind+0x11c>)
 801519e:	483d      	ldr	r0, [pc, #244]	; (8015294 <tcp_bind+0x120>)
 80151a0:	f009 f850 	bl	801e244 <iprintf>
 80151a4:	f06f 030f 	mvn.w	r3, #15
 80151a8:	e06a      	b.n	8015280 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	7d1b      	ldrb	r3, [r3, #20]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d009      	beq.n	80151c6 <tcp_bind+0x52>
 80151b2:	4b36      	ldr	r3, [pc, #216]	; (801528c <tcp_bind+0x118>)
 80151b4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80151b8:	4937      	ldr	r1, [pc, #220]	; (8015298 <tcp_bind+0x124>)
 80151ba:	4836      	ldr	r0, [pc, #216]	; (8015294 <tcp_bind+0x120>)
 80151bc:	f009 f842 	bl	801e244 <iprintf>
 80151c0:	f06f 0305 	mvn.w	r3, #5
 80151c4:	e05c      	b.n	8015280 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80151c6:	88fb      	ldrh	r3, [r7, #6]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d109      	bne.n	80151e0 <tcp_bind+0x6c>
    port = tcp_new_port();
 80151cc:	f000 f9de 	bl	801558c <tcp_new_port>
 80151d0:	4603      	mov	r3, r0
 80151d2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80151d4:	88fb      	ldrh	r3, [r7, #6]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d135      	bne.n	8015246 <tcp_bind+0xd2>
      return ERR_BUF;
 80151da:	f06f 0301 	mvn.w	r3, #1
 80151de:	e04f      	b.n	8015280 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80151e0:	2300      	movs	r3, #0
 80151e2:	61fb      	str	r3, [r7, #28]
 80151e4:	e02b      	b.n	801523e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80151e6:	4a2d      	ldr	r2, [pc, #180]	; (801529c <tcp_bind+0x128>)
 80151e8:	69fb      	ldr	r3, [r7, #28]
 80151ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	61bb      	str	r3, [r7, #24]
 80151f2:	e01e      	b.n	8015232 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80151f4:	69bb      	ldr	r3, [r7, #24]
 80151f6:	8adb      	ldrh	r3, [r3, #22]
 80151f8:	88fa      	ldrh	r2, [r7, #6]
 80151fa:	429a      	cmp	r2, r3
 80151fc:	d116      	bne.n	801522c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80151fe:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015200:	2b00      	cmp	r3, #0
 8015202:	d010      	beq.n	8015226 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8015204:	69bb      	ldr	r3, [r7, #24]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d00c      	beq.n	8015226 <tcp_bind+0xb2>
 801520c:	68bb      	ldr	r3, [r7, #8]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d009      	beq.n	8015226 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8015212:	68bb      	ldr	r3, [r7, #8]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d005      	beq.n	8015226 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801521a:	69bb      	ldr	r3, [r7, #24]
 801521c:	681a      	ldr	r2, [r3, #0]
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015222:	429a      	cmp	r2, r3
 8015224:	d102      	bne.n	801522c <tcp_bind+0xb8>
              return ERR_USE;
 8015226:	f06f 0307 	mvn.w	r3, #7
 801522a:	e029      	b.n	8015280 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801522c:	69bb      	ldr	r3, [r7, #24]
 801522e:	68db      	ldr	r3, [r3, #12]
 8015230:	61bb      	str	r3, [r7, #24]
 8015232:	69bb      	ldr	r3, [r7, #24]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d1dd      	bne.n	80151f4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8015238:	69fb      	ldr	r3, [r7, #28]
 801523a:	3301      	adds	r3, #1
 801523c:	61fb      	str	r3, [r7, #28]
 801523e:	69fa      	ldr	r2, [r7, #28]
 8015240:	697b      	ldr	r3, [r7, #20]
 8015242:	429a      	cmp	r2, r3
 8015244:	dbcf      	blt.n	80151e6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8015246:	68bb      	ldr	r3, [r7, #8]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d00c      	beq.n	8015266 <tcp_bind+0xf2>
 801524c:	68bb      	ldr	r3, [r7, #8]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d008      	beq.n	8015266 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8015254:	68bb      	ldr	r3, [r7, #8]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d002      	beq.n	8015260 <tcp_bind+0xec>
 801525a:	68bb      	ldr	r3, [r7, #8]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	e000      	b.n	8015262 <tcp_bind+0xee>
 8015260:	2300      	movs	r3, #0
 8015262:	68fa      	ldr	r2, [r7, #12]
 8015264:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	88fa      	ldrh	r2, [r7, #6]
 801526a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801526c:	4b0c      	ldr	r3, [pc, #48]	; (80152a0 <tcp_bind+0x12c>)
 801526e:	681a      	ldr	r2, [r3, #0]
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	60da      	str	r2, [r3, #12]
 8015274:	4a0a      	ldr	r2, [pc, #40]	; (80152a0 <tcp_bind+0x12c>)
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	6013      	str	r3, [r2, #0]
 801527a:	f005 fcd5 	bl	801ac28 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801527e:	2300      	movs	r3, #0
}
 8015280:	4618      	mov	r0, r3
 8015282:	3720      	adds	r7, #32
 8015284:	46bd      	mov	sp, r7
 8015286:	bd80      	pop	{r7, pc}
 8015288:	08022c78 	.word	0x08022c78
 801528c:	08020ba0 	.word	0x08020ba0
 8015290:	08020d34 	.word	0x08020d34
 8015294:	08020be4 	.word	0x08020be4
 8015298:	08020d4c 	.word	0x08020d4c
 801529c:	08022c50 	.word	0x08022c50
 80152a0:	2405e9b0 	.word	0x2405e9b0

080152a4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b084      	sub	sp, #16
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	60f8      	str	r0, [r7, #12]
 80152ac:	60b9      	str	r1, [r7, #8]
 80152ae:	4613      	mov	r3, r2
 80152b0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80152b2:	68bb      	ldr	r3, [r7, #8]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d106      	bne.n	80152c6 <tcp_accept_null+0x22>
 80152b8:	4b07      	ldr	r3, [pc, #28]	; (80152d8 <tcp_accept_null+0x34>)
 80152ba:	f240 320f 	movw	r2, #783	; 0x30f
 80152be:	4907      	ldr	r1, [pc, #28]	; (80152dc <tcp_accept_null+0x38>)
 80152c0:	4807      	ldr	r0, [pc, #28]	; (80152e0 <tcp_accept_null+0x3c>)
 80152c2:	f008 ffbf 	bl	801e244 <iprintf>

  tcp_abort(pcb);
 80152c6:	68b8      	ldr	r0, [r7, #8]
 80152c8:	f7ff ff48 	bl	801515c <tcp_abort>

  return ERR_ABRT;
 80152cc:	f06f 030c 	mvn.w	r3, #12
}
 80152d0:	4618      	mov	r0, r3
 80152d2:	3710      	adds	r7, #16
 80152d4:	46bd      	mov	sp, r7
 80152d6:	bd80      	pop	{r7, pc}
 80152d8:	08020ba0 	.word	0x08020ba0
 80152dc:	08020d74 	.word	0x08020d74
 80152e0:	08020be4 	.word	0x08020be4

080152e4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b088      	sub	sp, #32
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	60f8      	str	r0, [r7, #12]
 80152ec:	460b      	mov	r3, r1
 80152ee:	607a      	str	r2, [r7, #4]
 80152f0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80152f2:	2300      	movs	r3, #0
 80152f4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d109      	bne.n	8015310 <tcp_listen_with_backlog_and_err+0x2c>
 80152fc:	4b47      	ldr	r3, [pc, #284]	; (801541c <tcp_listen_with_backlog_and_err+0x138>)
 80152fe:	f240 3259 	movw	r2, #857	; 0x359
 8015302:	4947      	ldr	r1, [pc, #284]	; (8015420 <tcp_listen_with_backlog_and_err+0x13c>)
 8015304:	4847      	ldr	r0, [pc, #284]	; (8015424 <tcp_listen_with_backlog_and_err+0x140>)
 8015306:	f008 ff9d 	bl	801e244 <iprintf>
 801530a:	23f0      	movs	r3, #240	; 0xf0
 801530c:	76fb      	strb	r3, [r7, #27]
 801530e:	e079      	b.n	8015404 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	7d1b      	ldrb	r3, [r3, #20]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d009      	beq.n	801532c <tcp_listen_with_backlog_and_err+0x48>
 8015318:	4b40      	ldr	r3, [pc, #256]	; (801541c <tcp_listen_with_backlog_and_err+0x138>)
 801531a:	f240 325a 	movw	r2, #858	; 0x35a
 801531e:	4942      	ldr	r1, [pc, #264]	; (8015428 <tcp_listen_with_backlog_and_err+0x144>)
 8015320:	4840      	ldr	r0, [pc, #256]	; (8015424 <tcp_listen_with_backlog_and_err+0x140>)
 8015322:	f008 ff8f 	bl	801e244 <iprintf>
 8015326:	23f1      	movs	r3, #241	; 0xf1
 8015328:	76fb      	strb	r3, [r7, #27]
 801532a:	e06b      	b.n	8015404 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	7d1b      	ldrb	r3, [r3, #20]
 8015330:	2b01      	cmp	r3, #1
 8015332:	d104      	bne.n	801533e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8015338:	23f7      	movs	r3, #247	; 0xf7
 801533a:	76fb      	strb	r3, [r7, #27]
    goto done;
 801533c:	e062      	b.n	8015404 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801533e:	2002      	movs	r0, #2
 8015340:	f7fe f9fe 	bl	8013740 <memp_malloc>
 8015344:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8015346:	69fb      	ldr	r3, [r7, #28]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d102      	bne.n	8015352 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 801534c:	23ff      	movs	r3, #255	; 0xff
 801534e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015350:	e058      	b.n	8015404 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	691a      	ldr	r2, [r3, #16]
 8015356:	69fb      	ldr	r3, [r7, #28]
 8015358:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	8ada      	ldrh	r2, [r3, #22]
 801535e:	69fb      	ldr	r3, [r7, #28]
 8015360:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8015362:	69fb      	ldr	r3, [r7, #28]
 8015364:	2201      	movs	r2, #1
 8015366:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	7d5a      	ldrb	r2, [r3, #21]
 801536c:	69fb      	ldr	r3, [r7, #28]
 801536e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	7a5a      	ldrb	r2, [r3, #9]
 8015374:	69fb      	ldr	r3, [r7, #28]
 8015376:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8015378:	69fb      	ldr	r3, [r7, #28]
 801537a:	2200      	movs	r2, #0
 801537c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	7ada      	ldrb	r2, [r3, #11]
 8015382:	69fb      	ldr	r3, [r7, #28]
 8015384:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	7a9a      	ldrb	r2, [r3, #10]
 801538a:	69fb      	ldr	r3, [r7, #28]
 801538c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	681a      	ldr	r2, [r3, #0]
 8015392:	69fb      	ldr	r3, [r7, #28]
 8015394:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	8adb      	ldrh	r3, [r3, #22]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d021      	beq.n	80153e2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801539e:	4b23      	ldr	r3, [pc, #140]	; (801542c <tcp_listen_with_backlog_and_err+0x148>)
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	68fa      	ldr	r2, [r7, #12]
 80153a4:	429a      	cmp	r2, r3
 80153a6:	d105      	bne.n	80153b4 <tcp_listen_with_backlog_and_err+0xd0>
 80153a8:	4b20      	ldr	r3, [pc, #128]	; (801542c <tcp_listen_with_backlog_and_err+0x148>)
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	68db      	ldr	r3, [r3, #12]
 80153ae:	4a1f      	ldr	r2, [pc, #124]	; (801542c <tcp_listen_with_backlog_and_err+0x148>)
 80153b0:	6013      	str	r3, [r2, #0]
 80153b2:	e013      	b.n	80153dc <tcp_listen_with_backlog_and_err+0xf8>
 80153b4:	4b1d      	ldr	r3, [pc, #116]	; (801542c <tcp_listen_with_backlog_and_err+0x148>)
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	617b      	str	r3, [r7, #20]
 80153ba:	e00c      	b.n	80153d6 <tcp_listen_with_backlog_and_err+0xf2>
 80153bc:	697b      	ldr	r3, [r7, #20]
 80153be:	68db      	ldr	r3, [r3, #12]
 80153c0:	68fa      	ldr	r2, [r7, #12]
 80153c2:	429a      	cmp	r2, r3
 80153c4:	d104      	bne.n	80153d0 <tcp_listen_with_backlog_and_err+0xec>
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	68da      	ldr	r2, [r3, #12]
 80153ca:	697b      	ldr	r3, [r7, #20]
 80153cc:	60da      	str	r2, [r3, #12]
 80153ce:	e005      	b.n	80153dc <tcp_listen_with_backlog_and_err+0xf8>
 80153d0:	697b      	ldr	r3, [r7, #20]
 80153d2:	68db      	ldr	r3, [r3, #12]
 80153d4:	617b      	str	r3, [r7, #20]
 80153d6:	697b      	ldr	r3, [r7, #20]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d1ef      	bne.n	80153bc <tcp_listen_with_backlog_and_err+0xd8>
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	2200      	movs	r2, #0
 80153e0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80153e2:	68f8      	ldr	r0, [r7, #12]
 80153e4:	f7ff fb76 	bl	8014ad4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80153e8:	69fb      	ldr	r3, [r7, #28]
 80153ea:	4a11      	ldr	r2, [pc, #68]	; (8015430 <tcp_listen_with_backlog_and_err+0x14c>)
 80153ec:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80153ee:	4b11      	ldr	r3, [pc, #68]	; (8015434 <tcp_listen_with_backlog_and_err+0x150>)
 80153f0:	681a      	ldr	r2, [r3, #0]
 80153f2:	69fb      	ldr	r3, [r7, #28]
 80153f4:	60da      	str	r2, [r3, #12]
 80153f6:	4a0f      	ldr	r2, [pc, #60]	; (8015434 <tcp_listen_with_backlog_and_err+0x150>)
 80153f8:	69fb      	ldr	r3, [r7, #28]
 80153fa:	6013      	str	r3, [r2, #0]
 80153fc:	f005 fc14 	bl	801ac28 <tcp_timer_needed>
  res = ERR_OK;
 8015400:	2300      	movs	r3, #0
 8015402:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d002      	beq.n	8015410 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	7efa      	ldrb	r2, [r7, #27]
 801540e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8015410:	69fb      	ldr	r3, [r7, #28]
}
 8015412:	4618      	mov	r0, r3
 8015414:	3720      	adds	r7, #32
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}
 801541a:	bf00      	nop
 801541c:	08020ba0 	.word	0x08020ba0
 8015420:	08020d94 	.word	0x08020d94
 8015424:	08020be4 	.word	0x08020be4
 8015428:	08020dc4 	.word	0x08020dc4
 801542c:	2405e9b0 	.word	0x2405e9b0
 8015430:	080152a5 	.word	0x080152a5
 8015434:	2405e9b4 	.word	0x2405e9b4

08015438 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b084      	sub	sp, #16
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d106      	bne.n	8015454 <tcp_update_rcv_ann_wnd+0x1c>
 8015446:	4b25      	ldr	r3, [pc, #148]	; (80154dc <tcp_update_rcv_ann_wnd+0xa4>)
 8015448:	f240 32a6 	movw	r2, #934	; 0x3a6
 801544c:	4924      	ldr	r1, [pc, #144]	; (80154e0 <tcp_update_rcv_ann_wnd+0xa8>)
 801544e:	4825      	ldr	r0, [pc, #148]	; (80154e4 <tcp_update_rcv_ann_wnd+0xac>)
 8015450:	f008 fef8 	bl	801e244 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015458:	687a      	ldr	r2, [r7, #4]
 801545a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801545c:	4413      	add	r3, r2
 801545e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015464:	687a      	ldr	r2, [r7, #4]
 8015466:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8015468:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801546c:	bf28      	it	cs
 801546e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8015472:	b292      	uxth	r2, r2
 8015474:	4413      	add	r3, r2
 8015476:	68fa      	ldr	r2, [r7, #12]
 8015478:	1ad3      	subs	r3, r2, r3
 801547a:	2b00      	cmp	r3, #0
 801547c:	db08      	blt.n	8015490 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801548a:	68fa      	ldr	r2, [r7, #12]
 801548c:	1ad3      	subs	r3, r2, r3
 801548e:	e020      	b.n	80154d2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015498:	1ad3      	subs	r3, r2, r3
 801549a:	2b00      	cmp	r3, #0
 801549c:	dd03      	ble.n	80154a6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	2200      	movs	r2, #0
 80154a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80154a4:	e014      	b.n	80154d0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154ae:	1ad3      	subs	r3, r2, r3
 80154b0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80154b2:	68bb      	ldr	r3, [r7, #8]
 80154b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80154b8:	d306      	bcc.n	80154c8 <tcp_update_rcv_ann_wnd+0x90>
 80154ba:	4b08      	ldr	r3, [pc, #32]	; (80154dc <tcp_update_rcv_ann_wnd+0xa4>)
 80154bc:	f240 32b6 	movw	r2, #950	; 0x3b6
 80154c0:	4909      	ldr	r1, [pc, #36]	; (80154e8 <tcp_update_rcv_ann_wnd+0xb0>)
 80154c2:	4808      	ldr	r0, [pc, #32]	; (80154e4 <tcp_update_rcv_ann_wnd+0xac>)
 80154c4:	f008 febe 	bl	801e244 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80154c8:	68bb      	ldr	r3, [r7, #8]
 80154ca:	b29a      	uxth	r2, r3
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80154d0:	2300      	movs	r3, #0
  }
}
 80154d2:	4618      	mov	r0, r3
 80154d4:	3710      	adds	r7, #16
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd80      	pop	{r7, pc}
 80154da:	bf00      	nop
 80154dc:	08020ba0 	.word	0x08020ba0
 80154e0:	08020dfc 	.word	0x08020dfc
 80154e4:	08020be4 	.word	0x08020be4
 80154e8:	08020e20 	.word	0x08020e20

080154ec <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b084      	sub	sp, #16
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
 80154f4:	460b      	mov	r3, r1
 80154f6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d107      	bne.n	801550e <tcp_recved+0x22>
 80154fe:	4b1f      	ldr	r3, [pc, #124]	; (801557c <tcp_recved+0x90>)
 8015500:	f240 32cf 	movw	r2, #975	; 0x3cf
 8015504:	491e      	ldr	r1, [pc, #120]	; (8015580 <tcp_recved+0x94>)
 8015506:	481f      	ldr	r0, [pc, #124]	; (8015584 <tcp_recved+0x98>)
 8015508:	f008 fe9c 	bl	801e244 <iprintf>
 801550c:	e032      	b.n	8015574 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	7d1b      	ldrb	r3, [r3, #20]
 8015512:	2b01      	cmp	r3, #1
 8015514:	d106      	bne.n	8015524 <tcp_recved+0x38>
 8015516:	4b19      	ldr	r3, [pc, #100]	; (801557c <tcp_recved+0x90>)
 8015518:	f240 32d2 	movw	r2, #978	; 0x3d2
 801551c:	491a      	ldr	r1, [pc, #104]	; (8015588 <tcp_recved+0x9c>)
 801551e:	4819      	ldr	r0, [pc, #100]	; (8015584 <tcp_recved+0x98>)
 8015520:	f008 fe90 	bl	801e244 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015528:	887b      	ldrh	r3, [r7, #2]
 801552a:	4413      	add	r3, r2
 801552c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801552e:	89fb      	ldrh	r3, [r7, #14]
 8015530:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015534:	d804      	bhi.n	8015540 <tcp_recved+0x54>
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801553a:	89fa      	ldrh	r2, [r7, #14]
 801553c:	429a      	cmp	r2, r3
 801553e:	d204      	bcs.n	801554a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8015546:	851a      	strh	r2, [r3, #40]	; 0x28
 8015548:	e002      	b.n	8015550 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	89fa      	ldrh	r2, [r7, #14]
 801554e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015550:	6878      	ldr	r0, [r7, #4]
 8015552:	f7ff ff71 	bl	8015438 <tcp_update_rcv_ann_wnd>
 8015556:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8015558:	68bb      	ldr	r3, [r7, #8]
 801555a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801555e:	d309      	bcc.n	8015574 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	8b5b      	ldrh	r3, [r3, #26]
 8015564:	f043 0302 	orr.w	r3, r3, #2
 8015568:	b29a      	uxth	r2, r3
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801556e:	6878      	ldr	r0, [r7, #4]
 8015570:	f004 fbc2 	bl	8019cf8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015574:	3710      	adds	r7, #16
 8015576:	46bd      	mov	sp, r7
 8015578:	bd80      	pop	{r7, pc}
 801557a:	bf00      	nop
 801557c:	08020ba0 	.word	0x08020ba0
 8015580:	08020e3c 	.word	0x08020e3c
 8015584:	08020be4 	.word	0x08020be4
 8015588:	08020e54 	.word	0x08020e54

0801558c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801558c:	b480      	push	{r7}
 801558e:	b083      	sub	sp, #12
 8015590:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8015592:	2300      	movs	r3, #0
 8015594:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8015596:	4b1e      	ldr	r3, [pc, #120]	; (8015610 <tcp_new_port+0x84>)
 8015598:	881b      	ldrh	r3, [r3, #0]
 801559a:	3301      	adds	r3, #1
 801559c:	b29a      	uxth	r2, r3
 801559e:	4b1c      	ldr	r3, [pc, #112]	; (8015610 <tcp_new_port+0x84>)
 80155a0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80155a2:	4b1b      	ldr	r3, [pc, #108]	; (8015610 <tcp_new_port+0x84>)
 80155a4:	881b      	ldrh	r3, [r3, #0]
 80155a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80155aa:	4293      	cmp	r3, r2
 80155ac:	d103      	bne.n	80155b6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80155ae:	4b18      	ldr	r3, [pc, #96]	; (8015610 <tcp_new_port+0x84>)
 80155b0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80155b4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80155b6:	2300      	movs	r3, #0
 80155b8:	71fb      	strb	r3, [r7, #7]
 80155ba:	e01e      	b.n	80155fa <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80155bc:	79fb      	ldrb	r3, [r7, #7]
 80155be:	4a15      	ldr	r2, [pc, #84]	; (8015614 <tcp_new_port+0x88>)
 80155c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	603b      	str	r3, [r7, #0]
 80155c8:	e011      	b.n	80155ee <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80155ca:	683b      	ldr	r3, [r7, #0]
 80155cc:	8ada      	ldrh	r2, [r3, #22]
 80155ce:	4b10      	ldr	r3, [pc, #64]	; (8015610 <tcp_new_port+0x84>)
 80155d0:	881b      	ldrh	r3, [r3, #0]
 80155d2:	429a      	cmp	r2, r3
 80155d4:	d108      	bne.n	80155e8 <tcp_new_port+0x5c>
        n++;
 80155d6:	88bb      	ldrh	r3, [r7, #4]
 80155d8:	3301      	adds	r3, #1
 80155da:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80155dc:	88bb      	ldrh	r3, [r7, #4]
 80155de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80155e2:	d3d8      	bcc.n	8015596 <tcp_new_port+0xa>
          return 0;
 80155e4:	2300      	movs	r3, #0
 80155e6:	e00d      	b.n	8015604 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	68db      	ldr	r3, [r3, #12]
 80155ec:	603b      	str	r3, [r7, #0]
 80155ee:	683b      	ldr	r3, [r7, #0]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d1ea      	bne.n	80155ca <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80155f4:	79fb      	ldrb	r3, [r7, #7]
 80155f6:	3301      	adds	r3, #1
 80155f8:	71fb      	strb	r3, [r7, #7]
 80155fa:	79fb      	ldrb	r3, [r7, #7]
 80155fc:	2b03      	cmp	r3, #3
 80155fe:	d9dd      	bls.n	80155bc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015600:	4b03      	ldr	r3, [pc, #12]	; (8015610 <tcp_new_port+0x84>)
 8015602:	881b      	ldrh	r3, [r3, #0]
}
 8015604:	4618      	mov	r0, r3
 8015606:	370c      	adds	r7, #12
 8015608:	46bd      	mov	sp, r7
 801560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560e:	4770      	bx	lr
 8015610:	24000028 	.word	0x24000028
 8015614:	08022c50 	.word	0x08022c50

08015618 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015618:	b5b0      	push	{r4, r5, r7, lr}
 801561a:	b090      	sub	sp, #64	; 0x40
 801561c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801561e:	2300      	movs	r3, #0
 8015620:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8015624:	4b94      	ldr	r3, [pc, #592]	; (8015878 <tcp_slowtmr+0x260>)
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	3301      	adds	r3, #1
 801562a:	4a93      	ldr	r2, [pc, #588]	; (8015878 <tcp_slowtmr+0x260>)
 801562c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801562e:	4b93      	ldr	r3, [pc, #588]	; (801587c <tcp_slowtmr+0x264>)
 8015630:	781b      	ldrb	r3, [r3, #0]
 8015632:	3301      	adds	r3, #1
 8015634:	b2da      	uxtb	r2, r3
 8015636:	4b91      	ldr	r3, [pc, #580]	; (801587c <tcp_slowtmr+0x264>)
 8015638:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801563a:	2300      	movs	r3, #0
 801563c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801563e:	4b90      	ldr	r3, [pc, #576]	; (8015880 <tcp_slowtmr+0x268>)
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8015644:	e29d      	b.n	8015b82 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015648:	7d1b      	ldrb	r3, [r3, #20]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d106      	bne.n	801565c <tcp_slowtmr+0x44>
 801564e:	4b8d      	ldr	r3, [pc, #564]	; (8015884 <tcp_slowtmr+0x26c>)
 8015650:	f240 42be 	movw	r2, #1214	; 0x4be
 8015654:	498c      	ldr	r1, [pc, #560]	; (8015888 <tcp_slowtmr+0x270>)
 8015656:	488d      	ldr	r0, [pc, #564]	; (801588c <tcp_slowtmr+0x274>)
 8015658:	f008 fdf4 	bl	801e244 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801565c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801565e:	7d1b      	ldrb	r3, [r3, #20]
 8015660:	2b01      	cmp	r3, #1
 8015662:	d106      	bne.n	8015672 <tcp_slowtmr+0x5a>
 8015664:	4b87      	ldr	r3, [pc, #540]	; (8015884 <tcp_slowtmr+0x26c>)
 8015666:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801566a:	4989      	ldr	r1, [pc, #548]	; (8015890 <tcp_slowtmr+0x278>)
 801566c:	4887      	ldr	r0, [pc, #540]	; (801588c <tcp_slowtmr+0x274>)
 801566e:	f008 fde9 	bl	801e244 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015674:	7d1b      	ldrb	r3, [r3, #20]
 8015676:	2b0a      	cmp	r3, #10
 8015678:	d106      	bne.n	8015688 <tcp_slowtmr+0x70>
 801567a:	4b82      	ldr	r3, [pc, #520]	; (8015884 <tcp_slowtmr+0x26c>)
 801567c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8015680:	4984      	ldr	r1, [pc, #528]	; (8015894 <tcp_slowtmr+0x27c>)
 8015682:	4882      	ldr	r0, [pc, #520]	; (801588c <tcp_slowtmr+0x274>)
 8015684:	f008 fdde 	bl	801e244 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801568a:	7f9a      	ldrb	r2, [r3, #30]
 801568c:	4b7b      	ldr	r3, [pc, #492]	; (801587c <tcp_slowtmr+0x264>)
 801568e:	781b      	ldrb	r3, [r3, #0]
 8015690:	429a      	cmp	r2, r3
 8015692:	d105      	bne.n	80156a0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8015694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015696:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801569a:	68db      	ldr	r3, [r3, #12]
 801569c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801569e:	e270      	b.n	8015b82 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80156a0:	4b76      	ldr	r3, [pc, #472]	; (801587c <tcp_slowtmr+0x264>)
 80156a2:	781a      	ldrb	r2, [r3, #0]
 80156a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156a6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80156a8:	2300      	movs	r3, #0
 80156aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80156ae:	2300      	movs	r3, #0
 80156b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80156b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156b6:	7d1b      	ldrb	r3, [r3, #20]
 80156b8:	2b02      	cmp	r3, #2
 80156ba:	d10a      	bne.n	80156d2 <tcp_slowtmr+0xba>
 80156bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80156c2:	2b05      	cmp	r3, #5
 80156c4:	d905      	bls.n	80156d2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80156c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156ca:	3301      	adds	r3, #1
 80156cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156d0:	e11e      	b.n	8015910 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80156d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80156d8:	2b0b      	cmp	r3, #11
 80156da:	d905      	bls.n	80156e8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80156dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156e0:	3301      	adds	r3, #1
 80156e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156e6:	e113      	b.n	8015910 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80156e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d075      	beq.n	80157de <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80156f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d006      	beq.n	8015708 <tcp_slowtmr+0xf0>
 80156fa:	4b62      	ldr	r3, [pc, #392]	; (8015884 <tcp_slowtmr+0x26c>)
 80156fc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8015700:	4965      	ldr	r1, [pc, #404]	; (8015898 <tcp_slowtmr+0x280>)
 8015702:	4862      	ldr	r0, [pc, #392]	; (801588c <tcp_slowtmr+0x274>)
 8015704:	f008 fd9e 	bl	801e244 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801570a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801570c:	2b00      	cmp	r3, #0
 801570e:	d106      	bne.n	801571e <tcp_slowtmr+0x106>
 8015710:	4b5c      	ldr	r3, [pc, #368]	; (8015884 <tcp_slowtmr+0x26c>)
 8015712:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8015716:	4961      	ldr	r1, [pc, #388]	; (801589c <tcp_slowtmr+0x284>)
 8015718:	485c      	ldr	r0, [pc, #368]	; (801588c <tcp_slowtmr+0x274>)
 801571a:	f008 fd93 	bl	801e244 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015720:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015724:	2b0b      	cmp	r3, #11
 8015726:	d905      	bls.n	8015734 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8015728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801572c:	3301      	adds	r3, #1
 801572e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015732:	e0ed      	b.n	8015910 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015736:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801573a:	3b01      	subs	r3, #1
 801573c:	4a58      	ldr	r2, [pc, #352]	; (80158a0 <tcp_slowtmr+0x288>)
 801573e:	5cd3      	ldrb	r3, [r2, r3]
 8015740:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015744:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015748:	7c7a      	ldrb	r2, [r7, #17]
 801574a:	429a      	cmp	r2, r3
 801574c:	d907      	bls.n	801575e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015750:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015754:	3301      	adds	r3, #1
 8015756:	b2da      	uxtb	r2, r3
 8015758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801575a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015760:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015764:	7c7a      	ldrb	r2, [r7, #17]
 8015766:	429a      	cmp	r2, r3
 8015768:	f200 80d2 	bhi.w	8015910 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801576c:	2301      	movs	r3, #1
 801576e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8015770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015772:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015776:	2b00      	cmp	r3, #0
 8015778:	d108      	bne.n	801578c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801577a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801577c:	f005 f986 	bl	801aa8c <tcp_zero_window_probe>
 8015780:	4603      	mov	r3, r0
 8015782:	2b00      	cmp	r3, #0
 8015784:	d014      	beq.n	80157b0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8015786:	2300      	movs	r3, #0
 8015788:	623b      	str	r3, [r7, #32]
 801578a:	e011      	b.n	80157b0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801578e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015792:	4619      	mov	r1, r3
 8015794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015796:	f004 f829 	bl	80197ec <tcp_split_unsent_seg>
 801579a:	4603      	mov	r3, r0
 801579c:	2b00      	cmp	r3, #0
 801579e:	d107      	bne.n	80157b0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80157a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80157a2:	f004 faa9 	bl	8019cf8 <tcp_output>
 80157a6:	4603      	mov	r3, r0
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d101      	bne.n	80157b0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80157ac:	2300      	movs	r3, #0
 80157ae:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80157b0:	6a3b      	ldr	r3, [r7, #32]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	f000 80ac 	beq.w	8015910 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80157b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ba:	2200      	movs	r2, #0
 80157bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80157c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80157c6:	2b06      	cmp	r3, #6
 80157c8:	f200 80a2 	bhi.w	8015910 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80157cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80157d2:	3301      	adds	r3, #1
 80157d4:	b2da      	uxtb	r2, r3
 80157d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80157dc:	e098      	b.n	8015910 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80157de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	db0f      	blt.n	8015808 <tcp_slowtmr+0x1f0>
 80157e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80157ee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80157f2:	4293      	cmp	r3, r2
 80157f4:	d008      	beq.n	8015808 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80157f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80157fc:	b29b      	uxth	r3, r3
 80157fe:	3301      	adds	r3, #1
 8015800:	b29b      	uxth	r3, r3
 8015802:	b21a      	sxth	r2, r3
 8015804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015806:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8015808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801580a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015810:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8015814:	429a      	cmp	r2, r3
 8015816:	db7b      	blt.n	8015910 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015818:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801581a:	f004 fd71 	bl	801a300 <tcp_rexmit_rto_prepare>
 801581e:	4603      	mov	r3, r0
 8015820:	2b00      	cmp	r3, #0
 8015822:	d007      	beq.n	8015834 <tcp_slowtmr+0x21c>
 8015824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015828:	2b00      	cmp	r3, #0
 801582a:	d171      	bne.n	8015910 <tcp_slowtmr+0x2f8>
 801582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801582e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015830:	2b00      	cmp	r3, #0
 8015832:	d06d      	beq.n	8015910 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8015834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015836:	7d1b      	ldrb	r3, [r3, #20]
 8015838:	2b02      	cmp	r3, #2
 801583a:	d03a      	beq.n	80158b2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801583c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801583e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015842:	2b0c      	cmp	r3, #12
 8015844:	bf28      	it	cs
 8015846:	230c      	movcs	r3, #12
 8015848:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801584c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015850:	10db      	asrs	r3, r3, #3
 8015852:	b21b      	sxth	r3, r3
 8015854:	461a      	mov	r2, r3
 8015856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015858:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801585c:	4413      	add	r3, r2
 801585e:	7efa      	ldrb	r2, [r7, #27]
 8015860:	4910      	ldr	r1, [pc, #64]	; (80158a4 <tcp_slowtmr+0x28c>)
 8015862:	5c8a      	ldrb	r2, [r1, r2]
 8015864:	4093      	lsls	r3, r2
 8015866:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015868:	697b      	ldr	r3, [r7, #20]
 801586a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801586e:	4293      	cmp	r3, r2
 8015870:	dc1a      	bgt.n	80158a8 <tcp_slowtmr+0x290>
 8015872:	697b      	ldr	r3, [r7, #20]
 8015874:	b21a      	sxth	r2, r3
 8015876:	e019      	b.n	80158ac <tcp_slowtmr+0x294>
 8015878:	2405e9ac 	.word	0x2405e9ac
 801587c:	2405e9c2 	.word	0x2405e9c2
 8015880:	2405e9b8 	.word	0x2405e9b8
 8015884:	08020ba0 	.word	0x08020ba0
 8015888:	08020ee4 	.word	0x08020ee4
 801588c:	08020be4 	.word	0x08020be4
 8015890:	08020f10 	.word	0x08020f10
 8015894:	08020f3c 	.word	0x08020f3c
 8015898:	08020f6c 	.word	0x08020f6c
 801589c:	08020fa0 	.word	0x08020fa0
 80158a0:	08022c48 	.word	0x08022c48
 80158a4:	08022c38 	.word	0x08022c38
 80158a8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80158ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80158b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158b4:	2200      	movs	r2, #0
 80158b6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80158b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80158be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80158c4:	4293      	cmp	r3, r2
 80158c6:	bf28      	it	cs
 80158c8:	4613      	movcs	r3, r2
 80158ca:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80158cc:	8a7b      	ldrh	r3, [r7, #18]
 80158ce:	085b      	lsrs	r3, r3, #1
 80158d0:	b29a      	uxth	r2, r3
 80158d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80158d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80158de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80158e2:	005b      	lsls	r3, r3, #1
 80158e4:	b29b      	uxth	r3, r3
 80158e6:	429a      	cmp	r2, r3
 80158e8:	d206      	bcs.n	80158f8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80158ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80158ee:	005b      	lsls	r3, r3, #1
 80158f0:	b29a      	uxth	r2, r3
 80158f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80158f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158fa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80158fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8015902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015904:	2200      	movs	r2, #0
 8015906:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801590a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801590c:	f004 fd68 	bl	801a3e0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8015910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015912:	7d1b      	ldrb	r3, [r3, #20]
 8015914:	2b06      	cmp	r3, #6
 8015916:	d111      	bne.n	801593c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8015918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801591a:	8b5b      	ldrh	r3, [r3, #26]
 801591c:	f003 0310 	and.w	r3, r3, #16
 8015920:	2b00      	cmp	r3, #0
 8015922:	d00b      	beq.n	801593c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015924:	4b9c      	ldr	r3, [pc, #624]	; (8015b98 <tcp_slowtmr+0x580>)
 8015926:	681a      	ldr	r2, [r3, #0]
 8015928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801592a:	6a1b      	ldr	r3, [r3, #32]
 801592c:	1ad3      	subs	r3, r2, r3
 801592e:	2b28      	cmp	r3, #40	; 0x28
 8015930:	d904      	bls.n	801593c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8015932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015936:	3301      	adds	r3, #1
 8015938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801593e:	7a5b      	ldrb	r3, [r3, #9]
 8015940:	f003 0308 	and.w	r3, r3, #8
 8015944:	2b00      	cmp	r3, #0
 8015946:	d04a      	beq.n	80159de <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8015948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801594a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801594c:	2b04      	cmp	r3, #4
 801594e:	d003      	beq.n	8015958 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8015950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015952:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015954:	2b07      	cmp	r3, #7
 8015956:	d142      	bne.n	80159de <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015958:	4b8f      	ldr	r3, [pc, #572]	; (8015b98 <tcp_slowtmr+0x580>)
 801595a:	681a      	ldr	r2, [r3, #0]
 801595c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801595e:	6a1b      	ldr	r3, [r3, #32]
 8015960:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015964:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8015968:	4b8c      	ldr	r3, [pc, #560]	; (8015b9c <tcp_slowtmr+0x584>)
 801596a:	440b      	add	r3, r1
 801596c:	498c      	ldr	r1, [pc, #560]	; (8015ba0 <tcp_slowtmr+0x588>)
 801596e:	fba1 1303 	umull	r1, r3, r1, r3
 8015972:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015974:	429a      	cmp	r2, r3
 8015976:	d90a      	bls.n	801598e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8015978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801597c:	3301      	adds	r3, #1
 801597e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8015982:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015986:	3301      	adds	r3, #1
 8015988:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801598c:	e027      	b.n	80159de <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801598e:	4b82      	ldr	r3, [pc, #520]	; (8015b98 <tcp_slowtmr+0x580>)
 8015990:	681a      	ldr	r2, [r3, #0]
 8015992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015994:	6a1b      	ldr	r3, [r3, #32]
 8015996:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801599a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80159a4:	4618      	mov	r0, r3
 80159a6:	4b7f      	ldr	r3, [pc, #508]	; (8015ba4 <tcp_slowtmr+0x58c>)
 80159a8:	fb00 f303 	mul.w	r3, r0, r3
 80159ac:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80159ae:	497c      	ldr	r1, [pc, #496]	; (8015ba0 <tcp_slowtmr+0x588>)
 80159b0:	fba1 1303 	umull	r1, r3, r1, r3
 80159b4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80159b6:	429a      	cmp	r2, r3
 80159b8:	d911      	bls.n	80159de <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80159ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80159bc:	f005 f826 	bl	801aa0c <tcp_keepalive>
 80159c0:	4603      	mov	r3, r0
 80159c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80159c6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d107      	bne.n	80159de <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80159ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159d0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80159d4:	3301      	adds	r3, #1
 80159d6:	b2da      	uxtb	r2, r3
 80159d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159da:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80159de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d011      	beq.n	8015a0a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80159e6:	4b6c      	ldr	r3, [pc, #432]	; (8015b98 <tcp_slowtmr+0x580>)
 80159e8:	681a      	ldr	r2, [r3, #0]
 80159ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ec:	6a1b      	ldr	r3, [r3, #32]
 80159ee:	1ad2      	subs	r2, r2, r3
 80159f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159f2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80159f6:	4619      	mov	r1, r3
 80159f8:	460b      	mov	r3, r1
 80159fa:	005b      	lsls	r3, r3, #1
 80159fc:	440b      	add	r3, r1
 80159fe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8015a00:	429a      	cmp	r2, r3
 8015a02:	d302      	bcc.n	8015a0a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8015a04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a06:	f000 feab 	bl	8016760 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8015a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a0c:	7d1b      	ldrb	r3, [r3, #20]
 8015a0e:	2b03      	cmp	r3, #3
 8015a10:	d10b      	bne.n	8015a2a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015a12:	4b61      	ldr	r3, [pc, #388]	; (8015b98 <tcp_slowtmr+0x580>)
 8015a14:	681a      	ldr	r2, [r3, #0]
 8015a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a18:	6a1b      	ldr	r3, [r3, #32]
 8015a1a:	1ad3      	subs	r3, r2, r3
 8015a1c:	2b28      	cmp	r3, #40	; 0x28
 8015a1e:	d904      	bls.n	8015a2a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8015a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a24:	3301      	adds	r3, #1
 8015a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8015a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a2c:	7d1b      	ldrb	r3, [r3, #20]
 8015a2e:	2b09      	cmp	r3, #9
 8015a30:	d10b      	bne.n	8015a4a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015a32:	4b59      	ldr	r3, [pc, #356]	; (8015b98 <tcp_slowtmr+0x580>)
 8015a34:	681a      	ldr	r2, [r3, #0]
 8015a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a38:	6a1b      	ldr	r3, [r3, #32]
 8015a3a:	1ad3      	subs	r3, r2, r3
 8015a3c:	2bf0      	cmp	r3, #240	; 0xf0
 8015a3e:	d904      	bls.n	8015a4a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8015a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a44:	3301      	adds	r3, #1
 8015a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d060      	beq.n	8015b14 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8015a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015a58:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8015a5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a5c:	f000 fccc 	bl	80163f8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8015a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d010      	beq.n	8015a88 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015a66:	4b50      	ldr	r3, [pc, #320]	; (8015ba8 <tcp_slowtmr+0x590>)
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	d106      	bne.n	8015a7e <tcp_slowtmr+0x466>
 8015a70:	4b4e      	ldr	r3, [pc, #312]	; (8015bac <tcp_slowtmr+0x594>)
 8015a72:	f240 526d 	movw	r2, #1389	; 0x56d
 8015a76:	494e      	ldr	r1, [pc, #312]	; (8015bb0 <tcp_slowtmr+0x598>)
 8015a78:	484e      	ldr	r0, [pc, #312]	; (8015bb4 <tcp_slowtmr+0x59c>)
 8015a7a:	f008 fbe3 	bl	801e244 <iprintf>
        prev->next = pcb->next;
 8015a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a80:	68da      	ldr	r2, [r3, #12]
 8015a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a84:	60da      	str	r2, [r3, #12]
 8015a86:	e00f      	b.n	8015aa8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015a88:	4b47      	ldr	r3, [pc, #284]	; (8015ba8 <tcp_slowtmr+0x590>)
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	d006      	beq.n	8015aa0 <tcp_slowtmr+0x488>
 8015a92:	4b46      	ldr	r3, [pc, #280]	; (8015bac <tcp_slowtmr+0x594>)
 8015a94:	f240 5271 	movw	r2, #1393	; 0x571
 8015a98:	4947      	ldr	r1, [pc, #284]	; (8015bb8 <tcp_slowtmr+0x5a0>)
 8015a9a:	4846      	ldr	r0, [pc, #280]	; (8015bb4 <tcp_slowtmr+0x59c>)
 8015a9c:	f008 fbd2 	bl	801e244 <iprintf>
        tcp_active_pcbs = pcb->next;
 8015aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aa2:	68db      	ldr	r3, [r3, #12]
 8015aa4:	4a40      	ldr	r2, [pc, #256]	; (8015ba8 <tcp_slowtmr+0x590>)
 8015aa6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8015aa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d013      	beq.n	8015ad8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ab2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ab6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015ab8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8015aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015abc:	3304      	adds	r3, #4
 8015abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ac0:	8ad2      	ldrh	r2, [r2, #22]
 8015ac2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015ac4:	8b09      	ldrh	r1, [r1, #24]
 8015ac6:	9102      	str	r1, [sp, #8]
 8015ac8:	9201      	str	r2, [sp, #4]
 8015aca:	9300      	str	r3, [sp, #0]
 8015acc:	462b      	mov	r3, r5
 8015ace:	4622      	mov	r2, r4
 8015ad0:	4601      	mov	r1, r0
 8015ad2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ad4:	f004 fee6 	bl	801a8a4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8015ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ada:	691b      	ldr	r3, [r3, #16]
 8015adc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8015ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ae0:	7d1b      	ldrb	r3, [r3, #20]
 8015ae2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ae6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aea:	68db      	ldr	r3, [r3, #12]
 8015aec:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8015aee:	6838      	ldr	r0, [r7, #0]
 8015af0:	f7fe fff0 	bl	8014ad4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8015af4:	4b31      	ldr	r3, [pc, #196]	; (8015bbc <tcp_slowtmr+0x5a4>)
 8015af6:	2200      	movs	r2, #0
 8015af8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d004      	beq.n	8015b0a <tcp_slowtmr+0x4f2>
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	f06f 010c 	mvn.w	r1, #12
 8015b06:	68b8      	ldr	r0, [r7, #8]
 8015b08:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015b0a:	4b2c      	ldr	r3, [pc, #176]	; (8015bbc <tcp_slowtmr+0x5a4>)
 8015b0c:	781b      	ldrb	r3, [r3, #0]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d037      	beq.n	8015b82 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8015b12:	e592      	b.n	801563a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8015b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b16:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b1a:	68db      	ldr	r3, [r3, #12]
 8015b1c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8015b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b20:	7f1b      	ldrb	r3, [r3, #28]
 8015b22:	3301      	adds	r3, #1
 8015b24:	b2da      	uxtb	r2, r3
 8015b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b28:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b2c:	7f1a      	ldrb	r2, [r3, #28]
 8015b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b30:	7f5b      	ldrb	r3, [r3, #29]
 8015b32:	429a      	cmp	r2, r3
 8015b34:	d325      	bcc.n	8015b82 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8015b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b38:	2200      	movs	r2, #0
 8015b3a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8015b3c:	4b1f      	ldr	r3, [pc, #124]	; (8015bbc <tcp_slowtmr+0x5a4>)
 8015b3e:	2200      	movs	r2, #0
 8015b40:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d00b      	beq.n	8015b64 <tcp_slowtmr+0x54c>
 8015b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015b54:	6912      	ldr	r2, [r2, #16]
 8015b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015b58:	4610      	mov	r0, r2
 8015b5a:	4798      	blx	r3
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8015b62:	e002      	b.n	8015b6a <tcp_slowtmr+0x552>
 8015b64:	2300      	movs	r3, #0
 8015b66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8015b6a:	4b14      	ldr	r3, [pc, #80]	; (8015bbc <tcp_slowtmr+0x5a4>)
 8015b6c:	781b      	ldrb	r3, [r3, #0]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d000      	beq.n	8015b74 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8015b72:	e562      	b.n	801563a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015b74:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d102      	bne.n	8015b82 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8015b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b7e:	f004 f8bb 	bl	8019cf8 <tcp_output>
  while (pcb != NULL) {
 8015b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	f47f ad5e 	bne.w	8015646 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8015b8e:	4b0c      	ldr	r3, [pc, #48]	; (8015bc0 <tcp_slowtmr+0x5a8>)
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015b94:	e069      	b.n	8015c6a <tcp_slowtmr+0x652>
 8015b96:	bf00      	nop
 8015b98:	2405e9ac 	.word	0x2405e9ac
 8015b9c:	000a4cb8 	.word	0x000a4cb8
 8015ba0:	10624dd3 	.word	0x10624dd3
 8015ba4:	000124f8 	.word	0x000124f8
 8015ba8:	2405e9b8 	.word	0x2405e9b8
 8015bac:	08020ba0 	.word	0x08020ba0
 8015bb0:	08020fd8 	.word	0x08020fd8
 8015bb4:	08020be4 	.word	0x08020be4
 8015bb8:	08021004 	.word	0x08021004
 8015bbc:	2405e9c0 	.word	0x2405e9c0
 8015bc0:	2405e9bc 	.word	0x2405e9bc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bc6:	7d1b      	ldrb	r3, [r3, #20]
 8015bc8:	2b0a      	cmp	r3, #10
 8015bca:	d006      	beq.n	8015bda <tcp_slowtmr+0x5c2>
 8015bcc:	4b2b      	ldr	r3, [pc, #172]	; (8015c7c <tcp_slowtmr+0x664>)
 8015bce:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8015bd2:	492b      	ldr	r1, [pc, #172]	; (8015c80 <tcp_slowtmr+0x668>)
 8015bd4:	482b      	ldr	r0, [pc, #172]	; (8015c84 <tcp_slowtmr+0x66c>)
 8015bd6:	f008 fb35 	bl	801e244 <iprintf>
    pcb_remove = 0;
 8015bda:	2300      	movs	r3, #0
 8015bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015be0:	4b29      	ldr	r3, [pc, #164]	; (8015c88 <tcp_slowtmr+0x670>)
 8015be2:	681a      	ldr	r2, [r3, #0]
 8015be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015be6:	6a1b      	ldr	r3, [r3, #32]
 8015be8:	1ad3      	subs	r3, r2, r3
 8015bea:	2bf0      	cmp	r3, #240	; 0xf0
 8015bec:	d904      	bls.n	8015bf8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8015bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bf2:	3301      	adds	r3, #1
 8015bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d02f      	beq.n	8015c60 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015c00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015c02:	f000 fbf9 	bl	80163f8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d010      	beq.n	8015c2e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015c0c:	4b1f      	ldr	r3, [pc, #124]	; (8015c8c <tcp_slowtmr+0x674>)
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c12:	429a      	cmp	r2, r3
 8015c14:	d106      	bne.n	8015c24 <tcp_slowtmr+0x60c>
 8015c16:	4b19      	ldr	r3, [pc, #100]	; (8015c7c <tcp_slowtmr+0x664>)
 8015c18:	f240 52af 	movw	r2, #1455	; 0x5af
 8015c1c:	491c      	ldr	r1, [pc, #112]	; (8015c90 <tcp_slowtmr+0x678>)
 8015c1e:	4819      	ldr	r0, [pc, #100]	; (8015c84 <tcp_slowtmr+0x66c>)
 8015c20:	f008 fb10 	bl	801e244 <iprintf>
        prev->next = pcb->next;
 8015c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c26:	68da      	ldr	r2, [r3, #12]
 8015c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c2a:	60da      	str	r2, [r3, #12]
 8015c2c:	e00f      	b.n	8015c4e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015c2e:	4b17      	ldr	r3, [pc, #92]	; (8015c8c <tcp_slowtmr+0x674>)
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c34:	429a      	cmp	r2, r3
 8015c36:	d006      	beq.n	8015c46 <tcp_slowtmr+0x62e>
 8015c38:	4b10      	ldr	r3, [pc, #64]	; (8015c7c <tcp_slowtmr+0x664>)
 8015c3a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8015c3e:	4915      	ldr	r1, [pc, #84]	; (8015c94 <tcp_slowtmr+0x67c>)
 8015c40:	4810      	ldr	r0, [pc, #64]	; (8015c84 <tcp_slowtmr+0x66c>)
 8015c42:	f008 faff 	bl	801e244 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c48:	68db      	ldr	r3, [r3, #12]
 8015c4a:	4a10      	ldr	r2, [pc, #64]	; (8015c8c <tcp_slowtmr+0x674>)
 8015c4c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8015c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c50:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c54:	68db      	ldr	r3, [r3, #12]
 8015c56:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8015c58:	69f8      	ldr	r0, [r7, #28]
 8015c5a:	f7fe ff3b 	bl	8014ad4 <tcp_free>
 8015c5e:	e004      	b.n	8015c6a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8015c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c62:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c66:	68db      	ldr	r3, [r3, #12]
 8015c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d1a9      	bne.n	8015bc4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8015c70:	bf00      	nop
 8015c72:	bf00      	nop
 8015c74:	3730      	adds	r7, #48	; 0x30
 8015c76:	46bd      	mov	sp, r7
 8015c78:	bdb0      	pop	{r4, r5, r7, pc}
 8015c7a:	bf00      	nop
 8015c7c:	08020ba0 	.word	0x08020ba0
 8015c80:	08021030 	.word	0x08021030
 8015c84:	08020be4 	.word	0x08020be4
 8015c88:	2405e9ac 	.word	0x2405e9ac
 8015c8c:	2405e9bc 	.word	0x2405e9bc
 8015c90:	08021060 	.word	0x08021060
 8015c94:	08021088 	.word	0x08021088

08015c98 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b082      	sub	sp, #8
 8015c9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8015c9e:	4b2d      	ldr	r3, [pc, #180]	; (8015d54 <tcp_fasttmr+0xbc>)
 8015ca0:	781b      	ldrb	r3, [r3, #0]
 8015ca2:	3301      	adds	r3, #1
 8015ca4:	b2da      	uxtb	r2, r3
 8015ca6:	4b2b      	ldr	r3, [pc, #172]	; (8015d54 <tcp_fasttmr+0xbc>)
 8015ca8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015caa:	4b2b      	ldr	r3, [pc, #172]	; (8015d58 <tcp_fasttmr+0xc0>)
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015cb0:	e048      	b.n	8015d44 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	7f9a      	ldrb	r2, [r3, #30]
 8015cb6:	4b27      	ldr	r3, [pc, #156]	; (8015d54 <tcp_fasttmr+0xbc>)
 8015cb8:	781b      	ldrb	r3, [r3, #0]
 8015cba:	429a      	cmp	r2, r3
 8015cbc:	d03f      	beq.n	8015d3e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8015cbe:	4b25      	ldr	r3, [pc, #148]	; (8015d54 <tcp_fasttmr+0xbc>)
 8015cc0:	781a      	ldrb	r2, [r3, #0]
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	8b5b      	ldrh	r3, [r3, #26]
 8015cca:	f003 0301 	and.w	r3, r3, #1
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d010      	beq.n	8015cf4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	8b5b      	ldrh	r3, [r3, #26]
 8015cd6:	f043 0302 	orr.w	r3, r3, #2
 8015cda:	b29a      	uxth	r2, r3
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8015ce0:	6878      	ldr	r0, [r7, #4]
 8015ce2:	f004 f809 	bl	8019cf8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	8b5b      	ldrh	r3, [r3, #26]
 8015cea:	f023 0303 	bic.w	r3, r3, #3
 8015cee:	b29a      	uxth	r2, r3
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	8b5b      	ldrh	r3, [r3, #26]
 8015cf8:	f003 0308 	and.w	r3, r3, #8
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d009      	beq.n	8015d14 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	8b5b      	ldrh	r3, [r3, #26]
 8015d04:	f023 0308 	bic.w	r3, r3, #8
 8015d08:	b29a      	uxth	r2, r3
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8015d0e:	6878      	ldr	r0, [r7, #4]
 8015d10:	f7ff f874 	bl	8014dfc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	68db      	ldr	r3, [r3, #12]
 8015d18:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d00a      	beq.n	8015d38 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015d22:	4b0e      	ldr	r3, [pc, #56]	; (8015d5c <tcp_fasttmr+0xc4>)
 8015d24:	2200      	movs	r2, #0
 8015d26:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015d28:	6878      	ldr	r0, [r7, #4]
 8015d2a:	f000 f819 	bl	8015d60 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8015d2e:	4b0b      	ldr	r3, [pc, #44]	; (8015d5c <tcp_fasttmr+0xc4>)
 8015d30:	781b      	ldrb	r3, [r3, #0]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d000      	beq.n	8015d38 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015d36:	e7b8      	b.n	8015caa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015d38:	683b      	ldr	r3, [r7, #0]
 8015d3a:	607b      	str	r3, [r7, #4]
 8015d3c:	e002      	b.n	8015d44 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	68db      	ldr	r3, [r3, #12]
 8015d42:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d1b3      	bne.n	8015cb2 <tcp_fasttmr+0x1a>
    }
  }
}
 8015d4a:	bf00      	nop
 8015d4c:	bf00      	nop
 8015d4e:	3708      	adds	r7, #8
 8015d50:	46bd      	mov	sp, r7
 8015d52:	bd80      	pop	{r7, pc}
 8015d54:	2405e9c2 	.word	0x2405e9c2
 8015d58:	2405e9b8 	.word	0x2405e9b8
 8015d5c:	2405e9c0 	.word	0x2405e9c0

08015d60 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015d60:	b590      	push	{r4, r7, lr}
 8015d62:	b085      	sub	sp, #20
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d109      	bne.n	8015d82 <tcp_process_refused_data+0x22>
 8015d6e:	4b37      	ldr	r3, [pc, #220]	; (8015e4c <tcp_process_refused_data+0xec>)
 8015d70:	f240 6209 	movw	r2, #1545	; 0x609
 8015d74:	4936      	ldr	r1, [pc, #216]	; (8015e50 <tcp_process_refused_data+0xf0>)
 8015d76:	4837      	ldr	r0, [pc, #220]	; (8015e54 <tcp_process_refused_data+0xf4>)
 8015d78:	f008 fa64 	bl	801e244 <iprintf>
 8015d7c:	f06f 030f 	mvn.w	r3, #15
 8015d80:	e060      	b.n	8015e44 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015d86:	7b5b      	ldrb	r3, [r3, #13]
 8015d88:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015d8e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2200      	movs	r2, #0
 8015d94:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d00b      	beq.n	8015db8 <tcp_process_refused_data+0x58>
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	6918      	ldr	r0, [r3, #16]
 8015daa:	2300      	movs	r3, #0
 8015dac:	68ba      	ldr	r2, [r7, #8]
 8015dae:	6879      	ldr	r1, [r7, #4]
 8015db0:	47a0      	blx	r4
 8015db2:	4603      	mov	r3, r0
 8015db4:	73fb      	strb	r3, [r7, #15]
 8015db6:	e007      	b.n	8015dc8 <tcp_process_refused_data+0x68>
 8015db8:	2300      	movs	r3, #0
 8015dba:	68ba      	ldr	r2, [r7, #8]
 8015dbc:	6879      	ldr	r1, [r7, #4]
 8015dbe:	2000      	movs	r0, #0
 8015dc0:	f000 f8a4 	bl	8015f0c <tcp_recv_null>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d12a      	bne.n	8015e26 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8015dd0:	7bbb      	ldrb	r3, [r7, #14]
 8015dd2:	f003 0320 	and.w	r3, r3, #32
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d033      	beq.n	8015e42 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015dde:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015de2:	d005      	beq.n	8015df0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015de8:	3301      	adds	r3, #1
 8015dea:	b29a      	uxth	r2, r3
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d00b      	beq.n	8015e12 <tcp_process_refused_data+0xb2>
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	6918      	ldr	r0, [r3, #16]
 8015e04:	2300      	movs	r3, #0
 8015e06:	2200      	movs	r2, #0
 8015e08:	6879      	ldr	r1, [r7, #4]
 8015e0a:	47a0      	blx	r4
 8015e0c:	4603      	mov	r3, r0
 8015e0e:	73fb      	strb	r3, [r7, #15]
 8015e10:	e001      	b.n	8015e16 <tcp_process_refused_data+0xb6>
 8015e12:	2300      	movs	r3, #0
 8015e14:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e1a:	f113 0f0d 	cmn.w	r3, #13
 8015e1e:	d110      	bne.n	8015e42 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015e20:	f06f 030c 	mvn.w	r3, #12
 8015e24:	e00e      	b.n	8015e44 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e2a:	f113 0f0d 	cmn.w	r3, #13
 8015e2e:	d102      	bne.n	8015e36 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015e30:	f06f 030c 	mvn.w	r3, #12
 8015e34:	e006      	b.n	8015e44 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	68ba      	ldr	r2, [r7, #8]
 8015e3a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8015e3c:	f06f 0304 	mvn.w	r3, #4
 8015e40:	e000      	b.n	8015e44 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8015e42:	2300      	movs	r3, #0
}
 8015e44:	4618      	mov	r0, r3
 8015e46:	3714      	adds	r7, #20
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	bd90      	pop	{r4, r7, pc}
 8015e4c:	08020ba0 	.word	0x08020ba0
 8015e50:	080210b0 	.word	0x080210b0
 8015e54:	08020be4 	.word	0x08020be4

08015e58 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b084      	sub	sp, #16
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015e60:	e007      	b.n	8015e72 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015e68:	6878      	ldr	r0, [r7, #4]
 8015e6a:	f000 f80a 	bl	8015e82 <tcp_seg_free>
    seg = next;
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d1f4      	bne.n	8015e62 <tcp_segs_free+0xa>
  }
}
 8015e78:	bf00      	nop
 8015e7a:	bf00      	nop
 8015e7c:	3710      	adds	r7, #16
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}

08015e82 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015e82:	b580      	push	{r7, lr}
 8015e84:	b082      	sub	sp, #8
 8015e86:	af00      	add	r7, sp, #0
 8015e88:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d00c      	beq.n	8015eaa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	685b      	ldr	r3, [r3, #4]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d004      	beq.n	8015ea2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	685b      	ldr	r3, [r3, #4]
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	f7fe fb6d 	bl	801457c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015ea2:	6879      	ldr	r1, [r7, #4]
 8015ea4:	2003      	movs	r0, #3
 8015ea6:	f7fd fcc1 	bl	801382c <memp_free>
  }
}
 8015eaa:	bf00      	nop
 8015eac:	3708      	adds	r7, #8
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}
	...

08015eb4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b084      	sub	sp, #16
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d106      	bne.n	8015ed0 <tcp_seg_copy+0x1c>
 8015ec2:	4b0f      	ldr	r3, [pc, #60]	; (8015f00 <tcp_seg_copy+0x4c>)
 8015ec4:	f240 6282 	movw	r2, #1666	; 0x682
 8015ec8:	490e      	ldr	r1, [pc, #56]	; (8015f04 <tcp_seg_copy+0x50>)
 8015eca:	480f      	ldr	r0, [pc, #60]	; (8015f08 <tcp_seg_copy+0x54>)
 8015ecc:	f008 f9ba 	bl	801e244 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015ed0:	2003      	movs	r0, #3
 8015ed2:	f7fd fc35 	bl	8013740 <memp_malloc>
 8015ed6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d101      	bne.n	8015ee2 <tcp_seg_copy+0x2e>
    return NULL;
 8015ede:	2300      	movs	r3, #0
 8015ee0:	e00a      	b.n	8015ef8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015ee2:	2210      	movs	r2, #16
 8015ee4:	6879      	ldr	r1, [r7, #4]
 8015ee6:	68f8      	ldr	r0, [r7, #12]
 8015ee8:	f008 f8e7 	bl	801e0ba <memcpy>
  pbuf_ref(cseg->p);
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	685b      	ldr	r3, [r3, #4]
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f7fe fbe9 	bl	80146c8 <pbuf_ref>
  return cseg;
 8015ef6:	68fb      	ldr	r3, [r7, #12]
}
 8015ef8:	4618      	mov	r0, r3
 8015efa:	3710      	adds	r7, #16
 8015efc:	46bd      	mov	sp, r7
 8015efe:	bd80      	pop	{r7, pc}
 8015f00:	08020ba0 	.word	0x08020ba0
 8015f04:	080210f4 	.word	0x080210f4
 8015f08:	08020be4 	.word	0x08020be4

08015f0c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b084      	sub	sp, #16
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	60f8      	str	r0, [r7, #12]
 8015f14:	60b9      	str	r1, [r7, #8]
 8015f16:	607a      	str	r2, [r7, #4]
 8015f18:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015f1a:	68bb      	ldr	r3, [r7, #8]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d109      	bne.n	8015f34 <tcp_recv_null+0x28>
 8015f20:	4b12      	ldr	r3, [pc, #72]	; (8015f6c <tcp_recv_null+0x60>)
 8015f22:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015f26:	4912      	ldr	r1, [pc, #72]	; (8015f70 <tcp_recv_null+0x64>)
 8015f28:	4812      	ldr	r0, [pc, #72]	; (8015f74 <tcp_recv_null+0x68>)
 8015f2a:	f008 f98b 	bl	801e244 <iprintf>
 8015f2e:	f06f 030f 	mvn.w	r3, #15
 8015f32:	e016      	b.n	8015f62 <tcp_recv_null+0x56>

  if (p != NULL) {
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d009      	beq.n	8015f4e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	891b      	ldrh	r3, [r3, #8]
 8015f3e:	4619      	mov	r1, r3
 8015f40:	68b8      	ldr	r0, [r7, #8]
 8015f42:	f7ff fad3 	bl	80154ec <tcp_recved>
    pbuf_free(p);
 8015f46:	6878      	ldr	r0, [r7, #4]
 8015f48:	f7fe fb18 	bl	801457c <pbuf_free>
 8015f4c:	e008      	b.n	8015f60 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8015f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d104      	bne.n	8015f60 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015f56:	68b8      	ldr	r0, [r7, #8]
 8015f58:	f7fe ffba 	bl	8014ed0 <tcp_close>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	e000      	b.n	8015f62 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015f60:	2300      	movs	r3, #0
}
 8015f62:	4618      	mov	r0, r3
 8015f64:	3710      	adds	r7, #16
 8015f66:	46bd      	mov	sp, r7
 8015f68:	bd80      	pop	{r7, pc}
 8015f6a:	bf00      	nop
 8015f6c:	08020ba0 	.word	0x08020ba0
 8015f70:	08021110 	.word	0x08021110
 8015f74:	08020be4 	.word	0x08020be4

08015f78 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b086      	sub	sp, #24
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	4603      	mov	r3, r0
 8015f80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	db01      	blt.n	8015f8e <tcp_kill_prio+0x16>
 8015f8a:	79fb      	ldrb	r3, [r7, #7]
 8015f8c:	e000      	b.n	8015f90 <tcp_kill_prio+0x18>
 8015f8e:	237f      	movs	r3, #127	; 0x7f
 8015f90:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015f92:	7afb      	ldrb	r3, [r7, #11]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d034      	beq.n	8016002 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015f98:	7afb      	ldrb	r3, [r7, #11]
 8015f9a:	3b01      	subs	r3, #1
 8015f9c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015fa6:	4b19      	ldr	r3, [pc, #100]	; (801600c <tcp_kill_prio+0x94>)
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	617b      	str	r3, [r7, #20]
 8015fac:	e01f      	b.n	8015fee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015fae:	697b      	ldr	r3, [r7, #20]
 8015fb0:	7d5b      	ldrb	r3, [r3, #21]
 8015fb2:	7afa      	ldrb	r2, [r7, #11]
 8015fb4:	429a      	cmp	r2, r3
 8015fb6:	d80c      	bhi.n	8015fd2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015fb8:	697b      	ldr	r3, [r7, #20]
 8015fba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015fbc:	7afa      	ldrb	r2, [r7, #11]
 8015fbe:	429a      	cmp	r2, r3
 8015fc0:	d112      	bne.n	8015fe8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015fc2:	4b13      	ldr	r3, [pc, #76]	; (8016010 <tcp_kill_prio+0x98>)
 8015fc4:	681a      	ldr	r2, [r3, #0]
 8015fc6:	697b      	ldr	r3, [r7, #20]
 8015fc8:	6a1b      	ldr	r3, [r3, #32]
 8015fca:	1ad3      	subs	r3, r2, r3
 8015fcc:	68fa      	ldr	r2, [r7, #12]
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	d80a      	bhi.n	8015fe8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015fd2:	4b0f      	ldr	r3, [pc, #60]	; (8016010 <tcp_kill_prio+0x98>)
 8015fd4:	681a      	ldr	r2, [r3, #0]
 8015fd6:	697b      	ldr	r3, [r7, #20]
 8015fd8:	6a1b      	ldr	r3, [r3, #32]
 8015fda:	1ad3      	subs	r3, r2, r3
 8015fdc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015fde:	697b      	ldr	r3, [r7, #20]
 8015fe0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015fe2:	697b      	ldr	r3, [r7, #20]
 8015fe4:	7d5b      	ldrb	r3, [r3, #21]
 8015fe6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015fe8:	697b      	ldr	r3, [r7, #20]
 8015fea:	68db      	ldr	r3, [r3, #12]
 8015fec:	617b      	str	r3, [r7, #20]
 8015fee:	697b      	ldr	r3, [r7, #20]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d1dc      	bne.n	8015fae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015ff4:	693b      	ldr	r3, [r7, #16]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d004      	beq.n	8016004 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015ffa:	6938      	ldr	r0, [r7, #16]
 8015ffc:	f7ff f8ae 	bl	801515c <tcp_abort>
 8016000:	e000      	b.n	8016004 <tcp_kill_prio+0x8c>
    return;
 8016002:	bf00      	nop
  }
}
 8016004:	3718      	adds	r7, #24
 8016006:	46bd      	mov	sp, r7
 8016008:	bd80      	pop	{r7, pc}
 801600a:	bf00      	nop
 801600c:	2405e9b8 	.word	0x2405e9b8
 8016010:	2405e9ac 	.word	0x2405e9ac

08016014 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b086      	sub	sp, #24
 8016018:	af00      	add	r7, sp, #0
 801601a:	4603      	mov	r3, r0
 801601c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801601e:	79fb      	ldrb	r3, [r7, #7]
 8016020:	2b08      	cmp	r3, #8
 8016022:	d009      	beq.n	8016038 <tcp_kill_state+0x24>
 8016024:	79fb      	ldrb	r3, [r7, #7]
 8016026:	2b09      	cmp	r3, #9
 8016028:	d006      	beq.n	8016038 <tcp_kill_state+0x24>
 801602a:	4b1a      	ldr	r3, [pc, #104]	; (8016094 <tcp_kill_state+0x80>)
 801602c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8016030:	4919      	ldr	r1, [pc, #100]	; (8016098 <tcp_kill_state+0x84>)
 8016032:	481a      	ldr	r0, [pc, #104]	; (801609c <tcp_kill_state+0x88>)
 8016034:	f008 f906 	bl	801e244 <iprintf>

  inactivity = 0;
 8016038:	2300      	movs	r3, #0
 801603a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801603c:	2300      	movs	r3, #0
 801603e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016040:	4b17      	ldr	r3, [pc, #92]	; (80160a0 <tcp_kill_state+0x8c>)
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	617b      	str	r3, [r7, #20]
 8016046:	e017      	b.n	8016078 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8016048:	697b      	ldr	r3, [r7, #20]
 801604a:	7d1b      	ldrb	r3, [r3, #20]
 801604c:	79fa      	ldrb	r2, [r7, #7]
 801604e:	429a      	cmp	r2, r3
 8016050:	d10f      	bne.n	8016072 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016052:	4b14      	ldr	r3, [pc, #80]	; (80160a4 <tcp_kill_state+0x90>)
 8016054:	681a      	ldr	r2, [r3, #0]
 8016056:	697b      	ldr	r3, [r7, #20]
 8016058:	6a1b      	ldr	r3, [r3, #32]
 801605a:	1ad3      	subs	r3, r2, r3
 801605c:	68fa      	ldr	r2, [r7, #12]
 801605e:	429a      	cmp	r2, r3
 8016060:	d807      	bhi.n	8016072 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8016062:	4b10      	ldr	r3, [pc, #64]	; (80160a4 <tcp_kill_state+0x90>)
 8016064:	681a      	ldr	r2, [r3, #0]
 8016066:	697b      	ldr	r3, [r7, #20]
 8016068:	6a1b      	ldr	r3, [r3, #32]
 801606a:	1ad3      	subs	r3, r2, r3
 801606c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801606e:	697b      	ldr	r3, [r7, #20]
 8016070:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016072:	697b      	ldr	r3, [r7, #20]
 8016074:	68db      	ldr	r3, [r3, #12]
 8016076:	617b      	str	r3, [r7, #20]
 8016078:	697b      	ldr	r3, [r7, #20]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d1e4      	bne.n	8016048 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801607e:	693b      	ldr	r3, [r7, #16]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d003      	beq.n	801608c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8016084:	2100      	movs	r1, #0
 8016086:	6938      	ldr	r0, [r7, #16]
 8016088:	f7fe ffaa 	bl	8014fe0 <tcp_abandon>
  }
}
 801608c:	bf00      	nop
 801608e:	3718      	adds	r7, #24
 8016090:	46bd      	mov	sp, r7
 8016092:	bd80      	pop	{r7, pc}
 8016094:	08020ba0 	.word	0x08020ba0
 8016098:	0802112c 	.word	0x0802112c
 801609c:	08020be4 	.word	0x08020be4
 80160a0:	2405e9b8 	.word	0x2405e9b8
 80160a4:	2405e9ac 	.word	0x2405e9ac

080160a8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b084      	sub	sp, #16
 80160ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80160ae:	2300      	movs	r3, #0
 80160b0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80160b2:	2300      	movs	r3, #0
 80160b4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80160b6:	4b12      	ldr	r3, [pc, #72]	; (8016100 <tcp_kill_timewait+0x58>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	60fb      	str	r3, [r7, #12]
 80160bc:	e012      	b.n	80160e4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80160be:	4b11      	ldr	r3, [pc, #68]	; (8016104 <tcp_kill_timewait+0x5c>)
 80160c0:	681a      	ldr	r2, [r3, #0]
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	6a1b      	ldr	r3, [r3, #32]
 80160c6:	1ad3      	subs	r3, r2, r3
 80160c8:	687a      	ldr	r2, [r7, #4]
 80160ca:	429a      	cmp	r2, r3
 80160cc:	d807      	bhi.n	80160de <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80160ce:	4b0d      	ldr	r3, [pc, #52]	; (8016104 <tcp_kill_timewait+0x5c>)
 80160d0:	681a      	ldr	r2, [r3, #0]
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	6a1b      	ldr	r3, [r3, #32]
 80160d6:	1ad3      	subs	r3, r2, r3
 80160d8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	68db      	ldr	r3, [r3, #12]
 80160e2:	60fb      	str	r3, [r7, #12]
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d1e9      	bne.n	80160be <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80160ea:	68bb      	ldr	r3, [r7, #8]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d002      	beq.n	80160f6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80160f0:	68b8      	ldr	r0, [r7, #8]
 80160f2:	f7ff f833 	bl	801515c <tcp_abort>
  }
}
 80160f6:	bf00      	nop
 80160f8:	3710      	adds	r7, #16
 80160fa:	46bd      	mov	sp, r7
 80160fc:	bd80      	pop	{r7, pc}
 80160fe:	bf00      	nop
 8016100:	2405e9bc 	.word	0x2405e9bc
 8016104:	2405e9ac 	.word	0x2405e9ac

08016108 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8016108:	b580      	push	{r7, lr}
 801610a:	b082      	sub	sp, #8
 801610c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801610e:	4b10      	ldr	r3, [pc, #64]	; (8016150 <tcp_handle_closepend+0x48>)
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016114:	e014      	b.n	8016140 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	68db      	ldr	r3, [r3, #12]
 801611a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	8b5b      	ldrh	r3, [r3, #26]
 8016120:	f003 0308 	and.w	r3, r3, #8
 8016124:	2b00      	cmp	r3, #0
 8016126:	d009      	beq.n	801613c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	8b5b      	ldrh	r3, [r3, #26]
 801612c:	f023 0308 	bic.w	r3, r3, #8
 8016130:	b29a      	uxth	r2, r3
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8016136:	6878      	ldr	r0, [r7, #4]
 8016138:	f7fe fe60 	bl	8014dfc <tcp_close_shutdown_fin>
    }
    pcb = next;
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d1e7      	bne.n	8016116 <tcp_handle_closepend+0xe>
  }
}
 8016146:	bf00      	nop
 8016148:	bf00      	nop
 801614a:	3708      	adds	r7, #8
 801614c:	46bd      	mov	sp, r7
 801614e:	bd80      	pop	{r7, pc}
 8016150:	2405e9b8 	.word	0x2405e9b8

08016154 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b084      	sub	sp, #16
 8016158:	af00      	add	r7, sp, #0
 801615a:	4603      	mov	r3, r0
 801615c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801615e:	2001      	movs	r0, #1
 8016160:	f7fd faee 	bl	8013740 <memp_malloc>
 8016164:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d126      	bne.n	80161ba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801616c:	f7ff ffcc 	bl	8016108 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8016170:	f7ff ff9a 	bl	80160a8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016174:	2001      	movs	r0, #1
 8016176:	f7fd fae3 	bl	8013740 <memp_malloc>
 801617a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d11b      	bne.n	80161ba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8016182:	2009      	movs	r0, #9
 8016184:	f7ff ff46 	bl	8016014 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016188:	2001      	movs	r0, #1
 801618a:	f7fd fad9 	bl	8013740 <memp_malloc>
 801618e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d111      	bne.n	80161ba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8016196:	2008      	movs	r0, #8
 8016198:	f7ff ff3c 	bl	8016014 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801619c:	2001      	movs	r0, #1
 801619e:	f7fd facf 	bl	8013740 <memp_malloc>
 80161a2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d107      	bne.n	80161ba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80161aa:	79fb      	ldrb	r3, [r7, #7]
 80161ac:	4618      	mov	r0, r3
 80161ae:	f7ff fee3 	bl	8015f78 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80161b2:	2001      	movs	r0, #1
 80161b4:	f7fd fac4 	bl	8013740 <memp_malloc>
 80161b8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d03f      	beq.n	8016240 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80161c0:	229c      	movs	r2, #156	; 0x9c
 80161c2:	2100      	movs	r1, #0
 80161c4:	68f8      	ldr	r0, [r7, #12]
 80161c6:	f007 ffa0 	bl	801e10a <memset>
    pcb->prio = prio;
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	79fa      	ldrb	r2, [r7, #7]
 80161ce:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80161d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80161e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	22ff      	movs	r2, #255	; 0xff
 80161ee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80161f6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	2206      	movs	r2, #6
 80161fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	2206      	movs	r2, #6
 8016204:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801620c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	2201      	movs	r2, #1
 8016212:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8016216:	4b0d      	ldr	r3, [pc, #52]	; (801624c <tcp_alloc+0xf8>)
 8016218:	681a      	ldr	r2, [r3, #0]
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801621e:	4b0c      	ldr	r3, [pc, #48]	; (8016250 <tcp_alloc+0xfc>)
 8016220:	781a      	ldrb	r2, [r3, #0]
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801622c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	4a08      	ldr	r2, [pc, #32]	; (8016254 <tcp_alloc+0x100>)
 8016234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	4a07      	ldr	r2, [pc, #28]	; (8016258 <tcp_alloc+0x104>)
 801623c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8016240:	68fb      	ldr	r3, [r7, #12]
}
 8016242:	4618      	mov	r0, r3
 8016244:	3710      	adds	r7, #16
 8016246:	46bd      	mov	sp, r7
 8016248:	bd80      	pop	{r7, pc}
 801624a:	bf00      	nop
 801624c:	2405e9ac 	.word	0x2405e9ac
 8016250:	2405e9c2 	.word	0x2405e9c2
 8016254:	08015f0d 	.word	0x08015f0d
 8016258:	006ddd00 	.word	0x006ddd00

0801625c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b084      	sub	sp, #16
 8016260:	af00      	add	r7, sp, #0
 8016262:	4603      	mov	r3, r0
 8016264:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8016266:	2040      	movs	r0, #64	; 0x40
 8016268:	f7ff ff74 	bl	8016154 <tcp_alloc>
 801626c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801626e:	68fb      	ldr	r3, [r7, #12]
}
 8016270:	4618      	mov	r0, r3
 8016272:	3710      	adds	r7, #16
 8016274:	46bd      	mov	sp, r7
 8016276:	bd80      	pop	{r7, pc}

08016278 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8016278:	b480      	push	{r7}
 801627a:	b083      	sub	sp, #12
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
 8016280:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d002      	beq.n	801628e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	683a      	ldr	r2, [r7, #0]
 801628c:	611a      	str	r2, [r3, #16]
  }
}
 801628e:	bf00      	nop
 8016290:	370c      	adds	r7, #12
 8016292:	46bd      	mov	sp, r7
 8016294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016298:	4770      	bx	lr
	...

0801629c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801629c:	b580      	push	{r7, lr}
 801629e:	b082      	sub	sp, #8
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
 80162a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d00e      	beq.n	80162ca <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	7d1b      	ldrb	r3, [r3, #20]
 80162b0:	2b01      	cmp	r3, #1
 80162b2:	d106      	bne.n	80162c2 <tcp_recv+0x26>
 80162b4:	4b07      	ldr	r3, [pc, #28]	; (80162d4 <tcp_recv+0x38>)
 80162b6:	f240 72df 	movw	r2, #2015	; 0x7df
 80162ba:	4907      	ldr	r1, [pc, #28]	; (80162d8 <tcp_recv+0x3c>)
 80162bc:	4807      	ldr	r0, [pc, #28]	; (80162dc <tcp_recv+0x40>)
 80162be:	f007 ffc1 	bl	801e244 <iprintf>
    pcb->recv = recv;
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	683a      	ldr	r2, [r7, #0]
 80162c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80162ca:	bf00      	nop
 80162cc:	3708      	adds	r7, #8
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bd80      	pop	{r7, pc}
 80162d2:	bf00      	nop
 80162d4:	08020ba0 	.word	0x08020ba0
 80162d8:	0802113c 	.word	0x0802113c
 80162dc:	08020be4 	.word	0x08020be4

080162e0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b082      	sub	sp, #8
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
 80162e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d00e      	beq.n	801630e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	7d1b      	ldrb	r3, [r3, #20]
 80162f4:	2b01      	cmp	r3, #1
 80162f6:	d106      	bne.n	8016306 <tcp_sent+0x26>
 80162f8:	4b07      	ldr	r3, [pc, #28]	; (8016318 <tcp_sent+0x38>)
 80162fa:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80162fe:	4907      	ldr	r1, [pc, #28]	; (801631c <tcp_sent+0x3c>)
 8016300:	4807      	ldr	r0, [pc, #28]	; (8016320 <tcp_sent+0x40>)
 8016302:	f007 ff9f 	bl	801e244 <iprintf>
    pcb->sent = sent;
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	683a      	ldr	r2, [r7, #0]
 801630a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801630e:	bf00      	nop
 8016310:	3708      	adds	r7, #8
 8016312:	46bd      	mov	sp, r7
 8016314:	bd80      	pop	{r7, pc}
 8016316:	bf00      	nop
 8016318:	08020ba0 	.word	0x08020ba0
 801631c:	08021164 	.word	0x08021164
 8016320:	08020be4 	.word	0x08020be4

08016324 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8016324:	b580      	push	{r7, lr}
 8016326:	b082      	sub	sp, #8
 8016328:	af00      	add	r7, sp, #0
 801632a:	6078      	str	r0, [r7, #4]
 801632c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d00e      	beq.n	8016352 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	7d1b      	ldrb	r3, [r3, #20]
 8016338:	2b01      	cmp	r3, #1
 801633a:	d106      	bne.n	801634a <tcp_err+0x26>
 801633c:	4b07      	ldr	r3, [pc, #28]	; (801635c <tcp_err+0x38>)
 801633e:	f640 020d 	movw	r2, #2061	; 0x80d
 8016342:	4907      	ldr	r1, [pc, #28]	; (8016360 <tcp_err+0x3c>)
 8016344:	4807      	ldr	r0, [pc, #28]	; (8016364 <tcp_err+0x40>)
 8016346:	f007 ff7d 	bl	801e244 <iprintf>
    pcb->errf = err;
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	683a      	ldr	r2, [r7, #0]
 801634e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8016352:	bf00      	nop
 8016354:	3708      	adds	r7, #8
 8016356:	46bd      	mov	sp, r7
 8016358:	bd80      	pop	{r7, pc}
 801635a:	bf00      	nop
 801635c:	08020ba0 	.word	0x08020ba0
 8016360:	0802118c 	.word	0x0802118c
 8016364:	08020be4 	.word	0x08020be4

08016368 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8016368:	b480      	push	{r7}
 801636a:	b085      	sub	sp, #20
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
 8016370:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d008      	beq.n	801638a <tcp_accept+0x22>
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	7d1b      	ldrb	r3, [r3, #20]
 801637c:	2b01      	cmp	r3, #1
 801637e:	d104      	bne.n	801638a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	683a      	ldr	r2, [r7, #0]
 8016388:	619a      	str	r2, [r3, #24]
  }
}
 801638a:	bf00      	nop
 801638c:	3714      	adds	r7, #20
 801638e:	46bd      	mov	sp, r7
 8016390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016394:	4770      	bx	lr
	...

08016398 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8016398:	b580      	push	{r7, lr}
 801639a:	b084      	sub	sp, #16
 801639c:	af00      	add	r7, sp, #0
 801639e:	60f8      	str	r0, [r7, #12]
 80163a0:	60b9      	str	r1, [r7, #8]
 80163a2:	4613      	mov	r3, r2
 80163a4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d107      	bne.n	80163bc <tcp_poll+0x24>
 80163ac:	4b0e      	ldr	r3, [pc, #56]	; (80163e8 <tcp_poll+0x50>)
 80163ae:	f640 023d 	movw	r2, #2109	; 0x83d
 80163b2:	490e      	ldr	r1, [pc, #56]	; (80163ec <tcp_poll+0x54>)
 80163b4:	480e      	ldr	r0, [pc, #56]	; (80163f0 <tcp_poll+0x58>)
 80163b6:	f007 ff45 	bl	801e244 <iprintf>
 80163ba:	e011      	b.n	80163e0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	7d1b      	ldrb	r3, [r3, #20]
 80163c0:	2b01      	cmp	r3, #1
 80163c2:	d106      	bne.n	80163d2 <tcp_poll+0x3a>
 80163c4:	4b08      	ldr	r3, [pc, #32]	; (80163e8 <tcp_poll+0x50>)
 80163c6:	f640 023e 	movw	r2, #2110	; 0x83e
 80163ca:	490a      	ldr	r1, [pc, #40]	; (80163f4 <tcp_poll+0x5c>)
 80163cc:	4808      	ldr	r0, [pc, #32]	; (80163f0 <tcp_poll+0x58>)
 80163ce:	f007 ff39 	bl	801e244 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	68ba      	ldr	r2, [r7, #8]
 80163d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	79fa      	ldrb	r2, [r7, #7]
 80163de:	775a      	strb	r2, [r3, #29]
}
 80163e0:	3710      	adds	r7, #16
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bd80      	pop	{r7, pc}
 80163e6:	bf00      	nop
 80163e8:	08020ba0 	.word	0x08020ba0
 80163ec:	080211b4 	.word	0x080211b4
 80163f0:	08020be4 	.word	0x08020be4
 80163f4:	080211cc 	.word	0x080211cc

080163f8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b082      	sub	sp, #8
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d107      	bne.n	8016416 <tcp_pcb_purge+0x1e>
 8016406:	4b21      	ldr	r3, [pc, #132]	; (801648c <tcp_pcb_purge+0x94>)
 8016408:	f640 0251 	movw	r2, #2129	; 0x851
 801640c:	4920      	ldr	r1, [pc, #128]	; (8016490 <tcp_pcb_purge+0x98>)
 801640e:	4821      	ldr	r0, [pc, #132]	; (8016494 <tcp_pcb_purge+0x9c>)
 8016410:	f007 ff18 	bl	801e244 <iprintf>
 8016414:	e037      	b.n	8016486 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	7d1b      	ldrb	r3, [r3, #20]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d033      	beq.n	8016486 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8016422:	2b0a      	cmp	r3, #10
 8016424:	d02f      	beq.n	8016486 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801642a:	2b01      	cmp	r3, #1
 801642c:	d02b      	beq.n	8016486 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016432:	2b00      	cmp	r3, #0
 8016434:	d007      	beq.n	8016446 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801643a:	4618      	mov	r0, r3
 801643c:	f7fe f89e 	bl	801457c <pbuf_free>
      pcb->refused_data = NULL;
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	2200      	movs	r2, #0
 8016444:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801644a:	2b00      	cmp	r3, #0
 801644c:	d002      	beq.n	8016454 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801644e:	6878      	ldr	r0, [r7, #4]
 8016450:	f000 f986 	bl	8016760 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801645a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016460:	4618      	mov	r0, r3
 8016462:	f7ff fcf9 	bl	8015e58 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801646a:	4618      	mov	r0, r3
 801646c:	f7ff fcf4 	bl	8015e58 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	2200      	movs	r2, #0
 8016474:	66da      	str	r2, [r3, #108]	; 0x6c
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	2200      	movs	r2, #0
 8016482:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8016486:	3708      	adds	r7, #8
 8016488:	46bd      	mov	sp, r7
 801648a:	bd80      	pop	{r7, pc}
 801648c:	08020ba0 	.word	0x08020ba0
 8016490:	080211ec 	.word	0x080211ec
 8016494:	08020be4 	.word	0x08020be4

08016498 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b084      	sub	sp, #16
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
 80164a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80164a2:	683b      	ldr	r3, [r7, #0]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d106      	bne.n	80164b6 <tcp_pcb_remove+0x1e>
 80164a8:	4b3e      	ldr	r3, [pc, #248]	; (80165a4 <tcp_pcb_remove+0x10c>)
 80164aa:	f640 0283 	movw	r2, #2179	; 0x883
 80164ae:	493e      	ldr	r1, [pc, #248]	; (80165a8 <tcp_pcb_remove+0x110>)
 80164b0:	483e      	ldr	r0, [pc, #248]	; (80165ac <tcp_pcb_remove+0x114>)
 80164b2:	f007 fec7 	bl	801e244 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d106      	bne.n	80164ca <tcp_pcb_remove+0x32>
 80164bc:	4b39      	ldr	r3, [pc, #228]	; (80165a4 <tcp_pcb_remove+0x10c>)
 80164be:	f640 0284 	movw	r2, #2180	; 0x884
 80164c2:	493b      	ldr	r1, [pc, #236]	; (80165b0 <tcp_pcb_remove+0x118>)
 80164c4:	4839      	ldr	r0, [pc, #228]	; (80165ac <tcp_pcb_remove+0x114>)
 80164c6:	f007 febd 	bl	801e244 <iprintf>

  TCP_RMV(pcblist, pcb);
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	683a      	ldr	r2, [r7, #0]
 80164d0:	429a      	cmp	r2, r3
 80164d2:	d105      	bne.n	80164e0 <tcp_pcb_remove+0x48>
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	68da      	ldr	r2, [r3, #12]
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	601a      	str	r2, [r3, #0]
 80164de:	e013      	b.n	8016508 <tcp_pcb_remove+0x70>
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	60fb      	str	r3, [r7, #12]
 80164e6:	e00c      	b.n	8016502 <tcp_pcb_remove+0x6a>
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	68db      	ldr	r3, [r3, #12]
 80164ec:	683a      	ldr	r2, [r7, #0]
 80164ee:	429a      	cmp	r2, r3
 80164f0:	d104      	bne.n	80164fc <tcp_pcb_remove+0x64>
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	68da      	ldr	r2, [r3, #12]
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	60da      	str	r2, [r3, #12]
 80164fa:	e005      	b.n	8016508 <tcp_pcb_remove+0x70>
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	68db      	ldr	r3, [r3, #12]
 8016500:	60fb      	str	r3, [r7, #12]
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	2b00      	cmp	r3, #0
 8016506:	d1ef      	bne.n	80164e8 <tcp_pcb_remove+0x50>
 8016508:	683b      	ldr	r3, [r7, #0]
 801650a:	2200      	movs	r2, #0
 801650c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801650e:	6838      	ldr	r0, [r7, #0]
 8016510:	f7ff ff72 	bl	80163f8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016514:	683b      	ldr	r3, [r7, #0]
 8016516:	7d1b      	ldrb	r3, [r3, #20]
 8016518:	2b0a      	cmp	r3, #10
 801651a:	d013      	beq.n	8016544 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801651c:	683b      	ldr	r3, [r7, #0]
 801651e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8016520:	2b01      	cmp	r3, #1
 8016522:	d00f      	beq.n	8016544 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016524:	683b      	ldr	r3, [r7, #0]
 8016526:	8b5b      	ldrh	r3, [r3, #26]
 8016528:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801652c:	2b00      	cmp	r3, #0
 801652e:	d009      	beq.n	8016544 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016530:	683b      	ldr	r3, [r7, #0]
 8016532:	8b5b      	ldrh	r3, [r3, #26]
 8016534:	f043 0302 	orr.w	r3, r3, #2
 8016538:	b29a      	uxth	r2, r3
 801653a:	683b      	ldr	r3, [r7, #0]
 801653c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801653e:	6838      	ldr	r0, [r7, #0]
 8016540:	f003 fbda 	bl	8019cf8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016544:	683b      	ldr	r3, [r7, #0]
 8016546:	7d1b      	ldrb	r3, [r3, #20]
 8016548:	2b01      	cmp	r3, #1
 801654a:	d020      	beq.n	801658e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801654c:	683b      	ldr	r3, [r7, #0]
 801654e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016550:	2b00      	cmp	r3, #0
 8016552:	d006      	beq.n	8016562 <tcp_pcb_remove+0xca>
 8016554:	4b13      	ldr	r3, [pc, #76]	; (80165a4 <tcp_pcb_remove+0x10c>)
 8016556:	f640 0293 	movw	r2, #2195	; 0x893
 801655a:	4916      	ldr	r1, [pc, #88]	; (80165b4 <tcp_pcb_remove+0x11c>)
 801655c:	4813      	ldr	r0, [pc, #76]	; (80165ac <tcp_pcb_remove+0x114>)
 801655e:	f007 fe71 	bl	801e244 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8016562:	683b      	ldr	r3, [r7, #0]
 8016564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016566:	2b00      	cmp	r3, #0
 8016568:	d006      	beq.n	8016578 <tcp_pcb_remove+0xe0>
 801656a:	4b0e      	ldr	r3, [pc, #56]	; (80165a4 <tcp_pcb_remove+0x10c>)
 801656c:	f640 0294 	movw	r2, #2196	; 0x894
 8016570:	4911      	ldr	r1, [pc, #68]	; (80165b8 <tcp_pcb_remove+0x120>)
 8016572:	480e      	ldr	r0, [pc, #56]	; (80165ac <tcp_pcb_remove+0x114>)
 8016574:	f007 fe66 	bl	801e244 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8016578:	683b      	ldr	r3, [r7, #0]
 801657a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801657c:	2b00      	cmp	r3, #0
 801657e:	d006      	beq.n	801658e <tcp_pcb_remove+0xf6>
 8016580:	4b08      	ldr	r3, [pc, #32]	; (80165a4 <tcp_pcb_remove+0x10c>)
 8016582:	f640 0296 	movw	r2, #2198	; 0x896
 8016586:	490d      	ldr	r1, [pc, #52]	; (80165bc <tcp_pcb_remove+0x124>)
 8016588:	4808      	ldr	r0, [pc, #32]	; (80165ac <tcp_pcb_remove+0x114>)
 801658a:	f007 fe5b 	bl	801e244 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801658e:	683b      	ldr	r3, [r7, #0]
 8016590:	2200      	movs	r2, #0
 8016592:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016594:	683b      	ldr	r3, [r7, #0]
 8016596:	2200      	movs	r2, #0
 8016598:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801659a:	bf00      	nop
 801659c:	3710      	adds	r7, #16
 801659e:	46bd      	mov	sp, r7
 80165a0:	bd80      	pop	{r7, pc}
 80165a2:	bf00      	nop
 80165a4:	08020ba0 	.word	0x08020ba0
 80165a8:	08021208 	.word	0x08021208
 80165ac:	08020be4 	.word	0x08020be4
 80165b0:	08021224 	.word	0x08021224
 80165b4:	08021244 	.word	0x08021244
 80165b8:	0802125c 	.word	0x0802125c
 80165bc:	08021278 	.word	0x08021278

080165c0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b082      	sub	sp, #8
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d106      	bne.n	80165dc <tcp_next_iss+0x1c>
 80165ce:	4b0a      	ldr	r3, [pc, #40]	; (80165f8 <tcp_next_iss+0x38>)
 80165d0:	f640 02af 	movw	r2, #2223	; 0x8af
 80165d4:	4909      	ldr	r1, [pc, #36]	; (80165fc <tcp_next_iss+0x3c>)
 80165d6:	480a      	ldr	r0, [pc, #40]	; (8016600 <tcp_next_iss+0x40>)
 80165d8:	f007 fe34 	bl	801e244 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80165dc:	4b09      	ldr	r3, [pc, #36]	; (8016604 <tcp_next_iss+0x44>)
 80165de:	681a      	ldr	r2, [r3, #0]
 80165e0:	4b09      	ldr	r3, [pc, #36]	; (8016608 <tcp_next_iss+0x48>)
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	4413      	add	r3, r2
 80165e6:	4a07      	ldr	r2, [pc, #28]	; (8016604 <tcp_next_iss+0x44>)
 80165e8:	6013      	str	r3, [r2, #0]
  return iss;
 80165ea:	4b06      	ldr	r3, [pc, #24]	; (8016604 <tcp_next_iss+0x44>)
 80165ec:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80165ee:	4618      	mov	r0, r3
 80165f0:	3708      	adds	r7, #8
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}
 80165f6:	bf00      	nop
 80165f8:	08020ba0 	.word	0x08020ba0
 80165fc:	08021290 	.word	0x08021290
 8016600:	08020be4 	.word	0x08020be4
 8016604:	2400002c 	.word	0x2400002c
 8016608:	2405e9ac 	.word	0x2405e9ac

0801660c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b086      	sub	sp, #24
 8016610:	af00      	add	r7, sp, #0
 8016612:	4603      	mov	r3, r0
 8016614:	60b9      	str	r1, [r7, #8]
 8016616:	607a      	str	r2, [r7, #4]
 8016618:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d106      	bne.n	801662e <tcp_eff_send_mss_netif+0x22>
 8016620:	4b14      	ldr	r3, [pc, #80]	; (8016674 <tcp_eff_send_mss_netif+0x68>)
 8016622:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8016626:	4914      	ldr	r1, [pc, #80]	; (8016678 <tcp_eff_send_mss_netif+0x6c>)
 8016628:	4814      	ldr	r0, [pc, #80]	; (801667c <tcp_eff_send_mss_netif+0x70>)
 801662a:	f007 fe0b 	bl	801e244 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801662e:	68bb      	ldr	r3, [r7, #8]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d101      	bne.n	8016638 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016634:	89fb      	ldrh	r3, [r7, #14]
 8016636:	e019      	b.n	801666c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801663c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801663e:	8afb      	ldrh	r3, [r7, #22]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d012      	beq.n	801666a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016644:	2328      	movs	r3, #40	; 0x28
 8016646:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016648:	8afa      	ldrh	r2, [r7, #22]
 801664a:	8abb      	ldrh	r3, [r7, #20]
 801664c:	429a      	cmp	r2, r3
 801664e:	d904      	bls.n	801665a <tcp_eff_send_mss_netif+0x4e>
 8016650:	8afa      	ldrh	r2, [r7, #22]
 8016652:	8abb      	ldrh	r3, [r7, #20]
 8016654:	1ad3      	subs	r3, r2, r3
 8016656:	b29b      	uxth	r3, r3
 8016658:	e000      	b.n	801665c <tcp_eff_send_mss_netif+0x50>
 801665a:	2300      	movs	r3, #0
 801665c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801665e:	8a7a      	ldrh	r2, [r7, #18]
 8016660:	89fb      	ldrh	r3, [r7, #14]
 8016662:	4293      	cmp	r3, r2
 8016664:	bf28      	it	cs
 8016666:	4613      	movcs	r3, r2
 8016668:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801666a:	89fb      	ldrh	r3, [r7, #14]
}
 801666c:	4618      	mov	r0, r3
 801666e:	3718      	adds	r7, #24
 8016670:	46bd      	mov	sp, r7
 8016672:	bd80      	pop	{r7, pc}
 8016674:	08020ba0 	.word	0x08020ba0
 8016678:	080212ac 	.word	0x080212ac
 801667c:	08020be4 	.word	0x08020be4

08016680 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b084      	sub	sp, #16
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
 8016688:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801668a:	683b      	ldr	r3, [r7, #0]
 801668c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d119      	bne.n	80166c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016694:	4b10      	ldr	r3, [pc, #64]	; (80166d8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8016696:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801669a:	4910      	ldr	r1, [pc, #64]	; (80166dc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801669c:	4810      	ldr	r0, [pc, #64]	; (80166e0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801669e:	f007 fdd1 	bl	801e244 <iprintf>

  while (pcb != NULL) {
 80166a2:	e011      	b.n	80166c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	681a      	ldr	r2, [r3, #0]
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	429a      	cmp	r2, r3
 80166ae:	d108      	bne.n	80166c2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	68db      	ldr	r3, [r3, #12]
 80166b4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80166b6:	68f8      	ldr	r0, [r7, #12]
 80166b8:	f7fe fd50 	bl	801515c <tcp_abort>
      pcb = next;
 80166bc:	68bb      	ldr	r3, [r7, #8]
 80166be:	60fb      	str	r3, [r7, #12]
 80166c0:	e002      	b.n	80166c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	68db      	ldr	r3, [r3, #12]
 80166c6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d1ea      	bne.n	80166a4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80166ce:	bf00      	nop
 80166d0:	bf00      	nop
 80166d2:	3710      	adds	r7, #16
 80166d4:	46bd      	mov	sp, r7
 80166d6:	bd80      	pop	{r7, pc}
 80166d8:	08020ba0 	.word	0x08020ba0
 80166dc:	080212d4 	.word	0x080212d4
 80166e0:	08020be4 	.word	0x08020be4

080166e4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	b084      	sub	sp, #16
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	6078      	str	r0, [r7, #4]
 80166ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d02a      	beq.n	801674a <tcp_netif_ip_addr_changed+0x66>
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d026      	beq.n	801674a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80166fc:	4b15      	ldr	r3, [pc, #84]	; (8016754 <tcp_netif_ip_addr_changed+0x70>)
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	4619      	mov	r1, r3
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	f7ff ffbc 	bl	8016680 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8016708:	4b13      	ldr	r3, [pc, #76]	; (8016758 <tcp_netif_ip_addr_changed+0x74>)
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	4619      	mov	r1, r3
 801670e:	6878      	ldr	r0, [r7, #4]
 8016710:	f7ff ffb6 	bl	8016680 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016714:	683b      	ldr	r3, [r7, #0]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d017      	beq.n	801674a <tcp_netif_ip_addr_changed+0x66>
 801671a:	683b      	ldr	r3, [r7, #0]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d013      	beq.n	801674a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016722:	4b0e      	ldr	r3, [pc, #56]	; (801675c <tcp_netif_ip_addr_changed+0x78>)
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	60fb      	str	r3, [r7, #12]
 8016728:	e00c      	b.n	8016744 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	681a      	ldr	r2, [r3, #0]
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	429a      	cmp	r2, r3
 8016734:	d103      	bne.n	801673e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8016736:	683b      	ldr	r3, [r7, #0]
 8016738:	681a      	ldr	r2, [r3, #0]
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	68db      	ldr	r3, [r3, #12]
 8016742:	60fb      	str	r3, [r7, #12]
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d1ef      	bne.n	801672a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801674a:	bf00      	nop
 801674c:	3710      	adds	r7, #16
 801674e:	46bd      	mov	sp, r7
 8016750:	bd80      	pop	{r7, pc}
 8016752:	bf00      	nop
 8016754:	2405e9b8 	.word	0x2405e9b8
 8016758:	2405e9b0 	.word	0x2405e9b0
 801675c:	2405e9b4 	.word	0x2405e9b4

08016760 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016760:	b580      	push	{r7, lr}
 8016762:	b082      	sub	sp, #8
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801676c:	2b00      	cmp	r3, #0
 801676e:	d007      	beq.n	8016780 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016774:	4618      	mov	r0, r3
 8016776:	f7ff fb6f 	bl	8015e58 <tcp_segs_free>
    pcb->ooseq = NULL;
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	2200      	movs	r2, #0
 801677e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016780:	bf00      	nop
 8016782:	3708      	adds	r7, #8
 8016784:	46bd      	mov	sp, r7
 8016786:	bd80      	pop	{r7, pc}

08016788 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016788:	b590      	push	{r4, r7, lr}
 801678a:	b08d      	sub	sp, #52	; 0x34
 801678c:	af04      	add	r7, sp, #16
 801678e:	6078      	str	r0, [r7, #4]
 8016790:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d105      	bne.n	80167a4 <tcp_input+0x1c>
 8016798:	4b8b      	ldr	r3, [pc, #556]	; (80169c8 <tcp_input+0x240>)
 801679a:	2283      	movs	r2, #131	; 0x83
 801679c:	498b      	ldr	r1, [pc, #556]	; (80169cc <tcp_input+0x244>)
 801679e:	488c      	ldr	r0, [pc, #560]	; (80169d0 <tcp_input+0x248>)
 80167a0:	f007 fd50 	bl	801e244 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	685b      	ldr	r3, [r3, #4]
 80167a8:	4a8a      	ldr	r2, [pc, #552]	; (80169d4 <tcp_input+0x24c>)
 80167aa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	895b      	ldrh	r3, [r3, #10]
 80167b0:	2b13      	cmp	r3, #19
 80167b2:	f240 83e3 	bls.w	8016f7c <tcp_input+0x7f4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80167b6:	4b88      	ldr	r3, [pc, #544]	; (80169d8 <tcp_input+0x250>)
 80167b8:	695b      	ldr	r3, [r3, #20]
 80167ba:	4a87      	ldr	r2, [pc, #540]	; (80169d8 <tcp_input+0x250>)
 80167bc:	6812      	ldr	r2, [r2, #0]
 80167be:	4611      	mov	r1, r2
 80167c0:	4618      	mov	r0, r3
 80167c2:	f006 fa41 	bl	801cc48 <ip4_addr_isbroadcast_u32>
 80167c6:	4603      	mov	r3, r0
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	f040 83d9 	bne.w	8016f80 <tcp_input+0x7f8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80167ce:	4b82      	ldr	r3, [pc, #520]	; (80169d8 <tcp_input+0x250>)
 80167d0:	695b      	ldr	r3, [r3, #20]
 80167d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80167d6:	2be0      	cmp	r3, #224	; 0xe0
 80167d8:	f000 83d2 	beq.w	8016f80 <tcp_input+0x7f8>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	891a      	ldrh	r2, [r3, #8]
 80167e0:	4b7e      	ldr	r3, [pc, #504]	; (80169dc <tcp_input+0x254>)
 80167e2:	9300      	str	r3, [sp, #0]
 80167e4:	4b7e      	ldr	r3, [pc, #504]	; (80169e0 <tcp_input+0x258>)
 80167e6:	2106      	movs	r1, #6
 80167e8:	6878      	ldr	r0, [r7, #4]
 80167ea:	f7fc fa7f 	bl	8012cec <ip_chksum_pseudo>
 80167ee:	4603      	mov	r3, r0
 80167f0:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 80167f2:	8a3b      	ldrh	r3, [r7, #16]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	f040 83c5 	bne.w	8016f84 <tcp_input+0x7fc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80167fa:	4b76      	ldr	r3, [pc, #472]	; (80169d4 <tcp_input+0x24c>)
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	899b      	ldrh	r3, [r3, #12]
 8016800:	b29b      	uxth	r3, r3
 8016802:	4618      	mov	r0, r3
 8016804:	f7fc f940 	bl	8012a88 <lwip_htons>
 8016808:	4603      	mov	r3, r0
 801680a:	0b1b      	lsrs	r3, r3, #12
 801680c:	b29b      	uxth	r3, r3
 801680e:	b2db      	uxtb	r3, r3
 8016810:	009b      	lsls	r3, r3, #2
 8016812:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8016814:	7bfb      	ldrb	r3, [r7, #15]
 8016816:	2b13      	cmp	r3, #19
 8016818:	f240 83b6 	bls.w	8016f88 <tcp_input+0x800>
 801681c:	7bfb      	ldrb	r3, [r7, #15]
 801681e:	b29a      	uxth	r2, r3
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	891b      	ldrh	r3, [r3, #8]
 8016824:	429a      	cmp	r2, r3
 8016826:	f200 83af 	bhi.w	8016f88 <tcp_input+0x800>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801682a:	7bfb      	ldrb	r3, [r7, #15]
 801682c:	b29b      	uxth	r3, r3
 801682e:	3b14      	subs	r3, #20
 8016830:	b29a      	uxth	r2, r3
 8016832:	4b6c      	ldr	r3, [pc, #432]	; (80169e4 <tcp_input+0x25c>)
 8016834:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8016836:	4b6c      	ldr	r3, [pc, #432]	; (80169e8 <tcp_input+0x260>)
 8016838:	2200      	movs	r2, #0
 801683a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	895a      	ldrh	r2, [r3, #10]
 8016840:	7bfb      	ldrb	r3, [r7, #15]
 8016842:	b29b      	uxth	r3, r3
 8016844:	429a      	cmp	r2, r3
 8016846:	d309      	bcc.n	801685c <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8016848:	4b66      	ldr	r3, [pc, #408]	; (80169e4 <tcp_input+0x25c>)
 801684a:	881a      	ldrh	r2, [r3, #0]
 801684c:	4b67      	ldr	r3, [pc, #412]	; (80169ec <tcp_input+0x264>)
 801684e:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016850:	7bfb      	ldrb	r3, [r7, #15]
 8016852:	4619      	mov	r1, r3
 8016854:	6878      	ldr	r0, [r7, #4]
 8016856:	f7fd fe0b 	bl	8014470 <pbuf_remove_header>
 801685a:	e04e      	b.n	80168fa <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d105      	bne.n	8016870 <tcp_input+0xe8>
 8016864:	4b58      	ldr	r3, [pc, #352]	; (80169c8 <tcp_input+0x240>)
 8016866:	22c2      	movs	r2, #194	; 0xc2
 8016868:	4961      	ldr	r1, [pc, #388]	; (80169f0 <tcp_input+0x268>)
 801686a:	4859      	ldr	r0, [pc, #356]	; (80169d0 <tcp_input+0x248>)
 801686c:	f007 fcea 	bl	801e244 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016870:	2114      	movs	r1, #20
 8016872:	6878      	ldr	r0, [r7, #4]
 8016874:	f7fd fdfc 	bl	8014470 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	895a      	ldrh	r2, [r3, #10]
 801687c:	4b5b      	ldr	r3, [pc, #364]	; (80169ec <tcp_input+0x264>)
 801687e:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016880:	4b58      	ldr	r3, [pc, #352]	; (80169e4 <tcp_input+0x25c>)
 8016882:	881a      	ldrh	r2, [r3, #0]
 8016884:	4b59      	ldr	r3, [pc, #356]	; (80169ec <tcp_input+0x264>)
 8016886:	881b      	ldrh	r3, [r3, #0]
 8016888:	1ad3      	subs	r3, r2, r3
 801688a:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801688c:	4b57      	ldr	r3, [pc, #348]	; (80169ec <tcp_input+0x264>)
 801688e:	881b      	ldrh	r3, [r3, #0]
 8016890:	4619      	mov	r1, r3
 8016892:	6878      	ldr	r0, [r7, #4]
 8016894:	f7fd fdec 	bl	8014470 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	895b      	ldrh	r3, [r3, #10]
 801689e:	89ba      	ldrh	r2, [r7, #12]
 80168a0:	429a      	cmp	r2, r3
 80168a2:	f200 8373 	bhi.w	8016f8c <tcp_input+0x804>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	685b      	ldr	r3, [r3, #4]
 80168ac:	4a4e      	ldr	r2, [pc, #312]	; (80169e8 <tcp_input+0x260>)
 80168ae:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	89ba      	ldrh	r2, [r7, #12]
 80168b6:	4611      	mov	r1, r2
 80168b8:	4618      	mov	r0, r3
 80168ba:	f7fd fdd9 	bl	8014470 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	891a      	ldrh	r2, [r3, #8]
 80168c2:	89bb      	ldrh	r3, [r7, #12]
 80168c4:	1ad3      	subs	r3, r2, r3
 80168c6:	b29a      	uxth	r2, r3
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	895b      	ldrh	r3, [r3, #10]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d005      	beq.n	80168e0 <tcp_input+0x158>
 80168d4:	4b3c      	ldr	r3, [pc, #240]	; (80169c8 <tcp_input+0x240>)
 80168d6:	22df      	movs	r2, #223	; 0xdf
 80168d8:	4946      	ldr	r1, [pc, #280]	; (80169f4 <tcp_input+0x26c>)
 80168da:	483d      	ldr	r0, [pc, #244]	; (80169d0 <tcp_input+0x248>)
 80168dc:	f007 fcb2 	bl	801e244 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	891a      	ldrh	r2, [r3, #8]
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	891b      	ldrh	r3, [r3, #8]
 80168ea:	429a      	cmp	r2, r3
 80168ec:	d005      	beq.n	80168fa <tcp_input+0x172>
 80168ee:	4b36      	ldr	r3, [pc, #216]	; (80169c8 <tcp_input+0x240>)
 80168f0:	22e0      	movs	r2, #224	; 0xe0
 80168f2:	4941      	ldr	r1, [pc, #260]	; (80169f8 <tcp_input+0x270>)
 80168f4:	4836      	ldr	r0, [pc, #216]	; (80169d0 <tcp_input+0x248>)
 80168f6:	f007 fca5 	bl	801e244 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80168fa:	4b36      	ldr	r3, [pc, #216]	; (80169d4 <tcp_input+0x24c>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	881b      	ldrh	r3, [r3, #0]
 8016900:	b29b      	uxth	r3, r3
 8016902:	4a34      	ldr	r2, [pc, #208]	; (80169d4 <tcp_input+0x24c>)
 8016904:	6814      	ldr	r4, [r2, #0]
 8016906:	4618      	mov	r0, r3
 8016908:	f7fc f8be 	bl	8012a88 <lwip_htons>
 801690c:	4603      	mov	r3, r0
 801690e:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8016910:	4b30      	ldr	r3, [pc, #192]	; (80169d4 <tcp_input+0x24c>)
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	885b      	ldrh	r3, [r3, #2]
 8016916:	b29b      	uxth	r3, r3
 8016918:	4a2e      	ldr	r2, [pc, #184]	; (80169d4 <tcp_input+0x24c>)
 801691a:	6814      	ldr	r4, [r2, #0]
 801691c:	4618      	mov	r0, r3
 801691e:	f7fc f8b3 	bl	8012a88 <lwip_htons>
 8016922:	4603      	mov	r3, r0
 8016924:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8016926:	4b2b      	ldr	r3, [pc, #172]	; (80169d4 <tcp_input+0x24c>)
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	685b      	ldr	r3, [r3, #4]
 801692c:	4a29      	ldr	r2, [pc, #164]	; (80169d4 <tcp_input+0x24c>)
 801692e:	6814      	ldr	r4, [r2, #0]
 8016930:	4618      	mov	r0, r3
 8016932:	f7fc f8be 	bl	8012ab2 <lwip_htonl>
 8016936:	4603      	mov	r3, r0
 8016938:	6063      	str	r3, [r4, #4]
 801693a:	6863      	ldr	r3, [r4, #4]
 801693c:	4a2f      	ldr	r2, [pc, #188]	; (80169fc <tcp_input+0x274>)
 801693e:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016940:	4b24      	ldr	r3, [pc, #144]	; (80169d4 <tcp_input+0x24c>)
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	689b      	ldr	r3, [r3, #8]
 8016946:	4a23      	ldr	r2, [pc, #140]	; (80169d4 <tcp_input+0x24c>)
 8016948:	6814      	ldr	r4, [r2, #0]
 801694a:	4618      	mov	r0, r3
 801694c:	f7fc f8b1 	bl	8012ab2 <lwip_htonl>
 8016950:	4603      	mov	r3, r0
 8016952:	60a3      	str	r3, [r4, #8]
 8016954:	68a3      	ldr	r3, [r4, #8]
 8016956:	4a2a      	ldr	r2, [pc, #168]	; (8016a00 <tcp_input+0x278>)
 8016958:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801695a:	4b1e      	ldr	r3, [pc, #120]	; (80169d4 <tcp_input+0x24c>)
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	89db      	ldrh	r3, [r3, #14]
 8016960:	b29b      	uxth	r3, r3
 8016962:	4a1c      	ldr	r2, [pc, #112]	; (80169d4 <tcp_input+0x24c>)
 8016964:	6814      	ldr	r4, [r2, #0]
 8016966:	4618      	mov	r0, r3
 8016968:	f7fc f88e 	bl	8012a88 <lwip_htons>
 801696c:	4603      	mov	r3, r0
 801696e:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016970:	4b18      	ldr	r3, [pc, #96]	; (80169d4 <tcp_input+0x24c>)
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	899b      	ldrh	r3, [r3, #12]
 8016976:	b29b      	uxth	r3, r3
 8016978:	4618      	mov	r0, r3
 801697a:	f7fc f885 	bl	8012a88 <lwip_htons>
 801697e:	4603      	mov	r3, r0
 8016980:	b2db      	uxtb	r3, r3
 8016982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016986:	b2da      	uxtb	r2, r3
 8016988:	4b1e      	ldr	r3, [pc, #120]	; (8016a04 <tcp_input+0x27c>)
 801698a:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	891a      	ldrh	r2, [r3, #8]
 8016990:	4b1d      	ldr	r3, [pc, #116]	; (8016a08 <tcp_input+0x280>)
 8016992:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016994:	4b1b      	ldr	r3, [pc, #108]	; (8016a04 <tcp_input+0x27c>)
 8016996:	781b      	ldrb	r3, [r3, #0]
 8016998:	f003 0303 	and.w	r3, r3, #3
 801699c:	2b00      	cmp	r3, #0
 801699e:	d00c      	beq.n	80169ba <tcp_input+0x232>
    tcplen++;
 80169a0:	4b19      	ldr	r3, [pc, #100]	; (8016a08 <tcp_input+0x280>)
 80169a2:	881b      	ldrh	r3, [r3, #0]
 80169a4:	3301      	adds	r3, #1
 80169a6:	b29a      	uxth	r2, r3
 80169a8:	4b17      	ldr	r3, [pc, #92]	; (8016a08 <tcp_input+0x280>)
 80169aa:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	891a      	ldrh	r2, [r3, #8]
 80169b0:	4b15      	ldr	r3, [pc, #84]	; (8016a08 <tcp_input+0x280>)
 80169b2:	881b      	ldrh	r3, [r3, #0]
 80169b4:	429a      	cmp	r2, r3
 80169b6:	f200 82eb 	bhi.w	8016f90 <tcp_input+0x808>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80169ba:	2300      	movs	r3, #0
 80169bc:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80169be:	4b13      	ldr	r3, [pc, #76]	; (8016a0c <tcp_input+0x284>)
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	61fb      	str	r3, [r7, #28]
 80169c4:	e09b      	b.n	8016afe <tcp_input+0x376>
 80169c6:	bf00      	nop
 80169c8:	08021308 	.word	0x08021308
 80169cc:	0802133c 	.word	0x0802133c
 80169d0:	08021354 	.word	0x08021354
 80169d4:	2405e9d4 	.word	0x2405e9d4
 80169d8:	24015f3c 	.word	0x24015f3c
 80169dc:	24015f50 	.word	0x24015f50
 80169e0:	24015f4c 	.word	0x24015f4c
 80169e4:	2405e9d8 	.word	0x2405e9d8
 80169e8:	2405e9dc 	.word	0x2405e9dc
 80169ec:	2405e9da 	.word	0x2405e9da
 80169f0:	0802137c 	.word	0x0802137c
 80169f4:	0802138c 	.word	0x0802138c
 80169f8:	08021398 	.word	0x08021398
 80169fc:	2405e9e4 	.word	0x2405e9e4
 8016a00:	2405e9e8 	.word	0x2405e9e8
 8016a04:	2405e9f0 	.word	0x2405e9f0
 8016a08:	2405e9ee 	.word	0x2405e9ee
 8016a0c:	2405e9b8 	.word	0x2405e9b8
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016a10:	69fb      	ldr	r3, [r7, #28]
 8016a12:	7d1b      	ldrb	r3, [r3, #20]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d105      	bne.n	8016a24 <tcp_input+0x29c>
 8016a18:	4b88      	ldr	r3, [pc, #544]	; (8016c3c <tcp_input+0x4b4>)
 8016a1a:	22fb      	movs	r2, #251	; 0xfb
 8016a1c:	4988      	ldr	r1, [pc, #544]	; (8016c40 <tcp_input+0x4b8>)
 8016a1e:	4889      	ldr	r0, [pc, #548]	; (8016c44 <tcp_input+0x4bc>)
 8016a20:	f007 fc10 	bl	801e244 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016a24:	69fb      	ldr	r3, [r7, #28]
 8016a26:	7d1b      	ldrb	r3, [r3, #20]
 8016a28:	2b0a      	cmp	r3, #10
 8016a2a:	d105      	bne.n	8016a38 <tcp_input+0x2b0>
 8016a2c:	4b83      	ldr	r3, [pc, #524]	; (8016c3c <tcp_input+0x4b4>)
 8016a2e:	22fc      	movs	r2, #252	; 0xfc
 8016a30:	4985      	ldr	r1, [pc, #532]	; (8016c48 <tcp_input+0x4c0>)
 8016a32:	4884      	ldr	r0, [pc, #528]	; (8016c44 <tcp_input+0x4bc>)
 8016a34:	f007 fc06 	bl	801e244 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8016a38:	69fb      	ldr	r3, [r7, #28]
 8016a3a:	7d1b      	ldrb	r3, [r3, #20]
 8016a3c:	2b01      	cmp	r3, #1
 8016a3e:	d105      	bne.n	8016a4c <tcp_input+0x2c4>
 8016a40:	4b7e      	ldr	r3, [pc, #504]	; (8016c3c <tcp_input+0x4b4>)
 8016a42:	22fd      	movs	r2, #253	; 0xfd
 8016a44:	4981      	ldr	r1, [pc, #516]	; (8016c4c <tcp_input+0x4c4>)
 8016a46:	487f      	ldr	r0, [pc, #508]	; (8016c44 <tcp_input+0x4bc>)
 8016a48:	f007 fbfc 	bl	801e244 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016a4c:	69fb      	ldr	r3, [r7, #28]
 8016a4e:	7a1b      	ldrb	r3, [r3, #8]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d00c      	beq.n	8016a6e <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016a54:	69fb      	ldr	r3, [r7, #28]
 8016a56:	7a1a      	ldrb	r2, [r3, #8]
 8016a58:	4b7d      	ldr	r3, [pc, #500]	; (8016c50 <tcp_input+0x4c8>)
 8016a5a:	685b      	ldr	r3, [r3, #4]
 8016a5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016a60:	3301      	adds	r3, #1
 8016a62:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016a64:	429a      	cmp	r2, r3
 8016a66:	d002      	beq.n	8016a6e <tcp_input+0x2e6>
      prev = pcb;
 8016a68:	69fb      	ldr	r3, [r7, #28]
 8016a6a:	61bb      	str	r3, [r7, #24]
      continue;
 8016a6c:	e044      	b.n	8016af8 <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 8016a6e:	69fb      	ldr	r3, [r7, #28]
 8016a70:	8b1a      	ldrh	r2, [r3, #24]
 8016a72:	4b78      	ldr	r3, [pc, #480]	; (8016c54 <tcp_input+0x4cc>)
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	881b      	ldrh	r3, [r3, #0]
 8016a78:	b29b      	uxth	r3, r3
 8016a7a:	429a      	cmp	r2, r3
 8016a7c:	d13a      	bne.n	8016af4 <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 8016a7e:	69fb      	ldr	r3, [r7, #28]
 8016a80:	8ada      	ldrh	r2, [r3, #22]
 8016a82:	4b74      	ldr	r3, [pc, #464]	; (8016c54 <tcp_input+0x4cc>)
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	885b      	ldrh	r3, [r3, #2]
 8016a88:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016a8a:	429a      	cmp	r2, r3
 8016a8c:	d132      	bne.n	8016af4 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016a8e:	69fb      	ldr	r3, [r7, #28]
 8016a90:	685a      	ldr	r2, [r3, #4]
 8016a92:	4b6f      	ldr	r3, [pc, #444]	; (8016c50 <tcp_input+0x4c8>)
 8016a94:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016a96:	429a      	cmp	r2, r3
 8016a98:	d12c      	bne.n	8016af4 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016a9a:	69fb      	ldr	r3, [r7, #28]
 8016a9c:	681a      	ldr	r2, [r3, #0]
 8016a9e:	4b6c      	ldr	r3, [pc, #432]	; (8016c50 <tcp_input+0x4c8>)
 8016aa0:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016aa2:	429a      	cmp	r2, r3
 8016aa4:	d126      	bne.n	8016af4 <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016aa6:	69fb      	ldr	r3, [r7, #28]
 8016aa8:	68db      	ldr	r3, [r3, #12]
 8016aaa:	69fa      	ldr	r2, [r7, #28]
 8016aac:	429a      	cmp	r2, r3
 8016aae:	d106      	bne.n	8016abe <tcp_input+0x336>
 8016ab0:	4b62      	ldr	r3, [pc, #392]	; (8016c3c <tcp_input+0x4b4>)
 8016ab2:	f240 120d 	movw	r2, #269	; 0x10d
 8016ab6:	4968      	ldr	r1, [pc, #416]	; (8016c58 <tcp_input+0x4d0>)
 8016ab8:	4862      	ldr	r0, [pc, #392]	; (8016c44 <tcp_input+0x4bc>)
 8016aba:	f007 fbc3 	bl	801e244 <iprintf>
      if (prev != NULL) {
 8016abe:	69bb      	ldr	r3, [r7, #24]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d00a      	beq.n	8016ada <tcp_input+0x352>
        prev->next = pcb->next;
 8016ac4:	69fb      	ldr	r3, [r7, #28]
 8016ac6:	68da      	ldr	r2, [r3, #12]
 8016ac8:	69bb      	ldr	r3, [r7, #24]
 8016aca:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016acc:	4b63      	ldr	r3, [pc, #396]	; (8016c5c <tcp_input+0x4d4>)
 8016ace:	681a      	ldr	r2, [r3, #0]
 8016ad0:	69fb      	ldr	r3, [r7, #28]
 8016ad2:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8016ad4:	4a61      	ldr	r2, [pc, #388]	; (8016c5c <tcp_input+0x4d4>)
 8016ad6:	69fb      	ldr	r3, [r7, #28]
 8016ad8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016ada:	69fb      	ldr	r3, [r7, #28]
 8016adc:	68db      	ldr	r3, [r3, #12]
 8016ade:	69fa      	ldr	r2, [r7, #28]
 8016ae0:	429a      	cmp	r2, r3
 8016ae2:	d110      	bne.n	8016b06 <tcp_input+0x37e>
 8016ae4:	4b55      	ldr	r3, [pc, #340]	; (8016c3c <tcp_input+0x4b4>)
 8016ae6:	f240 1215 	movw	r2, #277	; 0x115
 8016aea:	495d      	ldr	r1, [pc, #372]	; (8016c60 <tcp_input+0x4d8>)
 8016aec:	4855      	ldr	r0, [pc, #340]	; (8016c44 <tcp_input+0x4bc>)
 8016aee:	f007 fba9 	bl	801e244 <iprintf>
      break;
 8016af2:	e008      	b.n	8016b06 <tcp_input+0x37e>
    }
    prev = pcb;
 8016af4:	69fb      	ldr	r3, [r7, #28]
 8016af6:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016af8:	69fb      	ldr	r3, [r7, #28]
 8016afa:	68db      	ldr	r3, [r3, #12]
 8016afc:	61fb      	str	r3, [r7, #28]
 8016afe:	69fb      	ldr	r3, [r7, #28]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d185      	bne.n	8016a10 <tcp_input+0x288>
 8016b04:	e000      	b.n	8016b08 <tcp_input+0x380>
      break;
 8016b06:	bf00      	nop
  }

  if (pcb == NULL) {
 8016b08:	69fb      	ldr	r3, [r7, #28]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	f040 80b0 	bne.w	8016c70 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016b10:	4b54      	ldr	r3, [pc, #336]	; (8016c64 <tcp_input+0x4dc>)
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	61fb      	str	r3, [r7, #28]
 8016b16:	e03f      	b.n	8016b98 <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016b18:	69fb      	ldr	r3, [r7, #28]
 8016b1a:	7d1b      	ldrb	r3, [r3, #20]
 8016b1c:	2b0a      	cmp	r3, #10
 8016b1e:	d006      	beq.n	8016b2e <tcp_input+0x3a6>
 8016b20:	4b46      	ldr	r3, [pc, #280]	; (8016c3c <tcp_input+0x4b4>)
 8016b22:	f240 121f 	movw	r2, #287	; 0x11f
 8016b26:	4950      	ldr	r1, [pc, #320]	; (8016c68 <tcp_input+0x4e0>)
 8016b28:	4846      	ldr	r0, [pc, #280]	; (8016c44 <tcp_input+0x4bc>)
 8016b2a:	f007 fb8b 	bl	801e244 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016b2e:	69fb      	ldr	r3, [r7, #28]
 8016b30:	7a1b      	ldrb	r3, [r3, #8]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d009      	beq.n	8016b4a <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016b36:	69fb      	ldr	r3, [r7, #28]
 8016b38:	7a1a      	ldrb	r2, [r3, #8]
 8016b3a:	4b45      	ldr	r3, [pc, #276]	; (8016c50 <tcp_input+0x4c8>)
 8016b3c:	685b      	ldr	r3, [r3, #4]
 8016b3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016b42:	3301      	adds	r3, #1
 8016b44:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016b46:	429a      	cmp	r2, r3
 8016b48:	d122      	bne.n	8016b90 <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8016b4a:	69fb      	ldr	r3, [r7, #28]
 8016b4c:	8b1a      	ldrh	r2, [r3, #24]
 8016b4e:	4b41      	ldr	r3, [pc, #260]	; (8016c54 <tcp_input+0x4cc>)
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	881b      	ldrh	r3, [r3, #0]
 8016b54:	b29b      	uxth	r3, r3
 8016b56:	429a      	cmp	r2, r3
 8016b58:	d11b      	bne.n	8016b92 <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 8016b5a:	69fb      	ldr	r3, [r7, #28]
 8016b5c:	8ada      	ldrh	r2, [r3, #22]
 8016b5e:	4b3d      	ldr	r3, [pc, #244]	; (8016c54 <tcp_input+0x4cc>)
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	885b      	ldrh	r3, [r3, #2]
 8016b64:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8016b66:	429a      	cmp	r2, r3
 8016b68:	d113      	bne.n	8016b92 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016b6a:	69fb      	ldr	r3, [r7, #28]
 8016b6c:	685a      	ldr	r2, [r3, #4]
 8016b6e:	4b38      	ldr	r3, [pc, #224]	; (8016c50 <tcp_input+0x4c8>)
 8016b70:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8016b72:	429a      	cmp	r2, r3
 8016b74:	d10d      	bne.n	8016b92 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016b76:	69fb      	ldr	r3, [r7, #28]
 8016b78:	681a      	ldr	r2, [r3, #0]
 8016b7a:	4b35      	ldr	r3, [pc, #212]	; (8016c50 <tcp_input+0x4c8>)
 8016b7c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016b7e:	429a      	cmp	r2, r3
 8016b80:	d107      	bne.n	8016b92 <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8016b82:	69f8      	ldr	r0, [r7, #28]
 8016b84:	f000 fb5e 	bl	8017244 <tcp_timewait_input>
        }
        pbuf_free(p);
 8016b88:	6878      	ldr	r0, [r7, #4]
 8016b8a:	f7fd fcf7 	bl	801457c <pbuf_free>
        return;
 8016b8e:	e205      	b.n	8016f9c <tcp_input+0x814>
        continue;
 8016b90:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016b92:	69fb      	ldr	r3, [r7, #28]
 8016b94:	68db      	ldr	r3, [r3, #12]
 8016b96:	61fb      	str	r3, [r7, #28]
 8016b98:	69fb      	ldr	r3, [r7, #28]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d1bc      	bne.n	8016b18 <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016ba2:	4b32      	ldr	r3, [pc, #200]	; (8016c6c <tcp_input+0x4e4>)
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	617b      	str	r3, [r7, #20]
 8016ba8:	e02a      	b.n	8016c00 <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016baa:	697b      	ldr	r3, [r7, #20]
 8016bac:	7a1b      	ldrb	r3, [r3, #8]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d00c      	beq.n	8016bcc <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016bb2:	697b      	ldr	r3, [r7, #20]
 8016bb4:	7a1a      	ldrb	r2, [r3, #8]
 8016bb6:	4b26      	ldr	r3, [pc, #152]	; (8016c50 <tcp_input+0x4c8>)
 8016bb8:	685b      	ldr	r3, [r3, #4]
 8016bba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016bbe:	3301      	adds	r3, #1
 8016bc0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016bc2:	429a      	cmp	r2, r3
 8016bc4:	d002      	beq.n	8016bcc <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 8016bc6:	697b      	ldr	r3, [r7, #20]
 8016bc8:	61bb      	str	r3, [r7, #24]
        continue;
 8016bca:	e016      	b.n	8016bfa <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016bcc:	697b      	ldr	r3, [r7, #20]
 8016bce:	8ada      	ldrh	r2, [r3, #22]
 8016bd0:	4b20      	ldr	r3, [pc, #128]	; (8016c54 <tcp_input+0x4cc>)
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	885b      	ldrh	r3, [r3, #2]
 8016bd6:	b29b      	uxth	r3, r3
 8016bd8:	429a      	cmp	r2, r3
 8016bda:	d10c      	bne.n	8016bf6 <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016bdc:	697b      	ldr	r3, [r7, #20]
 8016bde:	681a      	ldr	r2, [r3, #0]
 8016be0:	4b1b      	ldr	r3, [pc, #108]	; (8016c50 <tcp_input+0x4c8>)
 8016be2:	695b      	ldr	r3, [r3, #20]
 8016be4:	429a      	cmp	r2, r3
 8016be6:	d00f      	beq.n	8016c08 <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016be8:	697b      	ldr	r3, [r7, #20]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d00d      	beq.n	8016c0a <tcp_input+0x482>
 8016bee:	697b      	ldr	r3, [r7, #20]
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d009      	beq.n	8016c0a <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8016bf6:	697b      	ldr	r3, [r7, #20]
 8016bf8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016bfa:	697b      	ldr	r3, [r7, #20]
 8016bfc:	68db      	ldr	r3, [r3, #12]
 8016bfe:	617b      	str	r3, [r7, #20]
 8016c00:	697b      	ldr	r3, [r7, #20]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d1d1      	bne.n	8016baa <tcp_input+0x422>
 8016c06:	e000      	b.n	8016c0a <tcp_input+0x482>
            break;
 8016c08:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016c0a:	697b      	ldr	r3, [r7, #20]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d02f      	beq.n	8016c70 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8016c10:	69bb      	ldr	r3, [r7, #24]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d00a      	beq.n	8016c2c <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8016c16:	697b      	ldr	r3, [r7, #20]
 8016c18:	68da      	ldr	r2, [r3, #12]
 8016c1a:	69bb      	ldr	r3, [r7, #24]
 8016c1c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016c1e:	4b13      	ldr	r3, [pc, #76]	; (8016c6c <tcp_input+0x4e4>)
 8016c20:	681a      	ldr	r2, [r3, #0]
 8016c22:	697b      	ldr	r3, [r7, #20]
 8016c24:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8016c26:	4a11      	ldr	r2, [pc, #68]	; (8016c6c <tcp_input+0x4e4>)
 8016c28:	697b      	ldr	r3, [r7, #20]
 8016c2a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016c2c:	6978      	ldr	r0, [r7, #20]
 8016c2e:	f000 fa0b 	bl	8017048 <tcp_listen_input>
      }
      pbuf_free(p);
 8016c32:	6878      	ldr	r0, [r7, #4]
 8016c34:	f7fd fca2 	bl	801457c <pbuf_free>
      return;
 8016c38:	e1b0      	b.n	8016f9c <tcp_input+0x814>
 8016c3a:	bf00      	nop
 8016c3c:	08021308 	.word	0x08021308
 8016c40:	080213b8 	.word	0x080213b8
 8016c44:	08021354 	.word	0x08021354
 8016c48:	080213e0 	.word	0x080213e0
 8016c4c:	0802140c 	.word	0x0802140c
 8016c50:	24015f3c 	.word	0x24015f3c
 8016c54:	2405e9d4 	.word	0x2405e9d4
 8016c58:	08021434 	.word	0x08021434
 8016c5c:	2405e9b8 	.word	0x2405e9b8
 8016c60:	08021460 	.word	0x08021460
 8016c64:	2405e9bc 	.word	0x2405e9bc
 8016c68:	0802148c 	.word	0x0802148c
 8016c6c:	2405e9b4 	.word	0x2405e9b4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8016c70:	69fb      	ldr	r3, [r7, #28]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	f000 8158 	beq.w	8016f28 <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016c78:	4b95      	ldr	r3, [pc, #596]	; (8016ed0 <tcp_input+0x748>)
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	891a      	ldrh	r2, [r3, #8]
 8016c82:	4b93      	ldr	r3, [pc, #588]	; (8016ed0 <tcp_input+0x748>)
 8016c84:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016c86:	4a92      	ldr	r2, [pc, #584]	; (8016ed0 <tcp_input+0x748>)
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016c8c:	4b91      	ldr	r3, [pc, #580]	; (8016ed4 <tcp_input+0x74c>)
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	4a8f      	ldr	r2, [pc, #572]	; (8016ed0 <tcp_input+0x748>)
 8016c92:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016c94:	4b90      	ldr	r3, [pc, #576]	; (8016ed8 <tcp_input+0x750>)
 8016c96:	2200      	movs	r2, #0
 8016c98:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016c9a:	4b90      	ldr	r3, [pc, #576]	; (8016edc <tcp_input+0x754>)
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8016ca0:	4b8f      	ldr	r3, [pc, #572]	; (8016ee0 <tcp_input+0x758>)
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016ca6:	4b8f      	ldr	r3, [pc, #572]	; (8016ee4 <tcp_input+0x75c>)
 8016ca8:	781b      	ldrb	r3, [r3, #0]
 8016caa:	f003 0308 	and.w	r3, r3, #8
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d006      	beq.n	8016cc0 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	7b5b      	ldrb	r3, [r3, #13]
 8016cb6:	f043 0301 	orr.w	r3, r3, #1
 8016cba:	b2da      	uxtb	r2, r3
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016cc0:	69fb      	ldr	r3, [r7, #28]
 8016cc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d017      	beq.n	8016cf8 <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016cc8:	69f8      	ldr	r0, [r7, #28]
 8016cca:	f7ff f849 	bl	8015d60 <tcp_process_refused_data>
 8016cce:	4603      	mov	r3, r0
 8016cd0:	f113 0f0d 	cmn.w	r3, #13
 8016cd4:	d007      	beq.n	8016ce6 <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016cd6:	69fb      	ldr	r3, [r7, #28]
 8016cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d00c      	beq.n	8016cf8 <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016cde:	4b82      	ldr	r3, [pc, #520]	; (8016ee8 <tcp_input+0x760>)
 8016ce0:	881b      	ldrh	r3, [r3, #0]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d008      	beq.n	8016cf8 <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8016ce6:	69fb      	ldr	r3, [r7, #28]
 8016ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	f040 80e3 	bne.w	8016eb6 <tcp_input+0x72e>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8016cf0:	69f8      	ldr	r0, [r7, #28]
 8016cf2:	f003 fe29 	bl	801a948 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8016cf6:	e0de      	b.n	8016eb6 <tcp_input+0x72e>
      }
    }
    tcp_input_pcb = pcb;
 8016cf8:	4a7c      	ldr	r2, [pc, #496]	; (8016eec <tcp_input+0x764>)
 8016cfa:	69fb      	ldr	r3, [r7, #28]
 8016cfc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8016cfe:	69f8      	ldr	r0, [r7, #28]
 8016d00:	f000 fb1a 	bl	8017338 <tcp_process>
 8016d04:	4603      	mov	r3, r0
 8016d06:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016d08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016d0c:	f113 0f0d 	cmn.w	r3, #13
 8016d10:	f000 80d3 	beq.w	8016eba <tcp_input+0x732>
      if (recv_flags & TF_RESET) {
 8016d14:	4b71      	ldr	r3, [pc, #452]	; (8016edc <tcp_input+0x754>)
 8016d16:	781b      	ldrb	r3, [r3, #0]
 8016d18:	f003 0308 	and.w	r3, r3, #8
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d015      	beq.n	8016d4c <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8016d20:	69fb      	ldr	r3, [r7, #28]
 8016d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d008      	beq.n	8016d3c <tcp_input+0x5b4>
 8016d2a:	69fb      	ldr	r3, [r7, #28]
 8016d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016d30:	69fa      	ldr	r2, [r7, #28]
 8016d32:	6912      	ldr	r2, [r2, #16]
 8016d34:	f06f 010d 	mvn.w	r1, #13
 8016d38:	4610      	mov	r0, r2
 8016d3a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016d3c:	69f9      	ldr	r1, [r7, #28]
 8016d3e:	486c      	ldr	r0, [pc, #432]	; (8016ef0 <tcp_input+0x768>)
 8016d40:	f7ff fbaa 	bl	8016498 <tcp_pcb_remove>
        tcp_free(pcb);
 8016d44:	69f8      	ldr	r0, [r7, #28]
 8016d46:	f7fd fec5 	bl	8014ad4 <tcp_free>
 8016d4a:	e0da      	b.n	8016f02 <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 8016d4c:	2300      	movs	r3, #0
 8016d4e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8016d50:	4b63      	ldr	r3, [pc, #396]	; (8016ee0 <tcp_input+0x758>)
 8016d52:	881b      	ldrh	r3, [r3, #0]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d01d      	beq.n	8016d94 <tcp_input+0x60c>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016d58:	4b61      	ldr	r3, [pc, #388]	; (8016ee0 <tcp_input+0x758>)
 8016d5a:	881b      	ldrh	r3, [r3, #0]
 8016d5c:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8016d5e:	69fb      	ldr	r3, [r7, #28]
 8016d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d00a      	beq.n	8016d7e <tcp_input+0x5f6>
 8016d68:	69fb      	ldr	r3, [r7, #28]
 8016d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016d6e:	69fa      	ldr	r2, [r7, #28]
 8016d70:	6910      	ldr	r0, [r2, #16]
 8016d72:	897a      	ldrh	r2, [r7, #10]
 8016d74:	69f9      	ldr	r1, [r7, #28]
 8016d76:	4798      	blx	r3
 8016d78:	4603      	mov	r3, r0
 8016d7a:	74fb      	strb	r3, [r7, #19]
 8016d7c:	e001      	b.n	8016d82 <tcp_input+0x5fa>
 8016d7e:	2300      	movs	r3, #0
 8016d80:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016d82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016d86:	f113 0f0d 	cmn.w	r3, #13
 8016d8a:	f000 8098 	beq.w	8016ebe <tcp_input+0x736>
              goto aborted;
            }
          }
          recv_acked = 0;
 8016d8e:	4b54      	ldr	r3, [pc, #336]	; (8016ee0 <tcp_input+0x758>)
 8016d90:	2200      	movs	r2, #0
 8016d92:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016d94:	69f8      	ldr	r0, [r7, #28]
 8016d96:	f000 f917 	bl	8016fc8 <tcp_input_delayed_close>
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	f040 8090 	bne.w	8016ec2 <tcp_input+0x73a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8016da2:	4b4d      	ldr	r3, [pc, #308]	; (8016ed8 <tcp_input+0x750>)
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d041      	beq.n	8016e2e <tcp_input+0x6a6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016daa:	69fb      	ldr	r3, [r7, #28]
 8016dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d006      	beq.n	8016dc0 <tcp_input+0x638>
 8016db2:	4b50      	ldr	r3, [pc, #320]	; (8016ef4 <tcp_input+0x76c>)
 8016db4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016db8:	494f      	ldr	r1, [pc, #316]	; (8016ef8 <tcp_input+0x770>)
 8016dba:	4850      	ldr	r0, [pc, #320]	; (8016efc <tcp_input+0x774>)
 8016dbc:	f007 fa42 	bl	801e244 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016dc0:	69fb      	ldr	r3, [r7, #28]
 8016dc2:	8b5b      	ldrh	r3, [r3, #26]
 8016dc4:	f003 0310 	and.w	r3, r3, #16
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d008      	beq.n	8016dde <tcp_input+0x656>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016dcc:	4b42      	ldr	r3, [pc, #264]	; (8016ed8 <tcp_input+0x750>)
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	f7fd fbd3 	bl	801457c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016dd6:	69f8      	ldr	r0, [r7, #28]
 8016dd8:	f7fe f9c0 	bl	801515c <tcp_abort>
            goto aborted;
 8016ddc:	e091      	b.n	8016f02 <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016dde:	69fb      	ldr	r3, [r7, #28]
 8016de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d00c      	beq.n	8016e02 <tcp_input+0x67a>
 8016de8:	69fb      	ldr	r3, [r7, #28]
 8016dea:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016dee:	69fb      	ldr	r3, [r7, #28]
 8016df0:	6918      	ldr	r0, [r3, #16]
 8016df2:	4b39      	ldr	r3, [pc, #228]	; (8016ed8 <tcp_input+0x750>)
 8016df4:	681a      	ldr	r2, [r3, #0]
 8016df6:	2300      	movs	r3, #0
 8016df8:	69f9      	ldr	r1, [r7, #28]
 8016dfa:	47a0      	blx	r4
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	74fb      	strb	r3, [r7, #19]
 8016e00:	e008      	b.n	8016e14 <tcp_input+0x68c>
 8016e02:	4b35      	ldr	r3, [pc, #212]	; (8016ed8 <tcp_input+0x750>)
 8016e04:	681a      	ldr	r2, [r3, #0]
 8016e06:	2300      	movs	r3, #0
 8016e08:	69f9      	ldr	r1, [r7, #28]
 8016e0a:	2000      	movs	r0, #0
 8016e0c:	f7ff f87e 	bl	8015f0c <tcp_recv_null>
 8016e10:	4603      	mov	r3, r0
 8016e12:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8016e14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016e18:	f113 0f0d 	cmn.w	r3, #13
 8016e1c:	d053      	beq.n	8016ec6 <tcp_input+0x73e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8016e1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d003      	beq.n	8016e2e <tcp_input+0x6a6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8016e26:	4b2c      	ldr	r3, [pc, #176]	; (8016ed8 <tcp_input+0x750>)
 8016e28:	681a      	ldr	r2, [r3, #0]
 8016e2a:	69fb      	ldr	r3, [r7, #28]
 8016e2c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8016e2e:	4b2b      	ldr	r3, [pc, #172]	; (8016edc <tcp_input+0x754>)
 8016e30:	781b      	ldrb	r3, [r3, #0]
 8016e32:	f003 0320 	and.w	r3, r3, #32
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d030      	beq.n	8016e9c <tcp_input+0x714>
          if (pcb->refused_data != NULL) {
 8016e3a:	69fb      	ldr	r3, [r7, #28]
 8016e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d009      	beq.n	8016e56 <tcp_input+0x6ce>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8016e42:	69fb      	ldr	r3, [r7, #28]
 8016e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016e46:	7b5a      	ldrb	r2, [r3, #13]
 8016e48:	69fb      	ldr	r3, [r7, #28]
 8016e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016e4c:	f042 0220 	orr.w	r2, r2, #32
 8016e50:	b2d2      	uxtb	r2, r2
 8016e52:	735a      	strb	r2, [r3, #13]
 8016e54:	e022      	b.n	8016e9c <tcp_input+0x714>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016e56:	69fb      	ldr	r3, [r7, #28]
 8016e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e5a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016e5e:	d005      	beq.n	8016e6c <tcp_input+0x6e4>
              pcb->rcv_wnd++;
 8016e60:	69fb      	ldr	r3, [r7, #28]
 8016e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e64:	3301      	adds	r3, #1
 8016e66:	b29a      	uxth	r2, r3
 8016e68:	69fb      	ldr	r3, [r7, #28]
 8016e6a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016e6c:	69fb      	ldr	r3, [r7, #28]
 8016e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d00b      	beq.n	8016e8e <tcp_input+0x706>
 8016e76:	69fb      	ldr	r3, [r7, #28]
 8016e78:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016e7c:	69fb      	ldr	r3, [r7, #28]
 8016e7e:	6918      	ldr	r0, [r3, #16]
 8016e80:	2300      	movs	r3, #0
 8016e82:	2200      	movs	r2, #0
 8016e84:	69f9      	ldr	r1, [r7, #28]
 8016e86:	47a0      	blx	r4
 8016e88:	4603      	mov	r3, r0
 8016e8a:	74fb      	strb	r3, [r7, #19]
 8016e8c:	e001      	b.n	8016e92 <tcp_input+0x70a>
 8016e8e:	2300      	movs	r3, #0
 8016e90:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016e92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016e96:	f113 0f0d 	cmn.w	r3, #13
 8016e9a:	d016      	beq.n	8016eca <tcp_input+0x742>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016e9c:	4b13      	ldr	r3, [pc, #76]	; (8016eec <tcp_input+0x764>)
 8016e9e:	2200      	movs	r2, #0
 8016ea0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016ea2:	69f8      	ldr	r0, [r7, #28]
 8016ea4:	f000 f890 	bl	8016fc8 <tcp_input_delayed_close>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d128      	bne.n	8016f00 <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016eae:	69f8      	ldr	r0, [r7, #28]
 8016eb0:	f002 ff22 	bl	8019cf8 <tcp_output>
 8016eb4:	e025      	b.n	8016f02 <tcp_input+0x77a>
        goto aborted;
 8016eb6:	bf00      	nop
 8016eb8:	e023      	b.n	8016f02 <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016eba:	bf00      	nop
 8016ebc:	e021      	b.n	8016f02 <tcp_input+0x77a>
              goto aborted;
 8016ebe:	bf00      	nop
 8016ec0:	e01f      	b.n	8016f02 <tcp_input+0x77a>
          goto aborted;
 8016ec2:	bf00      	nop
 8016ec4:	e01d      	b.n	8016f02 <tcp_input+0x77a>
            goto aborted;
 8016ec6:	bf00      	nop
 8016ec8:	e01b      	b.n	8016f02 <tcp_input+0x77a>
              goto aborted;
 8016eca:	bf00      	nop
 8016ecc:	e019      	b.n	8016f02 <tcp_input+0x77a>
 8016ece:	bf00      	nop
 8016ed0:	2405e9c4 	.word	0x2405e9c4
 8016ed4:	2405e9d4 	.word	0x2405e9d4
 8016ed8:	2405e9f4 	.word	0x2405e9f4
 8016edc:	2405e9f1 	.word	0x2405e9f1
 8016ee0:	2405e9ec 	.word	0x2405e9ec
 8016ee4:	2405e9f0 	.word	0x2405e9f0
 8016ee8:	2405e9ee 	.word	0x2405e9ee
 8016eec:	2405e9f8 	.word	0x2405e9f8
 8016ef0:	2405e9b8 	.word	0x2405e9b8
 8016ef4:	08021308 	.word	0x08021308
 8016ef8:	080214bc 	.word	0x080214bc
 8016efc:	08021354 	.word	0x08021354
          goto aborted;
 8016f00:	bf00      	nop
    tcp_input_pcb = NULL;
 8016f02:	4b28      	ldr	r3, [pc, #160]	; (8016fa4 <tcp_input+0x81c>)
 8016f04:	2200      	movs	r2, #0
 8016f06:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8016f08:	4b27      	ldr	r3, [pc, #156]	; (8016fa8 <tcp_input+0x820>)
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8016f0e:	4b27      	ldr	r3, [pc, #156]	; (8016fac <tcp_input+0x824>)
 8016f10:	685b      	ldr	r3, [r3, #4]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d041      	beq.n	8016f9a <tcp_input+0x812>
      pbuf_free(inseg.p);
 8016f16:	4b25      	ldr	r3, [pc, #148]	; (8016fac <tcp_input+0x824>)
 8016f18:	685b      	ldr	r3, [r3, #4]
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	f7fd fb2e 	bl	801457c <pbuf_free>
      inseg.p = NULL;
 8016f20:	4b22      	ldr	r3, [pc, #136]	; (8016fac <tcp_input+0x824>)
 8016f22:	2200      	movs	r2, #0
 8016f24:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8016f26:	e038      	b.n	8016f9a <tcp_input+0x812>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016f28:	4b21      	ldr	r3, [pc, #132]	; (8016fb0 <tcp_input+0x828>)
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	899b      	ldrh	r3, [r3, #12]
 8016f2e:	b29b      	uxth	r3, r3
 8016f30:	4618      	mov	r0, r3
 8016f32:	f7fb fda9 	bl	8012a88 <lwip_htons>
 8016f36:	4603      	mov	r3, r0
 8016f38:	b2db      	uxtb	r3, r3
 8016f3a:	f003 0304 	and.w	r3, r3, #4
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d118      	bne.n	8016f74 <tcp_input+0x7ec>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f42:	4b1c      	ldr	r3, [pc, #112]	; (8016fb4 <tcp_input+0x82c>)
 8016f44:	6819      	ldr	r1, [r3, #0]
 8016f46:	4b1c      	ldr	r3, [pc, #112]	; (8016fb8 <tcp_input+0x830>)
 8016f48:	881b      	ldrh	r3, [r3, #0]
 8016f4a:	461a      	mov	r2, r3
 8016f4c:	4b1b      	ldr	r3, [pc, #108]	; (8016fbc <tcp_input+0x834>)
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016f52:	4b17      	ldr	r3, [pc, #92]	; (8016fb0 <tcp_input+0x828>)
 8016f54:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f56:	885b      	ldrh	r3, [r3, #2]
 8016f58:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016f5a:	4a15      	ldr	r2, [pc, #84]	; (8016fb0 <tcp_input+0x828>)
 8016f5c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f5e:	8812      	ldrh	r2, [r2, #0]
 8016f60:	b292      	uxth	r2, r2
 8016f62:	9202      	str	r2, [sp, #8]
 8016f64:	9301      	str	r3, [sp, #4]
 8016f66:	4b16      	ldr	r3, [pc, #88]	; (8016fc0 <tcp_input+0x838>)
 8016f68:	9300      	str	r3, [sp, #0]
 8016f6a:	4b16      	ldr	r3, [pc, #88]	; (8016fc4 <tcp_input+0x83c>)
 8016f6c:	4602      	mov	r2, r0
 8016f6e:	2000      	movs	r0, #0
 8016f70:	f003 fc98 	bl	801a8a4 <tcp_rst>
    pbuf_free(p);
 8016f74:	6878      	ldr	r0, [r7, #4]
 8016f76:	f7fd fb01 	bl	801457c <pbuf_free>
  return;
 8016f7a:	e00e      	b.n	8016f9a <tcp_input+0x812>
    goto dropped;
 8016f7c:	bf00      	nop
 8016f7e:	e008      	b.n	8016f92 <tcp_input+0x80a>
    goto dropped;
 8016f80:	bf00      	nop
 8016f82:	e006      	b.n	8016f92 <tcp_input+0x80a>
      goto dropped;
 8016f84:	bf00      	nop
 8016f86:	e004      	b.n	8016f92 <tcp_input+0x80a>
    goto dropped;
 8016f88:	bf00      	nop
 8016f8a:	e002      	b.n	8016f92 <tcp_input+0x80a>
      goto dropped;
 8016f8c:	bf00      	nop
 8016f8e:	e000      	b.n	8016f92 <tcp_input+0x80a>
      goto dropped;
 8016f90:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8016f92:	6878      	ldr	r0, [r7, #4]
 8016f94:	f7fd faf2 	bl	801457c <pbuf_free>
 8016f98:	e000      	b.n	8016f9c <tcp_input+0x814>
  return;
 8016f9a:	bf00      	nop
}
 8016f9c:	3724      	adds	r7, #36	; 0x24
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	bd90      	pop	{r4, r7, pc}
 8016fa2:	bf00      	nop
 8016fa4:	2405e9f8 	.word	0x2405e9f8
 8016fa8:	2405e9f4 	.word	0x2405e9f4
 8016fac:	2405e9c4 	.word	0x2405e9c4
 8016fb0:	2405e9d4 	.word	0x2405e9d4
 8016fb4:	2405e9e8 	.word	0x2405e9e8
 8016fb8:	2405e9ee 	.word	0x2405e9ee
 8016fbc:	2405e9e4 	.word	0x2405e9e4
 8016fc0:	24015f4c 	.word	0x24015f4c
 8016fc4:	24015f50 	.word	0x24015f50

08016fc8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b082      	sub	sp, #8
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d106      	bne.n	8016fe4 <tcp_input_delayed_close+0x1c>
 8016fd6:	4b17      	ldr	r3, [pc, #92]	; (8017034 <tcp_input_delayed_close+0x6c>)
 8016fd8:	f240 225a 	movw	r2, #602	; 0x25a
 8016fdc:	4916      	ldr	r1, [pc, #88]	; (8017038 <tcp_input_delayed_close+0x70>)
 8016fde:	4817      	ldr	r0, [pc, #92]	; (801703c <tcp_input_delayed_close+0x74>)
 8016fe0:	f007 f930 	bl	801e244 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8016fe4:	4b16      	ldr	r3, [pc, #88]	; (8017040 <tcp_input_delayed_close+0x78>)
 8016fe6:	781b      	ldrb	r3, [r3, #0]
 8016fe8:	f003 0310 	and.w	r3, r3, #16
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d01c      	beq.n	801702a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	8b5b      	ldrh	r3, [r3, #26]
 8016ff4:	f003 0310 	and.w	r3, r3, #16
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d10d      	bne.n	8017018 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017002:	2b00      	cmp	r3, #0
 8017004:	d008      	beq.n	8017018 <tcp_input_delayed_close+0x50>
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801700c:	687a      	ldr	r2, [r7, #4]
 801700e:	6912      	ldr	r2, [r2, #16]
 8017010:	f06f 010e 	mvn.w	r1, #14
 8017014:	4610      	mov	r0, r2
 8017016:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017018:	6879      	ldr	r1, [r7, #4]
 801701a:	480a      	ldr	r0, [pc, #40]	; (8017044 <tcp_input_delayed_close+0x7c>)
 801701c:	f7ff fa3c 	bl	8016498 <tcp_pcb_remove>
    tcp_free(pcb);
 8017020:	6878      	ldr	r0, [r7, #4]
 8017022:	f7fd fd57 	bl	8014ad4 <tcp_free>
    return 1;
 8017026:	2301      	movs	r3, #1
 8017028:	e000      	b.n	801702c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801702a:	2300      	movs	r3, #0
}
 801702c:	4618      	mov	r0, r3
 801702e:	3708      	adds	r7, #8
 8017030:	46bd      	mov	sp, r7
 8017032:	bd80      	pop	{r7, pc}
 8017034:	08021308 	.word	0x08021308
 8017038:	080214d8 	.word	0x080214d8
 801703c:	08021354 	.word	0x08021354
 8017040:	2405e9f1 	.word	0x2405e9f1
 8017044:	2405e9b8 	.word	0x2405e9b8

08017048 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8017048:	b590      	push	{r4, r7, lr}
 801704a:	b08b      	sub	sp, #44	; 0x2c
 801704c:	af04      	add	r7, sp, #16
 801704e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8017050:	4b6f      	ldr	r3, [pc, #444]	; (8017210 <tcp_listen_input+0x1c8>)
 8017052:	781b      	ldrb	r3, [r3, #0]
 8017054:	f003 0304 	and.w	r3, r3, #4
 8017058:	2b00      	cmp	r3, #0
 801705a:	f040 80d2 	bne.w	8017202 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d106      	bne.n	8017072 <tcp_listen_input+0x2a>
 8017064:	4b6b      	ldr	r3, [pc, #428]	; (8017214 <tcp_listen_input+0x1cc>)
 8017066:	f240 2281 	movw	r2, #641	; 0x281
 801706a:	496b      	ldr	r1, [pc, #428]	; (8017218 <tcp_listen_input+0x1d0>)
 801706c:	486b      	ldr	r0, [pc, #428]	; (801721c <tcp_listen_input+0x1d4>)
 801706e:	f007 f8e9 	bl	801e244 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8017072:	4b67      	ldr	r3, [pc, #412]	; (8017210 <tcp_listen_input+0x1c8>)
 8017074:	781b      	ldrb	r3, [r3, #0]
 8017076:	f003 0310 	and.w	r3, r3, #16
 801707a:	2b00      	cmp	r3, #0
 801707c:	d019      	beq.n	80170b2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801707e:	4b68      	ldr	r3, [pc, #416]	; (8017220 <tcp_listen_input+0x1d8>)
 8017080:	6819      	ldr	r1, [r3, #0]
 8017082:	4b68      	ldr	r3, [pc, #416]	; (8017224 <tcp_listen_input+0x1dc>)
 8017084:	881b      	ldrh	r3, [r3, #0]
 8017086:	461a      	mov	r2, r3
 8017088:	4b67      	ldr	r3, [pc, #412]	; (8017228 <tcp_listen_input+0x1e0>)
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801708e:	4b67      	ldr	r3, [pc, #412]	; (801722c <tcp_listen_input+0x1e4>)
 8017090:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017092:	885b      	ldrh	r3, [r3, #2]
 8017094:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017096:	4a65      	ldr	r2, [pc, #404]	; (801722c <tcp_listen_input+0x1e4>)
 8017098:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801709a:	8812      	ldrh	r2, [r2, #0]
 801709c:	b292      	uxth	r2, r2
 801709e:	9202      	str	r2, [sp, #8]
 80170a0:	9301      	str	r3, [sp, #4]
 80170a2:	4b63      	ldr	r3, [pc, #396]	; (8017230 <tcp_listen_input+0x1e8>)
 80170a4:	9300      	str	r3, [sp, #0]
 80170a6:	4b63      	ldr	r3, [pc, #396]	; (8017234 <tcp_listen_input+0x1ec>)
 80170a8:	4602      	mov	r2, r0
 80170aa:	6878      	ldr	r0, [r7, #4]
 80170ac:	f003 fbfa 	bl	801a8a4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80170b0:	e0a9      	b.n	8017206 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80170b2:	4b57      	ldr	r3, [pc, #348]	; (8017210 <tcp_listen_input+0x1c8>)
 80170b4:	781b      	ldrb	r3, [r3, #0]
 80170b6:	f003 0302 	and.w	r3, r3, #2
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	f000 80a3 	beq.w	8017206 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	7d5b      	ldrb	r3, [r3, #21]
 80170c4:	4618      	mov	r0, r3
 80170c6:	f7ff f845 	bl	8016154 <tcp_alloc>
 80170ca:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80170cc:	697b      	ldr	r3, [r7, #20]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d111      	bne.n	80170f6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	699b      	ldr	r3, [r3, #24]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d00a      	beq.n	80170f0 <tcp_listen_input+0xa8>
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	699b      	ldr	r3, [r3, #24]
 80170de:	687a      	ldr	r2, [r7, #4]
 80170e0:	6910      	ldr	r0, [r2, #16]
 80170e2:	f04f 32ff 	mov.w	r2, #4294967295
 80170e6:	2100      	movs	r1, #0
 80170e8:	4798      	blx	r3
 80170ea:	4603      	mov	r3, r0
 80170ec:	73bb      	strb	r3, [r7, #14]
      return;
 80170ee:	e08b      	b.n	8017208 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80170f0:	23f0      	movs	r3, #240	; 0xf0
 80170f2:	73bb      	strb	r3, [r7, #14]
      return;
 80170f4:	e088      	b.n	8017208 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80170f6:	4b50      	ldr	r3, [pc, #320]	; (8017238 <tcp_listen_input+0x1f0>)
 80170f8:	695a      	ldr	r2, [r3, #20]
 80170fa:	697b      	ldr	r3, [r7, #20]
 80170fc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80170fe:	4b4e      	ldr	r3, [pc, #312]	; (8017238 <tcp_listen_input+0x1f0>)
 8017100:	691a      	ldr	r2, [r3, #16]
 8017102:	697b      	ldr	r3, [r7, #20]
 8017104:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	8ada      	ldrh	r2, [r3, #22]
 801710a:	697b      	ldr	r3, [r7, #20]
 801710c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801710e:	4b47      	ldr	r3, [pc, #284]	; (801722c <tcp_listen_input+0x1e4>)
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	881b      	ldrh	r3, [r3, #0]
 8017114:	b29a      	uxth	r2, r3
 8017116:	697b      	ldr	r3, [r7, #20]
 8017118:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801711a:	697b      	ldr	r3, [r7, #20]
 801711c:	2203      	movs	r2, #3
 801711e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8017120:	4b41      	ldr	r3, [pc, #260]	; (8017228 <tcp_listen_input+0x1e0>)
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	1c5a      	adds	r2, r3, #1
 8017126:	697b      	ldr	r3, [r7, #20]
 8017128:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801712a:	697b      	ldr	r3, [r7, #20]
 801712c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801712e:	697b      	ldr	r3, [r7, #20]
 8017130:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8017132:	6978      	ldr	r0, [r7, #20]
 8017134:	f7ff fa44 	bl	80165c0 <tcp_next_iss>
 8017138:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801713a:	697b      	ldr	r3, [r7, #20]
 801713c:	693a      	ldr	r2, [r7, #16]
 801713e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8017140:	697b      	ldr	r3, [r7, #20]
 8017142:	693a      	ldr	r2, [r7, #16]
 8017144:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8017146:	697b      	ldr	r3, [r7, #20]
 8017148:	693a      	ldr	r2, [r7, #16]
 801714a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801714c:	697b      	ldr	r3, [r7, #20]
 801714e:	693a      	ldr	r2, [r7, #16]
 8017150:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8017152:	4b35      	ldr	r3, [pc, #212]	; (8017228 <tcp_listen_input+0x1e0>)
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	1e5a      	subs	r2, r3, #1
 8017158:	697b      	ldr	r3, [r7, #20]
 801715a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	691a      	ldr	r2, [r3, #16]
 8017160:	697b      	ldr	r3, [r7, #20]
 8017162:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8017164:	697b      	ldr	r3, [r7, #20]
 8017166:	687a      	ldr	r2, [r7, #4]
 8017168:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	7a5b      	ldrb	r3, [r3, #9]
 801716e:	f003 030c 	and.w	r3, r3, #12
 8017172:	b2da      	uxtb	r2, r3
 8017174:	697b      	ldr	r3, [r7, #20]
 8017176:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	7a1a      	ldrb	r2, [r3, #8]
 801717c:	697b      	ldr	r3, [r7, #20]
 801717e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017180:	4b2e      	ldr	r3, [pc, #184]	; (801723c <tcp_listen_input+0x1f4>)
 8017182:	681a      	ldr	r2, [r3, #0]
 8017184:	697b      	ldr	r3, [r7, #20]
 8017186:	60da      	str	r2, [r3, #12]
 8017188:	4a2c      	ldr	r2, [pc, #176]	; (801723c <tcp_listen_input+0x1f4>)
 801718a:	697b      	ldr	r3, [r7, #20]
 801718c:	6013      	str	r3, [r2, #0]
 801718e:	f003 fd4b 	bl	801ac28 <tcp_timer_needed>
 8017192:	4b2b      	ldr	r3, [pc, #172]	; (8017240 <tcp_listen_input+0x1f8>)
 8017194:	2201      	movs	r2, #1
 8017196:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017198:	6978      	ldr	r0, [r7, #20]
 801719a:	f001 fd8f 	bl	8018cbc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801719e:	4b23      	ldr	r3, [pc, #140]	; (801722c <tcp_listen_input+0x1e4>)
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	89db      	ldrh	r3, [r3, #14]
 80171a4:	b29a      	uxth	r2, r3
 80171a6:	697b      	ldr	r3, [r7, #20]
 80171a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80171ac:	697b      	ldr	r3, [r7, #20]
 80171ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80171b2:	697b      	ldr	r3, [r7, #20]
 80171b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80171b8:	697b      	ldr	r3, [r7, #20]
 80171ba:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80171bc:	697b      	ldr	r3, [r7, #20]
 80171be:	3304      	adds	r3, #4
 80171c0:	4618      	mov	r0, r3
 80171c2:	f005 faab 	bl	801c71c <ip4_route>
 80171c6:	4601      	mov	r1, r0
 80171c8:	697b      	ldr	r3, [r7, #20]
 80171ca:	3304      	adds	r3, #4
 80171cc:	461a      	mov	r2, r3
 80171ce:	4620      	mov	r0, r4
 80171d0:	f7ff fa1c 	bl	801660c <tcp_eff_send_mss_netif>
 80171d4:	4603      	mov	r3, r0
 80171d6:	461a      	mov	r2, r3
 80171d8:	697b      	ldr	r3, [r7, #20]
 80171da:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80171dc:	2112      	movs	r1, #18
 80171de:	6978      	ldr	r0, [r7, #20]
 80171e0:	f002 fc9c 	bl	8019b1c <tcp_enqueue_flags>
 80171e4:	4603      	mov	r3, r0
 80171e6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80171e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d004      	beq.n	80171fa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80171f0:	2100      	movs	r1, #0
 80171f2:	6978      	ldr	r0, [r7, #20]
 80171f4:	f7fd fef4 	bl	8014fe0 <tcp_abandon>
      return;
 80171f8:	e006      	b.n	8017208 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80171fa:	6978      	ldr	r0, [r7, #20]
 80171fc:	f002 fd7c 	bl	8019cf8 <tcp_output>
  return;
 8017200:	e001      	b.n	8017206 <tcp_listen_input+0x1be>
    return;
 8017202:	bf00      	nop
 8017204:	e000      	b.n	8017208 <tcp_listen_input+0x1c0>
  return;
 8017206:	bf00      	nop
}
 8017208:	371c      	adds	r7, #28
 801720a:	46bd      	mov	sp, r7
 801720c:	bd90      	pop	{r4, r7, pc}
 801720e:	bf00      	nop
 8017210:	2405e9f0 	.word	0x2405e9f0
 8017214:	08021308 	.word	0x08021308
 8017218:	08021500 	.word	0x08021500
 801721c:	08021354 	.word	0x08021354
 8017220:	2405e9e8 	.word	0x2405e9e8
 8017224:	2405e9ee 	.word	0x2405e9ee
 8017228:	2405e9e4 	.word	0x2405e9e4
 801722c:	2405e9d4 	.word	0x2405e9d4
 8017230:	24015f4c 	.word	0x24015f4c
 8017234:	24015f50 	.word	0x24015f50
 8017238:	24015f3c 	.word	0x24015f3c
 801723c:	2405e9b8 	.word	0x2405e9b8
 8017240:	2405e9c0 	.word	0x2405e9c0

08017244 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8017244:	b580      	push	{r7, lr}
 8017246:	b086      	sub	sp, #24
 8017248:	af04      	add	r7, sp, #16
 801724a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801724c:	4b2f      	ldr	r3, [pc, #188]	; (801730c <tcp_timewait_input+0xc8>)
 801724e:	781b      	ldrb	r3, [r3, #0]
 8017250:	f003 0304 	and.w	r3, r3, #4
 8017254:	2b00      	cmp	r3, #0
 8017256:	d153      	bne.n	8017300 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	2b00      	cmp	r3, #0
 801725c:	d106      	bne.n	801726c <tcp_timewait_input+0x28>
 801725e:	4b2c      	ldr	r3, [pc, #176]	; (8017310 <tcp_timewait_input+0xcc>)
 8017260:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017264:	492b      	ldr	r1, [pc, #172]	; (8017314 <tcp_timewait_input+0xd0>)
 8017266:	482c      	ldr	r0, [pc, #176]	; (8017318 <tcp_timewait_input+0xd4>)
 8017268:	f006 ffec 	bl	801e244 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801726c:	4b27      	ldr	r3, [pc, #156]	; (801730c <tcp_timewait_input+0xc8>)
 801726e:	781b      	ldrb	r3, [r3, #0]
 8017270:	f003 0302 	and.w	r3, r3, #2
 8017274:	2b00      	cmp	r3, #0
 8017276:	d02a      	beq.n	80172ce <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8017278:	4b28      	ldr	r3, [pc, #160]	; (801731c <tcp_timewait_input+0xd8>)
 801727a:	681a      	ldr	r2, [r3, #0]
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017280:	1ad3      	subs	r3, r2, r3
 8017282:	2b00      	cmp	r3, #0
 8017284:	db2d      	blt.n	80172e2 <tcp_timewait_input+0x9e>
 8017286:	4b25      	ldr	r3, [pc, #148]	; (801731c <tcp_timewait_input+0xd8>)
 8017288:	681a      	ldr	r2, [r3, #0]
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801728e:	6879      	ldr	r1, [r7, #4]
 8017290:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017292:	440b      	add	r3, r1
 8017294:	1ad3      	subs	r3, r2, r3
 8017296:	2b00      	cmp	r3, #0
 8017298:	dc23      	bgt.n	80172e2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801729a:	4b21      	ldr	r3, [pc, #132]	; (8017320 <tcp_timewait_input+0xdc>)
 801729c:	6819      	ldr	r1, [r3, #0]
 801729e:	4b21      	ldr	r3, [pc, #132]	; (8017324 <tcp_timewait_input+0xe0>)
 80172a0:	881b      	ldrh	r3, [r3, #0]
 80172a2:	461a      	mov	r2, r3
 80172a4:	4b1d      	ldr	r3, [pc, #116]	; (801731c <tcp_timewait_input+0xd8>)
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80172aa:	4b1f      	ldr	r3, [pc, #124]	; (8017328 <tcp_timewait_input+0xe4>)
 80172ac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80172ae:	885b      	ldrh	r3, [r3, #2]
 80172b0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80172b2:	4a1d      	ldr	r2, [pc, #116]	; (8017328 <tcp_timewait_input+0xe4>)
 80172b4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80172b6:	8812      	ldrh	r2, [r2, #0]
 80172b8:	b292      	uxth	r2, r2
 80172ba:	9202      	str	r2, [sp, #8]
 80172bc:	9301      	str	r3, [sp, #4]
 80172be:	4b1b      	ldr	r3, [pc, #108]	; (801732c <tcp_timewait_input+0xe8>)
 80172c0:	9300      	str	r3, [sp, #0]
 80172c2:	4b1b      	ldr	r3, [pc, #108]	; (8017330 <tcp_timewait_input+0xec>)
 80172c4:	4602      	mov	r2, r0
 80172c6:	6878      	ldr	r0, [r7, #4]
 80172c8:	f003 faec 	bl	801a8a4 <tcp_rst>
      return;
 80172cc:	e01b      	b.n	8017306 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80172ce:	4b0f      	ldr	r3, [pc, #60]	; (801730c <tcp_timewait_input+0xc8>)
 80172d0:	781b      	ldrb	r3, [r3, #0]
 80172d2:	f003 0301 	and.w	r3, r3, #1
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d003      	beq.n	80172e2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80172da:	4b16      	ldr	r3, [pc, #88]	; (8017334 <tcp_timewait_input+0xf0>)
 80172dc:	681a      	ldr	r2, [r3, #0]
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80172e2:	4b10      	ldr	r3, [pc, #64]	; (8017324 <tcp_timewait_input+0xe0>)
 80172e4:	881b      	ldrh	r3, [r3, #0]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d00c      	beq.n	8017304 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	8b5b      	ldrh	r3, [r3, #26]
 80172ee:	f043 0302 	orr.w	r3, r3, #2
 80172f2:	b29a      	uxth	r2, r3
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80172f8:	6878      	ldr	r0, [r7, #4]
 80172fa:	f002 fcfd 	bl	8019cf8 <tcp_output>
  }
  return;
 80172fe:	e001      	b.n	8017304 <tcp_timewait_input+0xc0>
    return;
 8017300:	bf00      	nop
 8017302:	e000      	b.n	8017306 <tcp_timewait_input+0xc2>
  return;
 8017304:	bf00      	nop
}
 8017306:	3708      	adds	r7, #8
 8017308:	46bd      	mov	sp, r7
 801730a:	bd80      	pop	{r7, pc}
 801730c:	2405e9f0 	.word	0x2405e9f0
 8017310:	08021308 	.word	0x08021308
 8017314:	08021520 	.word	0x08021520
 8017318:	08021354 	.word	0x08021354
 801731c:	2405e9e4 	.word	0x2405e9e4
 8017320:	2405e9e8 	.word	0x2405e9e8
 8017324:	2405e9ee 	.word	0x2405e9ee
 8017328:	2405e9d4 	.word	0x2405e9d4
 801732c:	24015f4c 	.word	0x24015f4c
 8017330:	24015f50 	.word	0x24015f50
 8017334:	2405e9ac 	.word	0x2405e9ac

08017338 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8017338:	b590      	push	{r4, r7, lr}
 801733a:	b08d      	sub	sp, #52	; 0x34
 801733c:	af04      	add	r7, sp, #16
 801733e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8017340:	2300      	movs	r3, #0
 8017342:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8017344:	2300      	movs	r3, #0
 8017346:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d106      	bne.n	801735c <tcp_process+0x24>
 801734e:	4b9d      	ldr	r3, [pc, #628]	; (80175c4 <tcp_process+0x28c>)
 8017350:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8017354:	499c      	ldr	r1, [pc, #624]	; (80175c8 <tcp_process+0x290>)
 8017356:	489d      	ldr	r0, [pc, #628]	; (80175cc <tcp_process+0x294>)
 8017358:	f006 ff74 	bl	801e244 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801735c:	4b9c      	ldr	r3, [pc, #624]	; (80175d0 <tcp_process+0x298>)
 801735e:	781b      	ldrb	r3, [r3, #0]
 8017360:	f003 0304 	and.w	r3, r3, #4
 8017364:	2b00      	cmp	r3, #0
 8017366:	d04e      	beq.n	8017406 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	7d1b      	ldrb	r3, [r3, #20]
 801736c:	2b02      	cmp	r3, #2
 801736e:	d108      	bne.n	8017382 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017374:	4b97      	ldr	r3, [pc, #604]	; (80175d4 <tcp_process+0x29c>)
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	429a      	cmp	r2, r3
 801737a:	d123      	bne.n	80173c4 <tcp_process+0x8c>
        acceptable = 1;
 801737c:	2301      	movs	r3, #1
 801737e:	76fb      	strb	r3, [r7, #27]
 8017380:	e020      	b.n	80173c4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017386:	4b94      	ldr	r3, [pc, #592]	; (80175d8 <tcp_process+0x2a0>)
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	429a      	cmp	r2, r3
 801738c:	d102      	bne.n	8017394 <tcp_process+0x5c>
        acceptable = 1;
 801738e:	2301      	movs	r3, #1
 8017390:	76fb      	strb	r3, [r7, #27]
 8017392:	e017      	b.n	80173c4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017394:	4b90      	ldr	r3, [pc, #576]	; (80175d8 <tcp_process+0x2a0>)
 8017396:	681a      	ldr	r2, [r3, #0]
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801739c:	1ad3      	subs	r3, r2, r3
 801739e:	2b00      	cmp	r3, #0
 80173a0:	db10      	blt.n	80173c4 <tcp_process+0x8c>
 80173a2:	4b8d      	ldr	r3, [pc, #564]	; (80175d8 <tcp_process+0x2a0>)
 80173a4:	681a      	ldr	r2, [r3, #0]
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173aa:	6879      	ldr	r1, [r7, #4]
 80173ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80173ae:	440b      	add	r3, r1
 80173b0:	1ad3      	subs	r3, r2, r3
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	dc06      	bgt.n	80173c4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	8b5b      	ldrh	r3, [r3, #26]
 80173ba:	f043 0302 	orr.w	r3, r3, #2
 80173be:	b29a      	uxth	r2, r3
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80173c4:	7efb      	ldrb	r3, [r7, #27]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d01b      	beq.n	8017402 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	7d1b      	ldrb	r3, [r3, #20]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d106      	bne.n	80173e0 <tcp_process+0xa8>
 80173d2:	4b7c      	ldr	r3, [pc, #496]	; (80175c4 <tcp_process+0x28c>)
 80173d4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80173d8:	4980      	ldr	r1, [pc, #512]	; (80175dc <tcp_process+0x2a4>)
 80173da:	487c      	ldr	r0, [pc, #496]	; (80175cc <tcp_process+0x294>)
 80173dc:	f006 ff32 	bl	801e244 <iprintf>
      recv_flags |= TF_RESET;
 80173e0:	4b7f      	ldr	r3, [pc, #508]	; (80175e0 <tcp_process+0x2a8>)
 80173e2:	781b      	ldrb	r3, [r3, #0]
 80173e4:	f043 0308 	orr.w	r3, r3, #8
 80173e8:	b2da      	uxtb	r2, r3
 80173ea:	4b7d      	ldr	r3, [pc, #500]	; (80175e0 <tcp_process+0x2a8>)
 80173ec:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	8b5b      	ldrh	r3, [r3, #26]
 80173f2:	f023 0301 	bic.w	r3, r3, #1
 80173f6:	b29a      	uxth	r2, r3
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80173fc:	f06f 030d 	mvn.w	r3, #13
 8017400:	e37a      	b.n	8017af8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8017402:	2300      	movs	r3, #0
 8017404:	e378      	b.n	8017af8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8017406:	4b72      	ldr	r3, [pc, #456]	; (80175d0 <tcp_process+0x298>)
 8017408:	781b      	ldrb	r3, [r3, #0]
 801740a:	f003 0302 	and.w	r3, r3, #2
 801740e:	2b00      	cmp	r3, #0
 8017410:	d010      	beq.n	8017434 <tcp_process+0xfc>
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	7d1b      	ldrb	r3, [r3, #20]
 8017416:	2b02      	cmp	r3, #2
 8017418:	d00c      	beq.n	8017434 <tcp_process+0xfc>
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	7d1b      	ldrb	r3, [r3, #20]
 801741e:	2b03      	cmp	r3, #3
 8017420:	d008      	beq.n	8017434 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	8b5b      	ldrh	r3, [r3, #26]
 8017426:	f043 0302 	orr.w	r3, r3, #2
 801742a:	b29a      	uxth	r2, r3
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8017430:	2300      	movs	r3, #0
 8017432:	e361      	b.n	8017af8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	8b5b      	ldrh	r3, [r3, #26]
 8017438:	f003 0310 	and.w	r3, r3, #16
 801743c:	2b00      	cmp	r3, #0
 801743e:	d103      	bne.n	8017448 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8017440:	4b68      	ldr	r3, [pc, #416]	; (80175e4 <tcp_process+0x2ac>)
 8017442:	681a      	ldr	r2, [r3, #0]
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	2200      	movs	r2, #0
 801744c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	2200      	movs	r2, #0
 8017454:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8017458:	6878      	ldr	r0, [r7, #4]
 801745a:	f001 fc2f 	bl	8018cbc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	7d1b      	ldrb	r3, [r3, #20]
 8017462:	3b02      	subs	r3, #2
 8017464:	2b07      	cmp	r3, #7
 8017466:	f200 8337 	bhi.w	8017ad8 <tcp_process+0x7a0>
 801746a:	a201      	add	r2, pc, #4	; (adr r2, 8017470 <tcp_process+0x138>)
 801746c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017470:	08017491 	.word	0x08017491
 8017474:	080176c1 	.word	0x080176c1
 8017478:	08017839 	.word	0x08017839
 801747c:	08017863 	.word	0x08017863
 8017480:	08017987 	.word	0x08017987
 8017484:	08017839 	.word	0x08017839
 8017488:	08017a13 	.word	0x08017a13
 801748c:	08017aa3 	.word	0x08017aa3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017490:	4b4f      	ldr	r3, [pc, #316]	; (80175d0 <tcp_process+0x298>)
 8017492:	781b      	ldrb	r3, [r3, #0]
 8017494:	f003 0310 	and.w	r3, r3, #16
 8017498:	2b00      	cmp	r3, #0
 801749a:	f000 80e4 	beq.w	8017666 <tcp_process+0x32e>
 801749e:	4b4c      	ldr	r3, [pc, #304]	; (80175d0 <tcp_process+0x298>)
 80174a0:	781b      	ldrb	r3, [r3, #0]
 80174a2:	f003 0302 	and.w	r3, r3, #2
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	f000 80dd 	beq.w	8017666 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80174b0:	1c5a      	adds	r2, r3, #1
 80174b2:	4b48      	ldr	r3, [pc, #288]	; (80175d4 <tcp_process+0x29c>)
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	429a      	cmp	r2, r3
 80174b8:	f040 80d5 	bne.w	8017666 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80174bc:	4b46      	ldr	r3, [pc, #280]	; (80175d8 <tcp_process+0x2a0>)
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	1c5a      	adds	r2, r3, #1
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80174ce:	4b41      	ldr	r3, [pc, #260]	; (80175d4 <tcp_process+0x29c>)
 80174d0:	681a      	ldr	r2, [r3, #0]
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80174d6:	4b44      	ldr	r3, [pc, #272]	; (80175e8 <tcp_process+0x2b0>)
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	89db      	ldrh	r3, [r3, #14]
 80174dc:	b29a      	uxth	r2, r3
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80174f0:	4b39      	ldr	r3, [pc, #228]	; (80175d8 <tcp_process+0x2a0>)
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	1e5a      	subs	r2, r3, #1
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	2204      	movs	r2, #4
 80174fe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	3304      	adds	r3, #4
 8017508:	4618      	mov	r0, r3
 801750a:	f005 f907 	bl	801c71c <ip4_route>
 801750e:	4601      	mov	r1, r0
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	3304      	adds	r3, #4
 8017514:	461a      	mov	r2, r3
 8017516:	4620      	mov	r0, r4
 8017518:	f7ff f878 	bl	801660c <tcp_eff_send_mss_netif>
 801751c:	4603      	mov	r3, r0
 801751e:	461a      	mov	r2, r3
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017528:	009a      	lsls	r2, r3, #2
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801752e:	005b      	lsls	r3, r3, #1
 8017530:	f241 111c 	movw	r1, #4380	; 0x111c
 8017534:	428b      	cmp	r3, r1
 8017536:	bf38      	it	cc
 8017538:	460b      	movcc	r3, r1
 801753a:	429a      	cmp	r2, r3
 801753c:	d204      	bcs.n	8017548 <tcp_process+0x210>
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017542:	009b      	lsls	r3, r3, #2
 8017544:	b29b      	uxth	r3, r3
 8017546:	e00d      	b.n	8017564 <tcp_process+0x22c>
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801754c:	005b      	lsls	r3, r3, #1
 801754e:	f241 121c 	movw	r2, #4380	; 0x111c
 8017552:	4293      	cmp	r3, r2
 8017554:	d904      	bls.n	8017560 <tcp_process+0x228>
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801755a:	005b      	lsls	r3, r3, #1
 801755c:	b29b      	uxth	r3, r3
 801755e:	e001      	b.n	8017564 <tcp_process+0x22c>
 8017560:	f241 131c 	movw	r3, #4380	; 0x111c
 8017564:	687a      	ldr	r2, [r7, #4]
 8017566:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017570:	2b00      	cmp	r3, #0
 8017572:	d106      	bne.n	8017582 <tcp_process+0x24a>
 8017574:	4b13      	ldr	r3, [pc, #76]	; (80175c4 <tcp_process+0x28c>)
 8017576:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801757a:	491c      	ldr	r1, [pc, #112]	; (80175ec <tcp_process+0x2b4>)
 801757c:	4813      	ldr	r0, [pc, #76]	; (80175cc <tcp_process+0x294>)
 801757e:	f006 fe61 	bl	801e244 <iprintf>
        --pcb->snd_queuelen;
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017588:	3b01      	subs	r3, #1
 801758a:	b29a      	uxth	r2, r3
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017596:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8017598:	69fb      	ldr	r3, [r7, #28]
 801759a:	2b00      	cmp	r3, #0
 801759c:	d12a      	bne.n	80175f4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80175a2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80175a4:	69fb      	ldr	r3, [r7, #28]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d106      	bne.n	80175b8 <tcp_process+0x280>
 80175aa:	4b06      	ldr	r3, [pc, #24]	; (80175c4 <tcp_process+0x28c>)
 80175ac:	f44f 725d 	mov.w	r2, #884	; 0x374
 80175b0:	490f      	ldr	r1, [pc, #60]	; (80175f0 <tcp_process+0x2b8>)
 80175b2:	4806      	ldr	r0, [pc, #24]	; (80175cc <tcp_process+0x294>)
 80175b4:	f006 fe46 	bl	801e244 <iprintf>
          pcb->unsent = rseg->next;
 80175b8:	69fb      	ldr	r3, [r7, #28]
 80175ba:	681a      	ldr	r2, [r3, #0]
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	66da      	str	r2, [r3, #108]	; 0x6c
 80175c0:	e01c      	b.n	80175fc <tcp_process+0x2c4>
 80175c2:	bf00      	nop
 80175c4:	08021308 	.word	0x08021308
 80175c8:	08021540 	.word	0x08021540
 80175cc:	08021354 	.word	0x08021354
 80175d0:	2405e9f0 	.word	0x2405e9f0
 80175d4:	2405e9e8 	.word	0x2405e9e8
 80175d8:	2405e9e4 	.word	0x2405e9e4
 80175dc:	0802155c 	.word	0x0802155c
 80175e0:	2405e9f1 	.word	0x2405e9f1
 80175e4:	2405e9ac 	.word	0x2405e9ac
 80175e8:	2405e9d4 	.word	0x2405e9d4
 80175ec:	0802157c 	.word	0x0802157c
 80175f0:	08021594 	.word	0x08021594
        } else {
          pcb->unacked = rseg->next;
 80175f4:	69fb      	ldr	r3, [r7, #28]
 80175f6:	681a      	ldr	r2, [r3, #0]
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80175fc:	69f8      	ldr	r0, [r7, #28]
 80175fe:	f7fe fc40 	bl	8015e82 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017606:	2b00      	cmp	r3, #0
 8017608:	d104      	bne.n	8017614 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017610:	861a      	strh	r2, [r3, #48]	; 0x30
 8017612:	e006      	b.n	8017622 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	2200      	movs	r2, #0
 8017618:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	2200      	movs	r2, #0
 801761e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017628:	2b00      	cmp	r3, #0
 801762a:	d00a      	beq.n	8017642 <tcp_process+0x30a>
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017632:	687a      	ldr	r2, [r7, #4]
 8017634:	6910      	ldr	r0, [r2, #16]
 8017636:	2200      	movs	r2, #0
 8017638:	6879      	ldr	r1, [r7, #4]
 801763a:	4798      	blx	r3
 801763c:	4603      	mov	r3, r0
 801763e:	76bb      	strb	r3, [r7, #26]
 8017640:	e001      	b.n	8017646 <tcp_process+0x30e>
 8017642:	2300      	movs	r3, #0
 8017644:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8017646:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801764a:	f113 0f0d 	cmn.w	r3, #13
 801764e:	d102      	bne.n	8017656 <tcp_process+0x31e>
          return ERR_ABRT;
 8017650:	f06f 030c 	mvn.w	r3, #12
 8017654:	e250      	b.n	8017af8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	8b5b      	ldrh	r3, [r3, #26]
 801765a:	f043 0302 	orr.w	r3, r3, #2
 801765e:	b29a      	uxth	r2, r3
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8017664:	e23a      	b.n	8017adc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8017666:	4b98      	ldr	r3, [pc, #608]	; (80178c8 <tcp_process+0x590>)
 8017668:	781b      	ldrb	r3, [r3, #0]
 801766a:	f003 0310 	and.w	r3, r3, #16
 801766e:	2b00      	cmp	r3, #0
 8017670:	f000 8234 	beq.w	8017adc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017674:	4b95      	ldr	r3, [pc, #596]	; (80178cc <tcp_process+0x594>)
 8017676:	6819      	ldr	r1, [r3, #0]
 8017678:	4b95      	ldr	r3, [pc, #596]	; (80178d0 <tcp_process+0x598>)
 801767a:	881b      	ldrh	r3, [r3, #0]
 801767c:	461a      	mov	r2, r3
 801767e:	4b95      	ldr	r3, [pc, #596]	; (80178d4 <tcp_process+0x59c>)
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017684:	4b94      	ldr	r3, [pc, #592]	; (80178d8 <tcp_process+0x5a0>)
 8017686:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017688:	885b      	ldrh	r3, [r3, #2]
 801768a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801768c:	4a92      	ldr	r2, [pc, #584]	; (80178d8 <tcp_process+0x5a0>)
 801768e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017690:	8812      	ldrh	r2, [r2, #0]
 8017692:	b292      	uxth	r2, r2
 8017694:	9202      	str	r2, [sp, #8]
 8017696:	9301      	str	r3, [sp, #4]
 8017698:	4b90      	ldr	r3, [pc, #576]	; (80178dc <tcp_process+0x5a4>)
 801769a:	9300      	str	r3, [sp, #0]
 801769c:	4b90      	ldr	r3, [pc, #576]	; (80178e0 <tcp_process+0x5a8>)
 801769e:	4602      	mov	r2, r0
 80176a0:	6878      	ldr	r0, [r7, #4]
 80176a2:	f003 f8ff 	bl	801a8a4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80176ac:	2b05      	cmp	r3, #5
 80176ae:	f200 8215 	bhi.w	8017adc <tcp_process+0x7a4>
          pcb->rtime = 0;
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	2200      	movs	r2, #0
 80176b6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80176b8:	6878      	ldr	r0, [r7, #4]
 80176ba:	f002 feb9 	bl	801a430 <tcp_rexmit_rto>
      break;
 80176be:	e20d      	b.n	8017adc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80176c0:	4b81      	ldr	r3, [pc, #516]	; (80178c8 <tcp_process+0x590>)
 80176c2:	781b      	ldrb	r3, [r3, #0]
 80176c4:	f003 0310 	and.w	r3, r3, #16
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	f000 80a1 	beq.w	8017810 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80176ce:	4b7f      	ldr	r3, [pc, #508]	; (80178cc <tcp_process+0x594>)
 80176d0:	681a      	ldr	r2, [r3, #0]
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80176d6:	1ad3      	subs	r3, r2, r3
 80176d8:	3b01      	subs	r3, #1
 80176da:	2b00      	cmp	r3, #0
 80176dc:	db7e      	blt.n	80177dc <tcp_process+0x4a4>
 80176de:	4b7b      	ldr	r3, [pc, #492]	; (80178cc <tcp_process+0x594>)
 80176e0:	681a      	ldr	r2, [r3, #0]
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80176e6:	1ad3      	subs	r3, r2, r3
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	dc77      	bgt.n	80177dc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	2204      	movs	r2, #4
 80176f0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d102      	bne.n	8017700 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80176fa:	23fa      	movs	r3, #250	; 0xfa
 80176fc:	76bb      	strb	r3, [r7, #26]
 80176fe:	e01d      	b.n	801773c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017704:	699b      	ldr	r3, [r3, #24]
 8017706:	2b00      	cmp	r3, #0
 8017708:	d106      	bne.n	8017718 <tcp_process+0x3e0>
 801770a:	4b76      	ldr	r3, [pc, #472]	; (80178e4 <tcp_process+0x5ac>)
 801770c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8017710:	4975      	ldr	r1, [pc, #468]	; (80178e8 <tcp_process+0x5b0>)
 8017712:	4876      	ldr	r0, [pc, #472]	; (80178ec <tcp_process+0x5b4>)
 8017714:	f006 fd96 	bl	801e244 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801771c:	699b      	ldr	r3, [r3, #24]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d00a      	beq.n	8017738 <tcp_process+0x400>
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017726:	699b      	ldr	r3, [r3, #24]
 8017728:	687a      	ldr	r2, [r7, #4]
 801772a:	6910      	ldr	r0, [r2, #16]
 801772c:	2200      	movs	r2, #0
 801772e:	6879      	ldr	r1, [r7, #4]
 8017730:	4798      	blx	r3
 8017732:	4603      	mov	r3, r0
 8017734:	76bb      	strb	r3, [r7, #26]
 8017736:	e001      	b.n	801773c <tcp_process+0x404>
 8017738:	23f0      	movs	r3, #240	; 0xf0
 801773a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801773c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d00a      	beq.n	801775a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8017744:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017748:	f113 0f0d 	cmn.w	r3, #13
 801774c:	d002      	beq.n	8017754 <tcp_process+0x41c>
              tcp_abort(pcb);
 801774e:	6878      	ldr	r0, [r7, #4]
 8017750:	f7fd fd04 	bl	801515c <tcp_abort>
            }
            return ERR_ABRT;
 8017754:	f06f 030c 	mvn.w	r3, #12
 8017758:	e1ce      	b.n	8017af8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801775a:	6878      	ldr	r0, [r7, #4]
 801775c:	f000 fae0 	bl	8017d20 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017760:	4b63      	ldr	r3, [pc, #396]	; (80178f0 <tcp_process+0x5b8>)
 8017762:	881b      	ldrh	r3, [r3, #0]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d005      	beq.n	8017774 <tcp_process+0x43c>
            recv_acked--;
 8017768:	4b61      	ldr	r3, [pc, #388]	; (80178f0 <tcp_process+0x5b8>)
 801776a:	881b      	ldrh	r3, [r3, #0]
 801776c:	3b01      	subs	r3, #1
 801776e:	b29a      	uxth	r2, r3
 8017770:	4b5f      	ldr	r3, [pc, #380]	; (80178f0 <tcp_process+0x5b8>)
 8017772:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017778:	009a      	lsls	r2, r3, #2
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801777e:	005b      	lsls	r3, r3, #1
 8017780:	f241 111c 	movw	r1, #4380	; 0x111c
 8017784:	428b      	cmp	r3, r1
 8017786:	bf38      	it	cc
 8017788:	460b      	movcc	r3, r1
 801778a:	429a      	cmp	r2, r3
 801778c:	d204      	bcs.n	8017798 <tcp_process+0x460>
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017792:	009b      	lsls	r3, r3, #2
 8017794:	b29b      	uxth	r3, r3
 8017796:	e00d      	b.n	80177b4 <tcp_process+0x47c>
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801779c:	005b      	lsls	r3, r3, #1
 801779e:	f241 121c 	movw	r2, #4380	; 0x111c
 80177a2:	4293      	cmp	r3, r2
 80177a4:	d904      	bls.n	80177b0 <tcp_process+0x478>
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80177aa:	005b      	lsls	r3, r3, #1
 80177ac:	b29b      	uxth	r3, r3
 80177ae:	e001      	b.n	80177b4 <tcp_process+0x47c>
 80177b0:	f241 131c 	movw	r3, #4380	; 0x111c
 80177b4:	687a      	ldr	r2, [r7, #4]
 80177b6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80177ba:	4b4e      	ldr	r3, [pc, #312]	; (80178f4 <tcp_process+0x5bc>)
 80177bc:	781b      	ldrb	r3, [r3, #0]
 80177be:	f003 0320 	and.w	r3, r3, #32
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d037      	beq.n	8017836 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	8b5b      	ldrh	r3, [r3, #26]
 80177ca:	f043 0302 	orr.w	r3, r3, #2
 80177ce:	b29a      	uxth	r2, r3
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	2207      	movs	r2, #7
 80177d8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80177da:	e02c      	b.n	8017836 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177dc:	4b3b      	ldr	r3, [pc, #236]	; (80178cc <tcp_process+0x594>)
 80177de:	6819      	ldr	r1, [r3, #0]
 80177e0:	4b3b      	ldr	r3, [pc, #236]	; (80178d0 <tcp_process+0x598>)
 80177e2:	881b      	ldrh	r3, [r3, #0]
 80177e4:	461a      	mov	r2, r3
 80177e6:	4b3b      	ldr	r3, [pc, #236]	; (80178d4 <tcp_process+0x59c>)
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80177ec:	4b3a      	ldr	r3, [pc, #232]	; (80178d8 <tcp_process+0x5a0>)
 80177ee:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177f0:	885b      	ldrh	r3, [r3, #2]
 80177f2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80177f4:	4a38      	ldr	r2, [pc, #224]	; (80178d8 <tcp_process+0x5a0>)
 80177f6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177f8:	8812      	ldrh	r2, [r2, #0]
 80177fa:	b292      	uxth	r2, r2
 80177fc:	9202      	str	r2, [sp, #8]
 80177fe:	9301      	str	r3, [sp, #4]
 8017800:	4b36      	ldr	r3, [pc, #216]	; (80178dc <tcp_process+0x5a4>)
 8017802:	9300      	str	r3, [sp, #0]
 8017804:	4b36      	ldr	r3, [pc, #216]	; (80178e0 <tcp_process+0x5a8>)
 8017806:	4602      	mov	r2, r0
 8017808:	6878      	ldr	r0, [r7, #4]
 801780a:	f003 f84b 	bl	801a8a4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801780e:	e167      	b.n	8017ae0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017810:	4b2d      	ldr	r3, [pc, #180]	; (80178c8 <tcp_process+0x590>)
 8017812:	781b      	ldrb	r3, [r3, #0]
 8017814:	f003 0302 	and.w	r3, r3, #2
 8017818:	2b00      	cmp	r3, #0
 801781a:	f000 8161 	beq.w	8017ae0 <tcp_process+0x7a8>
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017822:	1e5a      	subs	r2, r3, #1
 8017824:	4b2b      	ldr	r3, [pc, #172]	; (80178d4 <tcp_process+0x59c>)
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	429a      	cmp	r2, r3
 801782a:	f040 8159 	bne.w	8017ae0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801782e:	6878      	ldr	r0, [r7, #4]
 8017830:	f002 fe20 	bl	801a474 <tcp_rexmit>
      break;
 8017834:	e154      	b.n	8017ae0 <tcp_process+0x7a8>
 8017836:	e153      	b.n	8017ae0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017838:	6878      	ldr	r0, [r7, #4]
 801783a:	f000 fa71 	bl	8017d20 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801783e:	4b2d      	ldr	r3, [pc, #180]	; (80178f4 <tcp_process+0x5bc>)
 8017840:	781b      	ldrb	r3, [r3, #0]
 8017842:	f003 0320 	and.w	r3, r3, #32
 8017846:	2b00      	cmp	r3, #0
 8017848:	f000 814c 	beq.w	8017ae4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	8b5b      	ldrh	r3, [r3, #26]
 8017850:	f043 0302 	orr.w	r3, r3, #2
 8017854:	b29a      	uxth	r2, r3
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	2207      	movs	r2, #7
 801785e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017860:	e140      	b.n	8017ae4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8017862:	6878      	ldr	r0, [r7, #4]
 8017864:	f000 fa5c 	bl	8017d20 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017868:	4b22      	ldr	r3, [pc, #136]	; (80178f4 <tcp_process+0x5bc>)
 801786a:	781b      	ldrb	r3, [r3, #0]
 801786c:	f003 0320 	and.w	r3, r3, #32
 8017870:	2b00      	cmp	r3, #0
 8017872:	d071      	beq.n	8017958 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017874:	4b14      	ldr	r3, [pc, #80]	; (80178c8 <tcp_process+0x590>)
 8017876:	781b      	ldrb	r3, [r3, #0]
 8017878:	f003 0310 	and.w	r3, r3, #16
 801787c:	2b00      	cmp	r3, #0
 801787e:	d060      	beq.n	8017942 <tcp_process+0x60a>
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017884:	4b11      	ldr	r3, [pc, #68]	; (80178cc <tcp_process+0x594>)
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	429a      	cmp	r2, r3
 801788a:	d15a      	bne.n	8017942 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017890:	2b00      	cmp	r3, #0
 8017892:	d156      	bne.n	8017942 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	8b5b      	ldrh	r3, [r3, #26]
 8017898:	f043 0302 	orr.w	r3, r3, #2
 801789c:	b29a      	uxth	r2, r3
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80178a2:	6878      	ldr	r0, [r7, #4]
 80178a4:	f7fe fda8 	bl	80163f8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80178a8:	4b13      	ldr	r3, [pc, #76]	; (80178f8 <tcp_process+0x5c0>)
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	687a      	ldr	r2, [r7, #4]
 80178ae:	429a      	cmp	r2, r3
 80178b0:	d105      	bne.n	80178be <tcp_process+0x586>
 80178b2:	4b11      	ldr	r3, [pc, #68]	; (80178f8 <tcp_process+0x5c0>)
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	68db      	ldr	r3, [r3, #12]
 80178b8:	4a0f      	ldr	r2, [pc, #60]	; (80178f8 <tcp_process+0x5c0>)
 80178ba:	6013      	str	r3, [r2, #0]
 80178bc:	e02e      	b.n	801791c <tcp_process+0x5e4>
 80178be:	4b0e      	ldr	r3, [pc, #56]	; (80178f8 <tcp_process+0x5c0>)
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	617b      	str	r3, [r7, #20]
 80178c4:	e027      	b.n	8017916 <tcp_process+0x5de>
 80178c6:	bf00      	nop
 80178c8:	2405e9f0 	.word	0x2405e9f0
 80178cc:	2405e9e8 	.word	0x2405e9e8
 80178d0:	2405e9ee 	.word	0x2405e9ee
 80178d4:	2405e9e4 	.word	0x2405e9e4
 80178d8:	2405e9d4 	.word	0x2405e9d4
 80178dc:	24015f4c 	.word	0x24015f4c
 80178e0:	24015f50 	.word	0x24015f50
 80178e4:	08021308 	.word	0x08021308
 80178e8:	080215a8 	.word	0x080215a8
 80178ec:	08021354 	.word	0x08021354
 80178f0:	2405e9ec 	.word	0x2405e9ec
 80178f4:	2405e9f1 	.word	0x2405e9f1
 80178f8:	2405e9b8 	.word	0x2405e9b8
 80178fc:	697b      	ldr	r3, [r7, #20]
 80178fe:	68db      	ldr	r3, [r3, #12]
 8017900:	687a      	ldr	r2, [r7, #4]
 8017902:	429a      	cmp	r2, r3
 8017904:	d104      	bne.n	8017910 <tcp_process+0x5d8>
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	68da      	ldr	r2, [r3, #12]
 801790a:	697b      	ldr	r3, [r7, #20]
 801790c:	60da      	str	r2, [r3, #12]
 801790e:	e005      	b.n	801791c <tcp_process+0x5e4>
 8017910:	697b      	ldr	r3, [r7, #20]
 8017912:	68db      	ldr	r3, [r3, #12]
 8017914:	617b      	str	r3, [r7, #20]
 8017916:	697b      	ldr	r3, [r7, #20]
 8017918:	2b00      	cmp	r3, #0
 801791a:	d1ef      	bne.n	80178fc <tcp_process+0x5c4>
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	2200      	movs	r2, #0
 8017920:	60da      	str	r2, [r3, #12]
 8017922:	4b77      	ldr	r3, [pc, #476]	; (8017b00 <tcp_process+0x7c8>)
 8017924:	2201      	movs	r2, #1
 8017926:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	220a      	movs	r2, #10
 801792c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801792e:	4b75      	ldr	r3, [pc, #468]	; (8017b04 <tcp_process+0x7cc>)
 8017930:	681a      	ldr	r2, [r3, #0]
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	60da      	str	r2, [r3, #12]
 8017936:	4a73      	ldr	r2, [pc, #460]	; (8017b04 <tcp_process+0x7cc>)
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	6013      	str	r3, [r2, #0]
 801793c:	f003 f974 	bl	801ac28 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017940:	e0d2      	b.n	8017ae8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	8b5b      	ldrh	r3, [r3, #26]
 8017946:	f043 0302 	orr.w	r3, r3, #2
 801794a:	b29a      	uxth	r2, r3
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	2208      	movs	r2, #8
 8017954:	751a      	strb	r2, [r3, #20]
      break;
 8017956:	e0c7      	b.n	8017ae8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017958:	4b6b      	ldr	r3, [pc, #428]	; (8017b08 <tcp_process+0x7d0>)
 801795a:	781b      	ldrb	r3, [r3, #0]
 801795c:	f003 0310 	and.w	r3, r3, #16
 8017960:	2b00      	cmp	r3, #0
 8017962:	f000 80c1 	beq.w	8017ae8 <tcp_process+0x7b0>
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801796a:	4b68      	ldr	r3, [pc, #416]	; (8017b0c <tcp_process+0x7d4>)
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	429a      	cmp	r2, r3
 8017970:	f040 80ba 	bne.w	8017ae8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017978:	2b00      	cmp	r3, #0
 801797a:	f040 80b5 	bne.w	8017ae8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	2206      	movs	r2, #6
 8017982:	751a      	strb	r2, [r3, #20]
      break;
 8017984:	e0b0      	b.n	8017ae8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8017986:	6878      	ldr	r0, [r7, #4]
 8017988:	f000 f9ca 	bl	8017d20 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801798c:	4b60      	ldr	r3, [pc, #384]	; (8017b10 <tcp_process+0x7d8>)
 801798e:	781b      	ldrb	r3, [r3, #0]
 8017990:	f003 0320 	and.w	r3, r3, #32
 8017994:	2b00      	cmp	r3, #0
 8017996:	f000 80a9 	beq.w	8017aec <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	8b5b      	ldrh	r3, [r3, #26]
 801799e:	f043 0302 	orr.w	r3, r3, #2
 80179a2:	b29a      	uxth	r2, r3
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80179a8:	6878      	ldr	r0, [r7, #4]
 80179aa:	f7fe fd25 	bl	80163f8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80179ae:	4b59      	ldr	r3, [pc, #356]	; (8017b14 <tcp_process+0x7dc>)
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	687a      	ldr	r2, [r7, #4]
 80179b4:	429a      	cmp	r2, r3
 80179b6:	d105      	bne.n	80179c4 <tcp_process+0x68c>
 80179b8:	4b56      	ldr	r3, [pc, #344]	; (8017b14 <tcp_process+0x7dc>)
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	68db      	ldr	r3, [r3, #12]
 80179be:	4a55      	ldr	r2, [pc, #340]	; (8017b14 <tcp_process+0x7dc>)
 80179c0:	6013      	str	r3, [r2, #0]
 80179c2:	e013      	b.n	80179ec <tcp_process+0x6b4>
 80179c4:	4b53      	ldr	r3, [pc, #332]	; (8017b14 <tcp_process+0x7dc>)
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	613b      	str	r3, [r7, #16]
 80179ca:	e00c      	b.n	80179e6 <tcp_process+0x6ae>
 80179cc:	693b      	ldr	r3, [r7, #16]
 80179ce:	68db      	ldr	r3, [r3, #12]
 80179d0:	687a      	ldr	r2, [r7, #4]
 80179d2:	429a      	cmp	r2, r3
 80179d4:	d104      	bne.n	80179e0 <tcp_process+0x6a8>
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	68da      	ldr	r2, [r3, #12]
 80179da:	693b      	ldr	r3, [r7, #16]
 80179dc:	60da      	str	r2, [r3, #12]
 80179de:	e005      	b.n	80179ec <tcp_process+0x6b4>
 80179e0:	693b      	ldr	r3, [r7, #16]
 80179e2:	68db      	ldr	r3, [r3, #12]
 80179e4:	613b      	str	r3, [r7, #16]
 80179e6:	693b      	ldr	r3, [r7, #16]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d1ef      	bne.n	80179cc <tcp_process+0x694>
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	2200      	movs	r2, #0
 80179f0:	60da      	str	r2, [r3, #12]
 80179f2:	4b43      	ldr	r3, [pc, #268]	; (8017b00 <tcp_process+0x7c8>)
 80179f4:	2201      	movs	r2, #1
 80179f6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	220a      	movs	r2, #10
 80179fc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80179fe:	4b41      	ldr	r3, [pc, #260]	; (8017b04 <tcp_process+0x7cc>)
 8017a00:	681a      	ldr	r2, [r3, #0]
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	60da      	str	r2, [r3, #12]
 8017a06:	4a3f      	ldr	r2, [pc, #252]	; (8017b04 <tcp_process+0x7cc>)
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	6013      	str	r3, [r2, #0]
 8017a0c:	f003 f90c 	bl	801ac28 <tcp_timer_needed>
      }
      break;
 8017a10:	e06c      	b.n	8017aec <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8017a12:	6878      	ldr	r0, [r7, #4]
 8017a14:	f000 f984 	bl	8017d20 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017a18:	4b3b      	ldr	r3, [pc, #236]	; (8017b08 <tcp_process+0x7d0>)
 8017a1a:	781b      	ldrb	r3, [r3, #0]
 8017a1c:	f003 0310 	and.w	r3, r3, #16
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d065      	beq.n	8017af0 <tcp_process+0x7b8>
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017a28:	4b38      	ldr	r3, [pc, #224]	; (8017b0c <tcp_process+0x7d4>)
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	429a      	cmp	r2, r3
 8017a2e:	d15f      	bne.n	8017af0 <tcp_process+0x7b8>
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d15b      	bne.n	8017af0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8017a38:	6878      	ldr	r0, [r7, #4]
 8017a3a:	f7fe fcdd 	bl	80163f8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017a3e:	4b35      	ldr	r3, [pc, #212]	; (8017b14 <tcp_process+0x7dc>)
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	687a      	ldr	r2, [r7, #4]
 8017a44:	429a      	cmp	r2, r3
 8017a46:	d105      	bne.n	8017a54 <tcp_process+0x71c>
 8017a48:	4b32      	ldr	r3, [pc, #200]	; (8017b14 <tcp_process+0x7dc>)
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	68db      	ldr	r3, [r3, #12]
 8017a4e:	4a31      	ldr	r2, [pc, #196]	; (8017b14 <tcp_process+0x7dc>)
 8017a50:	6013      	str	r3, [r2, #0]
 8017a52:	e013      	b.n	8017a7c <tcp_process+0x744>
 8017a54:	4b2f      	ldr	r3, [pc, #188]	; (8017b14 <tcp_process+0x7dc>)
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	60fb      	str	r3, [r7, #12]
 8017a5a:	e00c      	b.n	8017a76 <tcp_process+0x73e>
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	68db      	ldr	r3, [r3, #12]
 8017a60:	687a      	ldr	r2, [r7, #4]
 8017a62:	429a      	cmp	r2, r3
 8017a64:	d104      	bne.n	8017a70 <tcp_process+0x738>
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	68da      	ldr	r2, [r3, #12]
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	60da      	str	r2, [r3, #12]
 8017a6e:	e005      	b.n	8017a7c <tcp_process+0x744>
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	68db      	ldr	r3, [r3, #12]
 8017a74:	60fb      	str	r3, [r7, #12]
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d1ef      	bne.n	8017a5c <tcp_process+0x724>
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	2200      	movs	r2, #0
 8017a80:	60da      	str	r2, [r3, #12]
 8017a82:	4b1f      	ldr	r3, [pc, #124]	; (8017b00 <tcp_process+0x7c8>)
 8017a84:	2201      	movs	r2, #1
 8017a86:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	220a      	movs	r2, #10
 8017a8c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017a8e:	4b1d      	ldr	r3, [pc, #116]	; (8017b04 <tcp_process+0x7cc>)
 8017a90:	681a      	ldr	r2, [r3, #0]
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	60da      	str	r2, [r3, #12]
 8017a96:	4a1b      	ldr	r2, [pc, #108]	; (8017b04 <tcp_process+0x7cc>)
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	6013      	str	r3, [r2, #0]
 8017a9c:	f003 f8c4 	bl	801ac28 <tcp_timer_needed>
      }
      break;
 8017aa0:	e026      	b.n	8017af0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8017aa2:	6878      	ldr	r0, [r7, #4]
 8017aa4:	f000 f93c 	bl	8017d20 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017aa8:	4b17      	ldr	r3, [pc, #92]	; (8017b08 <tcp_process+0x7d0>)
 8017aaa:	781b      	ldrb	r3, [r3, #0]
 8017aac:	f003 0310 	and.w	r3, r3, #16
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d01f      	beq.n	8017af4 <tcp_process+0x7bc>
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017ab8:	4b14      	ldr	r3, [pc, #80]	; (8017b0c <tcp_process+0x7d4>)
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	429a      	cmp	r2, r3
 8017abe:	d119      	bne.n	8017af4 <tcp_process+0x7bc>
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d115      	bne.n	8017af4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017ac8:	4b11      	ldr	r3, [pc, #68]	; (8017b10 <tcp_process+0x7d8>)
 8017aca:	781b      	ldrb	r3, [r3, #0]
 8017acc:	f043 0310 	orr.w	r3, r3, #16
 8017ad0:	b2da      	uxtb	r2, r3
 8017ad2:	4b0f      	ldr	r3, [pc, #60]	; (8017b10 <tcp_process+0x7d8>)
 8017ad4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8017ad6:	e00d      	b.n	8017af4 <tcp_process+0x7bc>
    default:
      break;
 8017ad8:	bf00      	nop
 8017ada:	e00c      	b.n	8017af6 <tcp_process+0x7be>
      break;
 8017adc:	bf00      	nop
 8017ade:	e00a      	b.n	8017af6 <tcp_process+0x7be>
      break;
 8017ae0:	bf00      	nop
 8017ae2:	e008      	b.n	8017af6 <tcp_process+0x7be>
      break;
 8017ae4:	bf00      	nop
 8017ae6:	e006      	b.n	8017af6 <tcp_process+0x7be>
      break;
 8017ae8:	bf00      	nop
 8017aea:	e004      	b.n	8017af6 <tcp_process+0x7be>
      break;
 8017aec:	bf00      	nop
 8017aee:	e002      	b.n	8017af6 <tcp_process+0x7be>
      break;
 8017af0:	bf00      	nop
 8017af2:	e000      	b.n	8017af6 <tcp_process+0x7be>
      break;
 8017af4:	bf00      	nop
  }
  return ERR_OK;
 8017af6:	2300      	movs	r3, #0
}
 8017af8:	4618      	mov	r0, r3
 8017afa:	3724      	adds	r7, #36	; 0x24
 8017afc:	46bd      	mov	sp, r7
 8017afe:	bd90      	pop	{r4, r7, pc}
 8017b00:	2405e9c0 	.word	0x2405e9c0
 8017b04:	2405e9bc 	.word	0x2405e9bc
 8017b08:	2405e9f0 	.word	0x2405e9f0
 8017b0c:	2405e9e8 	.word	0x2405e9e8
 8017b10:	2405e9f1 	.word	0x2405e9f1
 8017b14:	2405e9b8 	.word	0x2405e9b8

08017b18 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8017b18:	b590      	push	{r4, r7, lr}
 8017b1a:	b085      	sub	sp, #20
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	6078      	str	r0, [r7, #4]
 8017b20:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d106      	bne.n	8017b36 <tcp_oos_insert_segment+0x1e>
 8017b28:	4b3b      	ldr	r3, [pc, #236]	; (8017c18 <tcp_oos_insert_segment+0x100>)
 8017b2a:	f240 421f 	movw	r2, #1055	; 0x41f
 8017b2e:	493b      	ldr	r1, [pc, #236]	; (8017c1c <tcp_oos_insert_segment+0x104>)
 8017b30:	483b      	ldr	r0, [pc, #236]	; (8017c20 <tcp_oos_insert_segment+0x108>)
 8017b32:	f006 fb87 	bl	801e244 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	68db      	ldr	r3, [r3, #12]
 8017b3a:	899b      	ldrh	r3, [r3, #12]
 8017b3c:	b29b      	uxth	r3, r3
 8017b3e:	4618      	mov	r0, r3
 8017b40:	f7fa ffa2 	bl	8012a88 <lwip_htons>
 8017b44:	4603      	mov	r3, r0
 8017b46:	b2db      	uxtb	r3, r3
 8017b48:	f003 0301 	and.w	r3, r3, #1
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d028      	beq.n	8017ba2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017b50:	6838      	ldr	r0, [r7, #0]
 8017b52:	f7fe f981 	bl	8015e58 <tcp_segs_free>
    next = NULL;
 8017b56:	2300      	movs	r3, #0
 8017b58:	603b      	str	r3, [r7, #0]
 8017b5a:	e056      	b.n	8017c0a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017b5c:	683b      	ldr	r3, [r7, #0]
 8017b5e:	68db      	ldr	r3, [r3, #12]
 8017b60:	899b      	ldrh	r3, [r3, #12]
 8017b62:	b29b      	uxth	r3, r3
 8017b64:	4618      	mov	r0, r3
 8017b66:	f7fa ff8f 	bl	8012a88 <lwip_htons>
 8017b6a:	4603      	mov	r3, r0
 8017b6c:	b2db      	uxtb	r3, r3
 8017b6e:	f003 0301 	and.w	r3, r3, #1
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d00d      	beq.n	8017b92 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	68db      	ldr	r3, [r3, #12]
 8017b7a:	899b      	ldrh	r3, [r3, #12]
 8017b7c:	b29c      	uxth	r4, r3
 8017b7e:	2001      	movs	r0, #1
 8017b80:	f7fa ff82 	bl	8012a88 <lwip_htons>
 8017b84:	4603      	mov	r3, r0
 8017b86:	461a      	mov	r2, r3
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	68db      	ldr	r3, [r3, #12]
 8017b8c:	4322      	orrs	r2, r4
 8017b8e:	b292      	uxth	r2, r2
 8017b90:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017b92:	683b      	ldr	r3, [r7, #0]
 8017b94:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8017b96:	683b      	ldr	r3, [r7, #0]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017b9c:	68f8      	ldr	r0, [r7, #12]
 8017b9e:	f7fe f970 	bl	8015e82 <tcp_seg_free>
    while (next &&
 8017ba2:	683b      	ldr	r3, [r7, #0]
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d00e      	beq.n	8017bc6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	891b      	ldrh	r3, [r3, #8]
 8017bac:	461a      	mov	r2, r3
 8017bae:	4b1d      	ldr	r3, [pc, #116]	; (8017c24 <tcp_oos_insert_segment+0x10c>)
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	441a      	add	r2, r3
 8017bb4:	683b      	ldr	r3, [r7, #0]
 8017bb6:	68db      	ldr	r3, [r3, #12]
 8017bb8:	685b      	ldr	r3, [r3, #4]
 8017bba:	6839      	ldr	r1, [r7, #0]
 8017bbc:	8909      	ldrh	r1, [r1, #8]
 8017bbe:	440b      	add	r3, r1
 8017bc0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	daca      	bge.n	8017b5c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8017bc6:	683b      	ldr	r3, [r7, #0]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d01e      	beq.n	8017c0a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	891b      	ldrh	r3, [r3, #8]
 8017bd0:	461a      	mov	r2, r3
 8017bd2:	4b14      	ldr	r3, [pc, #80]	; (8017c24 <tcp_oos_insert_segment+0x10c>)
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	441a      	add	r2, r3
 8017bd8:	683b      	ldr	r3, [r7, #0]
 8017bda:	68db      	ldr	r3, [r3, #12]
 8017bdc:	685b      	ldr	r3, [r3, #4]
 8017bde:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	dd12      	ble.n	8017c0a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8017be4:	683b      	ldr	r3, [r7, #0]
 8017be6:	68db      	ldr	r3, [r3, #12]
 8017be8:	685b      	ldr	r3, [r3, #4]
 8017bea:	b29a      	uxth	r2, r3
 8017bec:	4b0d      	ldr	r3, [pc, #52]	; (8017c24 <tcp_oos_insert_segment+0x10c>)
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	b29b      	uxth	r3, r3
 8017bf2:	1ad3      	subs	r3, r2, r3
 8017bf4:	b29a      	uxth	r2, r3
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	685a      	ldr	r2, [r3, #4]
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	891b      	ldrh	r3, [r3, #8]
 8017c02:	4619      	mov	r1, r3
 8017c04:	4610      	mov	r0, r2
 8017c06:	f7fc fb33 	bl	8014270 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	683a      	ldr	r2, [r7, #0]
 8017c0e:	601a      	str	r2, [r3, #0]
}
 8017c10:	bf00      	nop
 8017c12:	3714      	adds	r7, #20
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bd90      	pop	{r4, r7, pc}
 8017c18:	08021308 	.word	0x08021308
 8017c1c:	080215c8 	.word	0x080215c8
 8017c20:	08021354 	.word	0x08021354
 8017c24:	2405e9e4 	.word	0x2405e9e4

08017c28 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8017c28:	b5b0      	push	{r4, r5, r7, lr}
 8017c2a:	b086      	sub	sp, #24
 8017c2c:	af00      	add	r7, sp, #0
 8017c2e:	60f8      	str	r0, [r7, #12]
 8017c30:	60b9      	str	r1, [r7, #8]
 8017c32:	607a      	str	r2, [r7, #4]
 8017c34:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8017c36:	e03e      	b.n	8017cb6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8017c38:	68bb      	ldr	r3, [r7, #8]
 8017c3a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017c3c:	68bb      	ldr	r3, [r7, #8]
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8017c42:	697b      	ldr	r3, [r7, #20]
 8017c44:	685b      	ldr	r3, [r3, #4]
 8017c46:	4618      	mov	r0, r3
 8017c48:	f7fc fd26 	bl	8014698 <pbuf_clen>
 8017c4c:	4603      	mov	r3, r0
 8017c4e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017c56:	8a7a      	ldrh	r2, [r7, #18]
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	d906      	bls.n	8017c6a <tcp_free_acked_segments+0x42>
 8017c5c:	4b2a      	ldr	r3, [pc, #168]	; (8017d08 <tcp_free_acked_segments+0xe0>)
 8017c5e:	f240 4257 	movw	r2, #1111	; 0x457
 8017c62:	492a      	ldr	r1, [pc, #168]	; (8017d0c <tcp_free_acked_segments+0xe4>)
 8017c64:	482a      	ldr	r0, [pc, #168]	; (8017d10 <tcp_free_acked_segments+0xe8>)
 8017c66:	f006 faed 	bl	801e244 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017c6a:	68fb      	ldr	r3, [r7, #12]
 8017c6c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8017c70:	8a7b      	ldrh	r3, [r7, #18]
 8017c72:	1ad3      	subs	r3, r2, r3
 8017c74:	b29a      	uxth	r2, r3
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017c7c:	697b      	ldr	r3, [r7, #20]
 8017c7e:	891a      	ldrh	r2, [r3, #8]
 8017c80:	4b24      	ldr	r3, [pc, #144]	; (8017d14 <tcp_free_acked_segments+0xec>)
 8017c82:	881b      	ldrh	r3, [r3, #0]
 8017c84:	4413      	add	r3, r2
 8017c86:	b29a      	uxth	r2, r3
 8017c88:	4b22      	ldr	r3, [pc, #136]	; (8017d14 <tcp_free_acked_segments+0xec>)
 8017c8a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017c8c:	6978      	ldr	r0, [r7, #20]
 8017c8e:	f7fe f8f8 	bl	8015e82 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d00c      	beq.n	8017cb6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017c9c:	68bb      	ldr	r3, [r7, #8]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d109      	bne.n	8017cb6 <tcp_free_acked_segments+0x8e>
 8017ca2:	683b      	ldr	r3, [r7, #0]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d106      	bne.n	8017cb6 <tcp_free_acked_segments+0x8e>
 8017ca8:	4b17      	ldr	r3, [pc, #92]	; (8017d08 <tcp_free_acked_segments+0xe0>)
 8017caa:	f240 4261 	movw	r2, #1121	; 0x461
 8017cae:	491a      	ldr	r1, [pc, #104]	; (8017d18 <tcp_free_acked_segments+0xf0>)
 8017cb0:	4817      	ldr	r0, [pc, #92]	; (8017d10 <tcp_free_acked_segments+0xe8>)
 8017cb2:	f006 fac7 	bl	801e244 <iprintf>
  while (seg_list != NULL &&
 8017cb6:	68bb      	ldr	r3, [r7, #8]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d020      	beq.n	8017cfe <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017cbc:	68bb      	ldr	r3, [r7, #8]
 8017cbe:	68db      	ldr	r3, [r3, #12]
 8017cc0:	685b      	ldr	r3, [r3, #4]
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	f7fa fef5 	bl	8012ab2 <lwip_htonl>
 8017cc8:	4604      	mov	r4, r0
 8017cca:	68bb      	ldr	r3, [r7, #8]
 8017ccc:	891b      	ldrh	r3, [r3, #8]
 8017cce:	461d      	mov	r5, r3
 8017cd0:	68bb      	ldr	r3, [r7, #8]
 8017cd2:	68db      	ldr	r3, [r3, #12]
 8017cd4:	899b      	ldrh	r3, [r3, #12]
 8017cd6:	b29b      	uxth	r3, r3
 8017cd8:	4618      	mov	r0, r3
 8017cda:	f7fa fed5 	bl	8012a88 <lwip_htons>
 8017cde:	4603      	mov	r3, r0
 8017ce0:	b2db      	uxtb	r3, r3
 8017ce2:	f003 0303 	and.w	r3, r3, #3
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d001      	beq.n	8017cee <tcp_free_acked_segments+0xc6>
 8017cea:	2301      	movs	r3, #1
 8017cec:	e000      	b.n	8017cf0 <tcp_free_acked_segments+0xc8>
 8017cee:	2300      	movs	r3, #0
 8017cf0:	442b      	add	r3, r5
 8017cf2:	18e2      	adds	r2, r4, r3
 8017cf4:	4b09      	ldr	r3, [pc, #36]	; (8017d1c <tcp_free_acked_segments+0xf4>)
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	dd9c      	ble.n	8017c38 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017cfe:	68bb      	ldr	r3, [r7, #8]
}
 8017d00:	4618      	mov	r0, r3
 8017d02:	3718      	adds	r7, #24
 8017d04:	46bd      	mov	sp, r7
 8017d06:	bdb0      	pop	{r4, r5, r7, pc}
 8017d08:	08021308 	.word	0x08021308
 8017d0c:	080215f0 	.word	0x080215f0
 8017d10:	08021354 	.word	0x08021354
 8017d14:	2405e9ec 	.word	0x2405e9ec
 8017d18:	08021618 	.word	0x08021618
 8017d1c:	2405e9e8 	.word	0x2405e9e8

08017d20 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8017d20:	b5b0      	push	{r4, r5, r7, lr}
 8017d22:	b094      	sub	sp, #80	; 0x50
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8017d28:	2300      	movs	r3, #0
 8017d2a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d106      	bne.n	8017d40 <tcp_receive+0x20>
 8017d32:	4b91      	ldr	r3, [pc, #580]	; (8017f78 <tcp_receive+0x258>)
 8017d34:	f240 427b 	movw	r2, #1147	; 0x47b
 8017d38:	4990      	ldr	r1, [pc, #576]	; (8017f7c <tcp_receive+0x25c>)
 8017d3a:	4891      	ldr	r0, [pc, #580]	; (8017f80 <tcp_receive+0x260>)
 8017d3c:	f006 fa82 	bl	801e244 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	7d1b      	ldrb	r3, [r3, #20]
 8017d44:	2b03      	cmp	r3, #3
 8017d46:	d806      	bhi.n	8017d56 <tcp_receive+0x36>
 8017d48:	4b8b      	ldr	r3, [pc, #556]	; (8017f78 <tcp_receive+0x258>)
 8017d4a:	f240 427c 	movw	r2, #1148	; 0x47c
 8017d4e:	498d      	ldr	r1, [pc, #564]	; (8017f84 <tcp_receive+0x264>)
 8017d50:	488b      	ldr	r0, [pc, #556]	; (8017f80 <tcp_receive+0x260>)
 8017d52:	f006 fa77 	bl	801e244 <iprintf>

  if (flags & TCP_ACK) {
 8017d56:	4b8c      	ldr	r3, [pc, #560]	; (8017f88 <tcp_receive+0x268>)
 8017d58:	781b      	ldrb	r3, [r3, #0]
 8017d5a:	f003 0310 	and.w	r3, r3, #16
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	f000 8264 	beq.w	801822c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017d6a:	461a      	mov	r2, r3
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017d70:	4413      	add	r3, r2
 8017d72:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017d78:	4b84      	ldr	r3, [pc, #528]	; (8017f8c <tcp_receive+0x26c>)
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	1ad3      	subs	r3, r2, r3
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	db1b      	blt.n	8017dba <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017d86:	4b81      	ldr	r3, [pc, #516]	; (8017f8c <tcp_receive+0x26c>)
 8017d88:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017d8a:	429a      	cmp	r2, r3
 8017d8c:	d106      	bne.n	8017d9c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017d92:	4b7f      	ldr	r3, [pc, #508]	; (8017f90 <tcp_receive+0x270>)
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	1ad3      	subs	r3, r2, r3
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	db0e      	blt.n	8017dba <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017da0:	4b7b      	ldr	r3, [pc, #492]	; (8017f90 <tcp_receive+0x270>)
 8017da2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017da4:	429a      	cmp	r2, r3
 8017da6:	d125      	bne.n	8017df4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017da8:	4b7a      	ldr	r3, [pc, #488]	; (8017f94 <tcp_receive+0x274>)
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	89db      	ldrh	r3, [r3, #14]
 8017dae:	b29a      	uxth	r2, r3
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017db6:	429a      	cmp	r2, r3
 8017db8:	d91c      	bls.n	8017df4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017dba:	4b76      	ldr	r3, [pc, #472]	; (8017f94 <tcp_receive+0x274>)
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	89db      	ldrh	r3, [r3, #14]
 8017dc0:	b29a      	uxth	r2, r3
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017dd4:	429a      	cmp	r2, r3
 8017dd6:	d205      	bcs.n	8017de4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8017de4:	4b69      	ldr	r3, [pc, #420]	; (8017f8c <tcp_receive+0x26c>)
 8017de6:	681a      	ldr	r2, [r3, #0]
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8017dec:	4b68      	ldr	r3, [pc, #416]	; (8017f90 <tcp_receive+0x270>)
 8017dee:	681a      	ldr	r2, [r3, #0]
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8017df4:	4b66      	ldr	r3, [pc, #408]	; (8017f90 <tcp_receive+0x270>)
 8017df6:	681a      	ldr	r2, [r3, #0]
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017dfc:	1ad3      	subs	r3, r2, r3
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	dc58      	bgt.n	8017eb4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8017e02:	4b65      	ldr	r3, [pc, #404]	; (8017f98 <tcp_receive+0x278>)
 8017e04:	881b      	ldrh	r3, [r3, #0]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d14b      	bne.n	8017ea2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e0e:	687a      	ldr	r2, [r7, #4]
 8017e10:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8017e14:	4413      	add	r3, r2
 8017e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e18:	429a      	cmp	r2, r3
 8017e1a:	d142      	bne.n	8017ea2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	db3d      	blt.n	8017ea2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017e2a:	4b59      	ldr	r3, [pc, #356]	; (8017f90 <tcp_receive+0x270>)
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	429a      	cmp	r2, r3
 8017e30:	d137      	bne.n	8017ea2 <tcp_receive+0x182>
              found_dupack = 1;
 8017e32:	2301      	movs	r3, #1
 8017e34:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017e3c:	2bff      	cmp	r3, #255	; 0xff
 8017e3e:	d007      	beq.n	8017e50 <tcp_receive+0x130>
                ++pcb->dupacks;
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017e46:	3301      	adds	r3, #1
 8017e48:	b2da      	uxtb	r2, r3
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017e56:	2b03      	cmp	r3, #3
 8017e58:	d91b      	bls.n	8017e92 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e64:	4413      	add	r3, r2
 8017e66:	b29a      	uxth	r2, r3
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017e6e:	429a      	cmp	r2, r3
 8017e70:	d30a      	bcc.n	8017e88 <tcp_receive+0x168>
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e7c:	4413      	add	r3, r2
 8017e7e:	b29a      	uxth	r2, r3
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017e86:	e004      	b.n	8017e92 <tcp_receive+0x172>
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017e98:	2b02      	cmp	r3, #2
 8017e9a:	d902      	bls.n	8017ea2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017e9c:	6878      	ldr	r0, [r7, #4]
 8017e9e:	f002 fb55 	bl	801a54c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	f040 8161 	bne.w	801816c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	2200      	movs	r2, #0
 8017eae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017eb2:	e15b      	b.n	801816c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017eb4:	4b36      	ldr	r3, [pc, #216]	; (8017f90 <tcp_receive+0x270>)
 8017eb6:	681a      	ldr	r2, [r3, #0]
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ebc:	1ad3      	subs	r3, r2, r3
 8017ebe:	3b01      	subs	r3, #1
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	f2c0 814e 	blt.w	8018162 <tcp_receive+0x442>
 8017ec6:	4b32      	ldr	r3, [pc, #200]	; (8017f90 <tcp_receive+0x270>)
 8017ec8:	681a      	ldr	r2, [r3, #0]
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017ece:	1ad3      	subs	r3, r2, r3
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	f300 8146 	bgt.w	8018162 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	8b5b      	ldrh	r3, [r3, #26]
 8017eda:	f003 0304 	and.w	r3, r3, #4
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d010      	beq.n	8017f04 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	8b5b      	ldrh	r3, [r3, #26]
 8017ee6:	f023 0304 	bic.w	r3, r3, #4
 8017eea:	b29a      	uxth	r2, r3
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	2200      	movs	r2, #0
 8017f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	2200      	movs	r2, #0
 8017f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017f12:	10db      	asrs	r3, r3, #3
 8017f14:	b21b      	sxth	r3, r3
 8017f16:	b29a      	uxth	r2, r3
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017f1e:	b29b      	uxth	r3, r3
 8017f20:	4413      	add	r3, r2
 8017f22:	b29b      	uxth	r3, r3
 8017f24:	b21a      	sxth	r2, r3
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8017f2c:	4b18      	ldr	r3, [pc, #96]	; (8017f90 <tcp_receive+0x270>)
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	b29a      	uxth	r2, r3
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f36:	b29b      	uxth	r3, r3
 8017f38:	1ad3      	subs	r3, r2, r3
 8017f3a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	2200      	movs	r2, #0
 8017f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8017f44:	4b12      	ldr	r3, [pc, #72]	; (8017f90 <tcp_receive+0x270>)
 8017f46:	681a      	ldr	r2, [r3, #0]
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	7d1b      	ldrb	r3, [r3, #20]
 8017f50:	2b03      	cmp	r3, #3
 8017f52:	f240 8097 	bls.w	8018084 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017f62:	429a      	cmp	r2, r3
 8017f64:	d245      	bcs.n	8017ff2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	8b5b      	ldrh	r3, [r3, #26]
 8017f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d014      	beq.n	8017f9c <tcp_receive+0x27c>
 8017f72:	2301      	movs	r3, #1
 8017f74:	e013      	b.n	8017f9e <tcp_receive+0x27e>
 8017f76:	bf00      	nop
 8017f78:	08021308 	.word	0x08021308
 8017f7c:	08021638 	.word	0x08021638
 8017f80:	08021354 	.word	0x08021354
 8017f84:	08021654 	.word	0x08021654
 8017f88:	2405e9f0 	.word	0x2405e9f0
 8017f8c:	2405e9e4 	.word	0x2405e9e4
 8017f90:	2405e9e8 	.word	0x2405e9e8
 8017f94:	2405e9d4 	.word	0x2405e9d4
 8017f98:	2405e9ee 	.word	0x2405e9ee
 8017f9c:	2302      	movs	r3, #2
 8017f9e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8017fa2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8017fa6:	b29a      	uxth	r2, r3
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017fac:	fb12 f303 	smulbb	r3, r2, r3
 8017fb0:	b29b      	uxth	r3, r3
 8017fb2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017fb4:	4293      	cmp	r3, r2
 8017fb6:	bf28      	it	cs
 8017fb8:	4613      	movcs	r3, r2
 8017fba:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017fc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017fc4:	4413      	add	r3, r2
 8017fc6:	b29a      	uxth	r2, r3
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017fce:	429a      	cmp	r2, r3
 8017fd0:	d309      	bcc.n	8017fe6 <tcp_receive+0x2c6>
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017fd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017fda:	4413      	add	r3, r2
 8017fdc:	b29a      	uxth	r2, r3
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017fe4:	e04e      	b.n	8018084 <tcp_receive+0x364>
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017fec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017ff0:	e048      	b.n	8018084 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017ff8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017ffa:	4413      	add	r3, r2
 8017ffc:	b29a      	uxth	r2, r3
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8018004:	429a      	cmp	r2, r3
 8018006:	d309      	bcc.n	801801c <tcp_receive+0x2fc>
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801800e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018010:	4413      	add	r3, r2
 8018012:	b29a      	uxth	r2, r3
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801801a:	e004      	b.n	8018026 <tcp_receive+0x306>
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018022:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018032:	429a      	cmp	r2, r3
 8018034:	d326      	bcc.n	8018084 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018042:	1ad3      	subs	r3, r2, r3
 8018044:	b29a      	uxth	r2, r3
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018056:	4413      	add	r3, r2
 8018058:	b29a      	uxth	r2, r3
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018060:	429a      	cmp	r2, r3
 8018062:	d30a      	bcc.n	801807a <tcp_receive+0x35a>
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801806e:	4413      	add	r3, r2
 8018070:	b29a      	uxth	r2, r3
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018078:	e004      	b.n	8018084 <tcp_receive+0x364>
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018080:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801808c:	4a98      	ldr	r2, [pc, #608]	; (80182f0 <tcp_receive+0x5d0>)
 801808e:	6878      	ldr	r0, [r7, #4]
 8018090:	f7ff fdca 	bl	8017c28 <tcp_free_acked_segments>
 8018094:	4602      	mov	r2, r0
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80180a2:	4a94      	ldr	r2, [pc, #592]	; (80182f4 <tcp_receive+0x5d4>)
 80180a4:	6878      	ldr	r0, [r7, #4]
 80180a6:	f7ff fdbf 	bl	8017c28 <tcp_free_acked_segments>
 80180aa:	4602      	mov	r2, r0
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d104      	bne.n	80180c2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80180be:	861a      	strh	r2, [r3, #48]	; 0x30
 80180c0:	e002      	b.n	80180c8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	2200      	movs	r2, #0
 80180c6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	2200      	movs	r2, #0
 80180cc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d103      	bne.n	80180de <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	2200      	movs	r2, #0
 80180da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80180e4:	4b84      	ldr	r3, [pc, #528]	; (80182f8 <tcp_receive+0x5d8>)
 80180e6:	881b      	ldrh	r3, [r3, #0]
 80180e8:	4413      	add	r3, r2
 80180ea:	b29a      	uxth	r2, r3
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	8b5b      	ldrh	r3, [r3, #26]
 80180f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d035      	beq.n	801816a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018102:	2b00      	cmp	r3, #0
 8018104:	d118      	bne.n	8018138 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801810a:	2b00      	cmp	r3, #0
 801810c:	d00c      	beq.n	8018128 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018116:	68db      	ldr	r3, [r3, #12]
 8018118:	685b      	ldr	r3, [r3, #4]
 801811a:	4618      	mov	r0, r3
 801811c:	f7fa fcc9 	bl	8012ab2 <lwip_htonl>
 8018120:	4603      	mov	r3, r0
 8018122:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8018124:	2b00      	cmp	r3, #0
 8018126:	dc20      	bgt.n	801816a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	8b5b      	ldrh	r3, [r3, #26]
 801812c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018130:	b29a      	uxth	r2, r3
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018136:	e018      	b.n	801816a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018140:	68db      	ldr	r3, [r3, #12]
 8018142:	685b      	ldr	r3, [r3, #4]
 8018144:	4618      	mov	r0, r3
 8018146:	f7fa fcb4 	bl	8012ab2 <lwip_htonl>
 801814a:	4603      	mov	r3, r0
 801814c:	1ae3      	subs	r3, r4, r3
 801814e:	2b00      	cmp	r3, #0
 8018150:	dc0b      	bgt.n	801816a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	8b5b      	ldrh	r3, [r3, #26]
 8018156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801815a:	b29a      	uxth	r2, r3
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018160:	e003      	b.n	801816a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018162:	6878      	ldr	r0, [r7, #4]
 8018164:	f002 fbf0 	bl	801a948 <tcp_send_empty_ack>
 8018168:	e000      	b.n	801816c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801816a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018170:	2b00      	cmp	r3, #0
 8018172:	d05b      	beq.n	801822c <tcp_receive+0x50c>
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018178:	4b60      	ldr	r3, [pc, #384]	; (80182fc <tcp_receive+0x5dc>)
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	1ad3      	subs	r3, r2, r3
 801817e:	2b00      	cmp	r3, #0
 8018180:	da54      	bge.n	801822c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018182:	4b5f      	ldr	r3, [pc, #380]	; (8018300 <tcp_receive+0x5e0>)
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	b29a      	uxth	r2, r3
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801818c:	b29b      	uxth	r3, r3
 801818e:	1ad3      	subs	r3, r2, r3
 8018190:	b29b      	uxth	r3, r3
 8018192:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8018196:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80181a0:	10db      	asrs	r3, r3, #3
 80181a2:	b21b      	sxth	r3, r3
 80181a4:	b29b      	uxth	r3, r3
 80181a6:	1ad3      	subs	r3, r2, r3
 80181a8:	b29b      	uxth	r3, r3
 80181aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80181b4:	b29a      	uxth	r2, r3
 80181b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80181ba:	4413      	add	r3, r2
 80181bc:	b29b      	uxth	r3, r3
 80181be:	b21a      	sxth	r2, r3
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80181c4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	da05      	bge.n	80181d8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80181cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80181d0:	425b      	negs	r3, r3
 80181d2:	b29b      	uxth	r3, r3
 80181d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80181d8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80181e2:	109b      	asrs	r3, r3, #2
 80181e4:	b21b      	sxth	r3, r3
 80181e6:	b29b      	uxth	r3, r3
 80181e8:	1ad3      	subs	r3, r2, r3
 80181ea:	b29b      	uxth	r3, r3
 80181ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80181f6:	b29a      	uxth	r2, r3
 80181f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80181fc:	4413      	add	r3, r2
 80181fe:	b29b      	uxth	r3, r3
 8018200:	b21a      	sxth	r2, r3
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801820c:	10db      	asrs	r3, r3, #3
 801820e:	b21b      	sxth	r3, r3
 8018210:	b29a      	uxth	r2, r3
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018218:	b29b      	uxth	r3, r3
 801821a:	4413      	add	r3, r2
 801821c:	b29b      	uxth	r3, r3
 801821e:	b21a      	sxth	r2, r3
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	2200      	movs	r2, #0
 801822a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801822c:	4b35      	ldr	r3, [pc, #212]	; (8018304 <tcp_receive+0x5e4>)
 801822e:	881b      	ldrh	r3, [r3, #0]
 8018230:	2b00      	cmp	r3, #0
 8018232:	f000 84e2 	beq.w	8018bfa <tcp_receive+0xeda>
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	7d1b      	ldrb	r3, [r3, #20]
 801823a:	2b06      	cmp	r3, #6
 801823c:	f200 84dd 	bhi.w	8018bfa <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018244:	4b30      	ldr	r3, [pc, #192]	; (8018308 <tcp_receive+0x5e8>)
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	1ad3      	subs	r3, r2, r3
 801824a:	3b01      	subs	r3, #1
 801824c:	2b00      	cmp	r3, #0
 801824e:	f2c0 808f 	blt.w	8018370 <tcp_receive+0x650>
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018256:	4b2b      	ldr	r3, [pc, #172]	; (8018304 <tcp_receive+0x5e4>)
 8018258:	881b      	ldrh	r3, [r3, #0]
 801825a:	4619      	mov	r1, r3
 801825c:	4b2a      	ldr	r3, [pc, #168]	; (8018308 <tcp_receive+0x5e8>)
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	440b      	add	r3, r1
 8018262:	1ad3      	subs	r3, r2, r3
 8018264:	3301      	adds	r3, #1
 8018266:	2b00      	cmp	r3, #0
 8018268:	f300 8082 	bgt.w	8018370 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801826c:	4b27      	ldr	r3, [pc, #156]	; (801830c <tcp_receive+0x5ec>)
 801826e:	685b      	ldr	r3, [r3, #4]
 8018270:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018276:	4b24      	ldr	r3, [pc, #144]	; (8018308 <tcp_receive+0x5e8>)
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	1ad3      	subs	r3, r2, r3
 801827c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801827e:	4b23      	ldr	r3, [pc, #140]	; (801830c <tcp_receive+0x5ec>)
 8018280:	685b      	ldr	r3, [r3, #4]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d106      	bne.n	8018294 <tcp_receive+0x574>
 8018286:	4b22      	ldr	r3, [pc, #136]	; (8018310 <tcp_receive+0x5f0>)
 8018288:	f240 5294 	movw	r2, #1428	; 0x594
 801828c:	4921      	ldr	r1, [pc, #132]	; (8018314 <tcp_receive+0x5f4>)
 801828e:	4822      	ldr	r0, [pc, #136]	; (8018318 <tcp_receive+0x5f8>)
 8018290:	f005 ffd8 	bl	801e244 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018296:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801829a:	4293      	cmp	r3, r2
 801829c:	d906      	bls.n	80182ac <tcp_receive+0x58c>
 801829e:	4b1c      	ldr	r3, [pc, #112]	; (8018310 <tcp_receive+0x5f0>)
 80182a0:	f240 5295 	movw	r2, #1429	; 0x595
 80182a4:	491d      	ldr	r1, [pc, #116]	; (801831c <tcp_receive+0x5fc>)
 80182a6:	481c      	ldr	r0, [pc, #112]	; (8018318 <tcp_receive+0x5f8>)
 80182a8:	f005 ffcc 	bl	801e244 <iprintf>
      off = (u16_t)off32;
 80182ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80182b2:	4b16      	ldr	r3, [pc, #88]	; (801830c <tcp_receive+0x5ec>)
 80182b4:	685b      	ldr	r3, [r3, #4]
 80182b6:	891b      	ldrh	r3, [r3, #8]
 80182b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80182bc:	429a      	cmp	r2, r3
 80182be:	d906      	bls.n	80182ce <tcp_receive+0x5ae>
 80182c0:	4b13      	ldr	r3, [pc, #76]	; (8018310 <tcp_receive+0x5f0>)
 80182c2:	f240 5297 	movw	r2, #1431	; 0x597
 80182c6:	4916      	ldr	r1, [pc, #88]	; (8018320 <tcp_receive+0x600>)
 80182c8:	4813      	ldr	r0, [pc, #76]	; (8018318 <tcp_receive+0x5f8>)
 80182ca:	f005 ffbb 	bl	801e244 <iprintf>
      inseg.len -= off;
 80182ce:	4b0f      	ldr	r3, [pc, #60]	; (801830c <tcp_receive+0x5ec>)
 80182d0:	891a      	ldrh	r2, [r3, #8]
 80182d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80182d6:	1ad3      	subs	r3, r2, r3
 80182d8:	b29a      	uxth	r2, r3
 80182da:	4b0c      	ldr	r3, [pc, #48]	; (801830c <tcp_receive+0x5ec>)
 80182dc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80182de:	4b0b      	ldr	r3, [pc, #44]	; (801830c <tcp_receive+0x5ec>)
 80182e0:	685b      	ldr	r3, [r3, #4]
 80182e2:	891a      	ldrh	r2, [r3, #8]
 80182e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80182e8:	1ad3      	subs	r3, r2, r3
 80182ea:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80182ec:	e02a      	b.n	8018344 <tcp_receive+0x624>
 80182ee:	bf00      	nop
 80182f0:	08021670 	.word	0x08021670
 80182f4:	08021678 	.word	0x08021678
 80182f8:	2405e9ec 	.word	0x2405e9ec
 80182fc:	2405e9e8 	.word	0x2405e9e8
 8018300:	2405e9ac 	.word	0x2405e9ac
 8018304:	2405e9ee 	.word	0x2405e9ee
 8018308:	2405e9e4 	.word	0x2405e9e4
 801830c:	2405e9c4 	.word	0x2405e9c4
 8018310:	08021308 	.word	0x08021308
 8018314:	08021680 	.word	0x08021680
 8018318:	08021354 	.word	0x08021354
 801831c:	08021690 	.word	0x08021690
 8018320:	080216a0 	.word	0x080216a0
        off -= p->len;
 8018324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018326:	895b      	ldrh	r3, [r3, #10]
 8018328:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801832c:	1ad3      	subs	r3, r2, r3
 801832e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8018332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018334:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018336:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8018338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801833a:	2200      	movs	r2, #0
 801833c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801833e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8018344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018346:	895b      	ldrh	r3, [r3, #10]
 8018348:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801834c:	429a      	cmp	r2, r3
 801834e:	d8e9      	bhi.n	8018324 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8018350:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018354:	4619      	mov	r1, r3
 8018356:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018358:	f7fc f88a 	bl	8014470 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018360:	4a91      	ldr	r2, [pc, #580]	; (80185a8 <tcp_receive+0x888>)
 8018362:	6013      	str	r3, [r2, #0]
 8018364:	4b91      	ldr	r3, [pc, #580]	; (80185ac <tcp_receive+0x88c>)
 8018366:	68db      	ldr	r3, [r3, #12]
 8018368:	4a8f      	ldr	r2, [pc, #572]	; (80185a8 <tcp_receive+0x888>)
 801836a:	6812      	ldr	r2, [r2, #0]
 801836c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801836e:	e00d      	b.n	801838c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018370:	4b8d      	ldr	r3, [pc, #564]	; (80185a8 <tcp_receive+0x888>)
 8018372:	681a      	ldr	r2, [r3, #0]
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018378:	1ad3      	subs	r3, r2, r3
 801837a:	2b00      	cmp	r3, #0
 801837c:	da06      	bge.n	801838c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	8b5b      	ldrh	r3, [r3, #26]
 8018382:	f043 0302 	orr.w	r3, r3, #2
 8018386:	b29a      	uxth	r2, r3
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801838c:	4b86      	ldr	r3, [pc, #536]	; (80185a8 <tcp_receive+0x888>)
 801838e:	681a      	ldr	r2, [r3, #0]
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018394:	1ad3      	subs	r3, r2, r3
 8018396:	2b00      	cmp	r3, #0
 8018398:	f2c0 842a 	blt.w	8018bf0 <tcp_receive+0xed0>
 801839c:	4b82      	ldr	r3, [pc, #520]	; (80185a8 <tcp_receive+0x888>)
 801839e:	681a      	ldr	r2, [r3, #0]
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183a4:	6879      	ldr	r1, [r7, #4]
 80183a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80183a8:	440b      	add	r3, r1
 80183aa:	1ad3      	subs	r3, r2, r3
 80183ac:	3301      	adds	r3, #1
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	f300 841e 	bgt.w	8018bf0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80183b8:	4b7b      	ldr	r3, [pc, #492]	; (80185a8 <tcp_receive+0x888>)
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	429a      	cmp	r2, r3
 80183be:	f040 829a 	bne.w	80188f6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80183c2:	4b7a      	ldr	r3, [pc, #488]	; (80185ac <tcp_receive+0x88c>)
 80183c4:	891c      	ldrh	r4, [r3, #8]
 80183c6:	4b79      	ldr	r3, [pc, #484]	; (80185ac <tcp_receive+0x88c>)
 80183c8:	68db      	ldr	r3, [r3, #12]
 80183ca:	899b      	ldrh	r3, [r3, #12]
 80183cc:	b29b      	uxth	r3, r3
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7fa fb5a 	bl	8012a88 <lwip_htons>
 80183d4:	4603      	mov	r3, r0
 80183d6:	b2db      	uxtb	r3, r3
 80183d8:	f003 0303 	and.w	r3, r3, #3
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d001      	beq.n	80183e4 <tcp_receive+0x6c4>
 80183e0:	2301      	movs	r3, #1
 80183e2:	e000      	b.n	80183e6 <tcp_receive+0x6c6>
 80183e4:	2300      	movs	r3, #0
 80183e6:	4423      	add	r3, r4
 80183e8:	b29a      	uxth	r2, r3
 80183ea:	4b71      	ldr	r3, [pc, #452]	; (80185b0 <tcp_receive+0x890>)
 80183ec:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80183f2:	4b6f      	ldr	r3, [pc, #444]	; (80185b0 <tcp_receive+0x890>)
 80183f4:	881b      	ldrh	r3, [r3, #0]
 80183f6:	429a      	cmp	r2, r3
 80183f8:	d275      	bcs.n	80184e6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80183fa:	4b6c      	ldr	r3, [pc, #432]	; (80185ac <tcp_receive+0x88c>)
 80183fc:	68db      	ldr	r3, [r3, #12]
 80183fe:	899b      	ldrh	r3, [r3, #12]
 8018400:	b29b      	uxth	r3, r3
 8018402:	4618      	mov	r0, r3
 8018404:	f7fa fb40 	bl	8012a88 <lwip_htons>
 8018408:	4603      	mov	r3, r0
 801840a:	b2db      	uxtb	r3, r3
 801840c:	f003 0301 	and.w	r3, r3, #1
 8018410:	2b00      	cmp	r3, #0
 8018412:	d01f      	beq.n	8018454 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018414:	4b65      	ldr	r3, [pc, #404]	; (80185ac <tcp_receive+0x88c>)
 8018416:	68db      	ldr	r3, [r3, #12]
 8018418:	899b      	ldrh	r3, [r3, #12]
 801841a:	b29b      	uxth	r3, r3
 801841c:	b21b      	sxth	r3, r3
 801841e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018422:	b21c      	sxth	r4, r3
 8018424:	4b61      	ldr	r3, [pc, #388]	; (80185ac <tcp_receive+0x88c>)
 8018426:	68db      	ldr	r3, [r3, #12]
 8018428:	899b      	ldrh	r3, [r3, #12]
 801842a:	b29b      	uxth	r3, r3
 801842c:	4618      	mov	r0, r3
 801842e:	f7fa fb2b 	bl	8012a88 <lwip_htons>
 8018432:	4603      	mov	r3, r0
 8018434:	b2db      	uxtb	r3, r3
 8018436:	b29b      	uxth	r3, r3
 8018438:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801843c:	b29b      	uxth	r3, r3
 801843e:	4618      	mov	r0, r3
 8018440:	f7fa fb22 	bl	8012a88 <lwip_htons>
 8018444:	4603      	mov	r3, r0
 8018446:	b21b      	sxth	r3, r3
 8018448:	4323      	orrs	r3, r4
 801844a:	b21a      	sxth	r2, r3
 801844c:	4b57      	ldr	r3, [pc, #348]	; (80185ac <tcp_receive+0x88c>)
 801844e:	68db      	ldr	r3, [r3, #12]
 8018450:	b292      	uxth	r2, r2
 8018452:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018458:	4b54      	ldr	r3, [pc, #336]	; (80185ac <tcp_receive+0x88c>)
 801845a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801845c:	4b53      	ldr	r3, [pc, #332]	; (80185ac <tcp_receive+0x88c>)
 801845e:	68db      	ldr	r3, [r3, #12]
 8018460:	899b      	ldrh	r3, [r3, #12]
 8018462:	b29b      	uxth	r3, r3
 8018464:	4618      	mov	r0, r3
 8018466:	f7fa fb0f 	bl	8012a88 <lwip_htons>
 801846a:	4603      	mov	r3, r0
 801846c:	b2db      	uxtb	r3, r3
 801846e:	f003 0302 	and.w	r3, r3, #2
 8018472:	2b00      	cmp	r3, #0
 8018474:	d005      	beq.n	8018482 <tcp_receive+0x762>
            inseg.len -= 1;
 8018476:	4b4d      	ldr	r3, [pc, #308]	; (80185ac <tcp_receive+0x88c>)
 8018478:	891b      	ldrh	r3, [r3, #8]
 801847a:	3b01      	subs	r3, #1
 801847c:	b29a      	uxth	r2, r3
 801847e:	4b4b      	ldr	r3, [pc, #300]	; (80185ac <tcp_receive+0x88c>)
 8018480:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018482:	4b4a      	ldr	r3, [pc, #296]	; (80185ac <tcp_receive+0x88c>)
 8018484:	685b      	ldr	r3, [r3, #4]
 8018486:	4a49      	ldr	r2, [pc, #292]	; (80185ac <tcp_receive+0x88c>)
 8018488:	8912      	ldrh	r2, [r2, #8]
 801848a:	4611      	mov	r1, r2
 801848c:	4618      	mov	r0, r3
 801848e:	f7fb feef 	bl	8014270 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018492:	4b46      	ldr	r3, [pc, #280]	; (80185ac <tcp_receive+0x88c>)
 8018494:	891c      	ldrh	r4, [r3, #8]
 8018496:	4b45      	ldr	r3, [pc, #276]	; (80185ac <tcp_receive+0x88c>)
 8018498:	68db      	ldr	r3, [r3, #12]
 801849a:	899b      	ldrh	r3, [r3, #12]
 801849c:	b29b      	uxth	r3, r3
 801849e:	4618      	mov	r0, r3
 80184a0:	f7fa faf2 	bl	8012a88 <lwip_htons>
 80184a4:	4603      	mov	r3, r0
 80184a6:	b2db      	uxtb	r3, r3
 80184a8:	f003 0303 	and.w	r3, r3, #3
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d001      	beq.n	80184b4 <tcp_receive+0x794>
 80184b0:	2301      	movs	r3, #1
 80184b2:	e000      	b.n	80184b6 <tcp_receive+0x796>
 80184b4:	2300      	movs	r3, #0
 80184b6:	4423      	add	r3, r4
 80184b8:	b29a      	uxth	r2, r3
 80184ba:	4b3d      	ldr	r3, [pc, #244]	; (80185b0 <tcp_receive+0x890>)
 80184bc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80184be:	4b3c      	ldr	r3, [pc, #240]	; (80185b0 <tcp_receive+0x890>)
 80184c0:	881b      	ldrh	r3, [r3, #0]
 80184c2:	461a      	mov	r2, r3
 80184c4:	4b38      	ldr	r3, [pc, #224]	; (80185a8 <tcp_receive+0x888>)
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	441a      	add	r2, r3
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184ce:	6879      	ldr	r1, [r7, #4]
 80184d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80184d2:	440b      	add	r3, r1
 80184d4:	429a      	cmp	r2, r3
 80184d6:	d006      	beq.n	80184e6 <tcp_receive+0x7c6>
 80184d8:	4b36      	ldr	r3, [pc, #216]	; (80185b4 <tcp_receive+0x894>)
 80184da:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80184de:	4936      	ldr	r1, [pc, #216]	; (80185b8 <tcp_receive+0x898>)
 80184e0:	4836      	ldr	r0, [pc, #216]	; (80185bc <tcp_receive+0x89c>)
 80184e2:	f005 feaf 	bl	801e244 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	f000 80e7 	beq.w	80186be <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80184f0:	4b2e      	ldr	r3, [pc, #184]	; (80185ac <tcp_receive+0x88c>)
 80184f2:	68db      	ldr	r3, [r3, #12]
 80184f4:	899b      	ldrh	r3, [r3, #12]
 80184f6:	b29b      	uxth	r3, r3
 80184f8:	4618      	mov	r0, r3
 80184fa:	f7fa fac5 	bl	8012a88 <lwip_htons>
 80184fe:	4603      	mov	r3, r0
 8018500:	b2db      	uxtb	r3, r3
 8018502:	f003 0301 	and.w	r3, r3, #1
 8018506:	2b00      	cmp	r3, #0
 8018508:	d010      	beq.n	801852c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801850a:	e00a      	b.n	8018522 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018510:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018516:	681a      	ldr	r2, [r3, #0]
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801851c:	68f8      	ldr	r0, [r7, #12]
 801851e:	f7fd fcb0 	bl	8015e82 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018526:	2b00      	cmp	r3, #0
 8018528:	d1f0      	bne.n	801850c <tcp_receive+0x7ec>
 801852a:	e0c8      	b.n	80186be <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018530:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8018532:	e052      	b.n	80185da <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018536:	68db      	ldr	r3, [r3, #12]
 8018538:	899b      	ldrh	r3, [r3, #12]
 801853a:	b29b      	uxth	r3, r3
 801853c:	4618      	mov	r0, r3
 801853e:	f7fa faa3 	bl	8012a88 <lwip_htons>
 8018542:	4603      	mov	r3, r0
 8018544:	b2db      	uxtb	r3, r3
 8018546:	f003 0301 	and.w	r3, r3, #1
 801854a:	2b00      	cmp	r3, #0
 801854c:	d03d      	beq.n	80185ca <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801854e:	4b17      	ldr	r3, [pc, #92]	; (80185ac <tcp_receive+0x88c>)
 8018550:	68db      	ldr	r3, [r3, #12]
 8018552:	899b      	ldrh	r3, [r3, #12]
 8018554:	b29b      	uxth	r3, r3
 8018556:	4618      	mov	r0, r3
 8018558:	f7fa fa96 	bl	8012a88 <lwip_htons>
 801855c:	4603      	mov	r3, r0
 801855e:	b2db      	uxtb	r3, r3
 8018560:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018564:	2b00      	cmp	r3, #0
 8018566:	d130      	bne.n	80185ca <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018568:	4b10      	ldr	r3, [pc, #64]	; (80185ac <tcp_receive+0x88c>)
 801856a:	68db      	ldr	r3, [r3, #12]
 801856c:	899b      	ldrh	r3, [r3, #12]
 801856e:	b29c      	uxth	r4, r3
 8018570:	2001      	movs	r0, #1
 8018572:	f7fa fa89 	bl	8012a88 <lwip_htons>
 8018576:	4603      	mov	r3, r0
 8018578:	461a      	mov	r2, r3
 801857a:	4b0c      	ldr	r3, [pc, #48]	; (80185ac <tcp_receive+0x88c>)
 801857c:	68db      	ldr	r3, [r3, #12]
 801857e:	4322      	orrs	r2, r4
 8018580:	b292      	uxth	r2, r2
 8018582:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018584:	4b09      	ldr	r3, [pc, #36]	; (80185ac <tcp_receive+0x88c>)
 8018586:	891c      	ldrh	r4, [r3, #8]
 8018588:	4b08      	ldr	r3, [pc, #32]	; (80185ac <tcp_receive+0x88c>)
 801858a:	68db      	ldr	r3, [r3, #12]
 801858c:	899b      	ldrh	r3, [r3, #12]
 801858e:	b29b      	uxth	r3, r3
 8018590:	4618      	mov	r0, r3
 8018592:	f7fa fa79 	bl	8012a88 <lwip_htons>
 8018596:	4603      	mov	r3, r0
 8018598:	b2db      	uxtb	r3, r3
 801859a:	f003 0303 	and.w	r3, r3, #3
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d00e      	beq.n	80185c0 <tcp_receive+0x8a0>
 80185a2:	2301      	movs	r3, #1
 80185a4:	e00d      	b.n	80185c2 <tcp_receive+0x8a2>
 80185a6:	bf00      	nop
 80185a8:	2405e9e4 	.word	0x2405e9e4
 80185ac:	2405e9c4 	.word	0x2405e9c4
 80185b0:	2405e9ee 	.word	0x2405e9ee
 80185b4:	08021308 	.word	0x08021308
 80185b8:	080216b0 	.word	0x080216b0
 80185bc:	08021354 	.word	0x08021354
 80185c0:	2300      	movs	r3, #0
 80185c2:	4423      	add	r3, r4
 80185c4:	b29a      	uxth	r2, r3
 80185c6:	4b98      	ldr	r3, [pc, #608]	; (8018828 <tcp_receive+0xb08>)
 80185c8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80185ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185cc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80185ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80185d4:	6938      	ldr	r0, [r7, #16]
 80185d6:	f7fd fc54 	bl	8015e82 <tcp_seg_free>
            while (next &&
 80185da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d00e      	beq.n	80185fe <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80185e0:	4b91      	ldr	r3, [pc, #580]	; (8018828 <tcp_receive+0xb08>)
 80185e2:	881b      	ldrh	r3, [r3, #0]
 80185e4:	461a      	mov	r2, r3
 80185e6:	4b91      	ldr	r3, [pc, #580]	; (801882c <tcp_receive+0xb0c>)
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	441a      	add	r2, r3
 80185ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80185ee:	68db      	ldr	r3, [r3, #12]
 80185f0:	685b      	ldr	r3, [r3, #4]
 80185f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80185f4:	8909      	ldrh	r1, [r1, #8]
 80185f6:	440b      	add	r3, r1
 80185f8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	da9a      	bge.n	8018534 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80185fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018600:	2b00      	cmp	r3, #0
 8018602:	d059      	beq.n	80186b8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8018604:	4b88      	ldr	r3, [pc, #544]	; (8018828 <tcp_receive+0xb08>)
 8018606:	881b      	ldrh	r3, [r3, #0]
 8018608:	461a      	mov	r2, r3
 801860a:	4b88      	ldr	r3, [pc, #544]	; (801882c <tcp_receive+0xb0c>)
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	441a      	add	r2, r3
 8018610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018612:	68db      	ldr	r3, [r3, #12]
 8018614:	685b      	ldr	r3, [r3, #4]
 8018616:	1ad3      	subs	r3, r2, r3
            if (next &&
 8018618:	2b00      	cmp	r3, #0
 801861a:	dd4d      	ble.n	80186b8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801861c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801861e:	68db      	ldr	r3, [r3, #12]
 8018620:	685b      	ldr	r3, [r3, #4]
 8018622:	b29a      	uxth	r2, r3
 8018624:	4b81      	ldr	r3, [pc, #516]	; (801882c <tcp_receive+0xb0c>)
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	b29b      	uxth	r3, r3
 801862a:	1ad3      	subs	r3, r2, r3
 801862c:	b29a      	uxth	r2, r3
 801862e:	4b80      	ldr	r3, [pc, #512]	; (8018830 <tcp_receive+0xb10>)
 8018630:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018632:	4b7f      	ldr	r3, [pc, #508]	; (8018830 <tcp_receive+0xb10>)
 8018634:	68db      	ldr	r3, [r3, #12]
 8018636:	899b      	ldrh	r3, [r3, #12]
 8018638:	b29b      	uxth	r3, r3
 801863a:	4618      	mov	r0, r3
 801863c:	f7fa fa24 	bl	8012a88 <lwip_htons>
 8018640:	4603      	mov	r3, r0
 8018642:	b2db      	uxtb	r3, r3
 8018644:	f003 0302 	and.w	r3, r3, #2
 8018648:	2b00      	cmp	r3, #0
 801864a:	d005      	beq.n	8018658 <tcp_receive+0x938>
                inseg.len -= 1;
 801864c:	4b78      	ldr	r3, [pc, #480]	; (8018830 <tcp_receive+0xb10>)
 801864e:	891b      	ldrh	r3, [r3, #8]
 8018650:	3b01      	subs	r3, #1
 8018652:	b29a      	uxth	r2, r3
 8018654:	4b76      	ldr	r3, [pc, #472]	; (8018830 <tcp_receive+0xb10>)
 8018656:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8018658:	4b75      	ldr	r3, [pc, #468]	; (8018830 <tcp_receive+0xb10>)
 801865a:	685b      	ldr	r3, [r3, #4]
 801865c:	4a74      	ldr	r2, [pc, #464]	; (8018830 <tcp_receive+0xb10>)
 801865e:	8912      	ldrh	r2, [r2, #8]
 8018660:	4611      	mov	r1, r2
 8018662:	4618      	mov	r0, r3
 8018664:	f7fb fe04 	bl	8014270 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8018668:	4b71      	ldr	r3, [pc, #452]	; (8018830 <tcp_receive+0xb10>)
 801866a:	891c      	ldrh	r4, [r3, #8]
 801866c:	4b70      	ldr	r3, [pc, #448]	; (8018830 <tcp_receive+0xb10>)
 801866e:	68db      	ldr	r3, [r3, #12]
 8018670:	899b      	ldrh	r3, [r3, #12]
 8018672:	b29b      	uxth	r3, r3
 8018674:	4618      	mov	r0, r3
 8018676:	f7fa fa07 	bl	8012a88 <lwip_htons>
 801867a:	4603      	mov	r3, r0
 801867c:	b2db      	uxtb	r3, r3
 801867e:	f003 0303 	and.w	r3, r3, #3
 8018682:	2b00      	cmp	r3, #0
 8018684:	d001      	beq.n	801868a <tcp_receive+0x96a>
 8018686:	2301      	movs	r3, #1
 8018688:	e000      	b.n	801868c <tcp_receive+0x96c>
 801868a:	2300      	movs	r3, #0
 801868c:	4423      	add	r3, r4
 801868e:	b29a      	uxth	r2, r3
 8018690:	4b65      	ldr	r3, [pc, #404]	; (8018828 <tcp_receive+0xb08>)
 8018692:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018694:	4b64      	ldr	r3, [pc, #400]	; (8018828 <tcp_receive+0xb08>)
 8018696:	881b      	ldrh	r3, [r3, #0]
 8018698:	461a      	mov	r2, r3
 801869a:	4b64      	ldr	r3, [pc, #400]	; (801882c <tcp_receive+0xb0c>)
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	441a      	add	r2, r3
 80186a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80186a2:	68db      	ldr	r3, [r3, #12]
 80186a4:	685b      	ldr	r3, [r3, #4]
 80186a6:	429a      	cmp	r2, r3
 80186a8:	d006      	beq.n	80186b8 <tcp_receive+0x998>
 80186aa:	4b62      	ldr	r3, [pc, #392]	; (8018834 <tcp_receive+0xb14>)
 80186ac:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80186b0:	4961      	ldr	r1, [pc, #388]	; (8018838 <tcp_receive+0xb18>)
 80186b2:	4862      	ldr	r0, [pc, #392]	; (801883c <tcp_receive+0xb1c>)
 80186b4:	f005 fdc6 	bl	801e244 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80186bc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80186be:	4b5a      	ldr	r3, [pc, #360]	; (8018828 <tcp_receive+0xb08>)
 80186c0:	881b      	ldrh	r3, [r3, #0]
 80186c2:	461a      	mov	r2, r3
 80186c4:	4b59      	ldr	r3, [pc, #356]	; (801882c <tcp_receive+0xb0c>)
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	441a      	add	r2, r3
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80186d2:	4b55      	ldr	r3, [pc, #340]	; (8018828 <tcp_receive+0xb08>)
 80186d4:	881b      	ldrh	r3, [r3, #0]
 80186d6:	429a      	cmp	r2, r3
 80186d8:	d206      	bcs.n	80186e8 <tcp_receive+0x9c8>
 80186da:	4b56      	ldr	r3, [pc, #344]	; (8018834 <tcp_receive+0xb14>)
 80186dc:	f240 6207 	movw	r2, #1543	; 0x607
 80186e0:	4957      	ldr	r1, [pc, #348]	; (8018840 <tcp_receive+0xb20>)
 80186e2:	4856      	ldr	r0, [pc, #344]	; (801883c <tcp_receive+0xb1c>)
 80186e4:	f005 fdae 	bl	801e244 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80186ec:	4b4e      	ldr	r3, [pc, #312]	; (8018828 <tcp_receive+0xb08>)
 80186ee:	881b      	ldrh	r3, [r3, #0]
 80186f0:	1ad3      	subs	r3, r2, r3
 80186f2:	b29a      	uxth	r2, r3
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80186f8:	6878      	ldr	r0, [r7, #4]
 80186fa:	f7fc fe9d 	bl	8015438 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80186fe:	4b4c      	ldr	r3, [pc, #304]	; (8018830 <tcp_receive+0xb10>)
 8018700:	685b      	ldr	r3, [r3, #4]
 8018702:	891b      	ldrh	r3, [r3, #8]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d006      	beq.n	8018716 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8018708:	4b49      	ldr	r3, [pc, #292]	; (8018830 <tcp_receive+0xb10>)
 801870a:	685b      	ldr	r3, [r3, #4]
 801870c:	4a4d      	ldr	r2, [pc, #308]	; (8018844 <tcp_receive+0xb24>)
 801870e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018710:	4b47      	ldr	r3, [pc, #284]	; (8018830 <tcp_receive+0xb10>)
 8018712:	2200      	movs	r2, #0
 8018714:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018716:	4b46      	ldr	r3, [pc, #280]	; (8018830 <tcp_receive+0xb10>)
 8018718:	68db      	ldr	r3, [r3, #12]
 801871a:	899b      	ldrh	r3, [r3, #12]
 801871c:	b29b      	uxth	r3, r3
 801871e:	4618      	mov	r0, r3
 8018720:	f7fa f9b2 	bl	8012a88 <lwip_htons>
 8018724:	4603      	mov	r3, r0
 8018726:	b2db      	uxtb	r3, r3
 8018728:	f003 0301 	and.w	r3, r3, #1
 801872c:	2b00      	cmp	r3, #0
 801872e:	f000 80b8 	beq.w	80188a2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018732:	4b45      	ldr	r3, [pc, #276]	; (8018848 <tcp_receive+0xb28>)
 8018734:	781b      	ldrb	r3, [r3, #0]
 8018736:	f043 0320 	orr.w	r3, r3, #32
 801873a:	b2da      	uxtb	r2, r3
 801873c:	4b42      	ldr	r3, [pc, #264]	; (8018848 <tcp_receive+0xb28>)
 801873e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018740:	e0af      	b.n	80188a2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018746:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801874c:	68db      	ldr	r3, [r3, #12]
 801874e:	685b      	ldr	r3, [r3, #4]
 8018750:	4a36      	ldr	r2, [pc, #216]	; (801882c <tcp_receive+0xb0c>)
 8018752:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018754:	68bb      	ldr	r3, [r7, #8]
 8018756:	891b      	ldrh	r3, [r3, #8]
 8018758:	461c      	mov	r4, r3
 801875a:	68bb      	ldr	r3, [r7, #8]
 801875c:	68db      	ldr	r3, [r3, #12]
 801875e:	899b      	ldrh	r3, [r3, #12]
 8018760:	b29b      	uxth	r3, r3
 8018762:	4618      	mov	r0, r3
 8018764:	f7fa f990 	bl	8012a88 <lwip_htons>
 8018768:	4603      	mov	r3, r0
 801876a:	b2db      	uxtb	r3, r3
 801876c:	f003 0303 	and.w	r3, r3, #3
 8018770:	2b00      	cmp	r3, #0
 8018772:	d001      	beq.n	8018778 <tcp_receive+0xa58>
 8018774:	2301      	movs	r3, #1
 8018776:	e000      	b.n	801877a <tcp_receive+0xa5a>
 8018778:	2300      	movs	r3, #0
 801877a:	191a      	adds	r2, r3, r4
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018780:	441a      	add	r2, r3
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801878a:	461c      	mov	r4, r3
 801878c:	68bb      	ldr	r3, [r7, #8]
 801878e:	891b      	ldrh	r3, [r3, #8]
 8018790:	461d      	mov	r5, r3
 8018792:	68bb      	ldr	r3, [r7, #8]
 8018794:	68db      	ldr	r3, [r3, #12]
 8018796:	899b      	ldrh	r3, [r3, #12]
 8018798:	b29b      	uxth	r3, r3
 801879a:	4618      	mov	r0, r3
 801879c:	f7fa f974 	bl	8012a88 <lwip_htons>
 80187a0:	4603      	mov	r3, r0
 80187a2:	b2db      	uxtb	r3, r3
 80187a4:	f003 0303 	and.w	r3, r3, #3
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d001      	beq.n	80187b0 <tcp_receive+0xa90>
 80187ac:	2301      	movs	r3, #1
 80187ae:	e000      	b.n	80187b2 <tcp_receive+0xa92>
 80187b0:	2300      	movs	r3, #0
 80187b2:	442b      	add	r3, r5
 80187b4:	429c      	cmp	r4, r3
 80187b6:	d206      	bcs.n	80187c6 <tcp_receive+0xaa6>
 80187b8:	4b1e      	ldr	r3, [pc, #120]	; (8018834 <tcp_receive+0xb14>)
 80187ba:	f240 622b 	movw	r2, #1579	; 0x62b
 80187be:	4923      	ldr	r1, [pc, #140]	; (801884c <tcp_receive+0xb2c>)
 80187c0:	481e      	ldr	r0, [pc, #120]	; (801883c <tcp_receive+0xb1c>)
 80187c2:	f005 fd3f 	bl	801e244 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80187c6:	68bb      	ldr	r3, [r7, #8]
 80187c8:	891b      	ldrh	r3, [r3, #8]
 80187ca:	461c      	mov	r4, r3
 80187cc:	68bb      	ldr	r3, [r7, #8]
 80187ce:	68db      	ldr	r3, [r3, #12]
 80187d0:	899b      	ldrh	r3, [r3, #12]
 80187d2:	b29b      	uxth	r3, r3
 80187d4:	4618      	mov	r0, r3
 80187d6:	f7fa f957 	bl	8012a88 <lwip_htons>
 80187da:	4603      	mov	r3, r0
 80187dc:	b2db      	uxtb	r3, r3
 80187de:	f003 0303 	and.w	r3, r3, #3
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d001      	beq.n	80187ea <tcp_receive+0xaca>
 80187e6:	2301      	movs	r3, #1
 80187e8:	e000      	b.n	80187ec <tcp_receive+0xacc>
 80187ea:	2300      	movs	r3, #0
 80187ec:	1919      	adds	r1, r3, r4
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80187f2:	b28b      	uxth	r3, r1
 80187f4:	1ad3      	subs	r3, r2, r3
 80187f6:	b29a      	uxth	r2, r3
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80187fc:	6878      	ldr	r0, [r7, #4]
 80187fe:	f7fc fe1b 	bl	8015438 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018802:	68bb      	ldr	r3, [r7, #8]
 8018804:	685b      	ldr	r3, [r3, #4]
 8018806:	891b      	ldrh	r3, [r3, #8]
 8018808:	2b00      	cmp	r3, #0
 801880a:	d028      	beq.n	801885e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801880c:	4b0d      	ldr	r3, [pc, #52]	; (8018844 <tcp_receive+0xb24>)
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	2b00      	cmp	r3, #0
 8018812:	d01d      	beq.n	8018850 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8018814:	4b0b      	ldr	r3, [pc, #44]	; (8018844 <tcp_receive+0xb24>)
 8018816:	681a      	ldr	r2, [r3, #0]
 8018818:	68bb      	ldr	r3, [r7, #8]
 801881a:	685b      	ldr	r3, [r3, #4]
 801881c:	4619      	mov	r1, r3
 801881e:	4610      	mov	r0, r2
 8018820:	f7fb ff7a 	bl	8014718 <pbuf_cat>
 8018824:	e018      	b.n	8018858 <tcp_receive+0xb38>
 8018826:	bf00      	nop
 8018828:	2405e9ee 	.word	0x2405e9ee
 801882c:	2405e9e4 	.word	0x2405e9e4
 8018830:	2405e9c4 	.word	0x2405e9c4
 8018834:	08021308 	.word	0x08021308
 8018838:	080216e8 	.word	0x080216e8
 801883c:	08021354 	.word	0x08021354
 8018840:	08021724 	.word	0x08021724
 8018844:	2405e9f4 	.word	0x2405e9f4
 8018848:	2405e9f1 	.word	0x2405e9f1
 801884c:	08021744 	.word	0x08021744
            } else {
              recv_data = cseg->p;
 8018850:	68bb      	ldr	r3, [r7, #8]
 8018852:	685b      	ldr	r3, [r3, #4]
 8018854:	4a70      	ldr	r2, [pc, #448]	; (8018a18 <tcp_receive+0xcf8>)
 8018856:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8018858:	68bb      	ldr	r3, [r7, #8]
 801885a:	2200      	movs	r2, #0
 801885c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801885e:	68bb      	ldr	r3, [r7, #8]
 8018860:	68db      	ldr	r3, [r3, #12]
 8018862:	899b      	ldrh	r3, [r3, #12]
 8018864:	b29b      	uxth	r3, r3
 8018866:	4618      	mov	r0, r3
 8018868:	f7fa f90e 	bl	8012a88 <lwip_htons>
 801886c:	4603      	mov	r3, r0
 801886e:	b2db      	uxtb	r3, r3
 8018870:	f003 0301 	and.w	r3, r3, #1
 8018874:	2b00      	cmp	r3, #0
 8018876:	d00d      	beq.n	8018894 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8018878:	4b68      	ldr	r3, [pc, #416]	; (8018a1c <tcp_receive+0xcfc>)
 801887a:	781b      	ldrb	r3, [r3, #0]
 801887c:	f043 0320 	orr.w	r3, r3, #32
 8018880:	b2da      	uxtb	r2, r3
 8018882:	4b66      	ldr	r3, [pc, #408]	; (8018a1c <tcp_receive+0xcfc>)
 8018884:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	7d1b      	ldrb	r3, [r3, #20]
 801888a:	2b04      	cmp	r3, #4
 801888c:	d102      	bne.n	8018894 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	2207      	movs	r2, #7
 8018892:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018894:	68bb      	ldr	r3, [r7, #8]
 8018896:	681a      	ldr	r2, [r3, #0]
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801889c:	68b8      	ldr	r0, [r7, #8]
 801889e:	f7fd faf0 	bl	8015e82 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d008      	beq.n	80188bc <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80188ae:	68db      	ldr	r3, [r3, #12]
 80188b0:	685a      	ldr	r2, [r3, #4]
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80188b6:	429a      	cmp	r2, r3
 80188b8:	f43f af43 	beq.w	8018742 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	8b5b      	ldrh	r3, [r3, #26]
 80188c0:	f003 0301 	and.w	r3, r3, #1
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d00e      	beq.n	80188e6 <tcp_receive+0xbc6>
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	8b5b      	ldrh	r3, [r3, #26]
 80188cc:	f023 0301 	bic.w	r3, r3, #1
 80188d0:	b29a      	uxth	r2, r3
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	835a      	strh	r2, [r3, #26]
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	8b5b      	ldrh	r3, [r3, #26]
 80188da:	f043 0302 	orr.w	r3, r3, #2
 80188de:	b29a      	uxth	r2, r3
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80188e4:	e188      	b.n	8018bf8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	8b5b      	ldrh	r3, [r3, #26]
 80188ea:	f043 0301 	orr.w	r3, r3, #1
 80188ee:	b29a      	uxth	r2, r3
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80188f4:	e180      	b.n	8018bf8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d106      	bne.n	801890c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80188fe:	4848      	ldr	r0, [pc, #288]	; (8018a20 <tcp_receive+0xd00>)
 8018900:	f7fd fad8 	bl	8015eb4 <tcp_seg_copy>
 8018904:	4602      	mov	r2, r0
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	675a      	str	r2, [r3, #116]	; 0x74
 801890a:	e16d      	b.n	8018be8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801890c:	2300      	movs	r3, #0
 801890e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018914:	63bb      	str	r3, [r7, #56]	; 0x38
 8018916:	e157      	b.n	8018bc8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8018918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801891a:	68db      	ldr	r3, [r3, #12]
 801891c:	685a      	ldr	r2, [r3, #4]
 801891e:	4b41      	ldr	r3, [pc, #260]	; (8018a24 <tcp_receive+0xd04>)
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	429a      	cmp	r2, r3
 8018924:	d11d      	bne.n	8018962 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8018926:	4b3e      	ldr	r3, [pc, #248]	; (8018a20 <tcp_receive+0xd00>)
 8018928:	891a      	ldrh	r2, [r3, #8]
 801892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801892c:	891b      	ldrh	r3, [r3, #8]
 801892e:	429a      	cmp	r2, r3
 8018930:	f240 814f 	bls.w	8018bd2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018934:	483a      	ldr	r0, [pc, #232]	; (8018a20 <tcp_receive+0xd00>)
 8018936:	f7fd fabd 	bl	8015eb4 <tcp_seg_copy>
 801893a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801893c:	697b      	ldr	r3, [r7, #20]
 801893e:	2b00      	cmp	r3, #0
 8018940:	f000 8149 	beq.w	8018bd6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8018944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018946:	2b00      	cmp	r3, #0
 8018948:	d003      	beq.n	8018952 <tcp_receive+0xc32>
                    prev->next = cseg;
 801894a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801894c:	697a      	ldr	r2, [r7, #20]
 801894e:	601a      	str	r2, [r3, #0]
 8018950:	e002      	b.n	8018958 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	697a      	ldr	r2, [r7, #20]
 8018956:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8018958:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801895a:	6978      	ldr	r0, [r7, #20]
 801895c:	f7ff f8dc 	bl	8017b18 <tcp_oos_insert_segment>
                }
                break;
 8018960:	e139      	b.n	8018bd6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018964:	2b00      	cmp	r3, #0
 8018966:	d117      	bne.n	8018998 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018968:	4b2e      	ldr	r3, [pc, #184]	; (8018a24 <tcp_receive+0xd04>)
 801896a:	681a      	ldr	r2, [r3, #0]
 801896c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801896e:	68db      	ldr	r3, [r3, #12]
 8018970:	685b      	ldr	r3, [r3, #4]
 8018972:	1ad3      	subs	r3, r2, r3
 8018974:	2b00      	cmp	r3, #0
 8018976:	da57      	bge.n	8018a28 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018978:	4829      	ldr	r0, [pc, #164]	; (8018a20 <tcp_receive+0xd00>)
 801897a:	f7fd fa9b 	bl	8015eb4 <tcp_seg_copy>
 801897e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018980:	69bb      	ldr	r3, [r7, #24]
 8018982:	2b00      	cmp	r3, #0
 8018984:	f000 8129 	beq.w	8018bda <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	69ba      	ldr	r2, [r7, #24]
 801898c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801898e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018990:	69b8      	ldr	r0, [r7, #24]
 8018992:	f7ff f8c1 	bl	8017b18 <tcp_oos_insert_segment>
                  }
                  break;
 8018996:	e120      	b.n	8018bda <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018998:	4b22      	ldr	r3, [pc, #136]	; (8018a24 <tcp_receive+0xd04>)
 801899a:	681a      	ldr	r2, [r3, #0]
 801899c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801899e:	68db      	ldr	r3, [r3, #12]
 80189a0:	685b      	ldr	r3, [r3, #4]
 80189a2:	1ad3      	subs	r3, r2, r3
 80189a4:	3b01      	subs	r3, #1
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	db3e      	blt.n	8018a28 <tcp_receive+0xd08>
 80189aa:	4b1e      	ldr	r3, [pc, #120]	; (8018a24 <tcp_receive+0xd04>)
 80189ac:	681a      	ldr	r2, [r3, #0]
 80189ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189b0:	68db      	ldr	r3, [r3, #12]
 80189b2:	685b      	ldr	r3, [r3, #4]
 80189b4:	1ad3      	subs	r3, r2, r3
 80189b6:	3301      	adds	r3, #1
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	dc35      	bgt.n	8018a28 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80189bc:	4818      	ldr	r0, [pc, #96]	; (8018a20 <tcp_receive+0xd00>)
 80189be:	f7fd fa79 	bl	8015eb4 <tcp_seg_copy>
 80189c2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80189c4:	69fb      	ldr	r3, [r7, #28]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	f000 8109 	beq.w	8018bde <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80189cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189ce:	68db      	ldr	r3, [r3, #12]
 80189d0:	685b      	ldr	r3, [r3, #4]
 80189d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80189d4:	8912      	ldrh	r2, [r2, #8]
 80189d6:	441a      	add	r2, r3
 80189d8:	4b12      	ldr	r3, [pc, #72]	; (8018a24 <tcp_receive+0xd04>)
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	1ad3      	subs	r3, r2, r3
 80189de:	2b00      	cmp	r3, #0
 80189e0:	dd12      	ble.n	8018a08 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80189e2:	4b10      	ldr	r3, [pc, #64]	; (8018a24 <tcp_receive+0xd04>)
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	b29a      	uxth	r2, r3
 80189e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189ea:	68db      	ldr	r3, [r3, #12]
 80189ec:	685b      	ldr	r3, [r3, #4]
 80189ee:	b29b      	uxth	r3, r3
 80189f0:	1ad3      	subs	r3, r2, r3
 80189f2:	b29a      	uxth	r2, r3
 80189f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189f6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80189f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189fa:	685a      	ldr	r2, [r3, #4]
 80189fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189fe:	891b      	ldrh	r3, [r3, #8]
 8018a00:	4619      	mov	r1, r3
 8018a02:	4610      	mov	r0, r2
 8018a04:	f7fb fc34 	bl	8014270 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8018a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a0a:	69fa      	ldr	r2, [r7, #28]
 8018a0c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8018a0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018a10:	69f8      	ldr	r0, [r7, #28]
 8018a12:	f7ff f881 	bl	8017b18 <tcp_oos_insert_segment>
                  }
                  break;
 8018a16:	e0e2      	b.n	8018bde <tcp_receive+0xebe>
 8018a18:	2405e9f4 	.word	0x2405e9f4
 8018a1c:	2405e9f1 	.word	0x2405e9f1
 8018a20:	2405e9c4 	.word	0x2405e9c4
 8018a24:	2405e9e4 	.word	0x2405e9e4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8018a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a2a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8018a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	f040 80c6 	bne.w	8018bc2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8018a36:	4b80      	ldr	r3, [pc, #512]	; (8018c38 <tcp_receive+0xf18>)
 8018a38:	681a      	ldr	r2, [r3, #0]
 8018a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a3c:	68db      	ldr	r3, [r3, #12]
 8018a3e:	685b      	ldr	r3, [r3, #4]
 8018a40:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	f340 80bd 	ble.w	8018bc2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a4a:	68db      	ldr	r3, [r3, #12]
 8018a4c:	899b      	ldrh	r3, [r3, #12]
 8018a4e:	b29b      	uxth	r3, r3
 8018a50:	4618      	mov	r0, r3
 8018a52:	f7fa f819 	bl	8012a88 <lwip_htons>
 8018a56:	4603      	mov	r3, r0
 8018a58:	b2db      	uxtb	r3, r3
 8018a5a:	f003 0301 	and.w	r3, r3, #1
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	f040 80bf 	bne.w	8018be2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018a64:	4875      	ldr	r0, [pc, #468]	; (8018c3c <tcp_receive+0xf1c>)
 8018a66:	f7fd fa25 	bl	8015eb4 <tcp_seg_copy>
 8018a6a:	4602      	mov	r2, r0
 8018a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a6e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	f000 80b6 	beq.w	8018be6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8018a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a7c:	68db      	ldr	r3, [r3, #12]
 8018a7e:	685b      	ldr	r3, [r3, #4]
 8018a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018a82:	8912      	ldrh	r2, [r2, #8]
 8018a84:	441a      	add	r2, r3
 8018a86:	4b6c      	ldr	r3, [pc, #432]	; (8018c38 <tcp_receive+0xf18>)
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	1ad3      	subs	r3, r2, r3
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	dd12      	ble.n	8018ab6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018a90:	4b69      	ldr	r3, [pc, #420]	; (8018c38 <tcp_receive+0xf18>)
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	b29a      	uxth	r2, r3
 8018a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a98:	68db      	ldr	r3, [r3, #12]
 8018a9a:	685b      	ldr	r3, [r3, #4]
 8018a9c:	b29b      	uxth	r3, r3
 8018a9e:	1ad3      	subs	r3, r2, r3
 8018aa0:	b29a      	uxth	r2, r3
 8018aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018aa4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8018aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018aa8:	685a      	ldr	r2, [r3, #4]
 8018aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018aac:	891b      	ldrh	r3, [r3, #8]
 8018aae:	4619      	mov	r1, r3
 8018ab0:	4610      	mov	r0, r2
 8018ab2:	f7fb fbdd 	bl	8014270 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018ab6:	4b62      	ldr	r3, [pc, #392]	; (8018c40 <tcp_receive+0xf20>)
 8018ab8:	881b      	ldrh	r3, [r3, #0]
 8018aba:	461a      	mov	r2, r3
 8018abc:	4b5e      	ldr	r3, [pc, #376]	; (8018c38 <tcp_receive+0xf18>)
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	441a      	add	r2, r3
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ac6:	6879      	ldr	r1, [r7, #4]
 8018ac8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018aca:	440b      	add	r3, r1
 8018acc:	1ad3      	subs	r3, r2, r3
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	f340 8089 	ble.w	8018be6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	68db      	ldr	r3, [r3, #12]
 8018ada:	899b      	ldrh	r3, [r3, #12]
 8018adc:	b29b      	uxth	r3, r3
 8018ade:	4618      	mov	r0, r3
 8018ae0:	f7f9 ffd2 	bl	8012a88 <lwip_htons>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	b2db      	uxtb	r3, r3
 8018ae8:	f003 0301 	and.w	r3, r3, #1
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d022      	beq.n	8018b36 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	68db      	ldr	r3, [r3, #12]
 8018af6:	899b      	ldrh	r3, [r3, #12]
 8018af8:	b29b      	uxth	r3, r3
 8018afa:	b21b      	sxth	r3, r3
 8018afc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018b00:	b21c      	sxth	r4, r3
 8018b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	68db      	ldr	r3, [r3, #12]
 8018b08:	899b      	ldrh	r3, [r3, #12]
 8018b0a:	b29b      	uxth	r3, r3
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	f7f9 ffbb 	bl	8012a88 <lwip_htons>
 8018b12:	4603      	mov	r3, r0
 8018b14:	b2db      	uxtb	r3, r3
 8018b16:	b29b      	uxth	r3, r3
 8018b18:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018b1c:	b29b      	uxth	r3, r3
 8018b1e:	4618      	mov	r0, r3
 8018b20:	f7f9 ffb2 	bl	8012a88 <lwip_htons>
 8018b24:	4603      	mov	r3, r0
 8018b26:	b21b      	sxth	r3, r3
 8018b28:	4323      	orrs	r3, r4
 8018b2a:	b21a      	sxth	r2, r3
 8018b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	68db      	ldr	r3, [r3, #12]
 8018b32:	b292      	uxth	r2, r2
 8018b34:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b3a:	b29a      	uxth	r2, r3
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018b40:	4413      	add	r3, r2
 8018b42:	b299      	uxth	r1, r3
 8018b44:	4b3c      	ldr	r3, [pc, #240]	; (8018c38 <tcp_receive+0xf18>)
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	b29a      	uxth	r2, r3
 8018b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	1a8a      	subs	r2, r1, r2
 8018b50:	b292      	uxth	r2, r2
 8018b52:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	685a      	ldr	r2, [r3, #4]
 8018b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	891b      	ldrh	r3, [r3, #8]
 8018b60:	4619      	mov	r1, r3
 8018b62:	4610      	mov	r0, r2
 8018b64:	f7fb fb84 	bl	8014270 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	891c      	ldrh	r4, [r3, #8]
 8018b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	68db      	ldr	r3, [r3, #12]
 8018b74:	899b      	ldrh	r3, [r3, #12]
 8018b76:	b29b      	uxth	r3, r3
 8018b78:	4618      	mov	r0, r3
 8018b7a:	f7f9 ff85 	bl	8012a88 <lwip_htons>
 8018b7e:	4603      	mov	r3, r0
 8018b80:	b2db      	uxtb	r3, r3
 8018b82:	f003 0303 	and.w	r3, r3, #3
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d001      	beq.n	8018b8e <tcp_receive+0xe6e>
 8018b8a:	2301      	movs	r3, #1
 8018b8c:	e000      	b.n	8018b90 <tcp_receive+0xe70>
 8018b8e:	2300      	movs	r3, #0
 8018b90:	4423      	add	r3, r4
 8018b92:	b29a      	uxth	r2, r3
 8018b94:	4b2a      	ldr	r3, [pc, #168]	; (8018c40 <tcp_receive+0xf20>)
 8018b96:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018b98:	4b29      	ldr	r3, [pc, #164]	; (8018c40 <tcp_receive+0xf20>)
 8018b9a:	881b      	ldrh	r3, [r3, #0]
 8018b9c:	461a      	mov	r2, r3
 8018b9e:	4b26      	ldr	r3, [pc, #152]	; (8018c38 <tcp_receive+0xf18>)
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	441a      	add	r2, r3
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ba8:	6879      	ldr	r1, [r7, #4]
 8018baa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018bac:	440b      	add	r3, r1
 8018bae:	429a      	cmp	r2, r3
 8018bb0:	d019      	beq.n	8018be6 <tcp_receive+0xec6>
 8018bb2:	4b24      	ldr	r3, [pc, #144]	; (8018c44 <tcp_receive+0xf24>)
 8018bb4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8018bb8:	4923      	ldr	r1, [pc, #140]	; (8018c48 <tcp_receive+0xf28>)
 8018bba:	4824      	ldr	r0, [pc, #144]	; (8018c4c <tcp_receive+0xf2c>)
 8018bbc:	f005 fb42 	bl	801e244 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018bc0:	e011      	b.n	8018be6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8018bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	f47f aea4 	bne.w	8018918 <tcp_receive+0xbf8>
 8018bd0:	e00a      	b.n	8018be8 <tcp_receive+0xec8>
                break;
 8018bd2:	bf00      	nop
 8018bd4:	e008      	b.n	8018be8 <tcp_receive+0xec8>
                break;
 8018bd6:	bf00      	nop
 8018bd8:	e006      	b.n	8018be8 <tcp_receive+0xec8>
                  break;
 8018bda:	bf00      	nop
 8018bdc:	e004      	b.n	8018be8 <tcp_receive+0xec8>
                  break;
 8018bde:	bf00      	nop
 8018be0:	e002      	b.n	8018be8 <tcp_receive+0xec8>
                  break;
 8018be2:	bf00      	nop
 8018be4:	e000      	b.n	8018be8 <tcp_receive+0xec8>
                break;
 8018be6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8018be8:	6878      	ldr	r0, [r7, #4]
 8018bea:	f001 fead 	bl	801a948 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8018bee:	e003      	b.n	8018bf8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8018bf0:	6878      	ldr	r0, [r7, #4]
 8018bf2:	f001 fea9 	bl	801a948 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018bf6:	e01a      	b.n	8018c2e <tcp_receive+0xf0e>
 8018bf8:	e019      	b.n	8018c2e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018bfa:	4b0f      	ldr	r3, [pc, #60]	; (8018c38 <tcp_receive+0xf18>)
 8018bfc:	681a      	ldr	r2, [r3, #0]
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c02:	1ad3      	subs	r3, r2, r3
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	db0a      	blt.n	8018c1e <tcp_receive+0xefe>
 8018c08:	4b0b      	ldr	r3, [pc, #44]	; (8018c38 <tcp_receive+0xf18>)
 8018c0a:	681a      	ldr	r2, [r3, #0]
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c10:	6879      	ldr	r1, [r7, #4]
 8018c12:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018c14:	440b      	add	r3, r1
 8018c16:	1ad3      	subs	r3, r2, r3
 8018c18:	3301      	adds	r3, #1
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	dd07      	ble.n	8018c2e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	8b5b      	ldrh	r3, [r3, #26]
 8018c22:	f043 0302 	orr.w	r3, r3, #2
 8018c26:	b29a      	uxth	r2, r3
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8018c2c:	e7ff      	b.n	8018c2e <tcp_receive+0xf0e>
 8018c2e:	bf00      	nop
 8018c30:	3750      	adds	r7, #80	; 0x50
 8018c32:	46bd      	mov	sp, r7
 8018c34:	bdb0      	pop	{r4, r5, r7, pc}
 8018c36:	bf00      	nop
 8018c38:	2405e9e4 	.word	0x2405e9e4
 8018c3c:	2405e9c4 	.word	0x2405e9c4
 8018c40:	2405e9ee 	.word	0x2405e9ee
 8018c44:	08021308 	.word	0x08021308
 8018c48:	080216b0 	.word	0x080216b0
 8018c4c:	08021354 	.word	0x08021354

08018c50 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018c50:	b480      	push	{r7}
 8018c52:	b083      	sub	sp, #12
 8018c54:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8018c56:	4b15      	ldr	r3, [pc, #84]	; (8018cac <tcp_get_next_optbyte+0x5c>)
 8018c58:	881b      	ldrh	r3, [r3, #0]
 8018c5a:	1c5a      	adds	r2, r3, #1
 8018c5c:	b291      	uxth	r1, r2
 8018c5e:	4a13      	ldr	r2, [pc, #76]	; (8018cac <tcp_get_next_optbyte+0x5c>)
 8018c60:	8011      	strh	r1, [r2, #0]
 8018c62:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018c64:	4b12      	ldr	r3, [pc, #72]	; (8018cb0 <tcp_get_next_optbyte+0x60>)
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d004      	beq.n	8018c76 <tcp_get_next_optbyte+0x26>
 8018c6c:	4b11      	ldr	r3, [pc, #68]	; (8018cb4 <tcp_get_next_optbyte+0x64>)
 8018c6e:	881b      	ldrh	r3, [r3, #0]
 8018c70:	88fa      	ldrh	r2, [r7, #6]
 8018c72:	429a      	cmp	r2, r3
 8018c74:	d208      	bcs.n	8018c88 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018c76:	4b10      	ldr	r3, [pc, #64]	; (8018cb8 <tcp_get_next_optbyte+0x68>)
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	3314      	adds	r3, #20
 8018c7c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8018c7e:	88fb      	ldrh	r3, [r7, #6]
 8018c80:	683a      	ldr	r2, [r7, #0]
 8018c82:	4413      	add	r3, r2
 8018c84:	781b      	ldrb	r3, [r3, #0]
 8018c86:	e00b      	b.n	8018ca0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018c88:	88fb      	ldrh	r3, [r7, #6]
 8018c8a:	b2da      	uxtb	r2, r3
 8018c8c:	4b09      	ldr	r3, [pc, #36]	; (8018cb4 <tcp_get_next_optbyte+0x64>)
 8018c8e:	881b      	ldrh	r3, [r3, #0]
 8018c90:	b2db      	uxtb	r3, r3
 8018c92:	1ad3      	subs	r3, r2, r3
 8018c94:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018c96:	4b06      	ldr	r3, [pc, #24]	; (8018cb0 <tcp_get_next_optbyte+0x60>)
 8018c98:	681a      	ldr	r2, [r3, #0]
 8018c9a:	797b      	ldrb	r3, [r7, #5]
 8018c9c:	4413      	add	r3, r2
 8018c9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	370c      	adds	r7, #12
 8018ca4:	46bd      	mov	sp, r7
 8018ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018caa:	4770      	bx	lr
 8018cac:	2405e9e0 	.word	0x2405e9e0
 8018cb0:	2405e9dc 	.word	0x2405e9dc
 8018cb4:	2405e9da 	.word	0x2405e9da
 8018cb8:	2405e9d4 	.word	0x2405e9d4

08018cbc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b084      	sub	sp, #16
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d106      	bne.n	8018cd8 <tcp_parseopt+0x1c>
 8018cca:	4b32      	ldr	r3, [pc, #200]	; (8018d94 <tcp_parseopt+0xd8>)
 8018ccc:	f240 727d 	movw	r2, #1917	; 0x77d
 8018cd0:	4931      	ldr	r1, [pc, #196]	; (8018d98 <tcp_parseopt+0xdc>)
 8018cd2:	4832      	ldr	r0, [pc, #200]	; (8018d9c <tcp_parseopt+0xe0>)
 8018cd4:	f005 fab6 	bl	801e244 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018cd8:	4b31      	ldr	r3, [pc, #196]	; (8018da0 <tcp_parseopt+0xe4>)
 8018cda:	881b      	ldrh	r3, [r3, #0]
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d055      	beq.n	8018d8c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018ce0:	4b30      	ldr	r3, [pc, #192]	; (8018da4 <tcp_parseopt+0xe8>)
 8018ce2:	2200      	movs	r2, #0
 8018ce4:	801a      	strh	r2, [r3, #0]
 8018ce6:	e045      	b.n	8018d74 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8018ce8:	f7ff ffb2 	bl	8018c50 <tcp_get_next_optbyte>
 8018cec:	4603      	mov	r3, r0
 8018cee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018cf0:	7bfb      	ldrb	r3, [r7, #15]
 8018cf2:	2b02      	cmp	r3, #2
 8018cf4:	d006      	beq.n	8018d04 <tcp_parseopt+0x48>
 8018cf6:	2b02      	cmp	r3, #2
 8018cf8:	dc2b      	bgt.n	8018d52 <tcp_parseopt+0x96>
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d041      	beq.n	8018d82 <tcp_parseopt+0xc6>
 8018cfe:	2b01      	cmp	r3, #1
 8018d00:	d127      	bne.n	8018d52 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8018d02:	e037      	b.n	8018d74 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018d04:	f7ff ffa4 	bl	8018c50 <tcp_get_next_optbyte>
 8018d08:	4603      	mov	r3, r0
 8018d0a:	2b04      	cmp	r3, #4
 8018d0c:	d13b      	bne.n	8018d86 <tcp_parseopt+0xca>
 8018d0e:	4b25      	ldr	r3, [pc, #148]	; (8018da4 <tcp_parseopt+0xe8>)
 8018d10:	881b      	ldrh	r3, [r3, #0]
 8018d12:	3301      	adds	r3, #1
 8018d14:	4a22      	ldr	r2, [pc, #136]	; (8018da0 <tcp_parseopt+0xe4>)
 8018d16:	8812      	ldrh	r2, [r2, #0]
 8018d18:	4293      	cmp	r3, r2
 8018d1a:	da34      	bge.n	8018d86 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018d1c:	f7ff ff98 	bl	8018c50 <tcp_get_next_optbyte>
 8018d20:	4603      	mov	r3, r0
 8018d22:	b29b      	uxth	r3, r3
 8018d24:	021b      	lsls	r3, r3, #8
 8018d26:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8018d28:	f7ff ff92 	bl	8018c50 <tcp_get_next_optbyte>
 8018d2c:	4603      	mov	r3, r0
 8018d2e:	b29a      	uxth	r2, r3
 8018d30:	89bb      	ldrh	r3, [r7, #12]
 8018d32:	4313      	orrs	r3, r2
 8018d34:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8018d36:	89bb      	ldrh	r3, [r7, #12]
 8018d38:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8018d3c:	d804      	bhi.n	8018d48 <tcp_parseopt+0x8c>
 8018d3e:	89bb      	ldrh	r3, [r7, #12]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d001      	beq.n	8018d48 <tcp_parseopt+0x8c>
 8018d44:	89ba      	ldrh	r2, [r7, #12]
 8018d46:	e001      	b.n	8018d4c <tcp_parseopt+0x90>
 8018d48:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8018d50:	e010      	b.n	8018d74 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8018d52:	f7ff ff7d 	bl	8018c50 <tcp_get_next_optbyte>
 8018d56:	4603      	mov	r3, r0
 8018d58:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8018d5a:	7afb      	ldrb	r3, [r7, #11]
 8018d5c:	2b01      	cmp	r3, #1
 8018d5e:	d914      	bls.n	8018d8a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8018d60:	7afb      	ldrb	r3, [r7, #11]
 8018d62:	b29a      	uxth	r2, r3
 8018d64:	4b0f      	ldr	r3, [pc, #60]	; (8018da4 <tcp_parseopt+0xe8>)
 8018d66:	881b      	ldrh	r3, [r3, #0]
 8018d68:	4413      	add	r3, r2
 8018d6a:	b29b      	uxth	r3, r3
 8018d6c:	3b02      	subs	r3, #2
 8018d6e:	b29a      	uxth	r2, r3
 8018d70:	4b0c      	ldr	r3, [pc, #48]	; (8018da4 <tcp_parseopt+0xe8>)
 8018d72:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018d74:	4b0b      	ldr	r3, [pc, #44]	; (8018da4 <tcp_parseopt+0xe8>)
 8018d76:	881a      	ldrh	r2, [r3, #0]
 8018d78:	4b09      	ldr	r3, [pc, #36]	; (8018da0 <tcp_parseopt+0xe4>)
 8018d7a:	881b      	ldrh	r3, [r3, #0]
 8018d7c:	429a      	cmp	r2, r3
 8018d7e:	d3b3      	bcc.n	8018ce8 <tcp_parseopt+0x2c>
 8018d80:	e004      	b.n	8018d8c <tcp_parseopt+0xd0>
          return;
 8018d82:	bf00      	nop
 8018d84:	e002      	b.n	8018d8c <tcp_parseopt+0xd0>
            return;
 8018d86:	bf00      	nop
 8018d88:	e000      	b.n	8018d8c <tcp_parseopt+0xd0>
            return;
 8018d8a:	bf00      	nop
      }
    }
  }
}
 8018d8c:	3710      	adds	r7, #16
 8018d8e:	46bd      	mov	sp, r7
 8018d90:	bd80      	pop	{r7, pc}
 8018d92:	bf00      	nop
 8018d94:	08021308 	.word	0x08021308
 8018d98:	0802176c 	.word	0x0802176c
 8018d9c:	08021354 	.word	0x08021354
 8018da0:	2405e9d8 	.word	0x2405e9d8
 8018da4:	2405e9e0 	.word	0x2405e9e0

08018da8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018da8:	b480      	push	{r7}
 8018daa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018dac:	4b05      	ldr	r3, [pc, #20]	; (8018dc4 <tcp_trigger_input_pcb_close+0x1c>)
 8018dae:	781b      	ldrb	r3, [r3, #0]
 8018db0:	f043 0310 	orr.w	r3, r3, #16
 8018db4:	b2da      	uxtb	r2, r3
 8018db6:	4b03      	ldr	r3, [pc, #12]	; (8018dc4 <tcp_trigger_input_pcb_close+0x1c>)
 8018db8:	701a      	strb	r2, [r3, #0]
}
 8018dba:	bf00      	nop
 8018dbc:	46bd      	mov	sp, r7
 8018dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc2:	4770      	bx	lr
 8018dc4:	2405e9f1 	.word	0x2405e9f1

08018dc8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b084      	sub	sp, #16
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	60f8      	str	r0, [r7, #12]
 8018dd0:	60b9      	str	r1, [r7, #8]
 8018dd2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018dd4:	68fb      	ldr	r3, [r7, #12]
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d00a      	beq.n	8018df0 <tcp_route+0x28>
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	7a1b      	ldrb	r3, [r3, #8]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d006      	beq.n	8018df0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	7a1b      	ldrb	r3, [r3, #8]
 8018de6:	4618      	mov	r0, r3
 8018de8:	f7fb f836 	bl	8013e58 <netif_get_by_index>
 8018dec:	4603      	mov	r3, r0
 8018dee:	e003      	b.n	8018df8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018df0:	6878      	ldr	r0, [r7, #4]
 8018df2:	f003 fc93 	bl	801c71c <ip4_route>
 8018df6:	4603      	mov	r3, r0
  }
}
 8018df8:	4618      	mov	r0, r3
 8018dfa:	3710      	adds	r7, #16
 8018dfc:	46bd      	mov	sp, r7
 8018dfe:	bd80      	pop	{r7, pc}

08018e00 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018e00:	b590      	push	{r4, r7, lr}
 8018e02:	b087      	sub	sp, #28
 8018e04:	af00      	add	r7, sp, #0
 8018e06:	60f8      	str	r0, [r7, #12]
 8018e08:	60b9      	str	r1, [r7, #8]
 8018e0a:	603b      	str	r3, [r7, #0]
 8018e0c:	4613      	mov	r3, r2
 8018e0e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d105      	bne.n	8018e22 <tcp_create_segment+0x22>
 8018e16:	4b44      	ldr	r3, [pc, #272]	; (8018f28 <tcp_create_segment+0x128>)
 8018e18:	22a3      	movs	r2, #163	; 0xa3
 8018e1a:	4944      	ldr	r1, [pc, #272]	; (8018f2c <tcp_create_segment+0x12c>)
 8018e1c:	4844      	ldr	r0, [pc, #272]	; (8018f30 <tcp_create_segment+0x130>)
 8018e1e:	f005 fa11 	bl	801e244 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8018e22:	68bb      	ldr	r3, [r7, #8]
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d105      	bne.n	8018e34 <tcp_create_segment+0x34>
 8018e28:	4b3f      	ldr	r3, [pc, #252]	; (8018f28 <tcp_create_segment+0x128>)
 8018e2a:	22a4      	movs	r2, #164	; 0xa4
 8018e2c:	4941      	ldr	r1, [pc, #260]	; (8018f34 <tcp_create_segment+0x134>)
 8018e2e:	4840      	ldr	r0, [pc, #256]	; (8018f30 <tcp_create_segment+0x130>)
 8018e30:	f005 fa08 	bl	801e244 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018e34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018e38:	009b      	lsls	r3, r3, #2
 8018e3a:	b2db      	uxtb	r3, r3
 8018e3c:	f003 0304 	and.w	r3, r3, #4
 8018e40:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018e42:	2003      	movs	r0, #3
 8018e44:	f7fa fc7c 	bl	8013740 <memp_malloc>
 8018e48:	6138      	str	r0, [r7, #16]
 8018e4a:	693b      	ldr	r3, [r7, #16]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d104      	bne.n	8018e5a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018e50:	68b8      	ldr	r0, [r7, #8]
 8018e52:	f7fb fb93 	bl	801457c <pbuf_free>
    return NULL;
 8018e56:	2300      	movs	r3, #0
 8018e58:	e061      	b.n	8018f1e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8018e5a:	693b      	ldr	r3, [r7, #16]
 8018e5c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018e60:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018e62:	693b      	ldr	r3, [r7, #16]
 8018e64:	2200      	movs	r2, #0
 8018e66:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018e68:	693b      	ldr	r3, [r7, #16]
 8018e6a:	68ba      	ldr	r2, [r7, #8]
 8018e6c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018e6e:	68bb      	ldr	r3, [r7, #8]
 8018e70:	891a      	ldrh	r2, [r3, #8]
 8018e72:	7dfb      	ldrb	r3, [r7, #23]
 8018e74:	b29b      	uxth	r3, r3
 8018e76:	429a      	cmp	r2, r3
 8018e78:	d205      	bcs.n	8018e86 <tcp_create_segment+0x86>
 8018e7a:	4b2b      	ldr	r3, [pc, #172]	; (8018f28 <tcp_create_segment+0x128>)
 8018e7c:	22b0      	movs	r2, #176	; 0xb0
 8018e7e:	492e      	ldr	r1, [pc, #184]	; (8018f38 <tcp_create_segment+0x138>)
 8018e80:	482b      	ldr	r0, [pc, #172]	; (8018f30 <tcp_create_segment+0x130>)
 8018e82:	f005 f9df 	bl	801e244 <iprintf>
  seg->len = p->tot_len - optlen;
 8018e86:	68bb      	ldr	r3, [r7, #8]
 8018e88:	891a      	ldrh	r2, [r3, #8]
 8018e8a:	7dfb      	ldrb	r3, [r7, #23]
 8018e8c:	b29b      	uxth	r3, r3
 8018e8e:	1ad3      	subs	r3, r2, r3
 8018e90:	b29a      	uxth	r2, r3
 8018e92:	693b      	ldr	r3, [r7, #16]
 8018e94:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018e96:	2114      	movs	r1, #20
 8018e98:	68b8      	ldr	r0, [r7, #8]
 8018e9a:	f7fb fad9 	bl	8014450 <pbuf_add_header>
 8018e9e:	4603      	mov	r3, r0
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d004      	beq.n	8018eae <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018ea4:	6938      	ldr	r0, [r7, #16]
 8018ea6:	f7fc ffec 	bl	8015e82 <tcp_seg_free>
    return NULL;
 8018eaa:	2300      	movs	r3, #0
 8018eac:	e037      	b.n	8018f1e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018eae:	693b      	ldr	r3, [r7, #16]
 8018eb0:	685b      	ldr	r3, [r3, #4]
 8018eb2:	685a      	ldr	r2, [r3, #4]
 8018eb4:	693b      	ldr	r3, [r7, #16]
 8018eb6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	8ada      	ldrh	r2, [r3, #22]
 8018ebc:	693b      	ldr	r3, [r7, #16]
 8018ebe:	68dc      	ldr	r4, [r3, #12]
 8018ec0:	4610      	mov	r0, r2
 8018ec2:	f7f9 fde1 	bl	8012a88 <lwip_htons>
 8018ec6:	4603      	mov	r3, r0
 8018ec8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	8b1a      	ldrh	r2, [r3, #24]
 8018ece:	693b      	ldr	r3, [r7, #16]
 8018ed0:	68dc      	ldr	r4, [r3, #12]
 8018ed2:	4610      	mov	r0, r2
 8018ed4:	f7f9 fdd8 	bl	8012a88 <lwip_htons>
 8018ed8:	4603      	mov	r3, r0
 8018eda:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018edc:	693b      	ldr	r3, [r7, #16]
 8018ede:	68dc      	ldr	r4, [r3, #12]
 8018ee0:	6838      	ldr	r0, [r7, #0]
 8018ee2:	f7f9 fde6 	bl	8012ab2 <lwip_htonl>
 8018ee6:	4603      	mov	r3, r0
 8018ee8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8018eea:	7dfb      	ldrb	r3, [r7, #23]
 8018eec:	089b      	lsrs	r3, r3, #2
 8018eee:	b2db      	uxtb	r3, r3
 8018ef0:	b29b      	uxth	r3, r3
 8018ef2:	3305      	adds	r3, #5
 8018ef4:	b29b      	uxth	r3, r3
 8018ef6:	031b      	lsls	r3, r3, #12
 8018ef8:	b29a      	uxth	r2, r3
 8018efa:	79fb      	ldrb	r3, [r7, #7]
 8018efc:	b29b      	uxth	r3, r3
 8018efe:	4313      	orrs	r3, r2
 8018f00:	b29a      	uxth	r2, r3
 8018f02:	693b      	ldr	r3, [r7, #16]
 8018f04:	68dc      	ldr	r4, [r3, #12]
 8018f06:	4610      	mov	r0, r2
 8018f08:	f7f9 fdbe 	bl	8012a88 <lwip_htons>
 8018f0c:	4603      	mov	r3, r0
 8018f0e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8018f10:	693b      	ldr	r3, [r7, #16]
 8018f12:	68db      	ldr	r3, [r3, #12]
 8018f14:	2200      	movs	r2, #0
 8018f16:	749a      	strb	r2, [r3, #18]
 8018f18:	2200      	movs	r2, #0
 8018f1a:	74da      	strb	r2, [r3, #19]
  return seg;
 8018f1c:	693b      	ldr	r3, [r7, #16]
}
 8018f1e:	4618      	mov	r0, r3
 8018f20:	371c      	adds	r7, #28
 8018f22:	46bd      	mov	sp, r7
 8018f24:	bd90      	pop	{r4, r7, pc}
 8018f26:	bf00      	nop
 8018f28:	08021788 	.word	0x08021788
 8018f2c:	080217bc 	.word	0x080217bc
 8018f30:	080217dc 	.word	0x080217dc
 8018f34:	08021804 	.word	0x08021804
 8018f38:	08021828 	.word	0x08021828

08018f3c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8018f3c:	b580      	push	{r7, lr}
 8018f3e:	b086      	sub	sp, #24
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	607b      	str	r3, [r7, #4]
 8018f44:	4603      	mov	r3, r0
 8018f46:	73fb      	strb	r3, [r7, #15]
 8018f48:	460b      	mov	r3, r1
 8018f4a:	81bb      	strh	r3, [r7, #12]
 8018f4c:	4613      	mov	r3, r2
 8018f4e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8018f50:	89bb      	ldrh	r3, [r7, #12]
 8018f52:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d105      	bne.n	8018f66 <tcp_pbuf_prealloc+0x2a>
 8018f5a:	4b30      	ldr	r3, [pc, #192]	; (801901c <tcp_pbuf_prealloc+0xe0>)
 8018f5c:	22e8      	movs	r2, #232	; 0xe8
 8018f5e:	4930      	ldr	r1, [pc, #192]	; (8019020 <tcp_pbuf_prealloc+0xe4>)
 8018f60:	4830      	ldr	r0, [pc, #192]	; (8019024 <tcp_pbuf_prealloc+0xe8>)
 8018f62:	f005 f96f 	bl	801e244 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8018f66:	6a3b      	ldr	r3, [r7, #32]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d105      	bne.n	8018f78 <tcp_pbuf_prealloc+0x3c>
 8018f6c:	4b2b      	ldr	r3, [pc, #172]	; (801901c <tcp_pbuf_prealloc+0xe0>)
 8018f6e:	22e9      	movs	r2, #233	; 0xe9
 8018f70:	492d      	ldr	r1, [pc, #180]	; (8019028 <tcp_pbuf_prealloc+0xec>)
 8018f72:	482c      	ldr	r0, [pc, #176]	; (8019024 <tcp_pbuf_prealloc+0xe8>)
 8018f74:	f005 f966 	bl	801e244 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8018f78:	89ba      	ldrh	r2, [r7, #12]
 8018f7a:	897b      	ldrh	r3, [r7, #10]
 8018f7c:	429a      	cmp	r2, r3
 8018f7e:	d221      	bcs.n	8018fc4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018f80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018f84:	f003 0302 	and.w	r3, r3, #2
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d111      	bne.n	8018fb0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8018f8c:	6a3b      	ldr	r3, [r7, #32]
 8018f8e:	8b5b      	ldrh	r3, [r3, #26]
 8018f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d115      	bne.n	8018fc4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8018f98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d007      	beq.n	8018fb0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018fa0:	6a3b      	ldr	r3, [r7, #32]
 8018fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d103      	bne.n	8018fb0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8018fa8:	6a3b      	ldr	r3, [r7, #32]
 8018faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d009      	beq.n	8018fc4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018fb0:	89bb      	ldrh	r3, [r7, #12]
 8018fb2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8018fb6:	f023 0203 	bic.w	r2, r3, #3
 8018fba:	897b      	ldrh	r3, [r7, #10]
 8018fbc:	4293      	cmp	r3, r2
 8018fbe:	bf28      	it	cs
 8018fc0:	4613      	movcs	r3, r2
 8018fc2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018fc4:	8af9      	ldrh	r1, [r7, #22]
 8018fc6:	7bfb      	ldrb	r3, [r7, #15]
 8018fc8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018fcc:	4618      	mov	r0, r3
 8018fce:	f7fa ffed 	bl	8013fac <pbuf_alloc>
 8018fd2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018fd4:	693b      	ldr	r3, [r7, #16]
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d101      	bne.n	8018fde <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8018fda:	2300      	movs	r3, #0
 8018fdc:	e019      	b.n	8019012 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8018fde:	693b      	ldr	r3, [r7, #16]
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d006      	beq.n	8018ff4 <tcp_pbuf_prealloc+0xb8>
 8018fe6:	4b0d      	ldr	r3, [pc, #52]	; (801901c <tcp_pbuf_prealloc+0xe0>)
 8018fe8:	f240 120b 	movw	r2, #267	; 0x10b
 8018fec:	490f      	ldr	r1, [pc, #60]	; (801902c <tcp_pbuf_prealloc+0xf0>)
 8018fee:	480d      	ldr	r0, [pc, #52]	; (8019024 <tcp_pbuf_prealloc+0xe8>)
 8018ff0:	f005 f928 	bl	801e244 <iprintf>
  *oversize = p->len - length;
 8018ff4:	693b      	ldr	r3, [r7, #16]
 8018ff6:	895a      	ldrh	r2, [r3, #10]
 8018ff8:	89bb      	ldrh	r3, [r7, #12]
 8018ffa:	1ad3      	subs	r3, r2, r3
 8018ffc:	b29a      	uxth	r2, r3
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8019002:	693b      	ldr	r3, [r7, #16]
 8019004:	89ba      	ldrh	r2, [r7, #12]
 8019006:	811a      	strh	r2, [r3, #8]
 8019008:	693b      	ldr	r3, [r7, #16]
 801900a:	891a      	ldrh	r2, [r3, #8]
 801900c:	693b      	ldr	r3, [r7, #16]
 801900e:	815a      	strh	r2, [r3, #10]
  return p;
 8019010:	693b      	ldr	r3, [r7, #16]
}
 8019012:	4618      	mov	r0, r3
 8019014:	3718      	adds	r7, #24
 8019016:	46bd      	mov	sp, r7
 8019018:	bd80      	pop	{r7, pc}
 801901a:	bf00      	nop
 801901c:	08021788 	.word	0x08021788
 8019020:	08021840 	.word	0x08021840
 8019024:	080217dc 	.word	0x080217dc
 8019028:	08021864 	.word	0x08021864
 801902c:	08021884 	.word	0x08021884

08019030 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8019030:	b580      	push	{r7, lr}
 8019032:	b082      	sub	sp, #8
 8019034:	af00      	add	r7, sp, #0
 8019036:	6078      	str	r0, [r7, #4]
 8019038:	460b      	mov	r3, r1
 801903a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	2b00      	cmp	r3, #0
 8019040:	d106      	bne.n	8019050 <tcp_write_checks+0x20>
 8019042:	4b33      	ldr	r3, [pc, #204]	; (8019110 <tcp_write_checks+0xe0>)
 8019044:	f240 1233 	movw	r2, #307	; 0x133
 8019048:	4932      	ldr	r1, [pc, #200]	; (8019114 <tcp_write_checks+0xe4>)
 801904a:	4833      	ldr	r0, [pc, #204]	; (8019118 <tcp_write_checks+0xe8>)
 801904c:	f005 f8fa 	bl	801e244 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	7d1b      	ldrb	r3, [r3, #20]
 8019054:	2b04      	cmp	r3, #4
 8019056:	d00e      	beq.n	8019076 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801905c:	2b07      	cmp	r3, #7
 801905e:	d00a      	beq.n	8019076 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8019064:	2b02      	cmp	r3, #2
 8019066:	d006      	beq.n	8019076 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801906c:	2b03      	cmp	r3, #3
 801906e:	d002      	beq.n	8019076 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8019070:	f06f 030a 	mvn.w	r3, #10
 8019074:	e048      	b.n	8019108 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8019076:	887b      	ldrh	r3, [r7, #2]
 8019078:	2b00      	cmp	r3, #0
 801907a:	d101      	bne.n	8019080 <tcp_write_checks+0x50>
    return ERR_OK;
 801907c:	2300      	movs	r3, #0
 801907e:	e043      	b.n	8019108 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019086:	887a      	ldrh	r2, [r7, #2]
 8019088:	429a      	cmp	r2, r3
 801908a:	d909      	bls.n	80190a0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	8b5b      	ldrh	r3, [r3, #26]
 8019090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019094:	b29a      	uxth	r2, r3
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801909a:	f04f 33ff 	mov.w	r3, #4294967295
 801909e:	e033      	b.n	8019108 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80190a6:	2b08      	cmp	r3, #8
 80190a8:	d909      	bls.n	80190be <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	8b5b      	ldrh	r3, [r3, #26]
 80190ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80190b2:	b29a      	uxth	r2, r3
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80190b8:	f04f 33ff 	mov.w	r3, #4294967295
 80190bc:	e024      	b.n	8019108 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d00f      	beq.n	80190e8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d11a      	bne.n	8019106 <tcp_write_checks+0xd6>
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d116      	bne.n	8019106 <tcp_write_checks+0xd6>
 80190d8:	4b0d      	ldr	r3, [pc, #52]	; (8019110 <tcp_write_checks+0xe0>)
 80190da:	f240 1255 	movw	r2, #341	; 0x155
 80190de:	490f      	ldr	r1, [pc, #60]	; (801911c <tcp_write_checks+0xec>)
 80190e0:	480d      	ldr	r0, [pc, #52]	; (8019118 <tcp_write_checks+0xe8>)
 80190e2:	f005 f8af 	bl	801e244 <iprintf>
 80190e6:	e00e      	b.n	8019106 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d103      	bne.n	80190f8 <tcp_write_checks+0xc8>
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d006      	beq.n	8019106 <tcp_write_checks+0xd6>
 80190f8:	4b05      	ldr	r3, [pc, #20]	; (8019110 <tcp_write_checks+0xe0>)
 80190fa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80190fe:	4908      	ldr	r1, [pc, #32]	; (8019120 <tcp_write_checks+0xf0>)
 8019100:	4805      	ldr	r0, [pc, #20]	; (8019118 <tcp_write_checks+0xe8>)
 8019102:	f005 f89f 	bl	801e244 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8019106:	2300      	movs	r3, #0
}
 8019108:	4618      	mov	r0, r3
 801910a:	3708      	adds	r7, #8
 801910c:	46bd      	mov	sp, r7
 801910e:	bd80      	pop	{r7, pc}
 8019110:	08021788 	.word	0x08021788
 8019114:	08021898 	.word	0x08021898
 8019118:	080217dc 	.word	0x080217dc
 801911c:	080218b8 	.word	0x080218b8
 8019120:	080218f4 	.word	0x080218f4

08019124 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8019124:	b590      	push	{r4, r7, lr}
 8019126:	b09b      	sub	sp, #108	; 0x6c
 8019128:	af04      	add	r7, sp, #16
 801912a:	60f8      	str	r0, [r7, #12]
 801912c:	60b9      	str	r1, [r7, #8]
 801912e:	4611      	mov	r1, r2
 8019130:	461a      	mov	r2, r3
 8019132:	460b      	mov	r3, r1
 8019134:	80fb      	strh	r3, [r7, #6]
 8019136:	4613      	mov	r3, r2
 8019138:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801913a:	2300      	movs	r3, #0
 801913c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801913e:	2300      	movs	r3, #0
 8019140:	653b      	str	r3, [r7, #80]	; 0x50
 8019142:	2300      	movs	r3, #0
 8019144:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019146:	2300      	movs	r3, #0
 8019148:	64bb      	str	r3, [r7, #72]	; 0x48
 801914a:	2300      	movs	r3, #0
 801914c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801914e:	2300      	movs	r3, #0
 8019150:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8019154:	2300      	movs	r3, #0
 8019156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801915a:	2300      	movs	r3, #0
 801915c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801915e:	2300      	movs	r3, #0
 8019160:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8019162:	2300      	movs	r3, #0
 8019164:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	2b00      	cmp	r3, #0
 801916a:	d109      	bne.n	8019180 <tcp_write+0x5c>
 801916c:	4ba4      	ldr	r3, [pc, #656]	; (8019400 <tcp_write+0x2dc>)
 801916e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8019172:	49a4      	ldr	r1, [pc, #656]	; (8019404 <tcp_write+0x2e0>)
 8019174:	48a4      	ldr	r0, [pc, #656]	; (8019408 <tcp_write+0x2e4>)
 8019176:	f005 f865 	bl	801e244 <iprintf>
 801917a:	f06f 030f 	mvn.w	r3, #15
 801917e:	e32a      	b.n	80197d6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8019186:	085b      	lsrs	r3, r3, #1
 8019188:	b29a      	uxth	r2, r3
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801918e:	4293      	cmp	r3, r2
 8019190:	bf28      	it	cs
 8019192:	4613      	movcs	r3, r2
 8019194:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8019196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019198:	2b00      	cmp	r3, #0
 801919a:	d102      	bne.n	80191a2 <tcp_write+0x7e>
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191a0:	e000      	b.n	80191a4 <tcp_write+0x80>
 80191a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80191a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80191a6:	68bb      	ldr	r3, [r7, #8]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d109      	bne.n	80191c0 <tcp_write+0x9c>
 80191ac:	4b94      	ldr	r3, [pc, #592]	; (8019400 <tcp_write+0x2dc>)
 80191ae:	f240 12ad 	movw	r2, #429	; 0x1ad
 80191b2:	4996      	ldr	r1, [pc, #600]	; (801940c <tcp_write+0x2e8>)
 80191b4:	4894      	ldr	r0, [pc, #592]	; (8019408 <tcp_write+0x2e4>)
 80191b6:	f005 f845 	bl	801e244 <iprintf>
 80191ba:	f06f 030f 	mvn.w	r3, #15
 80191be:	e30a      	b.n	80197d6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80191c0:	88fb      	ldrh	r3, [r7, #6]
 80191c2:	4619      	mov	r1, r3
 80191c4:	68f8      	ldr	r0, [r7, #12]
 80191c6:	f7ff ff33 	bl	8019030 <tcp_write_checks>
 80191ca:	4603      	mov	r3, r0
 80191cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80191d0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	d002      	beq.n	80191de <tcp_write+0xba>
    return err;
 80191d8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80191dc:	e2fb      	b.n	80197d6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80191de:	68fb      	ldr	r3, [r7, #12]
 80191e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80191e4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80191e8:	2300      	movs	r3, #0
 80191ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80191ee:	68fb      	ldr	r3, [r7, #12]
 80191f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	f000 80f6 	beq.w	80193e4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80191fc:	653b      	str	r3, [r7, #80]	; 0x50
 80191fe:	e002      	b.n	8019206 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8019200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	2b00      	cmp	r3, #0
 801920c:	d1f8      	bne.n	8019200 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801920e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019210:	7a9b      	ldrb	r3, [r3, #10]
 8019212:	009b      	lsls	r3, r3, #2
 8019214:	b29b      	uxth	r3, r3
 8019216:	f003 0304 	and.w	r3, r3, #4
 801921a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801921c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801921e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019220:	891b      	ldrh	r3, [r3, #8]
 8019222:	4619      	mov	r1, r3
 8019224:	8c3b      	ldrh	r3, [r7, #32]
 8019226:	440b      	add	r3, r1
 8019228:	429a      	cmp	r2, r3
 801922a:	da06      	bge.n	801923a <tcp_write+0x116>
 801922c:	4b74      	ldr	r3, [pc, #464]	; (8019400 <tcp_write+0x2dc>)
 801922e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019232:	4977      	ldr	r1, [pc, #476]	; (8019410 <tcp_write+0x2ec>)
 8019234:	4874      	ldr	r0, [pc, #464]	; (8019408 <tcp_write+0x2e4>)
 8019236:	f005 f805 	bl	801e244 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801923a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801923c:	891a      	ldrh	r2, [r3, #8]
 801923e:	8c3b      	ldrh	r3, [r7, #32]
 8019240:	4413      	add	r3, r2
 8019242:	b29b      	uxth	r3, r3
 8019244:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019246:	1ad3      	subs	r3, r2, r3
 8019248:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019250:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8019252:	8a7b      	ldrh	r3, [r7, #18]
 8019254:	2b00      	cmp	r3, #0
 8019256:	d026      	beq.n	80192a6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8019258:	8a7b      	ldrh	r3, [r7, #18]
 801925a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801925c:	429a      	cmp	r2, r3
 801925e:	d206      	bcs.n	801926e <tcp_write+0x14a>
 8019260:	4b67      	ldr	r3, [pc, #412]	; (8019400 <tcp_write+0x2dc>)
 8019262:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8019266:	496b      	ldr	r1, [pc, #428]	; (8019414 <tcp_write+0x2f0>)
 8019268:	4867      	ldr	r0, [pc, #412]	; (8019408 <tcp_write+0x2e4>)
 801926a:	f004 ffeb 	bl	801e244 <iprintf>
      seg = last_unsent;
 801926e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019270:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8019272:	8a7b      	ldrh	r3, [r7, #18]
 8019274:	88fa      	ldrh	r2, [r7, #6]
 8019276:	4293      	cmp	r3, r2
 8019278:	bf28      	it	cs
 801927a:	4613      	movcs	r3, r2
 801927c:	b29b      	uxth	r3, r3
 801927e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019280:	4293      	cmp	r3, r2
 8019282:	bf28      	it	cs
 8019284:	4613      	movcs	r3, r2
 8019286:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8019288:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801928c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801928e:	4413      	add	r3, r2
 8019290:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8019294:	8a7a      	ldrh	r2, [r7, #18]
 8019296:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019298:	1ad3      	subs	r3, r2, r3
 801929a:	b29b      	uxth	r3, r3
 801929c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801929e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80192a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80192a2:	1ad3      	subs	r3, r2, r3
 80192a4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80192a6:	8a7b      	ldrh	r3, [r7, #18]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d00b      	beq.n	80192c4 <tcp_write+0x1a0>
 80192ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80192b0:	88fb      	ldrh	r3, [r7, #6]
 80192b2:	429a      	cmp	r2, r3
 80192b4:	d006      	beq.n	80192c4 <tcp_write+0x1a0>
 80192b6:	4b52      	ldr	r3, [pc, #328]	; (8019400 <tcp_write+0x2dc>)
 80192b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80192bc:	4956      	ldr	r1, [pc, #344]	; (8019418 <tcp_write+0x2f4>)
 80192be:	4852      	ldr	r0, [pc, #328]	; (8019408 <tcp_write+0x2e4>)
 80192c0:	f004 ffc0 	bl	801e244 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80192c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80192c8:	88fb      	ldrh	r3, [r7, #6]
 80192ca:	429a      	cmp	r2, r3
 80192cc:	f080 8167 	bcs.w	801959e <tcp_write+0x47a>
 80192d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	f000 8163 	beq.w	801959e <tcp_write+0x47a>
 80192d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192da:	891b      	ldrh	r3, [r3, #8]
 80192dc:	2b00      	cmp	r3, #0
 80192de:	f000 815e 	beq.w	801959e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80192e2:	88fa      	ldrh	r2, [r7, #6]
 80192e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80192e8:	1ad2      	subs	r2, r2, r3
 80192ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80192ec:	4293      	cmp	r3, r2
 80192ee:	bfa8      	it	ge
 80192f0:	4613      	movge	r3, r2
 80192f2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80192f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192f6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80192f8:	797b      	ldrb	r3, [r7, #5]
 80192fa:	f003 0301 	and.w	r3, r3, #1
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d027      	beq.n	8019352 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8019302:	f107 0012 	add.w	r0, r7, #18
 8019306:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019308:	8bf9      	ldrh	r1, [r7, #30]
 801930a:	2301      	movs	r3, #1
 801930c:	9302      	str	r3, [sp, #8]
 801930e:	797b      	ldrb	r3, [r7, #5]
 8019310:	9301      	str	r3, [sp, #4]
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	9300      	str	r3, [sp, #0]
 8019316:	4603      	mov	r3, r0
 8019318:	2000      	movs	r0, #0
 801931a:	f7ff fe0f 	bl	8018f3c <tcp_pbuf_prealloc>
 801931e:	6578      	str	r0, [r7, #84]	; 0x54
 8019320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019322:	2b00      	cmp	r3, #0
 8019324:	f000 8225 	beq.w	8019772 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8019328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801932a:	6858      	ldr	r0, [r3, #4]
 801932c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019330:	68ba      	ldr	r2, [r7, #8]
 8019332:	4413      	add	r3, r2
 8019334:	8bfa      	ldrh	r2, [r7, #30]
 8019336:	4619      	mov	r1, r3
 8019338:	f004 febf 	bl	801e0ba <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801933c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801933e:	f7fb f9ab 	bl	8014698 <pbuf_clen>
 8019342:	4603      	mov	r3, r0
 8019344:	461a      	mov	r2, r3
 8019346:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801934a:	4413      	add	r3, r2
 801934c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8019350:	e041      	b.n	80193d6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8019352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019354:	685b      	ldr	r3, [r3, #4]
 8019356:	637b      	str	r3, [r7, #52]	; 0x34
 8019358:	e002      	b.n	8019360 <tcp_write+0x23c>
 801935a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	637b      	str	r3, [r7, #52]	; 0x34
 8019360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	2b00      	cmp	r3, #0
 8019366:	d1f8      	bne.n	801935a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801936a:	7b1b      	ldrb	r3, [r3, #12]
 801936c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019370:	2b00      	cmp	r3, #0
 8019372:	d115      	bne.n	80193a0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8019374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019376:	685b      	ldr	r3, [r3, #4]
 8019378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801937a:	8952      	ldrh	r2, [r2, #10]
 801937c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801937e:	68ba      	ldr	r2, [r7, #8]
 8019380:	429a      	cmp	r2, r3
 8019382:	d10d      	bne.n	80193a0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8019384:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019388:	2b00      	cmp	r3, #0
 801938a:	d006      	beq.n	801939a <tcp_write+0x276>
 801938c:	4b1c      	ldr	r3, [pc, #112]	; (8019400 <tcp_write+0x2dc>)
 801938e:	f240 2231 	movw	r2, #561	; 0x231
 8019392:	4922      	ldr	r1, [pc, #136]	; (801941c <tcp_write+0x2f8>)
 8019394:	481c      	ldr	r0, [pc, #112]	; (8019408 <tcp_write+0x2e4>)
 8019396:	f004 ff55 	bl	801e244 <iprintf>
          extendlen = seglen;
 801939a:	8bfb      	ldrh	r3, [r7, #30]
 801939c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801939e:	e01a      	b.n	80193d6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80193a0:	8bfb      	ldrh	r3, [r7, #30]
 80193a2:	2201      	movs	r2, #1
 80193a4:	4619      	mov	r1, r3
 80193a6:	2000      	movs	r0, #0
 80193a8:	f7fa fe00 	bl	8013fac <pbuf_alloc>
 80193ac:	6578      	str	r0, [r7, #84]	; 0x54
 80193ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	f000 81e0 	beq.w	8019776 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80193b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80193ba:	68ba      	ldr	r2, [r7, #8]
 80193bc:	441a      	add	r2, r3
 80193be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80193c0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80193c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80193c4:	f7fb f968 	bl	8014698 <pbuf_clen>
 80193c8:	4603      	mov	r3, r0
 80193ca:	461a      	mov	r2, r3
 80193cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80193d0:	4413      	add	r3, r2
 80193d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80193d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80193da:	8bfb      	ldrh	r3, [r7, #30]
 80193dc:	4413      	add	r3, r2
 80193de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80193e2:	e0dc      	b.n	801959e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	f000 80d7 	beq.w	801959e <tcp_write+0x47a>
 80193f0:	4b03      	ldr	r3, [pc, #12]	; (8019400 <tcp_write+0x2dc>)
 80193f2:	f240 224a 	movw	r2, #586	; 0x24a
 80193f6:	490a      	ldr	r1, [pc, #40]	; (8019420 <tcp_write+0x2fc>)
 80193f8:	4803      	ldr	r0, [pc, #12]	; (8019408 <tcp_write+0x2e4>)
 80193fa:	f004 ff23 	bl	801e244 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80193fe:	e0ce      	b.n	801959e <tcp_write+0x47a>
 8019400:	08021788 	.word	0x08021788
 8019404:	08021928 	.word	0x08021928
 8019408:	080217dc 	.word	0x080217dc
 801940c:	08021940 	.word	0x08021940
 8019410:	08021974 	.word	0x08021974
 8019414:	0802198c 	.word	0x0802198c
 8019418:	080219ac 	.word	0x080219ac
 801941c:	080219cc 	.word	0x080219cc
 8019420:	080219f8 	.word	0x080219f8
    struct pbuf *p;
    u16_t left = len - pos;
 8019424:	88fa      	ldrh	r2, [r7, #6]
 8019426:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801942a:	1ad3      	subs	r3, r2, r3
 801942c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801942e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019432:	b29b      	uxth	r3, r3
 8019434:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019436:	1ad3      	subs	r3, r2, r3
 8019438:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801943a:	8b7a      	ldrh	r2, [r7, #26]
 801943c:	8bbb      	ldrh	r3, [r7, #28]
 801943e:	4293      	cmp	r3, r2
 8019440:	bf28      	it	cs
 8019442:	4613      	movcs	r3, r2
 8019444:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019446:	797b      	ldrb	r3, [r7, #5]
 8019448:	f003 0301 	and.w	r3, r3, #1
 801944c:	2b00      	cmp	r3, #0
 801944e:	d036      	beq.n	80194be <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019450:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019454:	b29a      	uxth	r2, r3
 8019456:	8b3b      	ldrh	r3, [r7, #24]
 8019458:	4413      	add	r3, r2
 801945a:	b299      	uxth	r1, r3
 801945c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801945e:	2b00      	cmp	r3, #0
 8019460:	bf0c      	ite	eq
 8019462:	2301      	moveq	r3, #1
 8019464:	2300      	movne	r3, #0
 8019466:	b2db      	uxtb	r3, r3
 8019468:	f107 0012 	add.w	r0, r7, #18
 801946c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801946e:	9302      	str	r3, [sp, #8]
 8019470:	797b      	ldrb	r3, [r7, #5]
 8019472:	9301      	str	r3, [sp, #4]
 8019474:	68fb      	ldr	r3, [r7, #12]
 8019476:	9300      	str	r3, [sp, #0]
 8019478:	4603      	mov	r3, r0
 801947a:	2036      	movs	r0, #54	; 0x36
 801947c:	f7ff fd5e 	bl	8018f3c <tcp_pbuf_prealloc>
 8019480:	6338      	str	r0, [r7, #48]	; 0x30
 8019482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019484:	2b00      	cmp	r3, #0
 8019486:	f000 8178 	beq.w	801977a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801948c:	895b      	ldrh	r3, [r3, #10]
 801948e:	8b3a      	ldrh	r2, [r7, #24]
 8019490:	429a      	cmp	r2, r3
 8019492:	d906      	bls.n	80194a2 <tcp_write+0x37e>
 8019494:	4b8c      	ldr	r3, [pc, #560]	; (80196c8 <tcp_write+0x5a4>)
 8019496:	f240 2266 	movw	r2, #614	; 0x266
 801949a:	498c      	ldr	r1, [pc, #560]	; (80196cc <tcp_write+0x5a8>)
 801949c:	488c      	ldr	r0, [pc, #560]	; (80196d0 <tcp_write+0x5ac>)
 801949e:	f004 fed1 	bl	801e244 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80194a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194a4:	685a      	ldr	r2, [r3, #4]
 80194a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80194aa:	18d0      	adds	r0, r2, r3
 80194ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80194b0:	68ba      	ldr	r2, [r7, #8]
 80194b2:	4413      	add	r3, r2
 80194b4:	8b3a      	ldrh	r2, [r7, #24]
 80194b6:	4619      	mov	r1, r3
 80194b8:	f004 fdff 	bl	801e0ba <memcpy>
 80194bc:	e02f      	b.n	801951e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80194be:	8a7b      	ldrh	r3, [r7, #18]
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d006      	beq.n	80194d2 <tcp_write+0x3ae>
 80194c4:	4b80      	ldr	r3, [pc, #512]	; (80196c8 <tcp_write+0x5a4>)
 80194c6:	f240 2271 	movw	r2, #625	; 0x271
 80194ca:	4982      	ldr	r1, [pc, #520]	; (80196d4 <tcp_write+0x5b0>)
 80194cc:	4880      	ldr	r0, [pc, #512]	; (80196d0 <tcp_write+0x5ac>)
 80194ce:	f004 feb9 	bl	801e244 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80194d2:	8b3b      	ldrh	r3, [r7, #24]
 80194d4:	2201      	movs	r2, #1
 80194d6:	4619      	mov	r1, r3
 80194d8:	2036      	movs	r0, #54	; 0x36
 80194da:	f7fa fd67 	bl	8013fac <pbuf_alloc>
 80194de:	6178      	str	r0, [r7, #20]
 80194e0:	697b      	ldr	r3, [r7, #20]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	f000 814b 	beq.w	801977e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80194e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80194ec:	68ba      	ldr	r2, [r7, #8]
 80194ee:	441a      	add	r2, r3
 80194f0:	697b      	ldr	r3, [r7, #20]
 80194f2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80194f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80194f8:	b29b      	uxth	r3, r3
 80194fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80194fe:	4619      	mov	r1, r3
 8019500:	2036      	movs	r0, #54	; 0x36
 8019502:	f7fa fd53 	bl	8013fac <pbuf_alloc>
 8019506:	6338      	str	r0, [r7, #48]	; 0x30
 8019508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801950a:	2b00      	cmp	r3, #0
 801950c:	d103      	bne.n	8019516 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801950e:	6978      	ldr	r0, [r7, #20]
 8019510:	f7fb f834 	bl	801457c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8019514:	e136      	b.n	8019784 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8019516:	6979      	ldr	r1, [r7, #20]
 8019518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801951a:	f7fb f8fd 	bl	8014718 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801951e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019520:	f7fb f8ba 	bl	8014698 <pbuf_clen>
 8019524:	4603      	mov	r3, r0
 8019526:	461a      	mov	r2, r3
 8019528:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801952c:	4413      	add	r3, r2
 801952e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8019532:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019536:	2b09      	cmp	r3, #9
 8019538:	d903      	bls.n	8019542 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801953a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801953c:	f7fb f81e 	bl	801457c <pbuf_free>
      goto memerr;
 8019540:	e120      	b.n	8019784 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019542:	68fb      	ldr	r3, [r7, #12]
 8019544:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019546:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801954a:	441a      	add	r2, r3
 801954c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019550:	9300      	str	r3, [sp, #0]
 8019552:	4613      	mov	r3, r2
 8019554:	2200      	movs	r2, #0
 8019556:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019558:	68f8      	ldr	r0, [r7, #12]
 801955a:	f7ff fc51 	bl	8018e00 <tcp_create_segment>
 801955e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019562:	2b00      	cmp	r3, #0
 8019564:	f000 810d 	beq.w	8019782 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8019568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801956a:	2b00      	cmp	r3, #0
 801956c:	d102      	bne.n	8019574 <tcp_write+0x450>
      queue = seg;
 801956e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019570:	647b      	str	r3, [r7, #68]	; 0x44
 8019572:	e00c      	b.n	801958e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019576:	2b00      	cmp	r3, #0
 8019578:	d106      	bne.n	8019588 <tcp_write+0x464>
 801957a:	4b53      	ldr	r3, [pc, #332]	; (80196c8 <tcp_write+0x5a4>)
 801957c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019580:	4955      	ldr	r1, [pc, #340]	; (80196d8 <tcp_write+0x5b4>)
 8019582:	4853      	ldr	r0, [pc, #332]	; (80196d0 <tcp_write+0x5ac>)
 8019584:	f004 fe5e 	bl	801e244 <iprintf>
      prev_seg->next = seg;
 8019588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801958a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801958c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801958e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019590:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8019592:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019596:	8b3b      	ldrh	r3, [r7, #24]
 8019598:	4413      	add	r3, r2
 801959a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801959e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80195a2:	88fb      	ldrh	r3, [r7, #6]
 80195a4:	429a      	cmp	r2, r3
 80195a6:	f4ff af3d 	bcc.w	8019424 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80195aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d02c      	beq.n	801960a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80195b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195b2:	685b      	ldr	r3, [r3, #4]
 80195b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80195b6:	e01e      	b.n	80195f6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80195b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195ba:	891a      	ldrh	r2, [r3, #8]
 80195bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80195be:	4413      	add	r3, r2
 80195c0:	b29a      	uxth	r2, r3
 80195c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195c4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80195c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d110      	bne.n	80195f0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80195ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195d0:	685b      	ldr	r3, [r3, #4]
 80195d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80195d4:	8952      	ldrh	r2, [r2, #10]
 80195d6:	4413      	add	r3, r2
 80195d8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80195da:	68b9      	ldr	r1, [r7, #8]
 80195dc:	4618      	mov	r0, r3
 80195de:	f004 fd6c 	bl	801e0ba <memcpy>
        p->len += oversize_used;
 80195e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195e4:	895a      	ldrh	r2, [r3, #10]
 80195e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80195e8:	4413      	add	r3, r2
 80195ea:	b29a      	uxth	r2, r3
 80195ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195ee:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80195f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80195f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d1dd      	bne.n	80195b8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80195fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80195fe:	891a      	ldrh	r2, [r3, #8]
 8019600:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019602:	4413      	add	r3, r2
 8019604:	b29a      	uxth	r2, r3
 8019606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019608:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801960a:	8a7a      	ldrh	r2, [r7, #18]
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8019612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019614:	2b00      	cmp	r3, #0
 8019616:	d018      	beq.n	801964a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8019618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801961a:	2b00      	cmp	r3, #0
 801961c:	d106      	bne.n	801962c <tcp_write+0x508>
 801961e:	4b2a      	ldr	r3, [pc, #168]	; (80196c8 <tcp_write+0x5a4>)
 8019620:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8019624:	492d      	ldr	r1, [pc, #180]	; (80196dc <tcp_write+0x5b8>)
 8019626:	482a      	ldr	r0, [pc, #168]	; (80196d0 <tcp_write+0x5ac>)
 8019628:	f004 fe0c 	bl	801e244 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801962c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801962e:	685b      	ldr	r3, [r3, #4]
 8019630:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8019632:	4618      	mov	r0, r3
 8019634:	f7fb f870 	bl	8014718 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8019638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801963a:	891a      	ldrh	r2, [r3, #8]
 801963c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801963e:	891b      	ldrh	r3, [r3, #8]
 8019640:	4413      	add	r3, r2
 8019642:	b29a      	uxth	r2, r3
 8019644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019646:	811a      	strh	r2, [r3, #8]
 8019648:	e037      	b.n	80196ba <tcp_write+0x596>
  } else if (extendlen > 0) {
 801964a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801964c:	2b00      	cmp	r3, #0
 801964e:	d034      	beq.n	80196ba <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019652:	2b00      	cmp	r3, #0
 8019654:	d003      	beq.n	801965e <tcp_write+0x53a>
 8019656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019658:	685b      	ldr	r3, [r3, #4]
 801965a:	2b00      	cmp	r3, #0
 801965c:	d106      	bne.n	801966c <tcp_write+0x548>
 801965e:	4b1a      	ldr	r3, [pc, #104]	; (80196c8 <tcp_write+0x5a4>)
 8019660:	f240 22e6 	movw	r2, #742	; 0x2e6
 8019664:	491e      	ldr	r1, [pc, #120]	; (80196e0 <tcp_write+0x5bc>)
 8019666:	481a      	ldr	r0, [pc, #104]	; (80196d0 <tcp_write+0x5ac>)
 8019668:	f004 fdec 	bl	801e244 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801966c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801966e:	685b      	ldr	r3, [r3, #4]
 8019670:	62bb      	str	r3, [r7, #40]	; 0x28
 8019672:	e009      	b.n	8019688 <tcp_write+0x564>
      p->tot_len += extendlen;
 8019674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019676:	891a      	ldrh	r2, [r3, #8]
 8019678:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801967a:	4413      	add	r3, r2
 801967c:	b29a      	uxth	r2, r3
 801967e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019680:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	62bb      	str	r3, [r7, #40]	; 0x28
 8019688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	2b00      	cmp	r3, #0
 801968e:	d1f1      	bne.n	8019674 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8019690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019692:	891a      	ldrh	r2, [r3, #8]
 8019694:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019696:	4413      	add	r3, r2
 8019698:	b29a      	uxth	r2, r3
 801969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801969c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801969e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196a0:	895a      	ldrh	r2, [r3, #10]
 80196a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80196a4:	4413      	add	r3, r2
 80196a6:	b29a      	uxth	r2, r3
 80196a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196aa:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80196ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196ae:	891a      	ldrh	r2, [r3, #8]
 80196b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80196b2:	4413      	add	r3, r2
 80196b4:	b29a      	uxth	r2, r3
 80196b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196b8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80196ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d111      	bne.n	80196e4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80196c0:	68fb      	ldr	r3, [r7, #12]
 80196c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80196c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80196c6:	e010      	b.n	80196ea <tcp_write+0x5c6>
 80196c8:	08021788 	.word	0x08021788
 80196cc:	08021a28 	.word	0x08021a28
 80196d0:	080217dc 	.word	0x080217dc
 80196d4:	08021a68 	.word	0x08021a68
 80196d8:	08021a78 	.word	0x08021a78
 80196dc:	08021a8c 	.word	0x08021a8c
 80196e0:	08021ac4 	.word	0x08021ac4
  } else {
    last_unsent->next = queue;
 80196e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80196e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80196e8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80196ee:	88fb      	ldrh	r3, [r7, #6]
 80196f0:	441a      	add	r2, r3
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80196fc:	88fb      	ldrh	r3, [r7, #6]
 80196fe:	1ad3      	subs	r3, r2, r3
 8019700:	b29a      	uxth	r2, r3
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801970e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019718:	2b00      	cmp	r3, #0
 801971a:	d00e      	beq.n	801973a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019720:	2b00      	cmp	r3, #0
 8019722:	d10a      	bne.n	801973a <tcp_write+0x616>
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019728:	2b00      	cmp	r3, #0
 801972a:	d106      	bne.n	801973a <tcp_write+0x616>
 801972c:	4b2c      	ldr	r3, [pc, #176]	; (80197e0 <tcp_write+0x6bc>)
 801972e:	f240 3212 	movw	r2, #786	; 0x312
 8019732:	492c      	ldr	r1, [pc, #176]	; (80197e4 <tcp_write+0x6c0>)
 8019734:	482c      	ldr	r0, [pc, #176]	; (80197e8 <tcp_write+0x6c4>)
 8019736:	f004 fd85 	bl	801e244 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801973a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801973c:	2b00      	cmp	r3, #0
 801973e:	d016      	beq.n	801976e <tcp_write+0x64a>
 8019740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019742:	68db      	ldr	r3, [r3, #12]
 8019744:	2b00      	cmp	r3, #0
 8019746:	d012      	beq.n	801976e <tcp_write+0x64a>
 8019748:	797b      	ldrb	r3, [r7, #5]
 801974a:	f003 0302 	and.w	r3, r3, #2
 801974e:	2b00      	cmp	r3, #0
 8019750:	d10d      	bne.n	801976e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019754:	68db      	ldr	r3, [r3, #12]
 8019756:	899b      	ldrh	r3, [r3, #12]
 8019758:	b29c      	uxth	r4, r3
 801975a:	2008      	movs	r0, #8
 801975c:	f7f9 f994 	bl	8012a88 <lwip_htons>
 8019760:	4603      	mov	r3, r0
 8019762:	461a      	mov	r2, r3
 8019764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019766:	68db      	ldr	r3, [r3, #12]
 8019768:	4322      	orrs	r2, r4
 801976a:	b292      	uxth	r2, r2
 801976c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801976e:	2300      	movs	r3, #0
 8019770:	e031      	b.n	80197d6 <tcp_write+0x6b2>
          goto memerr;
 8019772:	bf00      	nop
 8019774:	e006      	b.n	8019784 <tcp_write+0x660>
            goto memerr;
 8019776:	bf00      	nop
 8019778:	e004      	b.n	8019784 <tcp_write+0x660>
        goto memerr;
 801977a:	bf00      	nop
 801977c:	e002      	b.n	8019784 <tcp_write+0x660>
        goto memerr;
 801977e:	bf00      	nop
 8019780:	e000      	b.n	8019784 <tcp_write+0x660>
      goto memerr;
 8019782:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019784:	68fb      	ldr	r3, [r7, #12]
 8019786:	8b5b      	ldrh	r3, [r3, #26]
 8019788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801978c:	b29a      	uxth	r2, r3
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8019792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019794:	2b00      	cmp	r3, #0
 8019796:	d002      	beq.n	801979e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8019798:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801979a:	f7fa feef 	bl	801457c <pbuf_free>
  }
  if (queue != NULL) {
 801979e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d002      	beq.n	80197aa <tcp_write+0x686>
    tcp_segs_free(queue);
 80197a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80197a6:	f7fc fb57 	bl	8015e58 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80197aa:	68fb      	ldr	r3, [r7, #12]
 80197ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d00e      	beq.n	80197d2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80197b4:	68fb      	ldr	r3, [r7, #12]
 80197b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d10a      	bne.n	80197d2 <tcp_write+0x6ae>
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d106      	bne.n	80197d2 <tcp_write+0x6ae>
 80197c4:	4b06      	ldr	r3, [pc, #24]	; (80197e0 <tcp_write+0x6bc>)
 80197c6:	f240 3227 	movw	r2, #807	; 0x327
 80197ca:	4906      	ldr	r1, [pc, #24]	; (80197e4 <tcp_write+0x6c0>)
 80197cc:	4806      	ldr	r0, [pc, #24]	; (80197e8 <tcp_write+0x6c4>)
 80197ce:	f004 fd39 	bl	801e244 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80197d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80197d6:	4618      	mov	r0, r3
 80197d8:	375c      	adds	r7, #92	; 0x5c
 80197da:	46bd      	mov	sp, r7
 80197dc:	bd90      	pop	{r4, r7, pc}
 80197de:	bf00      	nop
 80197e0:	08021788 	.word	0x08021788
 80197e4:	08021afc 	.word	0x08021afc
 80197e8:	080217dc 	.word	0x080217dc

080197ec <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80197ec:	b590      	push	{r4, r7, lr}
 80197ee:	b08b      	sub	sp, #44	; 0x2c
 80197f0:	af02      	add	r7, sp, #8
 80197f2:	6078      	str	r0, [r7, #4]
 80197f4:	460b      	mov	r3, r1
 80197f6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80197f8:	2300      	movs	r3, #0
 80197fa:	61fb      	str	r3, [r7, #28]
 80197fc:	2300      	movs	r3, #0
 80197fe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019800:	2300      	movs	r3, #0
 8019802:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	2b00      	cmp	r3, #0
 8019808:	d106      	bne.n	8019818 <tcp_split_unsent_seg+0x2c>
 801980a:	4b95      	ldr	r3, [pc, #596]	; (8019a60 <tcp_split_unsent_seg+0x274>)
 801980c:	f240 324b 	movw	r2, #843	; 0x34b
 8019810:	4994      	ldr	r1, [pc, #592]	; (8019a64 <tcp_split_unsent_seg+0x278>)
 8019812:	4895      	ldr	r0, [pc, #596]	; (8019a68 <tcp_split_unsent_seg+0x27c>)
 8019814:	f004 fd16 	bl	801e244 <iprintf>

  useg = pcb->unsent;
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801981c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801981e:	697b      	ldr	r3, [r7, #20]
 8019820:	2b00      	cmp	r3, #0
 8019822:	d102      	bne.n	801982a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8019824:	f04f 33ff 	mov.w	r3, #4294967295
 8019828:	e116      	b.n	8019a58 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801982a:	887b      	ldrh	r3, [r7, #2]
 801982c:	2b00      	cmp	r3, #0
 801982e:	d109      	bne.n	8019844 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8019830:	4b8b      	ldr	r3, [pc, #556]	; (8019a60 <tcp_split_unsent_seg+0x274>)
 8019832:	f240 3253 	movw	r2, #851	; 0x353
 8019836:	498d      	ldr	r1, [pc, #564]	; (8019a6c <tcp_split_unsent_seg+0x280>)
 8019838:	488b      	ldr	r0, [pc, #556]	; (8019a68 <tcp_split_unsent_seg+0x27c>)
 801983a:	f004 fd03 	bl	801e244 <iprintf>
    return ERR_VAL;
 801983e:	f06f 0305 	mvn.w	r3, #5
 8019842:	e109      	b.n	8019a58 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8019844:	697b      	ldr	r3, [r7, #20]
 8019846:	891b      	ldrh	r3, [r3, #8]
 8019848:	887a      	ldrh	r2, [r7, #2]
 801984a:	429a      	cmp	r2, r3
 801984c:	d301      	bcc.n	8019852 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801984e:	2300      	movs	r3, #0
 8019850:	e102      	b.n	8019a58 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019856:	887a      	ldrh	r2, [r7, #2]
 8019858:	429a      	cmp	r2, r3
 801985a:	d906      	bls.n	801986a <tcp_split_unsent_seg+0x7e>
 801985c:	4b80      	ldr	r3, [pc, #512]	; (8019a60 <tcp_split_unsent_seg+0x274>)
 801985e:	f240 325b 	movw	r2, #859	; 0x35b
 8019862:	4983      	ldr	r1, [pc, #524]	; (8019a70 <tcp_split_unsent_seg+0x284>)
 8019864:	4880      	ldr	r0, [pc, #512]	; (8019a68 <tcp_split_unsent_seg+0x27c>)
 8019866:	f004 fced 	bl	801e244 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801986a:	697b      	ldr	r3, [r7, #20]
 801986c:	891b      	ldrh	r3, [r3, #8]
 801986e:	2b00      	cmp	r3, #0
 8019870:	d106      	bne.n	8019880 <tcp_split_unsent_seg+0x94>
 8019872:	4b7b      	ldr	r3, [pc, #492]	; (8019a60 <tcp_split_unsent_seg+0x274>)
 8019874:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8019878:	497e      	ldr	r1, [pc, #504]	; (8019a74 <tcp_split_unsent_seg+0x288>)
 801987a:	487b      	ldr	r0, [pc, #492]	; (8019a68 <tcp_split_unsent_seg+0x27c>)
 801987c:	f004 fce2 	bl	801e244 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019880:	697b      	ldr	r3, [r7, #20]
 8019882:	7a9b      	ldrb	r3, [r3, #10]
 8019884:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8019886:	7bfb      	ldrb	r3, [r7, #15]
 8019888:	009b      	lsls	r3, r3, #2
 801988a:	b2db      	uxtb	r3, r3
 801988c:	f003 0304 	and.w	r3, r3, #4
 8019890:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8019892:	697b      	ldr	r3, [r7, #20]
 8019894:	891a      	ldrh	r2, [r3, #8]
 8019896:	887b      	ldrh	r3, [r7, #2]
 8019898:	1ad3      	subs	r3, r2, r3
 801989a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801989c:	7bbb      	ldrb	r3, [r7, #14]
 801989e:	b29a      	uxth	r2, r3
 80198a0:	89bb      	ldrh	r3, [r7, #12]
 80198a2:	4413      	add	r3, r2
 80198a4:	b29b      	uxth	r3, r3
 80198a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80198aa:	4619      	mov	r1, r3
 80198ac:	2036      	movs	r0, #54	; 0x36
 80198ae:	f7fa fb7d 	bl	8013fac <pbuf_alloc>
 80198b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80198b4:	693b      	ldr	r3, [r7, #16]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	f000 80b7 	beq.w	8019a2a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80198bc:	697b      	ldr	r3, [r7, #20]
 80198be:	685b      	ldr	r3, [r3, #4]
 80198c0:	891a      	ldrh	r2, [r3, #8]
 80198c2:	697b      	ldr	r3, [r7, #20]
 80198c4:	891b      	ldrh	r3, [r3, #8]
 80198c6:	1ad3      	subs	r3, r2, r3
 80198c8:	b29a      	uxth	r2, r3
 80198ca:	887b      	ldrh	r3, [r7, #2]
 80198cc:	4413      	add	r3, r2
 80198ce:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80198d0:	697b      	ldr	r3, [r7, #20]
 80198d2:	6858      	ldr	r0, [r3, #4]
 80198d4:	693b      	ldr	r3, [r7, #16]
 80198d6:	685a      	ldr	r2, [r3, #4]
 80198d8:	7bbb      	ldrb	r3, [r7, #14]
 80198da:	18d1      	adds	r1, r2, r3
 80198dc:	897b      	ldrh	r3, [r7, #10]
 80198de:	89ba      	ldrh	r2, [r7, #12]
 80198e0:	f7fb f842 	bl	8014968 <pbuf_copy_partial>
 80198e4:	4603      	mov	r3, r0
 80198e6:	461a      	mov	r2, r3
 80198e8:	89bb      	ldrh	r3, [r7, #12]
 80198ea:	4293      	cmp	r3, r2
 80198ec:	f040 809f 	bne.w	8019a2e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80198f0:	697b      	ldr	r3, [r7, #20]
 80198f2:	68db      	ldr	r3, [r3, #12]
 80198f4:	899b      	ldrh	r3, [r3, #12]
 80198f6:	b29b      	uxth	r3, r3
 80198f8:	4618      	mov	r0, r3
 80198fa:	f7f9 f8c5 	bl	8012a88 <lwip_htons>
 80198fe:	4603      	mov	r3, r0
 8019900:	b2db      	uxtb	r3, r3
 8019902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019906:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8019908:	2300      	movs	r3, #0
 801990a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801990c:	7efb      	ldrb	r3, [r7, #27]
 801990e:	f003 0308 	and.w	r3, r3, #8
 8019912:	2b00      	cmp	r3, #0
 8019914:	d007      	beq.n	8019926 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8019916:	7efb      	ldrb	r3, [r7, #27]
 8019918:	f023 0308 	bic.w	r3, r3, #8
 801991c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801991e:	7ebb      	ldrb	r3, [r7, #26]
 8019920:	f043 0308 	orr.w	r3, r3, #8
 8019924:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8019926:	7efb      	ldrb	r3, [r7, #27]
 8019928:	f003 0301 	and.w	r3, r3, #1
 801992c:	2b00      	cmp	r3, #0
 801992e:	d007      	beq.n	8019940 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8019930:	7efb      	ldrb	r3, [r7, #27]
 8019932:	f023 0301 	bic.w	r3, r3, #1
 8019936:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8019938:	7ebb      	ldrb	r3, [r7, #26]
 801993a:	f043 0301 	orr.w	r3, r3, #1
 801993e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8019940:	697b      	ldr	r3, [r7, #20]
 8019942:	68db      	ldr	r3, [r3, #12]
 8019944:	685b      	ldr	r3, [r3, #4]
 8019946:	4618      	mov	r0, r3
 8019948:	f7f9 f8b3 	bl	8012ab2 <lwip_htonl>
 801994c:	4602      	mov	r2, r0
 801994e:	887b      	ldrh	r3, [r7, #2]
 8019950:	18d1      	adds	r1, r2, r3
 8019952:	7eba      	ldrb	r2, [r7, #26]
 8019954:	7bfb      	ldrb	r3, [r7, #15]
 8019956:	9300      	str	r3, [sp, #0]
 8019958:	460b      	mov	r3, r1
 801995a:	6939      	ldr	r1, [r7, #16]
 801995c:	6878      	ldr	r0, [r7, #4]
 801995e:	f7ff fa4f 	bl	8018e00 <tcp_create_segment>
 8019962:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8019964:	69fb      	ldr	r3, [r7, #28]
 8019966:	2b00      	cmp	r3, #0
 8019968:	d063      	beq.n	8019a32 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801996a:	697b      	ldr	r3, [r7, #20]
 801996c:	685b      	ldr	r3, [r3, #4]
 801996e:	4618      	mov	r0, r3
 8019970:	f7fa fe92 	bl	8014698 <pbuf_clen>
 8019974:	4603      	mov	r3, r0
 8019976:	461a      	mov	r2, r3
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801997e:	1a9b      	subs	r3, r3, r2
 8019980:	b29a      	uxth	r2, r3
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8019988:	697b      	ldr	r3, [r7, #20]
 801998a:	6858      	ldr	r0, [r3, #4]
 801998c:	697b      	ldr	r3, [r7, #20]
 801998e:	685b      	ldr	r3, [r3, #4]
 8019990:	891a      	ldrh	r2, [r3, #8]
 8019992:	89bb      	ldrh	r3, [r7, #12]
 8019994:	1ad3      	subs	r3, r2, r3
 8019996:	b29b      	uxth	r3, r3
 8019998:	4619      	mov	r1, r3
 801999a:	f7fa fc69 	bl	8014270 <pbuf_realloc>
  useg->len -= remainder;
 801999e:	697b      	ldr	r3, [r7, #20]
 80199a0:	891a      	ldrh	r2, [r3, #8]
 80199a2:	89bb      	ldrh	r3, [r7, #12]
 80199a4:	1ad3      	subs	r3, r2, r3
 80199a6:	b29a      	uxth	r2, r3
 80199a8:	697b      	ldr	r3, [r7, #20]
 80199aa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80199ac:	697b      	ldr	r3, [r7, #20]
 80199ae:	68db      	ldr	r3, [r3, #12]
 80199b0:	899b      	ldrh	r3, [r3, #12]
 80199b2:	b29c      	uxth	r4, r3
 80199b4:	7efb      	ldrb	r3, [r7, #27]
 80199b6:	b29b      	uxth	r3, r3
 80199b8:	4618      	mov	r0, r3
 80199ba:	f7f9 f865 	bl	8012a88 <lwip_htons>
 80199be:	4603      	mov	r3, r0
 80199c0:	461a      	mov	r2, r3
 80199c2:	697b      	ldr	r3, [r7, #20]
 80199c4:	68db      	ldr	r3, [r3, #12]
 80199c6:	4322      	orrs	r2, r4
 80199c8:	b292      	uxth	r2, r2
 80199ca:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80199cc:	697b      	ldr	r3, [r7, #20]
 80199ce:	685b      	ldr	r3, [r3, #4]
 80199d0:	4618      	mov	r0, r3
 80199d2:	f7fa fe61 	bl	8014698 <pbuf_clen>
 80199d6:	4603      	mov	r3, r0
 80199d8:	461a      	mov	r2, r3
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80199e0:	4413      	add	r3, r2
 80199e2:	b29a      	uxth	r2, r3
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80199ea:	69fb      	ldr	r3, [r7, #28]
 80199ec:	685b      	ldr	r3, [r3, #4]
 80199ee:	4618      	mov	r0, r3
 80199f0:	f7fa fe52 	bl	8014698 <pbuf_clen>
 80199f4:	4603      	mov	r3, r0
 80199f6:	461a      	mov	r2, r3
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80199fe:	4413      	add	r3, r2
 8019a00:	b29a      	uxth	r2, r3
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8019a08:	697b      	ldr	r3, [r7, #20]
 8019a0a:	681a      	ldr	r2, [r3, #0]
 8019a0c:	69fb      	ldr	r3, [r7, #28]
 8019a0e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8019a10:	697b      	ldr	r3, [r7, #20]
 8019a12:	69fa      	ldr	r2, [r7, #28]
 8019a14:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8019a16:	69fb      	ldr	r3, [r7, #28]
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d103      	bne.n	8019a26 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	2200      	movs	r2, #0
 8019a22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8019a26:	2300      	movs	r3, #0
 8019a28:	e016      	b.n	8019a58 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8019a2a:	bf00      	nop
 8019a2c:	e002      	b.n	8019a34 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019a2e:	bf00      	nop
 8019a30:	e000      	b.n	8019a34 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019a32:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8019a34:	69fb      	ldr	r3, [r7, #28]
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d006      	beq.n	8019a48 <tcp_split_unsent_seg+0x25c>
 8019a3a:	4b09      	ldr	r3, [pc, #36]	; (8019a60 <tcp_split_unsent_seg+0x274>)
 8019a3c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8019a40:	490d      	ldr	r1, [pc, #52]	; (8019a78 <tcp_split_unsent_seg+0x28c>)
 8019a42:	4809      	ldr	r0, [pc, #36]	; (8019a68 <tcp_split_unsent_seg+0x27c>)
 8019a44:	f004 fbfe 	bl	801e244 <iprintf>
  if (p != NULL) {
 8019a48:	693b      	ldr	r3, [r7, #16]
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d002      	beq.n	8019a54 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8019a4e:	6938      	ldr	r0, [r7, #16]
 8019a50:	f7fa fd94 	bl	801457c <pbuf_free>
  }

  return ERR_MEM;
 8019a54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019a58:	4618      	mov	r0, r3
 8019a5a:	3724      	adds	r7, #36	; 0x24
 8019a5c:	46bd      	mov	sp, r7
 8019a5e:	bd90      	pop	{r4, r7, pc}
 8019a60:	08021788 	.word	0x08021788
 8019a64:	08021b1c 	.word	0x08021b1c
 8019a68:	080217dc 	.word	0x080217dc
 8019a6c:	08021b40 	.word	0x08021b40
 8019a70:	08021b64 	.word	0x08021b64
 8019a74:	08021b74 	.word	0x08021b74
 8019a78:	08021b84 	.word	0x08021b84

08019a7c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8019a7c:	b590      	push	{r4, r7, lr}
 8019a7e:	b085      	sub	sp, #20
 8019a80:	af00      	add	r7, sp, #0
 8019a82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d106      	bne.n	8019a98 <tcp_send_fin+0x1c>
 8019a8a:	4b21      	ldr	r3, [pc, #132]	; (8019b10 <tcp_send_fin+0x94>)
 8019a8c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8019a90:	4920      	ldr	r1, [pc, #128]	; (8019b14 <tcp_send_fin+0x98>)
 8019a92:	4821      	ldr	r0, [pc, #132]	; (8019b18 <tcp_send_fin+0x9c>)
 8019a94:	f004 fbd6 	bl	801e244 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d02e      	beq.n	8019afe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019aa4:	60fb      	str	r3, [r7, #12]
 8019aa6:	e002      	b.n	8019aae <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d1f8      	bne.n	8019aa8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8019ab6:	68fb      	ldr	r3, [r7, #12]
 8019ab8:	68db      	ldr	r3, [r3, #12]
 8019aba:	899b      	ldrh	r3, [r3, #12]
 8019abc:	b29b      	uxth	r3, r3
 8019abe:	4618      	mov	r0, r3
 8019ac0:	f7f8 ffe2 	bl	8012a88 <lwip_htons>
 8019ac4:	4603      	mov	r3, r0
 8019ac6:	b2db      	uxtb	r3, r3
 8019ac8:	f003 0307 	and.w	r3, r3, #7
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d116      	bne.n	8019afe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	68db      	ldr	r3, [r3, #12]
 8019ad4:	899b      	ldrh	r3, [r3, #12]
 8019ad6:	b29c      	uxth	r4, r3
 8019ad8:	2001      	movs	r0, #1
 8019ada:	f7f8 ffd5 	bl	8012a88 <lwip_htons>
 8019ade:	4603      	mov	r3, r0
 8019ae0:	461a      	mov	r2, r3
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	68db      	ldr	r3, [r3, #12]
 8019ae6:	4322      	orrs	r2, r4
 8019ae8:	b292      	uxth	r2, r2
 8019aea:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	8b5b      	ldrh	r3, [r3, #26]
 8019af0:	f043 0320 	orr.w	r3, r3, #32
 8019af4:	b29a      	uxth	r2, r3
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8019afa:	2300      	movs	r3, #0
 8019afc:	e004      	b.n	8019b08 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8019afe:	2101      	movs	r1, #1
 8019b00:	6878      	ldr	r0, [r7, #4]
 8019b02:	f000 f80b 	bl	8019b1c <tcp_enqueue_flags>
 8019b06:	4603      	mov	r3, r0
}
 8019b08:	4618      	mov	r0, r3
 8019b0a:	3714      	adds	r7, #20
 8019b0c:	46bd      	mov	sp, r7
 8019b0e:	bd90      	pop	{r4, r7, pc}
 8019b10:	08021788 	.word	0x08021788
 8019b14:	08021b90 	.word	0x08021b90
 8019b18:	080217dc 	.word	0x080217dc

08019b1c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8019b1c:	b580      	push	{r7, lr}
 8019b1e:	b08a      	sub	sp, #40	; 0x28
 8019b20:	af02      	add	r7, sp, #8
 8019b22:	6078      	str	r0, [r7, #4]
 8019b24:	460b      	mov	r3, r1
 8019b26:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8019b28:	2300      	movs	r3, #0
 8019b2a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8019b2c:	2300      	movs	r3, #0
 8019b2e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8019b30:	78fb      	ldrb	r3, [r7, #3]
 8019b32:	f003 0303 	and.w	r3, r3, #3
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d106      	bne.n	8019b48 <tcp_enqueue_flags+0x2c>
 8019b3a:	4b67      	ldr	r3, [pc, #412]	; (8019cd8 <tcp_enqueue_flags+0x1bc>)
 8019b3c:	f240 4211 	movw	r2, #1041	; 0x411
 8019b40:	4966      	ldr	r1, [pc, #408]	; (8019cdc <tcp_enqueue_flags+0x1c0>)
 8019b42:	4867      	ldr	r0, [pc, #412]	; (8019ce0 <tcp_enqueue_flags+0x1c4>)
 8019b44:	f004 fb7e 	bl	801e244 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d106      	bne.n	8019b5c <tcp_enqueue_flags+0x40>
 8019b4e:	4b62      	ldr	r3, [pc, #392]	; (8019cd8 <tcp_enqueue_flags+0x1bc>)
 8019b50:	f240 4213 	movw	r2, #1043	; 0x413
 8019b54:	4963      	ldr	r1, [pc, #396]	; (8019ce4 <tcp_enqueue_flags+0x1c8>)
 8019b56:	4862      	ldr	r0, [pc, #392]	; (8019ce0 <tcp_enqueue_flags+0x1c4>)
 8019b58:	f004 fb74 	bl	801e244 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8019b5c:	78fb      	ldrb	r3, [r7, #3]
 8019b5e:	f003 0302 	and.w	r3, r3, #2
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d001      	beq.n	8019b6a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8019b66:	2301      	movs	r3, #1
 8019b68:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019b6a:	7ffb      	ldrb	r3, [r7, #31]
 8019b6c:	009b      	lsls	r3, r3, #2
 8019b6e:	b2db      	uxtb	r3, r3
 8019b70:	f003 0304 	and.w	r3, r3, #4
 8019b74:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019b76:	7dfb      	ldrb	r3, [r7, #23]
 8019b78:	b29b      	uxth	r3, r3
 8019b7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019b7e:	4619      	mov	r1, r3
 8019b80:	2036      	movs	r0, #54	; 0x36
 8019b82:	f7fa fa13 	bl	8013fac <pbuf_alloc>
 8019b86:	6138      	str	r0, [r7, #16]
 8019b88:	693b      	ldr	r3, [r7, #16]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d109      	bne.n	8019ba2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	8b5b      	ldrh	r3, [r3, #26]
 8019b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b96:	b29a      	uxth	r2, r3
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8019ba0:	e095      	b.n	8019cce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8019ba2:	693b      	ldr	r3, [r7, #16]
 8019ba4:	895a      	ldrh	r2, [r3, #10]
 8019ba6:	7dfb      	ldrb	r3, [r7, #23]
 8019ba8:	b29b      	uxth	r3, r3
 8019baa:	429a      	cmp	r2, r3
 8019bac:	d206      	bcs.n	8019bbc <tcp_enqueue_flags+0xa0>
 8019bae:	4b4a      	ldr	r3, [pc, #296]	; (8019cd8 <tcp_enqueue_flags+0x1bc>)
 8019bb0:	f240 4239 	movw	r2, #1081	; 0x439
 8019bb4:	494c      	ldr	r1, [pc, #304]	; (8019ce8 <tcp_enqueue_flags+0x1cc>)
 8019bb6:	484a      	ldr	r0, [pc, #296]	; (8019ce0 <tcp_enqueue_flags+0x1c4>)
 8019bb8:	f004 fb44 	bl	801e244 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8019bc0:	78fa      	ldrb	r2, [r7, #3]
 8019bc2:	7ffb      	ldrb	r3, [r7, #31]
 8019bc4:	9300      	str	r3, [sp, #0]
 8019bc6:	460b      	mov	r3, r1
 8019bc8:	6939      	ldr	r1, [r7, #16]
 8019bca:	6878      	ldr	r0, [r7, #4]
 8019bcc:	f7ff f918 	bl	8018e00 <tcp_create_segment>
 8019bd0:	60f8      	str	r0, [r7, #12]
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d109      	bne.n	8019bec <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	8b5b      	ldrh	r3, [r3, #26]
 8019bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019be0:	b29a      	uxth	r2, r3
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019be6:	f04f 33ff 	mov.w	r3, #4294967295
 8019bea:	e070      	b.n	8019cce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019bec:	68fb      	ldr	r3, [r7, #12]
 8019bee:	68db      	ldr	r3, [r3, #12]
 8019bf0:	f003 0303 	and.w	r3, r3, #3
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d006      	beq.n	8019c06 <tcp_enqueue_flags+0xea>
 8019bf8:	4b37      	ldr	r3, [pc, #220]	; (8019cd8 <tcp_enqueue_flags+0x1bc>)
 8019bfa:	f240 4242 	movw	r2, #1090	; 0x442
 8019bfe:	493b      	ldr	r1, [pc, #236]	; (8019cec <tcp_enqueue_flags+0x1d0>)
 8019c00:	4837      	ldr	r0, [pc, #220]	; (8019ce0 <tcp_enqueue_flags+0x1c4>)
 8019c02:	f004 fb1f 	bl	801e244 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	891b      	ldrh	r3, [r3, #8]
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d006      	beq.n	8019c1c <tcp_enqueue_flags+0x100>
 8019c0e:	4b32      	ldr	r3, [pc, #200]	; (8019cd8 <tcp_enqueue_flags+0x1bc>)
 8019c10:	f240 4243 	movw	r2, #1091	; 0x443
 8019c14:	4936      	ldr	r1, [pc, #216]	; (8019cf0 <tcp_enqueue_flags+0x1d4>)
 8019c16:	4832      	ldr	r0, [pc, #200]	; (8019ce0 <tcp_enqueue_flags+0x1c4>)
 8019c18:	f004 fb14 	bl	801e244 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d103      	bne.n	8019c2c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	68fa      	ldr	r2, [r7, #12]
 8019c28:	66da      	str	r2, [r3, #108]	; 0x6c
 8019c2a:	e00d      	b.n	8019c48 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019c30:	61bb      	str	r3, [r7, #24]
 8019c32:	e002      	b.n	8019c3a <tcp_enqueue_flags+0x11e>
 8019c34:	69bb      	ldr	r3, [r7, #24]
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	61bb      	str	r3, [r7, #24]
 8019c3a:	69bb      	ldr	r3, [r7, #24]
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d1f8      	bne.n	8019c34 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8019c42:	69bb      	ldr	r3, [r7, #24]
 8019c44:	68fa      	ldr	r2, [r7, #12]
 8019c46:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	2200      	movs	r2, #0
 8019c4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8019c50:	78fb      	ldrb	r3, [r7, #3]
 8019c52:	f003 0302 	and.w	r3, r3, #2
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d104      	bne.n	8019c64 <tcp_enqueue_flags+0x148>
 8019c5a:	78fb      	ldrb	r3, [r7, #3]
 8019c5c:	f003 0301 	and.w	r3, r3, #1
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d004      	beq.n	8019c6e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c68:	1c5a      	adds	r2, r3, #1
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8019c6e:	78fb      	ldrb	r3, [r7, #3]
 8019c70:	f003 0301 	and.w	r3, r3, #1
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d006      	beq.n	8019c86 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	8b5b      	ldrh	r3, [r3, #26]
 8019c7c:	f043 0320 	orr.w	r3, r3, #32
 8019c80:	b29a      	uxth	r2, r3
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	685b      	ldr	r3, [r3, #4]
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	f7fa fd04 	bl	8014698 <pbuf_clen>
 8019c90:	4603      	mov	r3, r0
 8019c92:	461a      	mov	r2, r3
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019c9a:	4413      	add	r3, r2
 8019c9c:	b29a      	uxth	r2, r3
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d00e      	beq.n	8019ccc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d10a      	bne.n	8019ccc <tcp_enqueue_flags+0x1b0>
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d106      	bne.n	8019ccc <tcp_enqueue_flags+0x1b0>
 8019cbe:	4b06      	ldr	r3, [pc, #24]	; (8019cd8 <tcp_enqueue_flags+0x1bc>)
 8019cc0:	f240 4265 	movw	r2, #1125	; 0x465
 8019cc4:	490b      	ldr	r1, [pc, #44]	; (8019cf4 <tcp_enqueue_flags+0x1d8>)
 8019cc6:	4806      	ldr	r0, [pc, #24]	; (8019ce0 <tcp_enqueue_flags+0x1c4>)
 8019cc8:	f004 fabc 	bl	801e244 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019ccc:	2300      	movs	r3, #0
}
 8019cce:	4618      	mov	r0, r3
 8019cd0:	3720      	adds	r7, #32
 8019cd2:	46bd      	mov	sp, r7
 8019cd4:	bd80      	pop	{r7, pc}
 8019cd6:	bf00      	nop
 8019cd8:	08021788 	.word	0x08021788
 8019cdc:	08021bac 	.word	0x08021bac
 8019ce0:	080217dc 	.word	0x080217dc
 8019ce4:	08021c04 	.word	0x08021c04
 8019ce8:	08021c24 	.word	0x08021c24
 8019cec:	08021c60 	.word	0x08021c60
 8019cf0:	08021c78 	.word	0x08021c78
 8019cf4:	08021ca4 	.word	0x08021ca4

08019cf8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019cf8:	b5b0      	push	{r4, r5, r7, lr}
 8019cfa:	b08a      	sub	sp, #40	; 0x28
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d106      	bne.n	8019d14 <tcp_output+0x1c>
 8019d06:	4b8a      	ldr	r3, [pc, #552]	; (8019f30 <tcp_output+0x238>)
 8019d08:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8019d0c:	4989      	ldr	r1, [pc, #548]	; (8019f34 <tcp_output+0x23c>)
 8019d0e:	488a      	ldr	r0, [pc, #552]	; (8019f38 <tcp_output+0x240>)
 8019d10:	f004 fa98 	bl	801e244 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	7d1b      	ldrb	r3, [r3, #20]
 8019d18:	2b01      	cmp	r3, #1
 8019d1a:	d106      	bne.n	8019d2a <tcp_output+0x32>
 8019d1c:	4b84      	ldr	r3, [pc, #528]	; (8019f30 <tcp_output+0x238>)
 8019d1e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8019d22:	4986      	ldr	r1, [pc, #536]	; (8019f3c <tcp_output+0x244>)
 8019d24:	4884      	ldr	r0, [pc, #528]	; (8019f38 <tcp_output+0x240>)
 8019d26:	f004 fa8d 	bl	801e244 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8019d2a:	4b85      	ldr	r3, [pc, #532]	; (8019f40 <tcp_output+0x248>)
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	687a      	ldr	r2, [r7, #4]
 8019d30:	429a      	cmp	r2, r3
 8019d32:	d101      	bne.n	8019d38 <tcp_output+0x40>
    return ERR_OK;
 8019d34:	2300      	movs	r3, #0
 8019d36:	e1ce      	b.n	801a0d6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019d44:	4293      	cmp	r3, r2
 8019d46:	bf28      	it	cs
 8019d48:	4613      	movcs	r3, r2
 8019d4a:	b29b      	uxth	r3, r3
 8019d4c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d52:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8019d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d10b      	bne.n	8019d72 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	8b5b      	ldrh	r3, [r3, #26]
 8019d5e:	f003 0302 	and.w	r3, r3, #2
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	f000 81aa 	beq.w	801a0bc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8019d68:	6878      	ldr	r0, [r7, #4]
 8019d6a:	f000 fded 	bl	801a948 <tcp_send_empty_ack>
 8019d6e:	4603      	mov	r3, r0
 8019d70:	e1b1      	b.n	801a0d6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8019d72:	6879      	ldr	r1, [r7, #4]
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	3304      	adds	r3, #4
 8019d78:	461a      	mov	r2, r3
 8019d7a:	6878      	ldr	r0, [r7, #4]
 8019d7c:	f7ff f824 	bl	8018dc8 <tcp_route>
 8019d80:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8019d82:	697b      	ldr	r3, [r7, #20]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d102      	bne.n	8019d8e <tcp_output+0x96>
    return ERR_RTE;
 8019d88:	f06f 0303 	mvn.w	r3, #3
 8019d8c:	e1a3      	b.n	801a0d6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d003      	beq.n	8019d9c <tcp_output+0xa4>
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d111      	bne.n	8019dc0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019d9c:	697b      	ldr	r3, [r7, #20]
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d002      	beq.n	8019da8 <tcp_output+0xb0>
 8019da2:	697b      	ldr	r3, [r7, #20]
 8019da4:	3304      	adds	r3, #4
 8019da6:	e000      	b.n	8019daa <tcp_output+0xb2>
 8019da8:	2300      	movs	r3, #0
 8019daa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8019dac:	693b      	ldr	r3, [r7, #16]
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d102      	bne.n	8019db8 <tcp_output+0xc0>
      return ERR_RTE;
 8019db2:	f06f 0303 	mvn.w	r3, #3
 8019db6:	e18e      	b.n	801a0d6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019db8:	693b      	ldr	r3, [r7, #16]
 8019dba:	681a      	ldr	r2, [r3, #0]
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dc2:	68db      	ldr	r3, [r3, #12]
 8019dc4:	685b      	ldr	r3, [r3, #4]
 8019dc6:	4618      	mov	r0, r3
 8019dc8:	f7f8 fe73 	bl	8012ab2 <lwip_htonl>
 8019dcc:	4602      	mov	r2, r0
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019dd2:	1ad3      	subs	r3, r2, r3
 8019dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019dd6:	8912      	ldrh	r2, [r2, #8]
 8019dd8:	4413      	add	r3, r2
 8019dda:	69ba      	ldr	r2, [r7, #24]
 8019ddc:	429a      	cmp	r2, r3
 8019dde:	d227      	bcs.n	8019e30 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019de6:	461a      	mov	r2, r3
 8019de8:	69bb      	ldr	r3, [r7, #24]
 8019dea:	4293      	cmp	r3, r2
 8019dec:	d114      	bne.n	8019e18 <tcp_output+0x120>
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d110      	bne.n	8019e18 <tcp_output+0x120>
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d10b      	bne.n	8019e18 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	2200      	movs	r2, #0
 8019e04:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	2201      	movs	r2, #1
 8019e0c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	2200      	movs	r2, #0
 8019e14:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	8b5b      	ldrh	r3, [r3, #26]
 8019e1c:	f003 0302 	and.w	r3, r3, #2
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	f000 814d 	beq.w	801a0c0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8019e26:	6878      	ldr	r0, [r7, #4]
 8019e28:	f000 fd8e 	bl	801a948 <tcp_send_empty_ack>
 8019e2c:	4603      	mov	r3, r0
 8019e2e:	e152      	b.n	801a0d6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	2200      	movs	r2, #0
 8019e34:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e3c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8019e3e:	6a3b      	ldr	r3, [r7, #32]
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	f000 811c 	beq.w	801a07e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8019e46:	e002      	b.n	8019e4e <tcp_output+0x156>
 8019e48:	6a3b      	ldr	r3, [r7, #32]
 8019e4a:	681b      	ldr	r3, [r3, #0]
 8019e4c:	623b      	str	r3, [r7, #32]
 8019e4e:	6a3b      	ldr	r3, [r7, #32]
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d1f8      	bne.n	8019e48 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8019e56:	e112      	b.n	801a07e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8019e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e5a:	68db      	ldr	r3, [r3, #12]
 8019e5c:	899b      	ldrh	r3, [r3, #12]
 8019e5e:	b29b      	uxth	r3, r3
 8019e60:	4618      	mov	r0, r3
 8019e62:	f7f8 fe11 	bl	8012a88 <lwip_htons>
 8019e66:	4603      	mov	r3, r0
 8019e68:	b2db      	uxtb	r3, r3
 8019e6a:	f003 0304 	and.w	r3, r3, #4
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d006      	beq.n	8019e80 <tcp_output+0x188>
 8019e72:	4b2f      	ldr	r3, [pc, #188]	; (8019f30 <tcp_output+0x238>)
 8019e74:	f240 5236 	movw	r2, #1334	; 0x536
 8019e78:	4932      	ldr	r1, [pc, #200]	; (8019f44 <tcp_output+0x24c>)
 8019e7a:	482f      	ldr	r0, [pc, #188]	; (8019f38 <tcp_output+0x240>)
 8019e7c:	f004 f9e2 	bl	801e244 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d01f      	beq.n	8019ec8 <tcp_output+0x1d0>
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	8b5b      	ldrh	r3, [r3, #26]
 8019e8c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d119      	bne.n	8019ec8 <tcp_output+0x1d0>
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d00b      	beq.n	8019eb4 <tcp_output+0x1bc>
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d110      	bne.n	8019ec8 <tcp_output+0x1d0>
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019eaa:	891a      	ldrh	r2, [r3, #8]
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019eb0:	429a      	cmp	r2, r3
 8019eb2:	d209      	bcs.n	8019ec8 <tcp_output+0x1d0>
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d004      	beq.n	8019ec8 <tcp_output+0x1d0>
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019ec4:	2b08      	cmp	r3, #8
 8019ec6:	d901      	bls.n	8019ecc <tcp_output+0x1d4>
 8019ec8:	2301      	movs	r3, #1
 8019eca:	e000      	b.n	8019ece <tcp_output+0x1d6>
 8019ecc:	2300      	movs	r3, #0
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d106      	bne.n	8019ee0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	8b5b      	ldrh	r3, [r3, #26]
 8019ed6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	f000 80e4 	beq.w	801a0a8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	7d1b      	ldrb	r3, [r3, #20]
 8019ee4:	2b02      	cmp	r3, #2
 8019ee6:	d00d      	beq.n	8019f04 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eea:	68db      	ldr	r3, [r3, #12]
 8019eec:	899b      	ldrh	r3, [r3, #12]
 8019eee:	b29c      	uxth	r4, r3
 8019ef0:	2010      	movs	r0, #16
 8019ef2:	f7f8 fdc9 	bl	8012a88 <lwip_htons>
 8019ef6:	4603      	mov	r3, r0
 8019ef8:	461a      	mov	r2, r3
 8019efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019efc:	68db      	ldr	r3, [r3, #12]
 8019efe:	4322      	orrs	r2, r4
 8019f00:	b292      	uxth	r2, r2
 8019f02:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019f04:	697a      	ldr	r2, [r7, #20]
 8019f06:	6879      	ldr	r1, [r7, #4]
 8019f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019f0a:	f000 f909 	bl	801a120 <tcp_output_segment>
 8019f0e:	4603      	mov	r3, r0
 8019f10:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8019f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d016      	beq.n	8019f48 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	8b5b      	ldrh	r3, [r3, #26]
 8019f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019f22:	b29a      	uxth	r2, r3
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	835a      	strh	r2, [r3, #26]
      return err;
 8019f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019f2c:	e0d3      	b.n	801a0d6 <tcp_output+0x3de>
 8019f2e:	bf00      	nop
 8019f30:	08021788 	.word	0x08021788
 8019f34:	08021ccc 	.word	0x08021ccc
 8019f38:	080217dc 	.word	0x080217dc
 8019f3c:	08021ce4 	.word	0x08021ce4
 8019f40:	2405e9f8 	.word	0x2405e9f8
 8019f44:	08021d0c 	.word	0x08021d0c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f4a:	681a      	ldr	r2, [r3, #0]
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	7d1b      	ldrb	r3, [r3, #20]
 8019f54:	2b02      	cmp	r3, #2
 8019f56:	d006      	beq.n	8019f66 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	8b5b      	ldrh	r3, [r3, #26]
 8019f5c:	f023 0303 	bic.w	r3, r3, #3
 8019f60:	b29a      	uxth	r2, r3
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f68:	68db      	ldr	r3, [r3, #12]
 8019f6a:	685b      	ldr	r3, [r3, #4]
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	f7f8 fda0 	bl	8012ab2 <lwip_htonl>
 8019f72:	4604      	mov	r4, r0
 8019f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f76:	891b      	ldrh	r3, [r3, #8]
 8019f78:	461d      	mov	r5, r3
 8019f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f7c:	68db      	ldr	r3, [r3, #12]
 8019f7e:	899b      	ldrh	r3, [r3, #12]
 8019f80:	b29b      	uxth	r3, r3
 8019f82:	4618      	mov	r0, r3
 8019f84:	f7f8 fd80 	bl	8012a88 <lwip_htons>
 8019f88:	4603      	mov	r3, r0
 8019f8a:	b2db      	uxtb	r3, r3
 8019f8c:	f003 0303 	and.w	r3, r3, #3
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d001      	beq.n	8019f98 <tcp_output+0x2a0>
 8019f94:	2301      	movs	r3, #1
 8019f96:	e000      	b.n	8019f9a <tcp_output+0x2a2>
 8019f98:	2300      	movs	r3, #0
 8019f9a:	442b      	add	r3, r5
 8019f9c:	4423      	add	r3, r4
 8019f9e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019fa4:	68bb      	ldr	r3, [r7, #8]
 8019fa6:	1ad3      	subs	r3, r2, r3
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	da02      	bge.n	8019fb2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	68ba      	ldr	r2, [r7, #8]
 8019fb0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fb4:	891b      	ldrh	r3, [r3, #8]
 8019fb6:	461c      	mov	r4, r3
 8019fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fba:	68db      	ldr	r3, [r3, #12]
 8019fbc:	899b      	ldrh	r3, [r3, #12]
 8019fbe:	b29b      	uxth	r3, r3
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	f7f8 fd61 	bl	8012a88 <lwip_htons>
 8019fc6:	4603      	mov	r3, r0
 8019fc8:	b2db      	uxtb	r3, r3
 8019fca:	f003 0303 	and.w	r3, r3, #3
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d001      	beq.n	8019fd6 <tcp_output+0x2de>
 8019fd2:	2301      	movs	r3, #1
 8019fd4:	e000      	b.n	8019fd8 <tcp_output+0x2e0>
 8019fd6:	2300      	movs	r3, #0
 8019fd8:	4423      	add	r3, r4
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d049      	beq.n	801a072 <tcp_output+0x37a>
      seg->next = NULL;
 8019fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fe0:	2200      	movs	r2, #0
 8019fe2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d105      	bne.n	8019ff8 <tcp_output+0x300>
        pcb->unacked = seg;
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ff0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8019ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ff4:	623b      	str	r3, [r7, #32]
 8019ff6:	e03f      	b.n	801a078 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ffa:	68db      	ldr	r3, [r3, #12]
 8019ffc:	685b      	ldr	r3, [r3, #4]
 8019ffe:	4618      	mov	r0, r3
 801a000:	f7f8 fd57 	bl	8012ab2 <lwip_htonl>
 801a004:	4604      	mov	r4, r0
 801a006:	6a3b      	ldr	r3, [r7, #32]
 801a008:	68db      	ldr	r3, [r3, #12]
 801a00a:	685b      	ldr	r3, [r3, #4]
 801a00c:	4618      	mov	r0, r3
 801a00e:	f7f8 fd50 	bl	8012ab2 <lwip_htonl>
 801a012:	4603      	mov	r3, r0
 801a014:	1ae3      	subs	r3, r4, r3
 801a016:	2b00      	cmp	r3, #0
 801a018:	da24      	bge.n	801a064 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	3370      	adds	r3, #112	; 0x70
 801a01e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a020:	e002      	b.n	801a028 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801a022:	69fb      	ldr	r3, [r7, #28]
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a028:	69fb      	ldr	r3, [r7, #28]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d011      	beq.n	801a054 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a030:	69fb      	ldr	r3, [r7, #28]
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	68db      	ldr	r3, [r3, #12]
 801a036:	685b      	ldr	r3, [r3, #4]
 801a038:	4618      	mov	r0, r3
 801a03a:	f7f8 fd3a 	bl	8012ab2 <lwip_htonl>
 801a03e:	4604      	mov	r4, r0
 801a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a042:	68db      	ldr	r3, [r3, #12]
 801a044:	685b      	ldr	r3, [r3, #4]
 801a046:	4618      	mov	r0, r3
 801a048:	f7f8 fd33 	bl	8012ab2 <lwip_htonl>
 801a04c:	4603      	mov	r3, r0
 801a04e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801a050:	2b00      	cmp	r3, #0
 801a052:	dbe6      	blt.n	801a022 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801a054:	69fb      	ldr	r3, [r7, #28]
 801a056:	681a      	ldr	r2, [r3, #0]
 801a058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a05a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801a05c:	69fb      	ldr	r3, [r7, #28]
 801a05e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a060:	601a      	str	r2, [r3, #0]
 801a062:	e009      	b.n	801a078 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801a064:	6a3b      	ldr	r3, [r7, #32]
 801a066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a068:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801a06a:	6a3b      	ldr	r3, [r7, #32]
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	623b      	str	r3, [r7, #32]
 801a070:	e002      	b.n	801a078 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801a072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a074:	f7fb ff05 	bl	8015e82 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a07c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a080:	2b00      	cmp	r3, #0
 801a082:	d012      	beq.n	801a0aa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a086:	68db      	ldr	r3, [r3, #12]
 801a088:	685b      	ldr	r3, [r3, #4]
 801a08a:	4618      	mov	r0, r3
 801a08c:	f7f8 fd11 	bl	8012ab2 <lwip_htonl>
 801a090:	4602      	mov	r2, r0
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a096:	1ad3      	subs	r3, r2, r3
 801a098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a09a:	8912      	ldrh	r2, [r2, #8]
 801a09c:	4413      	add	r3, r2
  while (seg != NULL &&
 801a09e:	69ba      	ldr	r2, [r7, #24]
 801a0a0:	429a      	cmp	r2, r3
 801a0a2:	f4bf aed9 	bcs.w	8019e58 <tcp_output+0x160>
 801a0a6:	e000      	b.n	801a0aa <tcp_output+0x3b2>
      break;
 801a0a8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d108      	bne.n	801a0c4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	2200      	movs	r2, #0
 801a0b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801a0ba:	e004      	b.n	801a0c6 <tcp_output+0x3ce>
    goto output_done;
 801a0bc:	bf00      	nop
 801a0be:	e002      	b.n	801a0c6 <tcp_output+0x3ce>
    goto output_done;
 801a0c0:	bf00      	nop
 801a0c2:	e000      	b.n	801a0c6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801a0c4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	8b5b      	ldrh	r3, [r3, #26]
 801a0ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a0ce:	b29a      	uxth	r2, r3
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801a0d4:	2300      	movs	r3, #0
}
 801a0d6:	4618      	mov	r0, r3
 801a0d8:	3728      	adds	r7, #40	; 0x28
 801a0da:	46bd      	mov	sp, r7
 801a0dc:	bdb0      	pop	{r4, r5, r7, pc}
 801a0de:	bf00      	nop

0801a0e0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801a0e0:	b580      	push	{r7, lr}
 801a0e2:	b082      	sub	sp, #8
 801a0e4:	af00      	add	r7, sp, #0
 801a0e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d106      	bne.n	801a0fc <tcp_output_segment_busy+0x1c>
 801a0ee:	4b09      	ldr	r3, [pc, #36]	; (801a114 <tcp_output_segment_busy+0x34>)
 801a0f0:	f240 529a 	movw	r2, #1434	; 0x59a
 801a0f4:	4908      	ldr	r1, [pc, #32]	; (801a118 <tcp_output_segment_busy+0x38>)
 801a0f6:	4809      	ldr	r0, [pc, #36]	; (801a11c <tcp_output_segment_busy+0x3c>)
 801a0f8:	f004 f8a4 	bl	801e244 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	685b      	ldr	r3, [r3, #4]
 801a100:	7b9b      	ldrb	r3, [r3, #14]
 801a102:	2b01      	cmp	r3, #1
 801a104:	d001      	beq.n	801a10a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801a106:	2301      	movs	r3, #1
 801a108:	e000      	b.n	801a10c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801a10a:	2300      	movs	r3, #0
}
 801a10c:	4618      	mov	r0, r3
 801a10e:	3708      	adds	r7, #8
 801a110:	46bd      	mov	sp, r7
 801a112:	bd80      	pop	{r7, pc}
 801a114:	08021788 	.word	0x08021788
 801a118:	08021d24 	.word	0x08021d24
 801a11c:	080217dc 	.word	0x080217dc

0801a120 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801a120:	b5b0      	push	{r4, r5, r7, lr}
 801a122:	b08c      	sub	sp, #48	; 0x30
 801a124:	af04      	add	r7, sp, #16
 801a126:	60f8      	str	r0, [r7, #12]
 801a128:	60b9      	str	r1, [r7, #8]
 801a12a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d106      	bne.n	801a140 <tcp_output_segment+0x20>
 801a132:	4b6c      	ldr	r3, [pc, #432]	; (801a2e4 <tcp_output_segment+0x1c4>)
 801a134:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801a138:	496b      	ldr	r1, [pc, #428]	; (801a2e8 <tcp_output_segment+0x1c8>)
 801a13a:	486c      	ldr	r0, [pc, #432]	; (801a2ec <tcp_output_segment+0x1cc>)
 801a13c:	f004 f882 	bl	801e244 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801a140:	68bb      	ldr	r3, [r7, #8]
 801a142:	2b00      	cmp	r3, #0
 801a144:	d106      	bne.n	801a154 <tcp_output_segment+0x34>
 801a146:	4b67      	ldr	r3, [pc, #412]	; (801a2e4 <tcp_output_segment+0x1c4>)
 801a148:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801a14c:	4968      	ldr	r1, [pc, #416]	; (801a2f0 <tcp_output_segment+0x1d0>)
 801a14e:	4867      	ldr	r0, [pc, #412]	; (801a2ec <tcp_output_segment+0x1cc>)
 801a150:	f004 f878 	bl	801e244 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	2b00      	cmp	r3, #0
 801a158:	d106      	bne.n	801a168 <tcp_output_segment+0x48>
 801a15a:	4b62      	ldr	r3, [pc, #392]	; (801a2e4 <tcp_output_segment+0x1c4>)
 801a15c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801a160:	4964      	ldr	r1, [pc, #400]	; (801a2f4 <tcp_output_segment+0x1d4>)
 801a162:	4862      	ldr	r0, [pc, #392]	; (801a2ec <tcp_output_segment+0x1cc>)
 801a164:	f004 f86e 	bl	801e244 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a168:	68f8      	ldr	r0, [r7, #12]
 801a16a:	f7ff ffb9 	bl	801a0e0 <tcp_output_segment_busy>
 801a16e:	4603      	mov	r3, r0
 801a170:	2b00      	cmp	r3, #0
 801a172:	d001      	beq.n	801a178 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a174:	2300      	movs	r3, #0
 801a176:	e0b1      	b.n	801a2dc <tcp_output_segment+0x1bc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a178:	68bb      	ldr	r3, [r7, #8]
 801a17a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a17c:	68fb      	ldr	r3, [r7, #12]
 801a17e:	68dc      	ldr	r4, [r3, #12]
 801a180:	4610      	mov	r0, r2
 801a182:	f7f8 fc96 	bl	8012ab2 <lwip_htonl>
 801a186:	4603      	mov	r3, r0
 801a188:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a18a:	68bb      	ldr	r3, [r7, #8]
 801a18c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	68dc      	ldr	r4, [r3, #12]
 801a192:	4610      	mov	r0, r2
 801a194:	f7f8 fc78 	bl	8012a88 <lwip_htons>
 801a198:	4603      	mov	r3, r0
 801a19a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a19c:	68bb      	ldr	r3, [r7, #8]
 801a19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1a0:	68ba      	ldr	r2, [r7, #8]
 801a1a2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a1a4:	441a      	add	r2, r3
 801a1a6:	68bb      	ldr	r3, [r7, #8]
 801a1a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	68db      	ldr	r3, [r3, #12]
 801a1ae:	3314      	adds	r3, #20
 801a1b0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	7a9b      	ldrb	r3, [r3, #10]
 801a1b6:	f003 0301 	and.w	r3, r3, #1
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d015      	beq.n	801a1ea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a1be:	68bb      	ldr	r3, [r7, #8]
 801a1c0:	3304      	adds	r3, #4
 801a1c2:	461a      	mov	r2, r3
 801a1c4:	6879      	ldr	r1, [r7, #4]
 801a1c6:	f44f 7006 	mov.w	r0, #536	; 0x218
 801a1ca:	f7fc fa1f 	bl	801660c <tcp_eff_send_mss_netif>
 801a1ce:	4603      	mov	r3, r0
 801a1d0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a1d2:	8b7b      	ldrh	r3, [r7, #26]
 801a1d4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801a1d8:	4618      	mov	r0, r3
 801a1da:	f7f8 fc6a 	bl	8012ab2 <lwip_htonl>
 801a1de:	4602      	mov	r2, r0
 801a1e0:	69fb      	ldr	r3, [r7, #28]
 801a1e2:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a1e4:	69fb      	ldr	r3, [r7, #28]
 801a1e6:	3304      	adds	r3, #4
 801a1e8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a1ea:	68bb      	ldr	r3, [r7, #8]
 801a1ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	da02      	bge.n	801a1fa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a1f4:	68bb      	ldr	r3, [r7, #8]
 801a1f6:	2200      	movs	r2, #0
 801a1f8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801a1fa:	68bb      	ldr	r3, [r7, #8]
 801a1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d10c      	bne.n	801a21c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a202:	4b3d      	ldr	r3, [pc, #244]	; (801a2f8 <tcp_output_segment+0x1d8>)
 801a204:	681a      	ldr	r2, [r3, #0]
 801a206:	68bb      	ldr	r3, [r7, #8]
 801a208:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a20a:	68fb      	ldr	r3, [r7, #12]
 801a20c:	68db      	ldr	r3, [r3, #12]
 801a20e:	685b      	ldr	r3, [r3, #4]
 801a210:	4618      	mov	r0, r3
 801a212:	f7f8 fc4e 	bl	8012ab2 <lwip_htonl>
 801a216:	4602      	mov	r2, r0
 801a218:	68bb      	ldr	r3, [r7, #8]
 801a21a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	68da      	ldr	r2, [r3, #12]
 801a220:	68fb      	ldr	r3, [r7, #12]
 801a222:	685b      	ldr	r3, [r3, #4]
 801a224:	685b      	ldr	r3, [r3, #4]
 801a226:	1ad3      	subs	r3, r2, r3
 801a228:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	685b      	ldr	r3, [r3, #4]
 801a22e:	8959      	ldrh	r1, [r3, #10]
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	685b      	ldr	r3, [r3, #4]
 801a234:	8b3a      	ldrh	r2, [r7, #24]
 801a236:	1a8a      	subs	r2, r1, r2
 801a238:	b292      	uxth	r2, r2
 801a23a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801a23c:	68fb      	ldr	r3, [r7, #12]
 801a23e:	685b      	ldr	r3, [r3, #4]
 801a240:	8919      	ldrh	r1, [r3, #8]
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	685b      	ldr	r3, [r3, #4]
 801a246:	8b3a      	ldrh	r2, [r7, #24]
 801a248:	1a8a      	subs	r2, r1, r2
 801a24a:	b292      	uxth	r2, r2
 801a24c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	685b      	ldr	r3, [r3, #4]
 801a252:	68fa      	ldr	r2, [r7, #12]
 801a254:	68d2      	ldr	r2, [r2, #12]
 801a256:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	68db      	ldr	r3, [r3, #12]
 801a25c:	2200      	movs	r2, #0
 801a25e:	741a      	strb	r2, [r3, #16]
 801a260:	2200      	movs	r2, #0
 801a262:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	68db      	ldr	r3, [r3, #12]
 801a268:	f103 0214 	add.w	r2, r3, #20
 801a26c:	68fb      	ldr	r3, [r7, #12]
 801a26e:	7a9b      	ldrb	r3, [r3, #10]
 801a270:	009b      	lsls	r3, r3, #2
 801a272:	f003 0304 	and.w	r3, r3, #4
 801a276:	4413      	add	r3, r2
 801a278:	69fa      	ldr	r2, [r7, #28]
 801a27a:	429a      	cmp	r2, r3
 801a27c:	d006      	beq.n	801a28c <tcp_output_segment+0x16c>
 801a27e:	4b19      	ldr	r3, [pc, #100]	; (801a2e4 <tcp_output_segment+0x1c4>)
 801a280:	f240 621c 	movw	r2, #1564	; 0x61c
 801a284:	491d      	ldr	r1, [pc, #116]	; (801a2fc <tcp_output_segment+0x1dc>)
 801a286:	4819      	ldr	r0, [pc, #100]	; (801a2ec <tcp_output_segment+0x1cc>)
 801a288:	f003 ffdc 	bl	801e244 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 801a290:	68fb      	ldr	r3, [r7, #12]
 801a292:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801a294:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 801a296:	68bd      	ldr	r5, [r7, #8]
 801a298:	68bb      	ldr	r3, [r7, #8]
 801a29a:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801a29c:	68fa      	ldr	r2, [r7, #12]
 801a29e:	68d4      	ldr	r4, [r2, #12]
 801a2a0:	9300      	str	r3, [sp, #0]
 801a2a2:	462b      	mov	r3, r5
 801a2a4:	460a      	mov	r2, r1
 801a2a6:	2106      	movs	r1, #6
 801a2a8:	f7f8 fd20 	bl	8012cec <ip_chksum_pseudo>
 801a2ac:	4603      	mov	r3, r0
 801a2ae:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	6858      	ldr	r0, [r3, #4]
 801a2b4:	68b9      	ldr	r1, [r7, #8]
 801a2b6:	68bb      	ldr	r3, [r7, #8]
 801a2b8:	1d1c      	adds	r4, r3, #4
 801a2ba:	68bb      	ldr	r3, [r7, #8]
 801a2bc:	7add      	ldrb	r5, [r3, #11]
 801a2be:	68bb      	ldr	r3, [r7, #8]
 801a2c0:	7a9b      	ldrb	r3, [r3, #10]
 801a2c2:	687a      	ldr	r2, [r7, #4]
 801a2c4:	9202      	str	r2, [sp, #8]
 801a2c6:	2206      	movs	r2, #6
 801a2c8:	9201      	str	r2, [sp, #4]
 801a2ca:	9300      	str	r3, [sp, #0]
 801a2cc:	462b      	mov	r3, r5
 801a2ce:	4622      	mov	r2, r4
 801a2d0:	f002 fbe2 	bl	801ca98 <ip4_output_if>
 801a2d4:	4603      	mov	r3, r0
 801a2d6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801a2d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a2dc:	4618      	mov	r0, r3
 801a2de:	3720      	adds	r7, #32
 801a2e0:	46bd      	mov	sp, r7
 801a2e2:	bdb0      	pop	{r4, r5, r7, pc}
 801a2e4:	08021788 	.word	0x08021788
 801a2e8:	08021d4c 	.word	0x08021d4c
 801a2ec:	080217dc 	.word	0x080217dc
 801a2f0:	08021d6c 	.word	0x08021d6c
 801a2f4:	08021d8c 	.word	0x08021d8c
 801a2f8:	2405e9ac 	.word	0x2405e9ac
 801a2fc:	08021db0 	.word	0x08021db0

0801a300 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801a300:	b5b0      	push	{r4, r5, r7, lr}
 801a302:	b084      	sub	sp, #16
 801a304:	af00      	add	r7, sp, #0
 801a306:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d106      	bne.n	801a31c <tcp_rexmit_rto_prepare+0x1c>
 801a30e:	4b31      	ldr	r3, [pc, #196]	; (801a3d4 <tcp_rexmit_rto_prepare+0xd4>)
 801a310:	f240 6263 	movw	r2, #1635	; 0x663
 801a314:	4930      	ldr	r1, [pc, #192]	; (801a3d8 <tcp_rexmit_rto_prepare+0xd8>)
 801a316:	4831      	ldr	r0, [pc, #196]	; (801a3dc <tcp_rexmit_rto_prepare+0xdc>)
 801a318:	f003 ff94 	bl	801e244 <iprintf>

  if (pcb->unacked == NULL) {
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a320:	2b00      	cmp	r3, #0
 801a322:	d102      	bne.n	801a32a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801a324:	f06f 0305 	mvn.w	r3, #5
 801a328:	e050      	b.n	801a3cc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a32e:	60fb      	str	r3, [r7, #12]
 801a330:	e00b      	b.n	801a34a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801a332:	68f8      	ldr	r0, [r7, #12]
 801a334:	f7ff fed4 	bl	801a0e0 <tcp_output_segment_busy>
 801a338:	4603      	mov	r3, r0
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d002      	beq.n	801a344 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801a33e:	f06f 0305 	mvn.w	r3, #5
 801a342:	e043      	b.n	801a3cc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a344:	68fb      	ldr	r3, [r7, #12]
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	60fb      	str	r3, [r7, #12]
 801a34a:	68fb      	ldr	r3, [r7, #12]
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d1ef      	bne.n	801a332 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801a352:	68f8      	ldr	r0, [r7, #12]
 801a354:	f7ff fec4 	bl	801a0e0 <tcp_output_segment_busy>
 801a358:	4603      	mov	r3, r0
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d002      	beq.n	801a364 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801a35e:	f06f 0305 	mvn.w	r3, #5
 801a362:	e033      	b.n	801a3cc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	2200      	movs	r2, #0
 801a378:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	8b5b      	ldrh	r3, [r3, #26]
 801a37e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a382:	b29a      	uxth	r2, r3
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a388:	68fb      	ldr	r3, [r7, #12]
 801a38a:	68db      	ldr	r3, [r3, #12]
 801a38c:	685b      	ldr	r3, [r3, #4]
 801a38e:	4618      	mov	r0, r3
 801a390:	f7f8 fb8f 	bl	8012ab2 <lwip_htonl>
 801a394:	4604      	mov	r4, r0
 801a396:	68fb      	ldr	r3, [r7, #12]
 801a398:	891b      	ldrh	r3, [r3, #8]
 801a39a:	461d      	mov	r5, r3
 801a39c:	68fb      	ldr	r3, [r7, #12]
 801a39e:	68db      	ldr	r3, [r3, #12]
 801a3a0:	899b      	ldrh	r3, [r3, #12]
 801a3a2:	b29b      	uxth	r3, r3
 801a3a4:	4618      	mov	r0, r3
 801a3a6:	f7f8 fb6f 	bl	8012a88 <lwip_htons>
 801a3aa:	4603      	mov	r3, r0
 801a3ac:	b2db      	uxtb	r3, r3
 801a3ae:	f003 0303 	and.w	r3, r3, #3
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d001      	beq.n	801a3ba <tcp_rexmit_rto_prepare+0xba>
 801a3b6:	2301      	movs	r3, #1
 801a3b8:	e000      	b.n	801a3bc <tcp_rexmit_rto_prepare+0xbc>
 801a3ba:	2300      	movs	r3, #0
 801a3bc:	442b      	add	r3, r5
 801a3be:	18e2      	adds	r2, r4, r3
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801a3ca:	2300      	movs	r3, #0
}
 801a3cc:	4618      	mov	r0, r3
 801a3ce:	3710      	adds	r7, #16
 801a3d0:	46bd      	mov	sp, r7
 801a3d2:	bdb0      	pop	{r4, r5, r7, pc}
 801a3d4:	08021788 	.word	0x08021788
 801a3d8:	08021dc4 	.word	0x08021dc4
 801a3dc:	080217dc 	.word	0x080217dc

0801a3e0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801a3e0:	b580      	push	{r7, lr}
 801a3e2:	b082      	sub	sp, #8
 801a3e4:	af00      	add	r7, sp, #0
 801a3e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d106      	bne.n	801a3fc <tcp_rexmit_rto_commit+0x1c>
 801a3ee:	4b0d      	ldr	r3, [pc, #52]	; (801a424 <tcp_rexmit_rto_commit+0x44>)
 801a3f0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a3f4:	490c      	ldr	r1, [pc, #48]	; (801a428 <tcp_rexmit_rto_commit+0x48>)
 801a3f6:	480d      	ldr	r0, [pc, #52]	; (801a42c <tcp_rexmit_rto_commit+0x4c>)
 801a3f8:	f003 ff24 	bl	801e244 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a402:	2bff      	cmp	r3, #255	; 0xff
 801a404:	d007      	beq.n	801a416 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a40c:	3301      	adds	r3, #1
 801a40e:	b2da      	uxtb	r2, r3
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801a416:	6878      	ldr	r0, [r7, #4]
 801a418:	f7ff fc6e 	bl	8019cf8 <tcp_output>
}
 801a41c:	bf00      	nop
 801a41e:	3708      	adds	r7, #8
 801a420:	46bd      	mov	sp, r7
 801a422:	bd80      	pop	{r7, pc}
 801a424:	08021788 	.word	0x08021788
 801a428:	08021de8 	.word	0x08021de8
 801a42c:	080217dc 	.word	0x080217dc

0801a430 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801a430:	b580      	push	{r7, lr}
 801a432:	b082      	sub	sp, #8
 801a434:	af00      	add	r7, sp, #0
 801a436:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d106      	bne.n	801a44c <tcp_rexmit_rto+0x1c>
 801a43e:	4b0a      	ldr	r3, [pc, #40]	; (801a468 <tcp_rexmit_rto+0x38>)
 801a440:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801a444:	4909      	ldr	r1, [pc, #36]	; (801a46c <tcp_rexmit_rto+0x3c>)
 801a446:	480a      	ldr	r0, [pc, #40]	; (801a470 <tcp_rexmit_rto+0x40>)
 801a448:	f003 fefc 	bl	801e244 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801a44c:	6878      	ldr	r0, [r7, #4]
 801a44e:	f7ff ff57 	bl	801a300 <tcp_rexmit_rto_prepare>
 801a452:	4603      	mov	r3, r0
 801a454:	2b00      	cmp	r3, #0
 801a456:	d102      	bne.n	801a45e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801a458:	6878      	ldr	r0, [r7, #4]
 801a45a:	f7ff ffc1 	bl	801a3e0 <tcp_rexmit_rto_commit>
  }
}
 801a45e:	bf00      	nop
 801a460:	3708      	adds	r7, #8
 801a462:	46bd      	mov	sp, r7
 801a464:	bd80      	pop	{r7, pc}
 801a466:	bf00      	nop
 801a468:	08021788 	.word	0x08021788
 801a46c:	08021e0c 	.word	0x08021e0c
 801a470:	080217dc 	.word	0x080217dc

0801a474 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801a474:	b590      	push	{r4, r7, lr}
 801a476:	b085      	sub	sp, #20
 801a478:	af00      	add	r7, sp, #0
 801a47a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d106      	bne.n	801a490 <tcp_rexmit+0x1c>
 801a482:	4b2f      	ldr	r3, [pc, #188]	; (801a540 <tcp_rexmit+0xcc>)
 801a484:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801a488:	492e      	ldr	r1, [pc, #184]	; (801a544 <tcp_rexmit+0xd0>)
 801a48a:	482f      	ldr	r0, [pc, #188]	; (801a548 <tcp_rexmit+0xd4>)
 801a48c:	f003 feda 	bl	801e244 <iprintf>

  if (pcb->unacked == NULL) {
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a494:	2b00      	cmp	r3, #0
 801a496:	d102      	bne.n	801a49e <tcp_rexmit+0x2a>
    return ERR_VAL;
 801a498:	f06f 0305 	mvn.w	r3, #5
 801a49c:	e04c      	b.n	801a538 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a4a2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801a4a4:	68b8      	ldr	r0, [r7, #8]
 801a4a6:	f7ff fe1b 	bl	801a0e0 <tcp_output_segment_busy>
 801a4aa:	4603      	mov	r3, r0
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	d002      	beq.n	801a4b6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801a4b0:	f06f 0305 	mvn.w	r3, #5
 801a4b4:	e040      	b.n	801a538 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801a4b6:	68bb      	ldr	r3, [r7, #8]
 801a4b8:	681a      	ldr	r2, [r3, #0]
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	336c      	adds	r3, #108	; 0x6c
 801a4c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a4c4:	e002      	b.n	801a4cc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801a4c6:	68fb      	ldr	r3, [r7, #12]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a4cc:	68fb      	ldr	r3, [r7, #12]
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d011      	beq.n	801a4f8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	68db      	ldr	r3, [r3, #12]
 801a4da:	685b      	ldr	r3, [r3, #4]
 801a4dc:	4618      	mov	r0, r3
 801a4de:	f7f8 fae8 	bl	8012ab2 <lwip_htonl>
 801a4e2:	4604      	mov	r4, r0
 801a4e4:	68bb      	ldr	r3, [r7, #8]
 801a4e6:	68db      	ldr	r3, [r3, #12]
 801a4e8:	685b      	ldr	r3, [r3, #4]
 801a4ea:	4618      	mov	r0, r3
 801a4ec:	f7f8 fae1 	bl	8012ab2 <lwip_htonl>
 801a4f0:	4603      	mov	r3, r0
 801a4f2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	dbe6      	blt.n	801a4c6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	681a      	ldr	r2, [r3, #0]
 801a4fc:	68bb      	ldr	r3, [r7, #8]
 801a4fe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	68ba      	ldr	r2, [r7, #8]
 801a504:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801a506:	68bb      	ldr	r3, [r7, #8]
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	d103      	bne.n	801a516 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	2200      	movs	r2, #0
 801a512:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a51c:	2bff      	cmp	r3, #255	; 0xff
 801a51e:	d007      	beq.n	801a530 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a526:	3301      	adds	r3, #1
 801a528:	b2da      	uxtb	r2, r3
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	2200      	movs	r2, #0
 801a534:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801a536:	2300      	movs	r3, #0
}
 801a538:	4618      	mov	r0, r3
 801a53a:	3714      	adds	r7, #20
 801a53c:	46bd      	mov	sp, r7
 801a53e:	bd90      	pop	{r4, r7, pc}
 801a540:	08021788 	.word	0x08021788
 801a544:	08021e28 	.word	0x08021e28
 801a548:	080217dc 	.word	0x080217dc

0801a54c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801a54c:	b580      	push	{r7, lr}
 801a54e:	b082      	sub	sp, #8
 801a550:	af00      	add	r7, sp, #0
 801a552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	2b00      	cmp	r3, #0
 801a558:	d106      	bne.n	801a568 <tcp_rexmit_fast+0x1c>
 801a55a:	4b2a      	ldr	r3, [pc, #168]	; (801a604 <tcp_rexmit_fast+0xb8>)
 801a55c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801a560:	4929      	ldr	r1, [pc, #164]	; (801a608 <tcp_rexmit_fast+0xbc>)
 801a562:	482a      	ldr	r0, [pc, #168]	; (801a60c <tcp_rexmit_fast+0xc0>)
 801a564:	f003 fe6e 	bl	801e244 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d045      	beq.n	801a5fc <tcp_rexmit_fast+0xb0>
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	8b5b      	ldrh	r3, [r3, #26]
 801a574:	f003 0304 	and.w	r3, r3, #4
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d13f      	bne.n	801a5fc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801a57c:	6878      	ldr	r0, [r7, #4]
 801a57e:	f7ff ff79 	bl	801a474 <tcp_rexmit>
 801a582:	4603      	mov	r3, r0
 801a584:	2b00      	cmp	r3, #0
 801a586:	d139      	bne.n	801a5fc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a594:	4293      	cmp	r3, r2
 801a596:	bf28      	it	cs
 801a598:	4613      	movcs	r3, r2
 801a59a:	b29b      	uxth	r3, r3
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	da00      	bge.n	801a5a2 <tcp_rexmit_fast+0x56>
 801a5a0:	3301      	adds	r3, #1
 801a5a2:	105b      	asrs	r3, r3, #1
 801a5a4:	b29a      	uxth	r2, r3
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a5b2:	461a      	mov	r2, r3
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a5b8:	005b      	lsls	r3, r3, #1
 801a5ba:	429a      	cmp	r2, r3
 801a5bc:	d206      	bcs.n	801a5cc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a5c2:	005b      	lsls	r3, r3, #1
 801a5c4:	b29a      	uxth	r2, r3
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a5d6:	4619      	mov	r1, r3
 801a5d8:	0049      	lsls	r1, r1, #1
 801a5da:	440b      	add	r3, r1
 801a5dc:	b29b      	uxth	r3, r3
 801a5de:	4413      	add	r3, r2
 801a5e0:	b29a      	uxth	r2, r3
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	8b5b      	ldrh	r3, [r3, #26]
 801a5ec:	f043 0304 	orr.w	r3, r3, #4
 801a5f0:	b29a      	uxth	r2, r3
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	2200      	movs	r2, #0
 801a5fa:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801a5fc:	bf00      	nop
 801a5fe:	3708      	adds	r7, #8
 801a600:	46bd      	mov	sp, r7
 801a602:	bd80      	pop	{r7, pc}
 801a604:	08021788 	.word	0x08021788
 801a608:	08021e40 	.word	0x08021e40
 801a60c:	080217dc 	.word	0x080217dc

0801a610 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801a610:	b580      	push	{r7, lr}
 801a612:	b086      	sub	sp, #24
 801a614:	af00      	add	r7, sp, #0
 801a616:	60f8      	str	r0, [r7, #12]
 801a618:	607b      	str	r3, [r7, #4]
 801a61a:	460b      	mov	r3, r1
 801a61c:	817b      	strh	r3, [r7, #10]
 801a61e:	4613      	mov	r3, r2
 801a620:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a622:	897a      	ldrh	r2, [r7, #10]
 801a624:	893b      	ldrh	r3, [r7, #8]
 801a626:	4413      	add	r3, r2
 801a628:	b29b      	uxth	r3, r3
 801a62a:	3314      	adds	r3, #20
 801a62c:	b29b      	uxth	r3, r3
 801a62e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a632:	4619      	mov	r1, r3
 801a634:	2022      	movs	r0, #34	; 0x22
 801a636:	f7f9 fcb9 	bl	8013fac <pbuf_alloc>
 801a63a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a63c:	697b      	ldr	r3, [r7, #20]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d04d      	beq.n	801a6de <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a642:	897b      	ldrh	r3, [r7, #10]
 801a644:	3313      	adds	r3, #19
 801a646:	697a      	ldr	r2, [r7, #20]
 801a648:	8952      	ldrh	r2, [r2, #10]
 801a64a:	4293      	cmp	r3, r2
 801a64c:	db06      	blt.n	801a65c <tcp_output_alloc_header_common+0x4c>
 801a64e:	4b26      	ldr	r3, [pc, #152]	; (801a6e8 <tcp_output_alloc_header_common+0xd8>)
 801a650:	f240 7223 	movw	r2, #1827	; 0x723
 801a654:	4925      	ldr	r1, [pc, #148]	; (801a6ec <tcp_output_alloc_header_common+0xdc>)
 801a656:	4826      	ldr	r0, [pc, #152]	; (801a6f0 <tcp_output_alloc_header_common+0xe0>)
 801a658:	f003 fdf4 	bl	801e244 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a65c:	697b      	ldr	r3, [r7, #20]
 801a65e:	685b      	ldr	r3, [r3, #4]
 801a660:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801a662:	8c3b      	ldrh	r3, [r7, #32]
 801a664:	4618      	mov	r0, r3
 801a666:	f7f8 fa0f 	bl	8012a88 <lwip_htons>
 801a66a:	4603      	mov	r3, r0
 801a66c:	461a      	mov	r2, r3
 801a66e:	693b      	ldr	r3, [r7, #16]
 801a670:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a674:	4618      	mov	r0, r3
 801a676:	f7f8 fa07 	bl	8012a88 <lwip_htons>
 801a67a:	4603      	mov	r3, r0
 801a67c:	461a      	mov	r2, r3
 801a67e:	693b      	ldr	r3, [r7, #16]
 801a680:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a682:	693b      	ldr	r3, [r7, #16]
 801a684:	687a      	ldr	r2, [r7, #4]
 801a686:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801a688:	68f8      	ldr	r0, [r7, #12]
 801a68a:	f7f8 fa12 	bl	8012ab2 <lwip_htonl>
 801a68e:	4602      	mov	r2, r0
 801a690:	693b      	ldr	r3, [r7, #16]
 801a692:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a694:	897b      	ldrh	r3, [r7, #10]
 801a696:	089b      	lsrs	r3, r3, #2
 801a698:	b29b      	uxth	r3, r3
 801a69a:	3305      	adds	r3, #5
 801a69c:	b29b      	uxth	r3, r3
 801a69e:	031b      	lsls	r3, r3, #12
 801a6a0:	b29a      	uxth	r2, r3
 801a6a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a6a6:	b29b      	uxth	r3, r3
 801a6a8:	4313      	orrs	r3, r2
 801a6aa:	b29b      	uxth	r3, r3
 801a6ac:	4618      	mov	r0, r3
 801a6ae:	f7f8 f9eb 	bl	8012a88 <lwip_htons>
 801a6b2:	4603      	mov	r3, r0
 801a6b4:	461a      	mov	r2, r3
 801a6b6:	693b      	ldr	r3, [r7, #16]
 801a6b8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a6ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a6bc:	4618      	mov	r0, r3
 801a6be:	f7f8 f9e3 	bl	8012a88 <lwip_htons>
 801a6c2:	4603      	mov	r3, r0
 801a6c4:	461a      	mov	r2, r3
 801a6c6:	693b      	ldr	r3, [r7, #16]
 801a6c8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a6ca:	693b      	ldr	r3, [r7, #16]
 801a6cc:	2200      	movs	r2, #0
 801a6ce:	741a      	strb	r2, [r3, #16]
 801a6d0:	2200      	movs	r2, #0
 801a6d2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a6d4:	693b      	ldr	r3, [r7, #16]
 801a6d6:	2200      	movs	r2, #0
 801a6d8:	749a      	strb	r2, [r3, #18]
 801a6da:	2200      	movs	r2, #0
 801a6dc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a6de:	697b      	ldr	r3, [r7, #20]
}
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	3718      	adds	r7, #24
 801a6e4:	46bd      	mov	sp, r7
 801a6e6:	bd80      	pop	{r7, pc}
 801a6e8:	08021788 	.word	0x08021788
 801a6ec:	08021e60 	.word	0x08021e60
 801a6f0:	080217dc 	.word	0x080217dc

0801a6f4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a6f4:	b5b0      	push	{r4, r5, r7, lr}
 801a6f6:	b08a      	sub	sp, #40	; 0x28
 801a6f8:	af04      	add	r7, sp, #16
 801a6fa:	60f8      	str	r0, [r7, #12]
 801a6fc:	607b      	str	r3, [r7, #4]
 801a6fe:	460b      	mov	r3, r1
 801a700:	817b      	strh	r3, [r7, #10]
 801a702:	4613      	mov	r3, r2
 801a704:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a706:	68fb      	ldr	r3, [r7, #12]
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d106      	bne.n	801a71a <tcp_output_alloc_header+0x26>
 801a70c:	4b15      	ldr	r3, [pc, #84]	; (801a764 <tcp_output_alloc_header+0x70>)
 801a70e:	f240 7242 	movw	r2, #1858	; 0x742
 801a712:	4915      	ldr	r1, [pc, #84]	; (801a768 <tcp_output_alloc_header+0x74>)
 801a714:	4815      	ldr	r0, [pc, #84]	; (801a76c <tcp_output_alloc_header+0x78>)
 801a716:	f003 fd95 	bl	801e244 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801a71e:	68fb      	ldr	r3, [r7, #12]
 801a720:	8adb      	ldrh	r3, [r3, #22]
 801a722:	68fa      	ldr	r2, [r7, #12]
 801a724:	8b12      	ldrh	r2, [r2, #24]
 801a726:	68f9      	ldr	r1, [r7, #12]
 801a728:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801a72a:	893d      	ldrh	r5, [r7, #8]
 801a72c:	897c      	ldrh	r4, [r7, #10]
 801a72e:	9103      	str	r1, [sp, #12]
 801a730:	2110      	movs	r1, #16
 801a732:	9102      	str	r1, [sp, #8]
 801a734:	9201      	str	r2, [sp, #4]
 801a736:	9300      	str	r3, [sp, #0]
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	462a      	mov	r2, r5
 801a73c:	4621      	mov	r1, r4
 801a73e:	f7ff ff67 	bl	801a610 <tcp_output_alloc_header_common>
 801a742:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a744:	697b      	ldr	r3, [r7, #20]
 801a746:	2b00      	cmp	r3, #0
 801a748:	d006      	beq.n	801a758 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a74a:	68fb      	ldr	r3, [r7, #12]
 801a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a74e:	68fa      	ldr	r2, [r7, #12]
 801a750:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a752:	441a      	add	r2, r3
 801a754:	68fb      	ldr	r3, [r7, #12]
 801a756:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801a758:	697b      	ldr	r3, [r7, #20]
}
 801a75a:	4618      	mov	r0, r3
 801a75c:	3718      	adds	r7, #24
 801a75e:	46bd      	mov	sp, r7
 801a760:	bdb0      	pop	{r4, r5, r7, pc}
 801a762:	bf00      	nop
 801a764:	08021788 	.word	0x08021788
 801a768:	08021e90 	.word	0x08021e90
 801a76c:	080217dc 	.word	0x080217dc

0801a770 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a770:	b580      	push	{r7, lr}
 801a772:	b088      	sub	sp, #32
 801a774:	af00      	add	r7, sp, #0
 801a776:	60f8      	str	r0, [r7, #12]
 801a778:	60b9      	str	r1, [r7, #8]
 801a77a:	4611      	mov	r1, r2
 801a77c:	461a      	mov	r2, r3
 801a77e:	460b      	mov	r3, r1
 801a780:	71fb      	strb	r3, [r7, #7]
 801a782:	4613      	mov	r3, r2
 801a784:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a786:	2300      	movs	r3, #0
 801a788:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a78a:	68bb      	ldr	r3, [r7, #8]
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d106      	bne.n	801a79e <tcp_output_fill_options+0x2e>
 801a790:	4b13      	ldr	r3, [pc, #76]	; (801a7e0 <tcp_output_fill_options+0x70>)
 801a792:	f240 7256 	movw	r2, #1878	; 0x756
 801a796:	4913      	ldr	r1, [pc, #76]	; (801a7e4 <tcp_output_fill_options+0x74>)
 801a798:	4813      	ldr	r0, [pc, #76]	; (801a7e8 <tcp_output_fill_options+0x78>)
 801a79a:	f003 fd53 	bl	801e244 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a79e:	68bb      	ldr	r3, [r7, #8]
 801a7a0:	685b      	ldr	r3, [r3, #4]
 801a7a2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a7a4:	69bb      	ldr	r3, [r7, #24]
 801a7a6:	3314      	adds	r3, #20
 801a7a8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a7aa:	69bb      	ldr	r3, [r7, #24]
 801a7ac:	f103 0214 	add.w	r2, r3, #20
 801a7b0:	8bfb      	ldrh	r3, [r7, #30]
 801a7b2:	009b      	lsls	r3, r3, #2
 801a7b4:	4619      	mov	r1, r3
 801a7b6:	79fb      	ldrb	r3, [r7, #7]
 801a7b8:	009b      	lsls	r3, r3, #2
 801a7ba:	f003 0304 	and.w	r3, r3, #4
 801a7be:	440b      	add	r3, r1
 801a7c0:	4413      	add	r3, r2
 801a7c2:	697a      	ldr	r2, [r7, #20]
 801a7c4:	429a      	cmp	r2, r3
 801a7c6:	d006      	beq.n	801a7d6 <tcp_output_fill_options+0x66>
 801a7c8:	4b05      	ldr	r3, [pc, #20]	; (801a7e0 <tcp_output_fill_options+0x70>)
 801a7ca:	f240 7275 	movw	r2, #1909	; 0x775
 801a7ce:	4907      	ldr	r1, [pc, #28]	; (801a7ec <tcp_output_fill_options+0x7c>)
 801a7d0:	4805      	ldr	r0, [pc, #20]	; (801a7e8 <tcp_output_fill_options+0x78>)
 801a7d2:	f003 fd37 	bl	801e244 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a7d6:	bf00      	nop
 801a7d8:	3720      	adds	r7, #32
 801a7da:	46bd      	mov	sp, r7
 801a7dc:	bd80      	pop	{r7, pc}
 801a7de:	bf00      	nop
 801a7e0:	08021788 	.word	0x08021788
 801a7e4:	08021eb8 	.word	0x08021eb8
 801a7e8:	080217dc 	.word	0x080217dc
 801a7ec:	08021db0 	.word	0x08021db0

0801a7f0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a7f0:	b580      	push	{r7, lr}
 801a7f2:	b08c      	sub	sp, #48	; 0x30
 801a7f4:	af04      	add	r7, sp, #16
 801a7f6:	60f8      	str	r0, [r7, #12]
 801a7f8:	60b9      	str	r1, [r7, #8]
 801a7fa:	607a      	str	r2, [r7, #4]
 801a7fc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a7fe:	68bb      	ldr	r3, [r7, #8]
 801a800:	2b00      	cmp	r3, #0
 801a802:	d106      	bne.n	801a812 <tcp_output_control_segment+0x22>
 801a804:	4b24      	ldr	r3, [pc, #144]	; (801a898 <tcp_output_control_segment+0xa8>)
 801a806:	f240 7287 	movw	r2, #1927	; 0x787
 801a80a:	4924      	ldr	r1, [pc, #144]	; (801a89c <tcp_output_control_segment+0xac>)
 801a80c:	4824      	ldr	r0, [pc, #144]	; (801a8a0 <tcp_output_control_segment+0xb0>)
 801a80e:	f003 fd19 	bl	801e244 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a812:	683a      	ldr	r2, [r7, #0]
 801a814:	6879      	ldr	r1, [r7, #4]
 801a816:	68f8      	ldr	r0, [r7, #12]
 801a818:	f7fe fad6 	bl	8018dc8 <tcp_route>
 801a81c:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 801a81e:	69bb      	ldr	r3, [r7, #24]
 801a820:	2b00      	cmp	r3, #0
 801a822:	d102      	bne.n	801a82a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a824:	23fc      	movs	r3, #252	; 0xfc
 801a826:	77fb      	strb	r3, [r7, #31]
 801a828:	e02c      	b.n	801a884 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801a82a:	68bb      	ldr	r3, [r7, #8]
 801a82c:	685b      	ldr	r3, [r3, #4]
 801a82e:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801a830:	68bb      	ldr	r3, [r7, #8]
 801a832:	891a      	ldrh	r2, [r3, #8]
 801a834:	683b      	ldr	r3, [r7, #0]
 801a836:	9300      	str	r3, [sp, #0]
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	2106      	movs	r1, #6
 801a83c:	68b8      	ldr	r0, [r7, #8]
 801a83e:	f7f8 fa55 	bl	8012cec <ip_chksum_pseudo>
 801a842:	4603      	mov	r3, r0
 801a844:	461a      	mov	r2, r3
 801a846:	697b      	ldr	r3, [r7, #20]
 801a848:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a84a:	68fb      	ldr	r3, [r7, #12]
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d006      	beq.n	801a85e <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	7adb      	ldrb	r3, [r3, #11]
 801a854:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	7a9b      	ldrb	r3, [r3, #10]
 801a85a:	777b      	strb	r3, [r7, #29]
 801a85c:	e003      	b.n	801a866 <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a85e:	23ff      	movs	r3, #255	; 0xff
 801a860:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 801a862:	2300      	movs	r3, #0
 801a864:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a866:	7fba      	ldrb	r2, [r7, #30]
 801a868:	69bb      	ldr	r3, [r7, #24]
 801a86a:	9302      	str	r3, [sp, #8]
 801a86c:	2306      	movs	r3, #6
 801a86e:	9301      	str	r3, [sp, #4]
 801a870:	7f7b      	ldrb	r3, [r7, #29]
 801a872:	9300      	str	r3, [sp, #0]
 801a874:	4613      	mov	r3, r2
 801a876:	683a      	ldr	r2, [r7, #0]
 801a878:	6879      	ldr	r1, [r7, #4]
 801a87a:	68b8      	ldr	r0, [r7, #8]
 801a87c:	f002 f90c 	bl	801ca98 <ip4_output_if>
 801a880:	4603      	mov	r3, r0
 801a882:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a884:	68b8      	ldr	r0, [r7, #8]
 801a886:	f7f9 fe79 	bl	801457c <pbuf_free>
  return err;
 801a88a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a88e:	4618      	mov	r0, r3
 801a890:	3720      	adds	r7, #32
 801a892:	46bd      	mov	sp, r7
 801a894:	bd80      	pop	{r7, pc}
 801a896:	bf00      	nop
 801a898:	08021788 	.word	0x08021788
 801a89c:	08021ee0 	.word	0x08021ee0
 801a8a0:	080217dc 	.word	0x080217dc

0801a8a4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a8a4:	b590      	push	{r4, r7, lr}
 801a8a6:	b08b      	sub	sp, #44	; 0x2c
 801a8a8:	af04      	add	r7, sp, #16
 801a8aa:	60f8      	str	r0, [r7, #12]
 801a8ac:	60b9      	str	r1, [r7, #8]
 801a8ae:	607a      	str	r2, [r7, #4]
 801a8b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a8b2:	683b      	ldr	r3, [r7, #0]
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d106      	bne.n	801a8c6 <tcp_rst+0x22>
 801a8b8:	4b1f      	ldr	r3, [pc, #124]	; (801a938 <tcp_rst+0x94>)
 801a8ba:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801a8be:	491f      	ldr	r1, [pc, #124]	; (801a93c <tcp_rst+0x98>)
 801a8c0:	481f      	ldr	r0, [pc, #124]	; (801a940 <tcp_rst+0x9c>)
 801a8c2:	f003 fcbf 	bl	801e244 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d106      	bne.n	801a8da <tcp_rst+0x36>
 801a8cc:	4b1a      	ldr	r3, [pc, #104]	; (801a938 <tcp_rst+0x94>)
 801a8ce:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801a8d2:	491c      	ldr	r1, [pc, #112]	; (801a944 <tcp_rst+0xa0>)
 801a8d4:	481a      	ldr	r0, [pc, #104]	; (801a940 <tcp_rst+0x9c>)
 801a8d6:	f003 fcb5 	bl	801e244 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a8da:	2300      	movs	r3, #0
 801a8dc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a8de:	f246 0308 	movw	r3, #24584	; 0x6008
 801a8e2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a8e4:	7dfb      	ldrb	r3, [r7, #23]
 801a8e6:	b29c      	uxth	r4, r3
 801a8e8:	68b8      	ldr	r0, [r7, #8]
 801a8ea:	f7f8 f8e2 	bl	8012ab2 <lwip_htonl>
 801a8ee:	4602      	mov	r2, r0
 801a8f0:	8abb      	ldrh	r3, [r7, #20]
 801a8f2:	9303      	str	r3, [sp, #12]
 801a8f4:	2314      	movs	r3, #20
 801a8f6:	9302      	str	r3, [sp, #8]
 801a8f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801a8fa:	9301      	str	r3, [sp, #4]
 801a8fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a8fe:	9300      	str	r3, [sp, #0]
 801a900:	4613      	mov	r3, r2
 801a902:	2200      	movs	r2, #0
 801a904:	4621      	mov	r1, r4
 801a906:	6878      	ldr	r0, [r7, #4]
 801a908:	f7ff fe82 	bl	801a610 <tcp_output_alloc_header_common>
 801a90c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a90e:	693b      	ldr	r3, [r7, #16]
 801a910:	2b00      	cmp	r3, #0
 801a912:	d00c      	beq.n	801a92e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a914:	7dfb      	ldrb	r3, [r7, #23]
 801a916:	2200      	movs	r2, #0
 801a918:	6939      	ldr	r1, [r7, #16]
 801a91a:	68f8      	ldr	r0, [r7, #12]
 801a91c:	f7ff ff28 	bl	801a770 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a922:	683a      	ldr	r2, [r7, #0]
 801a924:	6939      	ldr	r1, [r7, #16]
 801a926:	68f8      	ldr	r0, [r7, #12]
 801a928:	f7ff ff62 	bl	801a7f0 <tcp_output_control_segment>
 801a92c:	e000      	b.n	801a930 <tcp_rst+0x8c>
    return;
 801a92e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a930:	371c      	adds	r7, #28
 801a932:	46bd      	mov	sp, r7
 801a934:	bd90      	pop	{r4, r7, pc}
 801a936:	bf00      	nop
 801a938:	08021788 	.word	0x08021788
 801a93c:	08021f0c 	.word	0x08021f0c
 801a940:	080217dc 	.word	0x080217dc
 801a944:	08021f28 	.word	0x08021f28

0801a948 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a948:	b590      	push	{r4, r7, lr}
 801a94a:	b087      	sub	sp, #28
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a950:	2300      	movs	r3, #0
 801a952:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a954:	2300      	movs	r3, #0
 801a956:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d106      	bne.n	801a96c <tcp_send_empty_ack+0x24>
 801a95e:	4b28      	ldr	r3, [pc, #160]	; (801aa00 <tcp_send_empty_ack+0xb8>)
 801a960:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801a964:	4927      	ldr	r1, [pc, #156]	; (801aa04 <tcp_send_empty_ack+0xbc>)
 801a966:	4828      	ldr	r0, [pc, #160]	; (801aa08 <tcp_send_empty_ack+0xc0>)
 801a968:	f003 fc6c 	bl	801e244 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a96c:	7dfb      	ldrb	r3, [r7, #23]
 801a96e:	009b      	lsls	r3, r3, #2
 801a970:	b2db      	uxtb	r3, r3
 801a972:	f003 0304 	and.w	r3, r3, #4
 801a976:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a978:	7d7b      	ldrb	r3, [r7, #21]
 801a97a:	b29c      	uxth	r4, r3
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a980:	4618      	mov	r0, r3
 801a982:	f7f8 f896 	bl	8012ab2 <lwip_htonl>
 801a986:	4603      	mov	r3, r0
 801a988:	2200      	movs	r2, #0
 801a98a:	4621      	mov	r1, r4
 801a98c:	6878      	ldr	r0, [r7, #4]
 801a98e:	f7ff feb1 	bl	801a6f4 <tcp_output_alloc_header>
 801a992:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a994:	693b      	ldr	r3, [r7, #16]
 801a996:	2b00      	cmp	r3, #0
 801a998:	d109      	bne.n	801a9ae <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	8b5b      	ldrh	r3, [r3, #26]
 801a99e:	f043 0303 	orr.w	r3, r3, #3
 801a9a2:	b29a      	uxth	r2, r3
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a9a8:	f06f 0301 	mvn.w	r3, #1
 801a9ac:	e023      	b.n	801a9f6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a9ae:	7dbb      	ldrb	r3, [r7, #22]
 801a9b0:	7dfa      	ldrb	r2, [r7, #23]
 801a9b2:	6939      	ldr	r1, [r7, #16]
 801a9b4:	6878      	ldr	r0, [r7, #4]
 801a9b6:	f7ff fedb 	bl	801a770 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a9ba:	687a      	ldr	r2, [r7, #4]
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	3304      	adds	r3, #4
 801a9c0:	6939      	ldr	r1, [r7, #16]
 801a9c2:	6878      	ldr	r0, [r7, #4]
 801a9c4:	f7ff ff14 	bl	801a7f0 <tcp_output_control_segment>
 801a9c8:	4603      	mov	r3, r0
 801a9ca:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a9cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	d007      	beq.n	801a9e4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	8b5b      	ldrh	r3, [r3, #26]
 801a9d8:	f043 0303 	orr.w	r3, r3, #3
 801a9dc:	b29a      	uxth	r2, r3
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	835a      	strh	r2, [r3, #26]
 801a9e2:	e006      	b.n	801a9f2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	8b5b      	ldrh	r3, [r3, #26]
 801a9e8:	f023 0303 	bic.w	r3, r3, #3
 801a9ec:	b29a      	uxth	r2, r3
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a9f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a9f6:	4618      	mov	r0, r3
 801a9f8:	371c      	adds	r7, #28
 801a9fa:	46bd      	mov	sp, r7
 801a9fc:	bd90      	pop	{r4, r7, pc}
 801a9fe:	bf00      	nop
 801aa00:	08021788 	.word	0x08021788
 801aa04:	08021f44 	.word	0x08021f44
 801aa08:	080217dc 	.word	0x080217dc

0801aa0c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801aa0c:	b590      	push	{r4, r7, lr}
 801aa0e:	b087      	sub	sp, #28
 801aa10:	af00      	add	r7, sp, #0
 801aa12:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801aa14:	2300      	movs	r3, #0
 801aa16:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d106      	bne.n	801aa2c <tcp_keepalive+0x20>
 801aa1e:	4b18      	ldr	r3, [pc, #96]	; (801aa80 <tcp_keepalive+0x74>)
 801aa20:	f640 0224 	movw	r2, #2084	; 0x824
 801aa24:	4917      	ldr	r1, [pc, #92]	; (801aa84 <tcp_keepalive+0x78>)
 801aa26:	4818      	ldr	r0, [pc, #96]	; (801aa88 <tcp_keepalive+0x7c>)
 801aa28:	f003 fc0c 	bl	801e244 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801aa2c:	7dfb      	ldrb	r3, [r7, #23]
 801aa2e:	b29c      	uxth	r4, r3
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aa34:	3b01      	subs	r3, #1
 801aa36:	4618      	mov	r0, r3
 801aa38:	f7f8 f83b 	bl	8012ab2 <lwip_htonl>
 801aa3c:	4603      	mov	r3, r0
 801aa3e:	2200      	movs	r2, #0
 801aa40:	4621      	mov	r1, r4
 801aa42:	6878      	ldr	r0, [r7, #4]
 801aa44:	f7ff fe56 	bl	801a6f4 <tcp_output_alloc_header>
 801aa48:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801aa4a:	693b      	ldr	r3, [r7, #16]
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	d102      	bne.n	801aa56 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801aa50:	f04f 33ff 	mov.w	r3, #4294967295
 801aa54:	e010      	b.n	801aa78 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801aa56:	7dfb      	ldrb	r3, [r7, #23]
 801aa58:	2200      	movs	r2, #0
 801aa5a:	6939      	ldr	r1, [r7, #16]
 801aa5c:	6878      	ldr	r0, [r7, #4]
 801aa5e:	f7ff fe87 	bl	801a770 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801aa62:	687a      	ldr	r2, [r7, #4]
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	3304      	adds	r3, #4
 801aa68:	6939      	ldr	r1, [r7, #16]
 801aa6a:	6878      	ldr	r0, [r7, #4]
 801aa6c:	f7ff fec0 	bl	801a7f0 <tcp_output_control_segment>
 801aa70:	4603      	mov	r3, r0
 801aa72:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801aa74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801aa78:	4618      	mov	r0, r3
 801aa7a:	371c      	adds	r7, #28
 801aa7c:	46bd      	mov	sp, r7
 801aa7e:	bd90      	pop	{r4, r7, pc}
 801aa80:	08021788 	.word	0x08021788
 801aa84:	08021f64 	.word	0x08021f64
 801aa88:	080217dc 	.word	0x080217dc

0801aa8c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801aa8c:	b590      	push	{r4, r7, lr}
 801aa8e:	b08b      	sub	sp, #44	; 0x2c
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801aa94:	2300      	movs	r3, #0
 801aa96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d106      	bne.n	801aaae <tcp_zero_window_probe+0x22>
 801aaa0:	4b4c      	ldr	r3, [pc, #304]	; (801abd4 <tcp_zero_window_probe+0x148>)
 801aaa2:	f640 024f 	movw	r2, #2127	; 0x84f
 801aaa6:	494c      	ldr	r1, [pc, #304]	; (801abd8 <tcp_zero_window_probe+0x14c>)
 801aaa8:	484c      	ldr	r0, [pc, #304]	; (801abdc <tcp_zero_window_probe+0x150>)
 801aaaa:	f003 fbcb 	bl	801e244 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aab2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801aab4:	6a3b      	ldr	r3, [r7, #32]
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d101      	bne.n	801aabe <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801aaba:	2300      	movs	r3, #0
 801aabc:	e086      	b.n	801abcc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801aac4:	2bff      	cmp	r3, #255	; 0xff
 801aac6:	d007      	beq.n	801aad8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801aace:	3301      	adds	r3, #1
 801aad0:	b2da      	uxtb	r2, r3
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801aad8:	6a3b      	ldr	r3, [r7, #32]
 801aada:	68db      	ldr	r3, [r3, #12]
 801aadc:	899b      	ldrh	r3, [r3, #12]
 801aade:	b29b      	uxth	r3, r3
 801aae0:	4618      	mov	r0, r3
 801aae2:	f7f7 ffd1 	bl	8012a88 <lwip_htons>
 801aae6:	4603      	mov	r3, r0
 801aae8:	b2db      	uxtb	r3, r3
 801aaea:	f003 0301 	and.w	r3, r3, #1
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d005      	beq.n	801aafe <tcp_zero_window_probe+0x72>
 801aaf2:	6a3b      	ldr	r3, [r7, #32]
 801aaf4:	891b      	ldrh	r3, [r3, #8]
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d101      	bne.n	801aafe <tcp_zero_window_probe+0x72>
 801aafa:	2301      	movs	r3, #1
 801aafc:	e000      	b.n	801ab00 <tcp_zero_window_probe+0x74>
 801aafe:	2300      	movs	r3, #0
 801ab00:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801ab02:	7ffb      	ldrb	r3, [r7, #31]
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	bf0c      	ite	eq
 801ab08:	2301      	moveq	r3, #1
 801ab0a:	2300      	movne	r3, #0
 801ab0c:	b2db      	uxtb	r3, r3
 801ab0e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801ab10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ab14:	b299      	uxth	r1, r3
 801ab16:	6a3b      	ldr	r3, [r7, #32]
 801ab18:	68db      	ldr	r3, [r3, #12]
 801ab1a:	685b      	ldr	r3, [r3, #4]
 801ab1c:	8bba      	ldrh	r2, [r7, #28]
 801ab1e:	6878      	ldr	r0, [r7, #4]
 801ab20:	f7ff fde8 	bl	801a6f4 <tcp_output_alloc_header>
 801ab24:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801ab26:	69bb      	ldr	r3, [r7, #24]
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d102      	bne.n	801ab32 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801ab2c:	f04f 33ff 	mov.w	r3, #4294967295
 801ab30:	e04c      	b.n	801abcc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801ab32:	69bb      	ldr	r3, [r7, #24]
 801ab34:	685b      	ldr	r3, [r3, #4]
 801ab36:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801ab38:	7ffb      	ldrb	r3, [r7, #31]
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	d011      	beq.n	801ab62 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801ab3e:	697b      	ldr	r3, [r7, #20]
 801ab40:	899b      	ldrh	r3, [r3, #12]
 801ab42:	b29b      	uxth	r3, r3
 801ab44:	b21b      	sxth	r3, r3
 801ab46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801ab4a:	b21c      	sxth	r4, r3
 801ab4c:	2011      	movs	r0, #17
 801ab4e:	f7f7 ff9b 	bl	8012a88 <lwip_htons>
 801ab52:	4603      	mov	r3, r0
 801ab54:	b21b      	sxth	r3, r3
 801ab56:	4323      	orrs	r3, r4
 801ab58:	b21b      	sxth	r3, r3
 801ab5a:	b29a      	uxth	r2, r3
 801ab5c:	697b      	ldr	r3, [r7, #20]
 801ab5e:	819a      	strh	r2, [r3, #12]
 801ab60:	e010      	b.n	801ab84 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801ab62:	69bb      	ldr	r3, [r7, #24]
 801ab64:	685b      	ldr	r3, [r3, #4]
 801ab66:	3314      	adds	r3, #20
 801ab68:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801ab6a:	6a3b      	ldr	r3, [r7, #32]
 801ab6c:	6858      	ldr	r0, [r3, #4]
 801ab6e:	6a3b      	ldr	r3, [r7, #32]
 801ab70:	685b      	ldr	r3, [r3, #4]
 801ab72:	891a      	ldrh	r2, [r3, #8]
 801ab74:	6a3b      	ldr	r3, [r7, #32]
 801ab76:	891b      	ldrh	r3, [r3, #8]
 801ab78:	1ad3      	subs	r3, r2, r3
 801ab7a:	b29b      	uxth	r3, r3
 801ab7c:	2201      	movs	r2, #1
 801ab7e:	6939      	ldr	r1, [r7, #16]
 801ab80:	f7f9 fef2 	bl	8014968 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801ab84:	6a3b      	ldr	r3, [r7, #32]
 801ab86:	68db      	ldr	r3, [r3, #12]
 801ab88:	685b      	ldr	r3, [r3, #4]
 801ab8a:	4618      	mov	r0, r3
 801ab8c:	f7f7 ff91 	bl	8012ab2 <lwip_htonl>
 801ab90:	4603      	mov	r3, r0
 801ab92:	3301      	adds	r3, #1
 801ab94:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	1ad3      	subs	r3, r2, r3
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	da02      	bge.n	801aba8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	68fa      	ldr	r2, [r7, #12]
 801aba6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801aba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801abac:	2200      	movs	r2, #0
 801abae:	69b9      	ldr	r1, [r7, #24]
 801abb0:	6878      	ldr	r0, [r7, #4]
 801abb2:	f7ff fddd 	bl	801a770 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801abb6:	687a      	ldr	r2, [r7, #4]
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	3304      	adds	r3, #4
 801abbc:	69b9      	ldr	r1, [r7, #24]
 801abbe:	6878      	ldr	r0, [r7, #4]
 801abc0:	f7ff fe16 	bl	801a7f0 <tcp_output_control_segment>
 801abc4:	4603      	mov	r3, r0
 801abc6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801abc8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801abcc:	4618      	mov	r0, r3
 801abce:	372c      	adds	r7, #44	; 0x2c
 801abd0:	46bd      	mov	sp, r7
 801abd2:	bd90      	pop	{r4, r7, pc}
 801abd4:	08021788 	.word	0x08021788
 801abd8:	08021f80 	.word	0x08021f80
 801abdc:	080217dc 	.word	0x080217dc

0801abe0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801abe0:	b580      	push	{r7, lr}
 801abe2:	b082      	sub	sp, #8
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801abe8:	f7f9 ffac 	bl	8014b44 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801abec:	4b0a      	ldr	r3, [pc, #40]	; (801ac18 <tcpip_tcp_timer+0x38>)
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d103      	bne.n	801abfc <tcpip_tcp_timer+0x1c>
 801abf4:	4b09      	ldr	r3, [pc, #36]	; (801ac1c <tcpip_tcp_timer+0x3c>)
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	d005      	beq.n	801ac08 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801abfc:	2200      	movs	r2, #0
 801abfe:	4908      	ldr	r1, [pc, #32]	; (801ac20 <tcpip_tcp_timer+0x40>)
 801ac00:	20fa      	movs	r0, #250	; 0xfa
 801ac02:	f000 f8f3 	bl	801adec <sys_timeout>
 801ac06:	e003      	b.n	801ac10 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801ac08:	4b06      	ldr	r3, [pc, #24]	; (801ac24 <tcpip_tcp_timer+0x44>)
 801ac0a:	2200      	movs	r2, #0
 801ac0c:	601a      	str	r2, [r3, #0]
  }
}
 801ac0e:	bf00      	nop
 801ac10:	bf00      	nop
 801ac12:	3708      	adds	r7, #8
 801ac14:	46bd      	mov	sp, r7
 801ac16:	bd80      	pop	{r7, pc}
 801ac18:	2405e9b8 	.word	0x2405e9b8
 801ac1c:	2405e9bc 	.word	0x2405e9bc
 801ac20:	0801abe1 	.word	0x0801abe1
 801ac24:	2405ea04 	.word	0x2405ea04

0801ac28 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801ac28:	b580      	push	{r7, lr}
 801ac2a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801ac2c:	4b0a      	ldr	r3, [pc, #40]	; (801ac58 <tcp_timer_needed+0x30>)
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	d10f      	bne.n	801ac54 <tcp_timer_needed+0x2c>
 801ac34:	4b09      	ldr	r3, [pc, #36]	; (801ac5c <tcp_timer_needed+0x34>)
 801ac36:	681b      	ldr	r3, [r3, #0]
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d103      	bne.n	801ac44 <tcp_timer_needed+0x1c>
 801ac3c:	4b08      	ldr	r3, [pc, #32]	; (801ac60 <tcp_timer_needed+0x38>)
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	d007      	beq.n	801ac54 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801ac44:	4b04      	ldr	r3, [pc, #16]	; (801ac58 <tcp_timer_needed+0x30>)
 801ac46:	2201      	movs	r2, #1
 801ac48:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801ac4a:	2200      	movs	r2, #0
 801ac4c:	4905      	ldr	r1, [pc, #20]	; (801ac64 <tcp_timer_needed+0x3c>)
 801ac4e:	20fa      	movs	r0, #250	; 0xfa
 801ac50:	f000 f8cc 	bl	801adec <sys_timeout>
  }
}
 801ac54:	bf00      	nop
 801ac56:	bd80      	pop	{r7, pc}
 801ac58:	2405ea04 	.word	0x2405ea04
 801ac5c:	2405e9b8 	.word	0x2405e9b8
 801ac60:	2405e9bc 	.word	0x2405e9bc
 801ac64:	0801abe1 	.word	0x0801abe1

0801ac68 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801ac68:	b580      	push	{r7, lr}
 801ac6a:	b086      	sub	sp, #24
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	60f8      	str	r0, [r7, #12]
 801ac70:	60b9      	str	r1, [r7, #8]
 801ac72:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801ac74:	200a      	movs	r0, #10
 801ac76:	f7f8 fd63 	bl	8013740 <memp_malloc>
 801ac7a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801ac7c:	693b      	ldr	r3, [r7, #16]
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d109      	bne.n	801ac96 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801ac82:	693b      	ldr	r3, [r7, #16]
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d151      	bne.n	801ad2c <sys_timeout_abs+0xc4>
 801ac88:	4b2a      	ldr	r3, [pc, #168]	; (801ad34 <sys_timeout_abs+0xcc>)
 801ac8a:	22be      	movs	r2, #190	; 0xbe
 801ac8c:	492a      	ldr	r1, [pc, #168]	; (801ad38 <sys_timeout_abs+0xd0>)
 801ac8e:	482b      	ldr	r0, [pc, #172]	; (801ad3c <sys_timeout_abs+0xd4>)
 801ac90:	f003 fad8 	bl	801e244 <iprintf>
    return;
 801ac94:	e04a      	b.n	801ad2c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801ac96:	693b      	ldr	r3, [r7, #16]
 801ac98:	2200      	movs	r2, #0
 801ac9a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801ac9c:	693b      	ldr	r3, [r7, #16]
 801ac9e:	68ba      	ldr	r2, [r7, #8]
 801aca0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801aca2:	693b      	ldr	r3, [r7, #16]
 801aca4:	687a      	ldr	r2, [r7, #4]
 801aca6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801aca8:	693b      	ldr	r3, [r7, #16]
 801acaa:	68fa      	ldr	r2, [r7, #12]
 801acac:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801acae:	4b24      	ldr	r3, [pc, #144]	; (801ad40 <sys_timeout_abs+0xd8>)
 801acb0:	681b      	ldr	r3, [r3, #0]
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d103      	bne.n	801acbe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801acb6:	4a22      	ldr	r2, [pc, #136]	; (801ad40 <sys_timeout_abs+0xd8>)
 801acb8:	693b      	ldr	r3, [r7, #16]
 801acba:	6013      	str	r3, [r2, #0]
    return;
 801acbc:	e037      	b.n	801ad2e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801acbe:	693b      	ldr	r3, [r7, #16]
 801acc0:	685a      	ldr	r2, [r3, #4]
 801acc2:	4b1f      	ldr	r3, [pc, #124]	; (801ad40 <sys_timeout_abs+0xd8>)
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	685b      	ldr	r3, [r3, #4]
 801acc8:	1ad3      	subs	r3, r2, r3
 801acca:	0fdb      	lsrs	r3, r3, #31
 801accc:	f003 0301 	and.w	r3, r3, #1
 801acd0:	b2db      	uxtb	r3, r3
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d007      	beq.n	801ace6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801acd6:	4b1a      	ldr	r3, [pc, #104]	; (801ad40 <sys_timeout_abs+0xd8>)
 801acd8:	681a      	ldr	r2, [r3, #0]
 801acda:	693b      	ldr	r3, [r7, #16]
 801acdc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801acde:	4a18      	ldr	r2, [pc, #96]	; (801ad40 <sys_timeout_abs+0xd8>)
 801ace0:	693b      	ldr	r3, [r7, #16]
 801ace2:	6013      	str	r3, [r2, #0]
 801ace4:	e023      	b.n	801ad2e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801ace6:	4b16      	ldr	r3, [pc, #88]	; (801ad40 <sys_timeout_abs+0xd8>)
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	617b      	str	r3, [r7, #20]
 801acec:	e01a      	b.n	801ad24 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801acee:	697b      	ldr	r3, [r7, #20]
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d00b      	beq.n	801ad0e <sys_timeout_abs+0xa6>
 801acf6:	693b      	ldr	r3, [r7, #16]
 801acf8:	685a      	ldr	r2, [r3, #4]
 801acfa:	697b      	ldr	r3, [r7, #20]
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	685b      	ldr	r3, [r3, #4]
 801ad00:	1ad3      	subs	r3, r2, r3
 801ad02:	0fdb      	lsrs	r3, r3, #31
 801ad04:	f003 0301 	and.w	r3, r3, #1
 801ad08:	b2db      	uxtb	r3, r3
 801ad0a:	2b00      	cmp	r3, #0
 801ad0c:	d007      	beq.n	801ad1e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801ad0e:	697b      	ldr	r3, [r7, #20]
 801ad10:	681a      	ldr	r2, [r3, #0]
 801ad12:	693b      	ldr	r3, [r7, #16]
 801ad14:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801ad16:	697b      	ldr	r3, [r7, #20]
 801ad18:	693a      	ldr	r2, [r7, #16]
 801ad1a:	601a      	str	r2, [r3, #0]
        break;
 801ad1c:	e007      	b.n	801ad2e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801ad1e:	697b      	ldr	r3, [r7, #20]
 801ad20:	681b      	ldr	r3, [r3, #0]
 801ad22:	617b      	str	r3, [r7, #20]
 801ad24:	697b      	ldr	r3, [r7, #20]
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	d1e1      	bne.n	801acee <sys_timeout_abs+0x86>
 801ad2a:	e000      	b.n	801ad2e <sys_timeout_abs+0xc6>
    return;
 801ad2c:	bf00      	nop
      }
    }
  }
}
 801ad2e:	3718      	adds	r7, #24
 801ad30:	46bd      	mov	sp, r7
 801ad32:	bd80      	pop	{r7, pc}
 801ad34:	08021fa4 	.word	0x08021fa4
 801ad38:	08021fd8 	.word	0x08021fd8
 801ad3c:	08022018 	.word	0x08022018
 801ad40:	2405e9fc 	.word	0x2405e9fc

0801ad44 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801ad44:	b580      	push	{r7, lr}
 801ad46:	b086      	sub	sp, #24
 801ad48:	af00      	add	r7, sp, #0
 801ad4a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801ad50:	697b      	ldr	r3, [r7, #20]
 801ad52:	685b      	ldr	r3, [r3, #4]
 801ad54:	4798      	blx	r3

  now = sys_now();
 801ad56:	f7f1 fa67 	bl	800c228 <sys_now>
 801ad5a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801ad5c:	697b      	ldr	r3, [r7, #20]
 801ad5e:	681a      	ldr	r2, [r3, #0]
 801ad60:	4b0f      	ldr	r3, [pc, #60]	; (801ada0 <lwip_cyclic_timer+0x5c>)
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	4413      	add	r3, r2
 801ad66:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801ad68:	68fa      	ldr	r2, [r7, #12]
 801ad6a:	693b      	ldr	r3, [r7, #16]
 801ad6c:	1ad3      	subs	r3, r2, r3
 801ad6e:	0fdb      	lsrs	r3, r3, #31
 801ad70:	f003 0301 	and.w	r3, r3, #1
 801ad74:	b2db      	uxtb	r3, r3
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d009      	beq.n	801ad8e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801ad7a:	697b      	ldr	r3, [r7, #20]
 801ad7c:	681a      	ldr	r2, [r3, #0]
 801ad7e:	693b      	ldr	r3, [r7, #16]
 801ad80:	4413      	add	r3, r2
 801ad82:	687a      	ldr	r2, [r7, #4]
 801ad84:	4907      	ldr	r1, [pc, #28]	; (801ada4 <lwip_cyclic_timer+0x60>)
 801ad86:	4618      	mov	r0, r3
 801ad88:	f7ff ff6e 	bl	801ac68 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801ad8c:	e004      	b.n	801ad98 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801ad8e:	687a      	ldr	r2, [r7, #4]
 801ad90:	4904      	ldr	r1, [pc, #16]	; (801ada4 <lwip_cyclic_timer+0x60>)
 801ad92:	68f8      	ldr	r0, [r7, #12]
 801ad94:	f7ff ff68 	bl	801ac68 <sys_timeout_abs>
}
 801ad98:	bf00      	nop
 801ad9a:	3718      	adds	r7, #24
 801ad9c:	46bd      	mov	sp, r7
 801ad9e:	bd80      	pop	{r7, pc}
 801ada0:	2405ea00 	.word	0x2405ea00
 801ada4:	0801ad45 	.word	0x0801ad45

0801ada8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801ada8:	b580      	push	{r7, lr}
 801adaa:	b082      	sub	sp, #8
 801adac:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801adae:	2301      	movs	r3, #1
 801adb0:	607b      	str	r3, [r7, #4]
 801adb2:	e00e      	b.n	801add2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801adb4:	4a0b      	ldr	r2, [pc, #44]	; (801ade4 <sys_timeouts_init+0x3c>)
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	00db      	lsls	r3, r3, #3
 801adc0:	4a08      	ldr	r2, [pc, #32]	; (801ade4 <sys_timeouts_init+0x3c>)
 801adc2:	4413      	add	r3, r2
 801adc4:	461a      	mov	r2, r3
 801adc6:	4908      	ldr	r1, [pc, #32]	; (801ade8 <sys_timeouts_init+0x40>)
 801adc8:	f000 f810 	bl	801adec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	3301      	adds	r3, #1
 801add0:	607b      	str	r3, [r7, #4]
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	2b02      	cmp	r3, #2
 801add6:	d9ed      	bls.n	801adb4 <sys_timeouts_init+0xc>
  }
}
 801add8:	bf00      	nop
 801adda:	bf00      	nop
 801addc:	3708      	adds	r7, #8
 801adde:	46bd      	mov	sp, r7
 801ade0:	bd80      	pop	{r7, pc}
 801ade2:	bf00      	nop
 801ade4:	08022c60 	.word	0x08022c60
 801ade8:	0801ad45 	.word	0x0801ad45

0801adec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801adec:	b580      	push	{r7, lr}
 801adee:	b086      	sub	sp, #24
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	60f8      	str	r0, [r7, #12]
 801adf4:	60b9      	str	r1, [r7, #8]
 801adf6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801adf8:	68fb      	ldr	r3, [r7, #12]
 801adfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801adfe:	d306      	bcc.n	801ae0e <sys_timeout+0x22>
 801ae00:	4b0a      	ldr	r3, [pc, #40]	; (801ae2c <sys_timeout+0x40>)
 801ae02:	f240 1229 	movw	r2, #297	; 0x129
 801ae06:	490a      	ldr	r1, [pc, #40]	; (801ae30 <sys_timeout+0x44>)
 801ae08:	480a      	ldr	r0, [pc, #40]	; (801ae34 <sys_timeout+0x48>)
 801ae0a:	f003 fa1b 	bl	801e244 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801ae0e:	f7f1 fa0b 	bl	800c228 <sys_now>
 801ae12:	4602      	mov	r2, r0
 801ae14:	68fb      	ldr	r3, [r7, #12]
 801ae16:	4413      	add	r3, r2
 801ae18:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ae1a:	687a      	ldr	r2, [r7, #4]
 801ae1c:	68b9      	ldr	r1, [r7, #8]
 801ae1e:	6978      	ldr	r0, [r7, #20]
 801ae20:	f7ff ff22 	bl	801ac68 <sys_timeout_abs>
#endif
}
 801ae24:	bf00      	nop
 801ae26:	3718      	adds	r7, #24
 801ae28:	46bd      	mov	sp, r7
 801ae2a:	bd80      	pop	{r7, pc}
 801ae2c:	08021fa4 	.word	0x08021fa4
 801ae30:	08022040 	.word	0x08022040
 801ae34:	08022018 	.word	0x08022018

0801ae38 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801ae38:	b580      	push	{r7, lr}
 801ae3a:	b084      	sub	sp, #16
 801ae3c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801ae3e:	f7f1 f9f3 	bl	800c228 <sys_now>
 801ae42:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801ae44:	4b17      	ldr	r3, [pc, #92]	; (801aea4 <sys_check_timeouts+0x6c>)
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801ae4a:	68bb      	ldr	r3, [r7, #8]
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d022      	beq.n	801ae96 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801ae50:	68bb      	ldr	r3, [r7, #8]
 801ae52:	685b      	ldr	r3, [r3, #4]
 801ae54:	68fa      	ldr	r2, [r7, #12]
 801ae56:	1ad3      	subs	r3, r2, r3
 801ae58:	0fdb      	lsrs	r3, r3, #31
 801ae5a:	f003 0301 	and.w	r3, r3, #1
 801ae5e:	b2db      	uxtb	r3, r3
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d11a      	bne.n	801ae9a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801ae64:	68bb      	ldr	r3, [r7, #8]
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	4a0e      	ldr	r2, [pc, #56]	; (801aea4 <sys_check_timeouts+0x6c>)
 801ae6a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801ae6c:	68bb      	ldr	r3, [r7, #8]
 801ae6e:	689b      	ldr	r3, [r3, #8]
 801ae70:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801ae72:	68bb      	ldr	r3, [r7, #8]
 801ae74:	68db      	ldr	r3, [r3, #12]
 801ae76:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801ae78:	68bb      	ldr	r3, [r7, #8]
 801ae7a:	685b      	ldr	r3, [r3, #4]
 801ae7c:	4a0a      	ldr	r2, [pc, #40]	; (801aea8 <sys_check_timeouts+0x70>)
 801ae7e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801ae80:	68b9      	ldr	r1, [r7, #8]
 801ae82:	200a      	movs	r0, #10
 801ae84:	f7f8 fcd2 	bl	801382c <memp_free>
    if (handler != NULL) {
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d0da      	beq.n	801ae44 <sys_check_timeouts+0xc>
      handler(arg);
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	6838      	ldr	r0, [r7, #0]
 801ae92:	4798      	blx	r3
  do {
 801ae94:	e7d6      	b.n	801ae44 <sys_check_timeouts+0xc>
      return;
 801ae96:	bf00      	nop
 801ae98:	e000      	b.n	801ae9c <sys_check_timeouts+0x64>
      return;
 801ae9a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801ae9c:	3710      	adds	r7, #16
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	bd80      	pop	{r7, pc}
 801aea2:	bf00      	nop
 801aea4:	2405e9fc 	.word	0x2405e9fc
 801aea8:	2405ea00 	.word	0x2405ea00

0801aeac <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801aeac:	b580      	push	{r7, lr}
 801aeae:	b082      	sub	sp, #8
 801aeb0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801aeb2:	4b16      	ldr	r3, [pc, #88]	; (801af0c <sys_timeouts_sleeptime+0x60>)
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d102      	bne.n	801aec0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801aeba:	f04f 33ff 	mov.w	r3, #4294967295
 801aebe:	e020      	b.n	801af02 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801aec0:	f7f1 f9b2 	bl	800c228 <sys_now>
 801aec4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801aec6:	4b11      	ldr	r3, [pc, #68]	; (801af0c <sys_timeouts_sleeptime+0x60>)
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	685a      	ldr	r2, [r3, #4]
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	1ad3      	subs	r3, r2, r3
 801aed0:	0fdb      	lsrs	r3, r3, #31
 801aed2:	f003 0301 	and.w	r3, r3, #1
 801aed6:	b2db      	uxtb	r3, r3
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	d001      	beq.n	801aee0 <sys_timeouts_sleeptime+0x34>
    return 0;
 801aedc:	2300      	movs	r3, #0
 801aede:	e010      	b.n	801af02 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801aee0:	4b0a      	ldr	r3, [pc, #40]	; (801af0c <sys_timeouts_sleeptime+0x60>)
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	685a      	ldr	r2, [r3, #4]
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	1ad3      	subs	r3, r2, r3
 801aeea:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801aeec:	683b      	ldr	r3, [r7, #0]
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	da06      	bge.n	801af00 <sys_timeouts_sleeptime+0x54>
 801aef2:	4b07      	ldr	r3, [pc, #28]	; (801af10 <sys_timeouts_sleeptime+0x64>)
 801aef4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801aef8:	4906      	ldr	r1, [pc, #24]	; (801af14 <sys_timeouts_sleeptime+0x68>)
 801aefa:	4807      	ldr	r0, [pc, #28]	; (801af18 <sys_timeouts_sleeptime+0x6c>)
 801aefc:	f003 f9a2 	bl	801e244 <iprintf>
    return ret;
 801af00:	683b      	ldr	r3, [r7, #0]
  }
}
 801af02:	4618      	mov	r0, r3
 801af04:	3708      	adds	r7, #8
 801af06:	46bd      	mov	sp, r7
 801af08:	bd80      	pop	{r7, pc}
 801af0a:	bf00      	nop
 801af0c:	2405e9fc 	.word	0x2405e9fc
 801af10:	08021fa4 	.word	0x08021fa4
 801af14:	08022078 	.word	0x08022078
 801af18:	08022018 	.word	0x08022018

0801af1c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801af1c:	b580      	push	{r7, lr}
 801af1e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801af20:	f003 f9a8 	bl	801e274 <rand>
 801af24:	4603      	mov	r3, r0
 801af26:	b29b      	uxth	r3, r3
 801af28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801af2c:	b29b      	uxth	r3, r3
 801af2e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801af32:	b29a      	uxth	r2, r3
 801af34:	4b01      	ldr	r3, [pc, #4]	; (801af3c <udp_init+0x20>)
 801af36:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801af38:	bf00      	nop
 801af3a:	bd80      	pop	{r7, pc}
 801af3c:	24000030 	.word	0x24000030

0801af40 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801af40:	b480      	push	{r7}
 801af42:	b083      	sub	sp, #12
 801af44:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801af46:	2300      	movs	r3, #0
 801af48:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801af4a:	4b17      	ldr	r3, [pc, #92]	; (801afa8 <udp_new_port+0x68>)
 801af4c:	881b      	ldrh	r3, [r3, #0]
 801af4e:	1c5a      	adds	r2, r3, #1
 801af50:	b291      	uxth	r1, r2
 801af52:	4a15      	ldr	r2, [pc, #84]	; (801afa8 <udp_new_port+0x68>)
 801af54:	8011      	strh	r1, [r2, #0]
 801af56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801af5a:	4293      	cmp	r3, r2
 801af5c:	d103      	bne.n	801af66 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801af5e:	4b12      	ldr	r3, [pc, #72]	; (801afa8 <udp_new_port+0x68>)
 801af60:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801af64:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801af66:	4b11      	ldr	r3, [pc, #68]	; (801afac <udp_new_port+0x6c>)
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	603b      	str	r3, [r7, #0]
 801af6c:	e011      	b.n	801af92 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801af6e:	683b      	ldr	r3, [r7, #0]
 801af70:	8a5a      	ldrh	r2, [r3, #18]
 801af72:	4b0d      	ldr	r3, [pc, #52]	; (801afa8 <udp_new_port+0x68>)
 801af74:	881b      	ldrh	r3, [r3, #0]
 801af76:	429a      	cmp	r2, r3
 801af78:	d108      	bne.n	801af8c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801af7a:	88fb      	ldrh	r3, [r7, #6]
 801af7c:	3301      	adds	r3, #1
 801af7e:	80fb      	strh	r3, [r7, #6]
 801af80:	88fb      	ldrh	r3, [r7, #6]
 801af82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801af86:	d3e0      	bcc.n	801af4a <udp_new_port+0xa>
        return 0;
 801af88:	2300      	movs	r3, #0
 801af8a:	e007      	b.n	801af9c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801af8c:	683b      	ldr	r3, [r7, #0]
 801af8e:	68db      	ldr	r3, [r3, #12]
 801af90:	603b      	str	r3, [r7, #0]
 801af92:	683b      	ldr	r3, [r7, #0]
 801af94:	2b00      	cmp	r3, #0
 801af96:	d1ea      	bne.n	801af6e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801af98:	4b03      	ldr	r3, [pc, #12]	; (801afa8 <udp_new_port+0x68>)
 801af9a:	881b      	ldrh	r3, [r3, #0]
}
 801af9c:	4618      	mov	r0, r3
 801af9e:	370c      	adds	r7, #12
 801afa0:	46bd      	mov	sp, r7
 801afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afa6:	4770      	bx	lr
 801afa8:	24000030 	.word	0x24000030
 801afac:	2405ea08 	.word	0x2405ea08

0801afb0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801afb0:	b580      	push	{r7, lr}
 801afb2:	b084      	sub	sp, #16
 801afb4:	af00      	add	r7, sp, #0
 801afb6:	60f8      	str	r0, [r7, #12]
 801afb8:	60b9      	str	r1, [r7, #8]
 801afba:	4613      	mov	r3, r2
 801afbc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801afbe:	68fb      	ldr	r3, [r7, #12]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d105      	bne.n	801afd0 <udp_input_local_match+0x20>
 801afc4:	4b27      	ldr	r3, [pc, #156]	; (801b064 <udp_input_local_match+0xb4>)
 801afc6:	2287      	movs	r2, #135	; 0x87
 801afc8:	4927      	ldr	r1, [pc, #156]	; (801b068 <udp_input_local_match+0xb8>)
 801afca:	4828      	ldr	r0, [pc, #160]	; (801b06c <udp_input_local_match+0xbc>)
 801afcc:	f003 f93a 	bl	801e244 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801afd0:	68bb      	ldr	r3, [r7, #8]
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d105      	bne.n	801afe2 <udp_input_local_match+0x32>
 801afd6:	4b23      	ldr	r3, [pc, #140]	; (801b064 <udp_input_local_match+0xb4>)
 801afd8:	2288      	movs	r2, #136	; 0x88
 801afda:	4925      	ldr	r1, [pc, #148]	; (801b070 <udp_input_local_match+0xc0>)
 801afdc:	4823      	ldr	r0, [pc, #140]	; (801b06c <udp_input_local_match+0xbc>)
 801afde:	f003 f931 	bl	801e244 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801afe2:	68fb      	ldr	r3, [r7, #12]
 801afe4:	7a1b      	ldrb	r3, [r3, #8]
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d00b      	beq.n	801b002 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801afea:	68fb      	ldr	r3, [r7, #12]
 801afec:	7a1a      	ldrb	r2, [r3, #8]
 801afee:	4b21      	ldr	r3, [pc, #132]	; (801b074 <udp_input_local_match+0xc4>)
 801aff0:	685b      	ldr	r3, [r3, #4]
 801aff2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801aff6:	3301      	adds	r3, #1
 801aff8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801affa:	429a      	cmp	r2, r3
 801affc:	d001      	beq.n	801b002 <udp_input_local_match+0x52>
    return 0;
 801affe:	2300      	movs	r3, #0
 801b000:	e02b      	b.n	801b05a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801b002:	79fb      	ldrb	r3, [r7, #7]
 801b004:	2b00      	cmp	r3, #0
 801b006:	d018      	beq.n	801b03a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b008:	68fb      	ldr	r3, [r7, #12]
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d013      	beq.n	801b036 <udp_input_local_match+0x86>
 801b00e:	68fb      	ldr	r3, [r7, #12]
 801b010:	681b      	ldr	r3, [r3, #0]
 801b012:	2b00      	cmp	r3, #0
 801b014:	d00f      	beq.n	801b036 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b016:	4b17      	ldr	r3, [pc, #92]	; (801b074 <udp_input_local_match+0xc4>)
 801b018:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b01e:	d00a      	beq.n	801b036 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b020:	68fb      	ldr	r3, [r7, #12]
 801b022:	681a      	ldr	r2, [r3, #0]
 801b024:	4b13      	ldr	r3, [pc, #76]	; (801b074 <udp_input_local_match+0xc4>)
 801b026:	695b      	ldr	r3, [r3, #20]
 801b028:	405a      	eors	r2, r3
 801b02a:	68bb      	ldr	r3, [r7, #8]
 801b02c:	3308      	adds	r3, #8
 801b02e:	681b      	ldr	r3, [r3, #0]
 801b030:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b032:	2b00      	cmp	r3, #0
 801b034:	d110      	bne.n	801b058 <udp_input_local_match+0xa8>
          return 1;
 801b036:	2301      	movs	r3, #1
 801b038:	e00f      	b.n	801b05a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d009      	beq.n	801b054 <udp_input_local_match+0xa4>
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	2b00      	cmp	r3, #0
 801b046:	d005      	beq.n	801b054 <udp_input_local_match+0xa4>
 801b048:	68fb      	ldr	r3, [r7, #12]
 801b04a:	681a      	ldr	r2, [r3, #0]
 801b04c:	4b09      	ldr	r3, [pc, #36]	; (801b074 <udp_input_local_match+0xc4>)
 801b04e:	695b      	ldr	r3, [r3, #20]
 801b050:	429a      	cmp	r2, r3
 801b052:	d101      	bne.n	801b058 <udp_input_local_match+0xa8>
        return 1;
 801b054:	2301      	movs	r3, #1
 801b056:	e000      	b.n	801b05a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801b058:	2300      	movs	r3, #0
}
 801b05a:	4618      	mov	r0, r3
 801b05c:	3710      	adds	r7, #16
 801b05e:	46bd      	mov	sp, r7
 801b060:	bd80      	pop	{r7, pc}
 801b062:	bf00      	nop
 801b064:	0802208c 	.word	0x0802208c
 801b068:	080220bc 	.word	0x080220bc
 801b06c:	080220e0 	.word	0x080220e0
 801b070:	08022108 	.word	0x08022108
 801b074:	24015f3c 	.word	0x24015f3c

0801b078 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b078:	b590      	push	{r4, r7, lr}
 801b07a:	b08d      	sub	sp, #52	; 0x34
 801b07c:	af02      	add	r7, sp, #8
 801b07e:	6078      	str	r0, [r7, #4]
 801b080:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801b082:	2300      	movs	r3, #0
 801b084:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	2b00      	cmp	r3, #0
 801b08a:	d105      	bne.n	801b098 <udp_input+0x20>
 801b08c:	4b7c      	ldr	r3, [pc, #496]	; (801b280 <udp_input+0x208>)
 801b08e:	22cf      	movs	r2, #207	; 0xcf
 801b090:	497c      	ldr	r1, [pc, #496]	; (801b284 <udp_input+0x20c>)
 801b092:	487d      	ldr	r0, [pc, #500]	; (801b288 <udp_input+0x210>)
 801b094:	f003 f8d6 	bl	801e244 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b098:	683b      	ldr	r3, [r7, #0]
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d105      	bne.n	801b0aa <udp_input+0x32>
 801b09e:	4b78      	ldr	r3, [pc, #480]	; (801b280 <udp_input+0x208>)
 801b0a0:	22d0      	movs	r2, #208	; 0xd0
 801b0a2:	497a      	ldr	r1, [pc, #488]	; (801b28c <udp_input+0x214>)
 801b0a4:	4878      	ldr	r0, [pc, #480]	; (801b288 <udp_input+0x210>)
 801b0a6:	f003 f8cd 	bl	801e244 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	895b      	ldrh	r3, [r3, #10]
 801b0ae:	2b07      	cmp	r3, #7
 801b0b0:	d803      	bhi.n	801b0ba <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801b0b2:	6878      	ldr	r0, [r7, #4]
 801b0b4:	f7f9 fa62 	bl	801457c <pbuf_free>
    goto end;
 801b0b8:	e0de      	b.n	801b278 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	685b      	ldr	r3, [r3, #4]
 801b0be:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b0c0:	4b73      	ldr	r3, [pc, #460]	; (801b290 <udp_input+0x218>)
 801b0c2:	695b      	ldr	r3, [r3, #20]
 801b0c4:	4a72      	ldr	r2, [pc, #456]	; (801b290 <udp_input+0x218>)
 801b0c6:	6812      	ldr	r2, [r2, #0]
 801b0c8:	4611      	mov	r1, r2
 801b0ca:	4618      	mov	r0, r3
 801b0cc:	f001 fdbc 	bl	801cc48 <ip4_addr_isbroadcast_u32>
 801b0d0:	4603      	mov	r3, r0
 801b0d2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b0d4:	697b      	ldr	r3, [r7, #20]
 801b0d6:	881b      	ldrh	r3, [r3, #0]
 801b0d8:	b29b      	uxth	r3, r3
 801b0da:	4618      	mov	r0, r3
 801b0dc:	f7f7 fcd4 	bl	8012a88 <lwip_htons>
 801b0e0:	4603      	mov	r3, r0
 801b0e2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801b0e4:	697b      	ldr	r3, [r7, #20]
 801b0e6:	885b      	ldrh	r3, [r3, #2]
 801b0e8:	b29b      	uxth	r3, r3
 801b0ea:	4618      	mov	r0, r3
 801b0ec:	f7f7 fccc 	bl	8012a88 <lwip_htons>
 801b0f0:	4603      	mov	r3, r0
 801b0f2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801b0f4:	2300      	movs	r3, #0
 801b0f6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801b0f8:	2300      	movs	r3, #0
 801b0fa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801b0fc:	2300      	movs	r3, #0
 801b0fe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b100:	4b64      	ldr	r3, [pc, #400]	; (801b294 <udp_input+0x21c>)
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	627b      	str	r3, [r7, #36]	; 0x24
 801b106:	e054      	b.n	801b1b2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b10a:	8a5b      	ldrh	r3, [r3, #18]
 801b10c:	89fa      	ldrh	r2, [r7, #14]
 801b10e:	429a      	cmp	r2, r3
 801b110:	d14a      	bne.n	801b1a8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b112:	7cfb      	ldrb	r3, [r7, #19]
 801b114:	461a      	mov	r2, r3
 801b116:	6839      	ldr	r1, [r7, #0]
 801b118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b11a:	f7ff ff49 	bl	801afb0 <udp_input_local_match>
 801b11e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b120:	2b00      	cmp	r3, #0
 801b122:	d041      	beq.n	801b1a8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b126:	7c1b      	ldrb	r3, [r3, #16]
 801b128:	f003 0304 	and.w	r3, r3, #4
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d11d      	bne.n	801b16c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801b130:	69fb      	ldr	r3, [r7, #28]
 801b132:	2b00      	cmp	r3, #0
 801b134:	d102      	bne.n	801b13c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801b136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b138:	61fb      	str	r3, [r7, #28]
 801b13a:	e017      	b.n	801b16c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b13c:	7cfb      	ldrb	r3, [r7, #19]
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d014      	beq.n	801b16c <udp_input+0xf4>
 801b142:	4b53      	ldr	r3, [pc, #332]	; (801b290 <udp_input+0x218>)
 801b144:	695b      	ldr	r3, [r3, #20]
 801b146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b14a:	d10f      	bne.n	801b16c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b14c:	69fb      	ldr	r3, [r7, #28]
 801b14e:	681a      	ldr	r2, [r3, #0]
 801b150:	683b      	ldr	r3, [r7, #0]
 801b152:	3304      	adds	r3, #4
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	429a      	cmp	r2, r3
 801b158:	d008      	beq.n	801b16c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801b15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b15c:	681a      	ldr	r2, [r3, #0]
 801b15e:	683b      	ldr	r3, [r7, #0]
 801b160:	3304      	adds	r3, #4
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	429a      	cmp	r2, r3
 801b166:	d101      	bne.n	801b16c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801b168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b16a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b16e:	8a9b      	ldrh	r3, [r3, #20]
 801b170:	8a3a      	ldrh	r2, [r7, #16]
 801b172:	429a      	cmp	r2, r3
 801b174:	d118      	bne.n	801b1a8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b178:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d005      	beq.n	801b18a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b180:	685a      	ldr	r2, [r3, #4]
 801b182:	4b43      	ldr	r3, [pc, #268]	; (801b290 <udp_input+0x218>)
 801b184:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b186:	429a      	cmp	r2, r3
 801b188:	d10e      	bne.n	801b1a8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b18a:	6a3b      	ldr	r3, [r7, #32]
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	d014      	beq.n	801b1ba <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b192:	68da      	ldr	r2, [r3, #12]
 801b194:	6a3b      	ldr	r3, [r7, #32]
 801b196:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b198:	4b3e      	ldr	r3, [pc, #248]	; (801b294 <udp_input+0x21c>)
 801b19a:	681a      	ldr	r2, [r3, #0]
 801b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b19e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b1a0:	4a3c      	ldr	r2, [pc, #240]	; (801b294 <udp_input+0x21c>)
 801b1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1a4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b1a6:	e008      	b.n	801b1ba <udp_input+0x142>
      }
    }

    prev = pcb;
 801b1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1aa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1ae:	68db      	ldr	r3, [r3, #12]
 801b1b0:	627b      	str	r3, [r7, #36]	; 0x24
 801b1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	d1a7      	bne.n	801b108 <udp_input+0x90>
 801b1b8:	e000      	b.n	801b1bc <udp_input+0x144>
        break;
 801b1ba:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d101      	bne.n	801b1c6 <udp_input+0x14e>
    pcb = uncon_pcb;
 801b1c2:	69fb      	ldr	r3, [r7, #28]
 801b1c4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801b1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d002      	beq.n	801b1d2 <udp_input+0x15a>
    for_us = 1;
 801b1cc:	2301      	movs	r3, #1
 801b1ce:	76fb      	strb	r3, [r7, #27]
 801b1d0:	e00a      	b.n	801b1e8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b1d2:	683b      	ldr	r3, [r7, #0]
 801b1d4:	3304      	adds	r3, #4
 801b1d6:	681a      	ldr	r2, [r3, #0]
 801b1d8:	4b2d      	ldr	r3, [pc, #180]	; (801b290 <udp_input+0x218>)
 801b1da:	695b      	ldr	r3, [r3, #20]
 801b1dc:	429a      	cmp	r2, r3
 801b1de:	bf0c      	ite	eq
 801b1e0:	2301      	moveq	r3, #1
 801b1e2:	2300      	movne	r3, #0
 801b1e4:	b2db      	uxtb	r3, r3
 801b1e6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b1e8:	7efb      	ldrb	r3, [r7, #27]
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	d041      	beq.n	801b272 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b1ee:	2108      	movs	r1, #8
 801b1f0:	6878      	ldr	r0, [r7, #4]
 801b1f2:	f7f9 f93d 	bl	8014470 <pbuf_remove_header>
 801b1f6:	4603      	mov	r3, r0
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d00a      	beq.n	801b212 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b1fc:	4b20      	ldr	r3, [pc, #128]	; (801b280 <udp_input+0x208>)
 801b1fe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801b202:	4925      	ldr	r1, [pc, #148]	; (801b298 <udp_input+0x220>)
 801b204:	4820      	ldr	r0, [pc, #128]	; (801b288 <udp_input+0x210>)
 801b206:	f003 f81d 	bl	801e244 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801b20a:	6878      	ldr	r0, [r7, #4]
 801b20c:	f7f9 f9b6 	bl	801457c <pbuf_free>
      goto end;
 801b210:	e032      	b.n	801b278 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b214:	2b00      	cmp	r3, #0
 801b216:	d012      	beq.n	801b23e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b21a:	699b      	ldr	r3, [r3, #24]
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d00a      	beq.n	801b236 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b222:	699c      	ldr	r4, [r3, #24]
 801b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b226:	69d8      	ldr	r0, [r3, #28]
 801b228:	8a3b      	ldrh	r3, [r7, #16]
 801b22a:	9300      	str	r3, [sp, #0]
 801b22c:	4b1b      	ldr	r3, [pc, #108]	; (801b29c <udp_input+0x224>)
 801b22e:	687a      	ldr	r2, [r7, #4]
 801b230:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b232:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801b234:	e021      	b.n	801b27a <udp_input+0x202>
        pbuf_free(p);
 801b236:	6878      	ldr	r0, [r7, #4]
 801b238:	f7f9 f9a0 	bl	801457c <pbuf_free>
        goto end;
 801b23c:	e01c      	b.n	801b278 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b23e:	7cfb      	ldrb	r3, [r7, #19]
 801b240:	2b00      	cmp	r3, #0
 801b242:	d112      	bne.n	801b26a <udp_input+0x1f2>
 801b244:	4b12      	ldr	r3, [pc, #72]	; (801b290 <udp_input+0x218>)
 801b246:	695b      	ldr	r3, [r3, #20]
 801b248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b24c:	2be0      	cmp	r3, #224	; 0xe0
 801b24e:	d00c      	beq.n	801b26a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b250:	4b0f      	ldr	r3, [pc, #60]	; (801b290 <udp_input+0x218>)
 801b252:	899b      	ldrh	r3, [r3, #12]
 801b254:	3308      	adds	r3, #8
 801b256:	b29b      	uxth	r3, r3
 801b258:	b21b      	sxth	r3, r3
 801b25a:	4619      	mov	r1, r3
 801b25c:	6878      	ldr	r0, [r7, #4]
 801b25e:	f7f9 f97a 	bl	8014556 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801b262:	2103      	movs	r1, #3
 801b264:	6878      	ldr	r0, [r7, #4]
 801b266:	f001 f9c5 	bl	801c5f4 <icmp_dest_unreach>
      pbuf_free(p);
 801b26a:	6878      	ldr	r0, [r7, #4]
 801b26c:	f7f9 f986 	bl	801457c <pbuf_free>
  return;
 801b270:	e003      	b.n	801b27a <udp_input+0x202>
    pbuf_free(p);
 801b272:	6878      	ldr	r0, [r7, #4]
 801b274:	f7f9 f982 	bl	801457c <pbuf_free>
  return;
 801b278:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b27a:	372c      	adds	r7, #44	; 0x2c
 801b27c:	46bd      	mov	sp, r7
 801b27e:	bd90      	pop	{r4, r7, pc}
 801b280:	0802208c 	.word	0x0802208c
 801b284:	08022130 	.word	0x08022130
 801b288:	080220e0 	.word	0x080220e0
 801b28c:	08022148 	.word	0x08022148
 801b290:	24015f3c 	.word	0x24015f3c
 801b294:	2405ea08 	.word	0x2405ea08
 801b298:	08022164 	.word	0x08022164
 801b29c:	24015f4c 	.word	0x24015f4c

0801b2a0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b2a0:	b580      	push	{r7, lr}
 801b2a2:	b086      	sub	sp, #24
 801b2a4:	af00      	add	r7, sp, #0
 801b2a6:	60f8      	str	r0, [r7, #12]
 801b2a8:	60b9      	str	r1, [r7, #8]
 801b2aa:	4613      	mov	r3, r2
 801b2ac:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b2ae:	68bb      	ldr	r3, [r7, #8]
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d101      	bne.n	801b2b8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801b2b4:	4b39      	ldr	r3, [pc, #228]	; (801b39c <udp_bind+0xfc>)
 801b2b6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b2b8:	68fb      	ldr	r3, [r7, #12]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d109      	bne.n	801b2d2 <udp_bind+0x32>
 801b2be:	4b38      	ldr	r3, [pc, #224]	; (801b3a0 <udp_bind+0x100>)
 801b2c0:	f240 32b7 	movw	r2, #951	; 0x3b7
 801b2c4:	4937      	ldr	r1, [pc, #220]	; (801b3a4 <udp_bind+0x104>)
 801b2c6:	4838      	ldr	r0, [pc, #224]	; (801b3a8 <udp_bind+0x108>)
 801b2c8:	f002 ffbc 	bl	801e244 <iprintf>
 801b2cc:	f06f 030f 	mvn.w	r3, #15
 801b2d0:	e060      	b.n	801b394 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801b2d2:	2300      	movs	r3, #0
 801b2d4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b2d6:	4b35      	ldr	r3, [pc, #212]	; (801b3ac <udp_bind+0x10c>)
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	617b      	str	r3, [r7, #20]
 801b2dc:	e009      	b.n	801b2f2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b2de:	68fa      	ldr	r2, [r7, #12]
 801b2e0:	697b      	ldr	r3, [r7, #20]
 801b2e2:	429a      	cmp	r2, r3
 801b2e4:	d102      	bne.n	801b2ec <udp_bind+0x4c>
      rebind = 1;
 801b2e6:	2301      	movs	r3, #1
 801b2e8:	74fb      	strb	r3, [r7, #19]
      break;
 801b2ea:	e005      	b.n	801b2f8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b2ec:	697b      	ldr	r3, [r7, #20]
 801b2ee:	68db      	ldr	r3, [r3, #12]
 801b2f0:	617b      	str	r3, [r7, #20]
 801b2f2:	697b      	ldr	r3, [r7, #20]
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d1f2      	bne.n	801b2de <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b2f8:	88fb      	ldrh	r3, [r7, #6]
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	d109      	bne.n	801b312 <udp_bind+0x72>
    port = udp_new_port();
 801b2fe:	f7ff fe1f 	bl	801af40 <udp_new_port>
 801b302:	4603      	mov	r3, r0
 801b304:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b306:	88fb      	ldrh	r3, [r7, #6]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d12c      	bne.n	801b366 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801b30c:	f06f 0307 	mvn.w	r3, #7
 801b310:	e040      	b.n	801b394 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b312:	4b26      	ldr	r3, [pc, #152]	; (801b3ac <udp_bind+0x10c>)
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	617b      	str	r3, [r7, #20]
 801b318:	e022      	b.n	801b360 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801b31a:	68fa      	ldr	r2, [r7, #12]
 801b31c:	697b      	ldr	r3, [r7, #20]
 801b31e:	429a      	cmp	r2, r3
 801b320:	d01b      	beq.n	801b35a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b322:	697b      	ldr	r3, [r7, #20]
 801b324:	8a5b      	ldrh	r3, [r3, #18]
 801b326:	88fa      	ldrh	r2, [r7, #6]
 801b328:	429a      	cmp	r2, r3
 801b32a:	d116      	bne.n	801b35a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b32c:	697b      	ldr	r3, [r7, #20]
 801b32e:	681a      	ldr	r2, [r3, #0]
 801b330:	68bb      	ldr	r3, [r7, #8]
 801b332:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801b334:	429a      	cmp	r2, r3
 801b336:	d00d      	beq.n	801b354 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b338:	68bb      	ldr	r3, [r7, #8]
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	d00a      	beq.n	801b354 <udp_bind+0xb4>
 801b33e:	68bb      	ldr	r3, [r7, #8]
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d006      	beq.n	801b354 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b346:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b348:	2b00      	cmp	r3, #0
 801b34a:	d003      	beq.n	801b354 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b34c:	697b      	ldr	r3, [r7, #20]
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	2b00      	cmp	r3, #0
 801b352:	d102      	bne.n	801b35a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801b354:	f06f 0307 	mvn.w	r3, #7
 801b358:	e01c      	b.n	801b394 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b35a:	697b      	ldr	r3, [r7, #20]
 801b35c:	68db      	ldr	r3, [r3, #12]
 801b35e:	617b      	str	r3, [r7, #20]
 801b360:	697b      	ldr	r3, [r7, #20]
 801b362:	2b00      	cmp	r3, #0
 801b364:	d1d9      	bne.n	801b31a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b366:	68bb      	ldr	r3, [r7, #8]
 801b368:	2b00      	cmp	r3, #0
 801b36a:	d002      	beq.n	801b372 <udp_bind+0xd2>
 801b36c:	68bb      	ldr	r3, [r7, #8]
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	e000      	b.n	801b374 <udp_bind+0xd4>
 801b372:	2300      	movs	r3, #0
 801b374:	68fa      	ldr	r2, [r7, #12]
 801b376:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801b378:	68fb      	ldr	r3, [r7, #12]
 801b37a:	88fa      	ldrh	r2, [r7, #6]
 801b37c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801b37e:	7cfb      	ldrb	r3, [r7, #19]
 801b380:	2b00      	cmp	r3, #0
 801b382:	d106      	bne.n	801b392 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801b384:	4b09      	ldr	r3, [pc, #36]	; (801b3ac <udp_bind+0x10c>)
 801b386:	681a      	ldr	r2, [r3, #0]
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801b38c:	4a07      	ldr	r2, [pc, #28]	; (801b3ac <udp_bind+0x10c>)
 801b38e:	68fb      	ldr	r3, [r7, #12]
 801b390:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801b392:	2300      	movs	r3, #0
}
 801b394:	4618      	mov	r0, r3
 801b396:	3718      	adds	r7, #24
 801b398:	46bd      	mov	sp, r7
 801b39a:	bd80      	pop	{r7, pc}
 801b39c:	08022c78 	.word	0x08022c78
 801b3a0:	0802208c 	.word	0x0802208c
 801b3a4:	08022354 	.word	0x08022354
 801b3a8:	080220e0 	.word	0x080220e0
 801b3ac:	2405ea08 	.word	0x2405ea08

0801b3b0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801b3b0:	b580      	push	{r7, lr}
 801b3b2:	b084      	sub	sp, #16
 801b3b4:	af00      	add	r7, sp, #0
 801b3b6:	60f8      	str	r0, [r7, #12]
 801b3b8:	60b9      	str	r1, [r7, #8]
 801b3ba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801b3bc:	68fb      	ldr	r3, [r7, #12]
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d107      	bne.n	801b3d2 <udp_recv+0x22>
 801b3c2:	4b08      	ldr	r3, [pc, #32]	; (801b3e4 <udp_recv+0x34>)
 801b3c4:	f240 428a 	movw	r2, #1162	; 0x48a
 801b3c8:	4907      	ldr	r1, [pc, #28]	; (801b3e8 <udp_recv+0x38>)
 801b3ca:	4808      	ldr	r0, [pc, #32]	; (801b3ec <udp_recv+0x3c>)
 801b3cc:	f002 ff3a 	bl	801e244 <iprintf>
 801b3d0:	e005      	b.n	801b3de <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801b3d2:	68fb      	ldr	r3, [r7, #12]
 801b3d4:	68ba      	ldr	r2, [r7, #8]
 801b3d6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801b3d8:	68fb      	ldr	r3, [r7, #12]
 801b3da:	687a      	ldr	r2, [r7, #4]
 801b3dc:	61da      	str	r2, [r3, #28]
}
 801b3de:	3710      	adds	r7, #16
 801b3e0:	46bd      	mov	sp, r7
 801b3e2:	bd80      	pop	{r7, pc}
 801b3e4:	0802208c 	.word	0x0802208c
 801b3e8:	080223c0 	.word	0x080223c0
 801b3ec:	080220e0 	.word	0x080220e0

0801b3f0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801b3f0:	b580      	push	{r7, lr}
 801b3f2:	b084      	sub	sp, #16
 801b3f4:	af00      	add	r7, sp, #0
 801b3f6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d107      	bne.n	801b40e <udp_remove+0x1e>
 801b3fe:	4b19      	ldr	r3, [pc, #100]	; (801b464 <udp_remove+0x74>)
 801b400:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801b404:	4918      	ldr	r1, [pc, #96]	; (801b468 <udp_remove+0x78>)
 801b406:	4819      	ldr	r0, [pc, #100]	; (801b46c <udp_remove+0x7c>)
 801b408:	f002 ff1c 	bl	801e244 <iprintf>
 801b40c:	e026      	b.n	801b45c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801b40e:	4b18      	ldr	r3, [pc, #96]	; (801b470 <udp_remove+0x80>)
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	687a      	ldr	r2, [r7, #4]
 801b414:	429a      	cmp	r2, r3
 801b416:	d105      	bne.n	801b424 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801b418:	4b15      	ldr	r3, [pc, #84]	; (801b470 <udp_remove+0x80>)
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	68db      	ldr	r3, [r3, #12]
 801b41e:	4a14      	ldr	r2, [pc, #80]	; (801b470 <udp_remove+0x80>)
 801b420:	6013      	str	r3, [r2, #0]
 801b422:	e017      	b.n	801b454 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b424:	4b12      	ldr	r3, [pc, #72]	; (801b470 <udp_remove+0x80>)
 801b426:	681b      	ldr	r3, [r3, #0]
 801b428:	60fb      	str	r3, [r7, #12]
 801b42a:	e010      	b.n	801b44e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801b42c:	68fb      	ldr	r3, [r7, #12]
 801b42e:	68db      	ldr	r3, [r3, #12]
 801b430:	2b00      	cmp	r3, #0
 801b432:	d009      	beq.n	801b448 <udp_remove+0x58>
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	68db      	ldr	r3, [r3, #12]
 801b438:	687a      	ldr	r2, [r7, #4]
 801b43a:	429a      	cmp	r2, r3
 801b43c:	d104      	bne.n	801b448 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	68da      	ldr	r2, [r3, #12]
 801b442:	68fb      	ldr	r3, [r7, #12]
 801b444:	60da      	str	r2, [r3, #12]
        break;
 801b446:	e005      	b.n	801b454 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	68db      	ldr	r3, [r3, #12]
 801b44c:	60fb      	str	r3, [r7, #12]
 801b44e:	68fb      	ldr	r3, [r7, #12]
 801b450:	2b00      	cmp	r3, #0
 801b452:	d1eb      	bne.n	801b42c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801b454:	6879      	ldr	r1, [r7, #4]
 801b456:	2000      	movs	r0, #0
 801b458:	f7f8 f9e8 	bl	801382c <memp_free>
}
 801b45c:	3710      	adds	r7, #16
 801b45e:	46bd      	mov	sp, r7
 801b460:	bd80      	pop	{r7, pc}
 801b462:	bf00      	nop
 801b464:	0802208c 	.word	0x0802208c
 801b468:	080223d8 	.word	0x080223d8
 801b46c:	080220e0 	.word	0x080220e0
 801b470:	2405ea08 	.word	0x2405ea08

0801b474 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801b474:	b580      	push	{r7, lr}
 801b476:	b082      	sub	sp, #8
 801b478:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801b47a:	2000      	movs	r0, #0
 801b47c:	f7f8 f960 	bl	8013740 <memp_malloc>
 801b480:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	2b00      	cmp	r3, #0
 801b486:	d007      	beq.n	801b498 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801b488:	2220      	movs	r2, #32
 801b48a:	2100      	movs	r1, #0
 801b48c:	6878      	ldr	r0, [r7, #4]
 801b48e:	f002 fe3c 	bl	801e10a <memset>
    pcb->ttl = UDP_TTL;
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	22ff      	movs	r2, #255	; 0xff
 801b496:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801b498:	687b      	ldr	r3, [r7, #4]
}
 801b49a:	4618      	mov	r0, r3
 801b49c:	3708      	adds	r7, #8
 801b49e:	46bd      	mov	sp, r7
 801b4a0:	bd80      	pop	{r7, pc}

0801b4a2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801b4a2:	b580      	push	{r7, lr}
 801b4a4:	b084      	sub	sp, #16
 801b4a6:	af00      	add	r7, sp, #0
 801b4a8:	4603      	mov	r3, r0
 801b4aa:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801b4ac:	f7ff ffe2 	bl	801b474 <udp_new>
 801b4b0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801b4b2:	68fb      	ldr	r3, [r7, #12]
}
 801b4b4:	4618      	mov	r0, r3
 801b4b6:	3710      	adds	r7, #16
 801b4b8:	46bd      	mov	sp, r7
 801b4ba:	bd80      	pop	{r7, pc}

0801b4bc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b4bc:	b480      	push	{r7}
 801b4be:	b085      	sub	sp, #20
 801b4c0:	af00      	add	r7, sp, #0
 801b4c2:	6078      	str	r0, [r7, #4]
 801b4c4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d01e      	beq.n	801b50a <udp_netif_ip_addr_changed+0x4e>
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d01a      	beq.n	801b50a <udp_netif_ip_addr_changed+0x4e>
 801b4d4:	683b      	ldr	r3, [r7, #0]
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d017      	beq.n	801b50a <udp_netif_ip_addr_changed+0x4e>
 801b4da:	683b      	ldr	r3, [r7, #0]
 801b4dc:	681b      	ldr	r3, [r3, #0]
 801b4de:	2b00      	cmp	r3, #0
 801b4e0:	d013      	beq.n	801b50a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b4e2:	4b0d      	ldr	r3, [pc, #52]	; (801b518 <udp_netif_ip_addr_changed+0x5c>)
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	60fb      	str	r3, [r7, #12]
 801b4e8:	e00c      	b.n	801b504 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801b4ea:	68fb      	ldr	r3, [r7, #12]
 801b4ec:	681a      	ldr	r2, [r3, #0]
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	429a      	cmp	r2, r3
 801b4f4:	d103      	bne.n	801b4fe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801b4f6:	683b      	ldr	r3, [r7, #0]
 801b4f8:	681a      	ldr	r2, [r3, #0]
 801b4fa:	68fb      	ldr	r3, [r7, #12]
 801b4fc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b4fe:	68fb      	ldr	r3, [r7, #12]
 801b500:	68db      	ldr	r3, [r3, #12]
 801b502:	60fb      	str	r3, [r7, #12]
 801b504:	68fb      	ldr	r3, [r7, #12]
 801b506:	2b00      	cmp	r3, #0
 801b508:	d1ef      	bne.n	801b4ea <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801b50a:	bf00      	nop
 801b50c:	3714      	adds	r7, #20
 801b50e:	46bd      	mov	sp, r7
 801b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b514:	4770      	bx	lr
 801b516:	bf00      	nop
 801b518:	2405ea08 	.word	0x2405ea08

0801b51c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801b51c:	b580      	push	{r7, lr}
 801b51e:	b082      	sub	sp, #8
 801b520:	af00      	add	r7, sp, #0
 801b522:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801b524:	4915      	ldr	r1, [pc, #84]	; (801b57c <etharp_free_entry+0x60>)
 801b526:	687a      	ldr	r2, [r7, #4]
 801b528:	4613      	mov	r3, r2
 801b52a:	005b      	lsls	r3, r3, #1
 801b52c:	4413      	add	r3, r2
 801b52e:	00db      	lsls	r3, r3, #3
 801b530:	440b      	add	r3, r1
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	2b00      	cmp	r3, #0
 801b536:	d013      	beq.n	801b560 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801b538:	4910      	ldr	r1, [pc, #64]	; (801b57c <etharp_free_entry+0x60>)
 801b53a:	687a      	ldr	r2, [r7, #4]
 801b53c:	4613      	mov	r3, r2
 801b53e:	005b      	lsls	r3, r3, #1
 801b540:	4413      	add	r3, r2
 801b542:	00db      	lsls	r3, r3, #3
 801b544:	440b      	add	r3, r1
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	4618      	mov	r0, r3
 801b54a:	f7f9 f817 	bl	801457c <pbuf_free>
    arp_table[i].q = NULL;
 801b54e:	490b      	ldr	r1, [pc, #44]	; (801b57c <etharp_free_entry+0x60>)
 801b550:	687a      	ldr	r2, [r7, #4]
 801b552:	4613      	mov	r3, r2
 801b554:	005b      	lsls	r3, r3, #1
 801b556:	4413      	add	r3, r2
 801b558:	00db      	lsls	r3, r3, #3
 801b55a:	440b      	add	r3, r1
 801b55c:	2200      	movs	r2, #0
 801b55e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801b560:	4906      	ldr	r1, [pc, #24]	; (801b57c <etharp_free_entry+0x60>)
 801b562:	687a      	ldr	r2, [r7, #4]
 801b564:	4613      	mov	r3, r2
 801b566:	005b      	lsls	r3, r3, #1
 801b568:	4413      	add	r3, r2
 801b56a:	00db      	lsls	r3, r3, #3
 801b56c:	440b      	add	r3, r1
 801b56e:	3314      	adds	r3, #20
 801b570:	2200      	movs	r2, #0
 801b572:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801b574:	bf00      	nop
 801b576:	3708      	adds	r7, #8
 801b578:	46bd      	mov	sp, r7
 801b57a:	bd80      	pop	{r7, pc}
 801b57c:	2405ea0c 	.word	0x2405ea0c

0801b580 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801b580:	b580      	push	{r7, lr}
 801b582:	b082      	sub	sp, #8
 801b584:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b586:	2300      	movs	r3, #0
 801b588:	607b      	str	r3, [r7, #4]
 801b58a:	e096      	b.n	801b6ba <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801b58c:	494f      	ldr	r1, [pc, #316]	; (801b6cc <etharp_tmr+0x14c>)
 801b58e:	687a      	ldr	r2, [r7, #4]
 801b590:	4613      	mov	r3, r2
 801b592:	005b      	lsls	r3, r3, #1
 801b594:	4413      	add	r3, r2
 801b596:	00db      	lsls	r3, r3, #3
 801b598:	440b      	add	r3, r1
 801b59a:	3314      	adds	r3, #20
 801b59c:	781b      	ldrb	r3, [r3, #0]
 801b59e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801b5a0:	78fb      	ldrb	r3, [r7, #3]
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	f000 8086 	beq.w	801b6b4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801b5a8:	4948      	ldr	r1, [pc, #288]	; (801b6cc <etharp_tmr+0x14c>)
 801b5aa:	687a      	ldr	r2, [r7, #4]
 801b5ac:	4613      	mov	r3, r2
 801b5ae:	005b      	lsls	r3, r3, #1
 801b5b0:	4413      	add	r3, r2
 801b5b2:	00db      	lsls	r3, r3, #3
 801b5b4:	440b      	add	r3, r1
 801b5b6:	3312      	adds	r3, #18
 801b5b8:	881b      	ldrh	r3, [r3, #0]
 801b5ba:	3301      	adds	r3, #1
 801b5bc:	b298      	uxth	r0, r3
 801b5be:	4943      	ldr	r1, [pc, #268]	; (801b6cc <etharp_tmr+0x14c>)
 801b5c0:	687a      	ldr	r2, [r7, #4]
 801b5c2:	4613      	mov	r3, r2
 801b5c4:	005b      	lsls	r3, r3, #1
 801b5c6:	4413      	add	r3, r2
 801b5c8:	00db      	lsls	r3, r3, #3
 801b5ca:	440b      	add	r3, r1
 801b5cc:	3312      	adds	r3, #18
 801b5ce:	4602      	mov	r2, r0
 801b5d0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b5d2:	493e      	ldr	r1, [pc, #248]	; (801b6cc <etharp_tmr+0x14c>)
 801b5d4:	687a      	ldr	r2, [r7, #4]
 801b5d6:	4613      	mov	r3, r2
 801b5d8:	005b      	lsls	r3, r3, #1
 801b5da:	4413      	add	r3, r2
 801b5dc:	00db      	lsls	r3, r3, #3
 801b5de:	440b      	add	r3, r1
 801b5e0:	3312      	adds	r3, #18
 801b5e2:	881b      	ldrh	r3, [r3, #0]
 801b5e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801b5e8:	d215      	bcs.n	801b616 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b5ea:	4938      	ldr	r1, [pc, #224]	; (801b6cc <etharp_tmr+0x14c>)
 801b5ec:	687a      	ldr	r2, [r7, #4]
 801b5ee:	4613      	mov	r3, r2
 801b5f0:	005b      	lsls	r3, r3, #1
 801b5f2:	4413      	add	r3, r2
 801b5f4:	00db      	lsls	r3, r3, #3
 801b5f6:	440b      	add	r3, r1
 801b5f8:	3314      	adds	r3, #20
 801b5fa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b5fc:	2b01      	cmp	r3, #1
 801b5fe:	d10e      	bne.n	801b61e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801b600:	4932      	ldr	r1, [pc, #200]	; (801b6cc <etharp_tmr+0x14c>)
 801b602:	687a      	ldr	r2, [r7, #4]
 801b604:	4613      	mov	r3, r2
 801b606:	005b      	lsls	r3, r3, #1
 801b608:	4413      	add	r3, r2
 801b60a:	00db      	lsls	r3, r3, #3
 801b60c:	440b      	add	r3, r1
 801b60e:	3312      	adds	r3, #18
 801b610:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b612:	2b04      	cmp	r3, #4
 801b614:	d903      	bls.n	801b61e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801b616:	6878      	ldr	r0, [r7, #4]
 801b618:	f7ff ff80 	bl	801b51c <etharp_free_entry>
 801b61c:	e04a      	b.n	801b6b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801b61e:	492b      	ldr	r1, [pc, #172]	; (801b6cc <etharp_tmr+0x14c>)
 801b620:	687a      	ldr	r2, [r7, #4]
 801b622:	4613      	mov	r3, r2
 801b624:	005b      	lsls	r3, r3, #1
 801b626:	4413      	add	r3, r2
 801b628:	00db      	lsls	r3, r3, #3
 801b62a:	440b      	add	r3, r1
 801b62c:	3314      	adds	r3, #20
 801b62e:	781b      	ldrb	r3, [r3, #0]
 801b630:	2b03      	cmp	r3, #3
 801b632:	d10a      	bne.n	801b64a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801b634:	4925      	ldr	r1, [pc, #148]	; (801b6cc <etharp_tmr+0x14c>)
 801b636:	687a      	ldr	r2, [r7, #4]
 801b638:	4613      	mov	r3, r2
 801b63a:	005b      	lsls	r3, r3, #1
 801b63c:	4413      	add	r3, r2
 801b63e:	00db      	lsls	r3, r3, #3
 801b640:	440b      	add	r3, r1
 801b642:	3314      	adds	r3, #20
 801b644:	2204      	movs	r2, #4
 801b646:	701a      	strb	r2, [r3, #0]
 801b648:	e034      	b.n	801b6b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801b64a:	4920      	ldr	r1, [pc, #128]	; (801b6cc <etharp_tmr+0x14c>)
 801b64c:	687a      	ldr	r2, [r7, #4]
 801b64e:	4613      	mov	r3, r2
 801b650:	005b      	lsls	r3, r3, #1
 801b652:	4413      	add	r3, r2
 801b654:	00db      	lsls	r3, r3, #3
 801b656:	440b      	add	r3, r1
 801b658:	3314      	adds	r3, #20
 801b65a:	781b      	ldrb	r3, [r3, #0]
 801b65c:	2b04      	cmp	r3, #4
 801b65e:	d10a      	bne.n	801b676 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801b660:	491a      	ldr	r1, [pc, #104]	; (801b6cc <etharp_tmr+0x14c>)
 801b662:	687a      	ldr	r2, [r7, #4]
 801b664:	4613      	mov	r3, r2
 801b666:	005b      	lsls	r3, r3, #1
 801b668:	4413      	add	r3, r2
 801b66a:	00db      	lsls	r3, r3, #3
 801b66c:	440b      	add	r3, r1
 801b66e:	3314      	adds	r3, #20
 801b670:	2202      	movs	r2, #2
 801b672:	701a      	strb	r2, [r3, #0]
 801b674:	e01e      	b.n	801b6b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b676:	4915      	ldr	r1, [pc, #84]	; (801b6cc <etharp_tmr+0x14c>)
 801b678:	687a      	ldr	r2, [r7, #4]
 801b67a:	4613      	mov	r3, r2
 801b67c:	005b      	lsls	r3, r3, #1
 801b67e:	4413      	add	r3, r2
 801b680:	00db      	lsls	r3, r3, #3
 801b682:	440b      	add	r3, r1
 801b684:	3314      	adds	r3, #20
 801b686:	781b      	ldrb	r3, [r3, #0]
 801b688:	2b01      	cmp	r3, #1
 801b68a:	d113      	bne.n	801b6b4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801b68c:	490f      	ldr	r1, [pc, #60]	; (801b6cc <etharp_tmr+0x14c>)
 801b68e:	687a      	ldr	r2, [r7, #4]
 801b690:	4613      	mov	r3, r2
 801b692:	005b      	lsls	r3, r3, #1
 801b694:	4413      	add	r3, r2
 801b696:	00db      	lsls	r3, r3, #3
 801b698:	440b      	add	r3, r1
 801b69a:	3308      	adds	r3, #8
 801b69c:	6818      	ldr	r0, [r3, #0]
 801b69e:	687a      	ldr	r2, [r7, #4]
 801b6a0:	4613      	mov	r3, r2
 801b6a2:	005b      	lsls	r3, r3, #1
 801b6a4:	4413      	add	r3, r2
 801b6a6:	00db      	lsls	r3, r3, #3
 801b6a8:	4a08      	ldr	r2, [pc, #32]	; (801b6cc <etharp_tmr+0x14c>)
 801b6aa:	4413      	add	r3, r2
 801b6ac:	3304      	adds	r3, #4
 801b6ae:	4619      	mov	r1, r3
 801b6b0:	f000 fe6e 	bl	801c390 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	3301      	adds	r3, #1
 801b6b8:	607b      	str	r3, [r7, #4]
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	2b09      	cmp	r3, #9
 801b6be:	f77f af65 	ble.w	801b58c <etharp_tmr+0xc>
      }
    }
  }
}
 801b6c2:	bf00      	nop
 801b6c4:	bf00      	nop
 801b6c6:	3708      	adds	r7, #8
 801b6c8:	46bd      	mov	sp, r7
 801b6ca:	bd80      	pop	{r7, pc}
 801b6cc:	2405ea0c 	.word	0x2405ea0c

0801b6d0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801b6d0:	b580      	push	{r7, lr}
 801b6d2:	b08a      	sub	sp, #40	; 0x28
 801b6d4:	af00      	add	r7, sp, #0
 801b6d6:	60f8      	str	r0, [r7, #12]
 801b6d8:	460b      	mov	r3, r1
 801b6da:	607a      	str	r2, [r7, #4]
 801b6dc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801b6de:	230a      	movs	r3, #10
 801b6e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b6e2:	230a      	movs	r3, #10
 801b6e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801b6e6:	230a      	movs	r3, #10
 801b6e8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801b6ea:	2300      	movs	r3, #0
 801b6ec:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801b6ee:	230a      	movs	r3, #10
 801b6f0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801b6f2:	2300      	movs	r3, #0
 801b6f4:	83bb      	strh	r3, [r7, #28]
 801b6f6:	2300      	movs	r3, #0
 801b6f8:	837b      	strh	r3, [r7, #26]
 801b6fa:	2300      	movs	r3, #0
 801b6fc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b6fe:	2300      	movs	r3, #0
 801b700:	843b      	strh	r3, [r7, #32]
 801b702:	e0ae      	b.n	801b862 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801b704:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b708:	49a6      	ldr	r1, [pc, #664]	; (801b9a4 <etharp_find_entry+0x2d4>)
 801b70a:	4613      	mov	r3, r2
 801b70c:	005b      	lsls	r3, r3, #1
 801b70e:	4413      	add	r3, r2
 801b710:	00db      	lsls	r3, r3, #3
 801b712:	440b      	add	r3, r1
 801b714:	3314      	adds	r3, #20
 801b716:	781b      	ldrb	r3, [r3, #0]
 801b718:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801b71a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b71e:	2b0a      	cmp	r3, #10
 801b720:	d105      	bne.n	801b72e <etharp_find_entry+0x5e>
 801b722:	7dfb      	ldrb	r3, [r7, #23]
 801b724:	2b00      	cmp	r3, #0
 801b726:	d102      	bne.n	801b72e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801b728:	8c3b      	ldrh	r3, [r7, #32]
 801b72a:	847b      	strh	r3, [r7, #34]	; 0x22
 801b72c:	e095      	b.n	801b85a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801b72e:	7dfb      	ldrb	r3, [r7, #23]
 801b730:	2b00      	cmp	r3, #0
 801b732:	f000 8092 	beq.w	801b85a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801b736:	7dfb      	ldrb	r3, [r7, #23]
 801b738:	2b01      	cmp	r3, #1
 801b73a:	d009      	beq.n	801b750 <etharp_find_entry+0x80>
 801b73c:	7dfb      	ldrb	r3, [r7, #23]
 801b73e:	2b01      	cmp	r3, #1
 801b740:	d806      	bhi.n	801b750 <etharp_find_entry+0x80>
 801b742:	4b99      	ldr	r3, [pc, #612]	; (801b9a8 <etharp_find_entry+0x2d8>)
 801b744:	f240 1223 	movw	r2, #291	; 0x123
 801b748:	4998      	ldr	r1, [pc, #608]	; (801b9ac <etharp_find_entry+0x2dc>)
 801b74a:	4899      	ldr	r0, [pc, #612]	; (801b9b0 <etharp_find_entry+0x2e0>)
 801b74c:	f002 fd7a 	bl	801e244 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801b750:	68fb      	ldr	r3, [r7, #12]
 801b752:	2b00      	cmp	r3, #0
 801b754:	d020      	beq.n	801b798 <etharp_find_entry+0xc8>
 801b756:	68fb      	ldr	r3, [r7, #12]
 801b758:	6819      	ldr	r1, [r3, #0]
 801b75a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b75e:	4891      	ldr	r0, [pc, #580]	; (801b9a4 <etharp_find_entry+0x2d4>)
 801b760:	4613      	mov	r3, r2
 801b762:	005b      	lsls	r3, r3, #1
 801b764:	4413      	add	r3, r2
 801b766:	00db      	lsls	r3, r3, #3
 801b768:	4403      	add	r3, r0
 801b76a:	3304      	adds	r3, #4
 801b76c:	681b      	ldr	r3, [r3, #0]
 801b76e:	4299      	cmp	r1, r3
 801b770:	d112      	bne.n	801b798 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	2b00      	cmp	r3, #0
 801b776:	d00c      	beq.n	801b792 <etharp_find_entry+0xc2>
 801b778:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b77c:	4989      	ldr	r1, [pc, #548]	; (801b9a4 <etharp_find_entry+0x2d4>)
 801b77e:	4613      	mov	r3, r2
 801b780:	005b      	lsls	r3, r3, #1
 801b782:	4413      	add	r3, r2
 801b784:	00db      	lsls	r3, r3, #3
 801b786:	440b      	add	r3, r1
 801b788:	3308      	adds	r3, #8
 801b78a:	681b      	ldr	r3, [r3, #0]
 801b78c:	687a      	ldr	r2, [r7, #4]
 801b78e:	429a      	cmp	r2, r3
 801b790:	d102      	bne.n	801b798 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801b792:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b796:	e100      	b.n	801b99a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801b798:	7dfb      	ldrb	r3, [r7, #23]
 801b79a:	2b01      	cmp	r3, #1
 801b79c:	d140      	bne.n	801b820 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801b79e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b7a2:	4980      	ldr	r1, [pc, #512]	; (801b9a4 <etharp_find_entry+0x2d4>)
 801b7a4:	4613      	mov	r3, r2
 801b7a6:	005b      	lsls	r3, r3, #1
 801b7a8:	4413      	add	r3, r2
 801b7aa:	00db      	lsls	r3, r3, #3
 801b7ac:	440b      	add	r3, r1
 801b7ae:	681b      	ldr	r3, [r3, #0]
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	d01a      	beq.n	801b7ea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801b7b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b7b8:	497a      	ldr	r1, [pc, #488]	; (801b9a4 <etharp_find_entry+0x2d4>)
 801b7ba:	4613      	mov	r3, r2
 801b7bc:	005b      	lsls	r3, r3, #1
 801b7be:	4413      	add	r3, r2
 801b7c0:	00db      	lsls	r3, r3, #3
 801b7c2:	440b      	add	r3, r1
 801b7c4:	3312      	adds	r3, #18
 801b7c6:	881b      	ldrh	r3, [r3, #0]
 801b7c8:	8bba      	ldrh	r2, [r7, #28]
 801b7ca:	429a      	cmp	r2, r3
 801b7cc:	d845      	bhi.n	801b85a <etharp_find_entry+0x18a>
            old_queue = i;
 801b7ce:	8c3b      	ldrh	r3, [r7, #32]
 801b7d0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801b7d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b7d6:	4973      	ldr	r1, [pc, #460]	; (801b9a4 <etharp_find_entry+0x2d4>)
 801b7d8:	4613      	mov	r3, r2
 801b7da:	005b      	lsls	r3, r3, #1
 801b7dc:	4413      	add	r3, r2
 801b7de:	00db      	lsls	r3, r3, #3
 801b7e0:	440b      	add	r3, r1
 801b7e2:	3312      	adds	r3, #18
 801b7e4:	881b      	ldrh	r3, [r3, #0]
 801b7e6:	83bb      	strh	r3, [r7, #28]
 801b7e8:	e037      	b.n	801b85a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801b7ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b7ee:	496d      	ldr	r1, [pc, #436]	; (801b9a4 <etharp_find_entry+0x2d4>)
 801b7f0:	4613      	mov	r3, r2
 801b7f2:	005b      	lsls	r3, r3, #1
 801b7f4:	4413      	add	r3, r2
 801b7f6:	00db      	lsls	r3, r3, #3
 801b7f8:	440b      	add	r3, r1
 801b7fa:	3312      	adds	r3, #18
 801b7fc:	881b      	ldrh	r3, [r3, #0]
 801b7fe:	8b7a      	ldrh	r2, [r7, #26]
 801b800:	429a      	cmp	r2, r3
 801b802:	d82a      	bhi.n	801b85a <etharp_find_entry+0x18a>
            old_pending = i;
 801b804:	8c3b      	ldrh	r3, [r7, #32]
 801b806:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801b808:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b80c:	4965      	ldr	r1, [pc, #404]	; (801b9a4 <etharp_find_entry+0x2d4>)
 801b80e:	4613      	mov	r3, r2
 801b810:	005b      	lsls	r3, r3, #1
 801b812:	4413      	add	r3, r2
 801b814:	00db      	lsls	r3, r3, #3
 801b816:	440b      	add	r3, r1
 801b818:	3312      	adds	r3, #18
 801b81a:	881b      	ldrh	r3, [r3, #0]
 801b81c:	837b      	strh	r3, [r7, #26]
 801b81e:	e01c      	b.n	801b85a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801b820:	7dfb      	ldrb	r3, [r7, #23]
 801b822:	2b01      	cmp	r3, #1
 801b824:	d919      	bls.n	801b85a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801b826:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b82a:	495e      	ldr	r1, [pc, #376]	; (801b9a4 <etharp_find_entry+0x2d4>)
 801b82c:	4613      	mov	r3, r2
 801b82e:	005b      	lsls	r3, r3, #1
 801b830:	4413      	add	r3, r2
 801b832:	00db      	lsls	r3, r3, #3
 801b834:	440b      	add	r3, r1
 801b836:	3312      	adds	r3, #18
 801b838:	881b      	ldrh	r3, [r3, #0]
 801b83a:	8b3a      	ldrh	r2, [r7, #24]
 801b83c:	429a      	cmp	r2, r3
 801b83e:	d80c      	bhi.n	801b85a <etharp_find_entry+0x18a>
            old_stable = i;
 801b840:	8c3b      	ldrh	r3, [r7, #32]
 801b842:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801b844:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b848:	4956      	ldr	r1, [pc, #344]	; (801b9a4 <etharp_find_entry+0x2d4>)
 801b84a:	4613      	mov	r3, r2
 801b84c:	005b      	lsls	r3, r3, #1
 801b84e:	4413      	add	r3, r2
 801b850:	00db      	lsls	r3, r3, #3
 801b852:	440b      	add	r3, r1
 801b854:	3312      	adds	r3, #18
 801b856:	881b      	ldrh	r3, [r3, #0]
 801b858:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b85a:	8c3b      	ldrh	r3, [r7, #32]
 801b85c:	3301      	adds	r3, #1
 801b85e:	b29b      	uxth	r3, r3
 801b860:	843b      	strh	r3, [r7, #32]
 801b862:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b866:	2b09      	cmp	r3, #9
 801b868:	f77f af4c 	ble.w	801b704 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801b86c:	7afb      	ldrb	r3, [r7, #11]
 801b86e:	f003 0302 	and.w	r3, r3, #2
 801b872:	2b00      	cmp	r3, #0
 801b874:	d108      	bne.n	801b888 <etharp_find_entry+0x1b8>
 801b876:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b87a:	2b0a      	cmp	r3, #10
 801b87c:	d107      	bne.n	801b88e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801b87e:	7afb      	ldrb	r3, [r7, #11]
 801b880:	f003 0301 	and.w	r3, r3, #1
 801b884:	2b00      	cmp	r3, #0
 801b886:	d102      	bne.n	801b88e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801b888:	f04f 33ff 	mov.w	r3, #4294967295
 801b88c:	e085      	b.n	801b99a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801b88e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b892:	2b09      	cmp	r3, #9
 801b894:	dc02      	bgt.n	801b89c <etharp_find_entry+0x1cc>
    i = empty;
 801b896:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b898:	843b      	strh	r3, [r7, #32]
 801b89a:	e039      	b.n	801b910 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801b89c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b8a0:	2b09      	cmp	r3, #9
 801b8a2:	dc14      	bgt.n	801b8ce <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801b8a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b8a6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801b8a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b8ac:	493d      	ldr	r1, [pc, #244]	; (801b9a4 <etharp_find_entry+0x2d4>)
 801b8ae:	4613      	mov	r3, r2
 801b8b0:	005b      	lsls	r3, r3, #1
 801b8b2:	4413      	add	r3, r2
 801b8b4:	00db      	lsls	r3, r3, #3
 801b8b6:	440b      	add	r3, r1
 801b8b8:	681b      	ldr	r3, [r3, #0]
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	d018      	beq.n	801b8f0 <etharp_find_entry+0x220>
 801b8be:	4b3a      	ldr	r3, [pc, #232]	; (801b9a8 <etharp_find_entry+0x2d8>)
 801b8c0:	f240 126d 	movw	r2, #365	; 0x16d
 801b8c4:	493b      	ldr	r1, [pc, #236]	; (801b9b4 <etharp_find_entry+0x2e4>)
 801b8c6:	483a      	ldr	r0, [pc, #232]	; (801b9b0 <etharp_find_entry+0x2e0>)
 801b8c8:	f002 fcbc 	bl	801e244 <iprintf>
 801b8cc:	e010      	b.n	801b8f0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801b8ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b8d2:	2b09      	cmp	r3, #9
 801b8d4:	dc02      	bgt.n	801b8dc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801b8d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b8d8:	843b      	strh	r3, [r7, #32]
 801b8da:	e009      	b.n	801b8f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801b8dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b8e0:	2b09      	cmp	r3, #9
 801b8e2:	dc02      	bgt.n	801b8ea <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801b8e4:	8bfb      	ldrh	r3, [r7, #30]
 801b8e6:	843b      	strh	r3, [r7, #32]
 801b8e8:	e002      	b.n	801b8f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801b8ea:	f04f 33ff 	mov.w	r3, #4294967295
 801b8ee:	e054      	b.n	801b99a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b8f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b8f4:	2b09      	cmp	r3, #9
 801b8f6:	dd06      	ble.n	801b906 <etharp_find_entry+0x236>
 801b8f8:	4b2b      	ldr	r3, [pc, #172]	; (801b9a8 <etharp_find_entry+0x2d8>)
 801b8fa:	f240 127f 	movw	r2, #383	; 0x17f
 801b8fe:	492e      	ldr	r1, [pc, #184]	; (801b9b8 <etharp_find_entry+0x2e8>)
 801b900:	482b      	ldr	r0, [pc, #172]	; (801b9b0 <etharp_find_entry+0x2e0>)
 801b902:	f002 fc9f 	bl	801e244 <iprintf>
    etharp_free_entry(i);
 801b906:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b90a:	4618      	mov	r0, r3
 801b90c:	f7ff fe06 	bl	801b51c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b910:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b914:	2b09      	cmp	r3, #9
 801b916:	dd06      	ble.n	801b926 <etharp_find_entry+0x256>
 801b918:	4b23      	ldr	r3, [pc, #140]	; (801b9a8 <etharp_find_entry+0x2d8>)
 801b91a:	f240 1283 	movw	r2, #387	; 0x183
 801b91e:	4926      	ldr	r1, [pc, #152]	; (801b9b8 <etharp_find_entry+0x2e8>)
 801b920:	4823      	ldr	r0, [pc, #140]	; (801b9b0 <etharp_find_entry+0x2e0>)
 801b922:	f002 fc8f 	bl	801e244 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801b926:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b92a:	491e      	ldr	r1, [pc, #120]	; (801b9a4 <etharp_find_entry+0x2d4>)
 801b92c:	4613      	mov	r3, r2
 801b92e:	005b      	lsls	r3, r3, #1
 801b930:	4413      	add	r3, r2
 801b932:	00db      	lsls	r3, r3, #3
 801b934:	440b      	add	r3, r1
 801b936:	3314      	adds	r3, #20
 801b938:	781b      	ldrb	r3, [r3, #0]
 801b93a:	2b00      	cmp	r3, #0
 801b93c:	d006      	beq.n	801b94c <etharp_find_entry+0x27c>
 801b93e:	4b1a      	ldr	r3, [pc, #104]	; (801b9a8 <etharp_find_entry+0x2d8>)
 801b940:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801b944:	491d      	ldr	r1, [pc, #116]	; (801b9bc <etharp_find_entry+0x2ec>)
 801b946:	481a      	ldr	r0, [pc, #104]	; (801b9b0 <etharp_find_entry+0x2e0>)
 801b948:	f002 fc7c 	bl	801e244 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801b94c:	68fb      	ldr	r3, [r7, #12]
 801b94e:	2b00      	cmp	r3, #0
 801b950:	d00b      	beq.n	801b96a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801b952:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b956:	68fb      	ldr	r3, [r7, #12]
 801b958:	6819      	ldr	r1, [r3, #0]
 801b95a:	4812      	ldr	r0, [pc, #72]	; (801b9a4 <etharp_find_entry+0x2d4>)
 801b95c:	4613      	mov	r3, r2
 801b95e:	005b      	lsls	r3, r3, #1
 801b960:	4413      	add	r3, r2
 801b962:	00db      	lsls	r3, r3, #3
 801b964:	4403      	add	r3, r0
 801b966:	3304      	adds	r3, #4
 801b968:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801b96a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b96e:	490d      	ldr	r1, [pc, #52]	; (801b9a4 <etharp_find_entry+0x2d4>)
 801b970:	4613      	mov	r3, r2
 801b972:	005b      	lsls	r3, r3, #1
 801b974:	4413      	add	r3, r2
 801b976:	00db      	lsls	r3, r3, #3
 801b978:	440b      	add	r3, r1
 801b97a:	3312      	adds	r3, #18
 801b97c:	2200      	movs	r2, #0
 801b97e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801b980:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b984:	4907      	ldr	r1, [pc, #28]	; (801b9a4 <etharp_find_entry+0x2d4>)
 801b986:	4613      	mov	r3, r2
 801b988:	005b      	lsls	r3, r3, #1
 801b98a:	4413      	add	r3, r2
 801b98c:	00db      	lsls	r3, r3, #3
 801b98e:	440b      	add	r3, r1
 801b990:	3308      	adds	r3, #8
 801b992:	687a      	ldr	r2, [r7, #4]
 801b994:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801b996:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801b99a:	4618      	mov	r0, r3
 801b99c:	3728      	adds	r7, #40	; 0x28
 801b99e:	46bd      	mov	sp, r7
 801b9a0:	bd80      	pop	{r7, pc}
 801b9a2:	bf00      	nop
 801b9a4:	2405ea0c 	.word	0x2405ea0c
 801b9a8:	080223f0 	.word	0x080223f0
 801b9ac:	08022428 	.word	0x08022428
 801b9b0:	08022468 	.word	0x08022468
 801b9b4:	08022490 	.word	0x08022490
 801b9b8:	080224a8 	.word	0x080224a8
 801b9bc:	080224bc 	.word	0x080224bc

0801b9c0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801b9c0:	b580      	push	{r7, lr}
 801b9c2:	b088      	sub	sp, #32
 801b9c4:	af02      	add	r7, sp, #8
 801b9c6:	60f8      	str	r0, [r7, #12]
 801b9c8:	60b9      	str	r1, [r7, #8]
 801b9ca:	607a      	str	r2, [r7, #4]
 801b9cc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801b9ce:	68fb      	ldr	r3, [r7, #12]
 801b9d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b9d4:	2b06      	cmp	r3, #6
 801b9d6:	d006      	beq.n	801b9e6 <etharp_update_arp_entry+0x26>
 801b9d8:	4b48      	ldr	r3, [pc, #288]	; (801bafc <etharp_update_arp_entry+0x13c>)
 801b9da:	f240 12a9 	movw	r2, #425	; 0x1a9
 801b9de:	4948      	ldr	r1, [pc, #288]	; (801bb00 <etharp_update_arp_entry+0x140>)
 801b9e0:	4848      	ldr	r0, [pc, #288]	; (801bb04 <etharp_update_arp_entry+0x144>)
 801b9e2:	f002 fc2f 	bl	801e244 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801b9e6:	68bb      	ldr	r3, [r7, #8]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d012      	beq.n	801ba12 <etharp_update_arp_entry+0x52>
 801b9ec:	68bb      	ldr	r3, [r7, #8]
 801b9ee:	681b      	ldr	r3, [r3, #0]
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	d00e      	beq.n	801ba12 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b9f4:	68bb      	ldr	r3, [r7, #8]
 801b9f6:	681b      	ldr	r3, [r3, #0]
 801b9f8:	68f9      	ldr	r1, [r7, #12]
 801b9fa:	4618      	mov	r0, r3
 801b9fc:	f001 f924 	bl	801cc48 <ip4_addr_isbroadcast_u32>
 801ba00:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d105      	bne.n	801ba12 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801ba06:	68bb      	ldr	r3, [r7, #8]
 801ba08:	681b      	ldr	r3, [r3, #0]
 801ba0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801ba0e:	2be0      	cmp	r3, #224	; 0xe0
 801ba10:	d102      	bne.n	801ba18 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ba12:	f06f 030f 	mvn.w	r3, #15
 801ba16:	e06c      	b.n	801baf2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801ba18:	78fb      	ldrb	r3, [r7, #3]
 801ba1a:	68fa      	ldr	r2, [r7, #12]
 801ba1c:	4619      	mov	r1, r3
 801ba1e:	68b8      	ldr	r0, [r7, #8]
 801ba20:	f7ff fe56 	bl	801b6d0 <etharp_find_entry>
 801ba24:	4603      	mov	r3, r0
 801ba26:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801ba28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	da02      	bge.n	801ba36 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801ba30:	8afb      	ldrh	r3, [r7, #22]
 801ba32:	b25b      	sxtb	r3, r3
 801ba34:	e05d      	b.n	801baf2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801ba36:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ba3a:	4933      	ldr	r1, [pc, #204]	; (801bb08 <etharp_update_arp_entry+0x148>)
 801ba3c:	4613      	mov	r3, r2
 801ba3e:	005b      	lsls	r3, r3, #1
 801ba40:	4413      	add	r3, r2
 801ba42:	00db      	lsls	r3, r3, #3
 801ba44:	440b      	add	r3, r1
 801ba46:	3314      	adds	r3, #20
 801ba48:	2202      	movs	r2, #2
 801ba4a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801ba4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ba50:	492d      	ldr	r1, [pc, #180]	; (801bb08 <etharp_update_arp_entry+0x148>)
 801ba52:	4613      	mov	r3, r2
 801ba54:	005b      	lsls	r3, r3, #1
 801ba56:	4413      	add	r3, r2
 801ba58:	00db      	lsls	r3, r3, #3
 801ba5a:	440b      	add	r3, r1
 801ba5c:	3308      	adds	r3, #8
 801ba5e:	68fa      	ldr	r2, [r7, #12]
 801ba60:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801ba62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ba66:	4613      	mov	r3, r2
 801ba68:	005b      	lsls	r3, r3, #1
 801ba6a:	4413      	add	r3, r2
 801ba6c:	00db      	lsls	r3, r3, #3
 801ba6e:	3308      	adds	r3, #8
 801ba70:	4a25      	ldr	r2, [pc, #148]	; (801bb08 <etharp_update_arp_entry+0x148>)
 801ba72:	4413      	add	r3, r2
 801ba74:	3304      	adds	r3, #4
 801ba76:	2206      	movs	r2, #6
 801ba78:	6879      	ldr	r1, [r7, #4]
 801ba7a:	4618      	mov	r0, r3
 801ba7c:	f002 fb1d 	bl	801e0ba <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801ba80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ba84:	4920      	ldr	r1, [pc, #128]	; (801bb08 <etharp_update_arp_entry+0x148>)
 801ba86:	4613      	mov	r3, r2
 801ba88:	005b      	lsls	r3, r3, #1
 801ba8a:	4413      	add	r3, r2
 801ba8c:	00db      	lsls	r3, r3, #3
 801ba8e:	440b      	add	r3, r1
 801ba90:	3312      	adds	r3, #18
 801ba92:	2200      	movs	r2, #0
 801ba94:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801ba96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ba9a:	491b      	ldr	r1, [pc, #108]	; (801bb08 <etharp_update_arp_entry+0x148>)
 801ba9c:	4613      	mov	r3, r2
 801ba9e:	005b      	lsls	r3, r3, #1
 801baa0:	4413      	add	r3, r2
 801baa2:	00db      	lsls	r3, r3, #3
 801baa4:	440b      	add	r3, r1
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d021      	beq.n	801baf0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801baac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bab0:	4915      	ldr	r1, [pc, #84]	; (801bb08 <etharp_update_arp_entry+0x148>)
 801bab2:	4613      	mov	r3, r2
 801bab4:	005b      	lsls	r3, r3, #1
 801bab6:	4413      	add	r3, r2
 801bab8:	00db      	lsls	r3, r3, #3
 801baba:	440b      	add	r3, r1
 801babc:	681b      	ldr	r3, [r3, #0]
 801babe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801bac0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bac4:	4910      	ldr	r1, [pc, #64]	; (801bb08 <etharp_update_arp_entry+0x148>)
 801bac6:	4613      	mov	r3, r2
 801bac8:	005b      	lsls	r3, r3, #1
 801baca:	4413      	add	r3, r2
 801bacc:	00db      	lsls	r3, r3, #3
 801bace:	440b      	add	r3, r1
 801bad0:	2200      	movs	r2, #0
 801bad2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801bad4:	68fb      	ldr	r3, [r7, #12]
 801bad6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801bada:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801bade:	9300      	str	r3, [sp, #0]
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	6939      	ldr	r1, [r7, #16]
 801bae4:	68f8      	ldr	r0, [r7, #12]
 801bae6:	f001 ffbd 	bl	801da64 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801baea:	6938      	ldr	r0, [r7, #16]
 801baec:	f7f8 fd46 	bl	801457c <pbuf_free>
  }
  return ERR_OK;
 801baf0:	2300      	movs	r3, #0
}
 801baf2:	4618      	mov	r0, r3
 801baf4:	3718      	adds	r7, #24
 801baf6:	46bd      	mov	sp, r7
 801baf8:	bd80      	pop	{r7, pc}
 801bafa:	bf00      	nop
 801bafc:	080223f0 	.word	0x080223f0
 801bb00:	080224e8 	.word	0x080224e8
 801bb04:	08022468 	.word	0x08022468
 801bb08:	2405ea0c 	.word	0x2405ea0c

0801bb0c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801bb0c:	b580      	push	{r7, lr}
 801bb0e:	b084      	sub	sp, #16
 801bb10:	af00      	add	r7, sp, #0
 801bb12:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bb14:	2300      	movs	r3, #0
 801bb16:	60fb      	str	r3, [r7, #12]
 801bb18:	e01e      	b.n	801bb58 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801bb1a:	4913      	ldr	r1, [pc, #76]	; (801bb68 <etharp_cleanup_netif+0x5c>)
 801bb1c:	68fa      	ldr	r2, [r7, #12]
 801bb1e:	4613      	mov	r3, r2
 801bb20:	005b      	lsls	r3, r3, #1
 801bb22:	4413      	add	r3, r2
 801bb24:	00db      	lsls	r3, r3, #3
 801bb26:	440b      	add	r3, r1
 801bb28:	3314      	adds	r3, #20
 801bb2a:	781b      	ldrb	r3, [r3, #0]
 801bb2c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801bb2e:	7afb      	ldrb	r3, [r7, #11]
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d00e      	beq.n	801bb52 <etharp_cleanup_netif+0x46>
 801bb34:	490c      	ldr	r1, [pc, #48]	; (801bb68 <etharp_cleanup_netif+0x5c>)
 801bb36:	68fa      	ldr	r2, [r7, #12]
 801bb38:	4613      	mov	r3, r2
 801bb3a:	005b      	lsls	r3, r3, #1
 801bb3c:	4413      	add	r3, r2
 801bb3e:	00db      	lsls	r3, r3, #3
 801bb40:	440b      	add	r3, r1
 801bb42:	3308      	adds	r3, #8
 801bb44:	681b      	ldr	r3, [r3, #0]
 801bb46:	687a      	ldr	r2, [r7, #4]
 801bb48:	429a      	cmp	r2, r3
 801bb4a:	d102      	bne.n	801bb52 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801bb4c:	68f8      	ldr	r0, [r7, #12]
 801bb4e:	f7ff fce5 	bl	801b51c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bb52:	68fb      	ldr	r3, [r7, #12]
 801bb54:	3301      	adds	r3, #1
 801bb56:	60fb      	str	r3, [r7, #12]
 801bb58:	68fb      	ldr	r3, [r7, #12]
 801bb5a:	2b09      	cmp	r3, #9
 801bb5c:	dddd      	ble.n	801bb1a <etharp_cleanup_netif+0xe>
    }
  }
}
 801bb5e:	bf00      	nop
 801bb60:	bf00      	nop
 801bb62:	3710      	adds	r7, #16
 801bb64:	46bd      	mov	sp, r7
 801bb66:	bd80      	pop	{r7, pc}
 801bb68:	2405ea0c 	.word	0x2405ea0c

0801bb6c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801bb6c:	b5b0      	push	{r4, r5, r7, lr}
 801bb6e:	b08a      	sub	sp, #40	; 0x28
 801bb70:	af04      	add	r7, sp, #16
 801bb72:	6078      	str	r0, [r7, #4]
 801bb74:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801bb76:	683b      	ldr	r3, [r7, #0]
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d107      	bne.n	801bb8c <etharp_input+0x20>
 801bb7c:	4b3d      	ldr	r3, [pc, #244]	; (801bc74 <etharp_input+0x108>)
 801bb7e:	f240 228a 	movw	r2, #650	; 0x28a
 801bb82:	493d      	ldr	r1, [pc, #244]	; (801bc78 <etharp_input+0x10c>)
 801bb84:	483d      	ldr	r0, [pc, #244]	; (801bc7c <etharp_input+0x110>)
 801bb86:	f002 fb5d 	bl	801e244 <iprintf>
 801bb8a:	e06f      	b.n	801bc6c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	685b      	ldr	r3, [r3, #4]
 801bb90:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801bb92:	693b      	ldr	r3, [r7, #16]
 801bb94:	881b      	ldrh	r3, [r3, #0]
 801bb96:	b29b      	uxth	r3, r3
 801bb98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bb9c:	d10c      	bne.n	801bbb8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801bb9e:	693b      	ldr	r3, [r7, #16]
 801bba0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801bba2:	2b06      	cmp	r3, #6
 801bba4:	d108      	bne.n	801bbb8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801bba6:	693b      	ldr	r3, [r7, #16]
 801bba8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801bbaa:	2b04      	cmp	r3, #4
 801bbac:	d104      	bne.n	801bbb8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801bbae:	693b      	ldr	r3, [r7, #16]
 801bbb0:	885b      	ldrh	r3, [r3, #2]
 801bbb2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801bbb4:	2b08      	cmp	r3, #8
 801bbb6:	d003      	beq.n	801bbc0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801bbb8:	6878      	ldr	r0, [r7, #4]
 801bbba:	f7f8 fcdf 	bl	801457c <pbuf_free>
    return;
 801bbbe:	e055      	b.n	801bc6c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801bbc0:	693b      	ldr	r3, [r7, #16]
 801bbc2:	330e      	adds	r3, #14
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801bbc8:	693b      	ldr	r3, [r7, #16]
 801bbca:	3318      	adds	r3, #24
 801bbcc:	681b      	ldr	r3, [r3, #0]
 801bbce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801bbd0:	683b      	ldr	r3, [r7, #0]
 801bbd2:	3304      	adds	r3, #4
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	d102      	bne.n	801bbe0 <etharp_input+0x74>
    for_us = 0;
 801bbda:	2300      	movs	r3, #0
 801bbdc:	75fb      	strb	r3, [r7, #23]
 801bbde:	e009      	b.n	801bbf4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801bbe0:	68ba      	ldr	r2, [r7, #8]
 801bbe2:	683b      	ldr	r3, [r7, #0]
 801bbe4:	3304      	adds	r3, #4
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	429a      	cmp	r2, r3
 801bbea:	bf0c      	ite	eq
 801bbec:	2301      	moveq	r3, #1
 801bbee:	2300      	movne	r3, #0
 801bbf0:	b2db      	uxtb	r3, r3
 801bbf2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801bbf4:	693b      	ldr	r3, [r7, #16]
 801bbf6:	f103 0208 	add.w	r2, r3, #8
 801bbfa:	7dfb      	ldrb	r3, [r7, #23]
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	d001      	beq.n	801bc04 <etharp_input+0x98>
 801bc00:	2301      	movs	r3, #1
 801bc02:	e000      	b.n	801bc06 <etharp_input+0x9a>
 801bc04:	2302      	movs	r3, #2
 801bc06:	f107 010c 	add.w	r1, r7, #12
 801bc0a:	6838      	ldr	r0, [r7, #0]
 801bc0c:	f7ff fed8 	bl	801b9c0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801bc10:	693b      	ldr	r3, [r7, #16]
 801bc12:	88db      	ldrh	r3, [r3, #6]
 801bc14:	b29b      	uxth	r3, r3
 801bc16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bc1a:	d003      	beq.n	801bc24 <etharp_input+0xb8>
 801bc1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bc20:	d01e      	beq.n	801bc60 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801bc22:	e020      	b.n	801bc66 <etharp_input+0xfa>
      if (for_us) {
 801bc24:	7dfb      	ldrb	r3, [r7, #23]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d01c      	beq.n	801bc64 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801bc2a:	683b      	ldr	r3, [r7, #0]
 801bc2c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801bc30:	693b      	ldr	r3, [r7, #16]
 801bc32:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801bc36:	683b      	ldr	r3, [r7, #0]
 801bc38:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801bc3c:	683b      	ldr	r3, [r7, #0]
 801bc3e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801bc40:	693a      	ldr	r2, [r7, #16]
 801bc42:	3208      	adds	r2, #8
        etharp_raw(netif,
 801bc44:	2102      	movs	r1, #2
 801bc46:	9103      	str	r1, [sp, #12]
 801bc48:	f107 010c 	add.w	r1, r7, #12
 801bc4c:	9102      	str	r1, [sp, #8]
 801bc4e:	9201      	str	r2, [sp, #4]
 801bc50:	9300      	str	r3, [sp, #0]
 801bc52:	462b      	mov	r3, r5
 801bc54:	4622      	mov	r2, r4
 801bc56:	4601      	mov	r1, r0
 801bc58:	6838      	ldr	r0, [r7, #0]
 801bc5a:	f000 faeb 	bl	801c234 <etharp_raw>
      break;
 801bc5e:	e001      	b.n	801bc64 <etharp_input+0xf8>
      break;
 801bc60:	bf00      	nop
 801bc62:	e000      	b.n	801bc66 <etharp_input+0xfa>
      break;
 801bc64:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801bc66:	6878      	ldr	r0, [r7, #4]
 801bc68:	f7f8 fc88 	bl	801457c <pbuf_free>
}
 801bc6c:	3718      	adds	r7, #24
 801bc6e:	46bd      	mov	sp, r7
 801bc70:	bdb0      	pop	{r4, r5, r7, pc}
 801bc72:	bf00      	nop
 801bc74:	080223f0 	.word	0x080223f0
 801bc78:	08022540 	.word	0x08022540
 801bc7c:	08022468 	.word	0x08022468

0801bc80 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801bc80:	b580      	push	{r7, lr}
 801bc82:	b086      	sub	sp, #24
 801bc84:	af02      	add	r7, sp, #8
 801bc86:	60f8      	str	r0, [r7, #12]
 801bc88:	60b9      	str	r1, [r7, #8]
 801bc8a:	4613      	mov	r3, r2
 801bc8c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801bc8e:	79fa      	ldrb	r2, [r7, #7]
 801bc90:	4944      	ldr	r1, [pc, #272]	; (801bda4 <etharp_output_to_arp_index+0x124>)
 801bc92:	4613      	mov	r3, r2
 801bc94:	005b      	lsls	r3, r3, #1
 801bc96:	4413      	add	r3, r2
 801bc98:	00db      	lsls	r3, r3, #3
 801bc9a:	440b      	add	r3, r1
 801bc9c:	3314      	adds	r3, #20
 801bc9e:	781b      	ldrb	r3, [r3, #0]
 801bca0:	2b01      	cmp	r3, #1
 801bca2:	d806      	bhi.n	801bcb2 <etharp_output_to_arp_index+0x32>
 801bca4:	4b40      	ldr	r3, [pc, #256]	; (801bda8 <etharp_output_to_arp_index+0x128>)
 801bca6:	f240 22ee 	movw	r2, #750	; 0x2ee
 801bcaa:	4940      	ldr	r1, [pc, #256]	; (801bdac <etharp_output_to_arp_index+0x12c>)
 801bcac:	4840      	ldr	r0, [pc, #256]	; (801bdb0 <etharp_output_to_arp_index+0x130>)
 801bcae:	f002 fac9 	bl	801e244 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801bcb2:	79fa      	ldrb	r2, [r7, #7]
 801bcb4:	493b      	ldr	r1, [pc, #236]	; (801bda4 <etharp_output_to_arp_index+0x124>)
 801bcb6:	4613      	mov	r3, r2
 801bcb8:	005b      	lsls	r3, r3, #1
 801bcba:	4413      	add	r3, r2
 801bcbc:	00db      	lsls	r3, r3, #3
 801bcbe:	440b      	add	r3, r1
 801bcc0:	3314      	adds	r3, #20
 801bcc2:	781b      	ldrb	r3, [r3, #0]
 801bcc4:	2b02      	cmp	r3, #2
 801bcc6:	d153      	bne.n	801bd70 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801bcc8:	79fa      	ldrb	r2, [r7, #7]
 801bcca:	4936      	ldr	r1, [pc, #216]	; (801bda4 <etharp_output_to_arp_index+0x124>)
 801bccc:	4613      	mov	r3, r2
 801bcce:	005b      	lsls	r3, r3, #1
 801bcd0:	4413      	add	r3, r2
 801bcd2:	00db      	lsls	r3, r3, #3
 801bcd4:	440b      	add	r3, r1
 801bcd6:	3312      	adds	r3, #18
 801bcd8:	881b      	ldrh	r3, [r3, #0]
 801bcda:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801bcde:	d919      	bls.n	801bd14 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801bce0:	79fa      	ldrb	r2, [r7, #7]
 801bce2:	4613      	mov	r3, r2
 801bce4:	005b      	lsls	r3, r3, #1
 801bce6:	4413      	add	r3, r2
 801bce8:	00db      	lsls	r3, r3, #3
 801bcea:	4a2e      	ldr	r2, [pc, #184]	; (801bda4 <etharp_output_to_arp_index+0x124>)
 801bcec:	4413      	add	r3, r2
 801bcee:	3304      	adds	r3, #4
 801bcf0:	4619      	mov	r1, r3
 801bcf2:	68f8      	ldr	r0, [r7, #12]
 801bcf4:	f000 fb4c 	bl	801c390 <etharp_request>
 801bcf8:	4603      	mov	r3, r0
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d138      	bne.n	801bd70 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801bcfe:	79fa      	ldrb	r2, [r7, #7]
 801bd00:	4928      	ldr	r1, [pc, #160]	; (801bda4 <etharp_output_to_arp_index+0x124>)
 801bd02:	4613      	mov	r3, r2
 801bd04:	005b      	lsls	r3, r3, #1
 801bd06:	4413      	add	r3, r2
 801bd08:	00db      	lsls	r3, r3, #3
 801bd0a:	440b      	add	r3, r1
 801bd0c:	3314      	adds	r3, #20
 801bd0e:	2203      	movs	r2, #3
 801bd10:	701a      	strb	r2, [r3, #0]
 801bd12:	e02d      	b.n	801bd70 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801bd14:	79fa      	ldrb	r2, [r7, #7]
 801bd16:	4923      	ldr	r1, [pc, #140]	; (801bda4 <etharp_output_to_arp_index+0x124>)
 801bd18:	4613      	mov	r3, r2
 801bd1a:	005b      	lsls	r3, r3, #1
 801bd1c:	4413      	add	r3, r2
 801bd1e:	00db      	lsls	r3, r3, #3
 801bd20:	440b      	add	r3, r1
 801bd22:	3312      	adds	r3, #18
 801bd24:	881b      	ldrh	r3, [r3, #0]
 801bd26:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801bd2a:	d321      	bcc.n	801bd70 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801bd2c:	79fa      	ldrb	r2, [r7, #7]
 801bd2e:	4613      	mov	r3, r2
 801bd30:	005b      	lsls	r3, r3, #1
 801bd32:	4413      	add	r3, r2
 801bd34:	00db      	lsls	r3, r3, #3
 801bd36:	4a1b      	ldr	r2, [pc, #108]	; (801bda4 <etharp_output_to_arp_index+0x124>)
 801bd38:	4413      	add	r3, r2
 801bd3a:	1d19      	adds	r1, r3, #4
 801bd3c:	79fa      	ldrb	r2, [r7, #7]
 801bd3e:	4613      	mov	r3, r2
 801bd40:	005b      	lsls	r3, r3, #1
 801bd42:	4413      	add	r3, r2
 801bd44:	00db      	lsls	r3, r3, #3
 801bd46:	3308      	adds	r3, #8
 801bd48:	4a16      	ldr	r2, [pc, #88]	; (801bda4 <etharp_output_to_arp_index+0x124>)
 801bd4a:	4413      	add	r3, r2
 801bd4c:	3304      	adds	r3, #4
 801bd4e:	461a      	mov	r2, r3
 801bd50:	68f8      	ldr	r0, [r7, #12]
 801bd52:	f000 fafb 	bl	801c34c <etharp_request_dst>
 801bd56:	4603      	mov	r3, r0
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d109      	bne.n	801bd70 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801bd5c:	79fa      	ldrb	r2, [r7, #7]
 801bd5e:	4911      	ldr	r1, [pc, #68]	; (801bda4 <etharp_output_to_arp_index+0x124>)
 801bd60:	4613      	mov	r3, r2
 801bd62:	005b      	lsls	r3, r3, #1
 801bd64:	4413      	add	r3, r2
 801bd66:	00db      	lsls	r3, r3, #3
 801bd68:	440b      	add	r3, r1
 801bd6a:	3314      	adds	r3, #20
 801bd6c:	2203      	movs	r2, #3
 801bd6e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801bd70:	68fb      	ldr	r3, [r7, #12]
 801bd72:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801bd76:	79fa      	ldrb	r2, [r7, #7]
 801bd78:	4613      	mov	r3, r2
 801bd7a:	005b      	lsls	r3, r3, #1
 801bd7c:	4413      	add	r3, r2
 801bd7e:	00db      	lsls	r3, r3, #3
 801bd80:	3308      	adds	r3, #8
 801bd82:	4a08      	ldr	r2, [pc, #32]	; (801bda4 <etharp_output_to_arp_index+0x124>)
 801bd84:	4413      	add	r3, r2
 801bd86:	3304      	adds	r3, #4
 801bd88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801bd8c:	9200      	str	r2, [sp, #0]
 801bd8e:	460a      	mov	r2, r1
 801bd90:	68b9      	ldr	r1, [r7, #8]
 801bd92:	68f8      	ldr	r0, [r7, #12]
 801bd94:	f001 fe66 	bl	801da64 <ethernet_output>
 801bd98:	4603      	mov	r3, r0
}
 801bd9a:	4618      	mov	r0, r3
 801bd9c:	3710      	adds	r7, #16
 801bd9e:	46bd      	mov	sp, r7
 801bda0:	bd80      	pop	{r7, pc}
 801bda2:	bf00      	nop
 801bda4:	2405ea0c 	.word	0x2405ea0c
 801bda8:	080223f0 	.word	0x080223f0
 801bdac:	08022560 	.word	0x08022560
 801bdb0:	08022468 	.word	0x08022468

0801bdb4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	b08a      	sub	sp, #40	; 0x28
 801bdb8:	af02      	add	r7, sp, #8
 801bdba:	60f8      	str	r0, [r7, #12]
 801bdbc:	60b9      	str	r1, [r7, #8]
 801bdbe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801bdc4:	68fb      	ldr	r3, [r7, #12]
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d106      	bne.n	801bdd8 <etharp_output+0x24>
 801bdca:	4b73      	ldr	r3, [pc, #460]	; (801bf98 <etharp_output+0x1e4>)
 801bdcc:	f240 321e 	movw	r2, #798	; 0x31e
 801bdd0:	4972      	ldr	r1, [pc, #456]	; (801bf9c <etharp_output+0x1e8>)
 801bdd2:	4873      	ldr	r0, [pc, #460]	; (801bfa0 <etharp_output+0x1ec>)
 801bdd4:	f002 fa36 	bl	801e244 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801bdd8:	68bb      	ldr	r3, [r7, #8]
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d106      	bne.n	801bdec <etharp_output+0x38>
 801bdde:	4b6e      	ldr	r3, [pc, #440]	; (801bf98 <etharp_output+0x1e4>)
 801bde0:	f240 321f 	movw	r2, #799	; 0x31f
 801bde4:	496f      	ldr	r1, [pc, #444]	; (801bfa4 <etharp_output+0x1f0>)
 801bde6:	486e      	ldr	r0, [pc, #440]	; (801bfa0 <etharp_output+0x1ec>)
 801bde8:	f002 fa2c 	bl	801e244 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	d106      	bne.n	801be00 <etharp_output+0x4c>
 801bdf2:	4b69      	ldr	r3, [pc, #420]	; (801bf98 <etharp_output+0x1e4>)
 801bdf4:	f44f 7248 	mov.w	r2, #800	; 0x320
 801bdf8:	496b      	ldr	r1, [pc, #428]	; (801bfa8 <etharp_output+0x1f4>)
 801bdfa:	4869      	ldr	r0, [pc, #420]	; (801bfa0 <etharp_output+0x1ec>)
 801bdfc:	f002 fa22 	bl	801e244 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	68f9      	ldr	r1, [r7, #12]
 801be06:	4618      	mov	r0, r3
 801be08:	f000 ff1e 	bl	801cc48 <ip4_addr_isbroadcast_u32>
 801be0c:	4603      	mov	r3, r0
 801be0e:	2b00      	cmp	r3, #0
 801be10:	d002      	beq.n	801be18 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801be12:	4b66      	ldr	r3, [pc, #408]	; (801bfac <etharp_output+0x1f8>)
 801be14:	61fb      	str	r3, [r7, #28]
 801be16:	e0af      	b.n	801bf78 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	681b      	ldr	r3, [r3, #0]
 801be1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801be20:	2be0      	cmp	r3, #224	; 0xe0
 801be22:	d118      	bne.n	801be56 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801be24:	2301      	movs	r3, #1
 801be26:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801be28:	2300      	movs	r3, #0
 801be2a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801be2c:	235e      	movs	r3, #94	; 0x5e
 801be2e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	3301      	adds	r3, #1
 801be34:	781b      	ldrb	r3, [r3, #0]
 801be36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801be3a:	b2db      	uxtb	r3, r3
 801be3c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	3302      	adds	r3, #2
 801be42:	781b      	ldrb	r3, [r3, #0]
 801be44:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	3303      	adds	r3, #3
 801be4a:	781b      	ldrb	r3, [r3, #0]
 801be4c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801be4e:	f107 0310 	add.w	r3, r7, #16
 801be52:	61fb      	str	r3, [r7, #28]
 801be54:	e090      	b.n	801bf78 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	681a      	ldr	r2, [r3, #0]
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	3304      	adds	r3, #4
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	405a      	eors	r2, r3
 801be62:	68fb      	ldr	r3, [r7, #12]
 801be64:	3308      	adds	r3, #8
 801be66:	681b      	ldr	r3, [r3, #0]
 801be68:	4013      	ands	r3, r2
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d012      	beq.n	801be94 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801be74:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801be78:	4293      	cmp	r3, r2
 801be7a:	d00b      	beq.n	801be94 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801be7c:	68fb      	ldr	r3, [r7, #12]
 801be7e:	330c      	adds	r3, #12
 801be80:	681b      	ldr	r3, [r3, #0]
 801be82:	2b00      	cmp	r3, #0
 801be84:	d003      	beq.n	801be8e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801be86:	68fb      	ldr	r3, [r7, #12]
 801be88:	330c      	adds	r3, #12
 801be8a:	61bb      	str	r3, [r7, #24]
 801be8c:	e002      	b.n	801be94 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801be8e:	f06f 0303 	mvn.w	r3, #3
 801be92:	e07d      	b.n	801bf90 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801be94:	4b46      	ldr	r3, [pc, #280]	; (801bfb0 <etharp_output+0x1fc>)
 801be96:	781b      	ldrb	r3, [r3, #0]
 801be98:	4619      	mov	r1, r3
 801be9a:	4a46      	ldr	r2, [pc, #280]	; (801bfb4 <etharp_output+0x200>)
 801be9c:	460b      	mov	r3, r1
 801be9e:	005b      	lsls	r3, r3, #1
 801bea0:	440b      	add	r3, r1
 801bea2:	00db      	lsls	r3, r3, #3
 801bea4:	4413      	add	r3, r2
 801bea6:	3314      	adds	r3, #20
 801bea8:	781b      	ldrb	r3, [r3, #0]
 801beaa:	2b01      	cmp	r3, #1
 801beac:	d925      	bls.n	801befa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801beae:	4b40      	ldr	r3, [pc, #256]	; (801bfb0 <etharp_output+0x1fc>)
 801beb0:	781b      	ldrb	r3, [r3, #0]
 801beb2:	4619      	mov	r1, r3
 801beb4:	4a3f      	ldr	r2, [pc, #252]	; (801bfb4 <etharp_output+0x200>)
 801beb6:	460b      	mov	r3, r1
 801beb8:	005b      	lsls	r3, r3, #1
 801beba:	440b      	add	r3, r1
 801bebc:	00db      	lsls	r3, r3, #3
 801bebe:	4413      	add	r3, r2
 801bec0:	3308      	adds	r3, #8
 801bec2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801bec4:	68fa      	ldr	r2, [r7, #12]
 801bec6:	429a      	cmp	r2, r3
 801bec8:	d117      	bne.n	801befa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801beca:	69bb      	ldr	r3, [r7, #24]
 801becc:	681a      	ldr	r2, [r3, #0]
 801bece:	4b38      	ldr	r3, [pc, #224]	; (801bfb0 <etharp_output+0x1fc>)
 801bed0:	781b      	ldrb	r3, [r3, #0]
 801bed2:	4618      	mov	r0, r3
 801bed4:	4937      	ldr	r1, [pc, #220]	; (801bfb4 <etharp_output+0x200>)
 801bed6:	4603      	mov	r3, r0
 801bed8:	005b      	lsls	r3, r3, #1
 801beda:	4403      	add	r3, r0
 801bedc:	00db      	lsls	r3, r3, #3
 801bede:	440b      	add	r3, r1
 801bee0:	3304      	adds	r3, #4
 801bee2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801bee4:	429a      	cmp	r2, r3
 801bee6:	d108      	bne.n	801befa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801bee8:	4b31      	ldr	r3, [pc, #196]	; (801bfb0 <etharp_output+0x1fc>)
 801beea:	781b      	ldrb	r3, [r3, #0]
 801beec:	461a      	mov	r2, r3
 801beee:	68b9      	ldr	r1, [r7, #8]
 801bef0:	68f8      	ldr	r0, [r7, #12]
 801bef2:	f7ff fec5 	bl	801bc80 <etharp_output_to_arp_index>
 801bef6:	4603      	mov	r3, r0
 801bef8:	e04a      	b.n	801bf90 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801befa:	2300      	movs	r3, #0
 801befc:	75fb      	strb	r3, [r7, #23]
 801befe:	e031      	b.n	801bf64 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801bf00:	7dfa      	ldrb	r2, [r7, #23]
 801bf02:	492c      	ldr	r1, [pc, #176]	; (801bfb4 <etharp_output+0x200>)
 801bf04:	4613      	mov	r3, r2
 801bf06:	005b      	lsls	r3, r3, #1
 801bf08:	4413      	add	r3, r2
 801bf0a:	00db      	lsls	r3, r3, #3
 801bf0c:	440b      	add	r3, r1
 801bf0e:	3314      	adds	r3, #20
 801bf10:	781b      	ldrb	r3, [r3, #0]
 801bf12:	2b01      	cmp	r3, #1
 801bf14:	d923      	bls.n	801bf5e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801bf16:	7dfa      	ldrb	r2, [r7, #23]
 801bf18:	4926      	ldr	r1, [pc, #152]	; (801bfb4 <etharp_output+0x200>)
 801bf1a:	4613      	mov	r3, r2
 801bf1c:	005b      	lsls	r3, r3, #1
 801bf1e:	4413      	add	r3, r2
 801bf20:	00db      	lsls	r3, r3, #3
 801bf22:	440b      	add	r3, r1
 801bf24:	3308      	adds	r3, #8
 801bf26:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801bf28:	68fa      	ldr	r2, [r7, #12]
 801bf2a:	429a      	cmp	r2, r3
 801bf2c:	d117      	bne.n	801bf5e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801bf2e:	69bb      	ldr	r3, [r7, #24]
 801bf30:	6819      	ldr	r1, [r3, #0]
 801bf32:	7dfa      	ldrb	r2, [r7, #23]
 801bf34:	481f      	ldr	r0, [pc, #124]	; (801bfb4 <etharp_output+0x200>)
 801bf36:	4613      	mov	r3, r2
 801bf38:	005b      	lsls	r3, r3, #1
 801bf3a:	4413      	add	r3, r2
 801bf3c:	00db      	lsls	r3, r3, #3
 801bf3e:	4403      	add	r3, r0
 801bf40:	3304      	adds	r3, #4
 801bf42:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801bf44:	4299      	cmp	r1, r3
 801bf46:	d10a      	bne.n	801bf5e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801bf48:	4a19      	ldr	r2, [pc, #100]	; (801bfb0 <etharp_output+0x1fc>)
 801bf4a:	7dfb      	ldrb	r3, [r7, #23]
 801bf4c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801bf4e:	7dfb      	ldrb	r3, [r7, #23]
 801bf50:	461a      	mov	r2, r3
 801bf52:	68b9      	ldr	r1, [r7, #8]
 801bf54:	68f8      	ldr	r0, [r7, #12]
 801bf56:	f7ff fe93 	bl	801bc80 <etharp_output_to_arp_index>
 801bf5a:	4603      	mov	r3, r0
 801bf5c:	e018      	b.n	801bf90 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801bf5e:	7dfb      	ldrb	r3, [r7, #23]
 801bf60:	3301      	adds	r3, #1
 801bf62:	75fb      	strb	r3, [r7, #23]
 801bf64:	7dfb      	ldrb	r3, [r7, #23]
 801bf66:	2b09      	cmp	r3, #9
 801bf68:	d9ca      	bls.n	801bf00 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801bf6a:	68ba      	ldr	r2, [r7, #8]
 801bf6c:	69b9      	ldr	r1, [r7, #24]
 801bf6e:	68f8      	ldr	r0, [r7, #12]
 801bf70:	f000 f822 	bl	801bfb8 <etharp_query>
 801bf74:	4603      	mov	r3, r0
 801bf76:	e00b      	b.n	801bf90 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801bf78:	68fb      	ldr	r3, [r7, #12]
 801bf7a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801bf7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801bf82:	9300      	str	r3, [sp, #0]
 801bf84:	69fb      	ldr	r3, [r7, #28]
 801bf86:	68b9      	ldr	r1, [r7, #8]
 801bf88:	68f8      	ldr	r0, [r7, #12]
 801bf8a:	f001 fd6b 	bl	801da64 <ethernet_output>
 801bf8e:	4603      	mov	r3, r0
}
 801bf90:	4618      	mov	r0, r3
 801bf92:	3720      	adds	r7, #32
 801bf94:	46bd      	mov	sp, r7
 801bf96:	bd80      	pop	{r7, pc}
 801bf98:	080223f0 	.word	0x080223f0
 801bf9c:	08022540 	.word	0x08022540
 801bfa0:	08022468 	.word	0x08022468
 801bfa4:	08022590 	.word	0x08022590
 801bfa8:	08022530 	.word	0x08022530
 801bfac:	08022c7c 	.word	0x08022c7c
 801bfb0:	2405eafc 	.word	0x2405eafc
 801bfb4:	2405ea0c 	.word	0x2405ea0c

0801bfb8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801bfb8:	b580      	push	{r7, lr}
 801bfba:	b08c      	sub	sp, #48	; 0x30
 801bfbc:	af02      	add	r7, sp, #8
 801bfbe:	60f8      	str	r0, [r7, #12]
 801bfc0:	60b9      	str	r1, [r7, #8]
 801bfc2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801bfc4:	68fb      	ldr	r3, [r7, #12]
 801bfc6:	3326      	adds	r3, #38	; 0x26
 801bfc8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801bfca:	23ff      	movs	r3, #255	; 0xff
 801bfcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801bfd0:	2300      	movs	r3, #0
 801bfd2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801bfd4:	68bb      	ldr	r3, [r7, #8]
 801bfd6:	681b      	ldr	r3, [r3, #0]
 801bfd8:	68f9      	ldr	r1, [r7, #12]
 801bfda:	4618      	mov	r0, r3
 801bfdc:	f000 fe34 	bl	801cc48 <ip4_addr_isbroadcast_u32>
 801bfe0:	4603      	mov	r3, r0
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	d10c      	bne.n	801c000 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801bfe6:	68bb      	ldr	r3, [r7, #8]
 801bfe8:	681b      	ldr	r3, [r3, #0]
 801bfea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801bfee:	2be0      	cmp	r3, #224	; 0xe0
 801bff0:	d006      	beq.n	801c000 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801bff2:	68bb      	ldr	r3, [r7, #8]
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d003      	beq.n	801c000 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801bff8:	68bb      	ldr	r3, [r7, #8]
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d102      	bne.n	801c006 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c000:	f06f 030f 	mvn.w	r3, #15
 801c004:	e101      	b.n	801c20a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801c006:	68fa      	ldr	r2, [r7, #12]
 801c008:	2101      	movs	r1, #1
 801c00a:	68b8      	ldr	r0, [r7, #8]
 801c00c:	f7ff fb60 	bl	801b6d0 <etharp_find_entry>
 801c010:	4603      	mov	r3, r0
 801c012:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801c014:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c018:	2b00      	cmp	r3, #0
 801c01a:	da02      	bge.n	801c022 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801c01c:	8a7b      	ldrh	r3, [r7, #18]
 801c01e:	b25b      	sxtb	r3, r3
 801c020:	e0f3      	b.n	801c20a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801c022:	8a7b      	ldrh	r3, [r7, #18]
 801c024:	2b7e      	cmp	r3, #126	; 0x7e
 801c026:	d906      	bls.n	801c036 <etharp_query+0x7e>
 801c028:	4b7a      	ldr	r3, [pc, #488]	; (801c214 <etharp_query+0x25c>)
 801c02a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801c02e:	497a      	ldr	r1, [pc, #488]	; (801c218 <etharp_query+0x260>)
 801c030:	487a      	ldr	r0, [pc, #488]	; (801c21c <etharp_query+0x264>)
 801c032:	f002 f907 	bl	801e244 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801c036:	8a7b      	ldrh	r3, [r7, #18]
 801c038:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801c03a:	7c7a      	ldrb	r2, [r7, #17]
 801c03c:	4978      	ldr	r1, [pc, #480]	; (801c220 <etharp_query+0x268>)
 801c03e:	4613      	mov	r3, r2
 801c040:	005b      	lsls	r3, r3, #1
 801c042:	4413      	add	r3, r2
 801c044:	00db      	lsls	r3, r3, #3
 801c046:	440b      	add	r3, r1
 801c048:	3314      	adds	r3, #20
 801c04a:	781b      	ldrb	r3, [r3, #0]
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	d115      	bne.n	801c07c <etharp_query+0xc4>
    is_new_entry = 1;
 801c050:	2301      	movs	r3, #1
 801c052:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801c054:	7c7a      	ldrb	r2, [r7, #17]
 801c056:	4972      	ldr	r1, [pc, #456]	; (801c220 <etharp_query+0x268>)
 801c058:	4613      	mov	r3, r2
 801c05a:	005b      	lsls	r3, r3, #1
 801c05c:	4413      	add	r3, r2
 801c05e:	00db      	lsls	r3, r3, #3
 801c060:	440b      	add	r3, r1
 801c062:	3314      	adds	r3, #20
 801c064:	2201      	movs	r2, #1
 801c066:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801c068:	7c7a      	ldrb	r2, [r7, #17]
 801c06a:	496d      	ldr	r1, [pc, #436]	; (801c220 <etharp_query+0x268>)
 801c06c:	4613      	mov	r3, r2
 801c06e:	005b      	lsls	r3, r3, #1
 801c070:	4413      	add	r3, r2
 801c072:	00db      	lsls	r3, r3, #3
 801c074:	440b      	add	r3, r1
 801c076:	3308      	adds	r3, #8
 801c078:	68fa      	ldr	r2, [r7, #12]
 801c07a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801c07c:	7c7a      	ldrb	r2, [r7, #17]
 801c07e:	4968      	ldr	r1, [pc, #416]	; (801c220 <etharp_query+0x268>)
 801c080:	4613      	mov	r3, r2
 801c082:	005b      	lsls	r3, r3, #1
 801c084:	4413      	add	r3, r2
 801c086:	00db      	lsls	r3, r3, #3
 801c088:	440b      	add	r3, r1
 801c08a:	3314      	adds	r3, #20
 801c08c:	781b      	ldrb	r3, [r3, #0]
 801c08e:	2b01      	cmp	r3, #1
 801c090:	d011      	beq.n	801c0b6 <etharp_query+0xfe>
 801c092:	7c7a      	ldrb	r2, [r7, #17]
 801c094:	4962      	ldr	r1, [pc, #392]	; (801c220 <etharp_query+0x268>)
 801c096:	4613      	mov	r3, r2
 801c098:	005b      	lsls	r3, r3, #1
 801c09a:	4413      	add	r3, r2
 801c09c:	00db      	lsls	r3, r3, #3
 801c09e:	440b      	add	r3, r1
 801c0a0:	3314      	adds	r3, #20
 801c0a2:	781b      	ldrb	r3, [r3, #0]
 801c0a4:	2b01      	cmp	r3, #1
 801c0a6:	d806      	bhi.n	801c0b6 <etharp_query+0xfe>
 801c0a8:	4b5a      	ldr	r3, [pc, #360]	; (801c214 <etharp_query+0x25c>)
 801c0aa:	f240 32cd 	movw	r2, #973	; 0x3cd
 801c0ae:	495d      	ldr	r1, [pc, #372]	; (801c224 <etharp_query+0x26c>)
 801c0b0:	485a      	ldr	r0, [pc, #360]	; (801c21c <etharp_query+0x264>)
 801c0b2:	f002 f8c7 	bl	801e244 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801c0b6:	6a3b      	ldr	r3, [r7, #32]
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	d102      	bne.n	801c0c2 <etharp_query+0x10a>
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d10c      	bne.n	801c0dc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801c0c2:	68b9      	ldr	r1, [r7, #8]
 801c0c4:	68f8      	ldr	r0, [r7, #12]
 801c0c6:	f000 f963 	bl	801c390 <etharp_request>
 801c0ca:	4603      	mov	r3, r0
 801c0cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d102      	bne.n	801c0dc <etharp_query+0x124>
      return result;
 801c0d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801c0da:	e096      	b.n	801c20a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	d106      	bne.n	801c0f0 <etharp_query+0x138>
 801c0e2:	4b4c      	ldr	r3, [pc, #304]	; (801c214 <etharp_query+0x25c>)
 801c0e4:	f240 32e1 	movw	r2, #993	; 0x3e1
 801c0e8:	494f      	ldr	r1, [pc, #316]	; (801c228 <etharp_query+0x270>)
 801c0ea:	484c      	ldr	r0, [pc, #304]	; (801c21c <etharp_query+0x264>)
 801c0ec:	f002 f8aa 	bl	801e244 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801c0f0:	7c7a      	ldrb	r2, [r7, #17]
 801c0f2:	494b      	ldr	r1, [pc, #300]	; (801c220 <etharp_query+0x268>)
 801c0f4:	4613      	mov	r3, r2
 801c0f6:	005b      	lsls	r3, r3, #1
 801c0f8:	4413      	add	r3, r2
 801c0fa:	00db      	lsls	r3, r3, #3
 801c0fc:	440b      	add	r3, r1
 801c0fe:	3314      	adds	r3, #20
 801c100:	781b      	ldrb	r3, [r3, #0]
 801c102:	2b01      	cmp	r3, #1
 801c104:	d917      	bls.n	801c136 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801c106:	4a49      	ldr	r2, [pc, #292]	; (801c22c <etharp_query+0x274>)
 801c108:	7c7b      	ldrb	r3, [r7, #17]
 801c10a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801c10c:	7c7a      	ldrb	r2, [r7, #17]
 801c10e:	4613      	mov	r3, r2
 801c110:	005b      	lsls	r3, r3, #1
 801c112:	4413      	add	r3, r2
 801c114:	00db      	lsls	r3, r3, #3
 801c116:	3308      	adds	r3, #8
 801c118:	4a41      	ldr	r2, [pc, #260]	; (801c220 <etharp_query+0x268>)
 801c11a:	4413      	add	r3, r2
 801c11c:	3304      	adds	r3, #4
 801c11e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c122:	9200      	str	r2, [sp, #0]
 801c124:	697a      	ldr	r2, [r7, #20]
 801c126:	6879      	ldr	r1, [r7, #4]
 801c128:	68f8      	ldr	r0, [r7, #12]
 801c12a:	f001 fc9b 	bl	801da64 <ethernet_output>
 801c12e:	4603      	mov	r3, r0
 801c130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c134:	e067      	b.n	801c206 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c136:	7c7a      	ldrb	r2, [r7, #17]
 801c138:	4939      	ldr	r1, [pc, #228]	; (801c220 <etharp_query+0x268>)
 801c13a:	4613      	mov	r3, r2
 801c13c:	005b      	lsls	r3, r3, #1
 801c13e:	4413      	add	r3, r2
 801c140:	00db      	lsls	r3, r3, #3
 801c142:	440b      	add	r3, r1
 801c144:	3314      	adds	r3, #20
 801c146:	781b      	ldrb	r3, [r3, #0]
 801c148:	2b01      	cmp	r3, #1
 801c14a:	d15c      	bne.n	801c206 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801c14c:	2300      	movs	r3, #0
 801c14e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c154:	e01c      	b.n	801c190 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801c156:	69fb      	ldr	r3, [r7, #28]
 801c158:	895a      	ldrh	r2, [r3, #10]
 801c15a:	69fb      	ldr	r3, [r7, #28]
 801c15c:	891b      	ldrh	r3, [r3, #8]
 801c15e:	429a      	cmp	r2, r3
 801c160:	d10a      	bne.n	801c178 <etharp_query+0x1c0>
 801c162:	69fb      	ldr	r3, [r7, #28]
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	2b00      	cmp	r3, #0
 801c168:	d006      	beq.n	801c178 <etharp_query+0x1c0>
 801c16a:	4b2a      	ldr	r3, [pc, #168]	; (801c214 <etharp_query+0x25c>)
 801c16c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801c170:	492f      	ldr	r1, [pc, #188]	; (801c230 <etharp_query+0x278>)
 801c172:	482a      	ldr	r0, [pc, #168]	; (801c21c <etharp_query+0x264>)
 801c174:	f002 f866 	bl	801e244 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801c178:	69fb      	ldr	r3, [r7, #28]
 801c17a:	7b1b      	ldrb	r3, [r3, #12]
 801c17c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c180:	2b00      	cmp	r3, #0
 801c182:	d002      	beq.n	801c18a <etharp_query+0x1d2>
        copy_needed = 1;
 801c184:	2301      	movs	r3, #1
 801c186:	61bb      	str	r3, [r7, #24]
        break;
 801c188:	e005      	b.n	801c196 <etharp_query+0x1de>
      }
      p = p->next;
 801c18a:	69fb      	ldr	r3, [r7, #28]
 801c18c:	681b      	ldr	r3, [r3, #0]
 801c18e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c190:	69fb      	ldr	r3, [r7, #28]
 801c192:	2b00      	cmp	r3, #0
 801c194:	d1df      	bne.n	801c156 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801c196:	69bb      	ldr	r3, [r7, #24]
 801c198:	2b00      	cmp	r3, #0
 801c19a:	d007      	beq.n	801c1ac <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801c19c:	687a      	ldr	r2, [r7, #4]
 801c19e:	f44f 7120 	mov.w	r1, #640	; 0x280
 801c1a2:	200e      	movs	r0, #14
 801c1a4:	f7f8 fc52 	bl	8014a4c <pbuf_clone>
 801c1a8:	61f8      	str	r0, [r7, #28]
 801c1aa:	e004      	b.n	801c1b6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801c1b0:	69f8      	ldr	r0, [r7, #28]
 801c1b2:	f7f8 fa89 	bl	80146c8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801c1b6:	69fb      	ldr	r3, [r7, #28]
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	d021      	beq.n	801c200 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801c1bc:	7c7a      	ldrb	r2, [r7, #17]
 801c1be:	4918      	ldr	r1, [pc, #96]	; (801c220 <etharp_query+0x268>)
 801c1c0:	4613      	mov	r3, r2
 801c1c2:	005b      	lsls	r3, r3, #1
 801c1c4:	4413      	add	r3, r2
 801c1c6:	00db      	lsls	r3, r3, #3
 801c1c8:	440b      	add	r3, r1
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d00a      	beq.n	801c1e6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801c1d0:	7c7a      	ldrb	r2, [r7, #17]
 801c1d2:	4913      	ldr	r1, [pc, #76]	; (801c220 <etharp_query+0x268>)
 801c1d4:	4613      	mov	r3, r2
 801c1d6:	005b      	lsls	r3, r3, #1
 801c1d8:	4413      	add	r3, r2
 801c1da:	00db      	lsls	r3, r3, #3
 801c1dc:	440b      	add	r3, r1
 801c1de:	681b      	ldr	r3, [r3, #0]
 801c1e0:	4618      	mov	r0, r3
 801c1e2:	f7f8 f9cb 	bl	801457c <pbuf_free>
      }
      arp_table[i].q = p;
 801c1e6:	7c7a      	ldrb	r2, [r7, #17]
 801c1e8:	490d      	ldr	r1, [pc, #52]	; (801c220 <etharp_query+0x268>)
 801c1ea:	4613      	mov	r3, r2
 801c1ec:	005b      	lsls	r3, r3, #1
 801c1ee:	4413      	add	r3, r2
 801c1f0:	00db      	lsls	r3, r3, #3
 801c1f2:	440b      	add	r3, r1
 801c1f4:	69fa      	ldr	r2, [r7, #28]
 801c1f6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801c1f8:	2300      	movs	r3, #0
 801c1fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c1fe:	e002      	b.n	801c206 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801c200:	23ff      	movs	r3, #255	; 0xff
 801c202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801c206:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801c20a:	4618      	mov	r0, r3
 801c20c:	3728      	adds	r7, #40	; 0x28
 801c20e:	46bd      	mov	sp, r7
 801c210:	bd80      	pop	{r7, pc}
 801c212:	bf00      	nop
 801c214:	080223f0 	.word	0x080223f0
 801c218:	0802259c 	.word	0x0802259c
 801c21c:	08022468 	.word	0x08022468
 801c220:	2405ea0c 	.word	0x2405ea0c
 801c224:	080225ac 	.word	0x080225ac
 801c228:	08022590 	.word	0x08022590
 801c22c:	2405eafc 	.word	0x2405eafc
 801c230:	080225d4 	.word	0x080225d4

0801c234 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801c234:	b580      	push	{r7, lr}
 801c236:	b08a      	sub	sp, #40	; 0x28
 801c238:	af02      	add	r7, sp, #8
 801c23a:	60f8      	str	r0, [r7, #12]
 801c23c:	60b9      	str	r1, [r7, #8]
 801c23e:	607a      	str	r2, [r7, #4]
 801c240:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801c242:	2300      	movs	r3, #0
 801c244:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c246:	68fb      	ldr	r3, [r7, #12]
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d106      	bne.n	801c25a <etharp_raw+0x26>
 801c24c:	4b3a      	ldr	r3, [pc, #232]	; (801c338 <etharp_raw+0x104>)
 801c24e:	f240 4257 	movw	r2, #1111	; 0x457
 801c252:	493a      	ldr	r1, [pc, #232]	; (801c33c <etharp_raw+0x108>)
 801c254:	483a      	ldr	r0, [pc, #232]	; (801c340 <etharp_raw+0x10c>)
 801c256:	f001 fff5 	bl	801e244 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801c25a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c25e:	211c      	movs	r1, #28
 801c260:	200e      	movs	r0, #14
 801c262:	f7f7 fea3 	bl	8013fac <pbuf_alloc>
 801c266:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801c268:	69bb      	ldr	r3, [r7, #24]
 801c26a:	2b00      	cmp	r3, #0
 801c26c:	d102      	bne.n	801c274 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801c26e:	f04f 33ff 	mov.w	r3, #4294967295
 801c272:	e05d      	b.n	801c330 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801c274:	69bb      	ldr	r3, [r7, #24]
 801c276:	895b      	ldrh	r3, [r3, #10]
 801c278:	2b1b      	cmp	r3, #27
 801c27a:	d806      	bhi.n	801c28a <etharp_raw+0x56>
 801c27c:	4b2e      	ldr	r3, [pc, #184]	; (801c338 <etharp_raw+0x104>)
 801c27e:	f240 4262 	movw	r2, #1122	; 0x462
 801c282:	4930      	ldr	r1, [pc, #192]	; (801c344 <etharp_raw+0x110>)
 801c284:	482e      	ldr	r0, [pc, #184]	; (801c340 <etharp_raw+0x10c>)
 801c286:	f001 ffdd 	bl	801e244 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801c28a:	69bb      	ldr	r3, [r7, #24]
 801c28c:	685b      	ldr	r3, [r3, #4]
 801c28e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801c290:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c292:	4618      	mov	r0, r3
 801c294:	f7f6 fbf8 	bl	8012a88 <lwip_htons>
 801c298:	4603      	mov	r3, r0
 801c29a:	461a      	mov	r2, r3
 801c29c:	697b      	ldr	r3, [r7, #20]
 801c29e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801c2a0:	68fb      	ldr	r3, [r7, #12]
 801c2a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801c2a6:	2b06      	cmp	r3, #6
 801c2a8:	d006      	beq.n	801c2b8 <etharp_raw+0x84>
 801c2aa:	4b23      	ldr	r3, [pc, #140]	; (801c338 <etharp_raw+0x104>)
 801c2ac:	f240 4269 	movw	r2, #1129	; 0x469
 801c2b0:	4925      	ldr	r1, [pc, #148]	; (801c348 <etharp_raw+0x114>)
 801c2b2:	4823      	ldr	r0, [pc, #140]	; (801c340 <etharp_raw+0x10c>)
 801c2b4:	f001 ffc6 	bl	801e244 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801c2b8:	697b      	ldr	r3, [r7, #20]
 801c2ba:	3308      	adds	r3, #8
 801c2bc:	2206      	movs	r2, #6
 801c2be:	6839      	ldr	r1, [r7, #0]
 801c2c0:	4618      	mov	r0, r3
 801c2c2:	f001 fefa 	bl	801e0ba <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801c2c6:	697b      	ldr	r3, [r7, #20]
 801c2c8:	3312      	adds	r3, #18
 801c2ca:	2206      	movs	r2, #6
 801c2cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c2ce:	4618      	mov	r0, r3
 801c2d0:	f001 fef3 	bl	801e0ba <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801c2d4:	697b      	ldr	r3, [r7, #20]
 801c2d6:	330e      	adds	r3, #14
 801c2d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c2da:	6812      	ldr	r2, [r2, #0]
 801c2dc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801c2de:	697b      	ldr	r3, [r7, #20]
 801c2e0:	3318      	adds	r3, #24
 801c2e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c2e4:	6812      	ldr	r2, [r2, #0]
 801c2e6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801c2e8:	697b      	ldr	r3, [r7, #20]
 801c2ea:	2200      	movs	r2, #0
 801c2ec:	701a      	strb	r2, [r3, #0]
 801c2ee:	2200      	movs	r2, #0
 801c2f0:	f042 0201 	orr.w	r2, r2, #1
 801c2f4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801c2f6:	697b      	ldr	r3, [r7, #20]
 801c2f8:	2200      	movs	r2, #0
 801c2fa:	f042 0208 	orr.w	r2, r2, #8
 801c2fe:	709a      	strb	r2, [r3, #2]
 801c300:	2200      	movs	r2, #0
 801c302:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801c304:	697b      	ldr	r3, [r7, #20]
 801c306:	2206      	movs	r2, #6
 801c308:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801c30a:	697b      	ldr	r3, [r7, #20]
 801c30c:	2204      	movs	r2, #4
 801c30e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801c310:	f640 0306 	movw	r3, #2054	; 0x806
 801c314:	9300      	str	r3, [sp, #0]
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	68ba      	ldr	r2, [r7, #8]
 801c31a:	69b9      	ldr	r1, [r7, #24]
 801c31c:	68f8      	ldr	r0, [r7, #12]
 801c31e:	f001 fba1 	bl	801da64 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801c322:	69b8      	ldr	r0, [r7, #24]
 801c324:	f7f8 f92a 	bl	801457c <pbuf_free>
  p = NULL;
 801c328:	2300      	movs	r3, #0
 801c32a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801c32c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c330:	4618      	mov	r0, r3
 801c332:	3720      	adds	r7, #32
 801c334:	46bd      	mov	sp, r7
 801c336:	bd80      	pop	{r7, pc}
 801c338:	080223f0 	.word	0x080223f0
 801c33c:	08022540 	.word	0x08022540
 801c340:	08022468 	.word	0x08022468
 801c344:	080225f0 	.word	0x080225f0
 801c348:	08022624 	.word	0x08022624

0801c34c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801c34c:	b580      	push	{r7, lr}
 801c34e:	b088      	sub	sp, #32
 801c350:	af04      	add	r7, sp, #16
 801c352:	60f8      	str	r0, [r7, #12]
 801c354:	60b9      	str	r1, [r7, #8]
 801c356:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c358:	68fb      	ldr	r3, [r7, #12]
 801c35a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801c35e:	68fb      	ldr	r3, [r7, #12]
 801c360:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801c364:	68fb      	ldr	r3, [r7, #12]
 801c366:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c368:	2201      	movs	r2, #1
 801c36a:	9203      	str	r2, [sp, #12]
 801c36c:	68ba      	ldr	r2, [r7, #8]
 801c36e:	9202      	str	r2, [sp, #8]
 801c370:	4a06      	ldr	r2, [pc, #24]	; (801c38c <etharp_request_dst+0x40>)
 801c372:	9201      	str	r2, [sp, #4]
 801c374:	9300      	str	r3, [sp, #0]
 801c376:	4603      	mov	r3, r0
 801c378:	687a      	ldr	r2, [r7, #4]
 801c37a:	68f8      	ldr	r0, [r7, #12]
 801c37c:	f7ff ff5a 	bl	801c234 <etharp_raw>
 801c380:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801c382:	4618      	mov	r0, r3
 801c384:	3710      	adds	r7, #16
 801c386:	46bd      	mov	sp, r7
 801c388:	bd80      	pop	{r7, pc}
 801c38a:	bf00      	nop
 801c38c:	08022c84 	.word	0x08022c84

0801c390 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c390:	b580      	push	{r7, lr}
 801c392:	b082      	sub	sp, #8
 801c394:	af00      	add	r7, sp, #0
 801c396:	6078      	str	r0, [r7, #4]
 801c398:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801c39a:	4a05      	ldr	r2, [pc, #20]	; (801c3b0 <etharp_request+0x20>)
 801c39c:	6839      	ldr	r1, [r7, #0]
 801c39e:	6878      	ldr	r0, [r7, #4]
 801c3a0:	f7ff ffd4 	bl	801c34c <etharp_request_dst>
 801c3a4:	4603      	mov	r3, r0
}
 801c3a6:	4618      	mov	r0, r3
 801c3a8:	3708      	adds	r7, #8
 801c3aa:	46bd      	mov	sp, r7
 801c3ac:	bd80      	pop	{r7, pc}
 801c3ae:	bf00      	nop
 801c3b0:	08022c7c 	.word	0x08022c7c

0801c3b4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801c3b4:	b580      	push	{r7, lr}
 801c3b6:	b08e      	sub	sp, #56	; 0x38
 801c3b8:	af04      	add	r7, sp, #16
 801c3ba:	6078      	str	r0, [r7, #4]
 801c3bc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801c3be:	4b87      	ldr	r3, [pc, #540]	; (801c5dc <icmp_input+0x228>)
 801c3c0:	689b      	ldr	r3, [r3, #8]
 801c3c2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801c3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3c6:	781b      	ldrb	r3, [r3, #0]
 801c3c8:	f003 030f 	and.w	r3, r3, #15
 801c3cc:	b2db      	uxtb	r3, r3
 801c3ce:	009b      	lsls	r3, r3, #2
 801c3d0:	b2db      	uxtb	r3, r3
 801c3d2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801c3d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c3d6:	2b13      	cmp	r3, #19
 801c3d8:	f240 80e8 	bls.w	801c5ac <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	895b      	ldrh	r3, [r3, #10]
 801c3e0:	2b03      	cmp	r3, #3
 801c3e2:	f240 80e5 	bls.w	801c5b0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	685b      	ldr	r3, [r3, #4]
 801c3ea:	781b      	ldrb	r3, [r3, #0]
 801c3ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801c3f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	f000 80d2 	beq.w	801c59e <icmp_input+0x1ea>
 801c3fa:	2b08      	cmp	r3, #8
 801c3fc:	f040 80d2 	bne.w	801c5a4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801c400:	4b77      	ldr	r3, [pc, #476]	; (801c5e0 <icmp_input+0x22c>)
 801c402:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c404:	4b75      	ldr	r3, [pc, #468]	; (801c5dc <icmp_input+0x228>)
 801c406:	695b      	ldr	r3, [r3, #20]
 801c408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c40c:	2be0      	cmp	r3, #224	; 0xe0
 801c40e:	f000 80d6 	beq.w	801c5be <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801c412:	4b72      	ldr	r3, [pc, #456]	; (801c5dc <icmp_input+0x228>)
 801c414:	695b      	ldr	r3, [r3, #20]
 801c416:	4a71      	ldr	r2, [pc, #452]	; (801c5dc <icmp_input+0x228>)
 801c418:	6812      	ldr	r2, [r2, #0]
 801c41a:	4611      	mov	r1, r2
 801c41c:	4618      	mov	r0, r3
 801c41e:	f000 fc13 	bl	801cc48 <ip4_addr_isbroadcast_u32>
 801c422:	4603      	mov	r3, r0
 801c424:	2b00      	cmp	r3, #0
 801c426:	f040 80cc 	bne.w	801c5c2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	891b      	ldrh	r3, [r3, #8]
 801c42e:	2b07      	cmp	r3, #7
 801c430:	f240 80c0 	bls.w	801c5b4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801c434:	6878      	ldr	r0, [r7, #4]
 801c436:	f7f6 fc81 	bl	8012d3c <inet_chksum_pbuf>
 801c43a:	4603      	mov	r3, r0
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d003      	beq.n	801c448 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801c440:	6878      	ldr	r0, [r7, #4]
 801c442:	f7f8 f89b 	bl	801457c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801c446:	e0c5      	b.n	801c5d4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c448:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c44a:	330e      	adds	r3, #14
 801c44c:	4619      	mov	r1, r3
 801c44e:	6878      	ldr	r0, [r7, #4]
 801c450:	f7f7 fffe 	bl	8014450 <pbuf_add_header>
 801c454:	4603      	mov	r3, r0
 801c456:	2b00      	cmp	r3, #0
 801c458:	d04b      	beq.n	801c4f2 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	891a      	ldrh	r2, [r3, #8]
 801c45e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c460:	4413      	add	r3, r2
 801c462:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	891b      	ldrh	r3, [r3, #8]
 801c468:	8b7a      	ldrh	r2, [r7, #26]
 801c46a:	429a      	cmp	r2, r3
 801c46c:	f0c0 80ab 	bcc.w	801c5c6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801c470:	8b7b      	ldrh	r3, [r7, #26]
 801c472:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c476:	4619      	mov	r1, r3
 801c478:	200e      	movs	r0, #14
 801c47a:	f7f7 fd97 	bl	8013fac <pbuf_alloc>
 801c47e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801c480:	697b      	ldr	r3, [r7, #20]
 801c482:	2b00      	cmp	r3, #0
 801c484:	f000 80a1 	beq.w	801c5ca <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801c488:	697b      	ldr	r3, [r7, #20]
 801c48a:	895b      	ldrh	r3, [r3, #10]
 801c48c:	461a      	mov	r2, r3
 801c48e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c490:	3308      	adds	r3, #8
 801c492:	429a      	cmp	r2, r3
 801c494:	d203      	bcs.n	801c49e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801c496:	6978      	ldr	r0, [r7, #20]
 801c498:	f7f8 f870 	bl	801457c <pbuf_free>
          goto icmperr;
 801c49c:	e096      	b.n	801c5cc <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801c49e:	697b      	ldr	r3, [r7, #20]
 801c4a0:	685b      	ldr	r3, [r3, #4]
 801c4a2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c4a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c4a6:	4618      	mov	r0, r3
 801c4a8:	f001 fe07 	bl	801e0ba <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801c4ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c4ae:	4619      	mov	r1, r3
 801c4b0:	6978      	ldr	r0, [r7, #20]
 801c4b2:	f7f7 ffdd 	bl	8014470 <pbuf_remove_header>
 801c4b6:	4603      	mov	r3, r0
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	d009      	beq.n	801c4d0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801c4bc:	4b49      	ldr	r3, [pc, #292]	; (801c5e4 <icmp_input+0x230>)
 801c4be:	22b6      	movs	r2, #182	; 0xb6
 801c4c0:	4949      	ldr	r1, [pc, #292]	; (801c5e8 <icmp_input+0x234>)
 801c4c2:	484a      	ldr	r0, [pc, #296]	; (801c5ec <icmp_input+0x238>)
 801c4c4:	f001 febe 	bl	801e244 <iprintf>
          pbuf_free(r);
 801c4c8:	6978      	ldr	r0, [r7, #20]
 801c4ca:	f7f8 f857 	bl	801457c <pbuf_free>
          goto icmperr;
 801c4ce:	e07d      	b.n	801c5cc <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801c4d0:	6879      	ldr	r1, [r7, #4]
 801c4d2:	6978      	ldr	r0, [r7, #20]
 801c4d4:	f7f8 f976 	bl	80147c4 <pbuf_copy>
 801c4d8:	4603      	mov	r3, r0
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d003      	beq.n	801c4e6 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801c4de:	6978      	ldr	r0, [r7, #20]
 801c4e0:	f7f8 f84c 	bl	801457c <pbuf_free>
          goto icmperr;
 801c4e4:	e072      	b.n	801c5cc <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801c4e6:	6878      	ldr	r0, [r7, #4]
 801c4e8:	f7f8 f848 	bl	801457c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801c4ec:	697b      	ldr	r3, [r7, #20]
 801c4ee:	607b      	str	r3, [r7, #4]
 801c4f0:	e00f      	b.n	801c512 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c4f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c4f4:	330e      	adds	r3, #14
 801c4f6:	4619      	mov	r1, r3
 801c4f8:	6878      	ldr	r0, [r7, #4]
 801c4fa:	f7f7 ffb9 	bl	8014470 <pbuf_remove_header>
 801c4fe:	4603      	mov	r3, r0
 801c500:	2b00      	cmp	r3, #0
 801c502:	d006      	beq.n	801c512 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801c504:	4b37      	ldr	r3, [pc, #220]	; (801c5e4 <icmp_input+0x230>)
 801c506:	22c7      	movs	r2, #199	; 0xc7
 801c508:	4939      	ldr	r1, [pc, #228]	; (801c5f0 <icmp_input+0x23c>)
 801c50a:	4838      	ldr	r0, [pc, #224]	; (801c5ec <icmp_input+0x238>)
 801c50c:	f001 fe9a 	bl	801e244 <iprintf>
          goto icmperr;
 801c510:	e05c      	b.n	801c5cc <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	685b      	ldr	r3, [r3, #4]
 801c516:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801c518:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c51a:	4619      	mov	r1, r3
 801c51c:	6878      	ldr	r0, [r7, #4]
 801c51e:	f7f7 ff97 	bl	8014450 <pbuf_add_header>
 801c522:	4603      	mov	r3, r0
 801c524:	2b00      	cmp	r3, #0
 801c526:	d13c      	bne.n	801c5a2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	685b      	ldr	r3, [r3, #4]
 801c52c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801c52e:	69fb      	ldr	r3, [r7, #28]
 801c530:	681a      	ldr	r2, [r3, #0]
 801c532:	68fb      	ldr	r3, [r7, #12]
 801c534:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801c536:	4b29      	ldr	r3, [pc, #164]	; (801c5dc <icmp_input+0x228>)
 801c538:	691a      	ldr	r2, [r3, #16]
 801c53a:	68fb      	ldr	r3, [r7, #12]
 801c53c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801c53e:	693b      	ldr	r3, [r7, #16]
 801c540:	2200      	movs	r2, #0
 801c542:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801c544:	693b      	ldr	r3, [r7, #16]
 801c546:	885b      	ldrh	r3, [r3, #2]
 801c548:	b29b      	uxth	r3, r3
 801c54a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801c54e:	4293      	cmp	r3, r2
 801c550:	d907      	bls.n	801c562 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801c552:	693b      	ldr	r3, [r7, #16]
 801c554:	885b      	ldrh	r3, [r3, #2]
 801c556:	b29b      	uxth	r3, r3
 801c558:	3309      	adds	r3, #9
 801c55a:	b29a      	uxth	r2, r3
 801c55c:	693b      	ldr	r3, [r7, #16]
 801c55e:	805a      	strh	r2, [r3, #2]
 801c560:	e006      	b.n	801c570 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801c562:	693b      	ldr	r3, [r7, #16]
 801c564:	885b      	ldrh	r3, [r3, #2]
 801c566:	b29b      	uxth	r3, r3
 801c568:	3308      	adds	r3, #8
 801c56a:	b29a      	uxth	r2, r3
 801c56c:	693b      	ldr	r3, [r7, #16]
 801c56e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801c570:	68fb      	ldr	r3, [r7, #12]
 801c572:	22ff      	movs	r2, #255	; 0xff
 801c574:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801c576:	68fb      	ldr	r3, [r7, #12]
 801c578:	2200      	movs	r2, #0
 801c57a:	729a      	strb	r2, [r3, #10]
 801c57c:	2200      	movs	r2, #0
 801c57e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801c580:	683b      	ldr	r3, [r7, #0]
 801c582:	9302      	str	r3, [sp, #8]
 801c584:	2301      	movs	r3, #1
 801c586:	9301      	str	r3, [sp, #4]
 801c588:	2300      	movs	r3, #0
 801c58a:	9300      	str	r3, [sp, #0]
 801c58c:	23ff      	movs	r3, #255	; 0xff
 801c58e:	2200      	movs	r2, #0
 801c590:	69f9      	ldr	r1, [r7, #28]
 801c592:	6878      	ldr	r0, [r7, #4]
 801c594:	f000 fa80 	bl	801ca98 <ip4_output_if>
 801c598:	4603      	mov	r3, r0
 801c59a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801c59c:	e001      	b.n	801c5a2 <icmp_input+0x1ee>
      break;
 801c59e:	bf00      	nop
 801c5a0:	e000      	b.n	801c5a4 <icmp_input+0x1f0>
      break;
 801c5a2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801c5a4:	6878      	ldr	r0, [r7, #4]
 801c5a6:	f7f7 ffe9 	bl	801457c <pbuf_free>
  return;
 801c5aa:	e013      	b.n	801c5d4 <icmp_input+0x220>
    goto lenerr;
 801c5ac:	bf00      	nop
 801c5ae:	e002      	b.n	801c5b6 <icmp_input+0x202>
    goto lenerr;
 801c5b0:	bf00      	nop
 801c5b2:	e000      	b.n	801c5b6 <icmp_input+0x202>
        goto lenerr;
 801c5b4:	bf00      	nop
lenerr:
  pbuf_free(p);
 801c5b6:	6878      	ldr	r0, [r7, #4]
 801c5b8:	f7f7 ffe0 	bl	801457c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c5bc:	e00a      	b.n	801c5d4 <icmp_input+0x220>
        goto icmperr;
 801c5be:	bf00      	nop
 801c5c0:	e004      	b.n	801c5cc <icmp_input+0x218>
        goto icmperr;
 801c5c2:	bf00      	nop
 801c5c4:	e002      	b.n	801c5cc <icmp_input+0x218>
          goto icmperr;
 801c5c6:	bf00      	nop
 801c5c8:	e000      	b.n	801c5cc <icmp_input+0x218>
          goto icmperr;
 801c5ca:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801c5cc:	6878      	ldr	r0, [r7, #4]
 801c5ce:	f7f7 ffd5 	bl	801457c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c5d2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801c5d4:	3728      	adds	r7, #40	; 0x28
 801c5d6:	46bd      	mov	sp, r7
 801c5d8:	bd80      	pop	{r7, pc}
 801c5da:	bf00      	nop
 801c5dc:	24015f3c 	.word	0x24015f3c
 801c5e0:	24015f50 	.word	0x24015f50
 801c5e4:	08022668 	.word	0x08022668
 801c5e8:	080226a0 	.word	0x080226a0
 801c5ec:	080226d8 	.word	0x080226d8
 801c5f0:	08022700 	.word	0x08022700

0801c5f4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801c5f4:	b580      	push	{r7, lr}
 801c5f6:	b082      	sub	sp, #8
 801c5f8:	af00      	add	r7, sp, #0
 801c5fa:	6078      	str	r0, [r7, #4]
 801c5fc:	460b      	mov	r3, r1
 801c5fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801c600:	78fb      	ldrb	r3, [r7, #3]
 801c602:	461a      	mov	r2, r3
 801c604:	2103      	movs	r1, #3
 801c606:	6878      	ldr	r0, [r7, #4]
 801c608:	f000 f814 	bl	801c634 <icmp_send_response>
}
 801c60c:	bf00      	nop
 801c60e:	3708      	adds	r7, #8
 801c610:	46bd      	mov	sp, r7
 801c612:	bd80      	pop	{r7, pc}

0801c614 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801c614:	b580      	push	{r7, lr}
 801c616:	b082      	sub	sp, #8
 801c618:	af00      	add	r7, sp, #0
 801c61a:	6078      	str	r0, [r7, #4]
 801c61c:	460b      	mov	r3, r1
 801c61e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801c620:	78fb      	ldrb	r3, [r7, #3]
 801c622:	461a      	mov	r2, r3
 801c624:	210b      	movs	r1, #11
 801c626:	6878      	ldr	r0, [r7, #4]
 801c628:	f000 f804 	bl	801c634 <icmp_send_response>
}
 801c62c:	bf00      	nop
 801c62e:	3708      	adds	r7, #8
 801c630:	46bd      	mov	sp, r7
 801c632:	bd80      	pop	{r7, pc}

0801c634 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801c634:	b580      	push	{r7, lr}
 801c636:	b08c      	sub	sp, #48	; 0x30
 801c638:	af04      	add	r7, sp, #16
 801c63a:	6078      	str	r0, [r7, #4]
 801c63c:	460b      	mov	r3, r1
 801c63e:	70fb      	strb	r3, [r7, #3]
 801c640:	4613      	mov	r3, r2
 801c642:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801c644:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c648:	2124      	movs	r1, #36	; 0x24
 801c64a:	2022      	movs	r0, #34	; 0x22
 801c64c:	f7f7 fcae 	bl	8013fac <pbuf_alloc>
 801c650:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801c652:	69fb      	ldr	r3, [r7, #28]
 801c654:	2b00      	cmp	r3, #0
 801c656:	d056      	beq.n	801c706 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801c658:	69fb      	ldr	r3, [r7, #28]
 801c65a:	895b      	ldrh	r3, [r3, #10]
 801c65c:	2b23      	cmp	r3, #35	; 0x23
 801c65e:	d806      	bhi.n	801c66e <icmp_send_response+0x3a>
 801c660:	4b2b      	ldr	r3, [pc, #172]	; (801c710 <icmp_send_response+0xdc>)
 801c662:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801c666:	492b      	ldr	r1, [pc, #172]	; (801c714 <icmp_send_response+0xe0>)
 801c668:	482b      	ldr	r0, [pc, #172]	; (801c718 <icmp_send_response+0xe4>)
 801c66a:	f001 fdeb 	bl	801e244 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	685b      	ldr	r3, [r3, #4]
 801c672:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801c674:	69fb      	ldr	r3, [r7, #28]
 801c676:	685b      	ldr	r3, [r3, #4]
 801c678:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801c67a:	697b      	ldr	r3, [r7, #20]
 801c67c:	78fa      	ldrb	r2, [r7, #3]
 801c67e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801c680:	697b      	ldr	r3, [r7, #20]
 801c682:	78ba      	ldrb	r2, [r7, #2]
 801c684:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801c686:	697b      	ldr	r3, [r7, #20]
 801c688:	2200      	movs	r2, #0
 801c68a:	711a      	strb	r2, [r3, #4]
 801c68c:	2200      	movs	r2, #0
 801c68e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801c690:	697b      	ldr	r3, [r7, #20]
 801c692:	2200      	movs	r2, #0
 801c694:	719a      	strb	r2, [r3, #6]
 801c696:	2200      	movs	r2, #0
 801c698:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801c69a:	69fb      	ldr	r3, [r7, #28]
 801c69c:	685b      	ldr	r3, [r3, #4]
 801c69e:	f103 0008 	add.w	r0, r3, #8
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	685b      	ldr	r3, [r3, #4]
 801c6a6:	221c      	movs	r2, #28
 801c6a8:	4619      	mov	r1, r3
 801c6aa:	f001 fd06 	bl	801e0ba <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801c6ae:	69bb      	ldr	r3, [r7, #24]
 801c6b0:	68db      	ldr	r3, [r3, #12]
 801c6b2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801c6b4:	f107 030c 	add.w	r3, r7, #12
 801c6b8:	4618      	mov	r0, r3
 801c6ba:	f000 f82f 	bl	801c71c <ip4_route>
 801c6be:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801c6c0:	693b      	ldr	r3, [r7, #16]
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d01b      	beq.n	801c6fe <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801c6c6:	697b      	ldr	r3, [r7, #20]
 801c6c8:	2200      	movs	r2, #0
 801c6ca:	709a      	strb	r2, [r3, #2]
 801c6cc:	2200      	movs	r2, #0
 801c6ce:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801c6d0:	69fb      	ldr	r3, [r7, #28]
 801c6d2:	895b      	ldrh	r3, [r3, #10]
 801c6d4:	4619      	mov	r1, r3
 801c6d6:	6978      	ldr	r0, [r7, #20]
 801c6d8:	f7f6 fb1e 	bl	8012d18 <inet_chksum>
 801c6dc:	4603      	mov	r3, r0
 801c6de:	461a      	mov	r2, r3
 801c6e0:	697b      	ldr	r3, [r7, #20]
 801c6e2:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801c6e4:	f107 020c 	add.w	r2, r7, #12
 801c6e8:	693b      	ldr	r3, [r7, #16]
 801c6ea:	9302      	str	r3, [sp, #8]
 801c6ec:	2301      	movs	r3, #1
 801c6ee:	9301      	str	r3, [sp, #4]
 801c6f0:	2300      	movs	r3, #0
 801c6f2:	9300      	str	r3, [sp, #0]
 801c6f4:	23ff      	movs	r3, #255	; 0xff
 801c6f6:	2100      	movs	r1, #0
 801c6f8:	69f8      	ldr	r0, [r7, #28]
 801c6fa:	f000 f9cd 	bl	801ca98 <ip4_output_if>
  }
  pbuf_free(q);
 801c6fe:	69f8      	ldr	r0, [r7, #28]
 801c700:	f7f7 ff3c 	bl	801457c <pbuf_free>
 801c704:	e000      	b.n	801c708 <icmp_send_response+0xd4>
    return;
 801c706:	bf00      	nop
}
 801c708:	3720      	adds	r7, #32
 801c70a:	46bd      	mov	sp, r7
 801c70c:	bd80      	pop	{r7, pc}
 801c70e:	bf00      	nop
 801c710:	08022668 	.word	0x08022668
 801c714:	08022734 	.word	0x08022734
 801c718:	080226d8 	.word	0x080226d8

0801c71c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801c71c:	b480      	push	{r7}
 801c71e:	b085      	sub	sp, #20
 801c720:	af00      	add	r7, sp, #0
 801c722:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801c724:	4b33      	ldr	r3, [pc, #204]	; (801c7f4 <ip4_route+0xd8>)
 801c726:	681b      	ldr	r3, [r3, #0]
 801c728:	60fb      	str	r3, [r7, #12]
 801c72a:	e036      	b.n	801c79a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c72c:	68fb      	ldr	r3, [r7, #12]
 801c72e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c732:	f003 0301 	and.w	r3, r3, #1
 801c736:	b2db      	uxtb	r3, r3
 801c738:	2b00      	cmp	r3, #0
 801c73a:	d02b      	beq.n	801c794 <ip4_route+0x78>
 801c73c:	68fb      	ldr	r3, [r7, #12]
 801c73e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c742:	089b      	lsrs	r3, r3, #2
 801c744:	f003 0301 	and.w	r3, r3, #1
 801c748:	b2db      	uxtb	r3, r3
 801c74a:	2b00      	cmp	r3, #0
 801c74c:	d022      	beq.n	801c794 <ip4_route+0x78>
 801c74e:	68fb      	ldr	r3, [r7, #12]
 801c750:	3304      	adds	r3, #4
 801c752:	681b      	ldr	r3, [r3, #0]
 801c754:	2b00      	cmp	r3, #0
 801c756:	d01d      	beq.n	801c794 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	681a      	ldr	r2, [r3, #0]
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	3304      	adds	r3, #4
 801c760:	681b      	ldr	r3, [r3, #0]
 801c762:	405a      	eors	r2, r3
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	3308      	adds	r3, #8
 801c768:	681b      	ldr	r3, [r3, #0]
 801c76a:	4013      	ands	r3, r2
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	d101      	bne.n	801c774 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	e038      	b.n	801c7e6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801c774:	68fb      	ldr	r3, [r7, #12]
 801c776:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c77a:	f003 0302 	and.w	r3, r3, #2
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d108      	bne.n	801c794 <ip4_route+0x78>
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	681a      	ldr	r2, [r3, #0]
 801c786:	68fb      	ldr	r3, [r7, #12]
 801c788:	330c      	adds	r3, #12
 801c78a:	681b      	ldr	r3, [r3, #0]
 801c78c:	429a      	cmp	r2, r3
 801c78e:	d101      	bne.n	801c794 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	e028      	b.n	801c7e6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801c794:	68fb      	ldr	r3, [r7, #12]
 801c796:	681b      	ldr	r3, [r3, #0]
 801c798:	60fb      	str	r3, [r7, #12]
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d1c5      	bne.n	801c72c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c7a0:	4b15      	ldr	r3, [pc, #84]	; (801c7f8 <ip4_route+0xdc>)
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	d01a      	beq.n	801c7de <ip4_route+0xc2>
 801c7a8:	4b13      	ldr	r3, [pc, #76]	; (801c7f8 <ip4_route+0xdc>)
 801c7aa:	681b      	ldr	r3, [r3, #0]
 801c7ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c7b0:	f003 0301 	and.w	r3, r3, #1
 801c7b4:	2b00      	cmp	r3, #0
 801c7b6:	d012      	beq.n	801c7de <ip4_route+0xc2>
 801c7b8:	4b0f      	ldr	r3, [pc, #60]	; (801c7f8 <ip4_route+0xdc>)
 801c7ba:	681b      	ldr	r3, [r3, #0]
 801c7bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c7c0:	f003 0304 	and.w	r3, r3, #4
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	d00a      	beq.n	801c7de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c7c8:	4b0b      	ldr	r3, [pc, #44]	; (801c7f8 <ip4_route+0xdc>)
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	3304      	adds	r3, #4
 801c7ce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c7d0:	2b00      	cmp	r3, #0
 801c7d2:	d004      	beq.n	801c7de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	b2db      	uxtb	r3, r3
 801c7da:	2b7f      	cmp	r3, #127	; 0x7f
 801c7dc:	d101      	bne.n	801c7e2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801c7de:	2300      	movs	r3, #0
 801c7e0:	e001      	b.n	801c7e6 <ip4_route+0xca>
  }

  return netif_default;
 801c7e2:	4b05      	ldr	r3, [pc, #20]	; (801c7f8 <ip4_route+0xdc>)
 801c7e4:	681b      	ldr	r3, [r3, #0]
}
 801c7e6:	4618      	mov	r0, r3
 801c7e8:	3714      	adds	r7, #20
 801c7ea:	46bd      	mov	sp, r7
 801c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7f0:	4770      	bx	lr
 801c7f2:	bf00      	nop
 801c7f4:	2405e9a0 	.word	0x2405e9a0
 801c7f8:	2405e9a4 	.word	0x2405e9a4

0801c7fc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801c7fc:	b580      	push	{r7, lr}
 801c7fe:	b082      	sub	sp, #8
 801c800:	af00      	add	r7, sp, #0
 801c802:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c80a:	f003 0301 	and.w	r3, r3, #1
 801c80e:	b2db      	uxtb	r3, r3
 801c810:	2b00      	cmp	r3, #0
 801c812:	d016      	beq.n	801c842 <ip4_input_accept+0x46>
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	3304      	adds	r3, #4
 801c818:	681b      	ldr	r3, [r3, #0]
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d011      	beq.n	801c842 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c81e:	4b0b      	ldr	r3, [pc, #44]	; (801c84c <ip4_input_accept+0x50>)
 801c820:	695a      	ldr	r2, [r3, #20]
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	3304      	adds	r3, #4
 801c826:	681b      	ldr	r3, [r3, #0]
 801c828:	429a      	cmp	r2, r3
 801c82a:	d008      	beq.n	801c83e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801c82c:	4b07      	ldr	r3, [pc, #28]	; (801c84c <ip4_input_accept+0x50>)
 801c82e:	695b      	ldr	r3, [r3, #20]
 801c830:	6879      	ldr	r1, [r7, #4]
 801c832:	4618      	mov	r0, r3
 801c834:	f000 fa08 	bl	801cc48 <ip4_addr_isbroadcast_u32>
 801c838:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d001      	beq.n	801c842 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801c83e:	2301      	movs	r3, #1
 801c840:	e000      	b.n	801c844 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801c842:	2300      	movs	r3, #0
}
 801c844:	4618      	mov	r0, r3
 801c846:	3708      	adds	r7, #8
 801c848:	46bd      	mov	sp, r7
 801c84a:	bd80      	pop	{r7, pc}
 801c84c:	24015f3c 	.word	0x24015f3c

0801c850 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801c850:	b580      	push	{r7, lr}
 801c852:	b086      	sub	sp, #24
 801c854:	af00      	add	r7, sp, #0
 801c856:	6078      	str	r0, [r7, #4]
 801c858:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	685b      	ldr	r3, [r3, #4]
 801c85e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801c860:	697b      	ldr	r3, [r7, #20]
 801c862:	781b      	ldrb	r3, [r3, #0]
 801c864:	091b      	lsrs	r3, r3, #4
 801c866:	b2db      	uxtb	r3, r3
 801c868:	2b04      	cmp	r3, #4
 801c86a:	d004      	beq.n	801c876 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801c86c:	6878      	ldr	r0, [r7, #4]
 801c86e:	f7f7 fe85 	bl	801457c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801c872:	2300      	movs	r3, #0
 801c874:	e107      	b.n	801ca86 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801c876:	697b      	ldr	r3, [r7, #20]
 801c878:	781b      	ldrb	r3, [r3, #0]
 801c87a:	f003 030f 	and.w	r3, r3, #15
 801c87e:	b2db      	uxtb	r3, r3
 801c880:	009b      	lsls	r3, r3, #2
 801c882:	b2db      	uxtb	r3, r3
 801c884:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801c886:	697b      	ldr	r3, [r7, #20]
 801c888:	885b      	ldrh	r3, [r3, #2]
 801c88a:	b29b      	uxth	r3, r3
 801c88c:	4618      	mov	r0, r3
 801c88e:	f7f6 f8fb 	bl	8012a88 <lwip_htons>
 801c892:	4603      	mov	r3, r0
 801c894:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801c896:	687b      	ldr	r3, [r7, #4]
 801c898:	891b      	ldrh	r3, [r3, #8]
 801c89a:	89ba      	ldrh	r2, [r7, #12]
 801c89c:	429a      	cmp	r2, r3
 801c89e:	d204      	bcs.n	801c8aa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801c8a0:	89bb      	ldrh	r3, [r7, #12]
 801c8a2:	4619      	mov	r1, r3
 801c8a4:	6878      	ldr	r0, [r7, #4]
 801c8a6:	f7f7 fce3 	bl	8014270 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	895b      	ldrh	r3, [r3, #10]
 801c8ae:	89fa      	ldrh	r2, [r7, #14]
 801c8b0:	429a      	cmp	r2, r3
 801c8b2:	d807      	bhi.n	801c8c4 <ip4_input+0x74>
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	891b      	ldrh	r3, [r3, #8]
 801c8b8:	89ba      	ldrh	r2, [r7, #12]
 801c8ba:	429a      	cmp	r2, r3
 801c8bc:	d802      	bhi.n	801c8c4 <ip4_input+0x74>
 801c8be:	89fb      	ldrh	r3, [r7, #14]
 801c8c0:	2b13      	cmp	r3, #19
 801c8c2:	d804      	bhi.n	801c8ce <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801c8c4:	6878      	ldr	r0, [r7, #4]
 801c8c6:	f7f7 fe59 	bl	801457c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801c8ca:	2300      	movs	r3, #0
 801c8cc:	e0db      	b.n	801ca86 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801c8ce:	697b      	ldr	r3, [r7, #20]
 801c8d0:	691b      	ldr	r3, [r3, #16]
 801c8d2:	4a6f      	ldr	r2, [pc, #444]	; (801ca90 <ip4_input+0x240>)
 801c8d4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801c8d6:	697b      	ldr	r3, [r7, #20]
 801c8d8:	68db      	ldr	r3, [r3, #12]
 801c8da:	4a6d      	ldr	r2, [pc, #436]	; (801ca90 <ip4_input+0x240>)
 801c8dc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c8de:	4b6c      	ldr	r3, [pc, #432]	; (801ca90 <ip4_input+0x240>)
 801c8e0:	695b      	ldr	r3, [r3, #20]
 801c8e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c8e6:	2be0      	cmp	r3, #224	; 0xe0
 801c8e8:	d112      	bne.n	801c910 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801c8ea:	683b      	ldr	r3, [r7, #0]
 801c8ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c8f0:	f003 0301 	and.w	r3, r3, #1
 801c8f4:	b2db      	uxtb	r3, r3
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d007      	beq.n	801c90a <ip4_input+0xba>
 801c8fa:	683b      	ldr	r3, [r7, #0]
 801c8fc:	3304      	adds	r3, #4
 801c8fe:	681b      	ldr	r3, [r3, #0]
 801c900:	2b00      	cmp	r3, #0
 801c902:	d002      	beq.n	801c90a <ip4_input+0xba>
      netif = inp;
 801c904:	683b      	ldr	r3, [r7, #0]
 801c906:	613b      	str	r3, [r7, #16]
 801c908:	e02a      	b.n	801c960 <ip4_input+0x110>
    } else {
      netif = NULL;
 801c90a:	2300      	movs	r3, #0
 801c90c:	613b      	str	r3, [r7, #16]
 801c90e:	e027      	b.n	801c960 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801c910:	6838      	ldr	r0, [r7, #0]
 801c912:	f7ff ff73 	bl	801c7fc <ip4_input_accept>
 801c916:	4603      	mov	r3, r0
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d002      	beq.n	801c922 <ip4_input+0xd2>
      netif = inp;
 801c91c:	683b      	ldr	r3, [r7, #0]
 801c91e:	613b      	str	r3, [r7, #16]
 801c920:	e01e      	b.n	801c960 <ip4_input+0x110>
    } else {
      netif = NULL;
 801c922:	2300      	movs	r3, #0
 801c924:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801c926:	4b5a      	ldr	r3, [pc, #360]	; (801ca90 <ip4_input+0x240>)
 801c928:	695b      	ldr	r3, [r3, #20]
 801c92a:	b2db      	uxtb	r3, r3
 801c92c:	2b7f      	cmp	r3, #127	; 0x7f
 801c92e:	d017      	beq.n	801c960 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801c930:	4b58      	ldr	r3, [pc, #352]	; (801ca94 <ip4_input+0x244>)
 801c932:	681b      	ldr	r3, [r3, #0]
 801c934:	613b      	str	r3, [r7, #16]
 801c936:	e00e      	b.n	801c956 <ip4_input+0x106>
          if (netif == inp) {
 801c938:	693a      	ldr	r2, [r7, #16]
 801c93a:	683b      	ldr	r3, [r7, #0]
 801c93c:	429a      	cmp	r2, r3
 801c93e:	d006      	beq.n	801c94e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801c940:	6938      	ldr	r0, [r7, #16]
 801c942:	f7ff ff5b 	bl	801c7fc <ip4_input_accept>
 801c946:	4603      	mov	r3, r0
 801c948:	2b00      	cmp	r3, #0
 801c94a:	d108      	bne.n	801c95e <ip4_input+0x10e>
 801c94c:	e000      	b.n	801c950 <ip4_input+0x100>
            continue;
 801c94e:	bf00      	nop
        NETIF_FOREACH(netif) {
 801c950:	693b      	ldr	r3, [r7, #16]
 801c952:	681b      	ldr	r3, [r3, #0]
 801c954:	613b      	str	r3, [r7, #16]
 801c956:	693b      	ldr	r3, [r7, #16]
 801c958:	2b00      	cmp	r3, #0
 801c95a:	d1ed      	bne.n	801c938 <ip4_input+0xe8>
 801c95c:	e000      	b.n	801c960 <ip4_input+0x110>
            break;
 801c95e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c960:	4b4b      	ldr	r3, [pc, #300]	; (801ca90 <ip4_input+0x240>)
 801c962:	691b      	ldr	r3, [r3, #16]
 801c964:	6839      	ldr	r1, [r7, #0]
 801c966:	4618      	mov	r0, r3
 801c968:	f000 f96e 	bl	801cc48 <ip4_addr_isbroadcast_u32>
 801c96c:	4603      	mov	r3, r0
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d105      	bne.n	801c97e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801c972:	4b47      	ldr	r3, [pc, #284]	; (801ca90 <ip4_input+0x240>)
 801c974:	691b      	ldr	r3, [r3, #16]
 801c976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c97a:	2be0      	cmp	r3, #224	; 0xe0
 801c97c:	d104      	bne.n	801c988 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801c97e:	6878      	ldr	r0, [r7, #4]
 801c980:	f7f7 fdfc 	bl	801457c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801c984:	2300      	movs	r3, #0
 801c986:	e07e      	b.n	801ca86 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801c988:	693b      	ldr	r3, [r7, #16]
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d104      	bne.n	801c998 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801c98e:	6878      	ldr	r0, [r7, #4]
 801c990:	f7f7 fdf4 	bl	801457c <pbuf_free>
    return ERR_OK;
 801c994:	2300      	movs	r3, #0
 801c996:	e076      	b.n	801ca86 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801c998:	697b      	ldr	r3, [r7, #20]
 801c99a:	88db      	ldrh	r3, [r3, #6]
 801c99c:	b29b      	uxth	r3, r3
 801c99e:	461a      	mov	r2, r3
 801c9a0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801c9a4:	4013      	ands	r3, r2
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	d00b      	beq.n	801c9c2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801c9aa:	6878      	ldr	r0, [r7, #4]
 801c9ac:	f000 fc92 	bl	801d2d4 <ip4_reass>
 801c9b0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d101      	bne.n	801c9bc <ip4_input+0x16c>
      return ERR_OK;
 801c9b8:	2300      	movs	r3, #0
 801c9ba:	e064      	b.n	801ca86 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	685b      	ldr	r3, [r3, #4]
 801c9c0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801c9c2:	4a33      	ldr	r2, [pc, #204]	; (801ca90 <ip4_input+0x240>)
 801c9c4:	693b      	ldr	r3, [r7, #16]
 801c9c6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801c9c8:	4a31      	ldr	r2, [pc, #196]	; (801ca90 <ip4_input+0x240>)
 801c9ca:	683b      	ldr	r3, [r7, #0]
 801c9cc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801c9ce:	4a30      	ldr	r2, [pc, #192]	; (801ca90 <ip4_input+0x240>)
 801c9d0:	697b      	ldr	r3, [r7, #20]
 801c9d2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801c9d4:	697b      	ldr	r3, [r7, #20]
 801c9d6:	781b      	ldrb	r3, [r3, #0]
 801c9d8:	f003 030f 	and.w	r3, r3, #15
 801c9dc:	b2db      	uxtb	r3, r3
 801c9de:	009b      	lsls	r3, r3, #2
 801c9e0:	b2db      	uxtb	r3, r3
 801c9e2:	b29a      	uxth	r2, r3
 801c9e4:	4b2a      	ldr	r3, [pc, #168]	; (801ca90 <ip4_input+0x240>)
 801c9e6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801c9e8:	89fb      	ldrh	r3, [r7, #14]
 801c9ea:	4619      	mov	r1, r3
 801c9ec:	6878      	ldr	r0, [r7, #4]
 801c9ee:	f7f7 fd3f 	bl	8014470 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801c9f2:	697b      	ldr	r3, [r7, #20]
 801c9f4:	7a5b      	ldrb	r3, [r3, #9]
 801c9f6:	2b11      	cmp	r3, #17
 801c9f8:	d006      	beq.n	801ca08 <ip4_input+0x1b8>
 801c9fa:	2b11      	cmp	r3, #17
 801c9fc:	dc13      	bgt.n	801ca26 <ip4_input+0x1d6>
 801c9fe:	2b01      	cmp	r3, #1
 801ca00:	d00c      	beq.n	801ca1c <ip4_input+0x1cc>
 801ca02:	2b06      	cmp	r3, #6
 801ca04:	d005      	beq.n	801ca12 <ip4_input+0x1c2>
 801ca06:	e00e      	b.n	801ca26 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801ca08:	6839      	ldr	r1, [r7, #0]
 801ca0a:	6878      	ldr	r0, [r7, #4]
 801ca0c:	f7fe fb34 	bl	801b078 <udp_input>
        break;
 801ca10:	e026      	b.n	801ca60 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801ca12:	6839      	ldr	r1, [r7, #0]
 801ca14:	6878      	ldr	r0, [r7, #4]
 801ca16:	f7f9 feb7 	bl	8016788 <tcp_input>
        break;
 801ca1a:	e021      	b.n	801ca60 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801ca1c:	6839      	ldr	r1, [r7, #0]
 801ca1e:	6878      	ldr	r0, [r7, #4]
 801ca20:	f7ff fcc8 	bl	801c3b4 <icmp_input>
        break;
 801ca24:	e01c      	b.n	801ca60 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ca26:	4b1a      	ldr	r3, [pc, #104]	; (801ca90 <ip4_input+0x240>)
 801ca28:	695b      	ldr	r3, [r3, #20]
 801ca2a:	6939      	ldr	r1, [r7, #16]
 801ca2c:	4618      	mov	r0, r3
 801ca2e:	f000 f90b 	bl	801cc48 <ip4_addr_isbroadcast_u32>
 801ca32:	4603      	mov	r3, r0
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d10f      	bne.n	801ca58 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ca38:	4b15      	ldr	r3, [pc, #84]	; (801ca90 <ip4_input+0x240>)
 801ca3a:	695b      	ldr	r3, [r3, #20]
 801ca3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ca40:	2be0      	cmp	r3, #224	; 0xe0
 801ca42:	d009      	beq.n	801ca58 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801ca44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ca48:	4619      	mov	r1, r3
 801ca4a:	6878      	ldr	r0, [r7, #4]
 801ca4c:	f7f7 fd83 	bl	8014556 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801ca50:	2102      	movs	r1, #2
 801ca52:	6878      	ldr	r0, [r7, #4]
 801ca54:	f7ff fdce 	bl	801c5f4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801ca58:	6878      	ldr	r0, [r7, #4]
 801ca5a:	f7f7 fd8f 	bl	801457c <pbuf_free>
        break;
 801ca5e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801ca60:	4b0b      	ldr	r3, [pc, #44]	; (801ca90 <ip4_input+0x240>)
 801ca62:	2200      	movs	r2, #0
 801ca64:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801ca66:	4b0a      	ldr	r3, [pc, #40]	; (801ca90 <ip4_input+0x240>)
 801ca68:	2200      	movs	r2, #0
 801ca6a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801ca6c:	4b08      	ldr	r3, [pc, #32]	; (801ca90 <ip4_input+0x240>)
 801ca6e:	2200      	movs	r2, #0
 801ca70:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801ca72:	4b07      	ldr	r3, [pc, #28]	; (801ca90 <ip4_input+0x240>)
 801ca74:	2200      	movs	r2, #0
 801ca76:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801ca78:	4b05      	ldr	r3, [pc, #20]	; (801ca90 <ip4_input+0x240>)
 801ca7a:	2200      	movs	r2, #0
 801ca7c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801ca7e:	4b04      	ldr	r3, [pc, #16]	; (801ca90 <ip4_input+0x240>)
 801ca80:	2200      	movs	r2, #0
 801ca82:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801ca84:	2300      	movs	r3, #0
}
 801ca86:	4618      	mov	r0, r3
 801ca88:	3718      	adds	r7, #24
 801ca8a:	46bd      	mov	sp, r7
 801ca8c:	bd80      	pop	{r7, pc}
 801ca8e:	bf00      	nop
 801ca90:	24015f3c 	.word	0x24015f3c
 801ca94:	2405e9a0 	.word	0x2405e9a0

0801ca98 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801ca98:	b580      	push	{r7, lr}
 801ca9a:	b08a      	sub	sp, #40	; 0x28
 801ca9c:	af04      	add	r7, sp, #16
 801ca9e:	60f8      	str	r0, [r7, #12]
 801caa0:	60b9      	str	r1, [r7, #8]
 801caa2:	607a      	str	r2, [r7, #4]
 801caa4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801caa6:	68bb      	ldr	r3, [r7, #8]
 801caa8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	2b00      	cmp	r3, #0
 801caae:	d009      	beq.n	801cac4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801cab0:	68bb      	ldr	r3, [r7, #8]
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d003      	beq.n	801cabe <ip4_output_if+0x26>
 801cab6:	68bb      	ldr	r3, [r7, #8]
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	2b00      	cmp	r3, #0
 801cabc:	d102      	bne.n	801cac4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801cabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cac0:	3304      	adds	r3, #4
 801cac2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801cac4:	78fa      	ldrb	r2, [r7, #3]
 801cac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cac8:	9302      	str	r3, [sp, #8]
 801caca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801cace:	9301      	str	r3, [sp, #4]
 801cad0:	f897 3020 	ldrb.w	r3, [r7, #32]
 801cad4:	9300      	str	r3, [sp, #0]
 801cad6:	4613      	mov	r3, r2
 801cad8:	687a      	ldr	r2, [r7, #4]
 801cada:	6979      	ldr	r1, [r7, #20]
 801cadc:	68f8      	ldr	r0, [r7, #12]
 801cade:	f000 f805 	bl	801caec <ip4_output_if_src>
 801cae2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801cae4:	4618      	mov	r0, r3
 801cae6:	3718      	adds	r7, #24
 801cae8:	46bd      	mov	sp, r7
 801caea:	bd80      	pop	{r7, pc}

0801caec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801caec:	b580      	push	{r7, lr}
 801caee:	b088      	sub	sp, #32
 801caf0:	af00      	add	r7, sp, #0
 801caf2:	60f8      	str	r0, [r7, #12]
 801caf4:	60b9      	str	r1, [r7, #8]
 801caf6:	607a      	str	r2, [r7, #4]
 801caf8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801cafa:	68fb      	ldr	r3, [r7, #12]
 801cafc:	7b9b      	ldrb	r3, [r3, #14]
 801cafe:	2b01      	cmp	r3, #1
 801cb00:	d006      	beq.n	801cb10 <ip4_output_if_src+0x24>
 801cb02:	4b4b      	ldr	r3, [pc, #300]	; (801cc30 <ip4_output_if_src+0x144>)
 801cb04:	f44f 7255 	mov.w	r2, #852	; 0x354
 801cb08:	494a      	ldr	r1, [pc, #296]	; (801cc34 <ip4_output_if_src+0x148>)
 801cb0a:	484b      	ldr	r0, [pc, #300]	; (801cc38 <ip4_output_if_src+0x14c>)
 801cb0c:	f001 fb9a 	bl	801e244 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801cb10:	687b      	ldr	r3, [r7, #4]
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	d060      	beq.n	801cbd8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801cb16:	2314      	movs	r3, #20
 801cb18:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801cb1a:	2114      	movs	r1, #20
 801cb1c:	68f8      	ldr	r0, [r7, #12]
 801cb1e:	f7f7 fc97 	bl	8014450 <pbuf_add_header>
 801cb22:	4603      	mov	r3, r0
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	d002      	beq.n	801cb2e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801cb28:	f06f 0301 	mvn.w	r3, #1
 801cb2c:	e07c      	b.n	801cc28 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	685b      	ldr	r3, [r3, #4]
 801cb32:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801cb34:	68fb      	ldr	r3, [r7, #12]
 801cb36:	895b      	ldrh	r3, [r3, #10]
 801cb38:	2b13      	cmp	r3, #19
 801cb3a:	d806      	bhi.n	801cb4a <ip4_output_if_src+0x5e>
 801cb3c:	4b3c      	ldr	r3, [pc, #240]	; (801cc30 <ip4_output_if_src+0x144>)
 801cb3e:	f44f 7262 	mov.w	r2, #904	; 0x388
 801cb42:	493e      	ldr	r1, [pc, #248]	; (801cc3c <ip4_output_if_src+0x150>)
 801cb44:	483c      	ldr	r0, [pc, #240]	; (801cc38 <ip4_output_if_src+0x14c>)
 801cb46:	f001 fb7d 	bl	801e244 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801cb4a:	69fb      	ldr	r3, [r7, #28]
 801cb4c:	78fa      	ldrb	r2, [r7, #3]
 801cb4e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801cb50:	69fb      	ldr	r3, [r7, #28]
 801cb52:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801cb56:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	681a      	ldr	r2, [r3, #0]
 801cb5c:	69fb      	ldr	r3, [r7, #28]
 801cb5e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801cb60:	8b7b      	ldrh	r3, [r7, #26]
 801cb62:	089b      	lsrs	r3, r3, #2
 801cb64:	b29b      	uxth	r3, r3
 801cb66:	b2db      	uxtb	r3, r3
 801cb68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cb6c:	b2da      	uxtb	r2, r3
 801cb6e:	69fb      	ldr	r3, [r7, #28]
 801cb70:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801cb72:	69fb      	ldr	r3, [r7, #28]
 801cb74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801cb78:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801cb7a:	68fb      	ldr	r3, [r7, #12]
 801cb7c:	891b      	ldrh	r3, [r3, #8]
 801cb7e:	4618      	mov	r0, r3
 801cb80:	f7f5 ff82 	bl	8012a88 <lwip_htons>
 801cb84:	4603      	mov	r3, r0
 801cb86:	461a      	mov	r2, r3
 801cb88:	69fb      	ldr	r3, [r7, #28]
 801cb8a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801cb8c:	69fb      	ldr	r3, [r7, #28]
 801cb8e:	2200      	movs	r2, #0
 801cb90:	719a      	strb	r2, [r3, #6]
 801cb92:	2200      	movs	r2, #0
 801cb94:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801cb96:	4b2a      	ldr	r3, [pc, #168]	; (801cc40 <ip4_output_if_src+0x154>)
 801cb98:	881b      	ldrh	r3, [r3, #0]
 801cb9a:	4618      	mov	r0, r3
 801cb9c:	f7f5 ff74 	bl	8012a88 <lwip_htons>
 801cba0:	4603      	mov	r3, r0
 801cba2:	461a      	mov	r2, r3
 801cba4:	69fb      	ldr	r3, [r7, #28]
 801cba6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801cba8:	4b25      	ldr	r3, [pc, #148]	; (801cc40 <ip4_output_if_src+0x154>)
 801cbaa:	881b      	ldrh	r3, [r3, #0]
 801cbac:	3301      	adds	r3, #1
 801cbae:	b29a      	uxth	r2, r3
 801cbb0:	4b23      	ldr	r3, [pc, #140]	; (801cc40 <ip4_output_if_src+0x154>)
 801cbb2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801cbb4:	68bb      	ldr	r3, [r7, #8]
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d104      	bne.n	801cbc4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801cbba:	4b22      	ldr	r3, [pc, #136]	; (801cc44 <ip4_output_if_src+0x158>)
 801cbbc:	681a      	ldr	r2, [r3, #0]
 801cbbe:	69fb      	ldr	r3, [r7, #28]
 801cbc0:	60da      	str	r2, [r3, #12]
 801cbc2:	e003      	b.n	801cbcc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801cbc4:	68bb      	ldr	r3, [r7, #8]
 801cbc6:	681a      	ldr	r2, [r3, #0]
 801cbc8:	69fb      	ldr	r3, [r7, #28]
 801cbca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801cbcc:	69fb      	ldr	r3, [r7, #28]
 801cbce:	2200      	movs	r2, #0
 801cbd0:	729a      	strb	r2, [r3, #10]
 801cbd2:	2200      	movs	r2, #0
 801cbd4:	72da      	strb	r2, [r3, #11]
 801cbd6:	e00f      	b.n	801cbf8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801cbd8:	68fb      	ldr	r3, [r7, #12]
 801cbda:	895b      	ldrh	r3, [r3, #10]
 801cbdc:	2b13      	cmp	r3, #19
 801cbde:	d802      	bhi.n	801cbe6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801cbe0:	f06f 0301 	mvn.w	r3, #1
 801cbe4:	e020      	b.n	801cc28 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	685b      	ldr	r3, [r3, #4]
 801cbea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801cbec:	69fb      	ldr	r3, [r7, #28]
 801cbee:	691b      	ldr	r3, [r3, #16]
 801cbf0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801cbf2:	f107 0314 	add.w	r3, r7, #20
 801cbf6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801cbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cbfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d00c      	beq.n	801cc1a <ip4_output_if_src+0x12e>
 801cc00:	68fb      	ldr	r3, [r7, #12]
 801cc02:	891a      	ldrh	r2, [r3, #8]
 801cc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801cc08:	429a      	cmp	r2, r3
 801cc0a:	d906      	bls.n	801cc1a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801cc0c:	687a      	ldr	r2, [r7, #4]
 801cc0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801cc10:	68f8      	ldr	r0, [r7, #12]
 801cc12:	f000 fd53 	bl	801d6bc <ip4_frag>
 801cc16:	4603      	mov	r3, r0
 801cc18:	e006      	b.n	801cc28 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801cc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc1c:	695b      	ldr	r3, [r3, #20]
 801cc1e:	687a      	ldr	r2, [r7, #4]
 801cc20:	68f9      	ldr	r1, [r7, #12]
 801cc22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cc24:	4798      	blx	r3
 801cc26:	4603      	mov	r3, r0
}
 801cc28:	4618      	mov	r0, r3
 801cc2a:	3720      	adds	r7, #32
 801cc2c:	46bd      	mov	sp, r7
 801cc2e:	bd80      	pop	{r7, pc}
 801cc30:	08022760 	.word	0x08022760
 801cc34:	08022794 	.word	0x08022794
 801cc38:	080227a0 	.word	0x080227a0
 801cc3c:	080227c8 	.word	0x080227c8
 801cc40:	2405eafe 	.word	0x2405eafe
 801cc44:	08022c78 	.word	0x08022c78

0801cc48 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801cc48:	b480      	push	{r7}
 801cc4a:	b085      	sub	sp, #20
 801cc4c:	af00      	add	r7, sp, #0
 801cc4e:	6078      	str	r0, [r7, #4]
 801cc50:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801cc56:	687b      	ldr	r3, [r7, #4]
 801cc58:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cc5c:	d002      	beq.n	801cc64 <ip4_addr_isbroadcast_u32+0x1c>
 801cc5e:	687b      	ldr	r3, [r7, #4]
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	d101      	bne.n	801cc68 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801cc64:	2301      	movs	r3, #1
 801cc66:	e02a      	b.n	801ccbe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801cc68:	683b      	ldr	r3, [r7, #0]
 801cc6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801cc6e:	f003 0302 	and.w	r3, r3, #2
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d101      	bne.n	801cc7a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801cc76:	2300      	movs	r3, #0
 801cc78:	e021      	b.n	801ccbe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801cc7a:	683b      	ldr	r3, [r7, #0]
 801cc7c:	3304      	adds	r3, #4
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	687a      	ldr	r2, [r7, #4]
 801cc82:	429a      	cmp	r2, r3
 801cc84:	d101      	bne.n	801cc8a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801cc86:	2300      	movs	r3, #0
 801cc88:	e019      	b.n	801ccbe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801cc8a:	68fa      	ldr	r2, [r7, #12]
 801cc8c:	683b      	ldr	r3, [r7, #0]
 801cc8e:	3304      	adds	r3, #4
 801cc90:	681b      	ldr	r3, [r3, #0]
 801cc92:	405a      	eors	r2, r3
 801cc94:	683b      	ldr	r3, [r7, #0]
 801cc96:	3308      	adds	r3, #8
 801cc98:	681b      	ldr	r3, [r3, #0]
 801cc9a:	4013      	ands	r3, r2
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	d10d      	bne.n	801ccbc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801cca0:	683b      	ldr	r3, [r7, #0]
 801cca2:	3308      	adds	r3, #8
 801cca4:	681b      	ldr	r3, [r3, #0]
 801cca6:	43da      	mvns	r2, r3
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801ccac:	683b      	ldr	r3, [r7, #0]
 801ccae:	3308      	adds	r3, #8
 801ccb0:	681b      	ldr	r3, [r3, #0]
 801ccb2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801ccb4:	429a      	cmp	r2, r3
 801ccb6:	d101      	bne.n	801ccbc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801ccb8:	2301      	movs	r3, #1
 801ccba:	e000      	b.n	801ccbe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801ccbc:	2300      	movs	r3, #0
  }
}
 801ccbe:	4618      	mov	r0, r3
 801ccc0:	3714      	adds	r7, #20
 801ccc2:	46bd      	mov	sp, r7
 801ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccc8:	4770      	bx	lr
	...

0801cccc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801cccc:	b580      	push	{r7, lr}
 801ccce:	b084      	sub	sp, #16
 801ccd0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801ccd2:	2300      	movs	r3, #0
 801ccd4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801ccd6:	4b12      	ldr	r3, [pc, #72]	; (801cd20 <ip_reass_tmr+0x54>)
 801ccd8:	681b      	ldr	r3, [r3, #0]
 801ccda:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801ccdc:	e018      	b.n	801cd10 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801ccde:	68fb      	ldr	r3, [r7, #12]
 801cce0:	7fdb      	ldrb	r3, [r3, #31]
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	d00b      	beq.n	801ccfe <ip_reass_tmr+0x32>
      r->timer--;
 801cce6:	68fb      	ldr	r3, [r7, #12]
 801cce8:	7fdb      	ldrb	r3, [r3, #31]
 801ccea:	3b01      	subs	r3, #1
 801ccec:	b2da      	uxtb	r2, r3
 801ccee:	68fb      	ldr	r3, [r7, #12]
 801ccf0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801ccf2:	68fb      	ldr	r3, [r7, #12]
 801ccf4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801ccf6:	68fb      	ldr	r3, [r7, #12]
 801ccf8:	681b      	ldr	r3, [r3, #0]
 801ccfa:	60fb      	str	r3, [r7, #12]
 801ccfc:	e008      	b.n	801cd10 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801ccfe:	68fb      	ldr	r3, [r7, #12]
 801cd00:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801cd02:	68fb      	ldr	r3, [r7, #12]
 801cd04:	681b      	ldr	r3, [r3, #0]
 801cd06:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801cd08:	68b9      	ldr	r1, [r7, #8]
 801cd0a:	6878      	ldr	r0, [r7, #4]
 801cd0c:	f000 f80a 	bl	801cd24 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801cd10:	68fb      	ldr	r3, [r7, #12]
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d1e3      	bne.n	801ccde <ip_reass_tmr+0x12>
    }
  }
}
 801cd16:	bf00      	nop
 801cd18:	bf00      	nop
 801cd1a:	3710      	adds	r7, #16
 801cd1c:	46bd      	mov	sp, r7
 801cd1e:	bd80      	pop	{r7, pc}
 801cd20:	2405eb00 	.word	0x2405eb00

0801cd24 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801cd24:	b580      	push	{r7, lr}
 801cd26:	b088      	sub	sp, #32
 801cd28:	af00      	add	r7, sp, #0
 801cd2a:	6078      	str	r0, [r7, #4]
 801cd2c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801cd2e:	2300      	movs	r3, #0
 801cd30:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801cd32:	683a      	ldr	r2, [r7, #0]
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	429a      	cmp	r2, r3
 801cd38:	d105      	bne.n	801cd46 <ip_reass_free_complete_datagram+0x22>
 801cd3a:	4b45      	ldr	r3, [pc, #276]	; (801ce50 <ip_reass_free_complete_datagram+0x12c>)
 801cd3c:	22ab      	movs	r2, #171	; 0xab
 801cd3e:	4945      	ldr	r1, [pc, #276]	; (801ce54 <ip_reass_free_complete_datagram+0x130>)
 801cd40:	4845      	ldr	r0, [pc, #276]	; (801ce58 <ip_reass_free_complete_datagram+0x134>)
 801cd42:	f001 fa7f 	bl	801e244 <iprintf>
  if (prev != NULL) {
 801cd46:	683b      	ldr	r3, [r7, #0]
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d00a      	beq.n	801cd62 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801cd4c:	683b      	ldr	r3, [r7, #0]
 801cd4e:	681b      	ldr	r3, [r3, #0]
 801cd50:	687a      	ldr	r2, [r7, #4]
 801cd52:	429a      	cmp	r2, r3
 801cd54:	d005      	beq.n	801cd62 <ip_reass_free_complete_datagram+0x3e>
 801cd56:	4b3e      	ldr	r3, [pc, #248]	; (801ce50 <ip_reass_free_complete_datagram+0x12c>)
 801cd58:	22ad      	movs	r2, #173	; 0xad
 801cd5a:	4940      	ldr	r1, [pc, #256]	; (801ce5c <ip_reass_free_complete_datagram+0x138>)
 801cd5c:	483e      	ldr	r0, [pc, #248]	; (801ce58 <ip_reass_free_complete_datagram+0x134>)
 801cd5e:	f001 fa71 	bl	801e244 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	685b      	ldr	r3, [r3, #4]
 801cd66:	685b      	ldr	r3, [r3, #4]
 801cd68:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801cd6a:	697b      	ldr	r3, [r7, #20]
 801cd6c:	889b      	ldrh	r3, [r3, #4]
 801cd6e:	b29b      	uxth	r3, r3
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d12a      	bne.n	801cdca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	685b      	ldr	r3, [r3, #4]
 801cd78:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801cd7a:	697b      	ldr	r3, [r7, #20]
 801cd7c:	681a      	ldr	r2, [r3, #0]
 801cd7e:	687b      	ldr	r3, [r7, #4]
 801cd80:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801cd82:	69bb      	ldr	r3, [r7, #24]
 801cd84:	6858      	ldr	r0, [r3, #4]
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	3308      	adds	r3, #8
 801cd8a:	2214      	movs	r2, #20
 801cd8c:	4619      	mov	r1, r3
 801cd8e:	f001 f994 	bl	801e0ba <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801cd92:	2101      	movs	r1, #1
 801cd94:	69b8      	ldr	r0, [r7, #24]
 801cd96:	f7ff fc3d 	bl	801c614 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801cd9a:	69b8      	ldr	r0, [r7, #24]
 801cd9c:	f7f7 fc7c 	bl	8014698 <pbuf_clen>
 801cda0:	4603      	mov	r3, r0
 801cda2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cda4:	8bfa      	ldrh	r2, [r7, #30]
 801cda6:	8a7b      	ldrh	r3, [r7, #18]
 801cda8:	4413      	add	r3, r2
 801cdaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cdae:	db05      	blt.n	801cdbc <ip_reass_free_complete_datagram+0x98>
 801cdb0:	4b27      	ldr	r3, [pc, #156]	; (801ce50 <ip_reass_free_complete_datagram+0x12c>)
 801cdb2:	22bc      	movs	r2, #188	; 0xbc
 801cdb4:	492a      	ldr	r1, [pc, #168]	; (801ce60 <ip_reass_free_complete_datagram+0x13c>)
 801cdb6:	4828      	ldr	r0, [pc, #160]	; (801ce58 <ip_reass_free_complete_datagram+0x134>)
 801cdb8:	f001 fa44 	bl	801e244 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801cdbc:	8bfa      	ldrh	r2, [r7, #30]
 801cdbe:	8a7b      	ldrh	r3, [r7, #18]
 801cdc0:	4413      	add	r3, r2
 801cdc2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801cdc4:	69b8      	ldr	r0, [r7, #24]
 801cdc6:	f7f7 fbd9 	bl	801457c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	685b      	ldr	r3, [r3, #4]
 801cdce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801cdd0:	e01f      	b.n	801ce12 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801cdd2:	69bb      	ldr	r3, [r7, #24]
 801cdd4:	685b      	ldr	r3, [r3, #4]
 801cdd6:	617b      	str	r3, [r7, #20]
    pcur = p;
 801cdd8:	69bb      	ldr	r3, [r7, #24]
 801cdda:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801cddc:	697b      	ldr	r3, [r7, #20]
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801cde2:	68f8      	ldr	r0, [r7, #12]
 801cde4:	f7f7 fc58 	bl	8014698 <pbuf_clen>
 801cde8:	4603      	mov	r3, r0
 801cdea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cdec:	8bfa      	ldrh	r2, [r7, #30]
 801cdee:	8a7b      	ldrh	r3, [r7, #18]
 801cdf0:	4413      	add	r3, r2
 801cdf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cdf6:	db05      	blt.n	801ce04 <ip_reass_free_complete_datagram+0xe0>
 801cdf8:	4b15      	ldr	r3, [pc, #84]	; (801ce50 <ip_reass_free_complete_datagram+0x12c>)
 801cdfa:	22cc      	movs	r2, #204	; 0xcc
 801cdfc:	4918      	ldr	r1, [pc, #96]	; (801ce60 <ip_reass_free_complete_datagram+0x13c>)
 801cdfe:	4816      	ldr	r0, [pc, #88]	; (801ce58 <ip_reass_free_complete_datagram+0x134>)
 801ce00:	f001 fa20 	bl	801e244 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ce04:	8bfa      	ldrh	r2, [r7, #30]
 801ce06:	8a7b      	ldrh	r3, [r7, #18]
 801ce08:	4413      	add	r3, r2
 801ce0a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801ce0c:	68f8      	ldr	r0, [r7, #12]
 801ce0e:	f7f7 fbb5 	bl	801457c <pbuf_free>
  while (p != NULL) {
 801ce12:	69bb      	ldr	r3, [r7, #24]
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	d1dc      	bne.n	801cdd2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801ce18:	6839      	ldr	r1, [r7, #0]
 801ce1a:	6878      	ldr	r0, [r7, #4]
 801ce1c:	f000 f8c2 	bl	801cfa4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801ce20:	4b10      	ldr	r3, [pc, #64]	; (801ce64 <ip_reass_free_complete_datagram+0x140>)
 801ce22:	881b      	ldrh	r3, [r3, #0]
 801ce24:	8bfa      	ldrh	r2, [r7, #30]
 801ce26:	429a      	cmp	r2, r3
 801ce28:	d905      	bls.n	801ce36 <ip_reass_free_complete_datagram+0x112>
 801ce2a:	4b09      	ldr	r3, [pc, #36]	; (801ce50 <ip_reass_free_complete_datagram+0x12c>)
 801ce2c:	22d2      	movs	r2, #210	; 0xd2
 801ce2e:	490e      	ldr	r1, [pc, #56]	; (801ce68 <ip_reass_free_complete_datagram+0x144>)
 801ce30:	4809      	ldr	r0, [pc, #36]	; (801ce58 <ip_reass_free_complete_datagram+0x134>)
 801ce32:	f001 fa07 	bl	801e244 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801ce36:	4b0b      	ldr	r3, [pc, #44]	; (801ce64 <ip_reass_free_complete_datagram+0x140>)
 801ce38:	881a      	ldrh	r2, [r3, #0]
 801ce3a:	8bfb      	ldrh	r3, [r7, #30]
 801ce3c:	1ad3      	subs	r3, r2, r3
 801ce3e:	b29a      	uxth	r2, r3
 801ce40:	4b08      	ldr	r3, [pc, #32]	; (801ce64 <ip_reass_free_complete_datagram+0x140>)
 801ce42:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801ce44:	8bfb      	ldrh	r3, [r7, #30]
}
 801ce46:	4618      	mov	r0, r3
 801ce48:	3720      	adds	r7, #32
 801ce4a:	46bd      	mov	sp, r7
 801ce4c:	bd80      	pop	{r7, pc}
 801ce4e:	bf00      	nop
 801ce50:	080227f8 	.word	0x080227f8
 801ce54:	08022834 	.word	0x08022834
 801ce58:	08022840 	.word	0x08022840
 801ce5c:	08022868 	.word	0x08022868
 801ce60:	0802287c 	.word	0x0802287c
 801ce64:	2405eb04 	.word	0x2405eb04
 801ce68:	0802289c 	.word	0x0802289c

0801ce6c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801ce6c:	b580      	push	{r7, lr}
 801ce6e:	b08a      	sub	sp, #40	; 0x28
 801ce70:	af00      	add	r7, sp, #0
 801ce72:	6078      	str	r0, [r7, #4]
 801ce74:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801ce76:	2300      	movs	r3, #0
 801ce78:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801ce7a:	2300      	movs	r3, #0
 801ce7c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801ce7e:	2300      	movs	r3, #0
 801ce80:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801ce82:	2300      	movs	r3, #0
 801ce84:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801ce86:	2300      	movs	r3, #0
 801ce88:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801ce8a:	4b28      	ldr	r3, [pc, #160]	; (801cf2c <ip_reass_remove_oldest_datagram+0xc0>)
 801ce8c:	681b      	ldr	r3, [r3, #0]
 801ce8e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801ce90:	e030      	b.n	801cef4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ce92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce94:	695a      	ldr	r2, [r3, #20]
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	68db      	ldr	r3, [r3, #12]
 801ce9a:	429a      	cmp	r2, r3
 801ce9c:	d10c      	bne.n	801ceb8 <ip_reass_remove_oldest_datagram+0x4c>
 801ce9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cea0:	699a      	ldr	r2, [r3, #24]
 801cea2:	687b      	ldr	r3, [r7, #4]
 801cea4:	691b      	ldr	r3, [r3, #16]
 801cea6:	429a      	cmp	r2, r3
 801cea8:	d106      	bne.n	801ceb8 <ip_reass_remove_oldest_datagram+0x4c>
 801ceaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ceac:	899a      	ldrh	r2, [r3, #12]
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	889b      	ldrh	r3, [r3, #4]
 801ceb2:	b29b      	uxth	r3, r3
 801ceb4:	429a      	cmp	r2, r3
 801ceb6:	d014      	beq.n	801cee2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ceb8:	693b      	ldr	r3, [r7, #16]
 801ceba:	3301      	adds	r3, #1
 801cebc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801cebe:	6a3b      	ldr	r3, [r7, #32]
 801cec0:	2b00      	cmp	r3, #0
 801cec2:	d104      	bne.n	801cece <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cec6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801cec8:	69fb      	ldr	r3, [r7, #28]
 801ceca:	61bb      	str	r3, [r7, #24]
 801cecc:	e009      	b.n	801cee2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801cece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ced0:	7fda      	ldrb	r2, [r3, #31]
 801ced2:	6a3b      	ldr	r3, [r7, #32]
 801ced4:	7fdb      	ldrb	r3, [r3, #31]
 801ced6:	429a      	cmp	r2, r3
 801ced8:	d803      	bhi.n	801cee2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ceda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cedc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801cede:	69fb      	ldr	r3, [r7, #28]
 801cee0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801cee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cee4:	681b      	ldr	r3, [r3, #0]
 801cee6:	2b00      	cmp	r3, #0
 801cee8:	d001      	beq.n	801ceee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ceea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ceec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801ceee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cef0:	681b      	ldr	r3, [r3, #0]
 801cef2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801cef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d1cb      	bne.n	801ce92 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801cefa:	6a3b      	ldr	r3, [r7, #32]
 801cefc:	2b00      	cmp	r3, #0
 801cefe:	d008      	beq.n	801cf12 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801cf00:	69b9      	ldr	r1, [r7, #24]
 801cf02:	6a38      	ldr	r0, [r7, #32]
 801cf04:	f7ff ff0e 	bl	801cd24 <ip_reass_free_complete_datagram>
 801cf08:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801cf0a:	697a      	ldr	r2, [r7, #20]
 801cf0c:	68fb      	ldr	r3, [r7, #12]
 801cf0e:	4413      	add	r3, r2
 801cf10:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801cf12:	697a      	ldr	r2, [r7, #20]
 801cf14:	683b      	ldr	r3, [r7, #0]
 801cf16:	429a      	cmp	r2, r3
 801cf18:	da02      	bge.n	801cf20 <ip_reass_remove_oldest_datagram+0xb4>
 801cf1a:	693b      	ldr	r3, [r7, #16]
 801cf1c:	2b01      	cmp	r3, #1
 801cf1e:	dcac      	bgt.n	801ce7a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801cf20:	697b      	ldr	r3, [r7, #20]
}
 801cf22:	4618      	mov	r0, r3
 801cf24:	3728      	adds	r7, #40	; 0x28
 801cf26:	46bd      	mov	sp, r7
 801cf28:	bd80      	pop	{r7, pc}
 801cf2a:	bf00      	nop
 801cf2c:	2405eb00 	.word	0x2405eb00

0801cf30 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801cf30:	b580      	push	{r7, lr}
 801cf32:	b084      	sub	sp, #16
 801cf34:	af00      	add	r7, sp, #0
 801cf36:	6078      	str	r0, [r7, #4]
 801cf38:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801cf3a:	2004      	movs	r0, #4
 801cf3c:	f7f6 fc00 	bl	8013740 <memp_malloc>
 801cf40:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801cf42:	68fb      	ldr	r3, [r7, #12]
 801cf44:	2b00      	cmp	r3, #0
 801cf46:	d110      	bne.n	801cf6a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801cf48:	6839      	ldr	r1, [r7, #0]
 801cf4a:	6878      	ldr	r0, [r7, #4]
 801cf4c:	f7ff ff8e 	bl	801ce6c <ip_reass_remove_oldest_datagram>
 801cf50:	4602      	mov	r2, r0
 801cf52:	683b      	ldr	r3, [r7, #0]
 801cf54:	4293      	cmp	r3, r2
 801cf56:	dc03      	bgt.n	801cf60 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801cf58:	2004      	movs	r0, #4
 801cf5a:	f7f6 fbf1 	bl	8013740 <memp_malloc>
 801cf5e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801cf60:	68fb      	ldr	r3, [r7, #12]
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d101      	bne.n	801cf6a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801cf66:	2300      	movs	r3, #0
 801cf68:	e016      	b.n	801cf98 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801cf6a:	2220      	movs	r2, #32
 801cf6c:	2100      	movs	r1, #0
 801cf6e:	68f8      	ldr	r0, [r7, #12]
 801cf70:	f001 f8cb 	bl	801e10a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801cf74:	68fb      	ldr	r3, [r7, #12]
 801cf76:	220f      	movs	r2, #15
 801cf78:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801cf7a:	4b09      	ldr	r3, [pc, #36]	; (801cfa0 <ip_reass_enqueue_new_datagram+0x70>)
 801cf7c:	681a      	ldr	r2, [r3, #0]
 801cf7e:	68fb      	ldr	r3, [r7, #12]
 801cf80:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801cf82:	4a07      	ldr	r2, [pc, #28]	; (801cfa0 <ip_reass_enqueue_new_datagram+0x70>)
 801cf84:	68fb      	ldr	r3, [r7, #12]
 801cf86:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801cf88:	68fb      	ldr	r3, [r7, #12]
 801cf8a:	3308      	adds	r3, #8
 801cf8c:	2214      	movs	r2, #20
 801cf8e:	6879      	ldr	r1, [r7, #4]
 801cf90:	4618      	mov	r0, r3
 801cf92:	f001 f892 	bl	801e0ba <memcpy>
  return ipr;
 801cf96:	68fb      	ldr	r3, [r7, #12]
}
 801cf98:	4618      	mov	r0, r3
 801cf9a:	3710      	adds	r7, #16
 801cf9c:	46bd      	mov	sp, r7
 801cf9e:	bd80      	pop	{r7, pc}
 801cfa0:	2405eb00 	.word	0x2405eb00

0801cfa4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801cfa4:	b580      	push	{r7, lr}
 801cfa6:	b082      	sub	sp, #8
 801cfa8:	af00      	add	r7, sp, #0
 801cfaa:	6078      	str	r0, [r7, #4]
 801cfac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801cfae:	4b10      	ldr	r3, [pc, #64]	; (801cff0 <ip_reass_dequeue_datagram+0x4c>)
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	687a      	ldr	r2, [r7, #4]
 801cfb4:	429a      	cmp	r2, r3
 801cfb6:	d104      	bne.n	801cfc2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	681b      	ldr	r3, [r3, #0]
 801cfbc:	4a0c      	ldr	r2, [pc, #48]	; (801cff0 <ip_reass_dequeue_datagram+0x4c>)
 801cfbe:	6013      	str	r3, [r2, #0]
 801cfc0:	e00d      	b.n	801cfde <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801cfc2:	683b      	ldr	r3, [r7, #0]
 801cfc4:	2b00      	cmp	r3, #0
 801cfc6:	d106      	bne.n	801cfd6 <ip_reass_dequeue_datagram+0x32>
 801cfc8:	4b0a      	ldr	r3, [pc, #40]	; (801cff4 <ip_reass_dequeue_datagram+0x50>)
 801cfca:	f240 1245 	movw	r2, #325	; 0x145
 801cfce:	490a      	ldr	r1, [pc, #40]	; (801cff8 <ip_reass_dequeue_datagram+0x54>)
 801cfd0:	480a      	ldr	r0, [pc, #40]	; (801cffc <ip_reass_dequeue_datagram+0x58>)
 801cfd2:	f001 f937 	bl	801e244 <iprintf>
    prev->next = ipr->next;
 801cfd6:	687b      	ldr	r3, [r7, #4]
 801cfd8:	681a      	ldr	r2, [r3, #0]
 801cfda:	683b      	ldr	r3, [r7, #0]
 801cfdc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801cfde:	6879      	ldr	r1, [r7, #4]
 801cfe0:	2004      	movs	r0, #4
 801cfe2:	f7f6 fc23 	bl	801382c <memp_free>
}
 801cfe6:	bf00      	nop
 801cfe8:	3708      	adds	r7, #8
 801cfea:	46bd      	mov	sp, r7
 801cfec:	bd80      	pop	{r7, pc}
 801cfee:	bf00      	nop
 801cff0:	2405eb00 	.word	0x2405eb00
 801cff4:	080227f8 	.word	0x080227f8
 801cff8:	080228c0 	.word	0x080228c0
 801cffc:	08022840 	.word	0x08022840

0801d000 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801d000:	b580      	push	{r7, lr}
 801d002:	b08c      	sub	sp, #48	; 0x30
 801d004:	af00      	add	r7, sp, #0
 801d006:	60f8      	str	r0, [r7, #12]
 801d008:	60b9      	str	r1, [r7, #8]
 801d00a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801d00c:	2300      	movs	r3, #0
 801d00e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801d010:	2301      	movs	r3, #1
 801d012:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801d014:	68bb      	ldr	r3, [r7, #8]
 801d016:	685b      	ldr	r3, [r3, #4]
 801d018:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d01a:	69fb      	ldr	r3, [r7, #28]
 801d01c:	885b      	ldrh	r3, [r3, #2]
 801d01e:	b29b      	uxth	r3, r3
 801d020:	4618      	mov	r0, r3
 801d022:	f7f5 fd31 	bl	8012a88 <lwip_htons>
 801d026:	4603      	mov	r3, r0
 801d028:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801d02a:	69fb      	ldr	r3, [r7, #28]
 801d02c:	781b      	ldrb	r3, [r3, #0]
 801d02e:	f003 030f 	and.w	r3, r3, #15
 801d032:	b2db      	uxtb	r3, r3
 801d034:	009b      	lsls	r3, r3, #2
 801d036:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801d038:	7e7b      	ldrb	r3, [r7, #25]
 801d03a:	b29b      	uxth	r3, r3
 801d03c:	8b7a      	ldrh	r2, [r7, #26]
 801d03e:	429a      	cmp	r2, r3
 801d040:	d202      	bcs.n	801d048 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d042:	f04f 33ff 	mov.w	r3, #4294967295
 801d046:	e135      	b.n	801d2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801d048:	7e7b      	ldrb	r3, [r7, #25]
 801d04a:	b29b      	uxth	r3, r3
 801d04c:	8b7a      	ldrh	r2, [r7, #26]
 801d04e:	1ad3      	subs	r3, r2, r3
 801d050:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801d052:	69fb      	ldr	r3, [r7, #28]
 801d054:	88db      	ldrh	r3, [r3, #6]
 801d056:	b29b      	uxth	r3, r3
 801d058:	4618      	mov	r0, r3
 801d05a:	f7f5 fd15 	bl	8012a88 <lwip_htons>
 801d05e:	4603      	mov	r3, r0
 801d060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d064:	b29b      	uxth	r3, r3
 801d066:	00db      	lsls	r3, r3, #3
 801d068:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801d06a:	68bb      	ldr	r3, [r7, #8]
 801d06c:	685b      	ldr	r3, [r3, #4]
 801d06e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801d070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d072:	2200      	movs	r2, #0
 801d074:	701a      	strb	r2, [r3, #0]
 801d076:	2200      	movs	r2, #0
 801d078:	705a      	strb	r2, [r3, #1]
 801d07a:	2200      	movs	r2, #0
 801d07c:	709a      	strb	r2, [r3, #2]
 801d07e:	2200      	movs	r2, #0
 801d080:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801d082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d084:	8afa      	ldrh	r2, [r7, #22]
 801d086:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801d088:	8afa      	ldrh	r2, [r7, #22]
 801d08a:	8b7b      	ldrh	r3, [r7, #26]
 801d08c:	4413      	add	r3, r2
 801d08e:	b29a      	uxth	r2, r3
 801d090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d092:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801d094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d096:	88db      	ldrh	r3, [r3, #6]
 801d098:	b29b      	uxth	r3, r3
 801d09a:	8afa      	ldrh	r2, [r7, #22]
 801d09c:	429a      	cmp	r2, r3
 801d09e:	d902      	bls.n	801d0a6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d0a0:	f04f 33ff 	mov.w	r3, #4294967295
 801d0a4:	e106      	b.n	801d2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801d0a6:	68fb      	ldr	r3, [r7, #12]
 801d0a8:	685b      	ldr	r3, [r3, #4]
 801d0aa:	627b      	str	r3, [r7, #36]	; 0x24
 801d0ac:	e068      	b.n	801d180 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801d0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0b0:	685b      	ldr	r3, [r3, #4]
 801d0b2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801d0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0b6:	889b      	ldrh	r3, [r3, #4]
 801d0b8:	b29a      	uxth	r2, r3
 801d0ba:	693b      	ldr	r3, [r7, #16]
 801d0bc:	889b      	ldrh	r3, [r3, #4]
 801d0be:	b29b      	uxth	r3, r3
 801d0c0:	429a      	cmp	r2, r3
 801d0c2:	d235      	bcs.n	801d130 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801d0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d0c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801d0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	d020      	beq.n	801d112 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801d0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0d2:	889b      	ldrh	r3, [r3, #4]
 801d0d4:	b29a      	uxth	r2, r3
 801d0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0d8:	88db      	ldrh	r3, [r3, #6]
 801d0da:	b29b      	uxth	r3, r3
 801d0dc:	429a      	cmp	r2, r3
 801d0de:	d307      	bcc.n	801d0f0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801d0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0e2:	88db      	ldrh	r3, [r3, #6]
 801d0e4:	b29a      	uxth	r2, r3
 801d0e6:	693b      	ldr	r3, [r7, #16]
 801d0e8:	889b      	ldrh	r3, [r3, #4]
 801d0ea:	b29b      	uxth	r3, r3
 801d0ec:	429a      	cmp	r2, r3
 801d0ee:	d902      	bls.n	801d0f6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d0f0:	f04f 33ff 	mov.w	r3, #4294967295
 801d0f4:	e0de      	b.n	801d2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801d0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0f8:	68ba      	ldr	r2, [r7, #8]
 801d0fa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801d0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0fe:	88db      	ldrh	r3, [r3, #6]
 801d100:	b29a      	uxth	r2, r3
 801d102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d104:	889b      	ldrh	r3, [r3, #4]
 801d106:	b29b      	uxth	r3, r3
 801d108:	429a      	cmp	r2, r3
 801d10a:	d03d      	beq.n	801d188 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d10c:	2300      	movs	r3, #0
 801d10e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801d110:	e03a      	b.n	801d188 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801d112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d114:	88db      	ldrh	r3, [r3, #6]
 801d116:	b29a      	uxth	r2, r3
 801d118:	693b      	ldr	r3, [r7, #16]
 801d11a:	889b      	ldrh	r3, [r3, #4]
 801d11c:	b29b      	uxth	r3, r3
 801d11e:	429a      	cmp	r2, r3
 801d120:	d902      	bls.n	801d128 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d122:	f04f 33ff 	mov.w	r3, #4294967295
 801d126:	e0c5      	b.n	801d2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801d128:	68fb      	ldr	r3, [r7, #12]
 801d12a:	68ba      	ldr	r2, [r7, #8]
 801d12c:	605a      	str	r2, [r3, #4]
      break;
 801d12e:	e02b      	b.n	801d188 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801d130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d132:	889b      	ldrh	r3, [r3, #4]
 801d134:	b29a      	uxth	r2, r3
 801d136:	693b      	ldr	r3, [r7, #16]
 801d138:	889b      	ldrh	r3, [r3, #4]
 801d13a:	b29b      	uxth	r3, r3
 801d13c:	429a      	cmp	r2, r3
 801d13e:	d102      	bne.n	801d146 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d140:	f04f 33ff 	mov.w	r3, #4294967295
 801d144:	e0b6      	b.n	801d2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801d146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d148:	889b      	ldrh	r3, [r3, #4]
 801d14a:	b29a      	uxth	r2, r3
 801d14c:	693b      	ldr	r3, [r7, #16]
 801d14e:	88db      	ldrh	r3, [r3, #6]
 801d150:	b29b      	uxth	r3, r3
 801d152:	429a      	cmp	r2, r3
 801d154:	d202      	bcs.n	801d15c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d156:	f04f 33ff 	mov.w	r3, #4294967295
 801d15a:	e0ab      	b.n	801d2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801d15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d15e:	2b00      	cmp	r3, #0
 801d160:	d009      	beq.n	801d176 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801d162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d164:	88db      	ldrh	r3, [r3, #6]
 801d166:	b29a      	uxth	r2, r3
 801d168:	693b      	ldr	r3, [r7, #16]
 801d16a:	889b      	ldrh	r3, [r3, #4]
 801d16c:	b29b      	uxth	r3, r3
 801d16e:	429a      	cmp	r2, r3
 801d170:	d001      	beq.n	801d176 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d172:	2300      	movs	r3, #0
 801d174:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801d176:	693b      	ldr	r3, [r7, #16]
 801d178:	681b      	ldr	r3, [r3, #0]
 801d17a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801d17c:	693b      	ldr	r3, [r7, #16]
 801d17e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801d180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d182:	2b00      	cmp	r3, #0
 801d184:	d193      	bne.n	801d0ae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801d186:	e000      	b.n	801d18a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801d188:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801d18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	d12d      	bne.n	801d1ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801d190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d192:	2b00      	cmp	r3, #0
 801d194:	d01c      	beq.n	801d1d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801d196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d198:	88db      	ldrh	r3, [r3, #6]
 801d19a:	b29a      	uxth	r2, r3
 801d19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d19e:	889b      	ldrh	r3, [r3, #4]
 801d1a0:	b29b      	uxth	r3, r3
 801d1a2:	429a      	cmp	r2, r3
 801d1a4:	d906      	bls.n	801d1b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801d1a6:	4b45      	ldr	r3, [pc, #276]	; (801d2bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d1a8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801d1ac:	4944      	ldr	r1, [pc, #272]	; (801d2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801d1ae:	4845      	ldr	r0, [pc, #276]	; (801d2c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d1b0:	f001 f848 	bl	801e244 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801d1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1b6:	68ba      	ldr	r2, [r7, #8]
 801d1b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801d1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1bc:	88db      	ldrh	r3, [r3, #6]
 801d1be:	b29a      	uxth	r2, r3
 801d1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1c2:	889b      	ldrh	r3, [r3, #4]
 801d1c4:	b29b      	uxth	r3, r3
 801d1c6:	429a      	cmp	r2, r3
 801d1c8:	d010      	beq.n	801d1ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801d1ca:	2300      	movs	r3, #0
 801d1cc:	623b      	str	r3, [r7, #32]
 801d1ce:	e00d      	b.n	801d1ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801d1d0:	68fb      	ldr	r3, [r7, #12]
 801d1d2:	685b      	ldr	r3, [r3, #4]
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d006      	beq.n	801d1e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801d1d8:	4b38      	ldr	r3, [pc, #224]	; (801d2bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d1da:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801d1de:	493a      	ldr	r1, [pc, #232]	; (801d2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801d1e0:	4838      	ldr	r0, [pc, #224]	; (801d2c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d1e2:	f001 f82f 	bl	801e244 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801d1e6:	68fb      	ldr	r3, [r7, #12]
 801d1e8:	68ba      	ldr	r2, [r7, #8]
 801d1ea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801d1ec:	687b      	ldr	r3, [r7, #4]
 801d1ee:	2b00      	cmp	r3, #0
 801d1f0:	d105      	bne.n	801d1fe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801d1f2:	68fb      	ldr	r3, [r7, #12]
 801d1f4:	7f9b      	ldrb	r3, [r3, #30]
 801d1f6:	f003 0301 	and.w	r3, r3, #1
 801d1fa:	2b00      	cmp	r3, #0
 801d1fc:	d059      	beq.n	801d2b2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d1fe:	6a3b      	ldr	r3, [r7, #32]
 801d200:	2b00      	cmp	r3, #0
 801d202:	d04f      	beq.n	801d2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d204:	68fb      	ldr	r3, [r7, #12]
 801d206:	685b      	ldr	r3, [r3, #4]
 801d208:	2b00      	cmp	r3, #0
 801d20a:	d006      	beq.n	801d21a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d20c:	68fb      	ldr	r3, [r7, #12]
 801d20e:	685b      	ldr	r3, [r3, #4]
 801d210:	685b      	ldr	r3, [r3, #4]
 801d212:	889b      	ldrh	r3, [r3, #4]
 801d214:	b29b      	uxth	r3, r3
 801d216:	2b00      	cmp	r3, #0
 801d218:	d002      	beq.n	801d220 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d21a:	2300      	movs	r3, #0
 801d21c:	623b      	str	r3, [r7, #32]
 801d21e:	e041      	b.n	801d2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d222:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801d224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d226:	681b      	ldr	r3, [r3, #0]
 801d228:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d22a:	e012      	b.n	801d252 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d22e:	685b      	ldr	r3, [r3, #4]
 801d230:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801d232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d234:	88db      	ldrh	r3, [r3, #6]
 801d236:	b29a      	uxth	r2, r3
 801d238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d23a:	889b      	ldrh	r3, [r3, #4]
 801d23c:	b29b      	uxth	r3, r3
 801d23e:	429a      	cmp	r2, r3
 801d240:	d002      	beq.n	801d248 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801d242:	2300      	movs	r3, #0
 801d244:	623b      	str	r3, [r7, #32]
            break;
 801d246:	e007      	b.n	801d258 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801d248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d24a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801d24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d24e:	681b      	ldr	r3, [r3, #0]
 801d250:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d254:	2b00      	cmp	r3, #0
 801d256:	d1e9      	bne.n	801d22c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801d258:	6a3b      	ldr	r3, [r7, #32]
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	d022      	beq.n	801d2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801d25e:	68fb      	ldr	r3, [r7, #12]
 801d260:	685b      	ldr	r3, [r3, #4]
 801d262:	2b00      	cmp	r3, #0
 801d264:	d106      	bne.n	801d274 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801d266:	4b15      	ldr	r3, [pc, #84]	; (801d2bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d268:	f240 12df 	movw	r2, #479	; 0x1df
 801d26c:	4917      	ldr	r1, [pc, #92]	; (801d2cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d26e:	4815      	ldr	r0, [pc, #84]	; (801d2c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d270:	f000 ffe8 	bl	801e244 <iprintf>
          LWIP_ASSERT("sanity check",
 801d274:	68fb      	ldr	r3, [r7, #12]
 801d276:	685b      	ldr	r3, [r3, #4]
 801d278:	685b      	ldr	r3, [r3, #4]
 801d27a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d27c:	429a      	cmp	r2, r3
 801d27e:	d106      	bne.n	801d28e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801d280:	4b0e      	ldr	r3, [pc, #56]	; (801d2bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d282:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d286:	4911      	ldr	r1, [pc, #68]	; (801d2cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d288:	480e      	ldr	r0, [pc, #56]	; (801d2c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d28a:	f000 ffdb 	bl	801e244 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801d28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d290:	681b      	ldr	r3, [r3, #0]
 801d292:	2b00      	cmp	r3, #0
 801d294:	d006      	beq.n	801d2a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801d296:	4b09      	ldr	r3, [pc, #36]	; (801d2bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d298:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801d29c:	490c      	ldr	r1, [pc, #48]	; (801d2d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801d29e:	4809      	ldr	r0, [pc, #36]	; (801d2c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d2a0:	f000 ffd0 	bl	801e244 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801d2a4:	6a3b      	ldr	r3, [r7, #32]
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	bf14      	ite	ne
 801d2aa:	2301      	movne	r3, #1
 801d2ac:	2300      	moveq	r3, #0
 801d2ae:	b2db      	uxtb	r3, r3
 801d2b0:	e000      	b.n	801d2b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801d2b2:	2300      	movs	r3, #0
}
 801d2b4:	4618      	mov	r0, r3
 801d2b6:	3730      	adds	r7, #48	; 0x30
 801d2b8:	46bd      	mov	sp, r7
 801d2ba:	bd80      	pop	{r7, pc}
 801d2bc:	080227f8 	.word	0x080227f8
 801d2c0:	080228dc 	.word	0x080228dc
 801d2c4:	08022840 	.word	0x08022840
 801d2c8:	080228fc 	.word	0x080228fc
 801d2cc:	08022934 	.word	0x08022934
 801d2d0:	08022944 	.word	0x08022944

0801d2d4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801d2d4:	b580      	push	{r7, lr}
 801d2d6:	b08e      	sub	sp, #56	; 0x38
 801d2d8:	af00      	add	r7, sp, #0
 801d2da:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801d2dc:	687b      	ldr	r3, [r7, #4]
 801d2de:	685b      	ldr	r3, [r3, #4]
 801d2e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801d2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2e4:	781b      	ldrb	r3, [r3, #0]
 801d2e6:	f003 030f 	and.w	r3, r3, #15
 801d2ea:	b2db      	uxtb	r3, r3
 801d2ec:	009b      	lsls	r3, r3, #2
 801d2ee:	b2db      	uxtb	r3, r3
 801d2f0:	2b14      	cmp	r3, #20
 801d2f2:	f040 8171 	bne.w	801d5d8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801d2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2f8:	88db      	ldrh	r3, [r3, #6]
 801d2fa:	b29b      	uxth	r3, r3
 801d2fc:	4618      	mov	r0, r3
 801d2fe:	f7f5 fbc3 	bl	8012a88 <lwip_htons>
 801d302:	4603      	mov	r3, r0
 801d304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d308:	b29b      	uxth	r3, r3
 801d30a:	00db      	lsls	r3, r3, #3
 801d30c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d310:	885b      	ldrh	r3, [r3, #2]
 801d312:	b29b      	uxth	r3, r3
 801d314:	4618      	mov	r0, r3
 801d316:	f7f5 fbb7 	bl	8012a88 <lwip_htons>
 801d31a:	4603      	mov	r3, r0
 801d31c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801d31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d320:	781b      	ldrb	r3, [r3, #0]
 801d322:	f003 030f 	and.w	r3, r3, #15
 801d326:	b2db      	uxtb	r3, r3
 801d328:	009b      	lsls	r3, r3, #2
 801d32a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801d32e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d332:	b29b      	uxth	r3, r3
 801d334:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d336:	429a      	cmp	r2, r3
 801d338:	f0c0 8150 	bcc.w	801d5dc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801d33c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d340:	b29b      	uxth	r3, r3
 801d342:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d344:	1ad3      	subs	r3, r2, r3
 801d346:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801d348:	6878      	ldr	r0, [r7, #4]
 801d34a:	f7f7 f9a5 	bl	8014698 <pbuf_clen>
 801d34e:	4603      	mov	r3, r0
 801d350:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801d352:	4b8c      	ldr	r3, [pc, #560]	; (801d584 <ip4_reass+0x2b0>)
 801d354:	881b      	ldrh	r3, [r3, #0]
 801d356:	461a      	mov	r2, r3
 801d358:	8c3b      	ldrh	r3, [r7, #32]
 801d35a:	4413      	add	r3, r2
 801d35c:	2b0a      	cmp	r3, #10
 801d35e:	dd10      	ble.n	801d382 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d360:	8c3b      	ldrh	r3, [r7, #32]
 801d362:	4619      	mov	r1, r3
 801d364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d366:	f7ff fd81 	bl	801ce6c <ip_reass_remove_oldest_datagram>
 801d36a:	4603      	mov	r3, r0
 801d36c:	2b00      	cmp	r3, #0
 801d36e:	f000 8137 	beq.w	801d5e0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801d372:	4b84      	ldr	r3, [pc, #528]	; (801d584 <ip4_reass+0x2b0>)
 801d374:	881b      	ldrh	r3, [r3, #0]
 801d376:	461a      	mov	r2, r3
 801d378:	8c3b      	ldrh	r3, [r7, #32]
 801d37a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d37c:	2b0a      	cmp	r3, #10
 801d37e:	f300 812f 	bgt.w	801d5e0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d382:	4b81      	ldr	r3, [pc, #516]	; (801d588 <ip4_reass+0x2b4>)
 801d384:	681b      	ldr	r3, [r3, #0]
 801d386:	633b      	str	r3, [r7, #48]	; 0x30
 801d388:	e015      	b.n	801d3b6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801d38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d38c:	695a      	ldr	r2, [r3, #20]
 801d38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d390:	68db      	ldr	r3, [r3, #12]
 801d392:	429a      	cmp	r2, r3
 801d394:	d10c      	bne.n	801d3b0 <ip4_reass+0xdc>
 801d396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d398:	699a      	ldr	r2, [r3, #24]
 801d39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d39c:	691b      	ldr	r3, [r3, #16]
 801d39e:	429a      	cmp	r2, r3
 801d3a0:	d106      	bne.n	801d3b0 <ip4_reass+0xdc>
 801d3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3a4:	899a      	ldrh	r2, [r3, #12]
 801d3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3a8:	889b      	ldrh	r3, [r3, #4]
 801d3aa:	b29b      	uxth	r3, r3
 801d3ac:	429a      	cmp	r2, r3
 801d3ae:	d006      	beq.n	801d3be <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3b2:	681b      	ldr	r3, [r3, #0]
 801d3b4:	633b      	str	r3, [r7, #48]	; 0x30
 801d3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	d1e6      	bne.n	801d38a <ip4_reass+0xb6>
 801d3bc:	e000      	b.n	801d3c0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801d3be:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801d3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	d109      	bne.n	801d3da <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801d3c6:	8c3b      	ldrh	r3, [r7, #32]
 801d3c8:	4619      	mov	r1, r3
 801d3ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d3cc:	f7ff fdb0 	bl	801cf30 <ip_reass_enqueue_new_datagram>
 801d3d0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801d3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	d11c      	bne.n	801d412 <ip4_reass+0x13e>
      goto nullreturn;
 801d3d8:	e105      	b.n	801d5e6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3dc:	88db      	ldrh	r3, [r3, #6]
 801d3de:	b29b      	uxth	r3, r3
 801d3e0:	4618      	mov	r0, r3
 801d3e2:	f7f5 fb51 	bl	8012a88 <lwip_htons>
 801d3e6:	4603      	mov	r3, r0
 801d3e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	d110      	bne.n	801d412 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801d3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3f2:	89db      	ldrh	r3, [r3, #14]
 801d3f4:	4618      	mov	r0, r3
 801d3f6:	f7f5 fb47 	bl	8012a88 <lwip_htons>
 801d3fa:	4603      	mov	r3, r0
 801d3fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d400:	2b00      	cmp	r3, #0
 801d402:	d006      	beq.n	801d412 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801d404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d406:	3308      	adds	r3, #8
 801d408:	2214      	movs	r2, #20
 801d40a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d40c:	4618      	mov	r0, r3
 801d40e:	f000 fe54 	bl	801e0ba <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801d412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d414:	88db      	ldrh	r3, [r3, #6]
 801d416:	b29b      	uxth	r3, r3
 801d418:	f003 0320 	and.w	r3, r3, #32
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	bf0c      	ite	eq
 801d420:	2301      	moveq	r3, #1
 801d422:	2300      	movne	r3, #0
 801d424:	b2db      	uxtb	r3, r3
 801d426:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801d428:	69fb      	ldr	r3, [r7, #28]
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	d00e      	beq.n	801d44c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801d42e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d430:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d432:	4413      	add	r3, r2
 801d434:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801d436:	8b7a      	ldrh	r2, [r7, #26]
 801d438:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801d43a:	429a      	cmp	r2, r3
 801d43c:	f0c0 80a0 	bcc.w	801d580 <ip4_reass+0x2ac>
 801d440:	8b7b      	ldrh	r3, [r7, #26]
 801d442:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801d446:	4293      	cmp	r3, r2
 801d448:	f200 809a 	bhi.w	801d580 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801d44c:	69fa      	ldr	r2, [r7, #28]
 801d44e:	6879      	ldr	r1, [r7, #4]
 801d450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d452:	f7ff fdd5 	bl	801d000 <ip_reass_chain_frag_into_datagram_and_validate>
 801d456:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801d458:	697b      	ldr	r3, [r7, #20]
 801d45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d45e:	f000 809b 	beq.w	801d598 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801d462:	4b48      	ldr	r3, [pc, #288]	; (801d584 <ip4_reass+0x2b0>)
 801d464:	881a      	ldrh	r2, [r3, #0]
 801d466:	8c3b      	ldrh	r3, [r7, #32]
 801d468:	4413      	add	r3, r2
 801d46a:	b29a      	uxth	r2, r3
 801d46c:	4b45      	ldr	r3, [pc, #276]	; (801d584 <ip4_reass+0x2b0>)
 801d46e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801d470:	69fb      	ldr	r3, [r7, #28]
 801d472:	2b00      	cmp	r3, #0
 801d474:	d00d      	beq.n	801d492 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801d476:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d478:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d47a:	4413      	add	r3, r2
 801d47c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801d47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d480:	8a7a      	ldrh	r2, [r7, #18]
 801d482:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801d484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d486:	7f9b      	ldrb	r3, [r3, #30]
 801d488:	f043 0301 	orr.w	r3, r3, #1
 801d48c:	b2da      	uxtb	r2, r3
 801d48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d490:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801d492:	697b      	ldr	r3, [r7, #20]
 801d494:	2b01      	cmp	r3, #1
 801d496:	d171      	bne.n	801d57c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801d498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d49a:	8b9b      	ldrh	r3, [r3, #28]
 801d49c:	3314      	adds	r3, #20
 801d49e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801d4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4a2:	685b      	ldr	r3, [r3, #4]
 801d4a4:	685b      	ldr	r3, [r3, #4]
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801d4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4ac:	685b      	ldr	r3, [r3, #4]
 801d4ae:	685b      	ldr	r3, [r3, #4]
 801d4b0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801d4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4b4:	3308      	adds	r3, #8
 801d4b6:	2214      	movs	r2, #20
 801d4b8:	4619      	mov	r1, r3
 801d4ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d4bc:	f000 fdfd 	bl	801e0ba <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801d4c0:	8a3b      	ldrh	r3, [r7, #16]
 801d4c2:	4618      	mov	r0, r3
 801d4c4:	f7f5 fae0 	bl	8012a88 <lwip_htons>
 801d4c8:	4603      	mov	r3, r0
 801d4ca:	461a      	mov	r2, r3
 801d4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4ce:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801d4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4d2:	2200      	movs	r2, #0
 801d4d4:	719a      	strb	r2, [r3, #6]
 801d4d6:	2200      	movs	r2, #0
 801d4d8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801d4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4dc:	2200      	movs	r2, #0
 801d4de:	729a      	strb	r2, [r3, #10]
 801d4e0:	2200      	movs	r2, #0
 801d4e2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801d4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4e6:	685b      	ldr	r3, [r3, #4]
 801d4e8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801d4ea:	e00d      	b.n	801d508 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801d4ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4ee:	685b      	ldr	r3, [r3, #4]
 801d4f0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801d4f2:	2114      	movs	r1, #20
 801d4f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801d4f6:	f7f6 ffbb 	bl	8014470 <pbuf_remove_header>
      pbuf_cat(p, r);
 801d4fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d4fc:	6878      	ldr	r0, [r7, #4]
 801d4fe:	f7f7 f90b 	bl	8014718 <pbuf_cat>
      r = iprh->next_pbuf;
 801d502:	68fb      	ldr	r3, [r7, #12]
 801d504:	681b      	ldr	r3, [r3, #0]
 801d506:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801d508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	d1ee      	bne.n	801d4ec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801d50e:	4b1e      	ldr	r3, [pc, #120]	; (801d588 <ip4_reass+0x2b4>)
 801d510:	681b      	ldr	r3, [r3, #0]
 801d512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d514:	429a      	cmp	r2, r3
 801d516:	d102      	bne.n	801d51e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801d518:	2300      	movs	r3, #0
 801d51a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d51c:	e010      	b.n	801d540 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d51e:	4b1a      	ldr	r3, [pc, #104]	; (801d588 <ip4_reass+0x2b4>)
 801d520:	681b      	ldr	r3, [r3, #0]
 801d522:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d524:	e007      	b.n	801d536 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801d526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d528:	681b      	ldr	r3, [r3, #0]
 801d52a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d52c:	429a      	cmp	r2, r3
 801d52e:	d006      	beq.n	801d53e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d532:	681b      	ldr	r3, [r3, #0]
 801d534:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d538:	2b00      	cmp	r3, #0
 801d53a:	d1f4      	bne.n	801d526 <ip4_reass+0x252>
 801d53c:	e000      	b.n	801d540 <ip4_reass+0x26c>
          break;
 801d53e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801d540:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d544:	f7ff fd2e 	bl	801cfa4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801d548:	6878      	ldr	r0, [r7, #4]
 801d54a:	f7f7 f8a5 	bl	8014698 <pbuf_clen>
 801d54e:	4603      	mov	r3, r0
 801d550:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801d552:	4b0c      	ldr	r3, [pc, #48]	; (801d584 <ip4_reass+0x2b0>)
 801d554:	881b      	ldrh	r3, [r3, #0]
 801d556:	8c3a      	ldrh	r2, [r7, #32]
 801d558:	429a      	cmp	r2, r3
 801d55a:	d906      	bls.n	801d56a <ip4_reass+0x296>
 801d55c:	4b0b      	ldr	r3, [pc, #44]	; (801d58c <ip4_reass+0x2b8>)
 801d55e:	f240 229b 	movw	r2, #667	; 0x29b
 801d562:	490b      	ldr	r1, [pc, #44]	; (801d590 <ip4_reass+0x2bc>)
 801d564:	480b      	ldr	r0, [pc, #44]	; (801d594 <ip4_reass+0x2c0>)
 801d566:	f000 fe6d 	bl	801e244 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801d56a:	4b06      	ldr	r3, [pc, #24]	; (801d584 <ip4_reass+0x2b0>)
 801d56c:	881a      	ldrh	r2, [r3, #0]
 801d56e:	8c3b      	ldrh	r3, [r7, #32]
 801d570:	1ad3      	subs	r3, r2, r3
 801d572:	b29a      	uxth	r2, r3
 801d574:	4b03      	ldr	r3, [pc, #12]	; (801d584 <ip4_reass+0x2b0>)
 801d576:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801d578:	687b      	ldr	r3, [r7, #4]
 801d57a:	e038      	b.n	801d5ee <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801d57c:	2300      	movs	r3, #0
 801d57e:	e036      	b.n	801d5ee <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801d580:	bf00      	nop
 801d582:	e00a      	b.n	801d59a <ip4_reass+0x2c6>
 801d584:	2405eb04 	.word	0x2405eb04
 801d588:	2405eb00 	.word	0x2405eb00
 801d58c:	080227f8 	.word	0x080227f8
 801d590:	08022968 	.word	0x08022968
 801d594:	08022840 	.word	0x08022840
    goto nullreturn_ipr;
 801d598:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801d59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d59c:	2b00      	cmp	r3, #0
 801d59e:	d106      	bne.n	801d5ae <ip4_reass+0x2da>
 801d5a0:	4b15      	ldr	r3, [pc, #84]	; (801d5f8 <ip4_reass+0x324>)
 801d5a2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801d5a6:	4915      	ldr	r1, [pc, #84]	; (801d5fc <ip4_reass+0x328>)
 801d5a8:	4815      	ldr	r0, [pc, #84]	; (801d600 <ip4_reass+0x32c>)
 801d5aa:	f000 fe4b 	bl	801e244 <iprintf>
  if (ipr->p == NULL) {
 801d5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5b0:	685b      	ldr	r3, [r3, #4]
 801d5b2:	2b00      	cmp	r3, #0
 801d5b4:	d116      	bne.n	801d5e4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801d5b6:	4b13      	ldr	r3, [pc, #76]	; (801d604 <ip4_reass+0x330>)
 801d5b8:	681b      	ldr	r3, [r3, #0]
 801d5ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d5bc:	429a      	cmp	r2, r3
 801d5be:	d006      	beq.n	801d5ce <ip4_reass+0x2fa>
 801d5c0:	4b0d      	ldr	r3, [pc, #52]	; (801d5f8 <ip4_reass+0x324>)
 801d5c2:	f240 22ab 	movw	r2, #683	; 0x2ab
 801d5c6:	4910      	ldr	r1, [pc, #64]	; (801d608 <ip4_reass+0x334>)
 801d5c8:	480d      	ldr	r0, [pc, #52]	; (801d600 <ip4_reass+0x32c>)
 801d5ca:	f000 fe3b 	bl	801e244 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801d5ce:	2100      	movs	r1, #0
 801d5d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d5d2:	f7ff fce7 	bl	801cfa4 <ip_reass_dequeue_datagram>
 801d5d6:	e006      	b.n	801d5e6 <ip4_reass+0x312>
    goto nullreturn;
 801d5d8:	bf00      	nop
 801d5da:	e004      	b.n	801d5e6 <ip4_reass+0x312>
    goto nullreturn;
 801d5dc:	bf00      	nop
 801d5de:	e002      	b.n	801d5e6 <ip4_reass+0x312>
      goto nullreturn;
 801d5e0:	bf00      	nop
 801d5e2:	e000      	b.n	801d5e6 <ip4_reass+0x312>
  }

nullreturn:
 801d5e4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801d5e6:	6878      	ldr	r0, [r7, #4]
 801d5e8:	f7f6 ffc8 	bl	801457c <pbuf_free>
  return NULL;
 801d5ec:	2300      	movs	r3, #0
}
 801d5ee:	4618      	mov	r0, r3
 801d5f0:	3738      	adds	r7, #56	; 0x38
 801d5f2:	46bd      	mov	sp, r7
 801d5f4:	bd80      	pop	{r7, pc}
 801d5f6:	bf00      	nop
 801d5f8:	080227f8 	.word	0x080227f8
 801d5fc:	08022984 	.word	0x08022984
 801d600:	08022840 	.word	0x08022840
 801d604:	2405eb00 	.word	0x2405eb00
 801d608:	08022990 	.word	0x08022990

0801d60c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801d60c:	b580      	push	{r7, lr}
 801d60e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801d610:	2005      	movs	r0, #5
 801d612:	f7f6 f895 	bl	8013740 <memp_malloc>
 801d616:	4603      	mov	r3, r0
}
 801d618:	4618      	mov	r0, r3
 801d61a:	bd80      	pop	{r7, pc}

0801d61c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801d61c:	b580      	push	{r7, lr}
 801d61e:	b082      	sub	sp, #8
 801d620:	af00      	add	r7, sp, #0
 801d622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	2b00      	cmp	r3, #0
 801d628:	d106      	bne.n	801d638 <ip_frag_free_pbuf_custom_ref+0x1c>
 801d62a:	4b07      	ldr	r3, [pc, #28]	; (801d648 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801d62c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801d630:	4906      	ldr	r1, [pc, #24]	; (801d64c <ip_frag_free_pbuf_custom_ref+0x30>)
 801d632:	4807      	ldr	r0, [pc, #28]	; (801d650 <ip_frag_free_pbuf_custom_ref+0x34>)
 801d634:	f000 fe06 	bl	801e244 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801d638:	6879      	ldr	r1, [r7, #4]
 801d63a:	2005      	movs	r0, #5
 801d63c:	f7f6 f8f6 	bl	801382c <memp_free>
}
 801d640:	bf00      	nop
 801d642:	3708      	adds	r7, #8
 801d644:	46bd      	mov	sp, r7
 801d646:	bd80      	pop	{r7, pc}
 801d648:	080227f8 	.word	0x080227f8
 801d64c:	080229b0 	.word	0x080229b0
 801d650:	08022840 	.word	0x08022840

0801d654 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801d654:	b580      	push	{r7, lr}
 801d656:	b084      	sub	sp, #16
 801d658:	af00      	add	r7, sp, #0
 801d65a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801d660:	68fb      	ldr	r3, [r7, #12]
 801d662:	2b00      	cmp	r3, #0
 801d664:	d106      	bne.n	801d674 <ipfrag_free_pbuf_custom+0x20>
 801d666:	4b11      	ldr	r3, [pc, #68]	; (801d6ac <ipfrag_free_pbuf_custom+0x58>)
 801d668:	f240 22ce 	movw	r2, #718	; 0x2ce
 801d66c:	4910      	ldr	r1, [pc, #64]	; (801d6b0 <ipfrag_free_pbuf_custom+0x5c>)
 801d66e:	4811      	ldr	r0, [pc, #68]	; (801d6b4 <ipfrag_free_pbuf_custom+0x60>)
 801d670:	f000 fde8 	bl	801e244 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801d674:	68fa      	ldr	r2, [r7, #12]
 801d676:	687b      	ldr	r3, [r7, #4]
 801d678:	429a      	cmp	r2, r3
 801d67a:	d006      	beq.n	801d68a <ipfrag_free_pbuf_custom+0x36>
 801d67c:	4b0b      	ldr	r3, [pc, #44]	; (801d6ac <ipfrag_free_pbuf_custom+0x58>)
 801d67e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801d682:	490d      	ldr	r1, [pc, #52]	; (801d6b8 <ipfrag_free_pbuf_custom+0x64>)
 801d684:	480b      	ldr	r0, [pc, #44]	; (801d6b4 <ipfrag_free_pbuf_custom+0x60>)
 801d686:	f000 fddd 	bl	801e244 <iprintf>
  if (pcr->original != NULL) {
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	695b      	ldr	r3, [r3, #20]
 801d68e:	2b00      	cmp	r3, #0
 801d690:	d004      	beq.n	801d69c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801d692:	68fb      	ldr	r3, [r7, #12]
 801d694:	695b      	ldr	r3, [r3, #20]
 801d696:	4618      	mov	r0, r3
 801d698:	f7f6 ff70 	bl	801457c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801d69c:	68f8      	ldr	r0, [r7, #12]
 801d69e:	f7ff ffbd 	bl	801d61c <ip_frag_free_pbuf_custom_ref>
}
 801d6a2:	bf00      	nop
 801d6a4:	3710      	adds	r7, #16
 801d6a6:	46bd      	mov	sp, r7
 801d6a8:	bd80      	pop	{r7, pc}
 801d6aa:	bf00      	nop
 801d6ac:	080227f8 	.word	0x080227f8
 801d6b0:	080229bc 	.word	0x080229bc
 801d6b4:	08022840 	.word	0x08022840
 801d6b8:	080229c8 	.word	0x080229c8

0801d6bc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801d6bc:	b580      	push	{r7, lr}
 801d6be:	b094      	sub	sp, #80	; 0x50
 801d6c0:	af02      	add	r7, sp, #8
 801d6c2:	60f8      	str	r0, [r7, #12]
 801d6c4:	60b9      	str	r1, [r7, #8]
 801d6c6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801d6c8:	2300      	movs	r3, #0
 801d6ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801d6ce:	68bb      	ldr	r3, [r7, #8]
 801d6d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d6d2:	3b14      	subs	r3, #20
 801d6d4:	2b00      	cmp	r3, #0
 801d6d6:	da00      	bge.n	801d6da <ip4_frag+0x1e>
 801d6d8:	3307      	adds	r3, #7
 801d6da:	10db      	asrs	r3, r3, #3
 801d6dc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801d6de:	2314      	movs	r3, #20
 801d6e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801d6e2:	68fb      	ldr	r3, [r7, #12]
 801d6e4:	685b      	ldr	r3, [r3, #4]
 801d6e6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801d6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d6ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801d6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6ee:	781b      	ldrb	r3, [r3, #0]
 801d6f0:	f003 030f 	and.w	r3, r3, #15
 801d6f4:	b2db      	uxtb	r3, r3
 801d6f6:	009b      	lsls	r3, r3, #2
 801d6f8:	b2db      	uxtb	r3, r3
 801d6fa:	2b14      	cmp	r3, #20
 801d6fc:	d002      	beq.n	801d704 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801d6fe:	f06f 0305 	mvn.w	r3, #5
 801d702:	e110      	b.n	801d926 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801d704:	68fb      	ldr	r3, [r7, #12]
 801d706:	895b      	ldrh	r3, [r3, #10]
 801d708:	2b13      	cmp	r3, #19
 801d70a:	d809      	bhi.n	801d720 <ip4_frag+0x64>
 801d70c:	4b88      	ldr	r3, [pc, #544]	; (801d930 <ip4_frag+0x274>)
 801d70e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801d712:	4988      	ldr	r1, [pc, #544]	; (801d934 <ip4_frag+0x278>)
 801d714:	4888      	ldr	r0, [pc, #544]	; (801d938 <ip4_frag+0x27c>)
 801d716:	f000 fd95 	bl	801e244 <iprintf>
 801d71a:	f06f 0305 	mvn.w	r3, #5
 801d71e:	e102      	b.n	801d926 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801d720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d722:	88db      	ldrh	r3, [r3, #6]
 801d724:	b29b      	uxth	r3, r3
 801d726:	4618      	mov	r0, r3
 801d728:	f7f5 f9ae 	bl	8012a88 <lwip_htons>
 801d72c:	4603      	mov	r3, r0
 801d72e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801d730:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d732:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d736:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801d73a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d73c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d740:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801d742:	68fb      	ldr	r3, [r7, #12]
 801d744:	891b      	ldrh	r3, [r3, #8]
 801d746:	3b14      	subs	r3, #20
 801d748:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801d74c:	e0e1      	b.n	801d912 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801d74e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d750:	00db      	lsls	r3, r3, #3
 801d752:	b29b      	uxth	r3, r3
 801d754:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d758:	4293      	cmp	r3, r2
 801d75a:	bf28      	it	cs
 801d75c:	4613      	movcs	r3, r2
 801d75e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801d760:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d764:	2114      	movs	r1, #20
 801d766:	200e      	movs	r0, #14
 801d768:	f7f6 fc20 	bl	8013fac <pbuf_alloc>
 801d76c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d770:	2b00      	cmp	r3, #0
 801d772:	f000 80d5 	beq.w	801d920 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801d776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d778:	895b      	ldrh	r3, [r3, #10]
 801d77a:	2b13      	cmp	r3, #19
 801d77c:	d806      	bhi.n	801d78c <ip4_frag+0xd0>
 801d77e:	4b6c      	ldr	r3, [pc, #432]	; (801d930 <ip4_frag+0x274>)
 801d780:	f44f 7249 	mov.w	r2, #804	; 0x324
 801d784:	496d      	ldr	r1, [pc, #436]	; (801d93c <ip4_frag+0x280>)
 801d786:	486c      	ldr	r0, [pc, #432]	; (801d938 <ip4_frag+0x27c>)
 801d788:	f000 fd5c 	bl	801e244 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801d78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d78e:	685b      	ldr	r3, [r3, #4]
 801d790:	2214      	movs	r2, #20
 801d792:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d794:	4618      	mov	r0, r3
 801d796:	f000 fc90 	bl	801e0ba <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801d79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d79c:	685b      	ldr	r3, [r3, #4]
 801d79e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801d7a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d7a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801d7a6:	e064      	b.n	801d872 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801d7a8:	68fb      	ldr	r3, [r7, #12]
 801d7aa:	895a      	ldrh	r2, [r3, #10]
 801d7ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d7ae:	1ad3      	subs	r3, r2, r3
 801d7b0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801d7b2:	68fb      	ldr	r3, [r7, #12]
 801d7b4:	895b      	ldrh	r3, [r3, #10]
 801d7b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d7b8:	429a      	cmp	r2, r3
 801d7ba:	d906      	bls.n	801d7ca <ip4_frag+0x10e>
 801d7bc:	4b5c      	ldr	r3, [pc, #368]	; (801d930 <ip4_frag+0x274>)
 801d7be:	f240 322d 	movw	r2, #813	; 0x32d
 801d7c2:	495f      	ldr	r1, [pc, #380]	; (801d940 <ip4_frag+0x284>)
 801d7c4:	485c      	ldr	r0, [pc, #368]	; (801d938 <ip4_frag+0x27c>)
 801d7c6:	f000 fd3d 	bl	801e244 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801d7ca:	8bfa      	ldrh	r2, [r7, #30]
 801d7cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d7d0:	4293      	cmp	r3, r2
 801d7d2:	bf28      	it	cs
 801d7d4:	4613      	movcs	r3, r2
 801d7d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801d7da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	d105      	bne.n	801d7ee <ip4_frag+0x132>
        poff = 0;
 801d7e2:	2300      	movs	r3, #0
 801d7e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801d7e6:	68fb      	ldr	r3, [r7, #12]
 801d7e8:	681b      	ldr	r3, [r3, #0]
 801d7ea:	60fb      	str	r3, [r7, #12]
        continue;
 801d7ec:	e041      	b.n	801d872 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801d7ee:	f7ff ff0d 	bl	801d60c <ip_frag_alloc_pbuf_custom_ref>
 801d7f2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801d7f4:	69bb      	ldr	r3, [r7, #24]
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	d103      	bne.n	801d802 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801d7fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d7fc:	f7f6 febe 	bl	801457c <pbuf_free>
        goto memerr;
 801d800:	e08f      	b.n	801d922 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d802:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801d804:	68fb      	ldr	r3, [r7, #12]
 801d806:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d808:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d80a:	4413      	add	r3, r2
 801d80c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801d810:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801d814:	9201      	str	r2, [sp, #4]
 801d816:	9300      	str	r3, [sp, #0]
 801d818:	4603      	mov	r3, r0
 801d81a:	2241      	movs	r2, #65	; 0x41
 801d81c:	2000      	movs	r0, #0
 801d81e:	f7f6 fcf3 	bl	8014208 <pbuf_alloced_custom>
 801d822:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801d824:	697b      	ldr	r3, [r7, #20]
 801d826:	2b00      	cmp	r3, #0
 801d828:	d106      	bne.n	801d838 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801d82a:	69b8      	ldr	r0, [r7, #24]
 801d82c:	f7ff fef6 	bl	801d61c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801d830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d832:	f7f6 fea3 	bl	801457c <pbuf_free>
        goto memerr;
 801d836:	e074      	b.n	801d922 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801d838:	68f8      	ldr	r0, [r7, #12]
 801d83a:	f7f6 ff45 	bl	80146c8 <pbuf_ref>
      pcr->original = p;
 801d83e:	69bb      	ldr	r3, [r7, #24]
 801d840:	68fa      	ldr	r2, [r7, #12]
 801d842:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801d844:	69bb      	ldr	r3, [r7, #24]
 801d846:	4a3f      	ldr	r2, [pc, #252]	; (801d944 <ip4_frag+0x288>)
 801d848:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801d84a:	6979      	ldr	r1, [r7, #20]
 801d84c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d84e:	f7f6 ff63 	bl	8014718 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801d852:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801d856:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d85a:	1ad3      	subs	r3, r2, r3
 801d85c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801d860:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d864:	2b00      	cmp	r3, #0
 801d866:	d004      	beq.n	801d872 <ip4_frag+0x1b6>
        poff = 0;
 801d868:	2300      	movs	r3, #0
 801d86a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801d86c:	68fb      	ldr	r3, [r7, #12]
 801d86e:	681b      	ldr	r3, [r3, #0]
 801d870:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801d872:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d876:	2b00      	cmp	r3, #0
 801d878:	d196      	bne.n	801d7a8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801d87a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d87c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d880:	4413      	add	r3, r2
 801d882:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801d884:	68bb      	ldr	r3, [r7, #8]
 801d886:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d888:	f1a3 0213 	sub.w	r2, r3, #19
 801d88c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d890:	429a      	cmp	r2, r3
 801d892:	bfcc      	ite	gt
 801d894:	2301      	movgt	r3, #1
 801d896:	2300      	movle	r3, #0
 801d898:	b2db      	uxtb	r3, r3
 801d89a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801d89c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d8a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d8a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801d8a6:	6a3b      	ldr	r3, [r7, #32]
 801d8a8:	2b00      	cmp	r3, #0
 801d8aa:	d002      	beq.n	801d8b2 <ip4_frag+0x1f6>
 801d8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	d003      	beq.n	801d8ba <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801d8b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d8b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801d8b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801d8ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d8bc:	4618      	mov	r0, r3
 801d8be:	f7f5 f8e3 	bl	8012a88 <lwip_htons>
 801d8c2:	4603      	mov	r3, r0
 801d8c4:	461a      	mov	r2, r3
 801d8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8c8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801d8ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d8cc:	3314      	adds	r3, #20
 801d8ce:	b29b      	uxth	r3, r3
 801d8d0:	4618      	mov	r0, r3
 801d8d2:	f7f5 f8d9 	bl	8012a88 <lwip_htons>
 801d8d6:	4603      	mov	r3, r0
 801d8d8:	461a      	mov	r2, r3
 801d8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8dc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801d8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8e0:	2200      	movs	r2, #0
 801d8e2:	729a      	strb	r2, [r3, #10]
 801d8e4:	2200      	movs	r2, #0
 801d8e6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801d8e8:	68bb      	ldr	r3, [r7, #8]
 801d8ea:	695b      	ldr	r3, [r3, #20]
 801d8ec:	687a      	ldr	r2, [r7, #4]
 801d8ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d8f0:	68b8      	ldr	r0, [r7, #8]
 801d8f2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801d8f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d8f6:	f7f6 fe41 	bl	801457c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801d8fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d8fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d900:	1ad3      	subs	r3, r2, r3
 801d902:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801d906:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801d90a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d90c:	4413      	add	r3, r2
 801d90e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801d912:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d916:	2b00      	cmp	r3, #0
 801d918:	f47f af19 	bne.w	801d74e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801d91c:	2300      	movs	r3, #0
 801d91e:	e002      	b.n	801d926 <ip4_frag+0x26a>
      goto memerr;
 801d920:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801d922:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d926:	4618      	mov	r0, r3
 801d928:	3748      	adds	r7, #72	; 0x48
 801d92a:	46bd      	mov	sp, r7
 801d92c:	bd80      	pop	{r7, pc}
 801d92e:	bf00      	nop
 801d930:	080227f8 	.word	0x080227f8
 801d934:	080229d4 	.word	0x080229d4
 801d938:	08022840 	.word	0x08022840
 801d93c:	080229f0 	.word	0x080229f0
 801d940:	08022a10 	.word	0x08022a10
 801d944:	0801d655 	.word	0x0801d655

0801d948 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801d948:	b580      	push	{r7, lr}
 801d94a:	b086      	sub	sp, #24
 801d94c:	af00      	add	r7, sp, #0
 801d94e:	6078      	str	r0, [r7, #4]
 801d950:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801d952:	230e      	movs	r3, #14
 801d954:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801d956:	687b      	ldr	r3, [r7, #4]
 801d958:	895b      	ldrh	r3, [r3, #10]
 801d95a:	2b0e      	cmp	r3, #14
 801d95c:	d96e      	bls.n	801da3c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801d95e:	687b      	ldr	r3, [r7, #4]
 801d960:	7bdb      	ldrb	r3, [r3, #15]
 801d962:	2b00      	cmp	r3, #0
 801d964:	d106      	bne.n	801d974 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801d966:	683b      	ldr	r3, [r7, #0]
 801d968:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d96c:	3301      	adds	r3, #1
 801d96e:	b2da      	uxtb	r2, r3
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801d974:	687b      	ldr	r3, [r7, #4]
 801d976:	685b      	ldr	r3, [r3, #4]
 801d978:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801d97a:	693b      	ldr	r3, [r7, #16]
 801d97c:	7b1a      	ldrb	r2, [r3, #12]
 801d97e:	7b5b      	ldrb	r3, [r3, #13]
 801d980:	021b      	lsls	r3, r3, #8
 801d982:	4313      	orrs	r3, r2
 801d984:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801d986:	693b      	ldr	r3, [r7, #16]
 801d988:	781b      	ldrb	r3, [r3, #0]
 801d98a:	f003 0301 	and.w	r3, r3, #1
 801d98e:	2b00      	cmp	r3, #0
 801d990:	d023      	beq.n	801d9da <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801d992:	693b      	ldr	r3, [r7, #16]
 801d994:	781b      	ldrb	r3, [r3, #0]
 801d996:	2b01      	cmp	r3, #1
 801d998:	d10f      	bne.n	801d9ba <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d99a:	693b      	ldr	r3, [r7, #16]
 801d99c:	785b      	ldrb	r3, [r3, #1]
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	d11b      	bne.n	801d9da <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801d9a2:	693b      	ldr	r3, [r7, #16]
 801d9a4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d9a6:	2b5e      	cmp	r3, #94	; 0x5e
 801d9a8:	d117      	bne.n	801d9da <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	7b5b      	ldrb	r3, [r3, #13]
 801d9ae:	f043 0310 	orr.w	r3, r3, #16
 801d9b2:	b2da      	uxtb	r2, r3
 801d9b4:	687b      	ldr	r3, [r7, #4]
 801d9b6:	735a      	strb	r2, [r3, #13]
 801d9b8:	e00f      	b.n	801d9da <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801d9ba:	693b      	ldr	r3, [r7, #16]
 801d9bc:	2206      	movs	r2, #6
 801d9be:	4928      	ldr	r1, [pc, #160]	; (801da60 <ethernet_input+0x118>)
 801d9c0:	4618      	mov	r0, r3
 801d9c2:	f000 fb6a 	bl	801e09a <memcmp>
 801d9c6:	4603      	mov	r3, r0
 801d9c8:	2b00      	cmp	r3, #0
 801d9ca:	d106      	bne.n	801d9da <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	7b5b      	ldrb	r3, [r3, #13]
 801d9d0:	f043 0308 	orr.w	r3, r3, #8
 801d9d4:	b2da      	uxtb	r2, r3
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801d9da:	89fb      	ldrh	r3, [r7, #14]
 801d9dc:	2b08      	cmp	r3, #8
 801d9de:	d003      	beq.n	801d9e8 <ethernet_input+0xa0>
 801d9e0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801d9e4:	d014      	beq.n	801da10 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801d9e6:	e032      	b.n	801da4e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d9e8:	683b      	ldr	r3, [r7, #0]
 801d9ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801d9ee:	f003 0308 	and.w	r3, r3, #8
 801d9f2:	2b00      	cmp	r3, #0
 801d9f4:	d024      	beq.n	801da40 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d9f6:	8afb      	ldrh	r3, [r7, #22]
 801d9f8:	4619      	mov	r1, r3
 801d9fa:	6878      	ldr	r0, [r7, #4]
 801d9fc:	f7f6 fd38 	bl	8014470 <pbuf_remove_header>
 801da00:	4603      	mov	r3, r0
 801da02:	2b00      	cmp	r3, #0
 801da04:	d11e      	bne.n	801da44 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801da06:	6839      	ldr	r1, [r7, #0]
 801da08:	6878      	ldr	r0, [r7, #4]
 801da0a:	f7fe ff21 	bl	801c850 <ip4_input>
      break;
 801da0e:	e013      	b.n	801da38 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801da10:	683b      	ldr	r3, [r7, #0]
 801da12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801da16:	f003 0308 	and.w	r3, r3, #8
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	d014      	beq.n	801da48 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801da1e:	8afb      	ldrh	r3, [r7, #22]
 801da20:	4619      	mov	r1, r3
 801da22:	6878      	ldr	r0, [r7, #4]
 801da24:	f7f6 fd24 	bl	8014470 <pbuf_remove_header>
 801da28:	4603      	mov	r3, r0
 801da2a:	2b00      	cmp	r3, #0
 801da2c:	d10e      	bne.n	801da4c <ethernet_input+0x104>
        etharp_input(p, netif);
 801da2e:	6839      	ldr	r1, [r7, #0]
 801da30:	6878      	ldr	r0, [r7, #4]
 801da32:	f7fe f89b 	bl	801bb6c <etharp_input>
      break;
 801da36:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801da38:	2300      	movs	r3, #0
 801da3a:	e00c      	b.n	801da56 <ethernet_input+0x10e>
    goto free_and_return;
 801da3c:	bf00      	nop
 801da3e:	e006      	b.n	801da4e <ethernet_input+0x106>
        goto free_and_return;
 801da40:	bf00      	nop
 801da42:	e004      	b.n	801da4e <ethernet_input+0x106>
        goto free_and_return;
 801da44:	bf00      	nop
 801da46:	e002      	b.n	801da4e <ethernet_input+0x106>
        goto free_and_return;
 801da48:	bf00      	nop
 801da4a:	e000      	b.n	801da4e <ethernet_input+0x106>
        goto free_and_return;
 801da4c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801da4e:	6878      	ldr	r0, [r7, #4]
 801da50:	f7f6 fd94 	bl	801457c <pbuf_free>
  return ERR_OK;
 801da54:	2300      	movs	r3, #0
}
 801da56:	4618      	mov	r0, r3
 801da58:	3718      	adds	r7, #24
 801da5a:	46bd      	mov	sp, r7
 801da5c:	bd80      	pop	{r7, pc}
 801da5e:	bf00      	nop
 801da60:	08022c7c 	.word	0x08022c7c

0801da64 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801da64:	b580      	push	{r7, lr}
 801da66:	b086      	sub	sp, #24
 801da68:	af00      	add	r7, sp, #0
 801da6a:	60f8      	str	r0, [r7, #12]
 801da6c:	60b9      	str	r1, [r7, #8]
 801da6e:	607a      	str	r2, [r7, #4]
 801da70:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801da72:	8c3b      	ldrh	r3, [r7, #32]
 801da74:	4618      	mov	r0, r3
 801da76:	f7f5 f807 	bl	8012a88 <lwip_htons>
 801da7a:	4603      	mov	r3, r0
 801da7c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801da7e:	210e      	movs	r1, #14
 801da80:	68b8      	ldr	r0, [r7, #8]
 801da82:	f7f6 fce5 	bl	8014450 <pbuf_add_header>
 801da86:	4603      	mov	r3, r0
 801da88:	2b00      	cmp	r3, #0
 801da8a:	d125      	bne.n	801dad8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801da8c:	68bb      	ldr	r3, [r7, #8]
 801da8e:	685b      	ldr	r3, [r3, #4]
 801da90:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801da92:	693b      	ldr	r3, [r7, #16]
 801da94:	8afa      	ldrh	r2, [r7, #22]
 801da96:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801da98:	693b      	ldr	r3, [r7, #16]
 801da9a:	2206      	movs	r2, #6
 801da9c:	6839      	ldr	r1, [r7, #0]
 801da9e:	4618      	mov	r0, r3
 801daa0:	f000 fb0b 	bl	801e0ba <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801daa4:	693b      	ldr	r3, [r7, #16]
 801daa6:	3306      	adds	r3, #6
 801daa8:	2206      	movs	r2, #6
 801daaa:	6879      	ldr	r1, [r7, #4]
 801daac:	4618      	mov	r0, r3
 801daae:	f000 fb04 	bl	801e0ba <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801dab2:	68fb      	ldr	r3, [r7, #12]
 801dab4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801dab8:	2b06      	cmp	r3, #6
 801daba:	d006      	beq.n	801daca <ethernet_output+0x66>
 801dabc:	4b0a      	ldr	r3, [pc, #40]	; (801dae8 <ethernet_output+0x84>)
 801dabe:	f44f 7299 	mov.w	r2, #306	; 0x132
 801dac2:	490a      	ldr	r1, [pc, #40]	; (801daec <ethernet_output+0x88>)
 801dac4:	480a      	ldr	r0, [pc, #40]	; (801daf0 <ethernet_output+0x8c>)
 801dac6:	f000 fbbd 	bl	801e244 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801daca:	68fb      	ldr	r3, [r7, #12]
 801dacc:	699b      	ldr	r3, [r3, #24]
 801dace:	68b9      	ldr	r1, [r7, #8]
 801dad0:	68f8      	ldr	r0, [r7, #12]
 801dad2:	4798      	blx	r3
 801dad4:	4603      	mov	r3, r0
 801dad6:	e002      	b.n	801dade <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801dad8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801dada:	f06f 0301 	mvn.w	r3, #1
}
 801dade:	4618      	mov	r0, r3
 801dae0:	3718      	adds	r7, #24
 801dae2:	46bd      	mov	sp, r7
 801dae4:	bd80      	pop	{r7, pc}
 801dae6:	bf00      	nop
 801dae8:	08022a20 	.word	0x08022a20
 801daec:	08022a58 	.word	0x08022a58
 801daf0:	08022a8c 	.word	0x08022a8c

0801daf4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801daf4:	b580      	push	{r7, lr}
 801daf6:	b082      	sub	sp, #8
 801daf8:	af00      	add	r7, sp, #0
 801dafa:	6078      	str	r0, [r7, #4]
 801dafc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801dafe:	683b      	ldr	r3, [r7, #0]
 801db00:	2200      	movs	r2, #0
 801db02:	2104      	movs	r1, #4
 801db04:	4618      	mov	r0, r3
 801db06:	f7ef f995 	bl	800ce34 <osMessageQueueNew>
 801db0a:	4602      	mov	r2, r0
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801db10:	687b      	ldr	r3, [r7, #4]
 801db12:	681b      	ldr	r3, [r3, #0]
 801db14:	2b00      	cmp	r3, #0
 801db16:	d102      	bne.n	801db1e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801db18:	f04f 33ff 	mov.w	r3, #4294967295
 801db1c:	e000      	b.n	801db20 <sys_mbox_new+0x2c>

  return ERR_OK;
 801db1e:	2300      	movs	r3, #0
}
 801db20:	4618      	mov	r0, r3
 801db22:	3708      	adds	r7, #8
 801db24:	46bd      	mov	sp, r7
 801db26:	bd80      	pop	{r7, pc}

0801db28 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801db28:	b580      	push	{r7, lr}
 801db2a:	b082      	sub	sp, #8
 801db2c:	af00      	add	r7, sp, #0
 801db2e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	681b      	ldr	r3, [r3, #0]
 801db34:	4618      	mov	r0, r3
 801db36:	f7ef faaf 	bl	800d098 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801db3a:	687b      	ldr	r3, [r7, #4]
 801db3c:	681b      	ldr	r3, [r3, #0]
 801db3e:	4618      	mov	r0, r3
 801db40:	f7ef faca 	bl	800d0d8 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801db44:	bf00      	nop
 801db46:	3708      	adds	r7, #8
 801db48:	46bd      	mov	sp, r7
 801db4a:	bd80      	pop	{r7, pc}

0801db4c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801db4c:	b580      	push	{r7, lr}
 801db4e:	b084      	sub	sp, #16
 801db50:	af00      	add	r7, sp, #0
 801db52:	6078      	str	r0, [r7, #4]
 801db54:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	6818      	ldr	r0, [r3, #0]
 801db5a:	4639      	mov	r1, r7
 801db5c:	2300      	movs	r3, #0
 801db5e:	2200      	movs	r2, #0
 801db60:	f7ef f9dc 	bl	800cf1c <osMessageQueuePut>
 801db64:	4603      	mov	r3, r0
 801db66:	2b00      	cmp	r3, #0
 801db68:	d102      	bne.n	801db70 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801db6a:	2300      	movs	r3, #0
 801db6c:	73fb      	strb	r3, [r7, #15]
 801db6e:	e001      	b.n	801db74 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801db70:	23ff      	movs	r3, #255	; 0xff
 801db72:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801db74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801db78:	4618      	mov	r0, r3
 801db7a:	3710      	adds	r7, #16
 801db7c:	46bd      	mov	sp, r7
 801db7e:	bd80      	pop	{r7, pc}

0801db80 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801db80:	b580      	push	{r7, lr}
 801db82:	b086      	sub	sp, #24
 801db84:	af00      	add	r7, sp, #0
 801db86:	60f8      	str	r0, [r7, #12]
 801db88:	60b9      	str	r1, [r7, #8]
 801db8a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801db8c:	f7ee fe3e 	bl	800c80c <osKernelGetTickCount>
 801db90:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801db92:	687b      	ldr	r3, [r7, #4]
 801db94:	2b00      	cmp	r3, #0
 801db96:	d013      	beq.n	801dbc0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	6818      	ldr	r0, [r3, #0]
 801db9c:	687b      	ldr	r3, [r7, #4]
 801db9e:	2200      	movs	r2, #0
 801dba0:	68b9      	ldr	r1, [r7, #8]
 801dba2:	f7ef fa1b 	bl	800cfdc <osMessageQueueGet>
 801dba6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801dba8:	693b      	ldr	r3, [r7, #16]
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	d105      	bne.n	801dbba <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801dbae:	f7ee fe2d 	bl	800c80c <osKernelGetTickCount>
 801dbb2:	4602      	mov	r2, r0
 801dbb4:	697b      	ldr	r3, [r7, #20]
 801dbb6:	1ad3      	subs	r3, r2, r3
 801dbb8:	e00f      	b.n	801dbda <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801dbba:	f04f 33ff 	mov.w	r3, #4294967295
 801dbbe:	e00c      	b.n	801dbda <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801dbc0:	68fb      	ldr	r3, [r7, #12]
 801dbc2:	6818      	ldr	r0, [r3, #0]
 801dbc4:	f04f 33ff 	mov.w	r3, #4294967295
 801dbc8:	2200      	movs	r2, #0
 801dbca:	68b9      	ldr	r1, [r7, #8]
 801dbcc:	f7ef fa06 	bl	800cfdc <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801dbd0:	f7ee fe1c 	bl	800c80c <osKernelGetTickCount>
 801dbd4:	4602      	mov	r2, r0
 801dbd6:	697b      	ldr	r3, [r7, #20]
 801dbd8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801dbda:	4618      	mov	r0, r3
 801dbdc:	3718      	adds	r7, #24
 801dbde:	46bd      	mov	sp, r7
 801dbe0:	bd80      	pop	{r7, pc}

0801dbe2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801dbe2:	b580      	push	{r7, lr}
 801dbe4:	b082      	sub	sp, #8
 801dbe6:	af00      	add	r7, sp, #0
 801dbe8:	6078      	str	r0, [r7, #4]
 801dbea:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	6818      	ldr	r0, [r3, #0]
 801dbf0:	2300      	movs	r3, #0
 801dbf2:	2200      	movs	r2, #0
 801dbf4:	6839      	ldr	r1, [r7, #0]
 801dbf6:	f7ef f9f1 	bl	800cfdc <osMessageQueueGet>
 801dbfa:	4603      	mov	r3, r0
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	d101      	bne.n	801dc04 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801dc00:	2300      	movs	r3, #0
 801dc02:	e001      	b.n	801dc08 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801dc04:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801dc08:	4618      	mov	r0, r3
 801dc0a:	3708      	adds	r7, #8
 801dc0c:	46bd      	mov	sp, r7
 801dc0e:	bd80      	pop	{r7, pc}

0801dc10 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801dc10:	b480      	push	{r7}
 801dc12:	b083      	sub	sp, #12
 801dc14:	af00      	add	r7, sp, #0
 801dc16:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801dc18:	687b      	ldr	r3, [r7, #4]
 801dc1a:	681b      	ldr	r3, [r3, #0]
 801dc1c:	2b00      	cmp	r3, #0
 801dc1e:	d101      	bne.n	801dc24 <sys_mbox_valid+0x14>
    return 0;
 801dc20:	2300      	movs	r3, #0
 801dc22:	e000      	b.n	801dc26 <sys_mbox_valid+0x16>
  else
    return 1;
 801dc24:	2301      	movs	r3, #1
}
 801dc26:	4618      	mov	r0, r3
 801dc28:	370c      	adds	r7, #12
 801dc2a:	46bd      	mov	sp, r7
 801dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc30:	4770      	bx	lr

0801dc32 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801dc32:	b480      	push	{r7}
 801dc34:	b083      	sub	sp, #12
 801dc36:	af00      	add	r7, sp, #0
 801dc38:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801dc3a:	687b      	ldr	r3, [r7, #4]
 801dc3c:	2200      	movs	r2, #0
 801dc3e:	601a      	str	r2, [r3, #0]
}
 801dc40:	bf00      	nop
 801dc42:	370c      	adds	r7, #12
 801dc44:	46bd      	mov	sp, r7
 801dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc4a:	4770      	bx	lr

0801dc4c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801dc4c:	b580      	push	{r7, lr}
 801dc4e:	b082      	sub	sp, #8
 801dc50:	af00      	add	r7, sp, #0
 801dc52:	6078      	str	r0, [r7, #4]
 801dc54:	460b      	mov	r3, r1
 801dc56:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801dc58:	78fb      	ldrb	r3, [r7, #3]
 801dc5a:	2200      	movs	r2, #0
 801dc5c:	4619      	mov	r1, r3
 801dc5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801dc62:	f7ee ffa3 	bl	800cbac <osSemaphoreNew>
 801dc66:	4602      	mov	r2, r0
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	681b      	ldr	r3, [r3, #0]
 801dc70:	2b00      	cmp	r3, #0
 801dc72:	d102      	bne.n	801dc7a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801dc74:	f04f 33ff 	mov.w	r3, #4294967295
 801dc78:	e009      	b.n	801dc8e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801dc7a:	78fb      	ldrb	r3, [r7, #3]
 801dc7c:	2b00      	cmp	r3, #0
 801dc7e:	d105      	bne.n	801dc8c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	681b      	ldr	r3, [r3, #0]
 801dc84:	2100      	movs	r1, #0
 801dc86:	4618      	mov	r0, r3
 801dc88:	f7ef f81a 	bl	800ccc0 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801dc8c:	2300      	movs	r3, #0
}
 801dc8e:	4618      	mov	r0, r3
 801dc90:	3708      	adds	r7, #8
 801dc92:	46bd      	mov	sp, r7
 801dc94:	bd80      	pop	{r7, pc}

0801dc96 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801dc96:	b580      	push	{r7, lr}
 801dc98:	b084      	sub	sp, #16
 801dc9a:	af00      	add	r7, sp, #0
 801dc9c:	6078      	str	r0, [r7, #4]
 801dc9e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801dca0:	f7ee fdb4 	bl	800c80c <osKernelGetTickCount>
 801dca4:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801dca6:	683b      	ldr	r3, [r7, #0]
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	d011      	beq.n	801dcd0 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	681b      	ldr	r3, [r3, #0]
 801dcb0:	6839      	ldr	r1, [r7, #0]
 801dcb2:	4618      	mov	r0, r3
 801dcb4:	f7ef f804 	bl	800ccc0 <osSemaphoreAcquire>
 801dcb8:	4603      	mov	r3, r0
 801dcba:	2b00      	cmp	r3, #0
 801dcbc:	d105      	bne.n	801dcca <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801dcbe:	f7ee fda5 	bl	800c80c <osKernelGetTickCount>
 801dcc2:	4602      	mov	r2, r0
 801dcc4:	68fb      	ldr	r3, [r7, #12]
 801dcc6:	1ad3      	subs	r3, r2, r3
 801dcc8:	e012      	b.n	801dcf0 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801dcca:	f04f 33ff 	mov.w	r3, #4294967295
 801dcce:	e00f      	b.n	801dcf0 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801dcd0:	bf00      	nop
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	681b      	ldr	r3, [r3, #0]
 801dcd6:	f04f 31ff 	mov.w	r1, #4294967295
 801dcda:	4618      	mov	r0, r3
 801dcdc:	f7ee fff0 	bl	800ccc0 <osSemaphoreAcquire>
 801dce0:	4603      	mov	r3, r0
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d1f5      	bne.n	801dcd2 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801dce6:	f7ee fd91 	bl	800c80c <osKernelGetTickCount>
 801dcea:	4602      	mov	r2, r0
 801dcec:	68fb      	ldr	r3, [r7, #12]
 801dcee:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801dcf0:	4618      	mov	r0, r3
 801dcf2:	3710      	adds	r7, #16
 801dcf4:	46bd      	mov	sp, r7
 801dcf6:	bd80      	pop	{r7, pc}

0801dcf8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801dcf8:	b580      	push	{r7, lr}
 801dcfa:	b082      	sub	sp, #8
 801dcfc:	af00      	add	r7, sp, #0
 801dcfe:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	681b      	ldr	r3, [r3, #0]
 801dd04:	4618      	mov	r0, r3
 801dd06:	f7ef f82d 	bl	800cd64 <osSemaphoreRelease>
}
 801dd0a:	bf00      	nop
 801dd0c:	3708      	adds	r7, #8
 801dd0e:	46bd      	mov	sp, r7
 801dd10:	bd80      	pop	{r7, pc}

0801dd12 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801dd12:	b580      	push	{r7, lr}
 801dd14:	b082      	sub	sp, #8
 801dd16:	af00      	add	r7, sp, #0
 801dd18:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	681b      	ldr	r3, [r3, #0]
 801dd1e:	4618      	mov	r0, r3
 801dd20:	f7ef f864 	bl	800cdec <osSemaphoreDelete>
}
 801dd24:	bf00      	nop
 801dd26:	3708      	adds	r7, #8
 801dd28:	46bd      	mov	sp, r7
 801dd2a:	bd80      	pop	{r7, pc}

0801dd2c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801dd2c:	b480      	push	{r7}
 801dd2e:	b083      	sub	sp, #12
 801dd30:	af00      	add	r7, sp, #0
 801dd32:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801dd34:	687b      	ldr	r3, [r7, #4]
 801dd36:	681b      	ldr	r3, [r3, #0]
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d101      	bne.n	801dd40 <sys_sem_valid+0x14>
    return 0;
 801dd3c:	2300      	movs	r3, #0
 801dd3e:	e000      	b.n	801dd42 <sys_sem_valid+0x16>
  else
    return 1;
 801dd40:	2301      	movs	r3, #1
}
 801dd42:	4618      	mov	r0, r3
 801dd44:	370c      	adds	r7, #12
 801dd46:	46bd      	mov	sp, r7
 801dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd4c:	4770      	bx	lr

0801dd4e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801dd4e:	b480      	push	{r7}
 801dd50:	b083      	sub	sp, #12
 801dd52:	af00      	add	r7, sp, #0
 801dd54:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801dd56:	687b      	ldr	r3, [r7, #4]
 801dd58:	2200      	movs	r2, #0
 801dd5a:	601a      	str	r2, [r3, #0]
}
 801dd5c:	bf00      	nop
 801dd5e:	370c      	adds	r7, #12
 801dd60:	46bd      	mov	sp, r7
 801dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd66:	4770      	bx	lr

0801dd68 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801dd68:	b580      	push	{r7, lr}
 801dd6a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801dd6c:	2000      	movs	r0, #0
 801dd6e:	f7ee fe0f 	bl	800c990 <osMutexNew>
 801dd72:	4603      	mov	r3, r0
 801dd74:	4a01      	ldr	r2, [pc, #4]	; (801dd7c <sys_init+0x14>)
 801dd76:	6013      	str	r3, [r2, #0]
#endif
}
 801dd78:	bf00      	nop
 801dd7a:	bd80      	pop	{r7, pc}
 801dd7c:	2405eb08 	.word	0x2405eb08

0801dd80 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801dd80:	b580      	push	{r7, lr}
 801dd82:	b082      	sub	sp, #8
 801dd84:	af00      	add	r7, sp, #0
 801dd86:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801dd88:	2000      	movs	r0, #0
 801dd8a:	f7ee fe01 	bl	800c990 <osMutexNew>
 801dd8e:	4602      	mov	r2, r0
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	681b      	ldr	r3, [r3, #0]
 801dd98:	2b00      	cmp	r3, #0
 801dd9a:	d102      	bne.n	801dda2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801dd9c:	f04f 33ff 	mov.w	r3, #4294967295
 801dda0:	e000      	b.n	801dda4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801dda2:	2300      	movs	r3, #0
}
 801dda4:	4618      	mov	r0, r3
 801dda6:	3708      	adds	r7, #8
 801dda8:	46bd      	mov	sp, r7
 801ddaa:	bd80      	pop	{r7, pc}

0801ddac <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801ddac:	b580      	push	{r7, lr}
 801ddae:	b082      	sub	sp, #8
 801ddb0:	af00      	add	r7, sp, #0
 801ddb2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	681b      	ldr	r3, [r3, #0]
 801ddb8:	f04f 31ff 	mov.w	r1, #4294967295
 801ddbc:	4618      	mov	r0, r3
 801ddbe:	f7ee fe6d 	bl	800ca9c <osMutexAcquire>
#endif
}
 801ddc2:	bf00      	nop
 801ddc4:	3708      	adds	r7, #8
 801ddc6:	46bd      	mov	sp, r7
 801ddc8:	bd80      	pop	{r7, pc}

0801ddca <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801ddca:	b580      	push	{r7, lr}
 801ddcc:	b082      	sub	sp, #8
 801ddce:	af00      	add	r7, sp, #0
 801ddd0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	681b      	ldr	r3, [r3, #0]
 801ddd6:	4618      	mov	r0, r3
 801ddd8:	f7ee feab 	bl	800cb32 <osMutexRelease>
}
 801dddc:	bf00      	nop
 801ddde:	3708      	adds	r7, #8
 801dde0:	46bd      	mov	sp, r7
 801dde2:	bd80      	pop	{r7, pc}

0801dde4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801dde4:	b580      	push	{r7, lr}
 801dde6:	b08e      	sub	sp, #56	; 0x38
 801dde8:	af00      	add	r7, sp, #0
 801ddea:	60f8      	str	r0, [r7, #12]
 801ddec:	60b9      	str	r1, [r7, #8]
 801ddee:	607a      	str	r2, [r7, #4]
 801ddf0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801ddf2:	f107 0314 	add.w	r3, r7, #20
 801ddf6:	2224      	movs	r2, #36	; 0x24
 801ddf8:	2100      	movs	r1, #0
 801ddfa:	4618      	mov	r0, r3
 801ddfc:	f000 f985 	bl	801e10a <memset>
 801de00:	68fb      	ldr	r3, [r7, #12]
 801de02:	617b      	str	r3, [r7, #20]
 801de04:	683b      	ldr	r3, [r7, #0]
 801de06:	62bb      	str	r3, [r7, #40]	; 0x28
 801de08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801de0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801de0c:	f107 0314 	add.w	r3, r7, #20
 801de10:	461a      	mov	r2, r3
 801de12:	6879      	ldr	r1, [r7, #4]
 801de14:	68b8      	ldr	r0, [r7, #8]
 801de16:	f7ee fd0e 	bl	800c836 <osThreadNew>
 801de1a:	4603      	mov	r3, r0
#endif
}
 801de1c:	4618      	mov	r0, r3
 801de1e:	3738      	adds	r7, #56	; 0x38
 801de20:	46bd      	mov	sp, r7
 801de22:	bd80      	pop	{r7, pc}

0801de24 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801de24:	b580      	push	{r7, lr}
 801de26:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801de28:	4b04      	ldr	r3, [pc, #16]	; (801de3c <sys_arch_protect+0x18>)
 801de2a:	681b      	ldr	r3, [r3, #0]
 801de2c:	f04f 31ff 	mov.w	r1, #4294967295
 801de30:	4618      	mov	r0, r3
 801de32:	f7ee fe33 	bl	800ca9c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801de36:	2301      	movs	r3, #1
}
 801de38:	4618      	mov	r0, r3
 801de3a:	bd80      	pop	{r7, pc}
 801de3c:	2405eb08 	.word	0x2405eb08

0801de40 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801de40:	b580      	push	{r7, lr}
 801de42:	b082      	sub	sp, #8
 801de44:	af00      	add	r7, sp, #0
 801de46:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801de48:	4b04      	ldr	r3, [pc, #16]	; (801de5c <sys_arch_unprotect+0x1c>)
 801de4a:	681b      	ldr	r3, [r3, #0]
 801de4c:	4618      	mov	r0, r3
 801de4e:	f7ee fe70 	bl	800cb32 <osMutexRelease>
}
 801de52:	bf00      	nop
 801de54:	3708      	adds	r7, #8
 801de56:	46bd      	mov	sp, r7
 801de58:	bd80      	pop	{r7, pc}
 801de5a:	bf00      	nop
 801de5c:	2405eb08 	.word	0x2405eb08

0801de60 <std>:
 801de60:	2300      	movs	r3, #0
 801de62:	b510      	push	{r4, lr}
 801de64:	4604      	mov	r4, r0
 801de66:	e9c0 3300 	strd	r3, r3, [r0]
 801de6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801de6e:	6083      	str	r3, [r0, #8]
 801de70:	8181      	strh	r1, [r0, #12]
 801de72:	6643      	str	r3, [r0, #100]	; 0x64
 801de74:	81c2      	strh	r2, [r0, #14]
 801de76:	6183      	str	r3, [r0, #24]
 801de78:	4619      	mov	r1, r3
 801de7a:	2208      	movs	r2, #8
 801de7c:	305c      	adds	r0, #92	; 0x5c
 801de7e:	f000 f944 	bl	801e10a <memset>
 801de82:	4b05      	ldr	r3, [pc, #20]	; (801de98 <std+0x38>)
 801de84:	6263      	str	r3, [r4, #36]	; 0x24
 801de86:	4b05      	ldr	r3, [pc, #20]	; (801de9c <std+0x3c>)
 801de88:	62a3      	str	r3, [r4, #40]	; 0x28
 801de8a:	4b05      	ldr	r3, [pc, #20]	; (801dea0 <std+0x40>)
 801de8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801de8e:	4b05      	ldr	r3, [pc, #20]	; (801dea4 <std+0x44>)
 801de90:	6224      	str	r4, [r4, #32]
 801de92:	6323      	str	r3, [r4, #48]	; 0x30
 801de94:	bd10      	pop	{r4, pc}
 801de96:	bf00      	nop
 801de98:	0801e425 	.word	0x0801e425
 801de9c:	0801e447 	.word	0x0801e447
 801dea0:	0801e47f 	.word	0x0801e47f
 801dea4:	0801e4a3 	.word	0x0801e4a3

0801dea8 <_cleanup_r>:
 801dea8:	4901      	ldr	r1, [pc, #4]	; (801deb0 <_cleanup_r+0x8>)
 801deaa:	f000 b8af 	b.w	801e00c <_fwalk_reent>
 801deae:	bf00      	nop
 801deb0:	0801e65d 	.word	0x0801e65d

0801deb4 <__sfmoreglue>:
 801deb4:	b570      	push	{r4, r5, r6, lr}
 801deb6:	2268      	movs	r2, #104	; 0x68
 801deb8:	1e4d      	subs	r5, r1, #1
 801deba:	4355      	muls	r5, r2
 801debc:	460e      	mov	r6, r1
 801debe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dec2:	f000 f94b 	bl	801e15c <_malloc_r>
 801dec6:	4604      	mov	r4, r0
 801dec8:	b140      	cbz	r0, 801dedc <__sfmoreglue+0x28>
 801deca:	2100      	movs	r1, #0
 801decc:	e9c0 1600 	strd	r1, r6, [r0]
 801ded0:	300c      	adds	r0, #12
 801ded2:	60a0      	str	r0, [r4, #8]
 801ded4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ded8:	f000 f917 	bl	801e10a <memset>
 801dedc:	4620      	mov	r0, r4
 801dede:	bd70      	pop	{r4, r5, r6, pc}

0801dee0 <__sfp_lock_acquire>:
 801dee0:	4801      	ldr	r0, [pc, #4]	; (801dee8 <__sfp_lock_acquire+0x8>)
 801dee2:	f000 b8d8 	b.w	801e096 <__retarget_lock_acquire_recursive>
 801dee6:	bf00      	nop
 801dee8:	2405eb0d 	.word	0x2405eb0d

0801deec <__sfp_lock_release>:
 801deec:	4801      	ldr	r0, [pc, #4]	; (801def4 <__sfp_lock_release+0x8>)
 801deee:	f000 b8d3 	b.w	801e098 <__retarget_lock_release_recursive>
 801def2:	bf00      	nop
 801def4:	2405eb0d 	.word	0x2405eb0d

0801def8 <__sinit_lock_acquire>:
 801def8:	4801      	ldr	r0, [pc, #4]	; (801df00 <__sinit_lock_acquire+0x8>)
 801defa:	f000 b8cc 	b.w	801e096 <__retarget_lock_acquire_recursive>
 801defe:	bf00      	nop
 801df00:	2405eb0e 	.word	0x2405eb0e

0801df04 <__sinit_lock_release>:
 801df04:	4801      	ldr	r0, [pc, #4]	; (801df0c <__sinit_lock_release+0x8>)
 801df06:	f000 b8c7 	b.w	801e098 <__retarget_lock_release_recursive>
 801df0a:	bf00      	nop
 801df0c:	2405eb0e 	.word	0x2405eb0e

0801df10 <__sinit>:
 801df10:	b510      	push	{r4, lr}
 801df12:	4604      	mov	r4, r0
 801df14:	f7ff fff0 	bl	801def8 <__sinit_lock_acquire>
 801df18:	69a3      	ldr	r3, [r4, #24]
 801df1a:	b11b      	cbz	r3, 801df24 <__sinit+0x14>
 801df1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df20:	f7ff bff0 	b.w	801df04 <__sinit_lock_release>
 801df24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801df28:	6523      	str	r3, [r4, #80]	; 0x50
 801df2a:	4b13      	ldr	r3, [pc, #76]	; (801df78 <__sinit+0x68>)
 801df2c:	4a13      	ldr	r2, [pc, #76]	; (801df7c <__sinit+0x6c>)
 801df2e:	681b      	ldr	r3, [r3, #0]
 801df30:	62a2      	str	r2, [r4, #40]	; 0x28
 801df32:	42a3      	cmp	r3, r4
 801df34:	bf04      	itt	eq
 801df36:	2301      	moveq	r3, #1
 801df38:	61a3      	streq	r3, [r4, #24]
 801df3a:	4620      	mov	r0, r4
 801df3c:	f000 f820 	bl	801df80 <__sfp>
 801df40:	6060      	str	r0, [r4, #4]
 801df42:	4620      	mov	r0, r4
 801df44:	f000 f81c 	bl	801df80 <__sfp>
 801df48:	60a0      	str	r0, [r4, #8]
 801df4a:	4620      	mov	r0, r4
 801df4c:	f000 f818 	bl	801df80 <__sfp>
 801df50:	2200      	movs	r2, #0
 801df52:	60e0      	str	r0, [r4, #12]
 801df54:	2104      	movs	r1, #4
 801df56:	6860      	ldr	r0, [r4, #4]
 801df58:	f7ff ff82 	bl	801de60 <std>
 801df5c:	68a0      	ldr	r0, [r4, #8]
 801df5e:	2201      	movs	r2, #1
 801df60:	2109      	movs	r1, #9
 801df62:	f7ff ff7d 	bl	801de60 <std>
 801df66:	68e0      	ldr	r0, [r4, #12]
 801df68:	2202      	movs	r2, #2
 801df6a:	2112      	movs	r1, #18
 801df6c:	f7ff ff78 	bl	801de60 <std>
 801df70:	2301      	movs	r3, #1
 801df72:	61a3      	str	r3, [r4, #24]
 801df74:	e7d2      	b.n	801df1c <__sinit+0xc>
 801df76:	bf00      	nop
 801df78:	08022cec 	.word	0x08022cec
 801df7c:	0801dea9 	.word	0x0801dea9

0801df80 <__sfp>:
 801df80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df82:	4607      	mov	r7, r0
 801df84:	f7ff ffac 	bl	801dee0 <__sfp_lock_acquire>
 801df88:	4b1e      	ldr	r3, [pc, #120]	; (801e004 <__sfp+0x84>)
 801df8a:	681e      	ldr	r6, [r3, #0]
 801df8c:	69b3      	ldr	r3, [r6, #24]
 801df8e:	b913      	cbnz	r3, 801df96 <__sfp+0x16>
 801df90:	4630      	mov	r0, r6
 801df92:	f7ff ffbd 	bl	801df10 <__sinit>
 801df96:	3648      	adds	r6, #72	; 0x48
 801df98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801df9c:	3b01      	subs	r3, #1
 801df9e:	d503      	bpl.n	801dfa8 <__sfp+0x28>
 801dfa0:	6833      	ldr	r3, [r6, #0]
 801dfa2:	b30b      	cbz	r3, 801dfe8 <__sfp+0x68>
 801dfa4:	6836      	ldr	r6, [r6, #0]
 801dfa6:	e7f7      	b.n	801df98 <__sfp+0x18>
 801dfa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dfac:	b9d5      	cbnz	r5, 801dfe4 <__sfp+0x64>
 801dfae:	4b16      	ldr	r3, [pc, #88]	; (801e008 <__sfp+0x88>)
 801dfb0:	60e3      	str	r3, [r4, #12]
 801dfb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dfb6:	6665      	str	r5, [r4, #100]	; 0x64
 801dfb8:	f000 f86c 	bl	801e094 <__retarget_lock_init_recursive>
 801dfbc:	f7ff ff96 	bl	801deec <__sfp_lock_release>
 801dfc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dfc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801dfc8:	6025      	str	r5, [r4, #0]
 801dfca:	61a5      	str	r5, [r4, #24]
 801dfcc:	2208      	movs	r2, #8
 801dfce:	4629      	mov	r1, r5
 801dfd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dfd4:	f000 f899 	bl	801e10a <memset>
 801dfd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dfdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801dfe0:	4620      	mov	r0, r4
 801dfe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dfe4:	3468      	adds	r4, #104	; 0x68
 801dfe6:	e7d9      	b.n	801df9c <__sfp+0x1c>
 801dfe8:	2104      	movs	r1, #4
 801dfea:	4638      	mov	r0, r7
 801dfec:	f7ff ff62 	bl	801deb4 <__sfmoreglue>
 801dff0:	4604      	mov	r4, r0
 801dff2:	6030      	str	r0, [r6, #0]
 801dff4:	2800      	cmp	r0, #0
 801dff6:	d1d5      	bne.n	801dfa4 <__sfp+0x24>
 801dff8:	f7ff ff78 	bl	801deec <__sfp_lock_release>
 801dffc:	230c      	movs	r3, #12
 801dffe:	603b      	str	r3, [r7, #0]
 801e000:	e7ee      	b.n	801dfe0 <__sfp+0x60>
 801e002:	bf00      	nop
 801e004:	08022cec 	.word	0x08022cec
 801e008:	ffff0001 	.word	0xffff0001

0801e00c <_fwalk_reent>:
 801e00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e010:	4606      	mov	r6, r0
 801e012:	4688      	mov	r8, r1
 801e014:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e018:	2700      	movs	r7, #0
 801e01a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e01e:	f1b9 0901 	subs.w	r9, r9, #1
 801e022:	d505      	bpl.n	801e030 <_fwalk_reent+0x24>
 801e024:	6824      	ldr	r4, [r4, #0]
 801e026:	2c00      	cmp	r4, #0
 801e028:	d1f7      	bne.n	801e01a <_fwalk_reent+0xe>
 801e02a:	4638      	mov	r0, r7
 801e02c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e030:	89ab      	ldrh	r3, [r5, #12]
 801e032:	2b01      	cmp	r3, #1
 801e034:	d907      	bls.n	801e046 <_fwalk_reent+0x3a>
 801e036:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e03a:	3301      	adds	r3, #1
 801e03c:	d003      	beq.n	801e046 <_fwalk_reent+0x3a>
 801e03e:	4629      	mov	r1, r5
 801e040:	4630      	mov	r0, r6
 801e042:	47c0      	blx	r8
 801e044:	4307      	orrs	r7, r0
 801e046:	3568      	adds	r5, #104	; 0x68
 801e048:	e7e9      	b.n	801e01e <_fwalk_reent+0x12>
	...

0801e04c <__libc_init_array>:
 801e04c:	b570      	push	{r4, r5, r6, lr}
 801e04e:	4d0d      	ldr	r5, [pc, #52]	; (801e084 <__libc_init_array+0x38>)
 801e050:	4c0d      	ldr	r4, [pc, #52]	; (801e088 <__libc_init_array+0x3c>)
 801e052:	1b64      	subs	r4, r4, r5
 801e054:	10a4      	asrs	r4, r4, #2
 801e056:	2600      	movs	r6, #0
 801e058:	42a6      	cmp	r6, r4
 801e05a:	d109      	bne.n	801e070 <__libc_init_array+0x24>
 801e05c:	4d0b      	ldr	r5, [pc, #44]	; (801e08c <__libc_init_array+0x40>)
 801e05e:	4c0c      	ldr	r4, [pc, #48]	; (801e090 <__libc_init_array+0x44>)
 801e060:	f001 f9e2 	bl	801f428 <_init>
 801e064:	1b64      	subs	r4, r4, r5
 801e066:	10a4      	asrs	r4, r4, #2
 801e068:	2600      	movs	r6, #0
 801e06a:	42a6      	cmp	r6, r4
 801e06c:	d105      	bne.n	801e07a <__libc_init_array+0x2e>
 801e06e:	bd70      	pop	{r4, r5, r6, pc}
 801e070:	f855 3b04 	ldr.w	r3, [r5], #4
 801e074:	4798      	blx	r3
 801e076:	3601      	adds	r6, #1
 801e078:	e7ee      	b.n	801e058 <__libc_init_array+0xc>
 801e07a:	f855 3b04 	ldr.w	r3, [r5], #4
 801e07e:	4798      	blx	r3
 801e080:	3601      	adds	r6, #1
 801e082:	e7f2      	b.n	801e06a <__libc_init_array+0x1e>
 801e084:	08022ddc 	.word	0x08022ddc
 801e088:	08022ddc 	.word	0x08022ddc
 801e08c:	08022ddc 	.word	0x08022ddc
 801e090:	08022de0 	.word	0x08022de0

0801e094 <__retarget_lock_init_recursive>:
 801e094:	4770      	bx	lr

0801e096 <__retarget_lock_acquire_recursive>:
 801e096:	4770      	bx	lr

0801e098 <__retarget_lock_release_recursive>:
 801e098:	4770      	bx	lr

0801e09a <memcmp>:
 801e09a:	b510      	push	{r4, lr}
 801e09c:	3901      	subs	r1, #1
 801e09e:	4402      	add	r2, r0
 801e0a0:	4290      	cmp	r0, r2
 801e0a2:	d101      	bne.n	801e0a8 <memcmp+0xe>
 801e0a4:	2000      	movs	r0, #0
 801e0a6:	e005      	b.n	801e0b4 <memcmp+0x1a>
 801e0a8:	7803      	ldrb	r3, [r0, #0]
 801e0aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e0ae:	42a3      	cmp	r3, r4
 801e0b0:	d001      	beq.n	801e0b6 <memcmp+0x1c>
 801e0b2:	1b18      	subs	r0, r3, r4
 801e0b4:	bd10      	pop	{r4, pc}
 801e0b6:	3001      	adds	r0, #1
 801e0b8:	e7f2      	b.n	801e0a0 <memcmp+0x6>

0801e0ba <memcpy>:
 801e0ba:	440a      	add	r2, r1
 801e0bc:	4291      	cmp	r1, r2
 801e0be:	f100 33ff 	add.w	r3, r0, #4294967295
 801e0c2:	d100      	bne.n	801e0c6 <memcpy+0xc>
 801e0c4:	4770      	bx	lr
 801e0c6:	b510      	push	{r4, lr}
 801e0c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e0cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e0d0:	4291      	cmp	r1, r2
 801e0d2:	d1f9      	bne.n	801e0c8 <memcpy+0xe>
 801e0d4:	bd10      	pop	{r4, pc}

0801e0d6 <memmove>:
 801e0d6:	4288      	cmp	r0, r1
 801e0d8:	b510      	push	{r4, lr}
 801e0da:	eb01 0402 	add.w	r4, r1, r2
 801e0de:	d902      	bls.n	801e0e6 <memmove+0x10>
 801e0e0:	4284      	cmp	r4, r0
 801e0e2:	4623      	mov	r3, r4
 801e0e4:	d807      	bhi.n	801e0f6 <memmove+0x20>
 801e0e6:	1e43      	subs	r3, r0, #1
 801e0e8:	42a1      	cmp	r1, r4
 801e0ea:	d008      	beq.n	801e0fe <memmove+0x28>
 801e0ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e0f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e0f4:	e7f8      	b.n	801e0e8 <memmove+0x12>
 801e0f6:	4402      	add	r2, r0
 801e0f8:	4601      	mov	r1, r0
 801e0fa:	428a      	cmp	r2, r1
 801e0fc:	d100      	bne.n	801e100 <memmove+0x2a>
 801e0fe:	bd10      	pop	{r4, pc}
 801e100:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e104:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e108:	e7f7      	b.n	801e0fa <memmove+0x24>

0801e10a <memset>:
 801e10a:	4402      	add	r2, r0
 801e10c:	4603      	mov	r3, r0
 801e10e:	4293      	cmp	r3, r2
 801e110:	d100      	bne.n	801e114 <memset+0xa>
 801e112:	4770      	bx	lr
 801e114:	f803 1b01 	strb.w	r1, [r3], #1
 801e118:	e7f9      	b.n	801e10e <memset+0x4>
	...

0801e11c <sbrk_aligned>:
 801e11c:	b570      	push	{r4, r5, r6, lr}
 801e11e:	4e0e      	ldr	r6, [pc, #56]	; (801e158 <sbrk_aligned+0x3c>)
 801e120:	460c      	mov	r4, r1
 801e122:	6831      	ldr	r1, [r6, #0]
 801e124:	4605      	mov	r5, r0
 801e126:	b911      	cbnz	r1, 801e12e <sbrk_aligned+0x12>
 801e128:	f000 f94c 	bl	801e3c4 <_sbrk_r>
 801e12c:	6030      	str	r0, [r6, #0]
 801e12e:	4621      	mov	r1, r4
 801e130:	4628      	mov	r0, r5
 801e132:	f000 f947 	bl	801e3c4 <_sbrk_r>
 801e136:	1c43      	adds	r3, r0, #1
 801e138:	d00a      	beq.n	801e150 <sbrk_aligned+0x34>
 801e13a:	1cc4      	adds	r4, r0, #3
 801e13c:	f024 0403 	bic.w	r4, r4, #3
 801e140:	42a0      	cmp	r0, r4
 801e142:	d007      	beq.n	801e154 <sbrk_aligned+0x38>
 801e144:	1a21      	subs	r1, r4, r0
 801e146:	4628      	mov	r0, r5
 801e148:	f000 f93c 	bl	801e3c4 <_sbrk_r>
 801e14c:	3001      	adds	r0, #1
 801e14e:	d101      	bne.n	801e154 <sbrk_aligned+0x38>
 801e150:	f04f 34ff 	mov.w	r4, #4294967295
 801e154:	4620      	mov	r0, r4
 801e156:	bd70      	pop	{r4, r5, r6, pc}
 801e158:	2405eb14 	.word	0x2405eb14

0801e15c <_malloc_r>:
 801e15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e160:	1ccd      	adds	r5, r1, #3
 801e162:	f025 0503 	bic.w	r5, r5, #3
 801e166:	3508      	adds	r5, #8
 801e168:	2d0c      	cmp	r5, #12
 801e16a:	bf38      	it	cc
 801e16c:	250c      	movcc	r5, #12
 801e16e:	2d00      	cmp	r5, #0
 801e170:	4607      	mov	r7, r0
 801e172:	db01      	blt.n	801e178 <_malloc_r+0x1c>
 801e174:	42a9      	cmp	r1, r5
 801e176:	d905      	bls.n	801e184 <_malloc_r+0x28>
 801e178:	230c      	movs	r3, #12
 801e17a:	603b      	str	r3, [r7, #0]
 801e17c:	2600      	movs	r6, #0
 801e17e:	4630      	mov	r0, r6
 801e180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e184:	4e2e      	ldr	r6, [pc, #184]	; (801e240 <_malloc_r+0xe4>)
 801e186:	f000 fad1 	bl	801e72c <__malloc_lock>
 801e18a:	6833      	ldr	r3, [r6, #0]
 801e18c:	461c      	mov	r4, r3
 801e18e:	bb34      	cbnz	r4, 801e1de <_malloc_r+0x82>
 801e190:	4629      	mov	r1, r5
 801e192:	4638      	mov	r0, r7
 801e194:	f7ff ffc2 	bl	801e11c <sbrk_aligned>
 801e198:	1c43      	adds	r3, r0, #1
 801e19a:	4604      	mov	r4, r0
 801e19c:	d14d      	bne.n	801e23a <_malloc_r+0xde>
 801e19e:	6834      	ldr	r4, [r6, #0]
 801e1a0:	4626      	mov	r6, r4
 801e1a2:	2e00      	cmp	r6, #0
 801e1a4:	d140      	bne.n	801e228 <_malloc_r+0xcc>
 801e1a6:	6823      	ldr	r3, [r4, #0]
 801e1a8:	4631      	mov	r1, r6
 801e1aa:	4638      	mov	r0, r7
 801e1ac:	eb04 0803 	add.w	r8, r4, r3
 801e1b0:	f000 f908 	bl	801e3c4 <_sbrk_r>
 801e1b4:	4580      	cmp	r8, r0
 801e1b6:	d13a      	bne.n	801e22e <_malloc_r+0xd2>
 801e1b8:	6821      	ldr	r1, [r4, #0]
 801e1ba:	3503      	adds	r5, #3
 801e1bc:	1a6d      	subs	r5, r5, r1
 801e1be:	f025 0503 	bic.w	r5, r5, #3
 801e1c2:	3508      	adds	r5, #8
 801e1c4:	2d0c      	cmp	r5, #12
 801e1c6:	bf38      	it	cc
 801e1c8:	250c      	movcc	r5, #12
 801e1ca:	4629      	mov	r1, r5
 801e1cc:	4638      	mov	r0, r7
 801e1ce:	f7ff ffa5 	bl	801e11c <sbrk_aligned>
 801e1d2:	3001      	adds	r0, #1
 801e1d4:	d02b      	beq.n	801e22e <_malloc_r+0xd2>
 801e1d6:	6823      	ldr	r3, [r4, #0]
 801e1d8:	442b      	add	r3, r5
 801e1da:	6023      	str	r3, [r4, #0]
 801e1dc:	e00e      	b.n	801e1fc <_malloc_r+0xa0>
 801e1de:	6822      	ldr	r2, [r4, #0]
 801e1e0:	1b52      	subs	r2, r2, r5
 801e1e2:	d41e      	bmi.n	801e222 <_malloc_r+0xc6>
 801e1e4:	2a0b      	cmp	r2, #11
 801e1e6:	d916      	bls.n	801e216 <_malloc_r+0xba>
 801e1e8:	1961      	adds	r1, r4, r5
 801e1ea:	42a3      	cmp	r3, r4
 801e1ec:	6025      	str	r5, [r4, #0]
 801e1ee:	bf18      	it	ne
 801e1f0:	6059      	strne	r1, [r3, #4]
 801e1f2:	6863      	ldr	r3, [r4, #4]
 801e1f4:	bf08      	it	eq
 801e1f6:	6031      	streq	r1, [r6, #0]
 801e1f8:	5162      	str	r2, [r4, r5]
 801e1fa:	604b      	str	r3, [r1, #4]
 801e1fc:	4638      	mov	r0, r7
 801e1fe:	f104 060b 	add.w	r6, r4, #11
 801e202:	f000 fa99 	bl	801e738 <__malloc_unlock>
 801e206:	f026 0607 	bic.w	r6, r6, #7
 801e20a:	1d23      	adds	r3, r4, #4
 801e20c:	1af2      	subs	r2, r6, r3
 801e20e:	d0b6      	beq.n	801e17e <_malloc_r+0x22>
 801e210:	1b9b      	subs	r3, r3, r6
 801e212:	50a3      	str	r3, [r4, r2]
 801e214:	e7b3      	b.n	801e17e <_malloc_r+0x22>
 801e216:	6862      	ldr	r2, [r4, #4]
 801e218:	42a3      	cmp	r3, r4
 801e21a:	bf0c      	ite	eq
 801e21c:	6032      	streq	r2, [r6, #0]
 801e21e:	605a      	strne	r2, [r3, #4]
 801e220:	e7ec      	b.n	801e1fc <_malloc_r+0xa0>
 801e222:	4623      	mov	r3, r4
 801e224:	6864      	ldr	r4, [r4, #4]
 801e226:	e7b2      	b.n	801e18e <_malloc_r+0x32>
 801e228:	4634      	mov	r4, r6
 801e22a:	6876      	ldr	r6, [r6, #4]
 801e22c:	e7b9      	b.n	801e1a2 <_malloc_r+0x46>
 801e22e:	230c      	movs	r3, #12
 801e230:	603b      	str	r3, [r7, #0]
 801e232:	4638      	mov	r0, r7
 801e234:	f000 fa80 	bl	801e738 <__malloc_unlock>
 801e238:	e7a1      	b.n	801e17e <_malloc_r+0x22>
 801e23a:	6025      	str	r5, [r4, #0]
 801e23c:	e7de      	b.n	801e1fc <_malloc_r+0xa0>
 801e23e:	bf00      	nop
 801e240:	2405eb10 	.word	0x2405eb10

0801e244 <iprintf>:
 801e244:	b40f      	push	{r0, r1, r2, r3}
 801e246:	4b0a      	ldr	r3, [pc, #40]	; (801e270 <iprintf+0x2c>)
 801e248:	b513      	push	{r0, r1, r4, lr}
 801e24a:	681c      	ldr	r4, [r3, #0]
 801e24c:	b124      	cbz	r4, 801e258 <iprintf+0x14>
 801e24e:	69a3      	ldr	r3, [r4, #24]
 801e250:	b913      	cbnz	r3, 801e258 <iprintf+0x14>
 801e252:	4620      	mov	r0, r4
 801e254:	f7ff fe5c 	bl	801df10 <__sinit>
 801e258:	ab05      	add	r3, sp, #20
 801e25a:	9a04      	ldr	r2, [sp, #16]
 801e25c:	68a1      	ldr	r1, [r4, #8]
 801e25e:	9301      	str	r3, [sp, #4]
 801e260:	4620      	mov	r0, r4
 801e262:	f000 fc41 	bl	801eae8 <_vfiprintf_r>
 801e266:	b002      	add	sp, #8
 801e268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e26c:	b004      	add	sp, #16
 801e26e:	4770      	bx	lr
 801e270:	24000034 	.word	0x24000034

0801e274 <rand>:
 801e274:	4b16      	ldr	r3, [pc, #88]	; (801e2d0 <rand+0x5c>)
 801e276:	b510      	push	{r4, lr}
 801e278:	681c      	ldr	r4, [r3, #0]
 801e27a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e27c:	b9b3      	cbnz	r3, 801e2ac <rand+0x38>
 801e27e:	2018      	movs	r0, #24
 801e280:	f000 fa4c 	bl	801e71c <malloc>
 801e284:	63a0      	str	r0, [r4, #56]	; 0x38
 801e286:	b928      	cbnz	r0, 801e294 <rand+0x20>
 801e288:	4602      	mov	r2, r0
 801e28a:	4b12      	ldr	r3, [pc, #72]	; (801e2d4 <rand+0x60>)
 801e28c:	4812      	ldr	r0, [pc, #72]	; (801e2d8 <rand+0x64>)
 801e28e:	214e      	movs	r1, #78	; 0x4e
 801e290:	f000 f930 	bl	801e4f4 <__assert_func>
 801e294:	4a11      	ldr	r2, [pc, #68]	; (801e2dc <rand+0x68>)
 801e296:	4b12      	ldr	r3, [pc, #72]	; (801e2e0 <rand+0x6c>)
 801e298:	e9c0 2300 	strd	r2, r3, [r0]
 801e29c:	4b11      	ldr	r3, [pc, #68]	; (801e2e4 <rand+0x70>)
 801e29e:	6083      	str	r3, [r0, #8]
 801e2a0:	230b      	movs	r3, #11
 801e2a2:	8183      	strh	r3, [r0, #12]
 801e2a4:	2201      	movs	r2, #1
 801e2a6:	2300      	movs	r3, #0
 801e2a8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801e2ac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801e2ae:	4a0e      	ldr	r2, [pc, #56]	; (801e2e8 <rand+0x74>)
 801e2b0:	6920      	ldr	r0, [r4, #16]
 801e2b2:	6963      	ldr	r3, [r4, #20]
 801e2b4:	490d      	ldr	r1, [pc, #52]	; (801e2ec <rand+0x78>)
 801e2b6:	4342      	muls	r2, r0
 801e2b8:	fb01 2203 	mla	r2, r1, r3, r2
 801e2bc:	fba0 0101 	umull	r0, r1, r0, r1
 801e2c0:	1c43      	adds	r3, r0, #1
 801e2c2:	eb42 0001 	adc.w	r0, r2, r1
 801e2c6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801e2ca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e2ce:	bd10      	pop	{r4, pc}
 801e2d0:	24000034 	.word	0x24000034
 801e2d4:	08022cf0 	.word	0x08022cf0
 801e2d8:	08022d07 	.word	0x08022d07
 801e2dc:	abcd330e 	.word	0xabcd330e
 801e2e0:	e66d1234 	.word	0xe66d1234
 801e2e4:	0005deec 	.word	0x0005deec
 801e2e8:	5851f42d 	.word	0x5851f42d
 801e2ec:	4c957f2d 	.word	0x4c957f2d

0801e2f0 <cleanup_glue>:
 801e2f0:	b538      	push	{r3, r4, r5, lr}
 801e2f2:	460c      	mov	r4, r1
 801e2f4:	6809      	ldr	r1, [r1, #0]
 801e2f6:	4605      	mov	r5, r0
 801e2f8:	b109      	cbz	r1, 801e2fe <cleanup_glue+0xe>
 801e2fa:	f7ff fff9 	bl	801e2f0 <cleanup_glue>
 801e2fe:	4621      	mov	r1, r4
 801e300:	4628      	mov	r0, r5
 801e302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e306:	f000 ba1d 	b.w	801e744 <_free_r>
	...

0801e30c <_reclaim_reent>:
 801e30c:	4b2c      	ldr	r3, [pc, #176]	; (801e3c0 <_reclaim_reent+0xb4>)
 801e30e:	681b      	ldr	r3, [r3, #0]
 801e310:	4283      	cmp	r3, r0
 801e312:	b570      	push	{r4, r5, r6, lr}
 801e314:	4604      	mov	r4, r0
 801e316:	d051      	beq.n	801e3bc <_reclaim_reent+0xb0>
 801e318:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801e31a:	b143      	cbz	r3, 801e32e <_reclaim_reent+0x22>
 801e31c:	68db      	ldr	r3, [r3, #12]
 801e31e:	2b00      	cmp	r3, #0
 801e320:	d14a      	bne.n	801e3b8 <_reclaim_reent+0xac>
 801e322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e324:	6819      	ldr	r1, [r3, #0]
 801e326:	b111      	cbz	r1, 801e32e <_reclaim_reent+0x22>
 801e328:	4620      	mov	r0, r4
 801e32a:	f000 fa0b 	bl	801e744 <_free_r>
 801e32e:	6961      	ldr	r1, [r4, #20]
 801e330:	b111      	cbz	r1, 801e338 <_reclaim_reent+0x2c>
 801e332:	4620      	mov	r0, r4
 801e334:	f000 fa06 	bl	801e744 <_free_r>
 801e338:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e33a:	b111      	cbz	r1, 801e342 <_reclaim_reent+0x36>
 801e33c:	4620      	mov	r0, r4
 801e33e:	f000 fa01 	bl	801e744 <_free_r>
 801e342:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801e344:	b111      	cbz	r1, 801e34c <_reclaim_reent+0x40>
 801e346:	4620      	mov	r0, r4
 801e348:	f000 f9fc 	bl	801e744 <_free_r>
 801e34c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801e34e:	b111      	cbz	r1, 801e356 <_reclaim_reent+0x4a>
 801e350:	4620      	mov	r0, r4
 801e352:	f000 f9f7 	bl	801e744 <_free_r>
 801e356:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801e358:	b111      	cbz	r1, 801e360 <_reclaim_reent+0x54>
 801e35a:	4620      	mov	r0, r4
 801e35c:	f000 f9f2 	bl	801e744 <_free_r>
 801e360:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801e362:	b111      	cbz	r1, 801e36a <_reclaim_reent+0x5e>
 801e364:	4620      	mov	r0, r4
 801e366:	f000 f9ed 	bl	801e744 <_free_r>
 801e36a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801e36c:	b111      	cbz	r1, 801e374 <_reclaim_reent+0x68>
 801e36e:	4620      	mov	r0, r4
 801e370:	f000 f9e8 	bl	801e744 <_free_r>
 801e374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e376:	b111      	cbz	r1, 801e37e <_reclaim_reent+0x72>
 801e378:	4620      	mov	r0, r4
 801e37a:	f000 f9e3 	bl	801e744 <_free_r>
 801e37e:	69a3      	ldr	r3, [r4, #24]
 801e380:	b1e3      	cbz	r3, 801e3bc <_reclaim_reent+0xb0>
 801e382:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e384:	4620      	mov	r0, r4
 801e386:	4798      	blx	r3
 801e388:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801e38a:	b1b9      	cbz	r1, 801e3bc <_reclaim_reent+0xb0>
 801e38c:	4620      	mov	r0, r4
 801e38e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e392:	f7ff bfad 	b.w	801e2f0 <cleanup_glue>
 801e396:	5949      	ldr	r1, [r1, r5]
 801e398:	b941      	cbnz	r1, 801e3ac <_reclaim_reent+0xa0>
 801e39a:	3504      	adds	r5, #4
 801e39c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e39e:	2d80      	cmp	r5, #128	; 0x80
 801e3a0:	68d9      	ldr	r1, [r3, #12]
 801e3a2:	d1f8      	bne.n	801e396 <_reclaim_reent+0x8a>
 801e3a4:	4620      	mov	r0, r4
 801e3a6:	f000 f9cd 	bl	801e744 <_free_r>
 801e3aa:	e7ba      	b.n	801e322 <_reclaim_reent+0x16>
 801e3ac:	680e      	ldr	r6, [r1, #0]
 801e3ae:	4620      	mov	r0, r4
 801e3b0:	f000 f9c8 	bl	801e744 <_free_r>
 801e3b4:	4631      	mov	r1, r6
 801e3b6:	e7ef      	b.n	801e398 <_reclaim_reent+0x8c>
 801e3b8:	2500      	movs	r5, #0
 801e3ba:	e7ef      	b.n	801e39c <_reclaim_reent+0x90>
 801e3bc:	bd70      	pop	{r4, r5, r6, pc}
 801e3be:	bf00      	nop
 801e3c0:	24000034 	.word	0x24000034

0801e3c4 <_sbrk_r>:
 801e3c4:	b538      	push	{r3, r4, r5, lr}
 801e3c6:	4d06      	ldr	r5, [pc, #24]	; (801e3e0 <_sbrk_r+0x1c>)
 801e3c8:	2300      	movs	r3, #0
 801e3ca:	4604      	mov	r4, r0
 801e3cc:	4608      	mov	r0, r1
 801e3ce:	602b      	str	r3, [r5, #0]
 801e3d0:	f7e3 f814 	bl	80013fc <_sbrk>
 801e3d4:	1c43      	adds	r3, r0, #1
 801e3d6:	d102      	bne.n	801e3de <_sbrk_r+0x1a>
 801e3d8:	682b      	ldr	r3, [r5, #0]
 801e3da:	b103      	cbz	r3, 801e3de <_sbrk_r+0x1a>
 801e3dc:	6023      	str	r3, [r4, #0]
 801e3de:	bd38      	pop	{r3, r4, r5, pc}
 801e3e0:	2405eb18 	.word	0x2405eb18

0801e3e4 <siprintf>:
 801e3e4:	b40e      	push	{r1, r2, r3}
 801e3e6:	b500      	push	{lr}
 801e3e8:	b09c      	sub	sp, #112	; 0x70
 801e3ea:	ab1d      	add	r3, sp, #116	; 0x74
 801e3ec:	9002      	str	r0, [sp, #8]
 801e3ee:	9006      	str	r0, [sp, #24]
 801e3f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e3f4:	4809      	ldr	r0, [pc, #36]	; (801e41c <siprintf+0x38>)
 801e3f6:	9107      	str	r1, [sp, #28]
 801e3f8:	9104      	str	r1, [sp, #16]
 801e3fa:	4909      	ldr	r1, [pc, #36]	; (801e420 <siprintf+0x3c>)
 801e3fc:	f853 2b04 	ldr.w	r2, [r3], #4
 801e400:	9105      	str	r1, [sp, #20]
 801e402:	6800      	ldr	r0, [r0, #0]
 801e404:	9301      	str	r3, [sp, #4]
 801e406:	a902      	add	r1, sp, #8
 801e408:	f000 fa44 	bl	801e894 <_svfiprintf_r>
 801e40c:	9b02      	ldr	r3, [sp, #8]
 801e40e:	2200      	movs	r2, #0
 801e410:	701a      	strb	r2, [r3, #0]
 801e412:	b01c      	add	sp, #112	; 0x70
 801e414:	f85d eb04 	ldr.w	lr, [sp], #4
 801e418:	b003      	add	sp, #12
 801e41a:	4770      	bx	lr
 801e41c:	24000034 	.word	0x24000034
 801e420:	ffff0208 	.word	0xffff0208

0801e424 <__sread>:
 801e424:	b510      	push	{r4, lr}
 801e426:	460c      	mov	r4, r1
 801e428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e42c:	f000 fe20 	bl	801f070 <_read_r>
 801e430:	2800      	cmp	r0, #0
 801e432:	bfab      	itete	ge
 801e434:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e436:	89a3      	ldrhlt	r3, [r4, #12]
 801e438:	181b      	addge	r3, r3, r0
 801e43a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e43e:	bfac      	ite	ge
 801e440:	6563      	strge	r3, [r4, #84]	; 0x54
 801e442:	81a3      	strhlt	r3, [r4, #12]
 801e444:	bd10      	pop	{r4, pc}

0801e446 <__swrite>:
 801e446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e44a:	461f      	mov	r7, r3
 801e44c:	898b      	ldrh	r3, [r1, #12]
 801e44e:	05db      	lsls	r3, r3, #23
 801e450:	4605      	mov	r5, r0
 801e452:	460c      	mov	r4, r1
 801e454:	4616      	mov	r6, r2
 801e456:	d505      	bpl.n	801e464 <__swrite+0x1e>
 801e458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e45c:	2302      	movs	r3, #2
 801e45e:	2200      	movs	r2, #0
 801e460:	f000 f94a 	bl	801e6f8 <_lseek_r>
 801e464:	89a3      	ldrh	r3, [r4, #12]
 801e466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e46a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e46e:	81a3      	strh	r3, [r4, #12]
 801e470:	4632      	mov	r2, r6
 801e472:	463b      	mov	r3, r7
 801e474:	4628      	mov	r0, r5
 801e476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e47a:	f000 b829 	b.w	801e4d0 <_write_r>

0801e47e <__sseek>:
 801e47e:	b510      	push	{r4, lr}
 801e480:	460c      	mov	r4, r1
 801e482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e486:	f000 f937 	bl	801e6f8 <_lseek_r>
 801e48a:	1c43      	adds	r3, r0, #1
 801e48c:	89a3      	ldrh	r3, [r4, #12]
 801e48e:	bf15      	itete	ne
 801e490:	6560      	strne	r0, [r4, #84]	; 0x54
 801e492:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e496:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e49a:	81a3      	strheq	r3, [r4, #12]
 801e49c:	bf18      	it	ne
 801e49e:	81a3      	strhne	r3, [r4, #12]
 801e4a0:	bd10      	pop	{r4, pc}

0801e4a2 <__sclose>:
 801e4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e4a6:	f000 b843 	b.w	801e530 <_close_r>

0801e4aa <strncpy>:
 801e4aa:	b510      	push	{r4, lr}
 801e4ac:	3901      	subs	r1, #1
 801e4ae:	4603      	mov	r3, r0
 801e4b0:	b132      	cbz	r2, 801e4c0 <strncpy+0x16>
 801e4b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e4b6:	f803 4b01 	strb.w	r4, [r3], #1
 801e4ba:	3a01      	subs	r2, #1
 801e4bc:	2c00      	cmp	r4, #0
 801e4be:	d1f7      	bne.n	801e4b0 <strncpy+0x6>
 801e4c0:	441a      	add	r2, r3
 801e4c2:	2100      	movs	r1, #0
 801e4c4:	4293      	cmp	r3, r2
 801e4c6:	d100      	bne.n	801e4ca <strncpy+0x20>
 801e4c8:	bd10      	pop	{r4, pc}
 801e4ca:	f803 1b01 	strb.w	r1, [r3], #1
 801e4ce:	e7f9      	b.n	801e4c4 <strncpy+0x1a>

0801e4d0 <_write_r>:
 801e4d0:	b538      	push	{r3, r4, r5, lr}
 801e4d2:	4d07      	ldr	r5, [pc, #28]	; (801e4f0 <_write_r+0x20>)
 801e4d4:	4604      	mov	r4, r0
 801e4d6:	4608      	mov	r0, r1
 801e4d8:	4611      	mov	r1, r2
 801e4da:	2200      	movs	r2, #0
 801e4dc:	602a      	str	r2, [r5, #0]
 801e4de:	461a      	mov	r2, r3
 801e4e0:	f7e2 ff3b 	bl	800135a <_write>
 801e4e4:	1c43      	adds	r3, r0, #1
 801e4e6:	d102      	bne.n	801e4ee <_write_r+0x1e>
 801e4e8:	682b      	ldr	r3, [r5, #0]
 801e4ea:	b103      	cbz	r3, 801e4ee <_write_r+0x1e>
 801e4ec:	6023      	str	r3, [r4, #0]
 801e4ee:	bd38      	pop	{r3, r4, r5, pc}
 801e4f0:	2405eb18 	.word	0x2405eb18

0801e4f4 <__assert_func>:
 801e4f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e4f6:	4614      	mov	r4, r2
 801e4f8:	461a      	mov	r2, r3
 801e4fa:	4b09      	ldr	r3, [pc, #36]	; (801e520 <__assert_func+0x2c>)
 801e4fc:	681b      	ldr	r3, [r3, #0]
 801e4fe:	4605      	mov	r5, r0
 801e500:	68d8      	ldr	r0, [r3, #12]
 801e502:	b14c      	cbz	r4, 801e518 <__assert_func+0x24>
 801e504:	4b07      	ldr	r3, [pc, #28]	; (801e524 <__assert_func+0x30>)
 801e506:	9100      	str	r1, [sp, #0]
 801e508:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e50c:	4906      	ldr	r1, [pc, #24]	; (801e528 <__assert_func+0x34>)
 801e50e:	462b      	mov	r3, r5
 801e510:	f000 f8e0 	bl	801e6d4 <fiprintf>
 801e514:	f000 fe7e 	bl	801f214 <abort>
 801e518:	4b04      	ldr	r3, [pc, #16]	; (801e52c <__assert_func+0x38>)
 801e51a:	461c      	mov	r4, r3
 801e51c:	e7f3      	b.n	801e506 <__assert_func+0x12>
 801e51e:	bf00      	nop
 801e520:	24000034 	.word	0x24000034
 801e524:	08022d62 	.word	0x08022d62
 801e528:	08022d6f 	.word	0x08022d6f
 801e52c:	08022d9d 	.word	0x08022d9d

0801e530 <_close_r>:
 801e530:	b538      	push	{r3, r4, r5, lr}
 801e532:	4d06      	ldr	r5, [pc, #24]	; (801e54c <_close_r+0x1c>)
 801e534:	2300      	movs	r3, #0
 801e536:	4604      	mov	r4, r0
 801e538:	4608      	mov	r0, r1
 801e53a:	602b      	str	r3, [r5, #0]
 801e53c:	f7e2 ff29 	bl	8001392 <_close>
 801e540:	1c43      	adds	r3, r0, #1
 801e542:	d102      	bne.n	801e54a <_close_r+0x1a>
 801e544:	682b      	ldr	r3, [r5, #0]
 801e546:	b103      	cbz	r3, 801e54a <_close_r+0x1a>
 801e548:	6023      	str	r3, [r4, #0]
 801e54a:	bd38      	pop	{r3, r4, r5, pc}
 801e54c:	2405eb18 	.word	0x2405eb18

0801e550 <__sflush_r>:
 801e550:	898a      	ldrh	r2, [r1, #12]
 801e552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e556:	4605      	mov	r5, r0
 801e558:	0710      	lsls	r0, r2, #28
 801e55a:	460c      	mov	r4, r1
 801e55c:	d458      	bmi.n	801e610 <__sflush_r+0xc0>
 801e55e:	684b      	ldr	r3, [r1, #4]
 801e560:	2b00      	cmp	r3, #0
 801e562:	dc05      	bgt.n	801e570 <__sflush_r+0x20>
 801e564:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e566:	2b00      	cmp	r3, #0
 801e568:	dc02      	bgt.n	801e570 <__sflush_r+0x20>
 801e56a:	2000      	movs	r0, #0
 801e56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e570:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e572:	2e00      	cmp	r6, #0
 801e574:	d0f9      	beq.n	801e56a <__sflush_r+0x1a>
 801e576:	2300      	movs	r3, #0
 801e578:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e57c:	682f      	ldr	r7, [r5, #0]
 801e57e:	602b      	str	r3, [r5, #0]
 801e580:	d032      	beq.n	801e5e8 <__sflush_r+0x98>
 801e582:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e584:	89a3      	ldrh	r3, [r4, #12]
 801e586:	075a      	lsls	r2, r3, #29
 801e588:	d505      	bpl.n	801e596 <__sflush_r+0x46>
 801e58a:	6863      	ldr	r3, [r4, #4]
 801e58c:	1ac0      	subs	r0, r0, r3
 801e58e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e590:	b10b      	cbz	r3, 801e596 <__sflush_r+0x46>
 801e592:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e594:	1ac0      	subs	r0, r0, r3
 801e596:	2300      	movs	r3, #0
 801e598:	4602      	mov	r2, r0
 801e59a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e59c:	6a21      	ldr	r1, [r4, #32]
 801e59e:	4628      	mov	r0, r5
 801e5a0:	47b0      	blx	r6
 801e5a2:	1c43      	adds	r3, r0, #1
 801e5a4:	89a3      	ldrh	r3, [r4, #12]
 801e5a6:	d106      	bne.n	801e5b6 <__sflush_r+0x66>
 801e5a8:	6829      	ldr	r1, [r5, #0]
 801e5aa:	291d      	cmp	r1, #29
 801e5ac:	d82c      	bhi.n	801e608 <__sflush_r+0xb8>
 801e5ae:	4a2a      	ldr	r2, [pc, #168]	; (801e658 <__sflush_r+0x108>)
 801e5b0:	40ca      	lsrs	r2, r1
 801e5b2:	07d6      	lsls	r6, r2, #31
 801e5b4:	d528      	bpl.n	801e608 <__sflush_r+0xb8>
 801e5b6:	2200      	movs	r2, #0
 801e5b8:	6062      	str	r2, [r4, #4]
 801e5ba:	04d9      	lsls	r1, r3, #19
 801e5bc:	6922      	ldr	r2, [r4, #16]
 801e5be:	6022      	str	r2, [r4, #0]
 801e5c0:	d504      	bpl.n	801e5cc <__sflush_r+0x7c>
 801e5c2:	1c42      	adds	r2, r0, #1
 801e5c4:	d101      	bne.n	801e5ca <__sflush_r+0x7a>
 801e5c6:	682b      	ldr	r3, [r5, #0]
 801e5c8:	b903      	cbnz	r3, 801e5cc <__sflush_r+0x7c>
 801e5ca:	6560      	str	r0, [r4, #84]	; 0x54
 801e5cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e5ce:	602f      	str	r7, [r5, #0]
 801e5d0:	2900      	cmp	r1, #0
 801e5d2:	d0ca      	beq.n	801e56a <__sflush_r+0x1a>
 801e5d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e5d8:	4299      	cmp	r1, r3
 801e5da:	d002      	beq.n	801e5e2 <__sflush_r+0x92>
 801e5dc:	4628      	mov	r0, r5
 801e5de:	f000 f8b1 	bl	801e744 <_free_r>
 801e5e2:	2000      	movs	r0, #0
 801e5e4:	6360      	str	r0, [r4, #52]	; 0x34
 801e5e6:	e7c1      	b.n	801e56c <__sflush_r+0x1c>
 801e5e8:	6a21      	ldr	r1, [r4, #32]
 801e5ea:	2301      	movs	r3, #1
 801e5ec:	4628      	mov	r0, r5
 801e5ee:	47b0      	blx	r6
 801e5f0:	1c41      	adds	r1, r0, #1
 801e5f2:	d1c7      	bne.n	801e584 <__sflush_r+0x34>
 801e5f4:	682b      	ldr	r3, [r5, #0]
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d0c4      	beq.n	801e584 <__sflush_r+0x34>
 801e5fa:	2b1d      	cmp	r3, #29
 801e5fc:	d001      	beq.n	801e602 <__sflush_r+0xb2>
 801e5fe:	2b16      	cmp	r3, #22
 801e600:	d101      	bne.n	801e606 <__sflush_r+0xb6>
 801e602:	602f      	str	r7, [r5, #0]
 801e604:	e7b1      	b.n	801e56a <__sflush_r+0x1a>
 801e606:	89a3      	ldrh	r3, [r4, #12]
 801e608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e60c:	81a3      	strh	r3, [r4, #12]
 801e60e:	e7ad      	b.n	801e56c <__sflush_r+0x1c>
 801e610:	690f      	ldr	r7, [r1, #16]
 801e612:	2f00      	cmp	r7, #0
 801e614:	d0a9      	beq.n	801e56a <__sflush_r+0x1a>
 801e616:	0793      	lsls	r3, r2, #30
 801e618:	680e      	ldr	r6, [r1, #0]
 801e61a:	bf08      	it	eq
 801e61c:	694b      	ldreq	r3, [r1, #20]
 801e61e:	600f      	str	r7, [r1, #0]
 801e620:	bf18      	it	ne
 801e622:	2300      	movne	r3, #0
 801e624:	eba6 0807 	sub.w	r8, r6, r7
 801e628:	608b      	str	r3, [r1, #8]
 801e62a:	f1b8 0f00 	cmp.w	r8, #0
 801e62e:	dd9c      	ble.n	801e56a <__sflush_r+0x1a>
 801e630:	6a21      	ldr	r1, [r4, #32]
 801e632:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e634:	4643      	mov	r3, r8
 801e636:	463a      	mov	r2, r7
 801e638:	4628      	mov	r0, r5
 801e63a:	47b0      	blx	r6
 801e63c:	2800      	cmp	r0, #0
 801e63e:	dc06      	bgt.n	801e64e <__sflush_r+0xfe>
 801e640:	89a3      	ldrh	r3, [r4, #12]
 801e642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e646:	81a3      	strh	r3, [r4, #12]
 801e648:	f04f 30ff 	mov.w	r0, #4294967295
 801e64c:	e78e      	b.n	801e56c <__sflush_r+0x1c>
 801e64e:	4407      	add	r7, r0
 801e650:	eba8 0800 	sub.w	r8, r8, r0
 801e654:	e7e9      	b.n	801e62a <__sflush_r+0xda>
 801e656:	bf00      	nop
 801e658:	20400001 	.word	0x20400001

0801e65c <_fflush_r>:
 801e65c:	b538      	push	{r3, r4, r5, lr}
 801e65e:	690b      	ldr	r3, [r1, #16]
 801e660:	4605      	mov	r5, r0
 801e662:	460c      	mov	r4, r1
 801e664:	b913      	cbnz	r3, 801e66c <_fflush_r+0x10>
 801e666:	2500      	movs	r5, #0
 801e668:	4628      	mov	r0, r5
 801e66a:	bd38      	pop	{r3, r4, r5, pc}
 801e66c:	b118      	cbz	r0, 801e676 <_fflush_r+0x1a>
 801e66e:	6983      	ldr	r3, [r0, #24]
 801e670:	b90b      	cbnz	r3, 801e676 <_fflush_r+0x1a>
 801e672:	f7ff fc4d 	bl	801df10 <__sinit>
 801e676:	4b14      	ldr	r3, [pc, #80]	; (801e6c8 <_fflush_r+0x6c>)
 801e678:	429c      	cmp	r4, r3
 801e67a:	d11b      	bne.n	801e6b4 <_fflush_r+0x58>
 801e67c:	686c      	ldr	r4, [r5, #4]
 801e67e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e682:	2b00      	cmp	r3, #0
 801e684:	d0ef      	beq.n	801e666 <_fflush_r+0xa>
 801e686:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e688:	07d0      	lsls	r0, r2, #31
 801e68a:	d404      	bmi.n	801e696 <_fflush_r+0x3a>
 801e68c:	0599      	lsls	r1, r3, #22
 801e68e:	d402      	bmi.n	801e696 <_fflush_r+0x3a>
 801e690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e692:	f7ff fd00 	bl	801e096 <__retarget_lock_acquire_recursive>
 801e696:	4628      	mov	r0, r5
 801e698:	4621      	mov	r1, r4
 801e69a:	f7ff ff59 	bl	801e550 <__sflush_r>
 801e69e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e6a0:	07da      	lsls	r2, r3, #31
 801e6a2:	4605      	mov	r5, r0
 801e6a4:	d4e0      	bmi.n	801e668 <_fflush_r+0xc>
 801e6a6:	89a3      	ldrh	r3, [r4, #12]
 801e6a8:	059b      	lsls	r3, r3, #22
 801e6aa:	d4dd      	bmi.n	801e668 <_fflush_r+0xc>
 801e6ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e6ae:	f7ff fcf3 	bl	801e098 <__retarget_lock_release_recursive>
 801e6b2:	e7d9      	b.n	801e668 <_fflush_r+0xc>
 801e6b4:	4b05      	ldr	r3, [pc, #20]	; (801e6cc <_fflush_r+0x70>)
 801e6b6:	429c      	cmp	r4, r3
 801e6b8:	d101      	bne.n	801e6be <_fflush_r+0x62>
 801e6ba:	68ac      	ldr	r4, [r5, #8]
 801e6bc:	e7df      	b.n	801e67e <_fflush_r+0x22>
 801e6be:	4b04      	ldr	r3, [pc, #16]	; (801e6d0 <_fflush_r+0x74>)
 801e6c0:	429c      	cmp	r4, r3
 801e6c2:	bf08      	it	eq
 801e6c4:	68ec      	ldreq	r4, [r5, #12]
 801e6c6:	e7da      	b.n	801e67e <_fflush_r+0x22>
 801e6c8:	08022cac 	.word	0x08022cac
 801e6cc:	08022ccc 	.word	0x08022ccc
 801e6d0:	08022c8c 	.word	0x08022c8c

0801e6d4 <fiprintf>:
 801e6d4:	b40e      	push	{r1, r2, r3}
 801e6d6:	b503      	push	{r0, r1, lr}
 801e6d8:	4601      	mov	r1, r0
 801e6da:	ab03      	add	r3, sp, #12
 801e6dc:	4805      	ldr	r0, [pc, #20]	; (801e6f4 <fiprintf+0x20>)
 801e6de:	f853 2b04 	ldr.w	r2, [r3], #4
 801e6e2:	6800      	ldr	r0, [r0, #0]
 801e6e4:	9301      	str	r3, [sp, #4]
 801e6e6:	f000 f9ff 	bl	801eae8 <_vfiprintf_r>
 801e6ea:	b002      	add	sp, #8
 801e6ec:	f85d eb04 	ldr.w	lr, [sp], #4
 801e6f0:	b003      	add	sp, #12
 801e6f2:	4770      	bx	lr
 801e6f4:	24000034 	.word	0x24000034

0801e6f8 <_lseek_r>:
 801e6f8:	b538      	push	{r3, r4, r5, lr}
 801e6fa:	4d07      	ldr	r5, [pc, #28]	; (801e718 <_lseek_r+0x20>)
 801e6fc:	4604      	mov	r4, r0
 801e6fe:	4608      	mov	r0, r1
 801e700:	4611      	mov	r1, r2
 801e702:	2200      	movs	r2, #0
 801e704:	602a      	str	r2, [r5, #0]
 801e706:	461a      	mov	r2, r3
 801e708:	f7e2 fe6a 	bl	80013e0 <_lseek>
 801e70c:	1c43      	adds	r3, r0, #1
 801e70e:	d102      	bne.n	801e716 <_lseek_r+0x1e>
 801e710:	682b      	ldr	r3, [r5, #0]
 801e712:	b103      	cbz	r3, 801e716 <_lseek_r+0x1e>
 801e714:	6023      	str	r3, [r4, #0]
 801e716:	bd38      	pop	{r3, r4, r5, pc}
 801e718:	2405eb18 	.word	0x2405eb18

0801e71c <malloc>:
 801e71c:	4b02      	ldr	r3, [pc, #8]	; (801e728 <malloc+0xc>)
 801e71e:	4601      	mov	r1, r0
 801e720:	6818      	ldr	r0, [r3, #0]
 801e722:	f7ff bd1b 	b.w	801e15c <_malloc_r>
 801e726:	bf00      	nop
 801e728:	24000034 	.word	0x24000034

0801e72c <__malloc_lock>:
 801e72c:	4801      	ldr	r0, [pc, #4]	; (801e734 <__malloc_lock+0x8>)
 801e72e:	f7ff bcb2 	b.w	801e096 <__retarget_lock_acquire_recursive>
 801e732:	bf00      	nop
 801e734:	2405eb0c 	.word	0x2405eb0c

0801e738 <__malloc_unlock>:
 801e738:	4801      	ldr	r0, [pc, #4]	; (801e740 <__malloc_unlock+0x8>)
 801e73a:	f7ff bcad 	b.w	801e098 <__retarget_lock_release_recursive>
 801e73e:	bf00      	nop
 801e740:	2405eb0c 	.word	0x2405eb0c

0801e744 <_free_r>:
 801e744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e746:	2900      	cmp	r1, #0
 801e748:	d044      	beq.n	801e7d4 <_free_r+0x90>
 801e74a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e74e:	9001      	str	r0, [sp, #4]
 801e750:	2b00      	cmp	r3, #0
 801e752:	f1a1 0404 	sub.w	r4, r1, #4
 801e756:	bfb8      	it	lt
 801e758:	18e4      	addlt	r4, r4, r3
 801e75a:	f7ff ffe7 	bl	801e72c <__malloc_lock>
 801e75e:	4a1e      	ldr	r2, [pc, #120]	; (801e7d8 <_free_r+0x94>)
 801e760:	9801      	ldr	r0, [sp, #4]
 801e762:	6813      	ldr	r3, [r2, #0]
 801e764:	b933      	cbnz	r3, 801e774 <_free_r+0x30>
 801e766:	6063      	str	r3, [r4, #4]
 801e768:	6014      	str	r4, [r2, #0]
 801e76a:	b003      	add	sp, #12
 801e76c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e770:	f7ff bfe2 	b.w	801e738 <__malloc_unlock>
 801e774:	42a3      	cmp	r3, r4
 801e776:	d908      	bls.n	801e78a <_free_r+0x46>
 801e778:	6825      	ldr	r5, [r4, #0]
 801e77a:	1961      	adds	r1, r4, r5
 801e77c:	428b      	cmp	r3, r1
 801e77e:	bf01      	itttt	eq
 801e780:	6819      	ldreq	r1, [r3, #0]
 801e782:	685b      	ldreq	r3, [r3, #4]
 801e784:	1949      	addeq	r1, r1, r5
 801e786:	6021      	streq	r1, [r4, #0]
 801e788:	e7ed      	b.n	801e766 <_free_r+0x22>
 801e78a:	461a      	mov	r2, r3
 801e78c:	685b      	ldr	r3, [r3, #4]
 801e78e:	b10b      	cbz	r3, 801e794 <_free_r+0x50>
 801e790:	42a3      	cmp	r3, r4
 801e792:	d9fa      	bls.n	801e78a <_free_r+0x46>
 801e794:	6811      	ldr	r1, [r2, #0]
 801e796:	1855      	adds	r5, r2, r1
 801e798:	42a5      	cmp	r5, r4
 801e79a:	d10b      	bne.n	801e7b4 <_free_r+0x70>
 801e79c:	6824      	ldr	r4, [r4, #0]
 801e79e:	4421      	add	r1, r4
 801e7a0:	1854      	adds	r4, r2, r1
 801e7a2:	42a3      	cmp	r3, r4
 801e7a4:	6011      	str	r1, [r2, #0]
 801e7a6:	d1e0      	bne.n	801e76a <_free_r+0x26>
 801e7a8:	681c      	ldr	r4, [r3, #0]
 801e7aa:	685b      	ldr	r3, [r3, #4]
 801e7ac:	6053      	str	r3, [r2, #4]
 801e7ae:	4421      	add	r1, r4
 801e7b0:	6011      	str	r1, [r2, #0]
 801e7b2:	e7da      	b.n	801e76a <_free_r+0x26>
 801e7b4:	d902      	bls.n	801e7bc <_free_r+0x78>
 801e7b6:	230c      	movs	r3, #12
 801e7b8:	6003      	str	r3, [r0, #0]
 801e7ba:	e7d6      	b.n	801e76a <_free_r+0x26>
 801e7bc:	6825      	ldr	r5, [r4, #0]
 801e7be:	1961      	adds	r1, r4, r5
 801e7c0:	428b      	cmp	r3, r1
 801e7c2:	bf04      	itt	eq
 801e7c4:	6819      	ldreq	r1, [r3, #0]
 801e7c6:	685b      	ldreq	r3, [r3, #4]
 801e7c8:	6063      	str	r3, [r4, #4]
 801e7ca:	bf04      	itt	eq
 801e7cc:	1949      	addeq	r1, r1, r5
 801e7ce:	6021      	streq	r1, [r4, #0]
 801e7d0:	6054      	str	r4, [r2, #4]
 801e7d2:	e7ca      	b.n	801e76a <_free_r+0x26>
 801e7d4:	b003      	add	sp, #12
 801e7d6:	bd30      	pop	{r4, r5, pc}
 801e7d8:	2405eb10 	.word	0x2405eb10

0801e7dc <__ssputs_r>:
 801e7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e7e0:	688e      	ldr	r6, [r1, #8]
 801e7e2:	429e      	cmp	r6, r3
 801e7e4:	4682      	mov	sl, r0
 801e7e6:	460c      	mov	r4, r1
 801e7e8:	4690      	mov	r8, r2
 801e7ea:	461f      	mov	r7, r3
 801e7ec:	d838      	bhi.n	801e860 <__ssputs_r+0x84>
 801e7ee:	898a      	ldrh	r2, [r1, #12]
 801e7f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e7f4:	d032      	beq.n	801e85c <__ssputs_r+0x80>
 801e7f6:	6825      	ldr	r5, [r4, #0]
 801e7f8:	6909      	ldr	r1, [r1, #16]
 801e7fa:	eba5 0901 	sub.w	r9, r5, r1
 801e7fe:	6965      	ldr	r5, [r4, #20]
 801e800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e804:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e808:	3301      	adds	r3, #1
 801e80a:	444b      	add	r3, r9
 801e80c:	106d      	asrs	r5, r5, #1
 801e80e:	429d      	cmp	r5, r3
 801e810:	bf38      	it	cc
 801e812:	461d      	movcc	r5, r3
 801e814:	0553      	lsls	r3, r2, #21
 801e816:	d531      	bpl.n	801e87c <__ssputs_r+0xa0>
 801e818:	4629      	mov	r1, r5
 801e81a:	f7ff fc9f 	bl	801e15c <_malloc_r>
 801e81e:	4606      	mov	r6, r0
 801e820:	b950      	cbnz	r0, 801e838 <__ssputs_r+0x5c>
 801e822:	230c      	movs	r3, #12
 801e824:	f8ca 3000 	str.w	r3, [sl]
 801e828:	89a3      	ldrh	r3, [r4, #12]
 801e82a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e82e:	81a3      	strh	r3, [r4, #12]
 801e830:	f04f 30ff 	mov.w	r0, #4294967295
 801e834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e838:	6921      	ldr	r1, [r4, #16]
 801e83a:	464a      	mov	r2, r9
 801e83c:	f7ff fc3d 	bl	801e0ba <memcpy>
 801e840:	89a3      	ldrh	r3, [r4, #12]
 801e842:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e84a:	81a3      	strh	r3, [r4, #12]
 801e84c:	6126      	str	r6, [r4, #16]
 801e84e:	6165      	str	r5, [r4, #20]
 801e850:	444e      	add	r6, r9
 801e852:	eba5 0509 	sub.w	r5, r5, r9
 801e856:	6026      	str	r6, [r4, #0]
 801e858:	60a5      	str	r5, [r4, #8]
 801e85a:	463e      	mov	r6, r7
 801e85c:	42be      	cmp	r6, r7
 801e85e:	d900      	bls.n	801e862 <__ssputs_r+0x86>
 801e860:	463e      	mov	r6, r7
 801e862:	6820      	ldr	r0, [r4, #0]
 801e864:	4632      	mov	r2, r6
 801e866:	4641      	mov	r1, r8
 801e868:	f7ff fc35 	bl	801e0d6 <memmove>
 801e86c:	68a3      	ldr	r3, [r4, #8]
 801e86e:	1b9b      	subs	r3, r3, r6
 801e870:	60a3      	str	r3, [r4, #8]
 801e872:	6823      	ldr	r3, [r4, #0]
 801e874:	4433      	add	r3, r6
 801e876:	6023      	str	r3, [r4, #0]
 801e878:	2000      	movs	r0, #0
 801e87a:	e7db      	b.n	801e834 <__ssputs_r+0x58>
 801e87c:	462a      	mov	r2, r5
 801e87e:	f000 fd35 	bl	801f2ec <_realloc_r>
 801e882:	4606      	mov	r6, r0
 801e884:	2800      	cmp	r0, #0
 801e886:	d1e1      	bne.n	801e84c <__ssputs_r+0x70>
 801e888:	6921      	ldr	r1, [r4, #16]
 801e88a:	4650      	mov	r0, sl
 801e88c:	f7ff ff5a 	bl	801e744 <_free_r>
 801e890:	e7c7      	b.n	801e822 <__ssputs_r+0x46>
	...

0801e894 <_svfiprintf_r>:
 801e894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e898:	4698      	mov	r8, r3
 801e89a:	898b      	ldrh	r3, [r1, #12]
 801e89c:	061b      	lsls	r3, r3, #24
 801e89e:	b09d      	sub	sp, #116	; 0x74
 801e8a0:	4607      	mov	r7, r0
 801e8a2:	460d      	mov	r5, r1
 801e8a4:	4614      	mov	r4, r2
 801e8a6:	d50e      	bpl.n	801e8c6 <_svfiprintf_r+0x32>
 801e8a8:	690b      	ldr	r3, [r1, #16]
 801e8aa:	b963      	cbnz	r3, 801e8c6 <_svfiprintf_r+0x32>
 801e8ac:	2140      	movs	r1, #64	; 0x40
 801e8ae:	f7ff fc55 	bl	801e15c <_malloc_r>
 801e8b2:	6028      	str	r0, [r5, #0]
 801e8b4:	6128      	str	r0, [r5, #16]
 801e8b6:	b920      	cbnz	r0, 801e8c2 <_svfiprintf_r+0x2e>
 801e8b8:	230c      	movs	r3, #12
 801e8ba:	603b      	str	r3, [r7, #0]
 801e8bc:	f04f 30ff 	mov.w	r0, #4294967295
 801e8c0:	e0d1      	b.n	801ea66 <_svfiprintf_r+0x1d2>
 801e8c2:	2340      	movs	r3, #64	; 0x40
 801e8c4:	616b      	str	r3, [r5, #20]
 801e8c6:	2300      	movs	r3, #0
 801e8c8:	9309      	str	r3, [sp, #36]	; 0x24
 801e8ca:	2320      	movs	r3, #32
 801e8cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e8d0:	f8cd 800c 	str.w	r8, [sp, #12]
 801e8d4:	2330      	movs	r3, #48	; 0x30
 801e8d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ea80 <_svfiprintf_r+0x1ec>
 801e8da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e8de:	f04f 0901 	mov.w	r9, #1
 801e8e2:	4623      	mov	r3, r4
 801e8e4:	469a      	mov	sl, r3
 801e8e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e8ea:	b10a      	cbz	r2, 801e8f0 <_svfiprintf_r+0x5c>
 801e8ec:	2a25      	cmp	r2, #37	; 0x25
 801e8ee:	d1f9      	bne.n	801e8e4 <_svfiprintf_r+0x50>
 801e8f0:	ebba 0b04 	subs.w	fp, sl, r4
 801e8f4:	d00b      	beq.n	801e90e <_svfiprintf_r+0x7a>
 801e8f6:	465b      	mov	r3, fp
 801e8f8:	4622      	mov	r2, r4
 801e8fa:	4629      	mov	r1, r5
 801e8fc:	4638      	mov	r0, r7
 801e8fe:	f7ff ff6d 	bl	801e7dc <__ssputs_r>
 801e902:	3001      	adds	r0, #1
 801e904:	f000 80aa 	beq.w	801ea5c <_svfiprintf_r+0x1c8>
 801e908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e90a:	445a      	add	r2, fp
 801e90c:	9209      	str	r2, [sp, #36]	; 0x24
 801e90e:	f89a 3000 	ldrb.w	r3, [sl]
 801e912:	2b00      	cmp	r3, #0
 801e914:	f000 80a2 	beq.w	801ea5c <_svfiprintf_r+0x1c8>
 801e918:	2300      	movs	r3, #0
 801e91a:	f04f 32ff 	mov.w	r2, #4294967295
 801e91e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e922:	f10a 0a01 	add.w	sl, sl, #1
 801e926:	9304      	str	r3, [sp, #16]
 801e928:	9307      	str	r3, [sp, #28]
 801e92a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e92e:	931a      	str	r3, [sp, #104]	; 0x68
 801e930:	4654      	mov	r4, sl
 801e932:	2205      	movs	r2, #5
 801e934:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e938:	4851      	ldr	r0, [pc, #324]	; (801ea80 <_svfiprintf_r+0x1ec>)
 801e93a:	f7e1 fcd1 	bl	80002e0 <memchr>
 801e93e:	9a04      	ldr	r2, [sp, #16]
 801e940:	b9d8      	cbnz	r0, 801e97a <_svfiprintf_r+0xe6>
 801e942:	06d0      	lsls	r0, r2, #27
 801e944:	bf44      	itt	mi
 801e946:	2320      	movmi	r3, #32
 801e948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e94c:	0711      	lsls	r1, r2, #28
 801e94e:	bf44      	itt	mi
 801e950:	232b      	movmi	r3, #43	; 0x2b
 801e952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e956:	f89a 3000 	ldrb.w	r3, [sl]
 801e95a:	2b2a      	cmp	r3, #42	; 0x2a
 801e95c:	d015      	beq.n	801e98a <_svfiprintf_r+0xf6>
 801e95e:	9a07      	ldr	r2, [sp, #28]
 801e960:	4654      	mov	r4, sl
 801e962:	2000      	movs	r0, #0
 801e964:	f04f 0c0a 	mov.w	ip, #10
 801e968:	4621      	mov	r1, r4
 801e96a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e96e:	3b30      	subs	r3, #48	; 0x30
 801e970:	2b09      	cmp	r3, #9
 801e972:	d94e      	bls.n	801ea12 <_svfiprintf_r+0x17e>
 801e974:	b1b0      	cbz	r0, 801e9a4 <_svfiprintf_r+0x110>
 801e976:	9207      	str	r2, [sp, #28]
 801e978:	e014      	b.n	801e9a4 <_svfiprintf_r+0x110>
 801e97a:	eba0 0308 	sub.w	r3, r0, r8
 801e97e:	fa09 f303 	lsl.w	r3, r9, r3
 801e982:	4313      	orrs	r3, r2
 801e984:	9304      	str	r3, [sp, #16]
 801e986:	46a2      	mov	sl, r4
 801e988:	e7d2      	b.n	801e930 <_svfiprintf_r+0x9c>
 801e98a:	9b03      	ldr	r3, [sp, #12]
 801e98c:	1d19      	adds	r1, r3, #4
 801e98e:	681b      	ldr	r3, [r3, #0]
 801e990:	9103      	str	r1, [sp, #12]
 801e992:	2b00      	cmp	r3, #0
 801e994:	bfbb      	ittet	lt
 801e996:	425b      	neglt	r3, r3
 801e998:	f042 0202 	orrlt.w	r2, r2, #2
 801e99c:	9307      	strge	r3, [sp, #28]
 801e99e:	9307      	strlt	r3, [sp, #28]
 801e9a0:	bfb8      	it	lt
 801e9a2:	9204      	strlt	r2, [sp, #16]
 801e9a4:	7823      	ldrb	r3, [r4, #0]
 801e9a6:	2b2e      	cmp	r3, #46	; 0x2e
 801e9a8:	d10c      	bne.n	801e9c4 <_svfiprintf_r+0x130>
 801e9aa:	7863      	ldrb	r3, [r4, #1]
 801e9ac:	2b2a      	cmp	r3, #42	; 0x2a
 801e9ae:	d135      	bne.n	801ea1c <_svfiprintf_r+0x188>
 801e9b0:	9b03      	ldr	r3, [sp, #12]
 801e9b2:	1d1a      	adds	r2, r3, #4
 801e9b4:	681b      	ldr	r3, [r3, #0]
 801e9b6:	9203      	str	r2, [sp, #12]
 801e9b8:	2b00      	cmp	r3, #0
 801e9ba:	bfb8      	it	lt
 801e9bc:	f04f 33ff 	movlt.w	r3, #4294967295
 801e9c0:	3402      	adds	r4, #2
 801e9c2:	9305      	str	r3, [sp, #20]
 801e9c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ea90 <_svfiprintf_r+0x1fc>
 801e9c8:	7821      	ldrb	r1, [r4, #0]
 801e9ca:	2203      	movs	r2, #3
 801e9cc:	4650      	mov	r0, sl
 801e9ce:	f7e1 fc87 	bl	80002e0 <memchr>
 801e9d2:	b140      	cbz	r0, 801e9e6 <_svfiprintf_r+0x152>
 801e9d4:	2340      	movs	r3, #64	; 0x40
 801e9d6:	eba0 000a 	sub.w	r0, r0, sl
 801e9da:	fa03 f000 	lsl.w	r0, r3, r0
 801e9de:	9b04      	ldr	r3, [sp, #16]
 801e9e0:	4303      	orrs	r3, r0
 801e9e2:	3401      	adds	r4, #1
 801e9e4:	9304      	str	r3, [sp, #16]
 801e9e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e9ea:	4826      	ldr	r0, [pc, #152]	; (801ea84 <_svfiprintf_r+0x1f0>)
 801e9ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e9f0:	2206      	movs	r2, #6
 801e9f2:	f7e1 fc75 	bl	80002e0 <memchr>
 801e9f6:	2800      	cmp	r0, #0
 801e9f8:	d038      	beq.n	801ea6c <_svfiprintf_r+0x1d8>
 801e9fa:	4b23      	ldr	r3, [pc, #140]	; (801ea88 <_svfiprintf_r+0x1f4>)
 801e9fc:	bb1b      	cbnz	r3, 801ea46 <_svfiprintf_r+0x1b2>
 801e9fe:	9b03      	ldr	r3, [sp, #12]
 801ea00:	3307      	adds	r3, #7
 801ea02:	f023 0307 	bic.w	r3, r3, #7
 801ea06:	3308      	adds	r3, #8
 801ea08:	9303      	str	r3, [sp, #12]
 801ea0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea0c:	4433      	add	r3, r6
 801ea0e:	9309      	str	r3, [sp, #36]	; 0x24
 801ea10:	e767      	b.n	801e8e2 <_svfiprintf_r+0x4e>
 801ea12:	fb0c 3202 	mla	r2, ip, r2, r3
 801ea16:	460c      	mov	r4, r1
 801ea18:	2001      	movs	r0, #1
 801ea1a:	e7a5      	b.n	801e968 <_svfiprintf_r+0xd4>
 801ea1c:	2300      	movs	r3, #0
 801ea1e:	3401      	adds	r4, #1
 801ea20:	9305      	str	r3, [sp, #20]
 801ea22:	4619      	mov	r1, r3
 801ea24:	f04f 0c0a 	mov.w	ip, #10
 801ea28:	4620      	mov	r0, r4
 801ea2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ea2e:	3a30      	subs	r2, #48	; 0x30
 801ea30:	2a09      	cmp	r2, #9
 801ea32:	d903      	bls.n	801ea3c <_svfiprintf_r+0x1a8>
 801ea34:	2b00      	cmp	r3, #0
 801ea36:	d0c5      	beq.n	801e9c4 <_svfiprintf_r+0x130>
 801ea38:	9105      	str	r1, [sp, #20]
 801ea3a:	e7c3      	b.n	801e9c4 <_svfiprintf_r+0x130>
 801ea3c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ea40:	4604      	mov	r4, r0
 801ea42:	2301      	movs	r3, #1
 801ea44:	e7f0      	b.n	801ea28 <_svfiprintf_r+0x194>
 801ea46:	ab03      	add	r3, sp, #12
 801ea48:	9300      	str	r3, [sp, #0]
 801ea4a:	462a      	mov	r2, r5
 801ea4c:	4b0f      	ldr	r3, [pc, #60]	; (801ea8c <_svfiprintf_r+0x1f8>)
 801ea4e:	a904      	add	r1, sp, #16
 801ea50:	4638      	mov	r0, r7
 801ea52:	f3af 8000 	nop.w
 801ea56:	1c42      	adds	r2, r0, #1
 801ea58:	4606      	mov	r6, r0
 801ea5a:	d1d6      	bne.n	801ea0a <_svfiprintf_r+0x176>
 801ea5c:	89ab      	ldrh	r3, [r5, #12]
 801ea5e:	065b      	lsls	r3, r3, #25
 801ea60:	f53f af2c 	bmi.w	801e8bc <_svfiprintf_r+0x28>
 801ea64:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ea66:	b01d      	add	sp, #116	; 0x74
 801ea68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea6c:	ab03      	add	r3, sp, #12
 801ea6e:	9300      	str	r3, [sp, #0]
 801ea70:	462a      	mov	r2, r5
 801ea72:	4b06      	ldr	r3, [pc, #24]	; (801ea8c <_svfiprintf_r+0x1f8>)
 801ea74:	a904      	add	r1, sp, #16
 801ea76:	4638      	mov	r0, r7
 801ea78:	f000 f9d4 	bl	801ee24 <_printf_i>
 801ea7c:	e7eb      	b.n	801ea56 <_svfiprintf_r+0x1c2>
 801ea7e:	bf00      	nop
 801ea80:	08022d9e 	.word	0x08022d9e
 801ea84:	08022da8 	.word	0x08022da8
 801ea88:	00000000 	.word	0x00000000
 801ea8c:	0801e7dd 	.word	0x0801e7dd
 801ea90:	08022da4 	.word	0x08022da4

0801ea94 <__sfputc_r>:
 801ea94:	6893      	ldr	r3, [r2, #8]
 801ea96:	3b01      	subs	r3, #1
 801ea98:	2b00      	cmp	r3, #0
 801ea9a:	b410      	push	{r4}
 801ea9c:	6093      	str	r3, [r2, #8]
 801ea9e:	da08      	bge.n	801eab2 <__sfputc_r+0x1e>
 801eaa0:	6994      	ldr	r4, [r2, #24]
 801eaa2:	42a3      	cmp	r3, r4
 801eaa4:	db01      	blt.n	801eaaa <__sfputc_r+0x16>
 801eaa6:	290a      	cmp	r1, #10
 801eaa8:	d103      	bne.n	801eab2 <__sfputc_r+0x1e>
 801eaaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eaae:	f000 baf1 	b.w	801f094 <__swbuf_r>
 801eab2:	6813      	ldr	r3, [r2, #0]
 801eab4:	1c58      	adds	r0, r3, #1
 801eab6:	6010      	str	r0, [r2, #0]
 801eab8:	7019      	strb	r1, [r3, #0]
 801eaba:	4608      	mov	r0, r1
 801eabc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eac0:	4770      	bx	lr

0801eac2 <__sfputs_r>:
 801eac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eac4:	4606      	mov	r6, r0
 801eac6:	460f      	mov	r7, r1
 801eac8:	4614      	mov	r4, r2
 801eaca:	18d5      	adds	r5, r2, r3
 801eacc:	42ac      	cmp	r4, r5
 801eace:	d101      	bne.n	801ead4 <__sfputs_r+0x12>
 801ead0:	2000      	movs	r0, #0
 801ead2:	e007      	b.n	801eae4 <__sfputs_r+0x22>
 801ead4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ead8:	463a      	mov	r2, r7
 801eada:	4630      	mov	r0, r6
 801eadc:	f7ff ffda 	bl	801ea94 <__sfputc_r>
 801eae0:	1c43      	adds	r3, r0, #1
 801eae2:	d1f3      	bne.n	801eacc <__sfputs_r+0xa>
 801eae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801eae8 <_vfiprintf_r>:
 801eae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaec:	460d      	mov	r5, r1
 801eaee:	b09d      	sub	sp, #116	; 0x74
 801eaf0:	4614      	mov	r4, r2
 801eaf2:	4698      	mov	r8, r3
 801eaf4:	4606      	mov	r6, r0
 801eaf6:	b118      	cbz	r0, 801eb00 <_vfiprintf_r+0x18>
 801eaf8:	6983      	ldr	r3, [r0, #24]
 801eafa:	b90b      	cbnz	r3, 801eb00 <_vfiprintf_r+0x18>
 801eafc:	f7ff fa08 	bl	801df10 <__sinit>
 801eb00:	4b89      	ldr	r3, [pc, #548]	; (801ed28 <_vfiprintf_r+0x240>)
 801eb02:	429d      	cmp	r5, r3
 801eb04:	d11b      	bne.n	801eb3e <_vfiprintf_r+0x56>
 801eb06:	6875      	ldr	r5, [r6, #4]
 801eb08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801eb0a:	07d9      	lsls	r1, r3, #31
 801eb0c:	d405      	bmi.n	801eb1a <_vfiprintf_r+0x32>
 801eb0e:	89ab      	ldrh	r3, [r5, #12]
 801eb10:	059a      	lsls	r2, r3, #22
 801eb12:	d402      	bmi.n	801eb1a <_vfiprintf_r+0x32>
 801eb14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801eb16:	f7ff fabe 	bl	801e096 <__retarget_lock_acquire_recursive>
 801eb1a:	89ab      	ldrh	r3, [r5, #12]
 801eb1c:	071b      	lsls	r3, r3, #28
 801eb1e:	d501      	bpl.n	801eb24 <_vfiprintf_r+0x3c>
 801eb20:	692b      	ldr	r3, [r5, #16]
 801eb22:	b9eb      	cbnz	r3, 801eb60 <_vfiprintf_r+0x78>
 801eb24:	4629      	mov	r1, r5
 801eb26:	4630      	mov	r0, r6
 801eb28:	f000 fb06 	bl	801f138 <__swsetup_r>
 801eb2c:	b1c0      	cbz	r0, 801eb60 <_vfiprintf_r+0x78>
 801eb2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801eb30:	07dc      	lsls	r4, r3, #31
 801eb32:	d50e      	bpl.n	801eb52 <_vfiprintf_r+0x6a>
 801eb34:	f04f 30ff 	mov.w	r0, #4294967295
 801eb38:	b01d      	add	sp, #116	; 0x74
 801eb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb3e:	4b7b      	ldr	r3, [pc, #492]	; (801ed2c <_vfiprintf_r+0x244>)
 801eb40:	429d      	cmp	r5, r3
 801eb42:	d101      	bne.n	801eb48 <_vfiprintf_r+0x60>
 801eb44:	68b5      	ldr	r5, [r6, #8]
 801eb46:	e7df      	b.n	801eb08 <_vfiprintf_r+0x20>
 801eb48:	4b79      	ldr	r3, [pc, #484]	; (801ed30 <_vfiprintf_r+0x248>)
 801eb4a:	429d      	cmp	r5, r3
 801eb4c:	bf08      	it	eq
 801eb4e:	68f5      	ldreq	r5, [r6, #12]
 801eb50:	e7da      	b.n	801eb08 <_vfiprintf_r+0x20>
 801eb52:	89ab      	ldrh	r3, [r5, #12]
 801eb54:	0598      	lsls	r0, r3, #22
 801eb56:	d4ed      	bmi.n	801eb34 <_vfiprintf_r+0x4c>
 801eb58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801eb5a:	f7ff fa9d 	bl	801e098 <__retarget_lock_release_recursive>
 801eb5e:	e7e9      	b.n	801eb34 <_vfiprintf_r+0x4c>
 801eb60:	2300      	movs	r3, #0
 801eb62:	9309      	str	r3, [sp, #36]	; 0x24
 801eb64:	2320      	movs	r3, #32
 801eb66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801eb6a:	f8cd 800c 	str.w	r8, [sp, #12]
 801eb6e:	2330      	movs	r3, #48	; 0x30
 801eb70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ed34 <_vfiprintf_r+0x24c>
 801eb74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801eb78:	f04f 0901 	mov.w	r9, #1
 801eb7c:	4623      	mov	r3, r4
 801eb7e:	469a      	mov	sl, r3
 801eb80:	f813 2b01 	ldrb.w	r2, [r3], #1
 801eb84:	b10a      	cbz	r2, 801eb8a <_vfiprintf_r+0xa2>
 801eb86:	2a25      	cmp	r2, #37	; 0x25
 801eb88:	d1f9      	bne.n	801eb7e <_vfiprintf_r+0x96>
 801eb8a:	ebba 0b04 	subs.w	fp, sl, r4
 801eb8e:	d00b      	beq.n	801eba8 <_vfiprintf_r+0xc0>
 801eb90:	465b      	mov	r3, fp
 801eb92:	4622      	mov	r2, r4
 801eb94:	4629      	mov	r1, r5
 801eb96:	4630      	mov	r0, r6
 801eb98:	f7ff ff93 	bl	801eac2 <__sfputs_r>
 801eb9c:	3001      	adds	r0, #1
 801eb9e:	f000 80aa 	beq.w	801ecf6 <_vfiprintf_r+0x20e>
 801eba2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801eba4:	445a      	add	r2, fp
 801eba6:	9209      	str	r2, [sp, #36]	; 0x24
 801eba8:	f89a 3000 	ldrb.w	r3, [sl]
 801ebac:	2b00      	cmp	r3, #0
 801ebae:	f000 80a2 	beq.w	801ecf6 <_vfiprintf_r+0x20e>
 801ebb2:	2300      	movs	r3, #0
 801ebb4:	f04f 32ff 	mov.w	r2, #4294967295
 801ebb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ebbc:	f10a 0a01 	add.w	sl, sl, #1
 801ebc0:	9304      	str	r3, [sp, #16]
 801ebc2:	9307      	str	r3, [sp, #28]
 801ebc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ebc8:	931a      	str	r3, [sp, #104]	; 0x68
 801ebca:	4654      	mov	r4, sl
 801ebcc:	2205      	movs	r2, #5
 801ebce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ebd2:	4858      	ldr	r0, [pc, #352]	; (801ed34 <_vfiprintf_r+0x24c>)
 801ebd4:	f7e1 fb84 	bl	80002e0 <memchr>
 801ebd8:	9a04      	ldr	r2, [sp, #16]
 801ebda:	b9d8      	cbnz	r0, 801ec14 <_vfiprintf_r+0x12c>
 801ebdc:	06d1      	lsls	r1, r2, #27
 801ebde:	bf44      	itt	mi
 801ebe0:	2320      	movmi	r3, #32
 801ebe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ebe6:	0713      	lsls	r3, r2, #28
 801ebe8:	bf44      	itt	mi
 801ebea:	232b      	movmi	r3, #43	; 0x2b
 801ebec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ebf0:	f89a 3000 	ldrb.w	r3, [sl]
 801ebf4:	2b2a      	cmp	r3, #42	; 0x2a
 801ebf6:	d015      	beq.n	801ec24 <_vfiprintf_r+0x13c>
 801ebf8:	9a07      	ldr	r2, [sp, #28]
 801ebfa:	4654      	mov	r4, sl
 801ebfc:	2000      	movs	r0, #0
 801ebfe:	f04f 0c0a 	mov.w	ip, #10
 801ec02:	4621      	mov	r1, r4
 801ec04:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ec08:	3b30      	subs	r3, #48	; 0x30
 801ec0a:	2b09      	cmp	r3, #9
 801ec0c:	d94e      	bls.n	801ecac <_vfiprintf_r+0x1c4>
 801ec0e:	b1b0      	cbz	r0, 801ec3e <_vfiprintf_r+0x156>
 801ec10:	9207      	str	r2, [sp, #28]
 801ec12:	e014      	b.n	801ec3e <_vfiprintf_r+0x156>
 801ec14:	eba0 0308 	sub.w	r3, r0, r8
 801ec18:	fa09 f303 	lsl.w	r3, r9, r3
 801ec1c:	4313      	orrs	r3, r2
 801ec1e:	9304      	str	r3, [sp, #16]
 801ec20:	46a2      	mov	sl, r4
 801ec22:	e7d2      	b.n	801ebca <_vfiprintf_r+0xe2>
 801ec24:	9b03      	ldr	r3, [sp, #12]
 801ec26:	1d19      	adds	r1, r3, #4
 801ec28:	681b      	ldr	r3, [r3, #0]
 801ec2a:	9103      	str	r1, [sp, #12]
 801ec2c:	2b00      	cmp	r3, #0
 801ec2e:	bfbb      	ittet	lt
 801ec30:	425b      	neglt	r3, r3
 801ec32:	f042 0202 	orrlt.w	r2, r2, #2
 801ec36:	9307      	strge	r3, [sp, #28]
 801ec38:	9307      	strlt	r3, [sp, #28]
 801ec3a:	bfb8      	it	lt
 801ec3c:	9204      	strlt	r2, [sp, #16]
 801ec3e:	7823      	ldrb	r3, [r4, #0]
 801ec40:	2b2e      	cmp	r3, #46	; 0x2e
 801ec42:	d10c      	bne.n	801ec5e <_vfiprintf_r+0x176>
 801ec44:	7863      	ldrb	r3, [r4, #1]
 801ec46:	2b2a      	cmp	r3, #42	; 0x2a
 801ec48:	d135      	bne.n	801ecb6 <_vfiprintf_r+0x1ce>
 801ec4a:	9b03      	ldr	r3, [sp, #12]
 801ec4c:	1d1a      	adds	r2, r3, #4
 801ec4e:	681b      	ldr	r3, [r3, #0]
 801ec50:	9203      	str	r2, [sp, #12]
 801ec52:	2b00      	cmp	r3, #0
 801ec54:	bfb8      	it	lt
 801ec56:	f04f 33ff 	movlt.w	r3, #4294967295
 801ec5a:	3402      	adds	r4, #2
 801ec5c:	9305      	str	r3, [sp, #20]
 801ec5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ed44 <_vfiprintf_r+0x25c>
 801ec62:	7821      	ldrb	r1, [r4, #0]
 801ec64:	2203      	movs	r2, #3
 801ec66:	4650      	mov	r0, sl
 801ec68:	f7e1 fb3a 	bl	80002e0 <memchr>
 801ec6c:	b140      	cbz	r0, 801ec80 <_vfiprintf_r+0x198>
 801ec6e:	2340      	movs	r3, #64	; 0x40
 801ec70:	eba0 000a 	sub.w	r0, r0, sl
 801ec74:	fa03 f000 	lsl.w	r0, r3, r0
 801ec78:	9b04      	ldr	r3, [sp, #16]
 801ec7a:	4303      	orrs	r3, r0
 801ec7c:	3401      	adds	r4, #1
 801ec7e:	9304      	str	r3, [sp, #16]
 801ec80:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ec84:	482c      	ldr	r0, [pc, #176]	; (801ed38 <_vfiprintf_r+0x250>)
 801ec86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ec8a:	2206      	movs	r2, #6
 801ec8c:	f7e1 fb28 	bl	80002e0 <memchr>
 801ec90:	2800      	cmp	r0, #0
 801ec92:	d03f      	beq.n	801ed14 <_vfiprintf_r+0x22c>
 801ec94:	4b29      	ldr	r3, [pc, #164]	; (801ed3c <_vfiprintf_r+0x254>)
 801ec96:	bb1b      	cbnz	r3, 801ece0 <_vfiprintf_r+0x1f8>
 801ec98:	9b03      	ldr	r3, [sp, #12]
 801ec9a:	3307      	adds	r3, #7
 801ec9c:	f023 0307 	bic.w	r3, r3, #7
 801eca0:	3308      	adds	r3, #8
 801eca2:	9303      	str	r3, [sp, #12]
 801eca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eca6:	443b      	add	r3, r7
 801eca8:	9309      	str	r3, [sp, #36]	; 0x24
 801ecaa:	e767      	b.n	801eb7c <_vfiprintf_r+0x94>
 801ecac:	fb0c 3202 	mla	r2, ip, r2, r3
 801ecb0:	460c      	mov	r4, r1
 801ecb2:	2001      	movs	r0, #1
 801ecb4:	e7a5      	b.n	801ec02 <_vfiprintf_r+0x11a>
 801ecb6:	2300      	movs	r3, #0
 801ecb8:	3401      	adds	r4, #1
 801ecba:	9305      	str	r3, [sp, #20]
 801ecbc:	4619      	mov	r1, r3
 801ecbe:	f04f 0c0a 	mov.w	ip, #10
 801ecc2:	4620      	mov	r0, r4
 801ecc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ecc8:	3a30      	subs	r2, #48	; 0x30
 801ecca:	2a09      	cmp	r2, #9
 801eccc:	d903      	bls.n	801ecd6 <_vfiprintf_r+0x1ee>
 801ecce:	2b00      	cmp	r3, #0
 801ecd0:	d0c5      	beq.n	801ec5e <_vfiprintf_r+0x176>
 801ecd2:	9105      	str	r1, [sp, #20]
 801ecd4:	e7c3      	b.n	801ec5e <_vfiprintf_r+0x176>
 801ecd6:	fb0c 2101 	mla	r1, ip, r1, r2
 801ecda:	4604      	mov	r4, r0
 801ecdc:	2301      	movs	r3, #1
 801ecde:	e7f0      	b.n	801ecc2 <_vfiprintf_r+0x1da>
 801ece0:	ab03      	add	r3, sp, #12
 801ece2:	9300      	str	r3, [sp, #0]
 801ece4:	462a      	mov	r2, r5
 801ece6:	4b16      	ldr	r3, [pc, #88]	; (801ed40 <_vfiprintf_r+0x258>)
 801ece8:	a904      	add	r1, sp, #16
 801ecea:	4630      	mov	r0, r6
 801ecec:	f3af 8000 	nop.w
 801ecf0:	4607      	mov	r7, r0
 801ecf2:	1c78      	adds	r0, r7, #1
 801ecf4:	d1d6      	bne.n	801eca4 <_vfiprintf_r+0x1bc>
 801ecf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ecf8:	07d9      	lsls	r1, r3, #31
 801ecfa:	d405      	bmi.n	801ed08 <_vfiprintf_r+0x220>
 801ecfc:	89ab      	ldrh	r3, [r5, #12]
 801ecfe:	059a      	lsls	r2, r3, #22
 801ed00:	d402      	bmi.n	801ed08 <_vfiprintf_r+0x220>
 801ed02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ed04:	f7ff f9c8 	bl	801e098 <__retarget_lock_release_recursive>
 801ed08:	89ab      	ldrh	r3, [r5, #12]
 801ed0a:	065b      	lsls	r3, r3, #25
 801ed0c:	f53f af12 	bmi.w	801eb34 <_vfiprintf_r+0x4c>
 801ed10:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ed12:	e711      	b.n	801eb38 <_vfiprintf_r+0x50>
 801ed14:	ab03      	add	r3, sp, #12
 801ed16:	9300      	str	r3, [sp, #0]
 801ed18:	462a      	mov	r2, r5
 801ed1a:	4b09      	ldr	r3, [pc, #36]	; (801ed40 <_vfiprintf_r+0x258>)
 801ed1c:	a904      	add	r1, sp, #16
 801ed1e:	4630      	mov	r0, r6
 801ed20:	f000 f880 	bl	801ee24 <_printf_i>
 801ed24:	e7e4      	b.n	801ecf0 <_vfiprintf_r+0x208>
 801ed26:	bf00      	nop
 801ed28:	08022cac 	.word	0x08022cac
 801ed2c:	08022ccc 	.word	0x08022ccc
 801ed30:	08022c8c 	.word	0x08022c8c
 801ed34:	08022d9e 	.word	0x08022d9e
 801ed38:	08022da8 	.word	0x08022da8
 801ed3c:	00000000 	.word	0x00000000
 801ed40:	0801eac3 	.word	0x0801eac3
 801ed44:	08022da4 	.word	0x08022da4

0801ed48 <_printf_common>:
 801ed48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ed4c:	4616      	mov	r6, r2
 801ed4e:	4699      	mov	r9, r3
 801ed50:	688a      	ldr	r2, [r1, #8]
 801ed52:	690b      	ldr	r3, [r1, #16]
 801ed54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ed58:	4293      	cmp	r3, r2
 801ed5a:	bfb8      	it	lt
 801ed5c:	4613      	movlt	r3, r2
 801ed5e:	6033      	str	r3, [r6, #0]
 801ed60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ed64:	4607      	mov	r7, r0
 801ed66:	460c      	mov	r4, r1
 801ed68:	b10a      	cbz	r2, 801ed6e <_printf_common+0x26>
 801ed6a:	3301      	adds	r3, #1
 801ed6c:	6033      	str	r3, [r6, #0]
 801ed6e:	6823      	ldr	r3, [r4, #0]
 801ed70:	0699      	lsls	r1, r3, #26
 801ed72:	bf42      	ittt	mi
 801ed74:	6833      	ldrmi	r3, [r6, #0]
 801ed76:	3302      	addmi	r3, #2
 801ed78:	6033      	strmi	r3, [r6, #0]
 801ed7a:	6825      	ldr	r5, [r4, #0]
 801ed7c:	f015 0506 	ands.w	r5, r5, #6
 801ed80:	d106      	bne.n	801ed90 <_printf_common+0x48>
 801ed82:	f104 0a19 	add.w	sl, r4, #25
 801ed86:	68e3      	ldr	r3, [r4, #12]
 801ed88:	6832      	ldr	r2, [r6, #0]
 801ed8a:	1a9b      	subs	r3, r3, r2
 801ed8c:	42ab      	cmp	r3, r5
 801ed8e:	dc26      	bgt.n	801edde <_printf_common+0x96>
 801ed90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ed94:	1e13      	subs	r3, r2, #0
 801ed96:	6822      	ldr	r2, [r4, #0]
 801ed98:	bf18      	it	ne
 801ed9a:	2301      	movne	r3, #1
 801ed9c:	0692      	lsls	r2, r2, #26
 801ed9e:	d42b      	bmi.n	801edf8 <_printf_common+0xb0>
 801eda0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801eda4:	4649      	mov	r1, r9
 801eda6:	4638      	mov	r0, r7
 801eda8:	47c0      	blx	r8
 801edaa:	3001      	adds	r0, #1
 801edac:	d01e      	beq.n	801edec <_printf_common+0xa4>
 801edae:	6823      	ldr	r3, [r4, #0]
 801edb0:	68e5      	ldr	r5, [r4, #12]
 801edb2:	6832      	ldr	r2, [r6, #0]
 801edb4:	f003 0306 	and.w	r3, r3, #6
 801edb8:	2b04      	cmp	r3, #4
 801edba:	bf08      	it	eq
 801edbc:	1aad      	subeq	r5, r5, r2
 801edbe:	68a3      	ldr	r3, [r4, #8]
 801edc0:	6922      	ldr	r2, [r4, #16]
 801edc2:	bf0c      	ite	eq
 801edc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801edc8:	2500      	movne	r5, #0
 801edca:	4293      	cmp	r3, r2
 801edcc:	bfc4      	itt	gt
 801edce:	1a9b      	subgt	r3, r3, r2
 801edd0:	18ed      	addgt	r5, r5, r3
 801edd2:	2600      	movs	r6, #0
 801edd4:	341a      	adds	r4, #26
 801edd6:	42b5      	cmp	r5, r6
 801edd8:	d11a      	bne.n	801ee10 <_printf_common+0xc8>
 801edda:	2000      	movs	r0, #0
 801eddc:	e008      	b.n	801edf0 <_printf_common+0xa8>
 801edde:	2301      	movs	r3, #1
 801ede0:	4652      	mov	r2, sl
 801ede2:	4649      	mov	r1, r9
 801ede4:	4638      	mov	r0, r7
 801ede6:	47c0      	blx	r8
 801ede8:	3001      	adds	r0, #1
 801edea:	d103      	bne.n	801edf4 <_printf_common+0xac>
 801edec:	f04f 30ff 	mov.w	r0, #4294967295
 801edf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801edf4:	3501      	adds	r5, #1
 801edf6:	e7c6      	b.n	801ed86 <_printf_common+0x3e>
 801edf8:	18e1      	adds	r1, r4, r3
 801edfa:	1c5a      	adds	r2, r3, #1
 801edfc:	2030      	movs	r0, #48	; 0x30
 801edfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ee02:	4422      	add	r2, r4
 801ee04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ee08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ee0c:	3302      	adds	r3, #2
 801ee0e:	e7c7      	b.n	801eda0 <_printf_common+0x58>
 801ee10:	2301      	movs	r3, #1
 801ee12:	4622      	mov	r2, r4
 801ee14:	4649      	mov	r1, r9
 801ee16:	4638      	mov	r0, r7
 801ee18:	47c0      	blx	r8
 801ee1a:	3001      	adds	r0, #1
 801ee1c:	d0e6      	beq.n	801edec <_printf_common+0xa4>
 801ee1e:	3601      	adds	r6, #1
 801ee20:	e7d9      	b.n	801edd6 <_printf_common+0x8e>
	...

0801ee24 <_printf_i>:
 801ee24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ee28:	7e0f      	ldrb	r7, [r1, #24]
 801ee2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ee2c:	2f78      	cmp	r7, #120	; 0x78
 801ee2e:	4691      	mov	r9, r2
 801ee30:	4680      	mov	r8, r0
 801ee32:	460c      	mov	r4, r1
 801ee34:	469a      	mov	sl, r3
 801ee36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ee3a:	d807      	bhi.n	801ee4c <_printf_i+0x28>
 801ee3c:	2f62      	cmp	r7, #98	; 0x62
 801ee3e:	d80a      	bhi.n	801ee56 <_printf_i+0x32>
 801ee40:	2f00      	cmp	r7, #0
 801ee42:	f000 80d8 	beq.w	801eff6 <_printf_i+0x1d2>
 801ee46:	2f58      	cmp	r7, #88	; 0x58
 801ee48:	f000 80a3 	beq.w	801ef92 <_printf_i+0x16e>
 801ee4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ee50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ee54:	e03a      	b.n	801eecc <_printf_i+0xa8>
 801ee56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ee5a:	2b15      	cmp	r3, #21
 801ee5c:	d8f6      	bhi.n	801ee4c <_printf_i+0x28>
 801ee5e:	a101      	add	r1, pc, #4	; (adr r1, 801ee64 <_printf_i+0x40>)
 801ee60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ee64:	0801eebd 	.word	0x0801eebd
 801ee68:	0801eed1 	.word	0x0801eed1
 801ee6c:	0801ee4d 	.word	0x0801ee4d
 801ee70:	0801ee4d 	.word	0x0801ee4d
 801ee74:	0801ee4d 	.word	0x0801ee4d
 801ee78:	0801ee4d 	.word	0x0801ee4d
 801ee7c:	0801eed1 	.word	0x0801eed1
 801ee80:	0801ee4d 	.word	0x0801ee4d
 801ee84:	0801ee4d 	.word	0x0801ee4d
 801ee88:	0801ee4d 	.word	0x0801ee4d
 801ee8c:	0801ee4d 	.word	0x0801ee4d
 801ee90:	0801efdd 	.word	0x0801efdd
 801ee94:	0801ef01 	.word	0x0801ef01
 801ee98:	0801efbf 	.word	0x0801efbf
 801ee9c:	0801ee4d 	.word	0x0801ee4d
 801eea0:	0801ee4d 	.word	0x0801ee4d
 801eea4:	0801efff 	.word	0x0801efff
 801eea8:	0801ee4d 	.word	0x0801ee4d
 801eeac:	0801ef01 	.word	0x0801ef01
 801eeb0:	0801ee4d 	.word	0x0801ee4d
 801eeb4:	0801ee4d 	.word	0x0801ee4d
 801eeb8:	0801efc7 	.word	0x0801efc7
 801eebc:	682b      	ldr	r3, [r5, #0]
 801eebe:	1d1a      	adds	r2, r3, #4
 801eec0:	681b      	ldr	r3, [r3, #0]
 801eec2:	602a      	str	r2, [r5, #0]
 801eec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801eec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801eecc:	2301      	movs	r3, #1
 801eece:	e0a3      	b.n	801f018 <_printf_i+0x1f4>
 801eed0:	6820      	ldr	r0, [r4, #0]
 801eed2:	6829      	ldr	r1, [r5, #0]
 801eed4:	0606      	lsls	r6, r0, #24
 801eed6:	f101 0304 	add.w	r3, r1, #4
 801eeda:	d50a      	bpl.n	801eef2 <_printf_i+0xce>
 801eedc:	680e      	ldr	r6, [r1, #0]
 801eede:	602b      	str	r3, [r5, #0]
 801eee0:	2e00      	cmp	r6, #0
 801eee2:	da03      	bge.n	801eeec <_printf_i+0xc8>
 801eee4:	232d      	movs	r3, #45	; 0x2d
 801eee6:	4276      	negs	r6, r6
 801eee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801eeec:	485e      	ldr	r0, [pc, #376]	; (801f068 <_printf_i+0x244>)
 801eeee:	230a      	movs	r3, #10
 801eef0:	e019      	b.n	801ef26 <_printf_i+0x102>
 801eef2:	680e      	ldr	r6, [r1, #0]
 801eef4:	602b      	str	r3, [r5, #0]
 801eef6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801eefa:	bf18      	it	ne
 801eefc:	b236      	sxthne	r6, r6
 801eefe:	e7ef      	b.n	801eee0 <_printf_i+0xbc>
 801ef00:	682b      	ldr	r3, [r5, #0]
 801ef02:	6820      	ldr	r0, [r4, #0]
 801ef04:	1d19      	adds	r1, r3, #4
 801ef06:	6029      	str	r1, [r5, #0]
 801ef08:	0601      	lsls	r1, r0, #24
 801ef0a:	d501      	bpl.n	801ef10 <_printf_i+0xec>
 801ef0c:	681e      	ldr	r6, [r3, #0]
 801ef0e:	e002      	b.n	801ef16 <_printf_i+0xf2>
 801ef10:	0646      	lsls	r6, r0, #25
 801ef12:	d5fb      	bpl.n	801ef0c <_printf_i+0xe8>
 801ef14:	881e      	ldrh	r6, [r3, #0]
 801ef16:	4854      	ldr	r0, [pc, #336]	; (801f068 <_printf_i+0x244>)
 801ef18:	2f6f      	cmp	r7, #111	; 0x6f
 801ef1a:	bf0c      	ite	eq
 801ef1c:	2308      	moveq	r3, #8
 801ef1e:	230a      	movne	r3, #10
 801ef20:	2100      	movs	r1, #0
 801ef22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ef26:	6865      	ldr	r5, [r4, #4]
 801ef28:	60a5      	str	r5, [r4, #8]
 801ef2a:	2d00      	cmp	r5, #0
 801ef2c:	bfa2      	ittt	ge
 801ef2e:	6821      	ldrge	r1, [r4, #0]
 801ef30:	f021 0104 	bicge.w	r1, r1, #4
 801ef34:	6021      	strge	r1, [r4, #0]
 801ef36:	b90e      	cbnz	r6, 801ef3c <_printf_i+0x118>
 801ef38:	2d00      	cmp	r5, #0
 801ef3a:	d04d      	beq.n	801efd8 <_printf_i+0x1b4>
 801ef3c:	4615      	mov	r5, r2
 801ef3e:	fbb6 f1f3 	udiv	r1, r6, r3
 801ef42:	fb03 6711 	mls	r7, r3, r1, r6
 801ef46:	5dc7      	ldrb	r7, [r0, r7]
 801ef48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ef4c:	4637      	mov	r7, r6
 801ef4e:	42bb      	cmp	r3, r7
 801ef50:	460e      	mov	r6, r1
 801ef52:	d9f4      	bls.n	801ef3e <_printf_i+0x11a>
 801ef54:	2b08      	cmp	r3, #8
 801ef56:	d10b      	bne.n	801ef70 <_printf_i+0x14c>
 801ef58:	6823      	ldr	r3, [r4, #0]
 801ef5a:	07de      	lsls	r6, r3, #31
 801ef5c:	d508      	bpl.n	801ef70 <_printf_i+0x14c>
 801ef5e:	6923      	ldr	r3, [r4, #16]
 801ef60:	6861      	ldr	r1, [r4, #4]
 801ef62:	4299      	cmp	r1, r3
 801ef64:	bfde      	ittt	le
 801ef66:	2330      	movle	r3, #48	; 0x30
 801ef68:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ef6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ef70:	1b52      	subs	r2, r2, r5
 801ef72:	6122      	str	r2, [r4, #16]
 801ef74:	f8cd a000 	str.w	sl, [sp]
 801ef78:	464b      	mov	r3, r9
 801ef7a:	aa03      	add	r2, sp, #12
 801ef7c:	4621      	mov	r1, r4
 801ef7e:	4640      	mov	r0, r8
 801ef80:	f7ff fee2 	bl	801ed48 <_printf_common>
 801ef84:	3001      	adds	r0, #1
 801ef86:	d14c      	bne.n	801f022 <_printf_i+0x1fe>
 801ef88:	f04f 30ff 	mov.w	r0, #4294967295
 801ef8c:	b004      	add	sp, #16
 801ef8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef92:	4835      	ldr	r0, [pc, #212]	; (801f068 <_printf_i+0x244>)
 801ef94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801ef98:	6829      	ldr	r1, [r5, #0]
 801ef9a:	6823      	ldr	r3, [r4, #0]
 801ef9c:	f851 6b04 	ldr.w	r6, [r1], #4
 801efa0:	6029      	str	r1, [r5, #0]
 801efa2:	061d      	lsls	r5, r3, #24
 801efa4:	d514      	bpl.n	801efd0 <_printf_i+0x1ac>
 801efa6:	07df      	lsls	r7, r3, #31
 801efa8:	bf44      	itt	mi
 801efaa:	f043 0320 	orrmi.w	r3, r3, #32
 801efae:	6023      	strmi	r3, [r4, #0]
 801efb0:	b91e      	cbnz	r6, 801efba <_printf_i+0x196>
 801efb2:	6823      	ldr	r3, [r4, #0]
 801efb4:	f023 0320 	bic.w	r3, r3, #32
 801efb8:	6023      	str	r3, [r4, #0]
 801efba:	2310      	movs	r3, #16
 801efbc:	e7b0      	b.n	801ef20 <_printf_i+0xfc>
 801efbe:	6823      	ldr	r3, [r4, #0]
 801efc0:	f043 0320 	orr.w	r3, r3, #32
 801efc4:	6023      	str	r3, [r4, #0]
 801efc6:	2378      	movs	r3, #120	; 0x78
 801efc8:	4828      	ldr	r0, [pc, #160]	; (801f06c <_printf_i+0x248>)
 801efca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801efce:	e7e3      	b.n	801ef98 <_printf_i+0x174>
 801efd0:	0659      	lsls	r1, r3, #25
 801efd2:	bf48      	it	mi
 801efd4:	b2b6      	uxthmi	r6, r6
 801efd6:	e7e6      	b.n	801efa6 <_printf_i+0x182>
 801efd8:	4615      	mov	r5, r2
 801efda:	e7bb      	b.n	801ef54 <_printf_i+0x130>
 801efdc:	682b      	ldr	r3, [r5, #0]
 801efde:	6826      	ldr	r6, [r4, #0]
 801efe0:	6961      	ldr	r1, [r4, #20]
 801efe2:	1d18      	adds	r0, r3, #4
 801efe4:	6028      	str	r0, [r5, #0]
 801efe6:	0635      	lsls	r5, r6, #24
 801efe8:	681b      	ldr	r3, [r3, #0]
 801efea:	d501      	bpl.n	801eff0 <_printf_i+0x1cc>
 801efec:	6019      	str	r1, [r3, #0]
 801efee:	e002      	b.n	801eff6 <_printf_i+0x1d2>
 801eff0:	0670      	lsls	r0, r6, #25
 801eff2:	d5fb      	bpl.n	801efec <_printf_i+0x1c8>
 801eff4:	8019      	strh	r1, [r3, #0]
 801eff6:	2300      	movs	r3, #0
 801eff8:	6123      	str	r3, [r4, #16]
 801effa:	4615      	mov	r5, r2
 801effc:	e7ba      	b.n	801ef74 <_printf_i+0x150>
 801effe:	682b      	ldr	r3, [r5, #0]
 801f000:	1d1a      	adds	r2, r3, #4
 801f002:	602a      	str	r2, [r5, #0]
 801f004:	681d      	ldr	r5, [r3, #0]
 801f006:	6862      	ldr	r2, [r4, #4]
 801f008:	2100      	movs	r1, #0
 801f00a:	4628      	mov	r0, r5
 801f00c:	f7e1 f968 	bl	80002e0 <memchr>
 801f010:	b108      	cbz	r0, 801f016 <_printf_i+0x1f2>
 801f012:	1b40      	subs	r0, r0, r5
 801f014:	6060      	str	r0, [r4, #4]
 801f016:	6863      	ldr	r3, [r4, #4]
 801f018:	6123      	str	r3, [r4, #16]
 801f01a:	2300      	movs	r3, #0
 801f01c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f020:	e7a8      	b.n	801ef74 <_printf_i+0x150>
 801f022:	6923      	ldr	r3, [r4, #16]
 801f024:	462a      	mov	r2, r5
 801f026:	4649      	mov	r1, r9
 801f028:	4640      	mov	r0, r8
 801f02a:	47d0      	blx	sl
 801f02c:	3001      	adds	r0, #1
 801f02e:	d0ab      	beq.n	801ef88 <_printf_i+0x164>
 801f030:	6823      	ldr	r3, [r4, #0]
 801f032:	079b      	lsls	r3, r3, #30
 801f034:	d413      	bmi.n	801f05e <_printf_i+0x23a>
 801f036:	68e0      	ldr	r0, [r4, #12]
 801f038:	9b03      	ldr	r3, [sp, #12]
 801f03a:	4298      	cmp	r0, r3
 801f03c:	bfb8      	it	lt
 801f03e:	4618      	movlt	r0, r3
 801f040:	e7a4      	b.n	801ef8c <_printf_i+0x168>
 801f042:	2301      	movs	r3, #1
 801f044:	4632      	mov	r2, r6
 801f046:	4649      	mov	r1, r9
 801f048:	4640      	mov	r0, r8
 801f04a:	47d0      	blx	sl
 801f04c:	3001      	adds	r0, #1
 801f04e:	d09b      	beq.n	801ef88 <_printf_i+0x164>
 801f050:	3501      	adds	r5, #1
 801f052:	68e3      	ldr	r3, [r4, #12]
 801f054:	9903      	ldr	r1, [sp, #12]
 801f056:	1a5b      	subs	r3, r3, r1
 801f058:	42ab      	cmp	r3, r5
 801f05a:	dcf2      	bgt.n	801f042 <_printf_i+0x21e>
 801f05c:	e7eb      	b.n	801f036 <_printf_i+0x212>
 801f05e:	2500      	movs	r5, #0
 801f060:	f104 0619 	add.w	r6, r4, #25
 801f064:	e7f5      	b.n	801f052 <_printf_i+0x22e>
 801f066:	bf00      	nop
 801f068:	08022daf 	.word	0x08022daf
 801f06c:	08022dc0 	.word	0x08022dc0

0801f070 <_read_r>:
 801f070:	b538      	push	{r3, r4, r5, lr}
 801f072:	4d07      	ldr	r5, [pc, #28]	; (801f090 <_read_r+0x20>)
 801f074:	4604      	mov	r4, r0
 801f076:	4608      	mov	r0, r1
 801f078:	4611      	mov	r1, r2
 801f07a:	2200      	movs	r2, #0
 801f07c:	602a      	str	r2, [r5, #0]
 801f07e:	461a      	mov	r2, r3
 801f080:	f7e2 f94e 	bl	8001320 <_read>
 801f084:	1c43      	adds	r3, r0, #1
 801f086:	d102      	bne.n	801f08e <_read_r+0x1e>
 801f088:	682b      	ldr	r3, [r5, #0]
 801f08a:	b103      	cbz	r3, 801f08e <_read_r+0x1e>
 801f08c:	6023      	str	r3, [r4, #0]
 801f08e:	bd38      	pop	{r3, r4, r5, pc}
 801f090:	2405eb18 	.word	0x2405eb18

0801f094 <__swbuf_r>:
 801f094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f096:	460e      	mov	r6, r1
 801f098:	4614      	mov	r4, r2
 801f09a:	4605      	mov	r5, r0
 801f09c:	b118      	cbz	r0, 801f0a6 <__swbuf_r+0x12>
 801f09e:	6983      	ldr	r3, [r0, #24]
 801f0a0:	b90b      	cbnz	r3, 801f0a6 <__swbuf_r+0x12>
 801f0a2:	f7fe ff35 	bl	801df10 <__sinit>
 801f0a6:	4b21      	ldr	r3, [pc, #132]	; (801f12c <__swbuf_r+0x98>)
 801f0a8:	429c      	cmp	r4, r3
 801f0aa:	d12b      	bne.n	801f104 <__swbuf_r+0x70>
 801f0ac:	686c      	ldr	r4, [r5, #4]
 801f0ae:	69a3      	ldr	r3, [r4, #24]
 801f0b0:	60a3      	str	r3, [r4, #8]
 801f0b2:	89a3      	ldrh	r3, [r4, #12]
 801f0b4:	071a      	lsls	r2, r3, #28
 801f0b6:	d52f      	bpl.n	801f118 <__swbuf_r+0x84>
 801f0b8:	6923      	ldr	r3, [r4, #16]
 801f0ba:	b36b      	cbz	r3, 801f118 <__swbuf_r+0x84>
 801f0bc:	6923      	ldr	r3, [r4, #16]
 801f0be:	6820      	ldr	r0, [r4, #0]
 801f0c0:	1ac0      	subs	r0, r0, r3
 801f0c2:	6963      	ldr	r3, [r4, #20]
 801f0c4:	b2f6      	uxtb	r6, r6
 801f0c6:	4283      	cmp	r3, r0
 801f0c8:	4637      	mov	r7, r6
 801f0ca:	dc04      	bgt.n	801f0d6 <__swbuf_r+0x42>
 801f0cc:	4621      	mov	r1, r4
 801f0ce:	4628      	mov	r0, r5
 801f0d0:	f7ff fac4 	bl	801e65c <_fflush_r>
 801f0d4:	bb30      	cbnz	r0, 801f124 <__swbuf_r+0x90>
 801f0d6:	68a3      	ldr	r3, [r4, #8]
 801f0d8:	3b01      	subs	r3, #1
 801f0da:	60a3      	str	r3, [r4, #8]
 801f0dc:	6823      	ldr	r3, [r4, #0]
 801f0de:	1c5a      	adds	r2, r3, #1
 801f0e0:	6022      	str	r2, [r4, #0]
 801f0e2:	701e      	strb	r6, [r3, #0]
 801f0e4:	6963      	ldr	r3, [r4, #20]
 801f0e6:	3001      	adds	r0, #1
 801f0e8:	4283      	cmp	r3, r0
 801f0ea:	d004      	beq.n	801f0f6 <__swbuf_r+0x62>
 801f0ec:	89a3      	ldrh	r3, [r4, #12]
 801f0ee:	07db      	lsls	r3, r3, #31
 801f0f0:	d506      	bpl.n	801f100 <__swbuf_r+0x6c>
 801f0f2:	2e0a      	cmp	r6, #10
 801f0f4:	d104      	bne.n	801f100 <__swbuf_r+0x6c>
 801f0f6:	4621      	mov	r1, r4
 801f0f8:	4628      	mov	r0, r5
 801f0fa:	f7ff faaf 	bl	801e65c <_fflush_r>
 801f0fe:	b988      	cbnz	r0, 801f124 <__swbuf_r+0x90>
 801f100:	4638      	mov	r0, r7
 801f102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f104:	4b0a      	ldr	r3, [pc, #40]	; (801f130 <__swbuf_r+0x9c>)
 801f106:	429c      	cmp	r4, r3
 801f108:	d101      	bne.n	801f10e <__swbuf_r+0x7a>
 801f10a:	68ac      	ldr	r4, [r5, #8]
 801f10c:	e7cf      	b.n	801f0ae <__swbuf_r+0x1a>
 801f10e:	4b09      	ldr	r3, [pc, #36]	; (801f134 <__swbuf_r+0xa0>)
 801f110:	429c      	cmp	r4, r3
 801f112:	bf08      	it	eq
 801f114:	68ec      	ldreq	r4, [r5, #12]
 801f116:	e7ca      	b.n	801f0ae <__swbuf_r+0x1a>
 801f118:	4621      	mov	r1, r4
 801f11a:	4628      	mov	r0, r5
 801f11c:	f000 f80c 	bl	801f138 <__swsetup_r>
 801f120:	2800      	cmp	r0, #0
 801f122:	d0cb      	beq.n	801f0bc <__swbuf_r+0x28>
 801f124:	f04f 37ff 	mov.w	r7, #4294967295
 801f128:	e7ea      	b.n	801f100 <__swbuf_r+0x6c>
 801f12a:	bf00      	nop
 801f12c:	08022cac 	.word	0x08022cac
 801f130:	08022ccc 	.word	0x08022ccc
 801f134:	08022c8c 	.word	0x08022c8c

0801f138 <__swsetup_r>:
 801f138:	4b32      	ldr	r3, [pc, #200]	; (801f204 <__swsetup_r+0xcc>)
 801f13a:	b570      	push	{r4, r5, r6, lr}
 801f13c:	681d      	ldr	r5, [r3, #0]
 801f13e:	4606      	mov	r6, r0
 801f140:	460c      	mov	r4, r1
 801f142:	b125      	cbz	r5, 801f14e <__swsetup_r+0x16>
 801f144:	69ab      	ldr	r3, [r5, #24]
 801f146:	b913      	cbnz	r3, 801f14e <__swsetup_r+0x16>
 801f148:	4628      	mov	r0, r5
 801f14a:	f7fe fee1 	bl	801df10 <__sinit>
 801f14e:	4b2e      	ldr	r3, [pc, #184]	; (801f208 <__swsetup_r+0xd0>)
 801f150:	429c      	cmp	r4, r3
 801f152:	d10f      	bne.n	801f174 <__swsetup_r+0x3c>
 801f154:	686c      	ldr	r4, [r5, #4]
 801f156:	89a3      	ldrh	r3, [r4, #12]
 801f158:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f15c:	0719      	lsls	r1, r3, #28
 801f15e:	d42c      	bmi.n	801f1ba <__swsetup_r+0x82>
 801f160:	06dd      	lsls	r5, r3, #27
 801f162:	d411      	bmi.n	801f188 <__swsetup_r+0x50>
 801f164:	2309      	movs	r3, #9
 801f166:	6033      	str	r3, [r6, #0]
 801f168:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f16c:	81a3      	strh	r3, [r4, #12]
 801f16e:	f04f 30ff 	mov.w	r0, #4294967295
 801f172:	e03e      	b.n	801f1f2 <__swsetup_r+0xba>
 801f174:	4b25      	ldr	r3, [pc, #148]	; (801f20c <__swsetup_r+0xd4>)
 801f176:	429c      	cmp	r4, r3
 801f178:	d101      	bne.n	801f17e <__swsetup_r+0x46>
 801f17a:	68ac      	ldr	r4, [r5, #8]
 801f17c:	e7eb      	b.n	801f156 <__swsetup_r+0x1e>
 801f17e:	4b24      	ldr	r3, [pc, #144]	; (801f210 <__swsetup_r+0xd8>)
 801f180:	429c      	cmp	r4, r3
 801f182:	bf08      	it	eq
 801f184:	68ec      	ldreq	r4, [r5, #12]
 801f186:	e7e6      	b.n	801f156 <__swsetup_r+0x1e>
 801f188:	0758      	lsls	r0, r3, #29
 801f18a:	d512      	bpl.n	801f1b2 <__swsetup_r+0x7a>
 801f18c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f18e:	b141      	cbz	r1, 801f1a2 <__swsetup_r+0x6a>
 801f190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f194:	4299      	cmp	r1, r3
 801f196:	d002      	beq.n	801f19e <__swsetup_r+0x66>
 801f198:	4630      	mov	r0, r6
 801f19a:	f7ff fad3 	bl	801e744 <_free_r>
 801f19e:	2300      	movs	r3, #0
 801f1a0:	6363      	str	r3, [r4, #52]	; 0x34
 801f1a2:	89a3      	ldrh	r3, [r4, #12]
 801f1a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f1a8:	81a3      	strh	r3, [r4, #12]
 801f1aa:	2300      	movs	r3, #0
 801f1ac:	6063      	str	r3, [r4, #4]
 801f1ae:	6923      	ldr	r3, [r4, #16]
 801f1b0:	6023      	str	r3, [r4, #0]
 801f1b2:	89a3      	ldrh	r3, [r4, #12]
 801f1b4:	f043 0308 	orr.w	r3, r3, #8
 801f1b8:	81a3      	strh	r3, [r4, #12]
 801f1ba:	6923      	ldr	r3, [r4, #16]
 801f1bc:	b94b      	cbnz	r3, 801f1d2 <__swsetup_r+0x9a>
 801f1be:	89a3      	ldrh	r3, [r4, #12]
 801f1c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f1c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f1c8:	d003      	beq.n	801f1d2 <__swsetup_r+0x9a>
 801f1ca:	4621      	mov	r1, r4
 801f1cc:	4630      	mov	r0, r6
 801f1ce:	f000 f84d 	bl	801f26c <__smakebuf_r>
 801f1d2:	89a0      	ldrh	r0, [r4, #12]
 801f1d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f1d8:	f010 0301 	ands.w	r3, r0, #1
 801f1dc:	d00a      	beq.n	801f1f4 <__swsetup_r+0xbc>
 801f1de:	2300      	movs	r3, #0
 801f1e0:	60a3      	str	r3, [r4, #8]
 801f1e2:	6963      	ldr	r3, [r4, #20]
 801f1e4:	425b      	negs	r3, r3
 801f1e6:	61a3      	str	r3, [r4, #24]
 801f1e8:	6923      	ldr	r3, [r4, #16]
 801f1ea:	b943      	cbnz	r3, 801f1fe <__swsetup_r+0xc6>
 801f1ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f1f0:	d1ba      	bne.n	801f168 <__swsetup_r+0x30>
 801f1f2:	bd70      	pop	{r4, r5, r6, pc}
 801f1f4:	0781      	lsls	r1, r0, #30
 801f1f6:	bf58      	it	pl
 801f1f8:	6963      	ldrpl	r3, [r4, #20]
 801f1fa:	60a3      	str	r3, [r4, #8]
 801f1fc:	e7f4      	b.n	801f1e8 <__swsetup_r+0xb0>
 801f1fe:	2000      	movs	r0, #0
 801f200:	e7f7      	b.n	801f1f2 <__swsetup_r+0xba>
 801f202:	bf00      	nop
 801f204:	24000034 	.word	0x24000034
 801f208:	08022cac 	.word	0x08022cac
 801f20c:	08022ccc 	.word	0x08022ccc
 801f210:	08022c8c 	.word	0x08022c8c

0801f214 <abort>:
 801f214:	b508      	push	{r3, lr}
 801f216:	2006      	movs	r0, #6
 801f218:	f000 f8c0 	bl	801f39c <raise>
 801f21c:	2001      	movs	r0, #1
 801f21e:	f7e2 f875 	bl	800130c <_exit>

0801f222 <__swhatbuf_r>:
 801f222:	b570      	push	{r4, r5, r6, lr}
 801f224:	460e      	mov	r6, r1
 801f226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f22a:	2900      	cmp	r1, #0
 801f22c:	b096      	sub	sp, #88	; 0x58
 801f22e:	4614      	mov	r4, r2
 801f230:	461d      	mov	r5, r3
 801f232:	da08      	bge.n	801f246 <__swhatbuf_r+0x24>
 801f234:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801f238:	2200      	movs	r2, #0
 801f23a:	602a      	str	r2, [r5, #0]
 801f23c:	061a      	lsls	r2, r3, #24
 801f23e:	d410      	bmi.n	801f262 <__swhatbuf_r+0x40>
 801f240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f244:	e00e      	b.n	801f264 <__swhatbuf_r+0x42>
 801f246:	466a      	mov	r2, sp
 801f248:	f000 f8c4 	bl	801f3d4 <_fstat_r>
 801f24c:	2800      	cmp	r0, #0
 801f24e:	dbf1      	blt.n	801f234 <__swhatbuf_r+0x12>
 801f250:	9a01      	ldr	r2, [sp, #4]
 801f252:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f256:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f25a:	425a      	negs	r2, r3
 801f25c:	415a      	adcs	r2, r3
 801f25e:	602a      	str	r2, [r5, #0]
 801f260:	e7ee      	b.n	801f240 <__swhatbuf_r+0x1e>
 801f262:	2340      	movs	r3, #64	; 0x40
 801f264:	2000      	movs	r0, #0
 801f266:	6023      	str	r3, [r4, #0]
 801f268:	b016      	add	sp, #88	; 0x58
 801f26a:	bd70      	pop	{r4, r5, r6, pc}

0801f26c <__smakebuf_r>:
 801f26c:	898b      	ldrh	r3, [r1, #12]
 801f26e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f270:	079d      	lsls	r5, r3, #30
 801f272:	4606      	mov	r6, r0
 801f274:	460c      	mov	r4, r1
 801f276:	d507      	bpl.n	801f288 <__smakebuf_r+0x1c>
 801f278:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f27c:	6023      	str	r3, [r4, #0]
 801f27e:	6123      	str	r3, [r4, #16]
 801f280:	2301      	movs	r3, #1
 801f282:	6163      	str	r3, [r4, #20]
 801f284:	b002      	add	sp, #8
 801f286:	bd70      	pop	{r4, r5, r6, pc}
 801f288:	ab01      	add	r3, sp, #4
 801f28a:	466a      	mov	r2, sp
 801f28c:	f7ff ffc9 	bl	801f222 <__swhatbuf_r>
 801f290:	9900      	ldr	r1, [sp, #0]
 801f292:	4605      	mov	r5, r0
 801f294:	4630      	mov	r0, r6
 801f296:	f7fe ff61 	bl	801e15c <_malloc_r>
 801f29a:	b948      	cbnz	r0, 801f2b0 <__smakebuf_r+0x44>
 801f29c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f2a0:	059a      	lsls	r2, r3, #22
 801f2a2:	d4ef      	bmi.n	801f284 <__smakebuf_r+0x18>
 801f2a4:	f023 0303 	bic.w	r3, r3, #3
 801f2a8:	f043 0302 	orr.w	r3, r3, #2
 801f2ac:	81a3      	strh	r3, [r4, #12]
 801f2ae:	e7e3      	b.n	801f278 <__smakebuf_r+0xc>
 801f2b0:	4b0d      	ldr	r3, [pc, #52]	; (801f2e8 <__smakebuf_r+0x7c>)
 801f2b2:	62b3      	str	r3, [r6, #40]	; 0x28
 801f2b4:	89a3      	ldrh	r3, [r4, #12]
 801f2b6:	6020      	str	r0, [r4, #0]
 801f2b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f2bc:	81a3      	strh	r3, [r4, #12]
 801f2be:	9b00      	ldr	r3, [sp, #0]
 801f2c0:	6163      	str	r3, [r4, #20]
 801f2c2:	9b01      	ldr	r3, [sp, #4]
 801f2c4:	6120      	str	r0, [r4, #16]
 801f2c6:	b15b      	cbz	r3, 801f2e0 <__smakebuf_r+0x74>
 801f2c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f2cc:	4630      	mov	r0, r6
 801f2ce:	f000 f893 	bl	801f3f8 <_isatty_r>
 801f2d2:	b128      	cbz	r0, 801f2e0 <__smakebuf_r+0x74>
 801f2d4:	89a3      	ldrh	r3, [r4, #12]
 801f2d6:	f023 0303 	bic.w	r3, r3, #3
 801f2da:	f043 0301 	orr.w	r3, r3, #1
 801f2de:	81a3      	strh	r3, [r4, #12]
 801f2e0:	89a0      	ldrh	r0, [r4, #12]
 801f2e2:	4305      	orrs	r5, r0
 801f2e4:	81a5      	strh	r5, [r4, #12]
 801f2e6:	e7cd      	b.n	801f284 <__smakebuf_r+0x18>
 801f2e8:	0801dea9 	.word	0x0801dea9

0801f2ec <_realloc_r>:
 801f2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f2f0:	4680      	mov	r8, r0
 801f2f2:	4614      	mov	r4, r2
 801f2f4:	460e      	mov	r6, r1
 801f2f6:	b921      	cbnz	r1, 801f302 <_realloc_r+0x16>
 801f2f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f2fc:	4611      	mov	r1, r2
 801f2fe:	f7fe bf2d 	b.w	801e15c <_malloc_r>
 801f302:	b92a      	cbnz	r2, 801f310 <_realloc_r+0x24>
 801f304:	f7ff fa1e 	bl	801e744 <_free_r>
 801f308:	4625      	mov	r5, r4
 801f30a:	4628      	mov	r0, r5
 801f30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f310:	f000 f882 	bl	801f418 <_malloc_usable_size_r>
 801f314:	4284      	cmp	r4, r0
 801f316:	4607      	mov	r7, r0
 801f318:	d802      	bhi.n	801f320 <_realloc_r+0x34>
 801f31a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f31e:	d812      	bhi.n	801f346 <_realloc_r+0x5a>
 801f320:	4621      	mov	r1, r4
 801f322:	4640      	mov	r0, r8
 801f324:	f7fe ff1a 	bl	801e15c <_malloc_r>
 801f328:	4605      	mov	r5, r0
 801f32a:	2800      	cmp	r0, #0
 801f32c:	d0ed      	beq.n	801f30a <_realloc_r+0x1e>
 801f32e:	42bc      	cmp	r4, r7
 801f330:	4622      	mov	r2, r4
 801f332:	4631      	mov	r1, r6
 801f334:	bf28      	it	cs
 801f336:	463a      	movcs	r2, r7
 801f338:	f7fe febf 	bl	801e0ba <memcpy>
 801f33c:	4631      	mov	r1, r6
 801f33e:	4640      	mov	r0, r8
 801f340:	f7ff fa00 	bl	801e744 <_free_r>
 801f344:	e7e1      	b.n	801f30a <_realloc_r+0x1e>
 801f346:	4635      	mov	r5, r6
 801f348:	e7df      	b.n	801f30a <_realloc_r+0x1e>

0801f34a <_raise_r>:
 801f34a:	291f      	cmp	r1, #31
 801f34c:	b538      	push	{r3, r4, r5, lr}
 801f34e:	4604      	mov	r4, r0
 801f350:	460d      	mov	r5, r1
 801f352:	d904      	bls.n	801f35e <_raise_r+0x14>
 801f354:	2316      	movs	r3, #22
 801f356:	6003      	str	r3, [r0, #0]
 801f358:	f04f 30ff 	mov.w	r0, #4294967295
 801f35c:	bd38      	pop	{r3, r4, r5, pc}
 801f35e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f360:	b112      	cbz	r2, 801f368 <_raise_r+0x1e>
 801f362:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f366:	b94b      	cbnz	r3, 801f37c <_raise_r+0x32>
 801f368:	4620      	mov	r0, r4
 801f36a:	f000 f831 	bl	801f3d0 <_getpid_r>
 801f36e:	462a      	mov	r2, r5
 801f370:	4601      	mov	r1, r0
 801f372:	4620      	mov	r0, r4
 801f374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f378:	f000 b818 	b.w	801f3ac <_kill_r>
 801f37c:	2b01      	cmp	r3, #1
 801f37e:	d00a      	beq.n	801f396 <_raise_r+0x4c>
 801f380:	1c59      	adds	r1, r3, #1
 801f382:	d103      	bne.n	801f38c <_raise_r+0x42>
 801f384:	2316      	movs	r3, #22
 801f386:	6003      	str	r3, [r0, #0]
 801f388:	2001      	movs	r0, #1
 801f38a:	e7e7      	b.n	801f35c <_raise_r+0x12>
 801f38c:	2400      	movs	r4, #0
 801f38e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f392:	4628      	mov	r0, r5
 801f394:	4798      	blx	r3
 801f396:	2000      	movs	r0, #0
 801f398:	e7e0      	b.n	801f35c <_raise_r+0x12>
	...

0801f39c <raise>:
 801f39c:	4b02      	ldr	r3, [pc, #8]	; (801f3a8 <raise+0xc>)
 801f39e:	4601      	mov	r1, r0
 801f3a0:	6818      	ldr	r0, [r3, #0]
 801f3a2:	f7ff bfd2 	b.w	801f34a <_raise_r>
 801f3a6:	bf00      	nop
 801f3a8:	24000034 	.word	0x24000034

0801f3ac <_kill_r>:
 801f3ac:	b538      	push	{r3, r4, r5, lr}
 801f3ae:	4d07      	ldr	r5, [pc, #28]	; (801f3cc <_kill_r+0x20>)
 801f3b0:	2300      	movs	r3, #0
 801f3b2:	4604      	mov	r4, r0
 801f3b4:	4608      	mov	r0, r1
 801f3b6:	4611      	mov	r1, r2
 801f3b8:	602b      	str	r3, [r5, #0]
 801f3ba:	f7e1 ff95 	bl	80012e8 <_kill>
 801f3be:	1c43      	adds	r3, r0, #1
 801f3c0:	d102      	bne.n	801f3c8 <_kill_r+0x1c>
 801f3c2:	682b      	ldr	r3, [r5, #0]
 801f3c4:	b103      	cbz	r3, 801f3c8 <_kill_r+0x1c>
 801f3c6:	6023      	str	r3, [r4, #0]
 801f3c8:	bd38      	pop	{r3, r4, r5, pc}
 801f3ca:	bf00      	nop
 801f3cc:	2405eb18 	.word	0x2405eb18

0801f3d0 <_getpid_r>:
 801f3d0:	f7e1 bf82 	b.w	80012d8 <_getpid>

0801f3d4 <_fstat_r>:
 801f3d4:	b538      	push	{r3, r4, r5, lr}
 801f3d6:	4d07      	ldr	r5, [pc, #28]	; (801f3f4 <_fstat_r+0x20>)
 801f3d8:	2300      	movs	r3, #0
 801f3da:	4604      	mov	r4, r0
 801f3dc:	4608      	mov	r0, r1
 801f3de:	4611      	mov	r1, r2
 801f3e0:	602b      	str	r3, [r5, #0]
 801f3e2:	f7e1 ffe2 	bl	80013aa <_fstat>
 801f3e6:	1c43      	adds	r3, r0, #1
 801f3e8:	d102      	bne.n	801f3f0 <_fstat_r+0x1c>
 801f3ea:	682b      	ldr	r3, [r5, #0]
 801f3ec:	b103      	cbz	r3, 801f3f0 <_fstat_r+0x1c>
 801f3ee:	6023      	str	r3, [r4, #0]
 801f3f0:	bd38      	pop	{r3, r4, r5, pc}
 801f3f2:	bf00      	nop
 801f3f4:	2405eb18 	.word	0x2405eb18

0801f3f8 <_isatty_r>:
 801f3f8:	b538      	push	{r3, r4, r5, lr}
 801f3fa:	4d06      	ldr	r5, [pc, #24]	; (801f414 <_isatty_r+0x1c>)
 801f3fc:	2300      	movs	r3, #0
 801f3fe:	4604      	mov	r4, r0
 801f400:	4608      	mov	r0, r1
 801f402:	602b      	str	r3, [r5, #0]
 801f404:	f7e1 ffe1 	bl	80013ca <_isatty>
 801f408:	1c43      	adds	r3, r0, #1
 801f40a:	d102      	bne.n	801f412 <_isatty_r+0x1a>
 801f40c:	682b      	ldr	r3, [r5, #0]
 801f40e:	b103      	cbz	r3, 801f412 <_isatty_r+0x1a>
 801f410:	6023      	str	r3, [r4, #0]
 801f412:	bd38      	pop	{r3, r4, r5, pc}
 801f414:	2405eb18 	.word	0x2405eb18

0801f418 <_malloc_usable_size_r>:
 801f418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f41c:	1f18      	subs	r0, r3, #4
 801f41e:	2b00      	cmp	r3, #0
 801f420:	bfbc      	itt	lt
 801f422:	580b      	ldrlt	r3, [r1, r0]
 801f424:	18c0      	addlt	r0, r0, r3
 801f426:	4770      	bx	lr

0801f428 <_init>:
 801f428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f42a:	bf00      	nop
 801f42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f42e:	bc08      	pop	{r3}
 801f430:	469e      	mov	lr, r3
 801f432:	4770      	bx	lr

0801f434 <_fini>:
 801f434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f436:	bf00      	nop
 801f438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f43a:	bc08      	pop	{r3}
 801f43c:	469e      	mov	lr, r3
 801f43e:	4770      	bx	lr
